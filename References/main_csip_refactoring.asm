

;
;     *************************************************************************ͻ
;   *	This file is generated by The Interactive Disassembler (IDA)	      *
;   *	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	      *
;   *			 Licensed to: Freeware version			      *%s
;     *************************************************************************ͼ
;
; Input	MD5   :	EE3B538921250E563EF9665463601543

; File Name   :	C:\Temp\KOEI\MAIN.EXE
; Format      :	MS-DOS executable (EXE)
; Base Address:	1000h Range: 10000h-4F0F0h Loaded length: 3E871h
; Entry	Point :	4BA9:10


unicode		macro page,string,zero
irpc c,<string>
db '&c', page
endm
ifnb <zero>
dw zero
endif
endm

.686p
.mmx
.model large

;     ***************************************************************************

; Segment type:	Pure data
dseg		segment	para public 'DATA' use16
assume cs:dseg
db 0
byte_10001	db 0			; DATA XREF: dseg:2ACD  o
_0002_		dw 0			; DATA XREF: dseg:34DC  r
byte_10004	db 0
db 0
byte_10006	db 0
db 0
db 0
db 0
byte_1000A	db 0
byte_1000B	db 0
byte_1000C	db 0
byte_1000D	db 0
byte_1000E	db 0
;     ***************************************************************************

loc_1000F:		 /* DOS offset ---> 76C:F */
add	[di-75h], dl
in	al, dx
push	si

loc_10014:		 /* DOS offset ---> 76D:4 */
push	di

loc_10015:		 /* DOS offset ---> 76D:5 */
mov	ax, ds

loc_10017:		 /* DOS offset ---> 76D:7 */
mov	es, ax

loc_10019:				; DATA XREF: dseg:3B010  r		 /* DOS offset ---> 76D:9 */
mov	ds, word ptr [bp+6]

loc_1001C:				; CODE XREF: game_ruler_hos_tru_table_query_sub:loc_1FFF6  j		 /* DOS offset ---> 76D:C */
mov	si, [bp+8]

loc_1001F:		 /* DOS offset ---> 76D:F */
mov	di, [bp+0Ah]

loc_10022:		 /* DOS offset ---> 76E:2 */
mov	cx, [bp+0Ch]

loc_10025:		 /* DOS offset ---> 76E:5 */
rep movsb

loc_10027:		 /* DOS offset ---> 76E:7 */
mov	ax, es

loc_10029:		 /* DOS offset ---> 76E:9 */
mov	ds, ax

loc_1002B:		 /* DOS offset ---> 76E:B */
pop	di

loc_1002C:		 /* DOS offset ---> 76E:C */
pop	si

loc_1002D:		 /* DOS offset ---> 76E:D */
pop	bp

locret_1002E:
retf
;     ***************************************************************************

loc_1002F:		 /* DOS offset ---> 76E:F */
mov	ah, 0Dh

loc_10031:				; DOS -	DISK RESET		 /* DOS offset ---> 76F:1 */
int	21h

loc_10033:		 /* DOS offset ---> 76F:3 */
mov	bx, 40h	; '@'

loc_10036:		 /* DOS offset ---> 76F:6 */
mov	es, bx

loc_10038:		 /* DOS offset ---> 76F:8 */
mov	byte ptr es:[bx], 5

locret_1003C:
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_003D		proc far		 /* DOS offset ---> 76F:D */

arg_2		= word ptr  6

cli
push	bp

loc_1003F:				; CODE XREF: game_ruler_hos_tru_table_query_sub+180  j		 /* DOS offset ---> 76F:F */
mov	bp, sp

loc_10041:		 /* DOS offset ---> 770:1 */
mov	ax, [bp+arg_2]
;     ***************************************************************************
year_value	dw 13Dh			; DATA XREF: game_gfx_display_month+10  r
; game_spy_forged_letter-FFAA  r	...
month_value	db 0			; DATA XREF: game_gfx_display_month:loc_14EFC  r
; game_gfx_display_month:loc_14F24  r ...
byte_10047	db 75h			; DATA XREF: game_spy_rival_tigers_send_whom-FEF7  w
; game_start_new_game_sub_3+33  w ...
db    9
;     ***************************************************************************
in	al, 61h		; PC/XT	PPI port B bits:
; 0: Tmr 2 gate	    *** OR	03H=spkr ON
; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
; 3: 1=read high switches
; 4: 0=enable RAM parity checking
; 5: 0=enable I/O channel check
; 6: 0=hold keyboard clock low
; 7: 0=enable kbrd
or	al, 3

loc_1004D:				; PC/XT	PPI port B bits:		 /* DOS offset ---> 770:D */
out	61h, al		; 0: Tmr 2 gate	    *** OR	03H=spkr ON
; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
; 3: 1=read high switches
; 4: 0=enable RAM parity checking
; 5: 0=enable I/O channel check
; 6: 0=hold keyboard clock low
; 7: 0=enable kbrd

loc_1004F:		 /* DOS offset ---> 770:F */
jmp	short loc_10058
;     ***************************************************************************
nop
in	al, 61h		; PC/XT	PPI port B bits:
; 0: Tmr 2 gate	    *** OR	03H=spkr ON
; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
; 3: 1=read high switches
; 4: 0=enable RAM parity checking
; 5: 0=enable I/O channel check
; 6: 0=hold keyboard clock low
; 7: 0=enable kbrd

loc_10054:		 /* DOS offset ---> 771:4 */
and	al, 0FCh

loc_10056:				; DATA XREF: dseg:C9D6  r		 /* DOS offset ---> 771:6 */
out	61h, al		; PC/XT	PPI port B bits:
; 0: Tmr 2 gate	    *** OR	03H=spkr ON
; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
; 3: 1=read high switches
; 4: 0=enable RAM parity checking
; 5: 0=enable I/O channel check
; 6: 0=hold keyboard clock low
; 7: 0=enable kbrd

loc_10058:				; CODE XREF: s_003D:loc_1004F  j		 /* DOS offset ---> 771:8 */
pop	bp
sti

locret_1005A:
retf
s_003D		endp		 /* DOS offset ---> 76F:D */


;     *************** S U B	R O U T	I N E     ***************************************


system_keyboard_input_query proc far
push	ds

loc_1005C:		 /* DOS offset ---> 771:C */
mov	ax, 40h	; '@'

loc_1005F:		 /* DOS offset ---> 771:F */
mov	ds, ax

loc_10061:		 /* DOS offset ---> 772:1 */
or	byte ptr ds:17h, 20h

loc_10066:		 /* DOS offset ---> 772:6 */
pop	ds
mov	ah, 1

loc_10069:				; KEYBOARD - CHECK BUFFER, DO NOT CLEAR		 /* DOS offset ---> 772:9 */
int	16h		; Return: ZF clear if character	in buffer
; AH = scan code, AL = character
; ZF set if no character in buffer

loc_1006B:		 /* DOS offset ---> 772:B */
jz	short loc_10071

loc_1006D:		 /* DOS offset ---> 772:D */
mov	ax, 1
retf
;     ***************************************************************************

loc_10071:				; CODE XREF: system_keyboard_input_query:loc_1006B  j		 /* DOS offset ---> 773:1 */
mov	ax, 0
retf
system_keyboard_input_query endp


;     *************** S U B	R O U T	I N E     ***************************************


system_keyboard_read_buffer proc far
mov	ah, 0

loc_10077:				; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY		 /* DOS offset ---> 773:7 */
int	16h		; Return: AH = scan code, AL = character

loc_10079:		 /* DOS offset ---> 773:9 */
cmp	al, 0
jnz	short KB_Key_Enter

loc_1007D:		 /* DOS offset ---> 773:D */
cmp	ah, 53h	; 'S'

loc_10080:				; DATA XREF: s_6138:loc_1614A  r		 /* DOS offset ---> 774:0 */
jnz	short KB_Key_Comp_1

loc_10082:		 /* DOS offset ---> 774:2 */
mov	al, 8
jmp	short KB_Key_Enter
;     ***************************************************************************

loc_10086:		 /* DOS offset ---> 774:6 */
nop

KB_Key_Comp_1:				; CODE XREF: system_keyboard_read_buffer:loc_10080  j
cmp	ah, 48h	; 'H'
jnz	short KB_Key_Comp_2

loc_1008C:		 /* DOS offset ---> 774:C */
mov	al, 1Eh

loc_1008E:		 /* DOS offset ---> 774:E */
jmp	short KB_Key_Enter
;     ***************************************************************************

loc_10090:		 /* DOS offset ---> 775:0 */
nop

KB_Key_Comp_2:				; CODE XREF: system_keyboard_read_buffer+15  j
cmp	ah, 50h	; 'P'

loc_10094:		 /* DOS offset ---> 775:4 */
jnz	short KB_Key_Comp_3

loc_10096:		 /* DOS offset ---> 775:6 */
mov	al, 1Fh

loc_10098:		 /* DOS offset ---> 775:8 */
jmp	short KB_Key_Enter
;     ***************************************************************************
nop

KB_Key_Comp_3:				; CODE XREF: system_keyboard_read_buffer:loc_10094  j
; game_ruler_hos_tru_table_query_sub+1F1  j ...
cmp	ah, 4Bh	; 'K'

loc_1009E:		 /* DOS offset ---> 775:E */
jnz	short KB_Key_Comp_4

loc_100A0:		 /* DOS offset ---> 776:0 */
mov	al, 1Dh
jmp	short KB_Key_Enter
;     ***************************************************************************

loc_100A4:				; CODE XREF: dseg:1F6C2  P		 /* DOS offset ---> 776:4 */
nop

KB_Key_Comp_4:				; CODE XREF: system_keyboard_read_buffer:loc_1009E  j
cmp	ah, 4Dh	; 'M'
jnz	short KB_Key_Enter
mov	al, 1Ch

KB_Key_Enter:				; CODE XREF: system_keyboard_read_buffer+6  j
; system_keyboard_read_buffer+F  j ...
xor	ah, ah

KB_Read_Buffer_Retf:			; CODE XREF: dseg:20159  p dseg:201A7  p
retf
system_keyboard_read_buffer endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_time	proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
push	es
mov	ah, 0

get_time:				; CLOCK	- GET TIME OF DAY
int	1Ah		; Return: CX:DX	= clock	count
; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
; midnight
; Otherwise, AL	> 0

loc_100B7:		 /* DOS offset ---> 777:7 */
mov	word_133F4, dx
add	dx, [bp+arg_0]

loc_100BE:		 /* DOS offset ---> 777:E */
mov	word_133F2, dx
pop	es
pop	bp
retf
system_time	endp


;     *************** S U B	R O U T	I N E     ***************************************


system_time_wait proc far
mov	ah, 0

loc_100C7:				; CLOCK	- GET TIME OF DAY		 /* DOS offset ---> 778:7 */
int	1Ah		; Return: CX:DX	= clock	count
; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
; midnight
; Otherwise, AL	> 0
mov	ax, word_133F4	; [33F4]

wait_entry_001:				; CODE XREF: game_ruler_hos_tru_table_query+16  j
mov	bx, word_133F2	; [33F2]
cmp	ax, bx
ja	short jmp_initial_test
cmp	dx, bx

wait_entry_002:				; CODE XREF: game_ruler_hos_tru_table_query+2C  j
jnb	short jmp_clear_ax

wait_entry_003:				; CODE XREF: game_ruler_hos_tru_table_query+30  j
cmp	dx, ax
jb	short jmp_clear_ax
jmp	short jmp_exit_wait
;     ***************************************************************************

jmp_initial_test:			; CODE XREF: system_time_wait+D  j
cmp	dx, ax

wait_entry_004:				; CODE XREF: dseg:200D7  j
jnb	short jmp_exit_wait
cmp	dx, bx

wait_entry_005:				; CODE XREF: game_ruler_hos_tru_table_query+E8  j
jb	short jmp_exit_wait

jmp_clear_ax:				; CODE XREF: system_time_wait:wait_entry_002  j
; system_time_wait+15  j
sub	ax, ax
retf
;     ***************************************************************************

jmp_exit_wait:				; CODE XREF: system_time_wait+17  j
; system_time_wait:wait_entry_004  j ...
mov	ax, 1
retf
system_time_wait endp

;     ***************************************************************************
push	bp

loc_100EE:				; CODE XREF: game_ruler_hos_tru_table_query+98  j		 /* DOS offset ---> 77A:E */
; game_ruler_hos_tru_table_query+C1  j
mov	bp, sp
push	es
mov	ax, ds
mov	es, ax
mov	dx, [bp+6]
mov	ax, 1002h

loc_100FB:				; - VIDEO - SET	ALL PALETTE REGISTERS (Jr, PS, TANDY 1000, EGA,	VGA)		 /* DOS offset ---> 77B:B */
int	10h		; ES:DX	-> 17-byte palette register list
pop	es
pop	bp

locret_100FF:
retf
;     ***************************************************************************
mov	ah, 19h
int	21h		; DOS -	GET DEFAULT DISK NUMBER
add	al, 41h	; 'A'
; START	OF FUNCTION CHUNK FOR game_ruler_hos_tru_table_query

loc_10106:				; CODE XREF: game_ruler_hos_tru_table_query+54  j		 /* DOS offset ---> 77C:6 */
xor	ah, ah
retf
; END OF FUNCTION CHUNK	FOR game_ruler_hos_tru_table_query
;     ***************************************************************************
push	bp
mov	bp, sp
push	ds
mov	dx, [bp+6]
sub	dh, dh
mov	ah, 1Ch
int	21h		; DOS -	GET ALLOCATION TABLE INFORMATION FOR SPECIFIC DRIVE
; DL = drive number to check (0=default, 1=A, etc)
mov	al, [bx]
sub	al, 0F8h ; '  *'
cmp	al, 3
jle	short loc_10120
sub	al, 2

loc_10120:				; CODE XREF: dseg:011C  j		 /* DOS offset ---> 77E:0 */
sub	ah, ah
pop	ds
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	ah, 48h	; 'H'

loc_1012A:		 /* DOS offset ---> 77E:A */
mov	bx, [bp+6]

loc_1012D:				; DOS -	2+ - ALLOCATE MEMORY		 /* DOS offset ---> 77E:D */
int	21h		; BX = number of 16-byte paragraphs desired
jb	short loc_10133
pop	bp
retf
;     ***************************************************************************

loc_10133:				; CODE XREF: dseg:012F  j		 /* DOS offset ---> 77F:3 */
mov	ax, 0
pop	bp
retf
;     ***************************************************************************

loc_10138:				; DATA XREF: system_video_interrupt:loc_10162  r		 /* DOS offset ---> 77F:8 */
add	[eax+4010001h],	ax
add	ax, 302h
push	es
pop	es
add	[bx+di], dl
adc	al, 15h
adc	dl, [bp+di]
push	ss
pop	ss
add	[bx], dl
pop	ss
pop	ss
pop	ss
pop	ss
pop	ss
pop	ss

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_video_interrupt proc far

arg_2		= word ptr  6
arg_4		= word ptr  8

push	bp
mov	bp, sp

loc_10157:				; CODE XREF: game_ruler_hos_tru_table_query+AB  j		 /* DOS offset ---> 781:7 */
mov	bl, byte ptr word_1CEA2	; ds:[0C42]

loc_1015B:				; CODE XREF: game_ruler_hos_tru_table_query+B2  j		 /* DOS offset ---> 781:B */
and	bl, 1
xor	bh, bh
shl	bx, 1

loc_10162:				; CODE XREF: dseg:2012E  j dseg:20135  j ...		 /* DOS offset ---> 782:2 */
jmp	word ptr cs:loc_10138[bx] ; cs:[bx+2D6F]
;     ***************************************************************************
mov	bx, [bp+arg_2]	; ss:[19BA]

loc_1016A:				; CODE XREF: game_ruler_hos_tru_table_query+7C  j		 /* DOS offset ---> 782:A */
mov	al, cs:[bx+13Ch] ; cs:[2D76]
mov	bx, [bp+arg_4]	; ss:[19BC]
mov	ah, cs:[bx+144h] ; cs:[2D7E]
mov	bx, ax

loc_10179:				; CODE XREF: game_ruler_hos_tru_table_query+D0  j		 /* DOS offset ---> 783:9 */
mov	ax, 1000h
int	10h		; - VIDEO - SET	PALETTE	REGISTER (Jr, PS, TANDY	1000, EGA, VGA)
; BL = palette register	to set
; BH = color value to store
pop	bp

locret_1017F:				; CODE XREF: game_ruler_hos_tru_table_query+D4  j
retf
system_video_interrupt endp

;     ***************************************************************************
mov	bx, [bp+6]
mov	al, cs:[bx+13Ch]
mov	bx, [bp+8]
mov	ah, cs:[bx+14Ch]
; START	OF FUNCTION CHUNK FOR game_ruler_hos_tru_table_query

loc_10190:				; CODE XREF: game_ruler_hos_tru_table_query+24  j		 /* DOS offset ---> 785:0 */
; game_ruler_hos_tru_table_query+7F  j
mov	bx, ax
mov	ax, 1000h

loc_10195:				; - VIDEO - SET	PALETTE	REGISTER (Jr, PS, TANDY	1000, EGA, VGA)		 /* DOS offset ---> 785:5 */
int	10h		; BL = palette register	to set
; BH = color value to store
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_ruler_hos_tru_table_query

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_199		proc far		 /* DOS offset ---> 785:9 */

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	dx, 3D8h
mov	ax, [bp+arg_0]
or	ax, ax
jz	short loc_101AB

loc_101A6:				; CODE XREF: game_war_move_send_whom_query+A  j		 /* DOS offset ---> 786:6 */
mov	al, 1Eh

loc_101A8:				; CODE XREF: game_war_move_send_whom_query+E  j		 /* DOS offset ---> 786:8 */
out	dx, al
jmp	short loc_101AE
;     ***************************************************************************

loc_101AB:				; CODE XREF: s_199+B  j		 /* DOS offset ---> 786:B */
mov	al, 16h
out	dx, al

loc_101AE:				; CODE XREF: s_199+10  j		 /* DOS offset ---> 786:E */
pop	bp
retf
s_199		endp		 /* DOS offset ---> 785:9 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

math_square_root_func proc far

arg_0		= word ptr  6

push	bp

loc_101B1:				; CODE XREF: dseg:2017C  j dseg:20183  j ...		 /* DOS offset ---> 787:1 */
mov	bp, sp
mov	dx, [bp+arg_0]
mov	ax, dx

loc_101B8:				; CODE XREF: dseg:20326  p dseg:20433  p		 /* DOS offset ---> 787:8 */
rol	ah, 1
jnb	short loc_101C1
mov	ax, 0FFFFh
pop	bp
retf
;     ***************************************************************************

loc_101C1:				; CODE XREF: math_square_root_func+A  j		 /* DOS offset ---> 788:1 */
xor	ax, ax
mov	bx, ax
mov	cx, ax
mov	al, 8

loc_101C9:				; CODE XREF: math_square_root_func+4E  j		 /* DOS offset ---> 788:9 */
push	ax
add	dx, dx
adc	cx, cx
add	dx, dx
adc	cx, cx
stc
rcl	bl, 1
rcl	bh, 1
mov	al, cl
sub	al, bl
mov	cl, al

loc_101DD:				; CODE XREF: game_war_move_send_whom_query+9D  j		 /* DOS offset ---> 789:D */
; game_war_move_send_whom_query+B3  j ...
mov	al, ch
sbb	al, bh
mov	ch, al
mov	al, 2
jnb	short loc_101F5
mov	al, cl
add	al, bl
mov	cl, al
mov	al, ch
adc	al, bh
mov	ch, al

loc_101F3:				; CODE XREF: game_war_move_send_whom_query+50  j		 /* DOS offset ---> 78B:3 */
mov	al, 0

loc_101F5:				; CODE XREF: math_square_root_func+35  j		 /* DOS offset ---> 78B:5 */
or	al, bl
and	al, 0FEh
mov	bl, al
pop	ax
dec	al
jnz	short loc_101C9

loc_10200:		 /* DOS offset ---> 78C:0 */
mov	al, bh
rcr	al, 1
mov	dh, al

loc_10206:				; CODE XREF: dseg:201E6  j		 /* DOS offset ---> 78C:6 */
mov	al, bl
rcr	al, 1
mov	dl, al
mov	ah, 0
pop	bp
retf
math_square_root_func endp

;     ***************************************************************************
xor	ax, ax

locret_10212:				; CODE XREF: dseg:201DB  j dseg:201E1  j
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_file_delete proc	far		; CODE XREF: game_war_move_send_whom_query+78  j

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	dx, [bp+arg_0]

loc_10219:				; CODE XREF: game_war_move_send_whom_query+7E  j		 /* DOS offset ---> 78D:9 */
mov	ah, 41h
int	21h		; DOS -	2+ - DELETE A FILE (UNLINK)
; DS:DX	-> ASCIZ pathname of file to delete (no	wildcards allowed)
mov	ax, 0
jnb	short loc_10225
mov	ax, 0FFFFh

loc_10225:				; CODE XREF: system_file_delete+D  j		 /* DOS offset ---> 78E:5 */
pop	bp
retf
system_file_delete endp


;     *************** S U B	R O U T	I N E     ***************************************


s_0227		proc near		; CODE XREF: system_file_close_with_handle+11  p		 /* DOS offset ---> 78E:7 */
; system_file_read_with_handle:loc_10272  p ...
push	ss
pop	ds
nop
push	cs
call	near ptr system_graphics_buffer_back_clear
mov	ax, 33F6h
push	ax

loc_10232:				; CODE XREF: s_0227:loc_10232  j		 /* DOS offset ---> 78F:2 */
; dseg:2022E  j
jmp	short loc_10232
s_0227		endp		 /* DOS offset ---> 78E:7 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_file_open_with_handle proc far	; CODE XREF: system_file_open_close_with_handle+D  p

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
mov	dx, [bp+arg_0]
mov	ax, [bp+arg_2]
mov	ah, 3Dh
int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
; DS:DX	-> ASCIZ filename
; AL = access mode
; 0 - read, 1 -	write, 2 - read	& write
jnb	short loc_10246

loc_10243:				; CODE XREF: dseg:20280  j		 /* DOS offset ---> 790:3 */
mov	ax, 0FFFFh

loc_10246:				; CODE XREF: system_file_open_with_handle+D  j		 /* DOS offset ---> 790:6 */
pop	bp
retf
system_file_open_with_handle endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_file_close_with_handle proc far	; CODE XREF: system_file_open_close_with_handle:loc_10304  p

arg_0		= word ptr  6

push	bp
mov	bp, sp

loc_1024B:				; CODE XREF: game_war_move_send_whom_query+A4  j		 /* DOS offset ---> 790:B */
mov	bx, [bp+arg_0]
mov	ah, 3Eh
int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
; BX = file handle
mov	ax, 0
jnb	short loc_1025C
nop
push	cs
call	s_0227

loc_1025C:				; CODE XREF: system_file_close_with_handle+D  j		 /* DOS offset ---> 791:C */
pop	bp
retf
system_file_close_with_handle endp ; sp	= -2


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_file_read_with_handle proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
mov	cx, [bp+arg_4]

loc_10267:				; CODE XREF: game_war_move_send_whom_query+BF  j		 /* DOS offset ---> 792:7 */
mov	dx, [bp+arg_2]
mov	ah, 3Fh
int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
; BX = file handle, CX = number	of bytes to read
; DS:DX	-> buffer
jnb	short loc_10275
nop
push	cs

loc_10272:				; CODE XREF: game_war_move_send_whom_query+D8  j		 /* DOS offset ---> 793:2 */
call	s_0227

loc_10275:				; CODE XREF: system_file_read_with_handle+10  j		 /* DOS offset ---> 793:5 */
pop	bp

locret_10276:				; CODE XREF: dseg:20249  j dseg:20256  j ...
retf
system_file_read_with_handle endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_file_read_with_handle_2 proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp
mov	bp, sp
push	ds
mov	bx, [bp+arg_0]
mov	cx, [bp+arg_6]

loc_10281:				; CODE XREF: game_war_move_send_whom_query+CF  j		 /* DOS offset ---> 794:1 */
; dseg:20241  j ...
mov	ds, [bp+arg_2]
mov	dx, [bp+arg_4]
mov	ah, 3Fh
int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
; BX = file handle, CX = number	of bytes to read
; DS:DX	-> buffer

loc_1028B:				; CODE XREF: dseg:20286  j		 /* DOS offset ---> 794:B */
jnb	short loc_10292
nop

loc_1028E:				; CODE XREF: game_war_move_send_whom_query+F3  j		 /* DOS offset ---> 794:E */
push	cs
call	s_0227

loc_10292:				; CODE XREF: system_file_read_with_handle_2:loc_1028B  j		 /* DOS offset ---> 795:2 */
pop	ds
pop	bp
retf
system_file_read_with_handle_2 endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_file_write_with_handle proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

push	bp
mov	bp, sp

loc_10298:				; CODE XREF: game_war_move_send_whom_query+FF  j		 /* DOS offset ---> 795:8 */
mov	bx, [bp+arg_0]
mov	cx, [bp+arg_4]
mov	dx, [bp+arg_2]
mov	ah, 40h
int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
jnb	short loc_102AC
nop
push	cs

loc_102A9:				; CODE XREF: dseg:202C0  j		 /* DOS offset ---> 796:9 */
call	s_0227

loc_102AC:				; CODE XREF: system_file_write_with_handle+10  j		 /* DOS offset ---> 796:C */
pop	bp
retf
system_file_write_with_handle endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_file_write_with_handle_2	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp

loc_102AF:				; CODE XREF: game_war_move_send_whom_query+7A  j		 /* DOS offset ---> 796:F */
mov	bp, sp
push	ds
mov	bx, [bp+arg_0]
mov	cx, [bp+arg_6]
mov	ds, [bp+arg_2]

loc_102BB:				; CODE XREF: dseg:202AF  j dseg:202B7  j		 /* DOS offset ---> 797:B */
mov	dx, [bp+arg_4]
mov	ah, 40h
int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer

loc_102C2:				; CODE XREF: dseg:202A7  j		 /* DOS offset ---> 798:2 */
jnb	short loc_102C9
nop
push	cs
call	s_0227

loc_102C9:				; CODE XREF: system_file_write_with_handle_2:loc_102C2  j		 /* DOS offset ---> 798:9 */
pop	ds

loc_102CA:				; CODE XREF: game_war_move_send_whom_query+12D  j		 /* DOS offset ---> 798:A */
pop	bp
retf
system_file_write_with_handle_2	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_file_pointer proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp
mov	bp, sp

loc_102CF:				; CODE XREF: game_war_move_send_whom_query+131  j		 /* DOS offset ---> 798:F */
mov	bx, [bp+arg_0]
mov	cx, [bp+arg_4]
mov	dx, [bp+arg_2]
mov	ax, [bp+arg_6]
mov	ah, 42h
int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
; AL = method:
; 0-from beginnig,1-from current,2-from	end
jnb	short loc_102E6
nop

loc_102E2:				; CODE XREF: game_war_move_send_whom_query:loc_20216  j		 /* DOS offset ---> 79A:2 */
push	cs
call	s_0227

loc_102E6:				; CODE XREF: system_file_pointer+13  j		 /* DOS offset ---> 79A:6 */
pop	bp
retf
system_file_pointer endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_file_open_close_with_handle proc	far

arg_0		= word ptr  6

push	bp

loc_102E9:		 /* DOS offset ---> 79A:9 */
mov	bp, sp
mov	ax, 0
push	ax
mov	ax, [bp+arg_0]
push	ax
nop
push	cs
call	near ptr system_file_open_with_handle
pop	bx
pop	bx
xor	bx, bx
cmp	ax, 0FFFFh
jz	short loc_10312
push	ax
nop
push	cs

loc_10304:				; CODE XREF: dseg:202FB  j		 /* DOS offset ---> 79C:4 */
call	near ptr system_file_close_with_handle
pop	bx
xor	bx, bx

loc_1030A:				; CODE XREF: game_advisor_display+1D  j		 /* DOS offset ---> 79C:A */
cmp	ax, 0FFFFh
jz	short loc_10312
mov	bx, 1

loc_10312:				; CODE XREF: system_file_open_close_with_handle+17  j		 /* DOS offset ---> 79D:2 */
; system_file_open_close_with_handle+25  j
mov	ax, bx
pop	bp
retf
system_file_open_close_with_handle endp

;     ***************************************************************************
push	bp
mov	bp, sp
push	es
mov	ah, 49h	; 'I'
mov	es, word ptr [bp+6]

loc_1031F:				; CODE XREF: game_advisor_display+31  j		 /* DOS offset ---> 79D:F */
; dseg:2030B  j
int	21h		; DOS -	2+ - FREE MEMORY
; ES = segment address of area to be freed
jb	short loc_10328
xor	ax, ax
pop	es
pop	bp
retf
;     ***************************************************************************

loc_10328:				; CODE XREF: dseg:0321  j		 /* DOS offset ---> 79E:8 */
mov	ax, 0FFFFh
pop	es
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_file_create_with_handle proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	dx, [bp+arg_0]
xor	cx, cx
mov	ah, 3Ch
int	21h		; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
; CX = attributes for file
; DS:DX	-> ASCIZ filename (may include drive and path)
jnb	short loc_1033F
mov	ax, 0FFFFh

loc_1033F:				; CODE XREF: system_file_create_with_handle+C  j		 /* DOS offset ---> 79F:F */
pop	bp
retf
system_file_create_with_handle endp

;     ***************************************************************************
push	bp
mov	bp, sp
mov	dx, [bp+6]
mov	cx, 10h
mov	ah, 4Eh
; START	OF FUNCTION CHUNK FOR game_advisor_display

loc_1034C:				; CODE XREF: game_advisor_display+51  j		 /* DOS offset ---> 7A0:C */
int	21h		; DOS -	2+ - FIND FIRST	ASCIZ (FINDFIRST)
; CX = search attributes
; DS:DX	-> ASCIZ filespec
; (drive, path,	and wildcards allowed)
mov	ax, 0
jnb	short loc_10356

loc_10353:				; CODE XREF: dseg:20230  j dseg:20288  j ...		 /* DOS offset ---> 7A1:3 */
mov	ax, 0FFFFh

loc_10356:				; CODE XREF: game_advisor_display-FF99  j		 /* DOS offset ---> 7A1:6 */
pop	bp

locret_10357:				; CODE XREF: game_advisor_display+4B  j
; game_advisor_display+60  j
retn
; END OF FUNCTION CHUNK	FOR game_advisor_display
;     ***************************************************************************

loc_10358:				; CODE XREF: dseg:20507  p		 /* DOS offset ---> 7A1:8 */
push	bp
mov	bp, sp
mov	dx, [bp+6]
mov	ah, 3Bh
int	21h		; DOS -	2+ - CHANGE THE	CURRENT	DIRECTORY (CHDIR)
; DS:DX	-> ASCIZ directory name	(may include drive)
mov	ax, 0
jb	short loc_1036A
mov	ax, 0FFFFh

loc_1036A:				; CODE XREF: dseg:0365  j		 /* DOS offset ---> 7A2:A */
pop	bp
retn
;     ***************************************************************************
add	[bx+di], al
add	al, 5
add	al, [bp+di]
push	es
pop	es
;     ***************************************************************************
off_10374	dw offset loc_103D2	; DATA XREF: system_graphics_top_right_white_bckgnd:loc_103BE  r
dw offset loc_1040A

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_graphics_top_right_white_bckgnd proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

push	bp
mov	bp, sp
push	si
push	di
mov	ax, [bp+arg_0]
cmp	ax, 4Fh	; 'O'

loc_10383:				; CODE XREF: dseg:2037E  j dseg:2047A  j		 /* DOS offset ---> 7A4:3 */
ja	short loc_103C3

loc_10385:		 /* DOS offset ---> 7A4:5 */
mov	di, ax
mov	cx, [bp+arg_4]
cmp	cx, 50h	; 'P'
ja	short loc_103C3
mov	ax, [bp+arg_2]

loc_10392:				; CODE XREF: dseg:2038E  j		 /* DOS offset ---> 7A5:2 */
cmp	ax, 0C7h ; '  *'
ja	short loc_103C3
mov	bx, [bp+arg_6]
cmp	bx, 0C8h ; '  *'
ja	short loc_103C3
push	bx
mov	dx, ax
shl	ax, 1

loc_103A5:				; CODE XREF: dseg:203A0  j dseg:2046B  j		 /* DOS offset ---> 7A6:5 */
shl	ax, 1

loc_103A7:				; CODE XREF: game_advisor_display+1F  j		 /* DOS offset ---> 7A6:7 */
; game_advisor_display+33  j
add	ax, dx
shl	ax, 1
shl	ax, 1
shl	ax, 1

loc_103AF:				; CODE XREF: s_1FC0E-FF56  P s_111D6+95  P ...		 /* DOS offset ---> 7A6:F */
shl	ax, 1
add	di, ax
mov	bl, byte ptr word_1CEA2
and	bl, 1
xor	bh, bh
shl	bx, 1

loc_103BE:				; CODE XREF: dseg:203B7  j		 /* DOS offset ---> 7A7:E */
jmp	cs:off_10374[bx]
;     ***************************************************************************

loc_103C3:				; CODE XREF: system_graphics_top_right_white_bckgnd:loc_10383  j		 /* DOS offset ---> 7A8:3 */
; system_graphics_top_right_white_bckgnd+15  j ...
pop	di
pop	si
pop	bp
mov	ax, 0FFFFh
retf
;     ***************************************************************************
add	[bx+di], al
add	al, 5
add	al, [bp+di]
push	es
pop	es

loc_103D2:				; DATA XREF: dseg:off_10374  o		 /* DOS offset ---> 7A9:2 */
mov	bx, [bp+arg_8]
mov	ah, cs:[bx+36Ch]
pop	bx
push	es

loc_103DC:				; CODE XREF: system_graphics_top_right_white_bckgnd+89  j		 /* DOS offset ---> 7A9:C */
push	cx
push	di

loc_103DE:				; CODE XREF: system_graphics_top_right_white_bckgnd:loc_103F9  j		 /* DOS offset ---> 7A9:E */
mov	si, 0A000h
mov	es, si
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, ah
out	dx, al		; EGA port: sequencer data register

loc_103ED:				; CODE XREF: s_103BC+22  j		 /* DOS offset ---> 7AA:D */
mov	byte ptr es:[di], 0FFh
not	al
out	dx, al		; EGA port: sequencer data register
mov	byte ptr es:[di], 0
inc	di

loc_103F9:				; CODE XREF: dseg:1C117  P dseg:1C192  P ...		 /* DOS offset ---> 7AB:9 */
loop	loc_103DE
pop	di
add	di, 50h	; 'P'
pop	cx
dec	bx
jnz	short loc_103DC
pop	es
pop	di
pop	si
pop	bp
xor	ax, ax
retf
system_graphics_top_right_white_bckgnd endp

;     ***************************************************************************

loc_1040A:				; CODE XREF: dseg:203B1  j		 /* DOS offset ---> 7AC:A */
; DATA XREF: dseg:0376  o
mov	bx, [bp+6]
mov	dx, [bp+8]
nop
push	cs
call	loc_10F59
mov	dx, [bp+0Eh]

loc_10418:				; CODE XREF: game_view_data_order_set+1A  j		 /* DOS offset ---> 7AD:8 */
; dseg:20407  j
cmp	dx, 0

loc_1041B:				; CODE XREF: dseg:203BD  j		 /* DOS offset ---> 7AD:B */
jnz	short loc_10421
mov	al, 0
jmp	short loc_10423
;     ***************************************************************************

loc_10421:				; CODE XREF: dseg:loc_1041B  j		 /* DOS offset ---> 7AE:1 */
mov	al, 0FFh

loc_10423:				; CODE XREF: dseg:041F  j		 /* DOS offset ---> 7AE:3 */
pop	bx
push	es
mov	si, 0B800h
mov	es, si
; START	OF FUNCTION CHUNK FOR game_view_data_order_set

loc_1042A:				; CODE XREF: game_view_data_order_set-FFB5  j		 /* DOS offset ---> 7AE:A */
push	cx
push	di

loc_1042C:				; CODE XREF: game_view_data_order_set-FFCD  j		 /* DOS offset ---> 7AE:C */
stosb
loop	loc_1042C
pop	di
cmp	di, 2000h

loc_10434:				; CODE XREF: game_view_data_order_set+35  j		 /* DOS offset ---> 7AF:4 */
; game_view_data_order_set+BE  j
jb	short loc_1043F
sub	di, 2000h
add	di, 50h	; 'P'
jmp	short loc_10443
;     ***************************************************************************

loc_1043F:				; CODE XREF: game_view_data_order_set:loc_10434  j		 /* DOS offset ---> 7AF:F */
add	di, 2000h

loc_10443:				; CODE XREF: game_view_data_order_set-FFBD  j		 /* DOS offset ---> 7B0:3 */
pop	cx
dec	bx
jnz	short loc_1042A
pop	es
pop	di
pop	si
pop	bp
xor	ax, ax
retf
; END OF FUNCTION CHUNK	FOR game_view_data_order_set
;     ***************************************************************************

loc_1044E:				; DATA XREF: dseg:loc_10460  r		 /* DOS offset ---> 7B0:E */
db	26h
add	ax, 465h
push	bp
mov	bp, sp
mov	bl, byte ptr word_1CEA2
and	bl, 1
xor	bh, bh
shl	bx, 1

loc_10460:				; CODE XREF: dseg:2040E  j dseg:2042A  j ...		 /* DOS offset ---> 7B2:0 */
jmp	word ptr cs:loc_1044E[bx]
;     ***************************************************************************

loc_10465:		 /* DOS offset ---> 7B2:5 */
push	si
; START	OF FUNCTION CHUNK FOR game_view_data_order_set

loc_10466:				; CODE XREF: game_view_data_order_set+AD  j		 /* DOS offset ---> 7B2:6 */
push	di
mov	ax, [bp+arg_2]
cmp	ax, 27Fh

loc_1046D:				; CODE XREF: dseg:20390  j dseg:203A2  j ...		 /* DOS offset ---> 7B2:D */
ja	short loc_104A4
mov	di, ax
mov	cx, [bp+arg_4]
or	cx, cx
jz	short loc_104A4
add	ax, cx
jb	short loc_104A4

loc_1047C:				; CODE XREF: dseg:20380  j dseg:20478  j		 /* DOS offset ---> 7B3:C */
cmp	ax, 280h
ja	short loc_104A4
dec	cx
shr	cx, 1
shr	cx, 1
shr	cx, 1

loc_10488:				; CODE XREF: dseg:20481  j		 /* DOS offset ---> 7B4:8 */
mov	ch, cl

loc_1048A:				; CODE XREF: dseg:20503  p		 /* DOS offset ---> 7B4:A */
mov	ax, [bp+8]
cmp	ax, 0C7h ; '  *'
ja	short loc_104A4
mov	bx, ax
mov	ax, [bp+arg_8]
or	ax, ax
jz	short loc_104A4
add	ax, bx
jb	short loc_104A4

loc_1049F:				; CODE XREF: game_view_data_order_set+80  j		 /* DOS offset ---> 7B5:F */
cmp	ax, 0C8h ; '  *'
jbe	short loc_104AB

loc_104A4:				; CODE XREF: game_view_data_order_set:loc_1046D  j		 /* DOS offset ---> 7B6:4 */
; game_view_data_order_set-FF84  j ...
mov	ax, 0FFFFh
pop	di
pop	si

loc_104A9:				; CODE XREF: game_view_data_order_set+61  j		 /* DOS offset ---> 7B6:9 */
pop	bp
retf
;     ***************************************************************************

loc_104AB:				; CODE XREF: game_view_data_order_set-FF58  j		 /* DOS offset ---> 7B6:B */
push	di
mov	dx, bx
shr	di, 1

loc_104B0:				; CODE XREF: dseg:204DF  j		 /* DOS offset ---> 7B7:0 */
shr	di, 1

loc_104B2:		 /* DOS offset ---> 7B7:2 */
shr	di, 1
mov	bx, di
nop
push	cs
call	loc_10F59

loc_104BB:				; CODE XREF: game_view_data_order_set+37  j		 /* DOS offset ---> 7B7:B */
; game_view_data_order_set+BC  j
pop	ax
and	ax, 7
mov	cl, al
mov	ax, [bp+0Eh]
cmp	ah, 4

loc_104C7:				; CODE XREF: game_view_data_order_set+EB  j		 /* DOS offset ---> 7B8:7 */
jnz	short loc_104CB
xor	ah, ah

loc_104CB:				; CODE XREF: game_view_data_order_set:loc_104C7  j		 /* DOS offset ---> 7B8:B */
nop
push	cs

loc_104CD:		 /* DOS offset ---> 7B8:D */
call	near ptr system_graphics_flash_graphic
mov	si, [bp+arg_A]

loc_104D3:				; CODE XREF: game_view_data_order_set:loc_1051E  j		 /* DOS offset ---> 7B9:3 */
push	di
push	cx

loc_104D5:				; CODE XREF: dseg:204BC  j dseg:204C6  j ...		 /* DOS offset ---> 7B9:5 */
mov	al, [si]
mov	ah, 0
shr	ax, cl

loc_104DB:				; CODE XREF: game_view_data_order_set+CC  j		 /* DOS offset ---> 7B9:B */
nop
push	cs
call	s_12C0
inc	di

loc_104E1:				; CODE XREF: game_view_data_order_set:loc_104F4  j		 /* DOS offset ---> 7BA:1 */
; dseg:204AF  j
or	ch, ch
jz	short loc_104F6
mov	ax, [si]

loc_104E7:				; CODE XREF: game_view_data_order_set+D5  j		 /* DOS offset ---> 7BA:7 */
inc	si
xchg	ah, al
shr	ax, cl
nop

loc_104ED:				; CODE XREF: dseg:204A3  j		 /* DOS offset ---> 7BA:D */
push	cs

loc_104EE:				; CODE XREF: game_view_data_order_set+1C  j		 /* DOS offset ---> 7BA:E */
call	s_12C0
inc	di
dec	ch

loc_104F4:				; CODE XREF: dseg:1DE1D  P dseg:1ED9F  P ...		 /* DOS offset ---> 7BB:4 */
jmp	short loc_104E1
;     ***************************************************************************

loc_104F6:				; CODE XREF: game_view_data_order_set-FF17  j		 /* DOS offset ---> 7BB:6 */
or	cl, cl
jz	short loc_10505
mov	ah, [si]

loc_104FC:				; CODE XREF: dseg:204F1  j		 /* DOS offset ---> 7BB:C */
mov	al, 0
shr	ax, cl
nop
push	cs

loc_10502:		 /* DOS offset ---> 7BC:2 */
call	s_12C0

loc_10505:				; CODE XREF: game_view_data_order_set-FF02  j		 /* DOS offset ---> 7BC:5 */
inc	si
pop	cx
pop	di
cmp	di, 2000h
jb	short loc_10517
sub	di, 2000h
add	di, 50h	; 'P'
jmp	short loc_1051B
;     ***************************************************************************

loc_10517:				; CODE XREF: game_view_data_order_set-FEEE  j		 /* DOS offset ---> 7BD:7 */
add	di, 2000h

loc_1051B:				; CODE XREF: game_view_data_order_set-FEE5  j		 /* DOS offset ---> 7BD:B */
dec	[bp+arg_8]

loc_1051E:				; CODE XREF: s_104F4+13  j s_104F4+23  j		 /* DOS offset ---> 7BD:E */
jnz	short loc_104D3
xor	ax, ax

loc_10522:				; CODE XREF: dseg:20566  j		 /* DOS offset ---> 7BE:2 */
pop	di
; END OF FUNCTION CHUNK	FOR game_view_data_order_set
;     ***************************************************************************
db  5Eh	; ^
;     ***************************************************************************

loc_10524:				; CODE XREF: s_1FC0E:loc_1FC05  P		 /* DOS offset ---> 7BE:4 */
; s_1FC80-FF1A  P ...
pop	bp
;     ***************************************************************************
db 0CBh	;   *
;     ***************************************************************************

loc_10526:		 /* DOS offset ---> 7BE:6 */
push	si
push	di
mov	ax, [bp+6]
cmp	ax, 27Fh
ja	short loc_10565
mov	di, ax

loc_10532:				; CODE XREF: Q_21DB2+41  P		 /* DOS offset ---> 7BF:2 */
mov	cx, [bp+0Ah]
or	cx, cx
jz	short loc_10565
add	ax, cx
jb	short loc_10565

loc_1053D:				; CODE XREF: game_check_province_is_neighbor:loc_2056D  j		 /* DOS offset ---> 7BF:D */
cmp	ax, 280h
ja	short loc_10565
dec	cx
shr	cx, 1
shr	cx, 1

loc_10547:				; CODE XREF: dseg:2055A  j		 /* DOS offset ---> 7C0:7 */
shr	cx, 1
mov	ch, cl
mov	ax, [bp+8]
cmp	ax, 0C7h ; '  *'
ja	short loc_10565
mov	bx, ax
mov	ax, [bp+0Ch]
or	ax, ax
jz	short loc_10565

loc_1055C:				; CODE XREF: dseg:2052D  j dseg:20545  j		 /* DOS offset ---> 7C1:C */
add	ax, bx
jb	short loc_10565
cmp	ax, 0C8h ; '  *'
jbe	short loc_1056C

loc_10565:				; CODE XREF: dseg:052E  j dseg:0537  j ...		 /* DOS offset ---> 7C2:5 */
mov	ax, 0FFFFh

loc_10568:				; CODE XREF: dseg:20520  j		 /* DOS offset ---> 7C2:8 */
pop	di
pop	si
pop	bp
retf
;     ***************************************************************************

loc_1056C:				; CODE XREF: dseg:0563  j		 /* DOS offset ---> 7C2:C */
mov	ax, bx
mov	dx, ax
shl	ax, 1
; START	OF FUNCTION CHUNK FOR game_check_province_is_neighbor

loc_10572:				; CODE XREF: game_check_province_is_neighbor+30  j		 /* DOS offset ---> 7C3:2 */
shl	ax, 1

loc_10574:		 /* DOS offset ---> 7C3:4 */
add	ax, dx
shl	ax, 1

loc_10578:				; DATA XREF: s_444C+17  r		 /* DOS offset ---> 7C3:8 */
shl	ax, 1

loc_1057A:				; CODE XREF: game_check_province_is_neighbor+3B  j		 /* DOS offset ---> 7C3:A */
shl	ax, 1
shl	ax, 1
push	di

loc_1057F:				; CODE XREF: game_advice_advisor_output+234  P		 /* DOS offset ---> 7C3:F */
; game_advice_advisor_output+28D  P ...
mov	cl, 3
shr	di, cl
add	di, ax
pop	ax
and	ax, 7
mov	cl, al
mov	ax, [bp+arg_A]
cmp	ah, 4
jnz	short loc_10595
xor	ah, ah

loc_10595:				; CODE XREF: game_check_province_is_neighbor-FFA3  j		 /* DOS offset ---> 7C5:5 */
nop
push	cs
call	near ptr system_graphics_flash_graphic
mov	bx, di
mov	si, [bp+arg_C]

loc_1059F:				; CODE XREF: game_check_province_is_neighbor-FF5A  j		 /* DOS offset ---> 7C5:F */
push	cx
mov	al, [si]
mov	ah, 0
shr	ax, cl
nop
push	cs
call	s_12C0
inc	bx

loc_105AC:				; CODE XREF: game_check_province_is_neighbor-FF75  j		 /* DOS offset ---> 7C6:C */
or	ch, ch
jz	short loc_105C1
mov	ax, [si]
inc	si
xchg	ah, al
shr	ax, cl		; CODE XREF: s_10580+F  j s_10580+21  j ...
nop
push	cs

loc_105B9:				; CODE XREF: dseg:1CD8A  P dseg:1F85A  P ...		 /* DOS offset ---> 7C7:9 */
call	s_12C0
inc	bx
dec	ch
jmp	short loc_105AC
;     ***************************************************************************

loc_105C1:				; CODE XREF: game_check_province_is_neighbor-FF86  j		 /* DOS offset ---> 7C8:1 */
or	cl, cl
jz	short loc_105D0
mov	ah, [si]
mov	al, 0

loc_105C9:				; CODE XREF: dseg:1CA49  P dseg:1CCF5  P ...		 /* DOS offset ---> 7C8:9 */
shr	ax, cl
nop
push	cs
call	s_12C0

loc_105D0:				; CODE XREF: game_check_province_is_neighbor-FF71  j		 /* DOS offset ---> 7C9:0 */
inc	si
pop	cx
add	di, 50h	; 'P'
mov	bx, di
dec	[bp+arg_8]
jnz	short loc_1059F
xor	ax, ax
pop	di
pop	si
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_check_province_is_neighbor
;     ***************************************************************************
unk_105E2	db 0F9h	;   *		; CODE XREF: s_105CA+6  j
db    5
db  24h	; $
unk_105E5	db    9			; CODE XREF: s_105CA+16  j
;     ***************************************************************************

loc_105E6:				; CODE XREF: dseg:1D5C8  P dseg:1E014  P		 /* DOS offset ---> 7CA:6 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  8Ah	;   *
db  1Eh
db 0A2h	;   *
db 0CEh	;   *
db  80h	;   *
db 0E3h	;   *
db    1
db  32h	; 2
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db  2Eh	; .
db 0FFh
db 0A7h	;   *
db 0E2h	;   *		; CODE XREF: dseg:loc_10624  j
db    5
db    6
db  56h	; V
db  57h	; W
db 0B8h	;   *
db 0FFh
db 0FFh
db  8Bh	;   *
db  4Eh	; N
db    6
db  81h	;   *
db 0F9h	;   *
db  80h	;   *
db    2
db  76h	; v
db    3
db 0E9h	;   *
db 0A8h	;   *
db    0
db  8Bh	;   *
db  5Eh	; ^
db    8
;     ***************************************************************************

loc_1060E:				; CODE XREF: dseg:205B4  j		 /* DOS offset ---> 7CC:E */
; DATA XREF: game_start_new_ruler_change_what+30  w
shr	bx, 1
cmp	bx, 0C8h ; '  *'
jbe	short loc_10619
jmp	loc_106B3
;     ***************************************************************************

loc_10619:				; CODE XREF: dseg:0614  j		 /* DOS offset ---> 7CD:9 */
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
;     ***************************************************************************
unk_10623	db 0D1h	;   *		; CODE XREF: s_105E6+8  j s_105E6+2F  j
;     ***************************************************************************

loc_10624:				; CODE XREF: dseg:1D79E  P		 /* DOS offset ---> 7CE:4 */
jcxz	short near ptr unk_105F7
;     ***************************************************************************
db 0E3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db 0C1h	;   *
db 0D1h	;   *
db 0E8h	;   *
db 0D1h	;   *
db 0E8h	;   *
db 0D1h	;   *
db 0E8h	;   *
db    3
db 0D8h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_check_provinces_in_war

loc_10633:				; CODE XREF: game_check_provinces_in_war+29  j		 /* DOS offset ---> 7CF:3 */
mov	word ptr loc_13415, sp
mov	word ptr loc_13417, sp

loc_1063B:		 /* DOS offset ---> 7CF:B */
mov	word ptr loc_13419, sp
add	sp, 0FE3Eh
mov	word ptr loc_13412+1, sp

loc_10647:				; CODE XREF: dseg:211E5  p dseg:21282  p		 /* DOS offset ---> 7D0:7 */
mov	word ptr loc_1340D, sp
mov	word ptr loc_1340E+1, sp

loc_1064F:				; CODE XREF: game_check_provinces_in_war+1C  j		 /* DOS offset ---> 7D0:F */
mov	word ptr loc_13410+1, sp
add	sp, 0FF6Ah

loc_10657:				; CODE XREF: game_check_provinces_in_war+2B  j		 /* DOS offset ---> 7D1:7 */
mov	word ptr loc_1340B, sp
and	cx, 7
inc	cx

loc_1065F:				; CODE XREF: dseg:1CE64  P		 /* DOS offset ---> 7D1:F */
xor	al, al

loc_10661:				; CODE XREF: game_check_provinces_in_war-FFC0  j		 /* DOS offset ---> 7D2:1 */
stc
rcr	al, 1
loop	loc_10661
push	ax
push	bx

loc_10668:				; CODE XREF: dseg:206D7  j		 /* DOS offset ---> 7D2:8 */
mov	cx, [bp+arg_6]
mov	ax, cx
mov	dx, 9090h
mov	di, 0D0F6h
mov	bx, 909h
mov	cs:[bx], di
rcr	ax, 1
jnb	short loc_10680
mov	cs:[bx], dx

loc_10680:				; CODE XREF: game_check_provinces_in_war-FFA9  j		 /* DOS offset ---> 7D4:0 */
mov	bx, 913h
mov	cs:[bx], di
rcr	ax, 1
jnb	short loc_1068D
mov	cs:[bx], dx

loc_1068D:				; CODE XREF: game_check_provinces_in_war-FF9C  j		 /* DOS offset ---> 7D4:D */
mov	bx, 91Dh

loc_10690:				; DATA XREF: s_444C+22  w		 /* DOS offset ---> 7D5:0 */
mov	cs:[bx], di
rcr	ax, 1
jnb	short loc_1069A
mov	cs:[bx], dx

loc_1069A:				; CODE XREF: game_check_provinces_in_war-FF8F  j		 /* DOS offset ---> 7D5:A */
mov	ah, 0
mov	al, cl
nop
push	cs
call	near ptr system_graphics_flash_graphic
; END OF FUNCTION CHUNK	FOR game_check_provinces_in_war
;     ***************************************************************************
db  5Bh	; [
db  58h	; X
db  8Ah	;   *
db 0E8h	;   *
db  90h	;   *
db  0Eh
db 0E8h	;   *
db  9Dh	;   *
db    0
db 0B8h	;   *
db    0
db    0
;     ***************************************************************************

loc_106AF:				; CODE XREF: dseg:06BB  j		 /* DOS offset ---> 7D6:F */
mov	sp, word ptr loc_13415

loc_106B3:				; CODE XREF: dseg:0616  j		 /* DOS offset ---> 7D7:3 */
pop	di
pop	si
pop	es
; START	OF FUNCTION CHUNK FOR game_give_population_calc

loc_106B6:				; CODE XREF: game_give_population_calc+E  j		 /* DOS offset ---> 7D7:6 */
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_give_population_calc
;     ***************************************************************************

loc_106B8:				; CODE XREF: dseg:06D9  j		 /* DOS offset ---> 7D7:8 */
mov	ax, 0FFFFh
jmp	short loc_106AF
;     ***************************************************************************

loc_106BD:				; CODE XREF: dseg:0752  p dseg:0822  p		 /* DOS offset ---> 7D7:D */
mov	di, 340Bh
;     ***************************************************************************
db 0EBh	;   *
db    3
;     ***************************************************************************

loc_106C2:				; CODE XREF: dseg:0757  p dseg:07A9  p ...		 /* DOS offset ---> 7D8:2 */
mov	di, 3413h
mov	si, [di+4]
dec	si
dec	si
mov	[si], bx
dec	si
mov	[si], ch
cmp	si, [di]
ja	short loc_106D6
mov	si, [di+2]

loc_106D6:				; CODE XREF: dseg:06D1  j		 /* DOS offset ---> 7D9:6 */
cmp	si, [di+6]
jz	short loc_106B8

loc_106DB:				; DATA XREF: s_1198C+20  w		 /* DOS offset ---> 7D9:B */
mov	[di+4],	si

locret_106DE:				; CODE XREF: dseg:20D76  p dseg:211BD  p ...
retf
;     ***************************************************************************

loc_106DF:				; CODE XREF: dseg:075C  p		 /* DOS offset ---> 7D9:F */
mov	di, 340Bh
;     ***************************************************************************
db 0EBh	;   *
db    3
;     ***************************************************************************

loc_106E4:				; CODE XREF: dseg:0827  p dseg:083D  p		 /* DOS offset ---> 7DA:4 */
mov	di, 3413h
mov	si, [di+6]
dec	si
dec	si
mov	bx, [si]
dec	si
mov	ch, [si]
cmp	si, [di]

loc_106F3:				; CODE XREF: dseg:206E5  j dseg:206EB  j		 /* DOS offset ---> 7DB:3 */
ja	short loc_106F8
mov	si, [di+2]

loc_106F8:				; CODE XREF: dseg:loc_106F3  j		 /* DOS offset ---> 7DB:8 */
mov	[di+6],	si
retf
;     ***************************************************************************

loc_106FC:				; CODE XREF: dseg:077D  p		 /* DOS offset ---> 7DB:C */
; dseg:loc_10810  p
test	bx, 0Fh
;     ***************************************************************************
db  74h	; t
db    1
db 0CBh	;   *
db  8Bh	;   *
db 0C3h	;   *
db  53h	; S
db  3Dh	; =
db  80h	;   *
db  3Eh	; >
db  72h	; r
db    3
db  2Dh	; -
db  80h	;   *
db  3Eh	; >
db 0B3h	;   *
db  50h	; P
db 0F6h	;   *
db 0F3h	;   *
db  5Bh	; [
db  0Ah
db 0E4h	;   *
db 0CBh	;   *
;     ***************************************************************************

loc_10716:				; CODE XREF: dseg:loc_107E8  p		 /* DOS offset ---> 7DD:6 */
; dseg:07F9  p
nop
push	cs
call	loc_108F5
or	al, dh

loc_1071D:				; CODE XREF: game_reward_func_calc+A  j		 /* DOS offset ---> 7DD:D */
cmp	al, 0FFh
jz	short loc_10745
mov	ch, 80h	; '  *'
clc

loc_10724:		 /* DOS offset ---> 7DE:4 */
rcl	al, 1

loc_10726:				; CODE XREF: dseg:2084E  p dseg:2087F  p ...		 /* DOS offset ---> 7DE:6 */
jb	short near ptr unk_10740
;     ***************************************************************************
db 0F6h	;   *
unk_10729	db 0C1h	;   *		; CODE XREF: game_reward_func_calc+16  j
db    1
db  74h	; t
db    8
db  90h	;   *
db  0Eh
db 0E8h	;   *
db  8Bh	;   *
db 0FFh
db  80h	;   *
db 0E1h	;   *
db 0FEh	;   *
db  0Ah
db 0C0h	;   *
db  75h	; u
db    1
db 0CBh	;   *
db 0F9h	;   *
db 0D0h	;   *
db 0DDh	;   *
db  73h	; s
db 0E4h	;   *
db 0CBh	;   *
unk_10740	db  80h	;   *		; CODE XREF: dseg:loc_10726  j
db 0C9h	;   *
db    1
db 0EBh	;   *
db 0F5h	;   *
;     ***************************************************************************

loc_10745:				; CODE XREF: dseg:071F  j		 /* DOS offset ---> 7E0:5 */
or	cl, 1
retf
;     ***************************************************************************
db  90h	;   *
db  0Eh
db 0E8h	;   *
db  6Fh	; o
db 0FFh
db 0B5h	;   *
db    0
;     ***************************************************************************

loc_10750:				; DATA XREF: game_development_land_func+1F  t		 /* DOS offset ---> 7E1:0 */
nop
push	cs
call	loc_106BD

loc_10755:				; CODE XREF: dseg:loc_10834  j		 /* DOS offset ---> 7E1:5 */
nop
push	cs
call	loc_106C2

loc_1075A:				; CODE XREF: dseg:0777  j dseg:07CB  j ...		 /* DOS offset ---> 7E1:A */
nop
push	cs
call	loc_106DF
or	ch, ch
jnz	short loc_10766
jmp	loc_10820
;     ***************************************************************************

loc_10766:				; CODE XREF: dseg:0761  j		 /* DOS offset ---> 7E2:6 */
nop
push	cs
call	loc_108F5
mov	cl, al
and	al, ch
jz	short loc_1077B
shl	ch, 1
not	ch
test	al, ch
jnz	short loc_1075A
jmp	short loc_1078E
;     ***************************************************************************

loc_1077B:				; CODE XREF: dseg:076F  j dseg:078C  j		 /* DOS offset ---> 7E3:B */
nop
push	cs
call	loc_106FC
jz	short loc_107A5
dec	bx
nop
push	cs
call	loc_108F5

loc_10788:		 /* DOS offset ---> 7E4:8 */
mov	cl, al
or	al, al
jz	short loc_1077B

loc_1078E:				; CODE XREF: dseg:0779  j		 /* DOS offset ---> 7E4:E */
xor	ch, ch

loc_10790:				; CODE XREF: dseg:0797  j		 /* DOS offset ---> 7E5:0 */
rcr	al, 1
jb	short loc_10799
stc
rcl	ch, 1
jmp	short loc_10790
;     ***************************************************************************

loc_10799:				; CODE XREF: dseg:0792  j		 /* DOS offset ---> 7E5:9 */
or	ch, ch
jnz	short loc_107A7
inc	bx
nop
push	cs
call	loc_108F5
mov	cl, al

loc_107A5:				; CODE XREF: dseg:0780  j		 /* DOS offset ---> 7E6:5 */
mov	ch, 0FFh

loc_107A7:				; CODE XREF: dseg:079B  j		 /* DOS offset ---> 7E6:7 */
nop
push	cs
call	loc_106C2
mov	al, cl
mov	cl, 3

loc_107B0:				; CODE XREF: dseg:081E  j		 /* DOS offset ---> 7E7:0 */
and	al, ch
jz	short loc_107D4
xor	ah, ah

loc_107B6:				; CODE XREF: dseg:07BD  j		 /* DOS offset ---> 7E7:6 */
rcl	al, 1
jb	short loc_107BF
stc
rcr	ah, 1
jmp	short loc_107B6
;     ***************************************************************************

loc_107BF:				; CODE XREF: dseg:07B8  j		 /* DOS offset ---> 7E7:F */
and	ah, ch
jnz	short loc_107CD
mov	ch, dh

loc_107C5:				; CODE XREF: dseg:0813  j		 /* DOS offset ---> 7E8:5 */
dec	bx
nop
push	cs
call	loc_106C2
jmp	short loc_1075A
;     ***************************************************************************

loc_107CD:				; CODE XREF: dseg:07C1  j		 /* DOS offset ---> 7E8:D */
mov	ch, ah
nop

loc_107D0:		 /* DOS offset ---> 7E9:0 */
push	cs
call	loc_106C2

loc_107D4:				; CODE XREF: dseg:07B2  j		 /* DOS offset ---> 7E9:4 */
mov	al, ch
nop
push	cs

loc_107D8:				; CODE XREF: game_development_flood_func+B  j		 /* DOS offset ---> 7E9:8 */
call	s_12C0
sub	bx, 50h	; 'P'
mov	dh, ch
not	dh
or	bx, bx
js	short loc_107EB
nop
push	cs

loc_107E8:				; CODE XREF: dseg:207E0  j		 /* DOS offset ---> 7EA:8 */
call	loc_10716

loc_107EB:				; CODE XREF: dseg:07E4  j dseg:211D5  p ...		 /* DOS offset ---> 7EA:B */
add	bx, 0A0h ; '  *'
cmp	bx, 3E80h
jnb	short loc_107FE
ror	cl, 1
nop
push	cs
call	loc_10716
rol	cl, 1

loc_107FE:				; CODE XREF: dseg:07F3  j		 /* DOS offset ---> 7EB:E */
; game_development_land_func+B  j
sub	bx, 50h	; 'P'
mov	ch, dh
not	ch
test	ch, 1
jnz	short loc_1080D
jmp	loc_1075A
;     ***************************************************************************

loc_1080D:				; CODE XREF: dseg:0808  j		 /* DOS offset ---> 7EC:D */
inc	bx
nop
push	cs

loc_10810:				; CODE XREF: s_1198C+E1  P		 /* DOS offset ---> 7ED:0 */
call	loc_106FC
jz	short loc_107C5
mov	dh, ch
mov	ch, 0FFh
nop
push	cs
call	loc_108F5
jmp	short loc_107B0
;     ***************************************************************************

loc_10820:				; CODE XREF: dseg:0763  j		 /* DOS offset ---> 7EE:0 */
nop
push	cs
call	loc_106BD

loc_10825:				; CODE XREF: dseg:loc_108A1  j		 /* DOS offset ---> 7EE:5 */
nop
push	cs
call	loc_106E4
and	ch, ch
jnz	short loc_10838
cmp	si, word ptr loc_13417
jz	short locret_10837

loc_10834:				; CODE XREF: s_1198C+81  P		 /* DOS offset ---> 7EF:4 */
jmp	loc_10755
;     ***************************************************************************

locret_10837:				; CODE XREF: dseg:0832  j
retf
;     ***************************************************************************

loc_10838:				; CODE XREF: dseg:082C  j		 /* DOS offset ---> 7EF:8 */
mov	cl, ch
push	bx
nop
push	cs
call	loc_106E4

loc_10840:				; CODE XREF: dseg:2085E  j		 /* DOS offset ---> 7F0:0 */
xchg	ch, cl
xchg	dx, bx
pop	bx
push	dx
mov	ax, bx
xor	dx, dx
mov	di, 50h	; 'P'
div	di
xor	dx, dx
mov	di, [bp+0Ch]
div	di
mov	di, dx
shl	di, 1
add	di, dx
add	di, [bp+0Eh]
pop	dx

loc_10860:				; CODE XREF: dseg:2083E  j		 /* DOS offset ---> 7F2:0 */
cmp	bx, dx
jz	short loc_1089A

loc_10864:				; CODE XREF: s_1198C+3F  P		 /* DOS offset ---> 7F2:4 */
nop
push	cs
call	loc_108A3

loc_10869:				; CODE XREF: dseg:0898  j		 /* DOS offset ---> 7F2:9 */
inc	bx
cmp	bx, dx
jz	short loc_1089A
mov	si, 0A000h

loc_10871:				; CODE XREF: dseg:2088F  j		 /* DOS offset ---> 7F3:1 */
mov	es, si
push	dx
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 1
out	dx, al		; EGA port: sequencer data register
mov	al, [di]
mov	es:[bx], al
mov	al, 4
out	dx, al		; EGA port: sequencer data register
mov	al, [di+1]

loc_10889:				; CODE XREF: dseg:118C4  P		 /* DOS offset ---> 7F4:9 */
mov	es:[bx], al
mov	al, 2
out	dx, al		; EGA port: sequencer data register
pop	dx

loc_10890:				; CODE XREF: dseg:2086F  j		 /* DOS offset ---> 7F5:0 */
mov	si, dx
mov	al, [di+2]
mov	es:[bx], al
jmp	short loc_10869
;     ***************************************************************************

loc_1089A:				; CODE XREF: dseg:0862  j dseg:086C  j		 /* DOS offset ---> 7F5:A */
mov	ch, cl
nop
push	cs
call	loc_108A3

loc_108A1:				; CODE XREF: dseg:208C0  j		 /* DOS offset ---> 7F6:1 */
jmp	short loc_10825
;     ***************************************************************************

loc_108A3:				; CODE XREF: dseg:0866  p dseg:089E  p		 /* DOS offset ---> 7F6:3 */
mov	ah, ch
;     ***************************************************************************
db 0F6h	;   *
db 0D4h	;   *
db 0BEh	;   *
db    0
db 0A0h	;   *
db  8Eh	;   *
db 0C6h	;   *
db  52h	; R
db 0BAh	;   *
db 0CEh	;   *
db    3
db 0B0h	;   *
db    4
db 0EEh	;   *
db  42h	; B
db 0B0h	;   *
db    0
db 0EEh	;   *
db 0BAh	;   *
db 0C4h	;   *
db    3
db 0B0h	;   *
db    2
db 0EEh	;   *
db  42h	; B
db 0B0h	;   *
db    1
db 0EEh	;   *
db  8Ah	;   *
unk_108C2	db    5			; CODE XREF: dseg:208A0  j
db  22h	; "
db 0C5h	;   *
db  26h	; &
db  20h
db  27h	; '
db  26h	; &
db    8
db    7
;     ***************************************************************************

loc_108CB:				; CODE XREF: dseg:108D5  j		 /* DOS offset ---> 7F8:B */
mov	al, 4
out	dx, al		; EGA port: sequencer data register

loc_108CE:				; CODE XREF: dseg:208ED  j		 /* DOS offset ---> 7F8:E */
mov	dx, 3CFh
mov	al, 2
out	dx, al		; EGA port: graphics controller	data register
mov	al, [di+1]

loc_108D7:				; CODE XREF: dseg:108C9  j		 /* DOS offset ---> 7F9:7 */
and	al, ch
and	es:[bx], ah

loc_108DC:				; CODE XREF: dseg:1D7BF  P		 /* DOS offset ---> 7F9:C */
or	es:[bx], al
mov	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	dx, 3C5h
mov	al, 2
out	dx, al		; EGA port: sequencer data register
mov	al, [di+2]
and	al, ch

loc_108ED:				; CODE XREF: dseg:208CD  j		 /* DOS offset ---> 7FA:D */
and	es:[bx], ah
or	es:[bx], al
pop	dx

locret_108F4:				; CODE XREF: s_108DC+31  j dseg:20D60  p ...
retf
;     ***************************************************************************

loc_108F5:				; CODE XREF: dseg:0718  p dseg:0768  p ...		 /* DOS offset ---> 7FB:5 */
mov	si, 0A000h
;     ***************************************************************************
db  8Eh	;   *
db 0C6h	;   *
db  52h	; R
db  51h	; Q
db 0BAh	;   *
db 0CEh	;   *
db    3
db 0B0h	;   *
db    4
db 0EEh	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR s_108DC

loc_10902:				; CODE XREF: s_108DC+20  j		 /* DOS offset ---> 7FC:2 */
inc	dx
mov	al, 0
out	dx, al		; EGA port: graphics controller	data register

loc_10906:				; CODE XREF: s_108DC+16  j		 /* DOS offset ---> 7FC:6 */
mov	al, es:[bx]
nop
nop
mov	cl, al
mov	al, 2
out	dx, al		; EGA port: graphics controller	data register
mov	al, es:[bx]
nop

loc_10914:				; CODE XREF: dseg:11690  P dseg:1C8E3  P ...		 /* DOS offset ---> 7FD:4 */
nop
; END OF FUNCTION CHUNK	FOR s_108DC
;     ***************************************************************************
db  22h	; "
db 0C8h	;   *
db 0B0h	;   *
db    1
db 0EEh	;   *
;     ***************************************************************************

loc_1091A:				; CODE XREF: dseg:20970  j		 /* DOS offset ---> 7FD:A */
mov	al, es:[bx]
nop
nop
and	al, cl
pop	cx
pop	dx
retf
;     ***************************************************************************
push	es
push	si
push	di
mov	ax, 0FFFFh
mov	cx, [bp+6]
cmp	cx, 280h
jbe	short loc_10936
jmp	loc_109D5
;     ***************************************************************************

loc_10936:				; CODE XREF: dseg:0931  j		 /* DOS offset ---> 7FF:6 */
mov	bx, [bp+8]
shr	bx, 1
cmp	bx, 0C8h ; '  *'
jbe	short loc_10944
jmp	loc_109D5
;     ***************************************************************************

loc_10944:				; CODE XREF: dseg:093F  j		 /* DOS offset ---> 800:4 */
push	bx
shr	bx, 1
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
shl	bx, 1
shl	bx, 1
shl	bx, 1
mov	ax, cx
shr	ax, 1
shr	ax, 1
shr	ax, 1
; START	OF FUNCTION CHUNK FOR game_diplomacy_cancel_alliance_sub

loc_1095F:				; CODE XREF: game_diplomacy_cancel_alliance_sub+42  j		 /* DOS offset ---> 801:F */
add	bx, ax
pop	ax
and	ax, 1
cmp	ax, 1
jb	short loc_1096E
add	bx, 2000h

loc_1096E:				; CODE XREF: game_diplomacy_cancel_alliance_sub-FFAC  j		 /* DOS offset ---> 802:E */
; game_diplomacy_cancel_alliance_sub+54  j
mov	word ptr loc_13415, sp

loc_10972:				; CODE XREF: dseg:20918  j		 /* DOS offset ---> 803:2 */
mov	word ptr loc_13417, sp
mov	word ptr loc_13419, sp

loc_1097A:				; CODE XREF: dseg:209C8  p dseg:209EA  p ...		 /* DOS offset ---> 803:A */
add	sp, 0FE3Eh
; END OF FUNCTION CHUNK	FOR game_diplomacy_cancel_alliance_sub
;     ***************************************************************************
db  89h	;   *
db  26h	; &
db  13h
db  34h	; 4
db  89h	;   *
db  26h	; &
db  0Dh
db  34h	; 4
db  89h	;   *
db  26h	; &
db  0Fh
db  34h	; 4
db  89h	;   *
db  26h	; &
db  11h
unk_1098D	db  34h	; 4		; CODE XREF: dseg:209A2  j
db  81h	;   *
db 0C4h	;   *
db  6Ah	; j
db 0FFh
db  89h	;   *
db  26h	; &
db  0Bh
db  34h	; 4
db  83h	;   *
db 0E1h	;   *
db    7
db  41h	; A
db  32h	; 2
db 0C0h	;   *
;     ***************************************************************************

loc_1099C:				; CODE XREF: dseg:099F  j		 /* DOS offset ---> 805:C */
stc
rcr	al, 1
loop	loc_1099C
push	ax
push	bx

loc_109A3:				; CODE XREF: dseg:2098B  j		 /* DOS offset ---> 806:3 */
mov	cx, [bp+0Ah]
mov	ax, cx
mov	dx, 9090h
mov	di, 0D0F6h

loc_109AE:				; CODE XREF: dseg:20A20  p dseg:20A36  p ...		 /* DOS offset ---> 806:E */
mov	bx, 0C48h
;     ***************************************************************************
db  2Eh	; .
db  89h	;   *
db  3Fh	; ?
db  3Dh	; =
db    1
db    0
db  72h	; r
db    3
db  2Eh	; .
db  89h	;   *
db  17h
db 0B4h	;   *
db    0
db  8Ah	;   *
db 0C1h	;   *
db  90h	;   *
db  0Eh
db 0E8h	;   *
db  5Ch	; \
db    8
db  5Bh	; [
db  58h	; X
db  8Ah	;   *
db 0E8h	;   *
db  90h	;   *
db  0Eh
db 0E8h	;   *
db  9Dh	;   *
db    0
db 0B8h	;   *
unk_109CF	db    0			; CODE XREF: game_diplomacy_cancel_alliance_sub+82  j
; game_diplomacy_cancel_alliance_sub+91  j
db    0
db  8Bh	;   *
db  26h	; &
db  15h
db  34h	; 4		; CODE XREF: dseg:10A2D  p
;     ***************************************************************************

loc_109D5:				; CODE XREF: dseg:0933  j dseg:0941  j		 /* DOS offset ---> 809:5 */
pop	di
pop	si
pop	es
pop	bp
retf
;     ***************************************************************************
db 0B8h	;   *
db 0FFh
db 0FFh
db 0EBh	;   *
db 0F2h	;   *
;     ***************************************************************************

loc_109DF:				; CODE XREF: dseg:0A51  p dseg:0B87  p		 /* DOS offset ---> 809:F */
mov	di, 340Bh
;     ***************************************************************************
db 0EBh	;   *
db    3
;     ***************************************************************************

loc_109E4:				; CODE XREF: dseg:loc_10A79  p		 /* DOS offset ---> 80A:4 */
; dseg:0ACB  p ...
mov	di, 3413h
mov	si, [di+4]
dec	si
dec	si
mov	[si], bx
dec	si
mov	[si], ch
cmp	si, [di]

loc_109F3:				; CODE XREF: dseg:11884  P		 /* DOS offset ---> 80B:3 */
ja	short loc_109F8
mov	si, [di+2]

loc_109F8:				; CODE XREF: dseg:loc_109F3  j		 /* DOS offset ---> 80B:8 */
; dseg:211EF  p ...
cmp	si, [di+6]
;     ***************************************************************************
db  74h	; t
db 0DDh	;   *
db  89h	;   *
db  75h	; u
db    4
db 0CBh	;   *
;     ***************************************************************************

loc_10A01:				; CODE XREF: dseg:0A7E  p		 /* DOS offset ---> 80C:1 */
mov	di, 340Bh
;     ***************************************************************************
db 0EBh	;   *
db    3
;     ***************************************************************************

loc_10A06:				; CODE XREF: dseg:loc_10B8C  p		 /* DOS offset ---> 80C:6 */
; dseg:0BA2  p
mov	di, 3413h
mov	si, [di+6]
dec	si
dec	si
mov	bx, [si]
dec	si
mov	ch, [si]
cmp	si, [di]

loc_10A15:				; CODE XREF: dseg:21220  p dseg:21232  p ...		 /* DOS offset ---> 80D:5 */
ja	short loc_10A1A
mov	si, [di+2]

loc_10A1A:				; CODE XREF: dseg:loc_10A15  j		 /* DOS offset ---> 80D:A */
mov	[di+6],	si
retf
;     ***************************************************************************

loc_10A1E:				; CODE XREF: dseg:0A9F  p dseg:0B71  p		 /* DOS offset ---> 80D:E */
test	bx, 0Fh
;     ***************************************************************************
db  74h	; t
db    1
db 0CBh	;   *
db  8Bh	;   *
db 0C3h	;   *
db  53h	; S
db  3Dh	; =
db    0
db  20h
db  72h	; r
db    3
db  2Dh	; -
db    0
db  20h
db 0B3h	;   *
db  50h	; P
db 0F6h	;   *
db 0F3h	;   *
db  5Bh	; [
db  0Ah
db 0E4h	;   *
db 0CBh	;   *
;     ***************************************************************************

loc_10A38:				; CODE XREF: dseg:0B34  p dseg:0B4A  p		 /* DOS offset ---> 80F:8 */
nop
;     ***************************************************************************
db  0Eh
db 0E8h	;   *
db 0EBh	;   *
db    1
db  0Ah
db 0C6h	;   *
db  3Ch	; <
db 0FFh
db  74h	; t
db  24h	; $
db 0B5h	;   *
db  80h	;   *
;     ***************************************************************************

loc_10A45:				; CODE XREF: dseg:0A5F  j		 /* DOS offset ---> 810:5 */
clc
rcl	al, 1
jb	short loc_10A62
test	cl, 1

loc_10A4D:				; CODE XREF: dseg:2128C  p dseg:2129D  p		 /* DOS offset ---> 810:D */
jz	short loc_10A57
nop
push	cs
call	loc_109DF
and	cl, 0FEh

loc_10A57:				; CODE XREF: dseg:loc_10A4D  j		 /* DOS offset ---> 811:7 */
or	al, al
jnz	short loc_10A5C
retf
;     ***************************************************************************

loc_10A5C:				; CODE XREF: dseg:0A59  j		 /* DOS offset ---> 811:C */
stc
rcr	ch, 1
jnb	short loc_10A45
retf
;     ***************************************************************************

loc_10A62:				; CODE XREF: dseg:0A48  j dseg:10B28  p ...		 /* DOS offset ---> 812:2 */
or	cl, 1
;     ***************************************************************************
db 0EBh	;   *
db 0F5h	;   *
db  80h	;   *
db 0C9h	;   *
db    1
db 0CBh	;   *
db  90h	;   *
db  0Eh
db 0E8h	;   *
db  6Fh	; o
db 0FFh
db 0B5h	;   *
db    0
db  90h	;   *
db  0Eh
db 0E8h	;   *
db  68h	; h
db 0FFh
;     ***************************************************************************

loc_10A77:				; CODE XREF: dseg:0B99  j		 /* DOS offset ---> 813:7 */
nop
push	cs

loc_10A79:				; CODE XREF: dseg:10AAE  j		 /* DOS offset ---> 813:9 */
call	loc_109E4

loc_10A7C:				; CODE XREF: dseg:0A99  j dseg:0AED  j ...		 /* DOS offset ---> 813:C */
nop
push	cs
call	loc_10A01

loc_10A81:				; CODE XREF: dseg:20A6B  j		 /* DOS offset ---> 814:1 */
or	ch, ch
jnz	short loc_10A88
jmp	loc_10B85
;     ***************************************************************************

loc_10A88:				; CODE XREF: dseg:0A83  j		 /* DOS offset ---> 814:8 */
nop
push	cs
call	loc_10C28
mov	cl, al
and	al, ch
jz	short loc_10A9D
shl	ch, 1
not	ch
test	al, ch
jnz	short loc_10A7C
jmp	short loc_10AB0
;     ***************************************************************************

loc_10A9D:				; CODE XREF: dseg:0A91  j		 /* DOS offset ---> 815:D */
; dseg:loc_10AAE  j
nop
push	cs
call	loc_10A1E
jz	short loc_10AC7

loc_10AA4:				; CODE XREF: dseg:10A81  j dseg:10A9B  j		 /* DOS offset ---> 816:4 */
dec	bx
nop
push	cs
call	loc_10C28
mov	cl, al
or	al, al

loc_10AAE:				; CODE XREF: dseg:20AA7  j		 /* DOS offset ---> 816:E */
jz	short loc_10A9D

loc_10AB0:				; CODE XREF: dseg:0A9B  j dseg:10A79  j		 /* DOS offset ---> 817:0 */
xor	ch, ch

loc_10AB2:				; CODE XREF: dseg:0AB9  j		 /* DOS offset ---> 817:2 */
rcr	al, 1

loc_10AB4:				; CODE XREF: dseg:11878  P		 /* DOS offset ---> 817:4 */
jb	short loc_10ABB
stc
rcl	ch, 1
jmp	short loc_10AB2
;     ***************************************************************************

loc_10ABB:				; CODE XREF: dseg:loc_10AB4  j		 /* DOS offset ---> 817:B */
or	ch, ch
jnz	short loc_10AC9
inc	bx

loc_10AC0:				; CODE XREF: dseg:20AA5  j dseg:20AAD  j		 /* DOS offset ---> 818:0 */
nop
push	cs
call	loc_10C28
mov	cl, al

loc_10AC7:				; CODE XREF: dseg:0AA2  j		 /* DOS offset ---> 818:7 */
mov	ch, 0FFh

loc_10AC9:				; CODE XREF: dseg:0ABD  j		 /* DOS offset ---> 818:9 */
nop
push	cs
call	loc_109E4
mov	al, cl
mov	cl, 3

loc_10AD2:				; CODE XREF: dseg:loc_10B82  j		 /* DOS offset ---> 819:2 */
and	al, ch
jz	short loc_10AF6
xor	ah, ah

loc_10AD8:				; CODE XREF: dseg:0ADF  j		 /* DOS offset ---> 819:8 */
rcl	al, 1
jb	short loc_10AE1
stc
rcr	ah, 1
jmp	short loc_10AD8
;     ***************************************************************************

loc_10AE1:				; CODE XREF: dseg:0ADA  j dseg:20AD9  j		 /* DOS offset ---> 81A:1 */
and	ah, ch
jnz	short loc_10AEF
mov	ch, dh

loc_10AE7:				; CODE XREF: dseg:0B76  j		 /* DOS offset ---> 81A:7 */
dec	bx

loc_10AE8:				; CODE XREF: dseg:20D94  p		 /* DOS offset ---> 81A:8 */
nop
push	cs
call	loc_109E4
jmp	short loc_10A7C
;     ***************************************************************************

loc_10AEF:				; CODE XREF: dseg:0AE3  j		 /* DOS offset ---> 81A:F */
mov	ch, ah
nop
push	cs
call	loc_109E4

loc_10AF6:				; CODE XREF: dseg:0AD4  j		 /* DOS offset ---> 81B:6 */
mov	al, ch
xchg	di, bx
cmp	word ptr [bp+10h], 0
jnz	short loc_10B08
nop
push	cs
call	s_12C0
jmp	short loc_10B0D
;     ***************************************************************************
nop

loc_10B08:				; CODE XREF: dseg:0AFE  j		 /* DOS offset ---> 81C:8 */
nop
push	cs
call	loc_10C4B

loc_10B0D:				; CODE XREF: dseg:0B05  j		 /* DOS offset ---> 81C:D */
xchg	di, bx
cmp	bx, 2000h
jnb	short loc_10B1E
sub	bx, 50h	; 'P'
add	bx, 2000h
jmp	short loc_10B22
;     ***************************************************************************

loc_10B1E:				; CODE XREF: dseg:0B13  j		 /* DOS offset ---> 81D:E */
sub	bx, 2000h

loc_10B22:				; CODE XREF: dseg:0B1C  j		 /* DOS offset ---> 81E:2 */
mov	dh, ch
not	dh
cmp	bx, 1FB0h
jb	short loc_10B32
cmp	bx, 1FFFh
jbe	short loc_10B37

loc_10B32:				; CODE XREF: dseg:0B2A  j		 /* DOS offset ---> 81F:2 */
nop
push	cs
call	loc_10A38

loc_10B37:				; CODE XREF: dseg:0B30  j		 /* DOS offset ---> 81F:7 */
add	bx, 50h	; 'P'
cmp	bx, 1F40h
jb	short loc_10B46

loc_10B40:				; CODE XREF: dseg:11870  P dseg:20B35  j		 /* DOS offset ---> 820:0 */
cmp	bx, 1F8Fh
jbe	short loc_10B4F

loc_10B46:				; CODE XREF: dseg:0B3E  j		 /* DOS offset ---> 820:6 */
ror	cl, 1
nop
push	cs
call	loc_10A38
rol	cl, 1

loc_10B4F:				; CODE XREF: dseg:0B44  j		 /* DOS offset ---> 820:F */
cmp	bx, 2000h
jnb	short loc_10B5E
sub	bx, 50h	; 'P'
add	bx, 2000h
jmp	short loc_10B62
;     ***************************************************************************

loc_10B5E:				; CODE XREF: dseg:0B53  j		 /* DOS offset ---> 821:E */
sub	bx, 2000h

loc_10B62:				; CODE XREF: dseg:0B5C  j		 /* DOS offset ---> 822:2 */
mov	ch, dh
not	ch
test	ch, 1
jnz	short loc_10B6E

loc_10B6B:				; CODE XREF: dseg:20B4F  j		 /* DOS offset ---> 822:B */
jmp	loc_10A7C
;     ***************************************************************************

loc_10B6E:				; CODE XREF: dseg:0B69  j		 /* DOS offset ---> 822:E */
inc	bx
nop
push	cs
call	loc_10A1E
jnz	short loc_10B79
jmp	loc_10AE7
;     ***************************************************************************

loc_10B79:				; CODE XREF: dseg:0B74  j		 /* DOS offset ---> 823:9 */
mov	dh, ch
mov	ch, 0FFh
nop
push	cs
call	loc_10C28

loc_10B82:				; CODE XREF: dseg:20B3F  j		 /* DOS offset ---> 824:2 */
jmp	loc_10AD2
;     ***************************************************************************

loc_10B85:				; CODE XREF: dseg:0A85  j		 /* DOS offset ---> 824:5 */
nop
push	cs
call	loc_109DF

loc_10B8A:				; CODE XREF: dseg:loc_10C01  j		 /* DOS offset ---> 824:A */
nop
push	cs

loc_10B8C:				; CODE XREF: dseg:20CF9  p dseg:11868  P		 /* DOS offset ---> 824:C */
call	loc_10A06
and	ch, ch
jnz	short loc_10B9D
cmp	si, word ptr loc_13417
jz	short locret_10B9C
jmp	loc_10A77
;     ***************************************************************************

locret_10B9C:				; CODE XREF: dseg:0B97  j
retf
;     ***************************************************************************

loc_10B9D:				; CODE XREF: dseg:0B91  j		 /* DOS offset ---> 825:D */
mov	cl, ch
push	bx
nop
push	cs
call	loc_10A06
xchg	ch, cl
xchg	dx, bx
pop	bx
push	dx
mov	di, 50h	; 'P'
mov	ax, bx
xor	dx, dx
cmp	ax, 2000h
jnb	short loc_10BBD
div	di
shl	ax, 1
jmp	short loc_10BC5
;     ***************************************************************************

loc_10BBD:				; CODE XREF: dseg:0BB5  j		 /* DOS offset ---> 827:D */
sub	ax, 2000h
div	di
shl	ax, 1
inc	ax

loc_10BC5:				; CODE XREF: dseg:0BBB  j		 /* DOS offset ---> 828:5 */
mov	di, [bp+0Ch]
xor	dx, dx
div	di
mov	di, dx
add	di, [bp+0Eh]
pop	dx
cmp	bx, dx
jz	short loc_10BFA
nop
push	cs
call	loc_10C03

loc_10BDB:				; CODE XREF: dseg:loc_10BF8  j		 /* DOS offset ---> 829:B */
inc	bx
cmp	bx, dx
jz	short loc_10BFA
mov	si, 0B800h
mov	es, si
mov	al, [di]

loc_10BE7:				; CODE XREF: dseg:20BE2  j		 /* DOS offset ---> 82A:7 */
mov	es:[bx], al
cmp	word ptr [bp+10h], 0
jz	short loc_10BF8
mov	si, [bp+10h]
mov	es, si
mov	es:[bx], al

loc_10BF8:				; CODE XREF: dseg:0BEE  j		 /* DOS offset ---> 82B:8 */
jmp	short loc_10BDB
;     ***************************************************************************

loc_10BFA:				; CODE XREF: dseg:0BD4  j dseg:0BDE  j		 /* DOS offset ---> 82B:A */
mov	ch, cl
nop
push	cs
call	loc_10C03

loc_10C01:				; CODE XREF: dseg:20BF5  j		 /* DOS offset ---> 82C:1 */
jmp	short loc_10B8A
;     ***************************************************************************

loc_10C03:				; CODE XREF: dseg:0BD8  p dseg:0BFE  p		 /* DOS offset ---> 82C:3 */
mov	ah, ch

loc_10C05:				; CODE XREF: dseg:20BFF  j		 /* DOS offset ---> 82C:5 */
not	ah
mov	si, 0B800h

loc_10C0A:				; CODE XREF: dseg:1FDA8  P		 /* DOS offset ---> 82C:A */
mov	es, si
mov	al, [di]
and	al, ch
and	es:[bx], ah
or	es:[bx], al
cmp	word ptr [bp+10h], 0
jz	short locret_10C27

loc_10C1C:				; CODE XREF: dseg:20C14  j		 /* DOS offset ---> 82D:C */
mov	si, [bp+10h]
mov	es, si
and	es:[bx], ah

loc_10C24:				; CODE XREF: dseg:20CDF  p dseg:2124F  p ...		 /* DOS offset ---> 82E:4 */
or	es:[bx], al

locret_10C27:				; CODE XREF: dseg:0C1A  j
retf
;     ***************************************************************************

loc_10C28:				; CODE XREF: dseg:0A8A  p dseg:0AA7  p ...		 /* DOS offset ---> 82E:8 */
mov	si, [bp+10h]
;     ***************************************************************************
db  83h	;   *
db 0FEh	;   *
db    0
db  74h	; t
db  10h
;     ***************************************************************************

loc_10C30:				; CODE XREF: dseg:20CA6  j		 /* DOS offset ---> 82F:0 */
mov	es, si

loc_10C32:				; CODE XREF: dseg:20C9D  j		 /* DOS offset ---> 82F:2 */
mov	al, es:[bx]
mov	si, 0B800h
mov	es, si

loc_10C3A:				; CODE XREF: s_10C0A+3D  j		 /* DOS offset ---> 82F:A */
and	es:[bx], al
jmp	short loc_10C48
;     ***************************************************************************
nop
mov	si, 0B800h
mov	es, si
mov	al, es:[bx]

loc_10C48:				; CODE XREF: dseg:0C3D  j		 /* DOS offset ---> 830:8 */
nop
; START	OF FUNCTION CHUNK FOR s_10C0A

loc_10C49:				; CODE XREF: s_10C0A+2A  j		 /* DOS offset ---> 830:9 */
nop
retf
; END OF FUNCTION CHUNK	FOR s_10C0A
;     ***************************************************************************

loc_10C4B:				; CODE XREF: dseg:0B0A  p		 /* DOS offset ---> 830:B */
push	ds
;     ***************************************************************************
db  52h	; R
db  50h	; P
;     ***************************************************************************
mov	dh, al
not	al
mov	dl, al
mov	ax, [bp+10h]
mov	ds, ax
and	[di], dl
pop	ax
pop	dx
pop	ds
retf
;     ***************************************************************************

loc_10C5F:				; CODE XREF: dseg:0D70  p dseg:0D86  p ...		 /* DOS offset ---> 831:F */
push	es
push	ax
;     ***************************************************************************
db  2Eh	; .
db  8Ah	;   *
db 0A5h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR s_10C4E

loc_10C64:				; CODE XREF: s_10C4E+54  j		 /* DOS offset ---> 832:4 */
insb
add	dx, [bx+si-48h]
add	[bx+si-3F72h], ah
mov	dx, 3CEh
mov	al, 8
out	dx, al		; EGA: graph 1 and 2 addr reg:
; bit mask
; Bits 0-7 select bits to be masked in all planes
inc	dx
pop	ax
push	ax
out	dx, al		; EGA port: graphics controller	data register
mov	al, es:[bx]
mov	dx, 3C4h
mov	al, 2

loc_10C7E:				; CODE XREF: dseg:20C94  j		 /* DOS offset ---> 833:E */
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
pop	ax
xchg	ah, al
cmp	al, 0

loc_10C85:				; CODE XREF: dseg:20C76  j		 /* DOS offset ---> 834:5 */
jnz	short loc_10C90
mov	al, 7
out	dx, al		; EGA port: sequencer data register
mov	byte ptr es:[bx], 0
jmp	short loc_10CA9
;     ***************************************************************************

loc_10C90:				; CODE XREF: s_10C4E:loc_10C85  j		 /* DOS offset ---> 835:0 */
cmp	al, 7
jnz	short loc_10C9D
mov	al, 7

loc_10C96:				; CODE XREF: dseg:20C5D  j dseg:20C7C  j		 /* DOS offset ---> 835:6 */
out	dx, al		; EGA port: sequencer data register
mov	byte ptr es:[bx], 0FFh
jmp	short loc_10CA9
;     ***************************************************************************

loc_10C9D:				; CODE XREF: s_10C4E-FFBC  j		 /* DOS offset ---> 835:D */
out	dx, al		; EGA port: sequencer data register

loc_10C9E:				; CODE XREF: s_10C4E+2D  j s_10C4E+3F  j		 /* DOS offset ---> 835:E */
mov	byte ptr es:[bx], 0FFh
xor	al, 7

loc_10CA4:				; CODE XREF: s_10C4E+4E  j		 /* DOS offset ---> 836:4 */
out	dx, al		; EGA port: sequencer data register
mov	byte ptr es:[bx], 0

loc_10CA9:				; CODE XREF: s_10C4E-FFC0  j		 /* DOS offset ---> 836:9 */
; s_10C4E-FFB3  j
mov	dx, 3CEh
mov	al, 8

loc_10CAE:				; CODE XREF: dseg:20DFB  p		 /* DOS offset ---> 836:E */
out	dx, al		; EGA: graph 1 and 2 addr reg:
; bit mask
; Bits 0-7 select bits to be masked in all planes
inc	dx
mov	al, 0FFh
out	dx, al		; EGA port: graphics controller	data register
pop	ax
pop	es
retf
; END OF FUNCTION CHUNK	FOR s_10C4E
;     ***************************************************************************

loc_10CB6:				; DATA XREF: s_10C4E:loc_10CC8  r		 /* DOS offset ---> 837:6 */
int	0Ch		;  - IRQ4 - COM1 INTERRUPT
scasb
or	ax, 8B55h
in	al, dx
mov	bl, byte ptr word_1CEA2
and	bl, 1

loc_10CC4:				; CODE XREF: dseg:20CBF  j dseg:20DA4  j		 /* DOS offset ---> 838:4 */
xor	bh, bh
shl	bx, 1
; START	OF FUNCTION CHUNK FOR s_10C4E

loc_10CC8:				; CODE XREF: s_10C4E+20  j		 /* DOS offset ---> 838:8 */
jmp	word ptr cs:loc_10CB6[bx]
; END OF FUNCTION CHUNK	FOR s_10C4E
;     ***************************************************************************
push	bx

loc_10CCE:				; CODE XREF: s_1198C+CE  P dseg:1FE50  P		 /* DOS offset ---> 838:E */
push	cx
push	dx
mov	ax, [bp+0Eh]
cmp	ax, 8
jnb	short loc_10D47
nop
push	cs
call	near ptr system_graphics_flash_graphic
mov	bx, [bp+6]
mov	dx, [bp+0Ah]
cmp	bx, dx
jb	short loc_10CE9

loc_10CE7:				; CODE XREF: dseg:20CD0  j dseg:20CD7  j		 /* DOS offset ---> 83A:7 */
xchg	bx, dx

loc_10CE9:				; CODE XREF: dseg:0CE5  j s_10CCE+17  j		 /* DOS offset ---> 83A:9 */
cmp	bx, 280h

loc_10CED:				; CODE XREF: dseg:20CE5  j		 /* DOS offset ---> 83A:D */
jnb	short loc_10D47
cmp	dx, 280h
jnb	short loc_10D47
mov	al, 0FFh
mov	cl, bl
and	cl, 7
shr	al, cl
mov	byte ptr loc_13409, al
mov	cl, dl
and	cl, 7
mov	ax, 0FF80h
shr	ax, cl
mov	byte ptr loc_13409+1, al
mov	cl, 3
shr	bx, cl
shr	dx, cl

loc_10D14:		 /* DOS offset ---> 83D:4 */
sub	dx, bx
jnz	short loc_10D2A
mov	al, byte ptr loc_13409
and	al, byte ptr loc_13409+1
mov	byte ptr loc_13409, al
xor	al, al

loc_10D24:				; CODE XREF: s_10CCE+52  j		 /* DOS offset ---> 83E:4 */
mov	byte ptr loc_13409+1, 0
inc	dx

loc_10D2A:				; CODE XREF: dseg:0D16  j		 /* DOS offset ---> 83E:A */
dec	dx
mov	byte ptr loc_13408, dl
mov	dx, [bp+8]

loc_10D32:				; CODE XREF: dseg:20D10  j		 /* DOS offset ---> 83F:2 */
mov	cx, [bp+0Ch]
cmp	dx, cx
jb	short loc_10D3B
xchg	dx, cx

loc_10D3B:				; CODE XREF: dseg:0D37  j		 /* DOS offset ---> 83F:B */
cmp	dx, 0C8h ; '  *'
jnb	short loc_10D47

loc_10D41:				; CODE XREF: dseg:20CF3  j dseg:20D01  j		 /* DOS offset ---> 840:1 */
cmp	cx, 0C8h ; '  *'
jb	short loc_10D4F

loc_10D47:				; CODE XREF: dseg:0CD6  j		 /* DOS offset ---> 840:7 */
; dseg:loc_10CED  j ...
pop	dx
pop	cx
pop	bx
; START	OF FUNCTION CHUNK FOR s_10CCE

loc_10D4A:				; CODE XREF: s_10CCE+69  j		 /* DOS offset ---> 840:A */
pop	bp
mov	ax, 0FFFFh
retf
; END OF FUNCTION CHUNK	FOR s_10CCE
;     ***************************************************************************

loc_10D4F:				; CODE XREF: dseg:0D45  j		 /* DOS offset ---> 840:F */
sub	cx, dx
inc	cx
mov	ax, dx
mov	dx, ax
shl	ax, 1
shl	ax, 1
add	ax, dx
shl	ax, 1
shl	ax, 1
shl	ax, 1
shl	ax, 1
add	bx, ax

loc_10D66:				; CODE XREF: s_10CCE-FF29  j		 /* DOS offset ---> 842:6 */
push	bx
mov	al, byte ptr loc_13409
push	di
mov	di, [bp+0Eh]
nop
push	cs
call	loc_10C5F
pop	di
inc	bx
push	cx
mov	ah, byte ptr loc_13408
or	ah, ah
jz	short loc_10D8F

loc_10D7E:				; CODE XREF: dseg:0D8D  j		 /* DOS offset ---> 843:E */
mov	al, 0FFh
push	di
mov	di, [bp+0Eh]
nop
push	cs
call	loc_10C5F
pop	di
inc	bx

loc_10D8B:				; CODE XREF: dseg:20D59  j dseg:20D87  j		 /* DOS offset ---> 844:B */
dec	ah
jnz	short loc_10D7E

loc_10D8F:				; CODE XREF: dseg:0D7C  j		 /* DOS offset ---> 844:F */
pop	cx
mov	al, byte ptr loc_13409+1
or	al, al
jz	short loc_10DA1

loc_10D97:				; CODE XREF: dseg:20D3F  j		 /* DOS offset ---> 845:7 */
push	di
; START	OF FUNCTION CHUNK FOR s_10CCE

loc_10D98:				; CODE XREF: s_10CCE+AB  j dseg:20D31  j		 /* DOS offset ---> 845:8 */
mov	di, [bp+0Eh]
nop
push	cs
call	loc_10C5F
pop	di

loc_10DA1:				; CODE XREF: dseg:0D95  j		 /* DOS offset ---> 846:1 */
pop	bx
add	bx, 50h	; 'P'
loop	loc_10D66

loc_10DA7:				; CODE XREF: dseg:20CC1  j dseg:20DA2  j		 /* DOS offset ---> 846:7 */
pop	dx
pop	cx
pop	bx
pop	bp

loc_10DAB:				; CODE XREF: dseg:21425  p		 /* DOS offset ---> 846:B */
xor	ax, ax
retf
; END OF FUNCTION CHUNK	FOR s_10CCE
;     ***************************************************************************
mov	ax, [bp+0Eh]
cmp	ax, 8
jnb	short loc_10E25
nop
push	cs
call	near ptr system_graphics_flash_graphic
mov	bx, [bp+6]
mov	dx, [bp+0Ah]
cmp	bx, dx

loc_10DC3:				; CODE XREF: dseg:20DB7  j		 /* DOS offset ---> 848:3 */
jb	short loc_10DC7

loc_10DC5:				; CODE XREF: s_10CCE+86  j s_10CCE+C8  j		 /* DOS offset ---> 848:5 */
xchg	bx, dx

loc_10DC7:				; CODE XREF: dseg:loc_10DC3  j		 /* DOS offset ---> 848:7 */
cmp	bx, 280h

loc_10DCB:				; CODE XREF: dseg:20DC1  j		 /* DOS offset ---> 848:B */
jnb	short loc_10E25
; START	OF FUNCTION CHUNK FOR s_10CCE

loc_10DCD:				; CODE XREF: s_10CCE+54  j s_10CCE+78  j ...		 /* DOS offset ---> 848:D */
cmp	dx, 280h
jnb	short loc_10E25
mov	al, 0FFh
mov	cl, bl

loc_10DD7:				; CODE XREF: dseg:20E12  j		 /* DOS offset ---> 849:7 */
and	cl, 7
shr	al, cl
mov	byte ptr loc_13409, al
mov	cl, dl
and	cl, 7
mov	ax, 0FF80h
shr	ax, cl
mov	byte ptr loc_13409+1, al
mov	cl, 3
shr	bx, cl
shr	dx, cl

loc_10DF2:				; CODE XREF: s_10CCE+19  j		 /* DOS offset ---> 84B:2 */
sub	dx, bx
jnz	short loc_10E08
mov	al, byte ptr loc_13409

loc_10DF9:				; CODE XREF: f_10DF2+4  j		 /* DOS offset ---> 84B:9 */
and	al, byte ptr loc_13409+1
mov	byte ptr loc_13409, al
xor	al, al
; END OF FUNCTION CHUNK	FOR s_10CCE
;     ***************************************************************************
db 0C6h
db    6
word_10E04	dw 340Ah		; DATA XREF: game_options_func+93  r
db    0
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR f_10DF2

loc_10E07:				; CODE XREF: f_10DF2+7D  j		 /* DOS offset ---> 84C:7 */
inc	dx
; END OF FUNCTION CHUNK	FOR f_10DF2
; START	OF FUNCTION CHUNK FOR s_10CCE

loc_10E08:				; CODE XREF: s_10CCE-FEDA  j		 /* DOS offset ---> 84C:8 */
dec	dx

loc_10E09:				; CODE XREF: dseg:20DF3  j		 /* DOS offset ---> 84C:9 */
mov	byte ptr loc_13408, dl
mov	dx, [bp+arg_4]
mov	cx, [bp+arg_8]

loc_10E13:				; CODE XREF: dseg:20DD7  j		 /* DOS offset ---> 84D:3 */
cmp	dx, cx
jb	short loc_10E19

loc_10E17:				; CODE XREF: dseg:20ECA  p dseg:20F11  p ...		 /* DOS offset ---> 84D:7 */
xchg	dx, cx

loc_10E19:				; CODE XREF: s_10CCE-FEB9  j		 /* DOS offset ---> 84D:9 */
cmp	dx, 0C8h ; '  *'
jnb	short loc_10E25
cmp	cx, 0C8h ; '  *'
jb	short loc_10E2A

loc_10E25:				; CODE XREF: dseg:0DB4  j		 /* DOS offset ---> 84E:5 */
; dseg:loc_10DCB  j ...
pop	bp
mov	ax, 0FFFFh
retf
;     ***************************************************************************

loc_10E2A:				; CODE XREF: s_10CCE-FEAB  j		 /* DOS offset ---> 84E:A */
sub	cx, dx
inc	cx
push	di

loc_10E2E:				; CODE XREF: s_10CCE-FE6F  j		 /* DOS offset ---> 84E:E */
nop
push	cs
call	loc_10F59
mov	al, byte ptr loc_13409
nop
push	cs
call	s_12C0
inc	di
push	cx
mov	ah, byte ptr loc_13408
or	ah, ah
jz	short loc_10E51

loc_10E45:				; CODE XREF: s_10CCE-FE7F  j		 /* DOS offset ---> 850:5 */
mov	al, 0FFh
nop
push	cs
call	s_12C0

loc_10E4C:				; CODE XREF: dseg:20E3B  j		 /* DOS offset ---> 850:C */
inc	di
dec	ah
jnz	short loc_10E45

loc_10E51:				; CODE XREF: s_10CCE-FE8B  j		 /* DOS offset ---> 851:1 */
pop	cx
mov	al, byte ptr loc_13409+1
or	al, al

loc_10E57:				; CODE XREF: f_10DF2+37  j dseg:20EDC  p ...		 /* DOS offset ---> 851:7 */
jz	short loc_10E5E
nop
push	cs
call	s_12C0

loc_10E5E:				; CODE XREF: s_10CCE:loc_10E57  j		 /* DOS offset ---> 851:E */
inc	dx
loop	loc_10E2E
pop	di
pop	bp

loc_10E63:				; CODE XREF: f_10DF2+63  j		 /* DOS offset ---> 852:3 */
xor	ax, ax
retf
; END OF FUNCTION CHUNK	FOR s_10CCE

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_graphics_video_set_mode proc far

arg_0		= word ptr  6

push	bp

loc_10E67:				; CODE XREF: f_10DF2+48  j		 /* DOS offset ---> 852:7 */
mov	bp, sp
mov	ax, [bp+arg_0]
xor	ah, ah
int	10h		; - VIDEO - SET	VIDEO MODE
; AL = mode
pop	bp

locret_10E71:				; CODE XREF: f_10DF2+13  j
retf
system_graphics_video_set_mode endp

;     ***************************************************************************
js	short near ptr unk_10E82
xchg	ax, cx
push	cs
stosb
push	cs

loc_10E78:				; CODE XREF: dseg:1106  p dseg:1FA6  p		 /* DOS offset ---> 853:8 */
push	dx
;     ***************************************************************************
db  50h	; P
db 0BAh	;   *
db 0CEh	;   *
db    3
db 0B0h	;   *
db    4
db 0EEh	;   *
db  42h	; B
db 0B0h	;   *
unk_10E82	db    0			; CODE XREF: dseg:0E72  j
db 0EEh	;   *
db 0BAh	;   *
db 0C4h	;   *
db    3
db 0B0h	;   *
db    2
db 0EEh	;   *
db  42h	; B
db 0B0h	;   *
db    1
db 0EEh	;   *
db  58h	; X
db  5Ah	; Z
db 0CBh	;   *
;     ***************************************************************************

loc_10E91:				; CODE XREF: dseg:110D  p dseg:1FAC  p		 /* DOS offset ---> 855:1 */
push	dx
;     ***************************************************************************
db  50h	; P
db 0BAh	;   *
db 0CEh	;   *
db    3
db 0B0h	;   *
db    4
;     ***************************************************************************

loc_10E98:				; CODE XREF: dseg:20F5F  p dseg:20FDD  p ...		 /* DOS offset ---> 855:8 */
out	dx, al
;     ***************************************************************************
db  42h	; B
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR f_10DF2

loc_10E9A:				; CODE XREF: f_10DF2+6  j		 /* DOS offset ---> 855:A */
mov	al, 2
out	dx, al		; EGA port: graphics controller	data register
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx

loc_10EA4:		 /* DOS offset ---> 856:4 */
mov	al, 4
out	dx, al		; EGA port: sequencer data register
pop	ax
pop	dx
retf
; END OF FUNCTION CHUNK	FOR f_10DF2
;     ***************************************************************************

loc_10EAA:				; CODE XREF: dseg:loc_11114  p		 /* DOS offset ---> 856:A */
; dseg:1FB2  p
push	dx
;     ***************************************************************************
db  50h	; P
db 0BAh	;   *
db 0CEh	;   *
db    3
db 0B0h	;   *
db    4
db 0EEh	;   *
db  42h	; B
db 0B0h	;   *
db    1
db 0EEh	;   *
db 0BAh	;   *
db 0C4h	;   *
db    3
db 0B0h	;   *
db    2
db 0EEh	;   *
db  42h	; B
db 0B0h	;   *
db    2
db 0EEh	;   *
db  58h	; X
db  5Ah	; Z
;     ***************************************************************************

locret_10EC2:				; CODE XREF: f_10DF2+A5  j
retf
;     ***************************************************************************
off_10EC3	dw offset loc_10ED7	; DATA XREF: s_0EC7+B  r
dw offset unk_10F23

;     *************** S U B	R O U T	I N E     ***************************************


s_0EC7		proc far		; CODE XREF: dseg:10E5  p dseg:113D  p ...		 /* DOS offset ---> 858:7 */
mov	bl, byte ptr word_1CEA2
and	bl, 1
xor	bh, bh
shl	bx, 1
jmp	cs:off_10EC3[bx]
;     ***************************************************************************

loc_10ED7:				; DATA XREF: dseg:off_10EC3  o		 /* DOS offset ---> 859:7 */
mov	ax, [bp+6]
cmp	ax, 4Fh	; 'O'
ja	short loc_10F21
mov	di, ax
mov	cx, [bp+0Ah]
or	cx, cx
jz	short loc_10F21
add	ax, cx
jb	short loc_10F21
cmp	ax, 50h	; 'P'
ja	short loc_10F21

loc_10EF1:				; CODE XREF: f_10DF2+E3  j		 /* DOS offset ---> 85B:1 */
mov	ax, [bp+8]

loc_10EF4:				; CODE XREF: dseg:20F3D  j		 /* DOS offset ---> 85B:4 */
cmp	ax, 0C7h ; '  *'
ja	short loc_10F21
mov	bx, ax
mov	ax, [bp+0Ch]

loc_10EFE:		 /* DOS offset ---> 85B:E */
or	ax, ax
jz	short loc_10F21
add	ax, bx
jb	short loc_10F21

loc_10F06:				; CODE XREF: dseg:20EB8  j dseg:20EC6  j		 /* DOS offset ---> 85C:6 */
cmp	ax, 0C8h ; '  *'
ja	short loc_10F21
mov	ax, bx
mov	dx, ax

loc_10F0F:				; CODE XREF: game_mil_hire_soldiers_total_required+34  j		 /* DOS offset ---> 85C:F */
shl	ax, 1
shl	ax, 1
add	ax, dx
shl	ax, 1
shl	ax, 1
shl	ax, 1
shl	ax, 1
add	di, ax
clc
retf
;     ***************************************************************************

loc_10F21:				; CODE XREF: s_0EC7+16  j s_0EC7+1F  j ...		 /* DOS offset ---> 85E:1 */
stc
retf
s_0EC7		endp		 /* DOS offset ---> 858:7 */

;     ***************************************************************************
unk_10F23	db  8Bh	;   *		; DATA XREF: dseg:0EC5  o
db  46h	; F
db    6
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_mil_hire_soldiers_total_required

loc_10F26:				; CODE XREF: game_mil_hire_soldiers_total_required+20  j		 /* DOS offset ---> 85E:6 */
cmp	ax, 4Fh	; 'O'
ja	short loc_10F21
; END OF FUNCTION CHUNK	FOR game_mil_hire_soldiers_total_required
;     ***************************************************************************
db  8Bh	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_mil_hire_soldiers_total_required

loc_10F2C:				; CODE XREF: game_mil_hire_soldiers_total_required+17  j		 /* DOS offset ---> 85E:C */
fmul	[bp+di+arg_A48]
or	cx, cx
jz	short loc_10F21
add	ax, cx
jb	short loc_10F21
cmp	ax, 50h	; 'P'
ja	short loc_10F21
mov	ax, [bp+arg_2]

loc_10F40:				; CODE XREF: dseg:20F0D  j		 /* DOS offset ---> 860:0 */
cmp	ax, 0C7h ; '  *'
ja	short loc_10F21
mov	dx, ax

loc_10F47:				; CODE XREF: dseg:20FEB  p		 /* DOS offset ---> 860:7 */
mov	ax, [bp+arg_6]

loc_10F4A:				; CODE XREF: dseg:1FADD  P		 /* DOS offset ---> 860:A */
or	ax, ax
jz	short loc_10F21
add	ax, dx
jb	short loc_10F21
cmp	ax, 0C8h ; '  *'

loc_10F55:				; CODE XREF: dseg:20FAD  j		 /* DOS offset ---> 861:5 */
ja	short loc_10F21
clc
retf
; END OF FUNCTION CHUNK	FOR game_mil_hire_soldiers_total_required
;     ***************************************************************************

loc_10F59:				; CODE XREF: dseg:0412  p		 /* DOS offset ---> 861:9 */
; game_view_data_order_set-FF42  p ...
push	ax
;     ***************************************************************************
db  52h	; R
db  83h	;   *
db 0E2h	;   *
db    1
db  83h	;   *
db 0FAh	;   *
db    0
db  75h	; u
db  1Dh
db  5Ah	; Z
db  52h	; R
db 0D1h	;   *
db 0EAh	;   *
db  8Bh	;   *
db 0C2h	;   *
db  8Bh	;   *
db 0D0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    3
db 0C2h	;   *
db 0D1h	;   *
db 0E0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    3
db 0C3h	;   *
db  8Bh	;   *
db 0F8h	;   *
db  5Ah	; Z
db 0EBh	;   *
db  1Eh
db  5Ah	; Z
db  52h	; R
db 0D1h	;   *
db 0EAh	;   *
db  8Bh	;   *
db 0C2h	;   *
db  8Bh	;   *
db 0D0h	;   *
db 0D1h	;   *
db 0E0h	;   *
;     ***************************************************************************

loc_10F8A:				; CODE XREF: dseg:20F7D  j		 /* DOS offset ---> 864:A */
shl	ax, 1
add	ax, dx
shl	ax, 1
shl	ax, 1
shl	ax, 1
shl	ax, 1
add	ax, 2000h
add	ax, bx
mov	di, ax
pop	dx
pop	ax
retf
;     ***************************************************************************
push	bp

loc_10FA1:				; CODE XREF: dseg:20F88  j		 /* DOS offset ---> 866:1 */
mov	bp, sp
push	es
push	di

loc_10FA5:				; CODE XREF: dseg:20F67  j		 /* DOS offset ---> 866:5 */
push	si
mov	di, [bp+6]
mov	si, [bp+8]
mov	cx, [bp+0Ah]

loc_10FAF:				; CODE XREF: dseg:20F53  j		 /* DOS offset ---> 866:F */
mov	dl, ch
mov	ch, 0

loc_10FB3:				; CODE XREF: dseg:21419  p		 /* DOS offset ---> 867:3 */
mov	dh, 0
xchg	bx, dx
mov	ax, 0A000h
mov	es, ax
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
xchg	bx, dx
push	cx
mov	cx, dx
push	dx
mov	dx, 3CFh
mov	al, 0
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
mov	[si], bl
inc	si
mov	al, 2
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
mov	[si], bl
inc	si
mov	al, 1
;     ***************************************************************************
db 0EEh	;   *
db  26h	; &
db  8Ah	;   *
db  1Dh
db  88h	;   *
db  1Ch
db  46h	; F
db  47h	; G
db 0E2h	;   *
db 0E2h	;   *
db  5Ah	; Z
db  83h	;   *
db 0C7h	;   *
db  50h	; P
db  2Bh	; +
db 0FAh	;   *
db  59h	; Y
db 0E2h	;   *
db 0D2h	;   *
db  5Eh	; ^
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_mil_train_soldiers_calc

loc_10FF4:				; CODE XREF: game_mil_train_soldiers_calc+2F  j		 /* DOS offset ---> 86B:4 */
pop	di
pop	es
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_mil_train_soldiers_calc
;     ***************************************************************************
off_10FF8	dw offset loc_11012	; DATA XREF: game_mil_train_soldiers_calc:loc_1100D  r
dw offset loc_11077
;     ***************************************************************************
push	bp
mov	bp, sp
push	es
push	di
push	si
mov	bl, byte ptr word_1CEA2
and	bl, 1
; START	OF FUNCTION CHUNK FOR game_mil_train_soldiers_calc

loc_11009:				; CODE XREF: game_mil_train_soldiers_calc+1C  j		 /* DOS offset ---> 86C:9 */
xor	bh, bh
shl	bx, 1

loc_1100D:				; CODE XREF: game_mil_train_soldiers_calc+14  j		 /* DOS offset ---> 86C:D */
; dseg:20FE5  j
jmp	cs:off_10FF8[bx]
; END OF FUNCTION CHUNK	FOR game_mil_train_soldiers_calc
;     ***************************************************************************

loc_11012:				; DATA XREF: dseg:off_10FF8  o		 /* DOS offset ---> 86D:2 */
mov	ax, [bp+8]
mov	dx, ax
shl	ax, 1
shl	ax, 1
add	ax, dx
shl	ax, 1
shl	ax, 1
shl	ax, 1
shl	ax, 1
add	ax, [bp+6]
mov	di, ax
mov	si, [bp+0Ah]

loc_1102D:				; CODE XREF: game_ai_training+21  P		 /* DOS offset ---> 86E:D */
mov	cx, [bp+0Ch]
mov	dl, ch

loc_11032:		 /* DOS offset ---> 86F:2 */
mov	ch, 0
mov	dh, 0
xchg	bx, dx

loc_11038:				; CODE XREF: dseg:21090  j		 /* DOS offset ---> 86F:8 */
mov	ax, 0A000h
mov	es, ax
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
xchg	bx, dx
; START	OF FUNCTION CHUNK FOR game_mil_train_soldiers_train_func

loc_11046:				; CODE XREF: game_mil_train_soldiers_train_func-FFBC  j		 /* DOS offset ---> 870:6 */
push	cx
mov	cx, dx
push	dx
mov	dx, 3CFh

loc_1104D:				; CODE XREF: game_mil_train_soldiers_train_func-FFC5  j		 /* DOS offset ---> 870:D */
mov	al, 0
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
mov	[si], bl

loc_11055:				; CODE XREF: game_mil_train_soldiers_train_func+5A  j		 /* DOS offset ---> 871:5 */
inc	si
mov	al, 2
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
mov	[si], bl
inc	si
mov	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
mov	[si], bl
inc	si
inc	di
loop	loc_1104D
pop	dx
add	di, 50h	; 'P'
sub	di, dx
pop	cx
loop	loc_11046
jmp	short loc_110C5
; END OF FUNCTION CHUNK	FOR game_mil_train_soldiers_train_func
;     ***************************************************************************
nop

loc_11077:				; DATA XREF: dseg:0FFA  o		 /* DOS offset ---> 873:7 */
mov	ax, 0B800h
mov	es, ax

loc_1107C:				; CODE XREF: game_mil_train_soldiers_train_func+49  j		 /* DOS offset ---> 873:C */
mov	bx, [bp+6]
mov	dx, [bp+8]
nop
push	cs
call	loc_10F59

loc_11087:				; CODE XREF: dseg:21052  j dseg:21061  j ...		 /* DOS offset ---> 874:7 */
mov	si, [bp+0Ah]
; START	OF FUNCTION CHUNK FOR game_mil_train_soldiers_train_func

loc_1108A:				; CODE XREF: game_mil_train_soldiers_train_func+25  j		 /* DOS offset ---> 874:A */
mov	cx, [bp+arg_6]
mov	dl, ch
mov	ch, 0

loc_11091:				; CODE XREF: dseg:1FB08  P dseg:21038  j ...		 /* DOS offset ---> 875:1 */
mov	dh, 0

loc_11093:				; CODE XREF: game_mil_train_soldiers_train_func:loc_110C3  j		 /* DOS offset ---> 875:3 */
push	cx
mov	cx, dx
push	dx

loc_11097:				; CODE XREF: game_mil_train_soldiers_train_func-FF84  j		 /* DOS offset ---> 875:7 */
mov	al, es:[di]

loc_1109A:				; CODE XREF: dseg:21122  p		 /* DOS offset ---> 875:A */
mov	[si], al
inc	si
mov	al, es:[di]
mov	[si], al
inc	si
mov	al, es:[di]
mov	[si], al
inc	si
inc	di
loop	loc_11097
pop	cx
cmp	di, 2000h
jb	short loc_110BC
sub	di, 2000h
add	di, 50h	; 'P'
jmp	short loc_110C0
;     ***************************************************************************

loc_110BC:				; CODE XREF: game_mil_train_soldiers_train_func-FF7D  j		 /* DOS offset ---> 877:C */
add	di, 2000h

loc_110C0:				; CODE XREF: game_mil_train_soldiers_train_func-FF74  j		 /* DOS offset ---> 878:0 */
sub	di, cx
pop	cx

loc_110C3:				; CODE XREF: dseg:21271  p		 /* DOS offset ---> 878:3 */
loop	loc_11093

loc_110C5:				; CODE XREF: game_mil_train_soldiers_train_func-FFBA  j		 /* DOS offset ---> 878:5 */
pop	si
pop	di
pop	es
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_mil_train_soldiers_train_func
;     ***************************************************************************
ficom	word ptr [bx+si]
db	36h
adc	[bp+si-5DE2h], cx
into

loc_110D2:				; CODE XREF: dseg:21130  j		 /* DOS offset ---> 879:2 */
and	bl, 1
xor	bh, bh
shl	bx, 1
jmp	word ptr cs:[bx+10CAh]
;     ***************************************************************************
push	bp
mov	bp, sp
push	si
push	di
nop
push	cs
call	near ptr s_0EC7
jb	short loc_11132
push	es
mov	ax, 0A000h
mov	es, ax
mov	si, [bp+0Eh]
mov	ax, [bp+8]
mov	dx, ax
and	ax, 7
add	si, ax
add	ax, ax
add	si, ax

loc_11101:				; CODE XREF: dseg:112F  j		 /* DOS offset ---> 87C:1 */
push	cx
push	di

loc_11103:				; CODE XREF: dseg:1119  j		 /* DOS offset ---> 87C:3 */
push	si
nop
push	cs
call	loc_10E78
movsb
dec	di
nop
push	cs
call	loc_10E91
movsb
dec	di

loc_11112:				; CODE XREF: dseg:210E0  j		 /* DOS offset ---> 87D:2 */
nop
push	cs

loc_11114:				; CODE XREF: dseg:1CAFD  P		 /* DOS offset ---> 87D:4 */
call	loc_10EAA
movsb
pop	si
loop	loc_11103

loc_1111B:				; CODE XREF: dseg:21110  j		 /* DOS offset ---> 87D:B */
add	si, 3
pop	di
add	di, 50h	; 'P'
pop	cx
inc	dx

loc_11124:				; CODE XREF: dseg:21119  j dseg:2111F  j		 /* DOS offset ---> 87E:4 */
and	dx, 7
jnz	short loc_1112C
mov	si, [bp+0Eh]

loc_1112C:				; CODE XREF: dseg:1127  j		 /* DOS offset ---> 87E:C */
dec	word ptr [bp+0Ch]
jnz	short loc_11101
pop	es

loc_11132:				; CODE XREF: dseg:10E8  j		 /* DOS offset ---> 87F:2 */
pop	di
pop	si

loc_11134:				; CODE XREF: dseg:1CB1B  P		 /* DOS offset ---> 87F:4 */
pop	bp
retf
;     ***************************************************************************
push	bp

loc_11137:				; CODE XREF: dseg:21421  p		 /* DOS offset ---> 87F:7 */
mov	bp, sp
push	si
push	di
nop
push	cs
call	near ptr s_0EC7
jb	short loc_11193
mov	bx, [bp+6]
mov	dx, [bp+8]
nop
push	cs
call	loc_10F59
push	es
mov	si, [bp+0Eh]
mov	ax, [bp+8]
mov	dx, ax
and	ax, 7
add	si, ax
add	ax, ax
add	si, ax
mov	ax, 0B800h
mov	es, ax
push	cx
push	di
inc	si
; START	OF FUNCTION CHUNK FOR game_data_get_food_max_difference

loc_11167:				; CODE XREF: game_data_get_food_max_difference-FFC7  j		 /* DOS offset ---> 882:7 */
; game_data_get_food_max_difference+2D  j
inc	si
lodsb
stosb

loc_1116A:				; CODE XREF: game_data_get_food_max_difference+2B  j		 /* DOS offset ---> 882:A */
; game_data_get_food_max_difference+31  j
sub	si, 2
loop	loc_11167
add	si, 2
; END OF FUNCTION CHUNK	FOR game_data_get_food_max_difference

;     *************** S U B	R O U T	I N E     ***************************************


s_1172		proc far		; CODE XREF: game_send_pre_result+5A  P		 /* DOS offset ---> 883:2 */
; dseg:1CCD5  P
pop	di
;     ***************************************************************************
db  81h	;   *
db 0FFh
db    0
db  20h
db  72h	; r
db    6
db  81h	;   *
db 0EFh	;   *
db 0B0h	;   *
db  1Fh
db 0EBh	;   *
db    4
db  81h	;   *
db 0C7h	;   *
db    0
db  20h
db  59h	; Y
db  42h	; B
db  83h	;   *
db 0E2h	;   *
db    7
db  75h	; u
db    3
db  8Bh	;   *
db  76h	; v
db  0Eh
db 0FFh
unk_1118E	db  4Eh	; N		; CODE XREF: dseg:117DA  P s_1198C+19F  P	...
db  0Ch
db  75h	; u
db 0D2h	;   *
db    7
;     ***************************************************************************

loc_11193:				; CODE XREF: dseg:1140  j		 /* DOS offset ---> 885:3 */
pop	di
pop	si
pop	bp
retf
s_1172		endp		 /* DOS offset ---> 883:2 */

;     ***************************************************************************
push	di
push	ds
push	si
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 4
out	dx, al		; EGA port: sequencer data register
xor	di, di
mov	cx, 1F40h
mov	dx, 0A000h
mov	es, dx
xor	ax, ax
rep stosw
xor	ax, ax
pop	si
pop	ds
pop	di
retf
;     ***************************************************************************
push	di
mov	dx, 3C4h

loc_111BC:		 /* DOS offset ---> 887:C */
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 3
out	dx, al		; EGA port: sequencer data register
xor	di, di

loc_111C5:				; CODE XREF: s_1118E+2F  j		 /* DOS offset ---> 888:5 */
mov	cx, 1F40h
xor	ax, ax
mov	dx, 0A000h
mov	es, dx
rep stosw
xor	ax, ax
; START	OF FUNCTION CHUNK FOR s_1118E

loc_111D3:				; CODE XREF: s_1118E+2D  j s_1118E+36  j		 /* DOS offset ---> 889:3 */
pop	di
retf
; END OF FUNCTION CHUNK	FOR s_1118E
;     ***************************************************************************
push	bp

loc_111D6:				; CODE XREF: dseg:1DD12  P		 /* DOS offset ---> 889:6 */
mov	bp, sp
push	ds
push	di
push	es
push	si

loc_111DC:		 /* DOS offset ---> 889:C */
mov	ax, 2FA6h
mov	es, ax
mov	di, [bp+8]
mov	ax, 0F000h
mov	ds, ax
mov	ax, [bp+6]
mov	cl, 3
shl	ax, cl
add	ax, 0FA6Eh

loc_111F3:				; CODE XREF: s_111D6+69  j		 /* DOS offset ---> 88B:3 */
mov	si, ax
mov	cx, 4

loc_111F8:				; CODE XREF: dseg:21367  j		 /* DOS offset ---> 88B:8 */
rep movsw
sub	di, 8
mov	ax, di
pop	si
pop	es
pop	di
pop	ds
pop	bp

locret_11204:				; CODE XREF: dseg:211F7  j
retf
;     ***************************************************************************
add	[bx+di], al
add	al, 5
add	al, [bp+di]
push	es
pop	es
or	[di], dh
and	[di], dl

loc_11211:				; CODE XREF: dseg:21378  j		 /* DOS offset ---> 88D:1 */
xor	[di], dh
nop
nop
nop
nop
and	[di], dl
or	[di], dh
nop

loc_1121C:				; CODE XREF: dseg:21210  j		 /* DOS offset ---> 88D:C */
nop
;     ***************************************************************************
db  34h	; 4
db  12h
db  8Dh	;   *
db  12h

;     *************** S U B	R O U T	I N E     ***************************************


system_graphics_flash_graphic proc far	; CODE XREF: game_view_data_order_set:loc_104CD  p
; game_check_province_is_neighbor-FF9D  p ...

; FUNCTION CHUNK AT 12B7 SIZE 00000002 BYTES

push	bx
;     ***************************************************************************
db  51h	; Q
db  52h	; R
db  8Ah	;   *
db  1Eh
db 0A2h	;   *
db 0CEh	;   *
db  80h	;   *
db 0E3h	;   *
db    1
db  32h	; 2
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db  2Eh	; .
db 0FFh
db 0A7h	;   *
db  1Dh
db  12h
;     ***************************************************************************
mov	bl, ah

loc_11236:				; CODE XREF: s_111D6+2A  j		 /* DOS offset ---> 88F:6 */
cmp	bl, 3
ja	short loc_112B2
or	bl, bl
jnz	short loc_1124D

loc_1123F:				; CODE XREF: s_111D6+1C  j		 /* DOS offset ---> 88F:F */
mov	cs:byte_112BE, 10h

loc_11245:				; CODE XREF: dseg:21243  j		 /* DOS offset ---> 890:5 */
mov	cs:byte_112BF, 8
jmp	short loc_1127D
;     ***************************************************************************

loc_1124D:				; CODE XREF: system_graphics_flash_graphic+1C  j		 /* DOS offset ---> 890:D */
dec	bl
jnz	short loc_1125F
mov	cs:byte_112BE, 18h
mov	cs:byte_112BF, 0
jmp	short loc_1127D
;     ***************************************************************************

loc_1125F:				; CODE XREF: system_graphics_flash_graphic+2E  j		 /* DOS offset ---> 891:F */
; dseg:213B8  j
dec	bl
jnz	short loc_11271
mov	cs:byte_112BE, 0

loc_11269:				; CODE XREF: dseg:21241  j dseg:21248  j ...		 /* DOS offset ---> 892:9 */
mov	cs:byte_112BF, 8
jmp	short loc_1127D
;     ***************************************************************************

loc_11271:				; CODE XREF: system_graphics_flash_graphic+40  j		 /* DOS offset ---> 893:1 */
mov	cs:byte_112BE, 10h

loc_11277:				; CODE XREF: dseg:213C4  j		 /* DOS offset ---> 893:7 */
mov	cs:byte_112BF, 0

loc_1127D:				; CODE XREF: system_graphics_flash_graphic+2A  j		 /* DOS offset ---> 893:D */
; system_graphics_flash_graphic+3C  j ...
xor	bx, bx
mov	bl, al
mov	bl, cs:[bx+1205h]
mov	cs:byte_112BD, bl
jmp	short loc_112B2
;     ***************************************************************************
xor	bx, bx
mov	bl, ah
cmp	bx, 3
ja	short loc_112B7
shl	bx, 1

loc_11298:				; CODE XREF: dseg:21294  j		 /* DOS offset ---> 895:8 */
shl	bx, 1

loc_1129A:				; CODE XREF: s_111D6+BB  j		 /* DOS offset ---> 895:A */
mov	cx, cs:[bx+120Dh]
mov	dx, cs:[bx+120Fh]

loc_112A4:				; CODE XREF: s_111D6+90  j		 /* DOS offset ---> 896:4 */
mov	cs:word_11333, cx

loc_112A9:				; CODE XREF: dseg:212A5  j		 /* DOS offset ---> 896:9 */
cmp	al, 0
jnz	short loc_112B2
mov	cs:word_11333, dx

loc_112B2:				; CODE XREF: system_graphics_flash_graphic+18  j		 /* DOS offset ---> 897:2 */
; system_graphics_flash_graphic+6A  j ...
clc
pop	dx
pop	cx
pop	bx
retf
system_graphics_flash_graphic endp

;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR system_graphics_flash_graphic

loc_112B7:				; CODE XREF: system_graphics_flash_graphic+73  j		 /* DOS offset ---> 897:7 */
jmp	short loc_112B2
; END OF FUNCTION CHUNK	FOR system_graphics_flash_graphic
;     ***************************************************************************
off_112B9	dw offset loc_112D1	; DATA XREF: s_12C0+C  r
dw offset loc_11324
byte_112BD	db 7			; DATA XREF: system_graphics_flash_graphic+65  w
; s_111D6-FEE1  r ...
byte_112BE	db 0			; DATA XREF: system_graphics_flash_graphic:loc_1123F  w
; system_graphics_flash_graphic+30  w ...
byte_112BF	db 0			; DATA XREF: system_graphics_flash_graphic:loc_11245  w
; system_graphics_flash_graphic+36  w ...

;     *************** S U B	R O U T	I N E     ***************************************


s_12C0		proc near		; CODE XREF: game_view_data_order_set-FF1D  p		 /* DOS offset ---> 898:0 */
; game_view_data_order_set:loc_104EE  p ...
push	bx
mov	bl, byte ptr word_1CEA2
and	bl, 1
xor	bh, bh
shl	bx, 1
jmp	cs:off_112B9[bx]
s_12C0		endp		 /* DOS offset ---> 898:0 */

;     ***************************************************************************

loc_112D1:				; DATA XREF: dseg:off_112B9  o		 /* DOS offset ---> 899:1 */
pop	bx
push	es
push	ax
push	dx
; START	OF FUNCTION CHUNK FOR s_111D6

loc_112D5:				; CODE XREF: s_111D6+F6  j		 /* DOS offset ---> 899:5 */
mov	dx, 0A000h
mov	es, dx
mov	ah, al
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
mov	dx, 3CEh
mov	al, 3
out	dx, al		; EGA: graph 1 and 2 addr reg:
; data rotate and function select for write mode 00. Bits:
; 0-2: set rotate count	for write mode 00
; 3-4: fn for write modes 00 and 02
;      00=no change; 01=AND; 10=OR; 11=XOR
inc	dx
mov	al, cs:byte_112BE
out	dx, al		; EGA port: graphics controller	data register
mov	dx, 3C5h
cmp	al, 0

loc_112F3:				; CODE XREF: s_111D6+107  j		 /* DOS offset ---> 89B:3 */
jz	short loc_11300
mov	al, cs:byte_112BD
out	dx, al		; EGA port: sequencer data register
mov	al, es:[bx]

loc_112FD:				; CODE XREF: s_111D6+D3  j		 /* DOS offset ---> 89B:D */
mov	es:[bx], ah

loc_11300:				; CODE XREF: s_111D6:loc_112F3  j		 /* DOS offset ---> 89C:0 */
; dseg:11640  p ...
mov	al, cs:byte_112BD
add	al, 0F8h ; '  *'
not	al
out	dx, al		; EGA port: sequencer data register
mov	dx, 3CFh
mov	al, cs:byte_112BF
cmp	al, 0
jz	short loc_1131D
out	dx, al		; EGA port: graphics controller	data register
mov	al, es:[bx]
not	ah
mov	es:[bx], ah

loc_1131D:				; CODE XREF: s_111D6-FEC4  j		 /* DOS offset ---> 89D:D */
xor	al, al
out	dx, al		; EGA port: graphics controller	data register
pop	dx
pop	ax

loc_11322:				; CODE XREF: unkfunc_11302+5  j		 /* DOS offset ---> 89E:2 */
; unkfunc_11302+C  j
pop	es
retf
; END OF FUNCTION CHUNK	FOR s_111D6
;     ***************************************************************************

loc_11324:				; DATA XREF: dseg:12BB  o		 /* DOS offset ---> 89E:4 */
pop	bx
push	ds
push	dx
push	ax
mov	dh, al
not	al
mov	dl, al
mov	ax, 0B800h
mov	ds, ax
;     ***************************************************************************
word_11333	dw 0			; DATA XREF: system_graphics_flash_graphic:loc_112A4  w
; system_graphics_flash_graphic+8C  w
;     ***************************************************************************
pop	ax
pop	dx
pop	ds
retf
;     ***************************************************************************
dec	bp

loc_1133A:				; CODE XREF: unkfunc_11302+1E  j		 /* DOS offset ---> 89F:A */
adc	ax, [di]
adc	al, 8Ah	; '  *'
push	ds
mov	byte ptr loc_180CD+1, al
jcxz	short near ptr loc_11344+1

loc_11344:				; CODE XREF: dseg:1342  j		 /* DOS offset ---> 8A0:4 */
xor	bh, bh
shl	bx, 1
jmp	word ptr cs:[bx+1339h]
;     ***************************************************************************
push	bp
mov	bp, sp
push	si
push	di
nop
push	cs
call	near ptr s_0EC7
jnb	short loc_1135D
; START	OF FUNCTION CHUNK FOR unkfunc_11302

loc_11359:				; CODE XREF: unkfunc_11302:loc_11402  j		 /* DOS offset ---> 8A1:9 */
pop	di
pop	si
pop	bp
retf
; END OF FUNCTION CHUNK	FOR unkfunc_11302
;     ***************************************************************************

loc_1135D:				; CODE XREF: dseg:1357  j		 /* DOS offset ---> 8A1:D */
; unkfunc_11302+52  j
mov	dx, [bp+0Eh]
mov	al, 0FFh
; START	OF FUNCTION CHUNK FOR unkfunc_11302

loc_11362:				; CODE XREF: unkfunc_11302+25  j		 /* DOS offset ---> 8A2:2 */
; unkfunc_11302+37  j
shr	dh, 1
jb	short loc_11368

loc_11366:				; CODE XREF: dseg:118ED  p		 /* DOS offset ---> 8A2:6 */
; game_messenger_travel_s_11C82+43  p
xor	al, al

loc_11368:				; CODE XREF: unkfunc_11302-FF9E  j		 /* DOS offset ---> 8A2:8 */
; dseg:21365  j
mov	byte ptr cs:loc_113D0+1, al
mov	ax, 0F008h
shr	dl, 1
jb	short loc_11376
mov	ax, 0D020h

loc_11376:				; CODE XREF: unkfunc_11302-FF91  j		 /* DOS offset ---> 8A3:6 */
mov	word ptr cs:loc_113D2, ax

loc_1137A:				; CODE XREF: dseg:21376  j		 /* DOS offset ---> 8A3:A */
mov	al, 0FFh
shr	dh, 1
jb	short loc_11382
xor	al, al

loc_11382:				; CODE XREF: unkfunc_11302-FF84  j		 /* DOS offset ---> 8A4:2 */
mov	byte ptr cs:loc_113DF+1, al

loc_11386:		 /* DOS offset ---> 8A4:6 */
mov	ax, 0F008h
shr	dl, 1
jb	short loc_11390
mov	ax, 0D020h

loc_11390:				; CODE XREF: unkfunc_11302-FF77  j		 /* DOS offset ---> 8A5:0 */
mov	word ptr cs:loc_113E1, ax
mov	al, 0FFh
shr	dh, 1
jb	short loc_1139C
xor	al, al

loc_1139C:				; CODE XREF: unkfunc_11302-FF6A  j		 /* DOS offset ---> 8A5:C */
mov	byte ptr cs:loc_113EE+1, al
mov	ax, 0F008h
shr	dl, 1
jb	short loc_113AA

loc_113A7:				; CODE XREF: dseg:213A2  j		 /* DOS offset ---> 8A6:7 */
mov	ax, 0D020h

loc_113AA:				; CODE XREF: unkfunc_11302-FF5D  j		 /* DOS offset ---> 8A6:A */
mov	word ptr cs:loc_113F0, ax

loc_113AE:				; CODE XREF: s_11366+18  j		 /* DOS offset ---> 8A6:E */
mov	si, [bp+10h]
mov	cx, [bp+0Ah]
push	es
mov	ax, 0A000h
mov	es, ax

loc_113BA:				; CODE XREF: unkfunc_11302-FF03  j		 /* DOS offset ---> 8A7:A */
push	cx

loc_113BB:				; CODE XREF: dseg:213A0  j dseg:213A7  j ...		 /* DOS offset ---> 8A7:B */
mov	bx, di

loc_113BD:				; CODE XREF: unkfunc_11302-FF0C  j		 /* DOS offset ---> 8A7:D */
lodsb
mov	dh, al
mov	dl, al
not	dl
push	dx

loc_113C5:				; CODE XREF: dseg:213C2  j		 /* DOS offset ---> 8A8:5 */
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 1
out	dx, al		; EGA port: sequencer data register
pop	dx

loc_113D0:				; DATA XREF: unkfunc_11302:loc_11368  w		 /* DOS offset ---> 8A9:0 */
mov	al, 0

loc_113D2:				; DATA XREF: unkfunc_11302:loc_11376  w		 /* DOS offset ---> 8A9:2 */
or	al, dh
mov	es:[bx], al
push	dx
mov	dx, 3C5h
mov	al, 4
out	dx, al		; EGA port: sequencer data register
pop	dx

loc_113DF:				; CODE XREF: s_11366+45  j		 /* DOS offset ---> 8A9:F */
; DATA XREF: unkfunc_11302:loc_11382  w
mov	al, 0

loc_113E1:				; DATA XREF: unkfunc_11302:loc_11390  w		 /* DOS offset ---> 8AA:1 */
or	al, dh
mov	es:[bx], al
push	dx
mov	dx, 3C5h
mov	al, 2
out	dx, al		; EGA port: sequencer data register
pop	dx

loc_113EE:				; DATA XREF: unkfunc_11302:loc_1139C  w		 /* DOS offset ---> 8AA:E */
mov	al, 0

loc_113F0:				; DATA XREF: unkfunc_11302:loc_113AA  w		 /* DOS offset ---> 8AB:0 */
or	al, dh

loc_113F2:				; CODE XREF: game_messenger_travel_s_11C82+21  p		 /* DOS offset ---> 8AB:2 */
mov	es:[bx], al

loc_113F5:				; CODE XREF: dseg:213EE  j		 /* DOS offset ---> 8AB:5 */
inc	bx
loop	loc_113BD

loc_113F8:				; CODE XREF: dseg:212A7  j		 /* DOS offset ---> 8AB:8 */
add	di, 50h	; 'P'
pop	cx
dec	word ptr [bp+0Ch]
jnz	short loc_113BA
pop	es

loc_11402:				; CODE XREF: dseg:21296  j		 /* DOS offset ---> 8AC:2 */
jmp	loc_11359
; END OF FUNCTION CHUNK	FOR unkfunc_11302
;     ***************************************************************************
push	bp
mov	bp, sp
push	si
push	di
nop
push	cs

loc_1140C:				; CODE XREF: dseg:213EC  j dseg:213F3  j		 /* DOS offset ---> 8AC:C */
call	near ptr s_0EC7

loc_1140F:				; CODE XREF: dseg:213F7  j		 /* DOS offset ---> 8AC:F */
jnb	short loc_11415
; START	OF FUNCTION CHUNK FOR s_11448

loc_11411:				; CODE XREF: s_11448-FFE5  j		 /* DOS offset ---> 8AD:1 */
pop	di
pop	si
pop	bp
retf
; END OF FUNCTION CHUNK	FOR s_11448
;     ***************************************************************************

loc_11415:				; CODE XREF: dseg:loc_1140F  j		 /* DOS offset ---> 8AD:5 */
mov	bx, [bp+6]
mov	dx, [bp+8]
nop
push	cs
call	loc_10F59
mov	dx, [bp+0Eh]

loc_11423:				; CODE XREF: dseg:2141E  j		 /* DOS offset ---> 8AE:3 */
cmp	dl, 0
jnz	short loc_1142A
jmp	short loc_1142C
;     ***************************************************************************

loc_1142A:				; CODE XREF: dseg:1426  j		 /* DOS offset ---> 8AE:A */
mov	dl, 7

loc_1142C:				; CODE XREF: dseg:1428  j		 /* DOS offset ---> 8AE:C */
mov	si, [bp+10h]
mov	cx, [bp+0Ah]
push	es
mov	ax, 0B800h
mov	es, ax
; START	OF FUNCTION CHUNK FOR s_11448

loc_11438:				; CODE XREF: s_11448:loc_11460  j		 /* DOS offset ---> 8AF:8 */
push	cx

loc_11439:				; CODE XREF: Q_21964+7C  p Q_21964+95  p ...		 /* DOS offset ---> 8AF:9 */
mov	bx, di

loc_1143B:				; CODE XREF: s_11448:loc_11447  j		 /* DOS offset ---> 8AF:B */
lodsb
cmp	dl, 0
jnz	short loc_11443
xor	al, 0FFh

loc_11443:				; CODE XREF: s_11448-10009  j		 /* DOS offset ---> 8B0:3 */
mov	es:[bx], al
inc	bx

loc_11447:				; CODE XREF: dseg:11699  p		 /* DOS offset ---> 8B0:7 */
loop	loc_1143B
cmp	di, 2000h
; END OF FUNCTION CHUNK	FOR s_11448
;     ***************************************************************************
aRBq		db 'r',9,'    **',0
db  20h
db  83h	;   *
db 0C7h	;   *
db  50h	; P
db 0EBh	;   *
db    4
db  81h	;   *
db 0C7h	;   *
db    0
db  20h
db  59h	; Y
db 0FFh
db  4Eh	; N
db  0Ch
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR s_11448

loc_11460:				; CODE XREF: s_11448+E  j		 /* DOS offset ---> 8B2:0 */
jnz	short loc_11438
pop	es
jmp	short loc_11411
; END OF FUNCTION CHUNK	FOR s_11448
;     ***************************************************************************
off_11465	dw offset loc_1147C	; DATA XREF: s_1469+E  r
dw offset loc_11501

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1469		proc far		 /* DOS offset ---> 8B2:9 */

arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h

; FUNCTION CHUNK AT 14C7 SIZE 0000003A BYTES

push	bp
mov	bp, sp
mov	bl, byte ptr word_1CEA2
and	bl, 1
xor	bh, bh
shl	bx, 1
jmp	cs:off_11465[bx]
;     ***************************************************************************

loc_1147C:				; DATA XREF: dseg:off_11465  o		 /* DOS offset ---> 8B3:C */
push	si
push	di
nop
push	cs
call	near ptr s_0EC7
jb	short loc_114B8
mov	si, [bp+arg_C]
mov	ax, [bp+arg_A]
or	ah, ah
jz	short loc_114C7
cmp	ah, 4
jnz	short loc_11496
xor	ah, ah

loc_11496:				; CODE XREF: s_1469+29  j		 /* DOS offset ---> 8B5:6 */
nop
push	cs

loc_11498:				; CODE XREF: unkfunc_114C4+5C  p		 /* DOS offset ---> 8B5:8 */
; dseg:11582  p
call	near ptr system_graphics_flash_graphic

loc_1149B:				; CODE XREF: s_1469+47  j		 /* DOS offset ---> 8B5:B */
push	cx
mov	bx, di

loc_1149E:				; CODE XREF: s_1469+3C  j		 /* DOS offset ---> 8B5:E */
lodsb
nop
push	cs

loc_114A1:		 /* DOS offset ---> 8B6:1 */
call	s_12C0
inc	bx
loop	loc_1149E
add	di, 50h	; 'P'
mov	bx, di
pop	cx
dec	[bp+arg_8]
jnz	short loc_1149B

loc_114B2:				; CODE XREF: s_1469+96  j		 /* DOS offset ---> 8B7:2 */
xor	ax, ax
pop	di
pop	si

loc_114B6:				; CODE XREF: dseg:21F99  p		 /* DOS offset ---> 8B7:6 */
pop	bp
retf
;     ***************************************************************************

loc_114B8:				; CODE XREF: s_1469+1A  j		 /* DOS offset ---> 8B7:8 */
; unkfunc_1149A+8  j
mov	ax, 0FFFFh
pop	di
pop	si
pop	bp
retf
s_1469		endp		 /* DOS offset ---> 8B2:9 */

;     ***************************************************************************
add	[bx+di], al
add	al, 5

loc_114C3:				; CODE XREF: dseg:11627  p		 /* DOS offset ---> 8B8:3 */
add	al, [bp+di]
push	es
pop	es
; START	OF FUNCTION CHUNK FOR s_1469

loc_114C7:				; CODE XREF: s_1469+24  j dseg:21F93  p		 /* DOS offset ---> 8B8:7 */
mov	bx, ax
mov	ah, cs:[bx+14BFh]
push	es

loc_114CF:				; CODE XREF: s_1469+93  j		 /* DOS offset ---> 8B8:F */
push	cx
mov	bx, di

loc_114D2:				; CODE XREF: s_1469+88  j		 /* DOS offset ---> 8B9:2 */
lodsb
mov	dx, 0A000h

loc_114D6:				; CODE XREF: unkfunc_114C4+B  j		 /* DOS offset ---> 8B9:6 */
mov	es, dx
push	ax
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 7

loc_114E2:				; CODE XREF: unkfunc_114C4+F  j		 /* DOS offset ---> 8BA:2 */
out	dx, al		; EGA port: sequencer data register

loc_114E3:				; CODE XREF: dseg:21500  j		 /* DOS offset ---> 8BA:3 */
mov	byte ptr es:[bx], 0
pop	ax

loc_114E8:				; CODE XREF: dseg:214D6  j		 /* DOS offset ---> 8BA:8 */
xchg	ah, al
out	dx, al		; EGA port: sequencer data register
xchg	ah, al
mov	es:[bx], al
inc	bx
loop	loc_114D2
add	di, 50h	; 'P'

loc_114F6:				; CODE XREF: unkfunc_114C4+2B  j		 /* DOS offset ---> 8BB:6 */
mov	bx, di
pop	cx
dec	[bp+arg_8]
jnz	short loc_114CF
pop	es
jmp	short loc_114B2
; END OF FUNCTION CHUNK	FOR s_1469
;     ***************************************************************************

loc_11501:				; DATA XREF: dseg:1467  o		 /* DOS offset ---> 8BC:1 */
push	si
push	di
nop
push	cs
call	near ptr s_0EC7
jb	short loc_11557
mov	si, [bp+10h]
; START	OF FUNCTION CHUNK FOR unkfunc_114C4

loc_1150D:				; CODE XREF: unkfunc_114C4+37  j		 /* DOS offset ---> 8BC:D */
mov	ax, [bp+arg_8]
or	ah, ah
jz	short loc_11562
cmp	ah, 4
jnz	short loc_1151B
xor	ah, ah

loc_1151B:				; CODE XREF: unkfunc_114C4-FFAD  j		 /* DOS offset ---> 8BD:B */
nop
push	cs
call	near ptr system_graphics_flash_graphic
mov	bx, [bp+arg_0]

loc_11523:				; CODE XREF: unkfunc_114C4+59  j		 /* DOS offset ---> 8BE:3 */
mov	dx, [bp+arg_2]
nop
push	cs

loc_11528:				; CODE XREF: dseg:11621  p		 /* DOS offset ---> 8BE:8 */
call	loc_10F59

loc_1152B:				; CODE XREF: dseg:154F  j		 /* DOS offset ---> 8BE:B */
push	cx

loc_1152C:				; CODE XREF: unkfunc_114C4-FF91  j		 /* DOS offset ---> 8BE:C */
lodsb
nop
push	cs
call	s_12C0
inc	di
loop	loc_1152C
inc	dx
pop	cx
cmp	di, 2000h
; END OF FUNCTION CHUNK	FOR unkfunc_114C4
;     ***************************************************************************
db  72h	; r
;     ***************************************************************************

loc_1153C:				; CODE XREF: dseg:11533  j		 /* DOS offset ---> 8BF:C */
or	[bx+di+0EFh], ax
and	[bp+di+50C7h], al
jmp	short loc_1154A
;     ***************************************************************************
add	di, 2000h

loc_1154A:				; CODE XREF: dseg:1544  j		 /* DOS offset ---> 8C0:A */
sub	di, cx
dec	word ptr [bp+0Ch]
jnz	short loc_1152B
; START	OF FUNCTION CHUNK FOR unkfunc_114C4

loc_11551:				; CODE XREF: unkfunc_114C4-FF17  j		 /* DOS offset ---> 8C1:1 */
xor	ax, ax
pop	di
pop	si
pop	bp
retf
; END OF FUNCTION CHUNK	FOR unkfunc_114C4
;     ***************************************************************************

loc_11557:				; CODE XREF: dseg:1508  j		 /* DOS offset ---> 8C1:7 */
mov	ax, 0FFFFh
pop	di

loc_1155B:				; CODE XREF: dseg:11539  j		 /* DOS offset ---> 8C1:B */
pop	si
pop	bp
retf
;     ***************************************************************************
mov	[di], ah
mov	[di], al
; START	OF FUNCTION CHUNK FOR unkfunc_114C4

loc_11562:				; CODE XREF: unkfunc_114C4-FFB2  j		 /* DOS offset ---> 8C2:2 */
mov	bx, ax
or	bx, bx
jz	short loc_1156B
mov	bx, 2

loc_1156B:				; CODE XREF: unkfunc_114C4-FF5E  j		 /* DOS offset ---> 8C2:B */
; dseg:21565  j
mov	dx, cs:[bx+155Eh]
mov	word ptr cs:loc_1158A+1, dx
push	es

loc_11576:				; CODE XREF: dseg:21563  j dseg:2156C  j		 /* DOS offset ---> 8C3:6 */
mov	dx, 0B800h
mov	es, dx

loc_1157B:		 /* DOS offset ---> 8C3:B */
mov	ah, 0
mov	bx, [bp+arg_0]
mov	dx, [bp+arg_2]
nop
push	cs

loc_11585:				; CODE XREF: dseg:1157F  j		 /* DOS offset ---> 8C4:5 */
call	loc_10F59

loc_11588:				; CODE XREF: unkfunc_114C4:loc_115AA  j		 /* DOS offset ---> 8C4:8 */
push	cx

loc_11589:				; CODE XREF: unkfunc_114C4-FF36  j		 /* DOS offset ---> 8C4:9 */
lodsb

loc_1158A:				; CODE XREF: dseg:11709  p		 /* DOS offset ---> 8C4:A */
; DATA XREF: unkfunc_114C4-FF54  w
mov	es:[di], al
inc	di
loop	loc_11589
inc	dx
pop	cx
cmp	di, 2000h
jb	short loc_115A1
sub	di, 2000h
add	di, 50h	; 'P'
jmp	short loc_115A5
;     ***************************************************************************

loc_115A1:				; CODE XREF: unkfunc_114C4-FF2E  j		 /* DOS offset ---> 8C6:1 */
add	di, 2000h

loc_115A5:				; CODE XREF: unkfunc_114C4-FF25  j		 /* DOS offset ---> 8C6:5 */
sub	di, cx
dec	[bp+arg_6]

loc_115AA:				; CODE XREF: dseg:1159E  j		 /* DOS offset ---> 8C6:A */
jnz	short loc_11588
pop	es
jmp	short loc_11551
; END OF FUNCTION CHUNK	FOR unkfunc_114C4
;     ***************************************************************************

locret_115AF:				; DATA XREF: system_graphics_buffer_back_clear+B  r
retn
;     ***************************************************************************
adc	ax, 15E2h

;     *************** S U B	R O U T	I N E     ***************************************


system_graphics_buffer_back_clear proc far ; CODE XREF:	s_0227+4  p
mov	bl, byte ptr word_1CEA2	; [0C42]
and	bl, 1
xor	bh, bh
shl	bx, 1
jmp	word ptr cs:locret_115AF[bx] ; target =	dseg:0167
; output to Graphics Controller
;     ***************************************************************************
push	di
push	es
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 7
out	dx, al		; EGA port: sequencer data register

loc_115CF:				; CODE XREF: dseg:215C3  j		 /* DOS offset ---> 8C8:F */
xor	di, di
mov	cx, 1F40h
xor	ax, ax
mov	dx, 0A000h

loc_115D9:				; CODE XREF: dseg:215CD  j		 /* DOS offset ---> 8C9:9 */
mov	es, dx
rep stosw
xor	ax, ax
pop	es
pop	di
retf
system_graphics_buffer_back_clear endp

;     ***************************************************************************
push	es
push	di
xor	di, di

loc_115E6:				; CODE XREF: dseg:115D9  j dseg:216C8  p ...		 /* DOS offset ---> 8CA:6 */
mov	cx, 4000h
or	ax, ax

loc_115EB:				; CODE XREF: dseg:115B8  j dseg:115E4  j		 /* DOS offset ---> 8CA:B */
jz	short loc_115EF
xor	ax, ax

loc_115EF:				; CODE XREF: dseg:loc_115EB  j		 /* DOS offset ---> 8CA:F */
; dseg:115A8  j ...
mov	dx, 0B800h
mov	es, dx
mov	byte ptr es:[bx], 1
rep stosb
xor	ax, ax
pop	di
pop	es
retf
;     ***************************************************************************
bound	dx, dword ptr loc_11694
add	[bx], dx
outsw

loc_11606:				; CODE XREF: dseg:11624  j		 /* DOS offset ---> 8CC:6 */
pop	ss
fst	qword ptr [bx]
;     ***************************************************************************
off_11609	dw offset loc_1187C	; DATA XREF: dseg:loc_1186F  r
off_1160B	dw offset loc_118BA	; CODE XREF: dseg:11604  j
dw offset loc_118F2
dw offset loc_1192A
dw offset loc_11963
;     ***************************************************************************
cmp	ax, 5716h

loc_11616:				; CODE XREF: dseg:17F6  p dseg:1812  p ...		 /* DOS offset ---> 8CD:6 */
sbb	[bp+si+3CEh], bh

loc_1161A:				; CODE XREF: dseg:115FE  j		 /* DOS offset ---> 8CD:A */
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
retf
;     ***************************************************************************

loc_1161F:				; CODE XREF: dseg:loc_117FE  p		 /* DOS offset ---> 8CD:F */
; dseg:181A  p ...
mov	dx, 3C4h
;     ***************************************************************************
db 0B0h	;   *
db    2
db 0EEh	;   *
db  42h	; B
;     ***************************************************************************

locret_11626:				; CODE XREF: dseg:1161E  j
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1627		proc near		 /* DOS offset ---> 8CE:7 */

arg_A		= word ptr  0Eh
arg_C		= word ptr  10h

push	bp
mov	bp, sp

loc_1162A:				; CODE XREF: dseg:11618  j		 /* DOS offset ---> 8CE:A */
push	si

loc_1162B:				; CODE XREF: dseg:2167A  j		 /* DOS offset ---> 8CE:B */
push	di
push	ds
mov	bl, byte ptr word_1CEA2

loc_11631:				; CODE XREF: dseg:1177F  p s_11BC8+1  p ...		 /* DOS offset ---> 8CF:1 */
and	bl, 1
xor	bh, bh
shl	bx, 1
jmp	word ptr cs:[bx+1613h]
;     ***************************************************************************
nop
push	cs
call	near ptr s_0EC7
jb	short loc_1165A
mov	si, [bp+arg_C]
cld
mov	ax, [bp+arg_A]
cmp	ax, 4
ja	short loc_1165A
push	es
shl	ax, 1
mov	bx, ax

loc_11655:				; CODE XREF: dseg:1163D  j dseg:11645  j		 /* DOS offset ---> 8D1:5 */
jmp	word ptr cs:[bx+15FFh]
;     ***************************************************************************

loc_1165A:				; CODE XREF: s_1627+1B  j s_1627+27  j		 /* DOS offset ---> 8D1:A */
pop	ds
pop	di
pop	si
pop	bp
mov	ax, 0FFFFh
retf
s_1627		endp		 /* DOS offset ---> 8CE:7 */

;     ***************************************************************************
mov	bx, cx

loc_11664:				; CODE XREF: dseg:loc_1168A  j		 /* DOS offset ---> 8D2:4 */
push	di

loc_11665:				; CODE XREF: dseg:167F  j		 /* DOS offset ---> 8D2:5 */
mov	ax, 0A000h
mov	es, ax
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 1
out	dx, al		; EGA port: sequencer data register
movsb
dec	di
mov	al, 4
out	dx, al		; EGA port: sequencer data register
movsb
dec	di

loc_1167B:				; CODE XREF: dseg:2162F  j		 /* DOS offset ---> 8D3:B */
mov	al, 2
out	dx, al
movsb
loop	loc_11665
mov	cx, bx
pop	di
add	di, 50h	; 'P'
dec	word ptr [bp+0Ch]

loc_1168A:				; CODE XREF: dseg:216D3  p		 /* DOS offset ---> 8D4:A */
jnz	short loc_11664

loc_1168C:				; CODE XREF: dseg:16FF  j dseg:176C  j ...		 /* DOS offset ---> 8D4:C */
pop	es
pop	ds
pop	di
pop	si
pop	bp
xor	ax, ax
retf
;     ***************************************************************************

loc_11694:				; CODE XREF: dseg:16FD  j		 /* DOS offset ---> 8D5:4 */
; DATA XREF: dseg:15FF  r
push	cx
push	di

loc_11696:				; CODE XREF: dseg:16F3  j dseg:11683  j		 /* DOS offset ---> 8D5:6 */
mov	ax, 0A000h
mov	es, ax
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 0
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
xor	bl, al
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 1
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
mov	dx, 3CEh

loc_116BB:				; CODE XREF: dseg:116AE  j		 /* DOS offset ---> 8D7:B */
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 2
out	dx, al		; EGA port: graphics controller	data register

loc_116C2:				; CODE XREF: dseg:1169E  j		 /* DOS offset ---> 8D8:2 */
mov	bl, es:[di]
lodsb
xor	bl, al
mov	dx, 3C4h

loc_116CB:				; CODE XREF: Q_21964+53  p		 /* DOS offset ---> 8D8:B */
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 4
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
xor	bl, al
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 2
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
inc	di
loop	loc_11696
pop	di

loc_116F6:				; CODE XREF: dseg:217A8  j dseg:217D7  j		 /* DOS offset ---> 8DB:6 */
pop	cx

loc_116F7:				; CODE XREF: dseg:116D0  j		 /* DOS offset ---> 8DB:7 */
add	di, 50h	; 'P'
dec	word ptr [bp+0Ch]
jnz	short loc_11694
jmp	short loc_1168C
;     ***************************************************************************

loc_11701:				; CODE XREF: dseg:176A  j		 /* DOS offset ---> 8DC:1 */
push	cx
push	di

loc_11703:				; CODE XREF: dseg:1760  j		 /* DOS offset ---> 8DC:3 */
mov	ax, 0A000h
mov	es, ax
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 0
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
and	bl, al
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 1
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx

loc_1172C:				; CODE XREF: dseg:21725  j		 /* DOS offset ---> 8DE:C */
mov	al, 2
out	dx, al		; EGA port: graphics controller	data register

loc_1172F:				; CODE XREF: dseg:2172A  j		 /* DOS offset ---> 8DE:F */
mov	bl, es:[di]
lodsb
and	bl, al
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx

loc_1173C:				; CODE XREF: dseg:11714  j		 /* DOS offset ---> 8DF:C */
mov	al, 4
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
and	bl, al

loc_11752:				; CODE XREF: dseg:21743  j		 /* DOS offset ---> 8E1:2 */
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 2
out	dx, al		; EGA port: sequencer data register

loc_1175C:				; CODE XREF: dseg:11742  j		 /* DOS offset ---> 8E1:C */
mov	es:[di], bl
inc	di
loop	loc_11703
pop	di
pop	cx

loc_11764:				; CODE XREF: dseg:1170E  j		 /* DOS offset ---> 8E2:4 */
add	di, 50h	; 'P'

loc_11767:				; CODE XREF: dseg:21751  j		 /* DOS offset ---> 8E2:7 */
dec	word ptr [bp+0Ch]
jnz	short loc_11701
jmp	loc_1168C
;     ***************************************************************************

loc_1176F:				; CODE XREF: dseg:17D8  j		 /* DOS offset ---> 8E2:F */
push	cx
push	di

loc_11771:				; CODE XREF: dseg:17CE  j		 /* DOS offset ---> 8E3:1 */
mov	ax, 0A000h
mov	es, ax
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 0
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
or	bl, al
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 1
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 2
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
or	bl, al
mov	dx, 3C4h

loc_117A6:				; CODE XREF: dseg:11797  j dseg:1179E  j		 /* DOS offset ---> 8E6:6 */
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx

loc_117AA:				; CODE XREF: dseg:217A6  j		 /* DOS offset ---> 8E6:A */
mov	al, 4
out	dx, al		; EGA port: sequencer data register

loc_117AD:				; CODE XREF: dseg:21796  j		 /* DOS offset ---> 8E6:D */
mov	es:[di], bl
mov	dx, 3CEh

loc_117B3:				; CODE XREF: dseg:217AB  j		 /* DOS offset ---> 8E7:3 */
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx

loc_117B7:				; CODE XREF: dseg:11789  j dseg:11790  j ...		 /* DOS offset ---> 8E7:7 */
mov	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
or	bl, al
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 2
out	dx, al		; EGA port: sequencer data register

loc_117CA:				; CODE XREF: dseg:117C5  j		 /* DOS offset ---> 8E8:A */
mov	es:[di], bl
inc	di
loop	loc_11771
pop	di
pop	cx
add	di, 50h	; 'P'

loc_117D5:				; CODE XREF: dseg:117C8  j		 /* DOS offset ---> 8E9:5 */
dec	word ptr [bp+0Ch]
jnz	short loc_1176F

loc_117DA:				; CODE XREF: dseg:217BC  j		 /* DOS offset ---> 8E9:A */
jmp	loc_1168C
;     ***************************************************************************

loc_117DD:				; CODE XREF: dseg:1852  j		 /* DOS offset ---> 8E9:D */
push	cx
push	di

loc_117DF:				; CODE XREF: dseg:1848  j dseg:217D1  j		 /* DOS offset ---> 8E9:F */
mov	dx, [si]
inc	si

loc_117E2:				; CODE XREF: dseg:117BC  j		 /* DOS offset ---> 8EA:2 */
inc	si
mov	bl, [si]
inc	si
mov	bh, bl
or	bh, dh
or	bh, dl

loc_117EC:				; CODE XREF: dseg:21930  p		 /* DOS offset ---> 8EA:C */
not	bh
mov	ax, 0A000h
mov	es, ax
push	dx
nop
push	cs
call	near ptr loc_11616+1
mov	al, 0
out	dx, al
nop
push	cs

loc_117FE:				; CODE XREF: dseg:117EF  j		 /* DOS offset ---> 8EB:E */
call	loc_1161F
mov	al, 1
out	dx, al

loc_11804:				; CODE XREF: dseg:117F2  j		 /* DOS offset ---> 8EC:4 */
pop	dx
push	dx
mov	al, es:[di]
and	al, bh
or	al, dl
mov	es:[di], al
nop
push	cs
call	near ptr loc_11616+1

loc_11815:				; CODE XREF: dseg:117F5  j		 /* DOS offset ---> 8ED:5 */
mov	al, 2
out	dx, al
nop
push	cs
call	loc_1161F
mov	al, 4
out	dx, al
pop	dx
push	dx

loc_11822:				; CODE XREF: dseg:11801  j		 /* DOS offset ---> 8EE:2 */
mov	al, es:[di]
and	al, bh
or	al, dh
mov	es:[di], al
nop
push	cs

loc_1182E:				; CODE XREF: dseg:117EB  j dseg:11814  j		 /* DOS offset ---> 8EE:E */
call	near ptr loc_11616+1
mov	al, 1
out	dx, al
nop
push	cs
call	loc_1161F

loc_11839:				; CODE XREF: dseg:1182B  j		 /* DOS offset ---> 8EF:9 */
mov	al, 2
out	dx, al
mov	al, es:[di]
and	al, bh
or	al, bl
mov	es:[di], al
pop	dx
inc	di
loop	loc_117DF
pop	di
pop	cx
add	di, 50h	; 'P'
dec	word ptr [bp+0Ch]
jnz	short loc_117DD
jmp	loc_1168C
;     ***************************************************************************
nop
push	cs
call	near ptr s_0EC7
jb	short loc_11874
mov	si, [bp+10h]
cld

loc_11862:				; CODE XREF: dseg:2185C  j		 /* DOS offset ---> 8F2:2 */
mov	ax, [bp+0Eh]
cmp	ax, 4
ja	short loc_11874
push	es
shl	ax, 1
mov	bx, ax

loc_1186F:				; CODE XREF: dseg:21861  j		 /* DOS offset ---> 8F2:F */
jmp	cs:off_11609[bx]
;     ***************************************************************************

loc_11874:				; CODE XREF: dseg:185C  j dseg:1868  j		 /* DOS offset ---> 8F3:4 */
pop	ds
pop	di
pop	si
pop	bp
mov	ax, 0FFFFh
retf
;     ***************************************************************************

loc_1187C:				; DATA XREF: dseg:off_11609  o		 /* DOS offset ---> 8F3:C */
mov	bx, [bp+6]
mov	dx, [bp+8]

loc_11882:				; CODE XREF: dseg:21852  j		 /* DOS offset ---> 8F4:2 */
nop
push	cs
call	loc_10F59

loc_11887:				; CODE XREF: dseg:loc_118B0  j		 /* DOS offset ---> 8F4:7 */
push	cx
mov	ax, 0B800h
mov	es, ax

loc_1188D:				; CODE XREF: dseg:1894  j		 /* DOS offset ---> 8F4:D */
inc	si
inc	si
lodsb
mov	es:[di], al
inc	di
loop	loc_1188D
pop	cx
inc	dx
cmp	di, 2000h
jb	short loc_118A7
sub	di, 2000h
add	di, 50h	; 'P'
jmp	short loc_118AB
;     ***************************************************************************

loc_118A7:				; CODE XREF: dseg:189C  j		 /* DOS offset ---> 8F6:7 */
add	di, 2000h

loc_118AB:				; CODE XREF: dseg:18A5  j		 /* DOS offset ---> 8F6:B */
sub	di, cx
dec	word ptr [bp+0Ch]

loc_118B0:				; CODE XREF: dseg:2187F  j		 /* DOS offset ---> 8F7:0 */
jnz	short loc_11887
; START	OF FUNCTION CHUNK FOR s_118D0

loc_118B2:				; CODE XREF: s_118D0-FFE0  j dseg:1928  j	...		 /* DOS offset ---> 8F7:2 */
pop	es
pop	ds
pop	di
pop	si
pop	bp

loc_118B7:				; CODE XREF: dseg:118AA  j		 /* DOS offset ---> 8F7:7 */
xor	ax, ax
retf
; END OF FUNCTION CHUNK	FOR s_118D0
;     ***************************************************************************

loc_118BA:				; DATA XREF: dseg:off_1160B  o		 /* DOS offset ---> 8F7:A */
mov	bx, [bp+6]
mov	dx, [bp+8]
nop
push	cs
call	loc_10F59
; START	OF FUNCTION CHUNK FOR s_118D0

loc_118C5:				; CODE XREF: s_118D0-FFE2  j		 /* DOS offset ---> 8F8:5 */
push	cx
mov	ax, 0B800h

loc_118C9:				; CODE XREF: dseg:11850  j dseg:1186D  j ...		 /* DOS offset ---> 8F8:9 */
mov	es, ax

loc_118CB:				; CODE XREF: s_118D0-FFFE  j		 /* DOS offset ---> 8F8:B */
inc	si
inc	si
lodsb

loc_118CE:		 /* DOS offset ---> 8F8:E */
xor	es:[di], al
inc	di
loop	loc_118CB
pop	cx
inc	dx
cmp	di, 2000h

loc_118DA:				; CODE XREF: s_118D0+5  j		 /* DOS offset ---> 8F9:A */
jb	short loc_118E5
sub	di, 2000h

loc_118E0:		 /* DOS offset ---> 8FA:0 */
add	di, 50h	; 'P'
jmp	short loc_118E9
;     ***************************************************************************

loc_118E5:				; CODE XREF: s_118D0:loc_118DA  j		 /* DOS offset ---> 8FA:5 */
add	di, 2000h

loc_118E9:				; CODE XREF: s_118D0-FFED  j		 /* DOS offset ---> 8FA:9 */
sub	di, cx

loc_118EB:				; CODE XREF: dseg:118E6  j		 /* DOS offset ---> 8FA:B */
dec	word ptr [bp+0Ch]
jnz	short loc_118C5
jmp	short loc_118B2
; END OF FUNCTION CHUNK	FOR s_118D0
;     ***************************************************************************

loc_118F2:				; CODE XREF: dseg:218E3  j		 /* DOS offset ---> 8FB:2 */
; DATA XREF: dseg:160D  o
mov	bx, [bp+6]
mov	dx, [bp+8]
nop
push	cs

loc_118FA:				; CODE XREF: dseg:118E9  j		 /* DOS offset ---> 8FB:A */
call	loc_10F59

loc_118FD:				; CODE XREF: dseg:loc_11926  j		 /* DOS offset ---> 8FB:D */
push	cx
mov	ax, 0B800h
mov	es, ax

loc_11903:				; CODE XREF: dseg:190A  j		 /* DOS offset ---> 8FC:3 */
inc	si
inc	si
lodsb

loc_11906:				; CODE XREF: dseg:218F1  j		 /* DOS offset ---> 8FC:6 */
and	es:[di], al
inc	di
loop	loc_11903
pop	cx
inc	dx

loc_1190E:				; CODE XREF: dseg:118FF  j		 /* DOS offset ---> 8FC:E */
cmp	di, 2000h

loc_11912:				; CODE XREF: dseg:118E1  j		 /* DOS offset ---> 8FD:2 */
jb	short loc_1191D

loc_11914:				; CODE XREF: s_1198C+49  p s_1198C+67  p ...		 /* DOS offset ---> 8FD:4 */
sub	di, 2000h
add	di, 50h	; 'P'
jmp	short loc_11921
;     ***************************************************************************

loc_1191D:				; CODE XREF: dseg:loc_11912  j		 /* DOS offset ---> 8FD:D */
add	di, 2000h

loc_11921:				; CODE XREF: dseg:191B  j		 /* DOS offset ---> 8FE:1 */
sub	di, cx
dec	word ptr [bp+0Ch]

loc_11926:				; CODE XREF: Q_21964+4D  p		 /* DOS offset ---> 8FE:6 */
jnz	short loc_118FD
jmp	short loc_118B2
;     ***************************************************************************

loc_1192A:				; CODE XREF: dseg:11919  j		 /* DOS offset ---> 8FE:A */
; DATA XREF: dseg:160F  o
mov	bx, [bp+6]

loc_1192D:				; CODE XREF: dseg:2195E  j		 /* DOS offset ---> 8FE:D */
mov	dx, [bp+8]
nop
push	cs
call	loc_10F59

loc_11935:				; CODE XREF: dseg:195E  j		 /* DOS offset ---> 8FF:5 */
push	cx
mov	ax, 0B800h
mov	es, ax

loc_1193B:				; CODE XREF: dseg:1942  j dseg:2192C  j		 /* DOS offset ---> 8FF:B */
inc	si
inc	si
lodsb
or	es:[di], al
inc	di
loop	loc_1193B
pop	cx
inc	dx
cmp	di, 2000h

loc_1194A:				; CODE XREF: s_1198C+35  p s_1198C+58  p ...		 /* DOS offset ---> 900:A */
jb	short loc_11955
sub	di, 2000h
add	di, 50h	; 'P'
jmp	short loc_11959
;     ***************************************************************************

loc_11955:				; CODE XREF: dseg:loc_1194A  j		 /* DOS offset ---> 901:5 */
add	di, 2000h

loc_11959:				; CODE XREF: dseg:1953  j		 /* DOS offset ---> 901:9 */
sub	di, cx
dec	word ptr [bp+0Ch]
jnz	short loc_11935
jmp	loc_118B2
;     ***************************************************************************

loc_11963:				; CODE XREF: dseg:21F8B  p		 /* DOS offset ---> 902:3 */
; DATA XREF: dseg:1611  o
mov	bx, [bp+6]
mov	dx, [bp+8]
nop
push	cs
call	loc_10F59
; START	OF FUNCTION CHUNK FOR Q_21964

loc_1196E:				; CODE XREF: Q_21964-1FFCA  j		 /* DOS offset ---> 902:E */
push	cx

loc_1196F:				; CODE XREF: Q_21964+5F  j Q_21964+82  j		 /* DOS offset ---> 902:F */
mov	ax, 0B800h
mov	es, ax

loc_11974:				; CODE XREF: Q_21964-1FFE6  j		 /* DOS offset ---> 903:4 */
inc	si
inc	si
lodsb
or	es:[di], al
or	es:[di], al
inc	di
loop	loc_11974
pop	cx
inc	dx
cmp	di, 2000h
jb	short loc_11991

loc_11988:				; CODE XREF: dseg:1194F  j dseg:11984  j		 /* DOS offset ---> 904:8 */
sub	di, 2000h
add	di, 50h	; 'P'
; END OF FUNCTION CHUNK	FOR Q_21964
;     ***************************************************************************
db 0EBh	;   *
db    4
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR Q_21964

loc_11991:				; CODE XREF: Q_21964-1FFDE  j		 /* DOS offset ---> 905:1 */
add	di, 2000h
sub	di, cx

loc_11997:				; CODE XREF: Q_21964+25  j		 /* DOS offset ---> 905:7 */
dec	[bp+arg_8]
jnz	short loc_1196E
jmp	loc_118B2
; END OF FUNCTION CHUNK	FOR Q_21964
;     ***************************************************************************

loc_1199F:				; CODE XREF: Q_21964+50  j		 /* DOS offset ---> 905:F */
repne sbb [si],	sp
sbb	dl, [bx+di-0E6h]
sbb	ch, [di+1Bh]
or	al, 1Ch
dec	sp
; START	OF FUNCTION CHUNK FOR Q_21964

loc_119AC:				; CODE XREF: Q_21964+28  j		 /* DOS offset ---> 906:C */
sbb	al, 86h	; '  *'
sbb	al, 0C0h ; '  *'
sbb	al, 0FBh ; '  *'
sbb	al, 0CDh ; '  *'
sbb	di, sp

loc_119B6:				; CODE XREF: Q_21964+2B  j s_1198C+16  j		 /* DOS offset ---> 907:6 */
sbb	dx, [di-75h]
in	al, dx
push	si
push	di
push	ds

loc_119BD:				; CODE XREF: Q_21964+32  j Q_21964+45  j		 /* DOS offset ---> 907:D */
mov	bl, byte ptr word_1CEA2
and	bl, 1
xor	bh, bh
shl	bx, 1
jmp	word ptr cs:[bx+19B3h]
; END OF FUNCTION CHUNK	FOR Q_21964
;     ***************************************************************************
nop
push	cs
call	near ptr s_0EC7
jb	short loc_119EA
; START	OF FUNCTION CHUNK FOR s_1198C

loc_119D4:				; CODE XREF: s_1198C+3D  j s_1198C+7F  j		 /* DOS offset ---> 909:4 */
mov	si, [bp+arg_C]
cld
mov	ax, [bp+arg_A]
cmp	ax, 4
ja	short loc_119EA
push	es
shl	ax, 1
mov	bx, ax

loc_119E5:				; CODE XREF: Q_21964+30  j		 /* DOS offset ---> 90A:5 */
jmp	word ptr cs:[bx+199Fh]
;     ***************************************************************************

loc_119EA:				; CODE XREF: dseg:19D2  j s_1198C-FFAE  j		 /* DOS offset ---> 90A:A */
pop	ds
pop	di
pop	si
pop	bp
mov	ax, 0FFFFh
retf
;     ***************************************************************************

loc_119F2:				; CODE XREF: s_1198C+55  j		 /* DOS offset ---> 90B:2 */
mov	bx, cx

loc_119F4:				; CODE XREF: s_1198C-FF72  j		 /* DOS offset ---> 90B:4 */
push	di

loc_119F5:				; CODE XREF: s_1198C-FF7D  j		 /* DOS offset ---> 90B:5 */
mov	ax, 0A000h
mov	es, ax

loc_119FA:				; CODE XREF: Q_21964+88  j		 /* DOS offset ---> 90B:A */
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3

loc_11A00:				; CODE XREF: dseg:21A9F  p		 /* DOS offset ---> 90C:0 */
inc	dx
mov	al, 1
out	dx, al		; EGA port: sequencer data register
movsb
dec	di
mov	al, 4
out	dx, al		; EGA port: sequencer data register
movsb
dec	di
mov	al, 2
out	dx, al		; EGA port: sequencer data register
movsb
loop	loc_119F5
mov	cx, bx
pop	di
add	di, 50h	; 'P'
dec	[bp+arg_6]
jnz	short loc_119F4

loc_11A1C:				; CODE XREF: s_1198C-FEFD  j dseg:1AFC  j	...		 /* DOS offset ---> 90D:C */
pop	es
pop	ds
pop	di
pop	si
pop	bp
xor	ax, ax
retf
;     ***************************************************************************

loc_11A24:				; CODE XREF: s_1198C:loc_11A8D  j		 /* DOS offset ---> 90E:4 */
; s_1198C+93  j
push	cx
push	di

loc_11A26:				; CODE XREF: s_1198C-FF09  j		 /* DOS offset ---> 90E:6 */
mov	ax, 0A000h
mov	es, ax
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 0
out	dx, al		; EGA port: graphics controller	data register

loc_11A35:				; CODE XREF: dseg:21A4E  j		 /* DOS offset ---> 90F:5 */
mov	bl, es:[di]
lodsb

loc_11A39:				; CODE XREF: s_1198C+A6  j		 /* DOS offset ---> 90F:9 */
xor	bl, al

loc_11A3B:				; CODE XREF: s_1198C+AB  j		 /* DOS offset ---> 90F:B */
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 1
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 2
out	dx, al		; EGA port: graphics controller	data register

loc_11A52:				; CODE XREF: dseg:21CDE  p		 /* DOS offset ---> 911:2 */
mov	bl, es:[di]
lodsb
xor	bl, al
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 4
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
xor	bl, al

loc_11A75:				; CODE XREF: s_1198C+DF  j		 /* DOS offset ---> 913:5 */
mov	dx, 3C4h

loc_11A78:				; CODE XREF: dseg:21A73  j		 /* DOS offset ---> 913:8 */
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 2
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
inc	di
loop	loc_11A26
pop	di
pop	cx
add	di, 50h	; 'P'
dec	[bp+arg_6]

loc_11A8D:				; CODE XREF: s_1198C+FC  j		 /* DOS offset ---> 914:D */
jnz	short loc_11A24
jmp	short loc_11A1C
; END OF FUNCTION CHUNK	FOR s_1198C
;     ***************************************************************************

loc_11A91:				; CODE XREF: dseg:1AFA  j		 /* DOS offset ---> 915:1 */
push	cx
push	di

loc_11A93:				; CODE XREF: dseg:1AF0  j		 /* DOS offset ---> 915:3 */
mov	ax, 0A000h
mov	es, ax
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 0
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
and	bl, al
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 1
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 2
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
and	bl, al
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 4
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
and	bl, al
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 2
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
inc	di
loop	loc_11A93
pop	di
pop	cx
add	di, 50h	; 'P'
dec	word ptr [bp+0Ch]
jnz	short loc_11A91
jmp	loc_11A1C
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR s_11B3C

loc_11AFF:				; CODE XREF: s_11B3C-FFD4  j		 /* DOS offset ---> 91B:F */
push	cx
push	di

loc_11B01:				; CODE XREF: s_11B3C-FFDE  j		 /* DOS offset ---> 91C:1 */
mov	ax, 0A000h
mov	es, ax
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 0
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
or	bl, al
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 1
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
mov	dx, 3CEh

loc_11B26:				; CODE XREF: s_1198C+139  j s_1198C+149  j ...		 /* DOS offset ---> 91E:6 */
mov	al, 4

loc_11B28:				; CODE XREF: dseg:21AB2  j		 /* DOS offset ---> 91E:8 */
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 2
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
or	bl, al

loc_11B33:				; CODE XREF: s_1198C+31  j s_1198C+44  j ...		 /* DOS offset ---> 91F:3 */
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 4

loc_11B3C:				; CODE XREF: s_11C24+57  p		 /* DOS offset ---> 91F:C */
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
mov	dx, 3CEh
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	bl, es:[di]
lodsb
or	bl, al
mov	dx, 3C4h
; END OF FUNCTION CHUNK	FOR s_11B3C
;     ***************************************************************************
db 0B0h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR s_11B3C

loc_11B54:				; CODE XREF: s_11B3C+8  j s_11B3C+E  j		 /* DOS offset ---> 921:4 */
add	ch, dh
inc	dx
mov	al, 2
out	dx, al		; EGA port: sequencer data register
mov	es:[di], bl
inc	di
loop	loc_11B01
pop	di
pop	cx
add	di, 50h	; 'P'
dec	[bp+arg_6]
jnz	short loc_11AFF
jmp	loc_11A1C
; END OF FUNCTION CHUNK	FOR s_11B3C
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_messenger_travel_s_11B56

loc_11B6D:				; CODE XREF: game_messenger_travel_s_11B56-FF74  j		 /* DOS offset ---> 922:D */
push	cx
push	di

loc_11B6F:				; CODE XREF: game_messenger_travel_s_11B56-FF7E  j		 /* DOS offset ---> 922:F */
mov	dx, [si]
inc	si
inc	si
mov	bl, [si]
inc	si
mov	bh, bl
or	bh, dh
or	bh, dl
not	bh
mov	ax, 0A000h
mov	es, ax
push	dx
nop
push	cs
call	near ptr loc_11616+1
mov	al, 0
out	dx, al
nop
push	cs
call	loc_1161F
mov	al, 1
out	dx, al
pop	dx
push	dx
mov	al, es:[di]

loc_11B99:				; CODE XREF: dseg:21B90  j		 /* DOS offset ---> 925:9 */
; game_messenger_travel_s_11B56+38  j
and	al, bh
or	al, dl
mov	es:[di], al
nop
push	cs
call	near ptr loc_11616+1

loc_11BA5:				; CODE XREF: dseg:21B35  j		 /* DOS offset ---> 926:5 */
mov	al, 2
out	dx, al
nop
push	cs
call	loc_1161F
mov	al, 4

loc_11BAF:				; CODE XREF: game_messenger_travel_s_11B56+42  j		 /* DOS offset ---> 926:F */
; game_messenger_travel_s_11B56+52  j
out	dx, al
pop	dx
push	dx
mov	al, es:[di]
and	al, bh
or	al, dh
mov	es:[di], al
nop
push	cs
call	near ptr loc_11616+1
mov	al, 1
out	dx, al

loc_11BC4:				; CODE XREF: game_messenger_travel_s_11B56+28  j		 /* DOS offset ---> 928:4 */
nop
push	cs

loc_11BC6:				; CODE XREF: s_11C24+F  p		 /* DOS offset ---> 928:6 */
call	loc_1161F
mov	al, 2
out	dx, al
mov	al, es:[di]
and	al, bh
or	al, bl
mov	es:[di], al
pop	dx
inc	di
loop	loc_11B6F

loc_11BDA:				; CODE XREF: dseg:21C01  j		 /* DOS offset ---> 929:A */
pop	di
pop	cx
add	di, 50h	; 'P'
dec	[bp+arg_8]
jnz	short loc_11B6D
jmp	loc_11A1C
; END OF FUNCTION CHUNK	FOR game_messenger_travel_s_11B56
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR s_11BC8

loc_11BE7:				; CODE XREF: s_11BC8+35  j		 /* DOS offset ---> 92A:7 */
nop
push	cs

loc_11BE9:				; CODE XREF: s_11BC8+1B  j		 /* DOS offset ---> 92A:9 */
call	near ptr s_0EC7
jb	short loc_11C04
mov	si, [bp+10h]
cld

loc_11BF2:				; CODE XREF: s_11BC8+15  j		 /* DOS offset ---> 92B:2 */
mov	ax, [bp+0Eh]
cmp	ax, 4
ja	short loc_11C04
push	es
shl	ax, 1
mov	bx, ax

loc_11BFF:				; CODE XREF: s_11BC8+32  j dseg:21B24  j ...		 /* DOS offset ---> 92B:F */
jmp	word ptr cs:[bx+19A9h]
;     ***************************************************************************

loc_11C04:				; CODE XREF: s_11BC8-FFDC  j		 /* DOS offset ---> 92C:4 */
; s_11BC8-FFD0  j
pop	ds
pop	di
pop	si
pop	bp
mov	ax, 0FFFFh
retf
; END OF FUNCTION CHUNK	FOR s_11BC8
;     ***************************************************************************

loc_11C0C:				; CODE XREF: dseg:21A75  j		 /* DOS offset ---> 92C:C */
mov	bx, [bp+6]

loc_11C0F:				; CODE XREF: dseg:21DA6  p		 /* DOS offset ---> 92C:F */
mov	dx, [bp+8]
nop
push	cs

loc_11C14:				; CODE XREF: s_11BC8+1F  j		 /* DOS offset ---> 92D:4 */
call	loc_10F59
; START	OF FUNCTION CHUNK FOR s_11BC8

loc_11C17:				; CODE XREF: s_11BC8-FF86  j		 /* DOS offset ---> 92D:7 */
push	cx
mov	ax, 0B800h
mov	es, ax

loc_11C1D:				; CODE XREF: s_11BC8-FFA2  j		 /* DOS offset ---> 92D:D */
inc	si
lodsb
or	al, [si]
inc	si

loc_11C22:				; CODE XREF: s_11BC8+B  j s_11BC8+17  j		 /* DOS offset ---> 92E:2 */
mov	es:[di], al
inc	di
loop	loc_11C1D
pop	cx
inc	dx
cmp	di, 2000h
jb	short loc_11C39
sub	di, 2000h
add	di, 50h	; 'P'

loc_11C37:				; CODE XREF: s_11C24+9  j		 /* DOS offset ---> 92F:7 */
jmp	short loc_11C3D
;     ***************************************************************************

loc_11C39:				; CODE XREF: s_11BC8-FF9A  j		 /* DOS offset ---> 92F:9 */
add	di, 2000h

loc_11C3D:				; CODE XREF: s_11BC8:loc_11C37  j		 /* DOS offset ---> 92F:D */
sub	di, cx

loc_11C3F:				; CODE XREF: s_11C24+C  j		 /* DOS offset ---> 92F:F */
dec	word ptr [bp+0Ch]
jnz	short loc_11C17

loc_11C44:				; CODE XREF: s_11C24-FFA0  j		 /* DOS offset ---> 930:4 */
; game_messenger_travel_s_11C82-FFC4  j ...
pop	es
pop	ds
pop	di
pop	si
pop	bp
xor	ax, ax
retf
; END OF FUNCTION CHUNK	FOR s_11BC8
;     ***************************************************************************
mov	bx, [bp+6]
mov	dx, [bp+8]
nop
push	cs
call	loc_10F59
; START	OF FUNCTION CHUNK FOR s_11C24

loc_11C57:				; CODE XREF: s_11C24-FFA2  j		 /* DOS offset ---> 931:7 */
push	cx
mov	ax, 0B800h
mov	es, ax

loc_11C5D:				; CODE XREF: s_11C24-FFBE  j		 /* DOS offset ---> 931:D */
inc	si

loc_11C5E:				; CODE XREF: s_11C24+21  j s_11C24+29  j		 /* DOS offset ---> 931:E */
lodsb
or	al, [si]
inc	si
xor	es:[di], al
inc	di
loop	loc_11C5D
pop	cx
inc	dx
cmp	di, 2000h
jb	short loc_11C79
sub	di, 2000h

loc_11C74:				; CODE XREF: dseg:21C68  j s_11C24+12  j ...		 /* DOS offset ---> 933:4 */
add	di, 50h	; 'P'
jmp	short loc_11C7D
;     ***************************************************************************

loc_11C79:				; CODE XREF: s_11C24-FFB6  j		 /* DOS offset ---> 933:9 */
add	di, 2000h

loc_11C7D:				; CODE XREF: s_11C24-FFAD  j		 /* DOS offset ---> 933:D */
sub	di, cx
dec	[bp+arg_8]
jnz	short loc_11C57
jmp	short loc_11C44
; END OF FUNCTION CHUNK	FOR s_11C24
;     ***************************************************************************
mov	bx, [bp+6]
mov	dx, [bp+8]
nop
push	cs
call	loc_10F59
; START	OF FUNCTION CHUNK FOR game_messenger_travel_s_11C82

loc_11C91:				; CODE XREF: game_messenger_travel_s_11C82-FFC6  j		 /* DOS offset ---> 935:1 */
push	cx
mov	ax, 0B800h
mov	es, ax

loc_11C97:				; CODE XREF: game_messenger_travel_s_11C82-FFE2  j		 /* DOS offset ---> 935:7 */
inc	si
lodsb
or	al, [si]
inc	si
and	es:[di], al
inc	di
loop	loc_11C97

loc_11CA2:				; CODE XREF: game_messenger_travel_s_11C82+14  j		 /* DOS offset ---> 936:2 */
pop	cx
inc	dx
cmp	di, 2000h
jb	short loc_11CB3
sub	di, 2000h

loc_11CAE:				; CODE XREF: game_messenger_travel_s_11C82+26  j		 /* DOS offset ---> 936:E */
add	di, 50h	; 'P'
jmp	short loc_11CB7
;     ***************************************************************************

loc_11CB3:				; CODE XREF: game_messenger_travel_s_11C82-FFDA  j		 /* DOS offset ---> 937:3 */
add	di, 2000h

loc_11CB7:				; CODE XREF: game_messenger_travel_s_11C82-FFD1  j		 /* DOS offset ---> 937:7 */
sub	di, cx
dec	[bp+arg_8]
jnz	short loc_11C91
jmp	short loc_11C44
; END OF FUNCTION CHUNK	FOR game_messenger_travel_s_11C82
;     ***************************************************************************

loc_11CC0:				; CODE XREF: Q_21DB2+AE  p		 /* DOS offset ---> 938:0 */
mov	bx, [bp+6]

loc_11CC3:				; CODE XREF: game_messenger_travel_s_11C82+34  j		 /* DOS offset ---> 938:3 */
; game_messenger_travel_s_11C82+3A  j
mov	dx, [bp+8]
nop
push	cs
call	loc_10F59
; START	OF FUNCTION CHUNK FOR game_messenger_travel_s_11C82

loc_11CCB:				; CODE XREF: game_messenger_travel_s_11C82-FF8C  j		 /* DOS offset ---> 938:B */
push	cx
mov	ax, 0B800h
mov	es, ax

loc_11CD1:				; CODE XREF: game_messenger_travel_s_11C82-FFA8  j		 /* DOS offset ---> 939:1 */
inc	si
lodsb

loc_11CD3:				; CODE XREF: game_messenger_travel_s_11C82+2C  j		 /* DOS offset ---> 939:3 */
; game_messenger_travel_s_11C82+40  j
or	al, [si]
inc	si
or	es:[di], al
inc	di
loop	loc_11CD1
pop	cx
inc	dx
cmp	di, 2000h

loc_11CE2:				; CODE XREF: game_messenger_travel_s_11C82+1E  j		 /* DOS offset ---> 93A:2 */
; game_messenger_travel_s_11C82+59  j
jb	short loc_11CED
sub	di, 2000h

loc_11CE8:				; CODE XREF: dseg:21CD4  j		 /* DOS offset ---> 93A:8 */
add	di, 50h	; 'P'
jmp	short loc_11CF1
;     ***************************************************************************

loc_11CED:				; CODE XREF: game_messenger_travel_s_11C82:loc_11CE2  j		 /* DOS offset ---> 93A:D */
add	di, 2000h

loc_11CF1:				; CODE XREF: game_messenger_travel_s_11C82-FF97  j		 /* DOS offset ---> 93B:1 */
sub	di, cx

loc_11CF3:				; CODE XREF: dseg:21CEE  j		 /* DOS offset ---> 93B:3 */
dec	[bp+arg_8]
jnz	short loc_11CCB
jmp	loc_11C44
; END OF FUNCTION CHUNK	FOR game_messenger_travel_s_11C82
;     ***************************************************************************

loc_11CFB:		 /* DOS offset ---> 93B:B */
mov	bx, [bp+6]
mov	dx, [bp+8]
nop
push	cs

loc_11D03:				; CODE XREF: game_messenger_travel_s_11C82+64  j		 /* DOS offset ---> 93C:3 */
; dseg:21D00  j
call	loc_10F59
; START	OF FUNCTION CHUNK FOR game_messenger_travel_s_11C82

loc_11D06:				; CODE XREF: game_messenger_travel_s_11C82-FF4C  j		 /* DOS offset ---> 93C:6 */
push	cx
mov	ax, 0B800h
mov	es, ax

loc_11D0C:				; CODE XREF: game_messenger_travel_s_11C82-FF68  j		 /* DOS offset ---> 93C:C */
; game_messenger_travel_s_11C82+6B  j
inc	si
lodsb
or	al, [si]
inc	si
not	ah
and	es:[di], ah
or	es:[di], al
inc	di
loop	loc_11D0C
pop	cx
inc	dx
cmp	di, 2000h
jb	short loc_11D2D

loc_11D24:				; CODE XREF: dseg:21D22  j		 /* DOS offset ---> 93E:4 */
sub	di, 2000h
add	di, 50h	; 'P'
jmp	short loc_11D31
;     ***************************************************************************

loc_11D2D:				; CODE XREF: game_messenger_travel_s_11C82-FF60  j		 /* DOS offset ---> 93E:D */
; s_11D10+19  j
add	di, 2000h

loc_11D31:				; CODE XREF: game_messenger_travel_s_11C82-FF57  j		 /* DOS offset ---> 93F:1 */
sub	di, cx
dec	[bp+arg_8]
jnz	short loc_11D06
jmp	loc_11C44
; END OF FUNCTION CHUNK	FOR game_messenger_travel_s_11C82
;     ***************************************************************************
aad	1Dh
pop	si
; START	OF FUNCTION CHUNK FOR s_11D10

loc_11D3E:				; CODE XREF: s_11D10+9  j		 /* DOS offset ---> 93F:E */
sbb	ax, 8B55h
in	al, dx
push	si
push	di
mov	cl, byte ptr word_1CEA2
mov	bl, cl
and	bl, 1
xor	bh, bh
shl	bx, 1
jmp	word ptr cs:[bx+1D3Bh]
; END OF FUNCTION CHUNK	FOR s_11D10
;     ***************************************************************************

loc_11D56:				; CODE XREF: dseg:1D63  j		 /* DOS offset ---> 941:6 */
pop	ds
pop	di
pop	si
pop	bp
mov	ax, 0FFFFh
retf
;     ***************************************************************************
nop
push	cs
call	near ptr s_0EC7
jb	short loc_11D56
push	ds
mov	ax, [bp+0Eh]
mov	ds, ax
mov	si, [bp+10h]
cld
push	es
shl	ax, 1

loc_11D72:				; CODE XREF: dseg:11D4E  j		 /* DOS offset ---> 943:2 */
mov	bx, ax
mov	bx, [bp+6]
mov	dx, [bp+8]
nop
push	cs
call	loc_10F59
; START	OF FUNCTION CHUNK FOR s_11D10

loc_11D7F:				; CODE XREF: s_11D10-FF68  j		 /* DOS offset ---> 943:F */
push	cx
mov	ax, 0B800h

loc_11D83:				; CODE XREF: dseg:11D70  j		 /* DOS offset ---> 944:3 */
mov	es, ax

loc_11D85:				; CODE XREF: s_11D10-FF84  j		 /* DOS offset ---> 944:5 */
inc	si
lodsb
inc	si
mov	es:[di], al
inc	di
loop	loc_11D85

loc_11D8E:				; CODE XREF: s_11D10+C  j		 /* DOS offset ---> 944:E */
pop	cx
inc	dx
cmp	di, 2000h
jb	short loc_11D9F
sub	di, 2000h
add	di, 50h	; 'P'
jmp	short loc_11DA3
;     ***************************************************************************

loc_11D9F:				; CODE XREF: s_11D10-FF7C  j		 /* DOS offset ---> 945:F */
add	di, 2000h

loc_11DA3:				; CODE XREF: s_11D10-FF73  j dseg:11D93  j		 /* DOS offset ---> 946:3 */
sub	di, cx
dec	[bp+arg_8]
jnz	short loc_11D7F
pop	es
pop	ds

loc_11DAC:				; CODE XREF: dseg:21CF0  j dseg:21D02  j ...		 /* DOS offset ---> 946:C */
pop	di
pop	si
pop	bp
xor	ax, ax
retf
; END OF FUNCTION CHUNK	FOR s_11D10
;     ***************************************************************************

loc_11DB2:				; CODE XREF: dseg:21F71  p		 /* DOS offset ---> 947:2 */
add	byte ptr loc_11E2D, bl
;     ***************************************************************************
off_11DB6	dw offset loc_11ED7	; DATA XREF: dseg:loc_11ECA  r
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR Q_21DB2

loc_11DB8:				; CODE XREF: Q_21DB2+4B  j Q_21DB2+5A  j		 /* DOS offset ---> 947:8 */
adc	bl, [bx]
; END OF FUNCTION CHUNK	FOR Q_21DB2
; START	OF FUNCTION CHUNK FOR s_11D10

loc_11DBA:				; CODE XREF: s_11D10+1B  j		 /* DOS offset ---> 947:A */
aad	1Dh
lodsb
push	ds
push	bp
mov	bp, sp
push	si
push	di
mov	cl, byte ptr word_1CEA2
mov	bl, cl
and	bl, 1
xor	bh, bh
shl	bx, 1
jmp	word ptr cs:[bx+1DBAh]
; END OF FUNCTION CHUNK	FOR s_11D10
;     ***************************************************************************
nop
push	cs
call	near ptr s_0EC7
jb	short loc_11DF8
push	ds
mov	ax, [bp+0Eh]
mov	ds, ax
mov	si, [bp+10h]
cld
mov	ax, [bp+12h]
cmp	ax, 1
ja	short loc_11DF8
shl	ax, 1
push	es
mov	bx, ax
jmp	word ptr cs:[bx+1DB2h]
;     ***************************************************************************

loc_11DF8:				; CODE XREF: dseg:1DDA  j dseg:1DEC  j		 /* DOS offset ---> 94B:8 */
pop	ds
pop	di
pop	si
pop	bp
mov	ax, 0FFFFh
retf
;     ***************************************************************************
mov	bx, cx
; START	OF FUNCTION CHUNK FOR game_messenger_travel_s_11DBE

loc_11E02:				; CODE XREF: game_messenger_travel_s_11DBE-FF96  j		 /* DOS offset ---> 94C:2 */
; game_messenger_travel_s_11DBE+38  j
push	di

loc_11E03:				; CODE XREF: game_messenger_travel_s_11DBE-FFA1  j		 /* DOS offset ---> 94C:3 */
mov	ax, 0A000h
mov	es, ax
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3

loc_11E0E:				; CODE XREF: game_messenger_travel_s_11DBE+4A  j		 /* DOS offset ---> 94C:E */
inc	dx

loc_11E0F:				; CODE XREF: Q_21DB2+25  j		 /* DOS offset ---> 94C:F */
mov	al, 1
out	dx, al		; EGA port: sequencer data register
movsb
dec	di
mov	al, 4

loc_11E16:				; CODE XREF: Q_21DB2+5C  j		 /* DOS offset ---> 94D:6 */
out	dx, al		; EGA port: sequencer data register
movsb
dec	di
mov	al, 2

loc_11E1B:				; CODE XREF: game_messenger_travel_s_11DBE+4E  j		 /* DOS offset ---> 94D:B */
out	dx, al		; EGA port: sequencer data register
movsb
loop	loc_11E03
mov	cx, bx
pop	di
add	di, 50h	; 'P'
dec	[bp+arg_8]
jnz	short loc_11E02
jmp	short loc_11EA4
;     ***************************************************************************

loc_11E2C:				; CODE XREF: game_messenger_travel_s_11DBE+42  j		 /* DOS offset ---> 94E:C */
; game_messenger_travel_s_11DBE+67  j
nop

loc_11E2D:				; CODE XREF: dseg:1EA2  j		 /* DOS offset ---> 94E:D */
; DATA XREF: dseg:loc_11DB2  w
push	cx
push	di

loc_11E2F:				; CODE XREF: dseg:1E98  j		 /* DOS offset ---> 94E:F */
mov	dx, [si]
inc	si
inc	si
mov	bl, [si]
inc	si
mov	bh, bl
or	bh, dh
or	bh, dl

loc_11E3C:				; CODE XREF: game_messenger_travel_s_11DBE+14  j		 /* DOS offset ---> 94F:C */
; game_messenger_travel_s_11DBE+28  j
not	bh
mov	ax, 0A000h
mov	es, ax
push	dx
nop
push	cs
call	near ptr loc_11616+1
mov	al, 0
out	dx, al
nop
push	cs
call	loc_1161F
mov	al, 1
out	dx, al

loc_11E54:				; CODE XREF: game_messenger_travel_s_11DBE+8C  j		 /* DOS offset ---> 951:4 */
pop	dx
push	dx
mov	al, es:[di]

loc_11E59:				; CODE XREF: game_messenger_travel_s_11DBE+94  j		 /* DOS offset ---> 951:9 */
and	al, bh
or	al, dl

loc_11E5D:		 /* DOS offset ---> 951:D */
mov	es:[di], al
nop
push	cs

loc_11E62:				; CODE XREF: Q_21DB2+80  j		 /* DOS offset ---> 952:2 */
call	near ptr loc_11616+1
mov	al, 2
out	dx, al
nop
push	cs
call	loc_1161F
mov	al, 4
out	dx, al

loc_11E70:				; CODE XREF: dseg:21EDB  p		 /* DOS offset ---> 953:0 */
pop	dx
; END OF FUNCTION CHUNK	FOR game_messenger_travel_s_11DBE
;     ***************************************************************************
db  52h	; R
db  26h	; &
db  8Ah	;   *
unk_11E74	db    5			; CODE XREF: dseg:1DD03  P s_1EE7C+5C  P ...
db  22h	; "
db 0C7h	;   *
db  0Ah
db 0C6h	;   *
db  26h	; &
db  88h	;   *
db    5
db  90h	;   *
db  0Eh
db 0E8h	;   *
db  96h	;   *
db 0F7h	;   *
db 0B0h	;   *
db    1
db 0EEh	;   *
db  90h	;   *
db  0Eh
db 0E8h	;   *
db  96h	;   *
db 0F7h	;   *
db 0B0h	;   *
db    2
db 0EEh	;   *
db  26h	; &
db  8Ah	;   *
unk_11E8E	db    5			; CODE XREF: game_messenger_travel_s_11E74+13  j
db  22h	; "
unk_11E90	db 0C7h	;   *		; CODE XREF: game_messenger_travel_s_11E74+17  j
db  0Ah
db 0C3h	;   *
db  26h	; &
db  88h	;   *
db    5
;     ***************************************************************************

loc_11E96:				; CODE XREF: dseg:21EBD  j		 /* DOS offset ---> 955:6 */
pop	dx
inc	di
loop	loc_11E2F
pop	di
pop	cx
add	di, 50h	; 'P'
dec	word ptr [bp+0Ch]
jnz	short loc_11E2D
; START	OF FUNCTION CHUNK FOR game_messenger_travel_s_11DBE

loc_11EA4:				; CODE XREF: game_messenger_travel_s_11DBE-FF94  j		 /* DOS offset ---> 956:4 */
pop	es
pop	ds
pop	di
pop	si
pop	bp
xor	ax, ax
retf
; END OF FUNCTION CHUNK	FOR game_messenger_travel_s_11DBE
;     ***************************************************************************
nop
push	cs
call	near ptr s_0EC7
jb	short loc_11ECF
push	ds
mov	ax, [bp+0Eh]
mov	ds, ax
mov	si, [bp+10h]
cld

loc_11EBD:				; CODE XREF: dseg:21E94  j		 /* DOS offset ---> 957:D */
mov	ax, [bp+12h]
cmp	ax, 1
ja	short loc_11ECF
push	es
shl	ax, 1
mov	bx, ax

loc_11ECA:				; CODE XREF: dseg:21435  p		 /* DOS offset ---> 958:A */
jmp	cs:off_11DB6[bx]
;     ***************************************************************************

loc_11ECF:				; CODE XREF: dseg:1EB1  j dseg:1EC3  j		 /* DOS offset ---> 958:F */
pop	ds
pop	di
pop	si
pop	bp
mov	ax, 0FFFFh
retf
;     ***************************************************************************

loc_11ED7:				; DATA XREF: dseg:off_11DB6  o		 /* DOS offset ---> 959:7 */
mov	bx, [bp+6]
mov	dx, [bp+8]
nop
push	cs
call	loc_10F59

loc_11EE2:				; CODE XREF: dseg:1F0D  j		 /* DOS offset ---> 95A:2 */
push	cx
mov	ax, 0B800h
mov	es, ax
inc	si
lodsb
or	al, [si]
; START	OF FUNCTION CHUNK FOR game_messenger_travel_s_11E74

loc_11EEC:				; CODE XREF: game_messenger_travel_s_11E74+29  j		 /* DOS offset ---> 95A:C */
inc	si
mov	es:[di], al
inc	di
; END OF FUNCTION CHUNK	FOR game_messenger_travel_s_11E74
;     ***************************************************************************
unk_11EF1	db 0E2h	;   *		; CODE XREF: dseg:21F67  j
db 0F5h	;   *
db  59h	; Y
db  42h	; B
db  81h	;   *
db 0FFh
db    0
db  20h
db  72h	; r
db    9
db  81h	;   *
db 0EFh	;   *
db    0
db  20h
;     ***************************************************************************

loc_11EFF:				; CODE XREF: dseg:21F8E  j		 /* DOS offset ---> 95B:F */
add	di, 50h	; 'P'

loc_11F02:				; CODE XREF: dseg:21F59  j dseg:21F69  j ...		 /* DOS offset ---> 95C:2 */
jmp	short loc_11F08
;     ***************************************************************************
db  81h	;   *
db 0C7h	;   *
db    0
db  20h
;     ***************************************************************************

loc_11F08:				; CODE XREF: dseg:loc_11F02  j		 /* DOS offset ---> 95C:8 */
sub	di, cx
dec	word ptr [bp+0Ch]
jnz	short loc_11EE2
jmp	short loc_11F4A
;     ***************************************************************************
nop
mov	bx, [bp+6]
mov	dx, [bp+8]
nop
push	cs
call	loc_10F59

loc_11F1D:				; CODE XREF: dseg:1F48  j		 /* DOS offset ---> 95D:D */
push	cx
mov	ax, 0B800h
mov	es, ax

loc_11F23:				; CODE XREF: dseg:1F2C  j		 /* DOS offset ---> 95E:3 */
inc	si
lodsb

loc_11F25:				; CODE XREF: dseg:21F15  j		 /* DOS offset ---> 95E:5 */
or	al, [si]
inc	si
or	es:[di], al
inc	di
loop	loc_11F23
pop	cx
inc	dx

loc_11F30:				; CODE XREF: dseg:21F24  j		 /* DOS offset ---> 95F:0 */
cmp	di, 2000h
jb	short loc_11F3F
sub	di, 2000h
add	di, 50h	; 'P'
jmp	short loc_11F43
;     ***************************************************************************

loc_11F3F:				; CODE XREF: dseg:1F34  j		 /* DOS offset ---> 95F:F */
add	di, 2000h

loc_11F43:				; CODE XREF: dseg:1F3D  j		 /* DOS offset ---> 960:3 */
sub	di, cx
dec	word ptr [bp+0Ch]
jnz	short loc_11F1D

loc_11F4A:				; CODE XREF: dseg:1F0F  j		 /* DOS offset ---> 960:A */
pop	es
pop	ds
pop	di
pop	si
pop	bp
xor	ax, ax
retf
;     ***************************************************************************
push	bp
mov	bp, sp
push	es
test	byte ptr word_1CEA2, 1

loc_11F5B:				; CODE XREF: dseg:21F51  j		 /* DOS offset ---> 961:B */
jnz	short loc_11F83
mov	ax, 0A000h
mov	es, ax
mov	ax, [bp+8]
mov	dx, ax
shl	ax, 1

loc_11F69:		 /* DOS offset ---> 962:9 */
shl	ax, 1

loc_11F6B:				; CODE XREF: dseg:21F54  j		 /* DOS offset ---> 962:B */
add	ax, dx
shl	ax, 1
shl	ax, 1
shl	ax, 1
shl	ax, 1

loc_11F75:				; CODE XREF: dseg:21F96  j dseg:21F9C  j		 /* DOS offset ---> 963:5 */
add	ax, [bp+6]
mov	bx, ax
mov	al, [bp+0Ah]
mov	es:[bx], al

loc_11F80:				; CODE XREF: dseg:21F57  j		 /* DOS offset ---> 964:0 */
pop	es
pop	bp
retf
;     ***************************************************************************

loc_11F83:				; CODE XREF: dseg:loc_11F5B  j		 /* DOS offset ---> 964:3 */
push	di
mov	bx, [bp+6]
mov	dx, [bp+8]
; START	OF FUNCTION CHUNK FOR s_11F6A

loc_11F8A:				; CODE XREF: s_11F6A+E  j		 /* DOS offset ---> 964:A */
nop
push	cs
call	loc_10F59
mov	ax, 0B800h

loc_11F92:				; CODE XREF: dseg:21F4F  j		 /* DOS offset ---> 965:2 */
mov	es, ax
mov	al, [bp+arg_6]

loc_11F97:				; CODE XREF: dseg:21F5F  j		 /* DOS offset ---> 965:7 */
mov	es:[di], al
pop	di
pop	es
pop	bp
retf
; END OF FUNCTION CHUNK	FOR s_11F6A
;     ***************************************************************************

loc_11F9E:				; CODE XREF: dseg:21F62  j		 /* DOS offset ---> 965:E */
; DATA XREF: dseg:2B16  r ...
movsb
pop	ds

loc_11FA0:				; DATA XREF: dseg:29FC  r		 /* DOS offset ---> 966:0 */
; dseg:loc_12C47  r
stosb
pop	ds

loc_11FA2:				; DATA XREF: dseg:loc_12C58  r		 /* DOS offset ---> 966:2 */
mov	al, 1Fh
nop
push	cs
call	loc_10E78
retn
;     ***************************************************************************
nop
push	cs
call	loc_10E91
retn
;     ***************************************************************************
nop
push	cs
call	loc_10EAA
retn
;     ***************************************************************************
word_11FB6	dw 0			; CODE XREF: dseg:21FB1  j
; DATA XREF: dseg:1FFC  w ...
word_11FB8	dw 0			; DATA XREF: dseg:27C4  w
; dseg:loc_127E4  w ...
word_11FBA	dw 0			; CODE XREF: dseg:2212B  p
; DATA XREF: dseg:28BD  w ...
word_11FBC	dw 0			; DATA XREF: dseg:200D  w
; game_messenger_travel_s_1203E:loc_1224B  w ...
word_11FBE	dw 0			; DATA XREF: dseg:2003  w
; game_messenger_travel_s_1203E:loc_12020  w ...
db    0
unk_11FC1	db    0			; CODE XREF: s_11F6A+1D  j
db    0
db    0
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR s_11F6A

loc_11FC4:				; CODE XREF: s_11F6A+48  j		 /* DOS offset ---> 968:4 */
; DATA XREF: dseg:loc_12838  w ...
add	bh, bl
pop	ds
; END OF FUNCTION CHUNK	FOR s_11F6A
;     ***************************************************************************
dw offset loc_1225C
;     ***************************************************************************
push	bp
mov	bp, sp
push	es
push	di
push	si
mov	bl, byte ptr word_1CEA2
and	bl, 1
xor	bh, bh
shl	bx, 1
jmp	word ptr cs:(loc_11FC4+1)[bx]
;     ***************************************************************************
mov	ax, 0A000h
mov	es, ax
mov	ax, [bp+6]
add	ax, [bp+8]
mov	dx, ax
shl	ax, 1
shl	ax, 1
add	ax, dx
shl	ax, 1
shl	ax, 1
shl	ax, 1
shl	ax, 1
dec	ax
dec	ax
mov	cs:word_11FB6, ax
mov	di, [bp+0Eh]
mov	cs:word_11FBE, 9
mov	ax, [bp+0Ah]
mov	cs:word_11FBC, ax
; START	OF FUNCTION CHUNK FOR game_messenger_travel_s_1203E

loc_12011:				; CODE XREF: game_messenger_travel_s_1203E-FDEC  j		 /* DOS offset ---> 96D:1 */
mov	cx, [bp+arg_2]

loc_12014:				; CODE XREF: s_11F6A+58  j		 /* DOS offset ---> 96D:4 */
mov	si, cs:word_11FB6

loc_12019:				; CODE XREF: game_messenger_travel_s_1203E-FE18  j		 /* DOS offset ---> 96D:9 */
xor	bx, bx

loc_1201B:				; CODE XREF: game_messenger_travel_s_1203E-FE22  j		 /* DOS offset ---> 96D:B */
call	word ptr cs:[bx+1F9Eh]

loc_12020:		 /* DOS offset ---> 96E:0 */
dec	cs:word_11FBE
jnz	short loc_1202F
mov	cs:word_11FBE, 8
inc	di

loc_1202F:				; CODE XREF: game_messenger_travel_s_1203E-10019  j		 /* DOS offset ---> 96E:F */
shl	byte ptr [di], 1
push	bx
mov	bx, si

loc_12034:				; CODE XREF: dseg:22028  j		 /* DOS offset ---> 96F:4 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1

loc_12051:				; CODE XREF: game_messenger_travel_s_1203E+E  j		 /* DOS offset ---> 971:1 */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1

loc_1206B:				; CODE XREF: game_messenger_travel_s_1203E+28  j		 /* DOS offset ---> 972:B */
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_1207C:				; CODE XREF: game_messenger_travel_s_1203E+3B  j		 /* DOS offset ---> 973:C */
mov	ax, es:[bx]

loc_1207F:				; CODE XREF: dseg:224B4  p		 /* DOS offset ---> 973:F */
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]

loc_12097:				; CODE XREF: dseg:22093  j		 /* DOS offset ---> 975:7 */
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax

loc_120AA:				; CODE XREF: dseg:220A5  j		 /* DOS offset ---> 976:A */
dec	bx
dec	bx
mov	ax, es:[bx]

loc_120AF:				; CODE XREF: game_messenger_travel_s_1203E+E2  j		 /* DOS offset ---> 976:F */
; game_messenger_travel_s_1203E+FA  j
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax

loc_120B6:				; CODE XREF: game_messenger_travel_s_1203E+20  j		 /* DOS offset ---> 977:6 */
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax

loc_120F2:				; CODE XREF: game_messenger_travel_s_1203E+AB  j		 /* DOS offset ---> 97B:2 */
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1

loc_12107:				; CODE XREF: game_messenger_travel_s_1203E+C1  j		 /* DOS offset ---> 97C:7 */
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_12118:				; CODE XREF: game_messenger_travel_s_1203E+BA  j		 /* DOS offset ---> 97D:8 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax

loc_12122:				; CODE XREF: game_messenger_travel_s_1203E+85  j		 /* DOS offset ---> 97E:2 */
; game_messenger_travel_s_1203E+98  j
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax

loc_1212E:				; CODE XREF: dseg:22095  j dseg:220A7  j ...		 /* DOS offset ---> 97E:E */
dec	bx
dec	bx
mov	ax, es:[bx]

loc_12133:				; CODE XREF: dseg:22492  p		 /* DOS offset ---> 97F:3 */
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_1213C:				; CODE XREF: game_messenger_travel_s_1203E+10  j		 /* DOS offset ---> 97F:C */
; game_messenger_travel_s_1203E+2A  j ...
mov	ax, es:[bx]
rcl	ah, 1

loc_12141:				; CODE XREF: dseg:1D95C  P dseg:1D9E3  P ...		 /* DOS offset ---> 980:1 */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]

loc_1216F:				; CODE XREF: dseg:22149  j		 /* DOS offset ---> 982:F */
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_12178:				; CODE XREF: dseg:22193  j		 /* DOS offset ---> 983:8 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1

loc_12195:				; CODE XREF: dseg:22186  j		 /* DOS offset ---> 985:5 */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_1219C:				; CODE XREF: s_12142+15E  j		 /* DOS offset ---> 985:C */
mov	ax, es:[bx]
rcl	ah, 1

loc_121A1:				; CODE XREF: dseg:22199  j		 /* DOS offset ---> 986:1 */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]

loc_121C3:				; CODE XREF: s_12142+142  j		 /* DOS offset ---> 988:3 */
rcl	ah, 1
rcl	al, 1

loc_121C7:				; CODE XREF: dseg:22202  j		 /* DOS offset ---> 988:7 */
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1

loc_121E9:				; CODE XREF: s_12142+A3  j		 /* DOS offset ---> 98A:9 */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx

loc_121FB:				; CODE XREF: dseg:221D4  j dseg:221F3  j		 /* DOS offset ---> 98B:B */
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1

loc_12203:				; CODE XREF: s_12142+AC  j s_12142+B4  j ...		 /* DOS offset ---> 98C:3 */
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1

loc_1220D:				; CODE XREF: dseg:22208  j		 /* DOS offset ---> 98C:D */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
pop	bx
inc	bx
inc	bx
cmp	bx, 6
jz	short loc_1221F
jmp	loc_1201B
;     ***************************************************************************

loc_1221F:				; CODE XREF: game_messenger_travel_s_1203E-FE24  j		 /* DOS offset ---> 98D:F */
sub	si, 50h	; 'P'
dec	cl
jz	short loc_12229
jmp	loc_12019
;     ***************************************************************************

loc_12229:				; CODE XREF: game_messenger_travel_s_1203E-FE1A  j		 /* DOS offset ---> 98E:9 */
test	[bp+arg_8], 1
jz	short loc_1224B

loc_12230:				; CODE XREF: s_12142+11E  j		 /* DOS offset ---> 98F:0 */
push	es
xor	ax, ax
mov	es, ax
mov	al, es:41Ah

loc_12239:				; CODE XREF: dseg:2229F  j		 /* DOS offset ---> 98F:9 */
mov	ah, es:41Ch

loc_1223E:				; CODE XREF: s_12142+F4  j		 /* DOS offset ---> 98F:E */
pop	es
cmp	al, ah
jz	short loc_1224B
mov	ax, 0FFFFh
pop	si
pop	di
pop	es
pop	bp
retf
;     ***************************************************************************

loc_1224B:				; CODE XREF: game_messenger_travel_s_1203E-FE10  j		 /* DOS offset ---> 990:B */
; game_messenger_travel_s_1203E-FDFD  j
dec	cs:word_11FBC
jz	short loc_12255
jmp	loc_12011
;     ***************************************************************************

loc_12255:				; CODE XREF: game_messenger_travel_s_1203E-FDEE  j		 /* DOS offset ---> 991:5 */
xor	ax, ax
pop	si
pop	di
pop	es
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_messenger_travel_s_1203E
;     ***************************************************************************

loc_1225C:				; DATA XREF: dseg:1FC7  o		 /* DOS offset ---> 991:C */
mov	di, [bp+0Eh]

loc_1225F:				; CODE XREF: s_12142+113  j		 /* DOS offset ---> 991:F */
mov	cs:word_11FBE, 9
mov	ax, [bp+0Ah]
mov	cs:word_11FBC, ax
; START	OF FUNCTION CHUNK FOR game_messenger_travel

loc_1226D:				; CODE XREF: game_messenger_travel-FEEA  j		 /* DOS offset ---> 992:D */
mov	ax, 0B800h
mov	es, ax
mov	dx, [bp+arg_0]
add	dx, [bp+arg_2]
mov	cx, [bp+arg_2]
; END OF FUNCTION CHUNK	FOR game_messenger_travel
; START	OF FUNCTION CHUNK FOR s_12142

loc_1227B:				; CODE XREF: game_messenger_travel-FF14  j		 /* DOS offset ---> 993:B */
; s_12142+A5  j ...
mov	bx, 4Eh	; 'N'
dec	dx
push	di
nop
push	cs
call	loc_10F59
mov	bx, di

loc_12287:				; CODE XREF: s_12142+140  j		 /* DOS offset ---> 994:7 */
pop	di
xor	ah, ah
mov	al, 3

loc_1228C:				; CODE XREF: s_12142-FEA3  j		 /* DOS offset ---> 994:C */
dec	cs:word_11FBE
jnz	short loc_1229B

loc_12293:				; CODE XREF: s_12142+14E  j dseg:22262  j	...		 /* DOS offset ---> 995:3 */
mov	cs:word_11FBE, 8
inc	di

loc_1229B:				; CODE XREF: s_12142-FEB1  j		 /* DOS offset ---> 995:B */
shl	byte ptr [di], 1
dec	al
jnz	short loc_1228C

loc_122A1:				; CODE XREF: dseg:2220A  j s_12142+15C  j		 /* DOS offset ---> 996:1 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1

loc_122A8:				; CODE XREF: s_12142+BE  j dseg:22394  p		 /* DOS offset ---> 996:8 */
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
; END OF FUNCTION CHUNK	FOR s_12142
;     ***************************************************************************
db  26h	; &
db  89h	;   *
db    7
db  4Bh	; K
db  4Bh	; K
db  26h	; &
db  8Bh	;   *
db    7
db 0D0h	;   *
db 0D4h	;   *
db 0D0h	;   *
unk_122BF	db 0D0h	;   *		; CODE XREF: dseg:222BA  j
db  26h	; &
db  89h	;   *
db    7
db  4Bh	; K
db  4Bh	; K
db  26h	; &
db  8Bh	;   *
db    7
db 0D0h	;   *
unk_122C9	db 0D4h	;   *		; CODE XREF: dseg:222B8  j dseg:222C4  j
db 0D0h	;   *
db 0D0h	;   *
db  26h	; &
db  89h	;   *
db    7
db  4Bh	; K
db  4Bh	; K
db  26h	; &
db  8Bh	;   *
db    7
db 0D0h	;   *
db 0D4h	;   *
db 0D0h	;   *
db 0D0h	;   *
db  26h	; &
db  89h	;   *
db    7
db  4Bh	; K
db  4Bh	; K
db  26h	; &
db  8Bh	;   *
db    7
db 0D0h	;   *
db 0D4h	;   *
;     ***************************************************************************

loc_122E2:				; CODE XREF: dseg:22333  j		 /* DOS offset ---> 99A:2 */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
; START	OF FUNCTION CHUNK FOR game_messenger_travel_s_122B2

loc_122E9:				; CODE XREF: game_messenger_travel_s_122B2+DD  j		 /* DOS offset ---> 99A:9 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1

loc_122F0:				; CODE XREF: game_messenger_travel_s_122B2+9A  j		 /* DOS offset ---> 99B:0 */
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_12325:				; CODE XREF: dseg:222ED  j dseg:222FC  j		 /* DOS offset ---> 99E:5 */
mov	ax, es:[bx]

loc_12328:				; CODE XREF: dseg:222DF  j		 /* DOS offset ---> 99E:8 */
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1

loc_12342:				; CODE XREF: dseg:22355  j		 /* DOS offset ---> 9A0:2 */
rcl	al, 1

loc_12344:				; CODE XREF: game_messenger_travel_s_122B2+68  j		 /* DOS offset ---> 9A0:4 */
; game_messenger_travel_s_122B2+84  j
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_12355:				; CODE XREF: dseg:22340  j		 /* DOS offset ---> 9A1:5 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]

loc_12364:				; CODE XREF: dseg:22372  j		 /* DOS offset ---> 9A2:4 */
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx

loc_1236C:				; CODE XREF: dseg:22362  j		 /* DOS offset ---> 9A2:C */
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1

loc_12374:				; CODE XREF: dseg:222BC  j dseg:222C6  j		 /* DOS offset ---> 9A3:4 */
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_12391:				; CODE XREF: game_messenger_travel_s_122B2+DB  j		 /* DOS offset ---> 9A5:1 */
; dseg:2238E  j
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1

loc_12398:				; CODE XREF: dseg:1CA44  P dseg:1CCDD  P ...		 /* DOS offset ---> 9A5:8 */
mov	es:[bx], ax
; END OF FUNCTION CHUNK	FOR game_messenger_travel_s_122B2
;     ***************************************************************************
db  4Bh	; K
db  4Bh	; K
db  26h	; &
unk_1239E	db  8Bh	;   *		; CODE XREF: dseg:22399  j
db    7
db 0D0h	;   *
db 0D4h	;   *
db 0D0h	;   *
db 0D0h	;   *
db  26h	; &
db  89h	;   *
db    7
db  4Bh	; K
db  4Bh	; K
db  26h	; &
db  8Bh	;   *
db    7
db 0D0h	;   *
db 0D4h	;   *
db 0D0h	;   *
db 0D0h	;   *
db  26h	; &
db  89h	;   *
db    7
db  4Bh	; K
db  4Bh	; K
db  26h	; &
db  8Bh	;   *
db    7
db 0D0h	;   *
db 0D4h	;   *
db 0D0h	;   *
db 0D0h	;   *
db  26h	; &
db  89h	;   *
db    7
db  4Bh	; K
db  4Bh	; K
db  26h	; &
db  8Bh	;   *
db    7
db 0D0h	;   *
db 0D4h	;   *
db 0D0h	;   *
db 0D0h	;   *
db  26h	; &
db  89h	;   *
db    7
db  4Bh	; K
db  4Bh	; K
db  26h	; &
db  8Bh	;   *
db    7
db 0D0h	;   *
db 0D4h	;   *
db 0D0h	;   *
db 0D0h	;   *
db  26h	; &
db  89h	;   *
db    7
db  4Bh	; K
db  4Bh	; K
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_messenger_travel

loc_123D9:				; CODE XREF: game_messenger_travel+39  j		 /* DOS offset ---> 9A9:9 */
mov	ax, es:[bx]
rcl	ah, 1

loc_123DE:				; CODE XREF: game_messenger_travel+DA  j		 /* DOS offset ---> 9A9:E */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_123FD:				; CODE XREF: game_messenger_travel+60  j		 /* DOS offset ---> 9AB:D */
mov	ax, es:[bx]

loc_12400:				; CODE XREF: game_messenger_travel+64  j		 /* DOS offset ---> 9AC:0 */
; dseg:223F8  j
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_12409:				; CODE XREF: dseg:223F6  j dseg:223FF  j		 /* DOS offset ---> 9AC:9 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]

loc_12454:				; CODE XREF: game_messenger_travel+B3  j		 /* DOS offset ---> 9B1:4 */
rcl	ah, 1
rcl	al, 1

loc_12458:				; CODE XREF: game_messenger_travel+B9  j		 /* DOS offset ---> 9B1:8 */
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1

loc_12462:				; CODE XREF: game_messenger_travel+C5  j		 /* DOS offset ---> 9B2:2 */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_12469:				; CODE XREF: game_messenger_travel+84  j		 /* DOS offset ---> 9B2:9 */
; dseg:22390  j ...
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_12475:				; CODE XREF: game_messenger_travel+CF  j		 /* DOS offset ---> 9B3:5 */
; game_messenger_travel+D8  j
mov	ax, es:[bx]

loc_12478:				; CODE XREF: dseg:2248F  j		 /* DOS offset ---> 9B3:8 */
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
dec	cx
jz	short loc_12487
jmp	loc_1227B
;     ***************************************************************************

loc_12487:				; CODE XREF: game_messenger_travel-FF16  j		 /* DOS offset ---> 9B4:7 */
; game_messenger_travel+E2  j ...
test	[bp+arg_6], 1
jz	short loc_124A7
xor	ax, ax

loc_12490:				; CODE XREF: dseg:22476  j		 /* DOS offset ---> 9B5:0 */
mov	es, ax

loc_12492:				; CODE XREF: game_messenger_travel+F7  j		 /* DOS offset ---> 9B5:2 */
; game_messenger_travel+136  j
mov	al, es:41Ah
mov	ah, es:41Ch
cmp	al, ah
jz	short loc_124A7
mov	ax, 0FFFFh
pop	si
pop	di
pop	es
pop	bp
retf
;     ***************************************************************************

loc_124A7:				; CODE XREF: game_messenger_travel-FF0C  j		 /* DOS offset ---> 9B6:7 */
; game_messenger_travel-FEFB  j
dec	cs:word_11FBC
jz	short loc_124B1
jmp	loc_1226D
;     ***************************************************************************

loc_124B1:				; CODE XREF: game_messenger_travel-FEEC  j		 /* DOS offset ---> 9B7:1 */
xor	ax, ax
pop	si
pop	di
pop	es

loc_124B6:				; CODE XREF: game_messenger_travel+115  j		 /* DOS offset ---> 9B7:6 */
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_messenger_travel
;     ***************************************************************************
off_124B8	dw offset loc_124D2	; CODE XREF: game_messenger_travel+119  j
; DATA XREF: dseg:24CD  r
off_124BA	dw offset loc_12640	; CODE XREF: dseg:2249A  j
;     ***************************************************************************
push	bp
mov	bp, sp
push	es
push	di
push	si
mov	bl, byte ptr word_1CEA2
and	bl, 1
xor	bh, bh

loc_124CB:				; CODE XREF: dseg:224C7  j		 /* DOS offset ---> 9B8:B */
shl	bx, 1
jmp	cs:off_124B8[bx]
;     ***************************************************************************

loc_124D2:				; DATA XREF: dseg:off_124B8  o		 /* DOS offset ---> 9B9:2 */
mov	ax, 0A000h
mov	es, ax
mov	ax, [bp+6]
add	ax, [bp+8]
mov	dx, ax
shl	ax, 1

loc_124E1:				; CODE XREF: game_messenger_travel+144  j		 /* DOS offset ---> 9BA:1 */
shl	ax, 1

loc_124E3:				; CODE XREF: game_messenger_travel+148  j		 /* DOS offset ---> 9BA:3 */
add	ax, dx
shl	ax, 1
shl	ax, 1
shl	ax, 1
shl	ax, 1
dec	ax
dec	ax
sub	ax, [bp+0Ch]

loc_124F2:				; CODE XREF: dseg:22512  j		 /* DOS offset ---> 9BB:2 */
mov	cs:word_11FB6, ax
mov	di, [bp+0Eh]

loc_124F9:				; CODE XREF: game_messenger_travel+15E  j		 /* DOS offset ---> 9BB:9 */
; game_messenger_travel+162  j
mov	cs:word_11FBE, 9
mov	ax, [bp+0Ah]
mov	cs:word_11FBC, ax
; START	OF FUNCTION CHUNK FOR s_1251A

loc_12507:				; CODE XREF: s_1251A:loc_12636  j		 /* DOS offset ---> 9BC:7 */
mov	cx, [bp+arg_4]
mov	si, cs:word_11FB6

loc_1250F:				; CODE XREF: s_1251A-FEEE  j		 /* DOS offset ---> 9BC:F */
xor	bx, bx

loc_12511:				; CODE XREF: s_1251A-FEF8  j dseg:224F0  j ...		 /* DOS offset ---> 9BD:1 */
call	word ptr cs:[bx+1F9Eh]

loc_12516:				; CODE XREF: Q_1E45B+73  P		 /* DOS offset ---> 9BD:6 */
dec	cs:word_11FBE
jnz	short loc_12525
mov	cs:word_11FBE, 8
inc	di

loc_12525:				; CODE XREF: s_1251A-FFFF  j		 /* DOS offset ---> 9BE:5 */
shl	byte ptr [di], 1
push	bx
mov	bx, si
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx

loc_12565:				; CODE XREF: dseg:2255C  j		 /* DOS offset ---> 9C2:5 */
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1

loc_1256D:				; CODE XREF: dseg:224C9  j dseg:2255A  j ...		 /* DOS offset ---> 9C2:D */
mov	es:[bx], ax
dec	bx
dec	bx

loc_12572:				; CODE XREF: s_1251A+4F  j dseg:22855  p		 /* DOS offset ---> 9C3:2 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]

loc_12581:				; CODE XREF: s_1251A+58  j		 /* DOS offset ---> 9C4:1 */
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1

loc_1258F:		 /* DOS offset ---> 9C4:F */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_12596:				; CODE XREF: s_1251A+1E  j s_1251A+3A  j ...		 /* DOS offset ---> 9C5:6 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1

loc_1259D:				; CODE XREF: s_1F482+8D  P dseg:1F609  P ...		 /* DOS offset ---> 9C5:D */
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1

loc_125B3:				; CODE XREF: dseg:2258B  j dseg:2259E  j		 /* DOS offset ---> 9C7:3 */
rcl	al, 1

loc_125B5:				; CODE XREF: dseg:225B1  j		 /* DOS offset ---> 9C7:5 */
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1

loc_125D7:		 /* DOS offset ---> 9C9:7 */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1

loc_125E3:				; CODE XREF: s_1259E:loc_225B8  j		 /* DOS offset ---> 9CA:3 */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1

loc_125F1:				; CODE XREF: dseg:1F2EA  P dseg:1F3CC  P		 /* DOS offset ---> 9CB:1 */
mov	es:[bx], ax
dec	bx
dec	bx

loc_125F6:				; CODE XREF: dseg:225EA  j		 /* DOS offset ---> 9CB:6 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_12602:				; CODE XREF: dseg:225DC  j dseg:225F0  j ...		 /* DOS offset ---> 9CC:2 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
pop	bx
inc	bx
inc	bx
cmp	bx, 6
jz	short loc_12625
jmp	loc_12511
;     ***************************************************************************

loc_12625:				; CODE XREF: s_1251A-FEFA  j		 /* DOS offset ---> 9CE:5 */
sub	si, 50h	; 'P'
dec	cl
jz	short loc_1262F
jmp	loc_1250F
;     ***************************************************************************

loc_1262F:				; CODE XREF: s_1251A-FEF0  j		 /* DOS offset ---> 9CE:F */
dec	cs:word_11FBC
jz	short loc_12639

loc_12636:				; CODE XREF: dseg:22632  j		 /* DOS offset ---> 9CF:6 */
jmp	loc_12507
;     ***************************************************************************

loc_12639:				; CODE XREF: s_1251A-FEE6  j s_125F2+B0  j		 /* DOS offset ---> 9CF:9 */
xor	ax, ax
pop	si
pop	di
pop	es
pop	bp
retf
; END OF FUNCTION CHUNK	FOR s_1251A
;     ***************************************************************************

loc_12640:				; DATA XREF: dseg:off_124BA  o		 /* DOS offset ---> 9D0:0 */
mov	di, [bp+0Eh]
mov	cs:word_11FBE, 9
mov	ax, [bp+0Ah]
mov	cs:word_11FBC, ax
; START	OF FUNCTION CHUNK FOR s_125F2

loc_12651:				; CODE XREF: s_125F2-FE6D  j		 /* DOS offset ---> 9D1:1 */
mov	ax, 0B800h
mov	es, ax
mov	dx, [bp+arg_2]
add	dx, [bp+arg_4]
mov	cx, [bp+arg_4]

loc_1265F:				; CODE XREF: s_125F2:loc_1277B  j		 /* DOS offset ---> 9D1:F */
mov	bx, 4Eh	; 'N'
sub	bx, [bp+arg_8]
dec	dx
push	di
nop
push	cs
call	loc_10F59
mov	bx, di
pop	di
xor	ah, ah
mov	al, 3

loc_12673:				; CODE XREF: s_125F2-FF6C  j		 /* DOS offset ---> 9D3:3 */
dec	cs:word_11FBE
jnz	short loc_12682
mov	cs:word_11FBE, 8
inc	di

loc_12682:				; CODE XREF: s_125F2-FF7A  j		 /* DOS offset ---> 9D4:2 */
shl	byte ptr [di], 1
dec	al
jnz	short loc_12673
mov	ax, es:[bx]
rcl	ah, 1

loc_1268D:		 /* DOS offset ---> 9D4:D */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_12694:		 /* DOS offset ---> 9D5:4 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1		; CODE XREF: dseg:22645  j dseg:22666  j
mov	es:[bx], ax
dec	bx
dec	bx

loc_126A0:				; CODE XREF: dseg:227C7  p		 /* DOS offset ---> 9D6:0 */
mov	ax, es:[bx]

loc_126A3:		 /* DOS offset ---> 9D6:3 */
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1

loc_126B1:				; CODE XREF: dseg:226AA  j		 /* DOS offset ---> 9D7:1 */
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_126B8:				; CODE XREF: dseg:226B5  j dseg:22769  j		 /* DOS offset ---> 9D7:8 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1

loc_126CB:				; CODE XREF: s_125F2+BD  j		 /* DOS offset ---> 9D8:B */
mov	es:[bx], ax
dec	bx
dec	bx

loc_126D0:				; CODE XREF: s_125F2+D8  j		 /* DOS offset ---> 9D9:0 */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
; END OF FUNCTION CHUNK	FOR s_125F2
;     ***************************************************************************
db  26h	; &
db  8Bh	;   *
db    7
db 0D0h	;   *
db 0D4h	;   *
db 0D0h	;   *
db 0D0h	;   *
db  26h	; &
db  89h	;   *
db    7
db  4Bh	; K
db  4Bh	; K
db  26h	; &
db  8Bh	;   *
db    7
db 0D0h	;   *
db 0D4h	;   *
db 0D0h	;   *
db 0D0h	;   *
db  26h	; &
db  89h	;   *
db    7
db  4Bh	; K
db  4Bh	; K
db  26h	; &
db  8Bh	;   *
unk_1270E	db    7			; CODE XREF: s_125F2+102  j s_125F2+111  j
db 0D0h	;   *
db 0D4h	;   *
db 0D0h	;   *
db 0D0h	;   *
db  26h	; &
db  89h	;   *
db    7
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR s_125F2

loc_12716:				; CODE XREF: s_125F2+119  j		 /* DOS offset ---> 9DD:6 */
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1

loc_1271D:				; CODE XREF: dseg:22713  j		 /* DOS offset ---> 9DD:D */
rcl	al, 1
mov	es:[bx], ax
dec	bx

loc_12723:				; CODE XREF: dseg:22710  j dseg:2271A  j		 /* DOS offset ---> 9DE:3 */
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_1273C:				; CODE XREF: Q_1E45B+85  P		 /* DOS offset ---> 9DF:C */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]

loc_1274B:				; CODE XREF: dseg:22735  j		 /* DOS offset ---> 9E0:B */
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax

loc_1275E:				; CODE XREF: dseg:2274F  j		 /* DOS offset ---> 9E1:E */
dec	bx
dec	bx
mov	ax, es:[bx]

loc_12763:				; CODE XREF: dseg:2270D  j dseg:22716  j ...		 /* DOS offset ---> 9E2:3 */
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax
dec	bx
dec	bx

loc_1276C:				; CODE XREF: dseg:22767  j dseg:2273E  j		 /* DOS offset ---> 9E2:C */
mov	ax, es:[bx]
rcl	ah, 1
rcl	al, 1
mov	es:[bx], ax

loc_12776:				; CODE XREF: dseg:226B7  j dseg:2276C  j		 /* DOS offset ---> 9E3:6 */
dec	bx
dec	bx
dec	cx
jz	short loc_1277E

loc_1277B:				; CODE XREF: dseg:2289C  p		 /* DOS offset ---> 9E3:B */
jmp	loc_1265F
;     ***************************************************************************

loc_1277E:				; CODE XREF: s_125F2-FE79  j		 /* DOS offset ---> 9E3:E */
dec	cs:word_11FBC
jz	short loc_12788
jmp	loc_12651
;     ***************************************************************************

loc_12788:				; CODE XREF: s_125F2-FE6F  j		 /* DOS offset ---> 9E4:8 */
xor	ax, ax

loc_1278A:				; CODE XREF: dseg:228B3  p		 /* DOS offset ---> 9E4:A */
pop	si
pop	di
pop	es
pop	bp
retf
; END OF FUNCTION CHUNK	FOR s_125F2
;     ***************************************************************************

loc_1278F:				; DATA XREF: dseg:loc_127A5  r		 /* DOS offset ---> 9E4:F */
stosb
daa
sbb	bp, [bx+si]
push	bp
mov	bp, sp
push	es
push	ds
push	si
push	di

loc_1279A:				; CODE XREF: dseg:2280D  j		 /* DOS offset ---> 9E5:A */
mov	bl, byte ptr word_1CEA2

loc_1279E:				; CODE XREF: s_1273E+38  j s_1273E+46  j		 /* DOS offset ---> 9E5:E */
and	bl, 1
xor	bh, bh
shl	bx, 1

loc_127A5:		 /* DOS offset ---> 9E6:5 */
jmp	word ptr cs:loc_1278F[bx]
;     ***************************************************************************

loc_127AA:				; CODE XREF: dseg:227EF  j		 /* DOS offset ---> 9E6:A */
mov	ax, 0A000h
mov	es, ax
mov	ax, [bp+6]
mov	cs:word_11FB6, ax
mov	cs:word_11FBC, 50h ; 'P'

loc_127BD:				; CODE XREF: dseg:2813  j		 /* DOS offset ---> 9E7:D */
mov	di, 2BC0h
mov	ax, cs:word_11FB6
mov	cs:word_11FB8, ax
xor	bx, bx
mov	dx, 10h

loc_127CD:				; CODE XREF: dseg:27F7  j dseg:2806  j		 /* DOS offset ---> 9E8:D */
push	di
mov	si, di
inc	si
push	ds

loc_127D2:				; CODE XREF: dseg:227B8  j dseg:227C1  j		 /* DOS offset ---> 9E9:2 */
mov	ax, 0A000h
mov	ds, ax
call	word ptr cs:[bx+1F9Eh]
inc	bx
inc	bx
mov	cx, 4Fh	; 'O'
rep movsb
pop	ds

loc_127E4:				; CODE XREF: dseg:227CF  j		 /* DOS offset ---> 9EA:4 */
xchg	bx, cs:word_11FB8
mov	al, [bx]

loc_127EB:				; CODE XREF: s_127A6+41  j		 /* DOS offset ---> 9EA:B */
xchg	bx, cs:word_11FB8

loc_127F0:				; CODE XREF: dseg:227D1  j dseg:227E2  j		 /* DOS offset ---> 9EB:0 */
mov	es:[di], al
pop	di
cmp	bx, 6
jnz	short loc_127CD

loc_127F9:				; CODE XREF: dseg:227F6  j		 /* DOS offset ---> 9EB:9 */
add	cs:word_11FB8, 0F0h ; '  *'
add	di, 50h	; 'P'

loc_12803:				; CODE XREF: s_1FC0E-FF3E  P dseg:1C3B8  P		 /* DOS offset ---> 9EC:3 */
xor	bx, bx
dec	dx
jnz	short loc_127CD
add	cs:word_11FB6, 3

loc_1280E:				; CODE XREF: dseg:22802  j		 /* DOS offset ---> 9EC:E */
dec	cs:word_11FBC
jnz	short loc_127BD
pop	di
pop	si
pop	ds

loc_12818:				; CODE XREF: dseg:2279A  j dseg:2280F  j		 /* DOS offset ---> 9ED:8 */
pop	es
pop	bp
retf
;     ***************************************************************************
mov	bx, [bp+6]
mov	cs:word_11FB6, bx

loc_12823:				; CODE XREF: unkfunc_12804+8  j		 /* DOS offset ---> 9EE:3 */
; unkfunc_12804+1D  j
mov	cs:word_11FBC, 50h ; 'P'

loc_1282A:				; CODE XREF: dseg:2877  j		 /* DOS offset ---> 9EE:A */
mov	di, 15E0h
mov	dx, 10h
mov	bx, cs:word_11FB6

loc_12835:				; CODE XREF: dseg:286A  j		 /* DOS offset ---> 9EF:5 */
push	ds
mov	al, [bx]

loc_12838:				; CODE XREF: unkfunc_12804+31  j		 /* DOS offset ---> 9EF:8 */
mov	byte ptr cs:loc_11FC4, al
mov	ax, 0B800h
mov	es, ax

loc_12841:				; CODE XREF: dseg:22889  j		 /* DOS offset ---> 9F0:1 */
mov	ds, ax
mov	si, di
inc	si
mov	cx, 4Fh	; 'O'

loc_12849:				; CODE XREF: dseg:22880  j		 /* DOS offset ---> 9F0:9 */
rep movsb
mov	al, byte ptr cs:loc_11FC4
mov	[si-1],	al
pop	ds
add	bx, 0F0h ; '  *'
inc	di

loc_12858:				; CODE XREF: dseg:1E25E  P		 /* DOS offset ---> 9F1:8 */
cmp	di, 2000h
jnb	short loc_12865
add	di, 4000h
sub	di, 50h	; 'P'

loc_12865:				; CODE XREF: dseg:285C  j		 /* DOS offset ---> 9F2:5 */
sub	di, 2000h
dec	dx
jnz	short loc_12835

loc_1286C:				; CODE XREF: dseg:2285D  j		 /* DOS offset ---> 9F2:C */
add	cs:word_11FB6, 3

loc_12872:				; CODE XREF: s_12858+14  j		 /* DOS offset ---> 9F3:2 */
dec	cs:word_11FBC
jnz	short loc_1282A
pop	di
pop	si
pop	ds
pop	es
pop	bp
retf
;     ***************************************************************************
off_1287F	dw offset loc_1289A	; DATA XREF: dseg:2895  r
dw offset loc_1293C
;     ***************************************************************************
push	bp
mov	bp, sp
push	es
push	ds
push	di
push	si
mov	bl, byte ptr word_1CEA2
and	bl, 1
xor	bh, bh
shl	bx, 1
jmp	cs:off_1287F[bx]
;     ***************************************************************************

loc_1289A:				; DATA XREF: dseg:off_1287F  o		 /* DOS offset ---> 9F5:A */
mov	ax, [bp+8]
add	ax, [bp+0Ch]
mov	dx, ax
shl	ax, 1
shl	ax, 1
add	ax, dx
shl	ax, 1

loc_128AA:				; CODE XREF: dseg:228A4  j		 /* DOS offset ---> 9F6:A */
shl	ax, 1
shl	ax, 1
shl	ax, 1
add	ax, [bp+6]
sub	ax, 0A0h ; '  *'
mov	cs:word_11FB6, ax
mov	ax, [bp+10h]
mov	cs:word_11FBA, ax

loc_128C1:				; CODE XREF: s_128A4+7  j dseg:228B0  j ...		 /* DOS offset ---> 9F8:1 */
mov	ax, [bp+0Eh]

loc_128C4:				; CODE XREF: dseg:228BF  j		 /* DOS offset ---> 9F8:4 */
mov	cs:word_11FBC, ax

loc_128C8:				; CODE XREF: dseg:2934  j		 /* DOS offset ---> 9F8:8 */
mov	bx, cs:word_11FB6
mov	ax, [bp+0Ch]
push	ds
mov	dx, 0A000h
mov	es, dx

loc_128D6:				; CODE XREF: dseg:1164F  P dseg:11755  P ...		 /* DOS offset ---> 9F9:6 */
mov	ds, dx

loc_128D8:				; CODE XREF: dseg:2901  j		 /* DOS offset ---> 9F9:8 */
xor	dx, dx

loc_128DA:				; CODE XREF: dseg:28F9  j		 /* DOS offset ---> 9F9:A */
mov	cx, [bp+0Ah]
shr	cx, 1
mov	si, bx
mov	di, si
add	di, 50h	; 'P'
xchg	dx, bx
push	bx
shl	bx, 1

loc_128EB:				; CODE XREF: dseg:108AA  P dseg:10A45  P ...		 /* DOS offset ---> 9FA:B */
call	word ptr cs:[bx+1F9Eh]
pop	bx
xchg	dx, bx
rep movsw
inc	dx
cmp	dx, 3
jnz	short loc_128DA

loc_128FB:				; CODE XREF: dseg:2291A  j		 /* DOS offset ---> 9FB:B */
dec	ax
jz	short loc_12903
sub	bx, 50h	; 'P'
jmp	short loc_128D8
;     ***************************************************************************

loc_12903:				; CODE XREF: dseg:28FC  j		 /* DOS offset ---> 9FC:3 */
add	bx, 50h	; 'P'
pop	ds
xor	dx, dx

loc_12909:				; CODE XREF: dseg:loc_1292D  j		 /* DOS offset ---> 9FC:9 */
mov	cx, [bp+0Ah]
shr	cx, 1

loc_1290E:				; CODE XREF: game_advice_advisor_output+270  P		 /* DOS offset ---> 9FC:E */
; game_advice_advisor_output+29C  P ...
mov	si, cs:word_11FBA

loc_12913:				; CODE XREF: dseg:2290A  j		 /* DOS offset ---> 9FD:3 */
mov	di, bx
xchg	dx, bx
push	bx
shl	bx, 1
call	word ptr cs:[bx+1F9Eh]
pop	bx
xchg	dx, bx

loc_12922:				; CODE XREF: dseg:22911  j		 /* DOS offset ---> 9FE:2 */
rep movsw
mov	cs:word_11FBA, si
inc	dx
cmp	dx, 3

loc_1292D:		 /* DOS offset ---> 9FE:D */
jnz	short loc_12909

loc_1292F:				; CODE XREF: dseg:229C3  p		 /* DOS offset ---> 9FE:F */
dec	cs:word_11FBC
jnz	short loc_128C8
pop	si
pop	di
pop	ds
pop	es
pop	bp
retf
;     ***************************************************************************

loc_1293C:				; DATA XREF: dseg:2881  o		 /* DOS offset ---> 9FF:C */
mov	ax, [bp+10h]
mov	cs:word_11FBA, ax
mov	ax, [bp+0Eh]
; START	OF FUNCTION CHUNK FOR game_data_get_generals_actions

loc_12946:				; CODE XREF: game_data_get_generals_actions+32  j		 /* DOS offset ---> A00:6 */
mov	cs:word_11FBC, ax
mov	ax, 0B800h
mov	es, ax
mov	dx, [bp+arg_2]
add	dx, [bp+arg_6]
dec	dx

loc_12956:				; CODE XREF: game_data_get_generals_actions+23  j		 /* DOS offset ---> A01:6 */
dec	dx

loc_12957:				; CODE XREF: dseg:2298F  p		 /* DOS offset ---> A01:7 */
mov	bx, [bp+arg_0]

loc_1295A:				; CODE XREF: dseg:29AE  j		 /* DOS offset ---> A01:A */
push	dx
push	ds
mov	ax, 0B800h
mov	ds, ax
; END OF FUNCTION CHUNK	FOR game_data_get_generals_actions
;     ***************************************************************************
db  8Bh	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_data_get_generals_actions

loc_12962:				; CODE XREF: game_data_get_generals_actions+16  j		 /* DOS offset ---> A02:2 */
inc	si
or	al, 48h
mov	cx, [bp+arg_4]
nop
push	cs

loc_1296A:				; CODE XREF: dseg:20362  P dseg:203CF  P		 /* DOS offset ---> A02:A */
; DATA XREF: ...
call	loc_10F59
; END OF FUNCTION CHUNK	FOR game_data_get_generals_actions
;     ***************************************************************************
db  8Bh	;   *
db 0F7h	;   *
db  42h	; B
db  90h	;   *
db  0Eh
db 0E8h	;   *
db 0E4h	;   *
db 0E5h	;   *
db  4Ah	; J
db 0F3h	;   *
db 0A5h	;   *
db  4Ah	; J
db  48h	; H
db  75h	; u
db 0E9h	;   *
db 0B4h	;   *
db    3
db  1Fh
;     ***************************************************************************

loc_1297F:				; CODE XREF: dseg:29A6  j		 /* DOS offset ---> A03:F */
mov	si, cs:word_11FBA
mov	cx, [bp+0Ah]
inc	dx
nop
push	cs

loc_1298A:				; CODE XREF: game_data_get_ruler_or_advisor_intellect+A  j		 /* DOS offset ---> A04:A */
call	loc_10F59
dec	dx

loc_1298E:				; CODE XREF: dseg:299A  j		 /* DOS offset ---> A04:E */
mov	al, [si]
cmp	ah, 1

loc_12993:				; CODE XREF: dseg:1D4B3  P		 /* DOS offset ---> A05:3 */
jnz	short loc_12998
;     ***************************************************************************
db  26h	; &
db  88h	;   *
db    5
;     ***************************************************************************

loc_12998:				; CODE XREF: dseg:loc_12993  j		 /* DOS offset ---> A05:8 */
inc	si
inc	di
loop	loc_1298E
mov	cx, [bp+0Ah]
add	cs:word_11FBA, cx

loc_129A4:				; CODE XREF: dseg:22981  j dseg:22994  j		 /* DOS offset ---> A06:4 */
dec	ah
jnz	short loc_1297F
pop	dx
dec	cs:word_11FBC
jnz	short loc_1295A

loc_129B0:				; CODE XREF: dseg:229A9  j		 /* DOS offset ---> A07:0 */
pop	si
pop	di
pop	ds
pop	es

loc_129B4:				; CODE XREF: dseg:22BDA  p dseg:22CBA  p		 /* DOS offset ---> A07:4 */
pop	bp
;     ***************************************************************************
db 0CBh	;   *
db 0D5h	;   *
db  29h	; )
db  71h	; q
db  2Ah	; *
db  8Ch	;   *
db  1Eh
db  20h
db  34h	; 4
db  55h	; U
db  8Bh	;   *
db 0ECh	;   *
db    6
db  1Eh
db  57h	; W
db  56h	; V
db  8Ah	;   *
db  1Eh
db 0A2h	;   *
db 0CEh	;   *
db  80h	;   *
db 0E3h	;   *
db    1
db  32h	; 2
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db  2Eh	; .
db 0FFh
db 0A7h	;   *
db 0B6h	;   *
db  29h	; )
;     ***************************************************************************
mov	ax, [bp+8]
inc	ax
mov	dx, ax
shl	ax, 1
shl	ax, 1
add	ax, dx
shl	ax, 1

loc_129E3:		 /* DOS offset ---> A0A:3 */
shl	ax, 1
shl	ax, 1
shl	ax, 1
add	ax, [bp+6]
mov	bx, ax
mov	ax, [bp+12h]
mov	cs:word_11FBA, ax
mov	ax, [bp+0Eh]
mov	cs:word_11FBC, ax
call	word ptr cs:loc_11FA0
mov	ax, 0A000h
mov	es, ax

loc_12A06:				; CODE XREF: dseg:2A69  j		 /* DOS offset ---> A0C:6 */
push	bx
;     ***************************************************************************
db 0B8h	;   *
db    0
db 0A0h	;   *
db  8Eh	;   *
db 0D8h	;   *
db  8Bh	;   *
db  46h	; F
db  0Ch
;     ***************************************************************************

loc_12A0F:				; CODE XREF: dseg:2A25  j		 /* DOS offset ---> A0C:F */
mov	cx, [bp+0Ah]
shr	cx, 1
mov	si, bx

loc_12A16:				; CODE XREF: dseg:229CB  j dseg:22A0D  j		 /* DOS offset ---> A0D:6 */
mov	di, si
sub	di, 50h	; 'P'
push	ax

loc_12A1C:				; CODE XREF: dseg:2A1E  j dseg:22CCF  p		 /* DOS offset ---> A0D:C */
lodsw
stosw
loop	loc_12A1C
pop	ax
add	bx, 50h	; 'P'
dec	ax
jnz	short loc_12A0F
sub	bx, 0A0h ; '  *'
mov	cx, [bp+0Ah]

loc_12A2E:				; CODE XREF: dseg:1D489  P		 /* DOS offset ---> A0E:E */
shr	cx, 1
;     ***************************************************************************
db  8Eh	;   *
db  5Eh	; ^
db  10h
db  2Eh	; .
db  8Bh	;   *
db  36h	; 6
db 0BAh	;   *
db  1Fh
db  8Bh	;   *
db 0FBh	;   *
db  50h	; P
;     ***************************************************************************

loc_12A3B:				; CODE XREF: dseg:2A3D  j dseg:22A36  j ...		 /* DOS offset ---> A0F:B */
lodsw
stosw
loop	loc_12A3B
mov	dx, 2
mov	ds, word ptr loc_13420
push	dx
call	far ptr	57Ch:0AAh ; call 06CD:0194 -> OPEN.EXE
; dseg:4E60
; Init_Wait_Cycle
pop	dx
mov	ds, word ptr [bp+10h]
cmp	ax, 0
jz	short loc_12A5D
pop	ax
pop	bx
mov	ax, 0FFFFh
jmp	short loc_12A6B
;     ***************************************************************************
nop

loc_12A5D:				; CODE XREF: dseg:2A53  j		 /* DOS offset ---> A11:D */
pop	ax
mov	cs:word_11FBA, si

loc_12A63:				; CODE XREF: dseg:22A5E  j		 /* DOS offset ---> A12:3 */
dec	cs:word_11FBC
pop	bx
jnz	short loc_12A06

loc_12A6B:				; CODE XREF: dseg:2A5A  j		 /* DOS offset ---> A12:B */
pop	si
pop	di
pop	ds
pop	es
pop	bp
retf
;     ***************************************************************************
mov	bx, [bp+6]
mov	dx, [bp+8]
inc	dx

loc_12A78:				; CODE XREF: dseg:22A75  j		 /* DOS offset ---> A13:8 */
mov	cs:word_11FBA, 0
mov	ax, [bp+0Eh]
mov	cs:word_11FBC, ax
mov	ax, 0B800h
mov	es, ax

loc_12A8B:				; CODE XREF: dseg:2AEB  j		 /* DOS offset ---> A14:B */
push	dx
mov	ax, 0B800h
mov	ds, ax
mov	ax, [bp+0Ch]

loc_12A94:				; CODE XREF: dseg:22A8F  j		 /* DOS offset ---> A15:4 */
dec	ax

loc_12A95:				; CODE XREF: dseg:2AAC  j		 /* DOS offset ---> A15:5 */
mov	cx, [bp+0Ah]
shr	cx, 1
nop
push	cs
call	loc_10F59
mov	si, di
dec	dx
nop
push	cs
call	loc_10F59
inc	dx
rep movsw
inc	dx
dec	ax
jnz	short loc_12A95
mov	cx, [bp+0Ah]
shr	cx, 1
mov	ds, word ptr [bp+10h]
mov	si, cs:word_11FBA
dec	dx
nop
push	cs
call	loc_10F59
rep movsw
mov	cx, [bp+0Ah]
add	cs:word_11FBA, cx
push	bx
push	cx
mov	dx, offset byte_10001

loc_12AD0:				; CODE XREF: dseg:1D4D1  P		 /* DOS offset ---> A19:0 */
mov	ds, word ptr loc_13420
push	dx
call	far ptr	57Ch:0AAh
pop	dx
mov	ds, word ptr [bp+10h]
pop	cx
pop	bx
pop	dx
;     ***************************************************************************
db 3Dh
align 4
jnz	short loc_12AF3
;     ***************************************************************************
db 2Eh
unk_12AE7	db 0FFh			; CODE XREF: dseg:22ACE  j
db  0Eh
db 0BCh	;   *
db  1Fh
;     ***************************************************************************
jnz	short loc_12A8B
pop	si
pop	di
pop	ds
;     ***************************************************************************
byte_12AF0	db 7			; DATA XREF: game_start_new_game_clear_header+23  r
;     ***************************************************************************
pop	bp
retf
;     ***************************************************************************

loc_12AF3:				; CODE XREF: dseg:2AE4  j		 /* DOS offset ---> A1B:3 */
mov	ax, 0FFFFh
pop	si
pop	di
pop	ds
pop	es
pop	bp
retf
;     ***************************************************************************

loc_12AFC:				; DATA XREF: dseg:loc_12B11  r		 /* DOS offset ---> A1B:C */
push	ss
sub	bx, [bx+si+2Bh]
push	bp
mov	bp, sp
push	es
push	di
push	si
mov	bl, byte ptr word_1CEA2
and	bl, 1
xor	bh, bh
shl	bx, 1

loc_12B11:				; CODE XREF: dseg:22A60  j dseg:22A77  j ...		 /* DOS offset ---> A1D:1 */
jmp	word ptr cs:loc_12AFC[bx]
;     ***************************************************************************
call	word ptr cs:loc_11F9E
;     ***************************************************************************
byte_12B1B	db 0B8h			; DATA XREF: game_start_new_game_clear_header+B  r
db    0
db 0A0h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_spy_tiger_and_wolf_calc

loc_12B1E:				; CODE XREF: game_spy_tiger_and_wolf_calc+B  j		 /* DOS offset ---> A1D:E */
; game_spy_tiger_and_wolf_calc+14  j
mov	es, ax
mov	dl, 80h	; '  *'

loc_12B22:				; CODE XREF: dseg:2B51  j		 /* DOS offset ---> A1E:2 */
; game_spy_tiger_and_wolf_calc+4B  j ...
mov	bx, [bp+arg_2]
mov	si, 10h

loc_12B28:				; CODE XREF: dseg:22C77  p		 /* DOS offset ---> A1E:8 */
mov	di, 2BC0h
mov	dh, dl
; END OF FUNCTION CHUNK	FOR game_spy_tiger_and_wolf_calc
;     ***************************************************************************
byte_12B2D	db 0B9h			; CODE XREF: dseg:2B41  j
word_12B2E	dw 50h			; DATA XREF: game_personal_appoint_which_province_query-FFB1  r
; game_personal_appoint_which_province_query:loc_16071  w ...
;     ***************************************************************************

loc_12B30:				; CODE XREF: dseg:loc_12B36  j		 /* DOS offset ---> A1F:0 */
mov	al, dh
;     ***************************************************************************
byte_12B32	db 0AAh			; CODE XREF: dseg:22BA7  j
; DATA XREF: game_advice_doctor_check_sub+3  r
;     ***************************************************************************

loc_12B33:		 /* DOS offset ---> A1F:3 */
add	bx, 3

loc_12B36:				; CODE XREF: dseg:22B9E  j		 /* DOS offset ---> A1F:6 */
loop	loc_12B30
shr	dh, 1
or	dh, dh
jnz	short loc_12B40
mov	dh, 80h	; '  *'

loc_12B40:				; CODE XREF: dseg:2B3C  j		 /* DOS offset ---> A20:0 */
dec	si
jnz	short near ptr byte_12B2D
mov	cx, 0C350h

loc_12B46:				; CODE XREF: dseg:loc_12B46  j		 /* DOS offset ---> A20:6 */
loop	loc_12B46
mov	cx, 0C350h

loc_12B4B:				; CODE XREF: dseg:loc_12B4B  j		 /* DOS offset ---> A20:B */
loop	loc_12B4B
shr	dl, 1
or	dl, dl
jnz	short loc_12B22
pop	si
pop	di
pop	es
pop	bp
retf
;     ***************************************************************************
mov	ax, 0B800h
mov	es, ax
mov	dl, 80h	; '  *'

loc_12B5F:				; CODE XREF: dseg:2B9F  j		 /* DOS offset ---> A21:F */
mov	bx, [bp+6]
mov	si, 10h
mov	di, 15E0h
mov	dh, dl

loc_12B6A:				; CODE XREF: dseg:2B8F  j		 /* DOS offset ---> A22:A */
mov	cx, 50h	; 'P'

loc_12B6D:				; CODE XREF: dseg:2B73  j		 /* DOS offset ---> A22:D */
mov	al, dh
stosb
add	bx, 3
loop	loc_12B6D
shr	dh, 1
or	dh, dh
jnz	short loc_12B7D
mov	dh, 80h	; '  *'

loc_12B7D:				; CODE XREF: dseg:2B79  j		 /* DOS offset ---> A23:D */
cmp	di, 2000h
jnb	short loc_12B8A
add	di, 4000h
sub	di, 50h	; 'P'

loc_12B8A:				; CODE XREF: dseg:2B81  j		 /* DOS offset ---> A24:A */
sub	di, 2000h
dec	si
jnz	short loc_12B6A
mov	cx, 0C350h

loc_12B94:				; CODE XREF: dseg:loc_12B94  j		 /* DOS offset ---> A25:4 */
loop	loc_12B94

loc_12B96:				; CODE XREF: dseg:22B48  j dseg:22B8A  j ...		 /* DOS offset ---> A25:6 */
mov	cx, 0C350h

loc_12B99:				; CODE XREF: dseg:loc_12B99  j		 /* DOS offset ---> A25:9 */
loop	loc_12B99
shr	dl, 1
or	dl, dl
jnz	short loc_12B5F
pop	si
pop	di
pop	es
pop	bp
retf
;     ***************************************************************************
mov	bl, byte ptr word_1CEA2

loc_12BAA:		 /* DOS offset ---> A26:A */
and	bl, 1

loc_12BAD:				; CODE XREF: dseg:22CE8  p		 /* DOS offset ---> A26:D */
xor	bh, bh
shl	bx, 1
jz	short loc_12BB4
retf
;     ***************************************************************************

loc_12BB4:				; CODE XREF: dseg:2BB1  j		 /* DOS offset ---> A27:4 */
push	ds
push	es
push	si
push	di

loc_12BB8:				; CODE XREF: dseg:22C5F  j		 /* DOS offset ---> A27:8 */
mov	dx, 3CEh
mov	al, 4

loc_12BBD:				; CODE XREF: dseg:22C53  j		 /* DOS offset ---> A27:D */
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
inc	dx
mov	al, 2
out	dx, al		; EGA port: graphics controller	data register
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 1
out	dx, al		; EGA port: sequencer data register
xor	di, di
xor	si, si
mov	cx, 2000h
mov	ax, 0A000h
mov	ds, ax
mov	es, ax
rep movsw
mov	al, 2
out	dx, al		; EGA port: sequencer data register
xor	di, di

loc_12BE1:				; CODE XREF: dseg:22BCF  j		 /* DOS offset ---> A2A:1 */
xor	si, si
mov	cx, 2000h
mov	ax, 0A000h
mov	ds, ax
mov	es, ax
rep movsw
pop	di
pop	si
pop	es
pop	ds
retf
;     ***************************************************************************
off_12BF4	dw offset loc_12C0C	; DATA XREF: dseg:2C07  r
dw offset loc_12C6C
;     ***************************************************************************
push	bp
mov	bp, sp
push	es
mov	bl, byte ptr word_1CEA2
and	bl, 1
xor	bh, bh
shl	bx, 1
jmp	cs:off_12BF4[bx]
;     ***************************************************************************

loc_12C0C:				; DATA XREF: dseg:off_12BF4  o		 /* DOS offset ---> A2C:C */
mov	ax, [bp+8]
mov	dx, ax
shl	ax, 1

loc_12C13:		 /* DOS offset ---> A2D:3 */
shl	ax, 1
add	ax, dx
shl	ax, 1
shl	ax, 1

loc_12C1B:		 /* DOS offset ---> A2D:B */
shl	ax, 1
shl	ax, 1
mov	bx, ax
mov	ax, [bp+6]
mov	cl, 8
div	cl
mov	cl, ah
mov	dh, 80h	; '  *'
shr	dh, cl
xor	ah, ah
add	bx, ax
call	word ptr cs:loc_11F9E
mov	cx, 0A000h
mov	es, cx
mov	ax, [bp+0Ah]
test	ax, 1
jz	short loc_12C47
xor	es:[bx], dh

loc_12C47:				; CODE XREF: dseg:2C42  j dseg:22BE0  j ...		 /* DOS offset ---> A30:7 */
call	word ptr cs:loc_11FA0
mov	es, cx
shr	ax, 1
test	ax, 1
jz	short loc_12C58

loc_12C55:				; CODE XREF: dseg:22C51  j		 /* DOS offset ---> A31:5 */
xor	es:[bx], dh

loc_12C58:				; CODE XREF: dseg:2C53  j		 /* DOS offset ---> A31:8 */
call	word ptr cs:loc_11FA2
mov	es, cx
shr	ax, 1

loc_12C61:				; CODE XREF: dseg:22C5D  j		 /* DOS offset ---> A32:1 */
test	ax, 1
jz	short loc_12C69

loc_12C66:				; CODE XREF: dseg:23330  p		 /* DOS offset ---> A32:6 */
xor	es:[bx], dh

loc_12C69:				; CODE XREF: dseg:2C64  j		 /* DOS offset ---> A32:9 */
pop	es
pop	bp
retf
;     ***************************************************************************

loc_12C6C:				; DATA XREF: dseg:2BF6  o		 /* DOS offset ---> A32:C */
mov	ax, [bp+6]
shr	ax, 1
shr	ax, 1
shr	ax, 1
shr	ax, 1
mov	cl, ah
mov	ch, 80h	; '  *'
shr	ch, cl
xor	ah, ah

loc_12C7F:				; CODE XREF: dseg:22C74  j		 /* DOS offset ---> A33:F */
mov	bx, ax
mov	dx, [bp+8]

loc_12C84:				; CODE XREF: dseg:22CE5  j		 /* DOS offset ---> A34:4 */
nop
push	cs
call	loc_10F59
mov	bx, di
mov	ax, 0B800h
mov	es, ax
mov	ax, [bp+0Ah]
test	ax, 7
jz	short loc_12C9B
xor	es:[bx], ch

loc_12C9B:				; CODE XREF: dseg:2C96  j		 /* DOS offset ---> A35:B */
pop	es

loc_12C9C:				; CODE XREF: dseg:22CDC  j		 /* DOS offset ---> A35:C */
pop	bp
retf
;     ***************************************************************************

loc_12C9E:				; CODE XREF: dseg:2E0A  p		 /* DOS offset ---> A35:E */
push	di
;     ***************************************************************************
db 0B0h	;   *
db 0FDh	;   *
db  26h	; &
db  88h	;   *
db    5
db  26h	; &
db 0C7h	;   *
db  45h	; E
db    1
db 0FFh
db 0FFh
db  83h	;   *
db 0C7h	;   *
unk_12CAC	db    3			; CODE XREF: game_diplomacy_joint_invasion_calc+18  j
db 0B9h	;   *
db 0FDh	;   *
db    1
db  32h	; 2
db 0C0h	;   *
;     ***************************************************************************

loc_12CB2:				; CODE XREF: dseg:1D6E1  P		 /* DOS offset ---> A37:2 */
rep stosb
;     ***************************************************************************
db  5Fh	; _
db  8Bh	;   *
db 0DFh	;   *
db 0B0h	;   *
db    1
db 0B5h	;   *
db    0
db 0B1h	;   *
db    2
db  8Bh	;   *
db  56h	; V
db    6
db 0B6h	;   *
db    0
;     ***************************************************************************

loc_12CC2:				; CODE XREF: dseg:22CB0  j		 /* DOS offset ---> A38:2 */
mov	ah, 3
int	13h		; DISK - WRITE SECTORS FROM MEMORY
; AL = number of sectors to write, CH =	track, CL = sector
; DH = head, DL	= drive, ES:BX -> buffer
; Return: CF set on error, AH =	status,	AL = number of sectors written
jb	short loc_12CF6
add	cl, 2
mov	al, 1
mov	ah, 3
int	13h		; DISK - WRITE SECTORS FROM MEMORY
; AL = number of sectors to write, CH =	track, CL = sector
; DH = head, DL	= drive, ES:BX -> buffer
; Return: CF set on error, AH =	status,	AL = number of sectors written

loc_12CD1:				; CODE XREF: dseg:1F66A  P dseg:1F75B  P		 /* DOS offset ---> A39:1 */
jb	short loc_12CF6

loc_12CD3:				; CODE XREF: dseg:22CA9  j dseg:22CC0  j		 /* DOS offset ---> A39:3 */
mov	byte ptr es:[di], 0
mov	word ptr es:[di+1], 0
mov	cl, 3

loc_12CDF:		 /* DOS offset ---> A39:F */
mov	al, 1
mov	ah, 3
int	13h		; DISK - WRITE SECTORS FROM MEMORY
; AL = number of sectors to write, CH =	track, CL = sector
; DH = head, DL	= drive, ES:BX -> buffer
; Return: CF set on error, AH =	status,	AL = number of sectors written

loc_12CE5:				; CODE XREF: game_diplomacy_joint_invasion_precalc_2+C  j		 /* DOS offset ---> A3A:5 */
jb	short loc_12CF6
add	cl, 2
mov	al, 1
mov	ah, 3
int	13h		; DISK - WRITE SECTORS FROM MEMORY
; AL = number of sectors to write, CH =	track, CL = sector
; DH = head, DL	= drive, ES:BX -> buffer
; Return: CF set on error, AH =	status,	AL = number of sectors written
jb	short loc_12CF6
xor	ax, ax
jmp	short locret_12CF9
;     ***************************************************************************

loc_12CF6:				; CODE XREF: dseg:2CC6  j		 /* DOS offset ---> A3B:6 */
; dseg:loc_12CD1  j ...
mov	ax, 1

locret_12CF9:				; CODE XREF: dseg:2CF4  j
retn
;     ***************************************************************************

loc_12CFA:				; CODE XREF: dseg:2E11  p		 /* DOS offset ---> A3B:A */
push	di
;     ***************************************************************************
db 0B9h	;   *
unk_12CFC	db    0			; CODE XREF: dseg:1D366  P
db    2
db 0B0h	;   *
db 0E5h	;   *
db 0F3h	;   *
db 0AAh	;   *
db  5Fh	; _
db 0B9h	;   *
db  10h
db    0
db  33h	; 3
db 0DBh	;   *
db  32h	; 2
db 0C0h	;   *
;     ***************************************************************************

loc_12D0A:				; CODE XREF: dseg:2D10  j		 /* DOS offset ---> A3C:A */
mov	es:[bx+di], al
add	bx, 20h	; ' '
loop	loc_12D0A
mov	bx, di
mov	ch, 0
mov	cl, 6
mov	dx, [bp+6]
mov	dh, 0

loc_12D1D:				; CODE XREF: dseg:2D2A  j		 /* DOS offset ---> A3D:D */
mov	al, 1
mov	ah, 3
int	13h		; DISK - WRITE SECTORS FROM MEMORY
; AL = number of sectors to write, CH =	track, CL = sector
; DH = head, DL	= drive, ES:BX -> buffer
; Return: CF set on error, AH =	status,	AL = number of sectors written
jb	short loc_12D48
inc	cl
cmp	cl, 0Ah
jb	short loc_12D1D
mov	ch, 0
mov	cl, 1
mov	dx, [bp+6]
mov	dh, 1

loc_12D35:				; CODE XREF: dseg:2D42  j		 /* DOS offset ---> A3F:5 */
mov	al, 1
mov	ah, 3
int	13h		; DISK - WRITE SECTORS FROM MEMORY
; AL = number of sectors to write, CH =	track, CL = sector
; DH = head, DL	= drive, ES:BX -> buffer
; Return: CF set on error, AH =	status,	AL = number of sectors written
jb	short loc_12D48
inc	cl
cmp	cl, 4
jb	short loc_12D35
xor	ax, ax
jmp	short locret_12D4B
;     ***************************************************************************

loc_12D48:				; CODE XREF: dseg:2D23  j dseg:2D3B  j		 /* DOS offset ---> A40:8 */
mov	ax, 1

locret_12D4B:				; CODE XREF: dseg:2D46  j
retn
;     ***************************************************************************

loc_12D4C:				; CODE XREF: dseg:22D94  p dseg:22DAE  p		 /* DOS offset ---> A40:C */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  56h	; V
db  57h	; W
db 0B8h	;   *
db  1Eh
db  35h	; 5
db 0CDh	;   *
db  21h	; !
db  26h	; &
db  8Ah	;   *
db  47h	; G
db    3
db 0A2h	;   *
db  22h	; "
db  34h	; 4
db  26h	; &
db  8Ah	;   *
db  47h	; G
db    4
db 0A2h	;   *
db  23h	; #
db  34h	; 4
db  26h	; &
db  8Ah	;   *
db  47h	; G
db    5
db 0A2h	;   *
db  24h	; $
db  34h	; 4
db  26h	; &
db  8Ah	;   *
db  47h	; G
db    7
db 0A2h	;   *
db  25h	; %
db  34h	; 4
db  26h	; &
db 0C6h	;   *
db  47h	; G
db    3
unk_12D76	db    2			; CODE XREF: dseg:22E14  p dseg:22E52  p
db  26h	; &
db 0C6h	;   *
db  47h	; G
db    4
db    9
db  26h	; &
db 0C6h	;   *
db  47h	; G
db    5
db  2Ah	; *
db  26h	; &
db 0C6h	;   *
db  47h	; G
db    7
db  50h	; P
;     ***************************************************************************
sub	sp, 200h
;     ***************************************************************************
db  8Bh	;   *
db  56h	; V
db    6
db 0B4h	;   *
db  15h
db 0CDh	;   *
db  13h
db  72h	; r
db  2Dh	; -
db  80h	;   *
db 0FCh	;   *
db    1
db  72h	; r
db  2Dh	; -
db  80h	;   *
db 0FCh	;   *
unk_12D9A	db    2			; CODE XREF: unkfunc_12D86+1D  j
db  77h	; w
db  28h	; (
db  88h	;   *
db  26h	; &
db  27h	; '
db  34h	; 4
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR unkfunc_12D86

loc_12DA1:				; CODE XREF: unkfunc_12D86-FFCA  j		 /* DOS offset ---> A46:1 */
dec	byte ptr loc_13426

loc_12DA5:				; CODE XREF: unkfunc_12D86+12  j		 /* DOS offset ---> A46:5 */
cmp	byte ptr loc_13426, 0
jz	short loc_12DC5

loc_12DAC:				; CODE XREF: dseg:1FD8B  P		 /* DOS offset ---> A46:C */
mov	ah, 0
int	13h		; DISK - RESET DISK SYSTEM
; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
jb	short loc_12DC5
mov	dx, [bp+arg_0]
mov	al, byte ptr loc_13426+1
mov	ah, 17h
int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
; AL = disk type AL =
jb	short loc_12DA1
jmp	short loc_12DC7
; END OF FUNCTION CHUNK	FOR unkfunc_12D86
;     ***************************************************************************
db  80h	;   *
db 0FCh	;   *
db    1
db  74h	; t
db    2
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR unkfunc_12D86

loc_12DC5:				; CODE XREF: unkfunc_12D86-FFDC  j		 /* DOS offset ---> A48:5 */
; unkfunc_12D86-FFD6  j
jmp	short loc_12E1C
;     ***************************************************************************

loc_12DC7:				; CODE XREF: unkfunc_12D86-FFC8  j		 /* DOS offset ---> A48:7 */
mov	ax, ss

loc_12DC9:				; CODE XREF: dseg:22DC0  j		 /* DOS offset ---> A48:9 */
mov	es, ax
mov	di, sp
mov	bx, di
mov	si, 50h	; 'P'
mov	dx, [bp+arg_0]
mov	cx, 2
mov	dh, 0

loc_12DDA:				; CODE XREF: dseg:2E08  j		 /* DOS offset ---> A49:A */
push	di
mov	al, 1

loc_12DDD:				; CODE XREF: unkfunc_12D86-FF93  j		 /* DOS offset ---> A49:D */
mov	es:[di], ch
mov	es:[di+1], dh
mov	es:[di+2], al

loc_12DE8:				; CODE XREF: dseg:22DBE  j dseg:22DC7  j ...		 /* DOS offset ---> A4A:8 */
mov	es:[di+3], cl
add	di, 4

loc_12DEF:				; CODE XREF: game_personal_search_calc+3B  j		 /* DOS offset ---> A4A:F */
inc	al
cmp	al, 9
jbe	short loc_12DDD
dec	al
pop	di
mov	ah, 5
; END OF FUNCTION CHUNK	FOR unkfunc_12D86
;     ***************************************************************************
db 0CDh	;   *
db  13h
;     ***************************************************************************

loc_12DFC:				; CODE XREF: dseg:23334  p		 /* DOS offset ---> A4B:C */
jb	short loc_12E1C
inc	dh
and	dh, 1
jnz	short loc_12E07
inc	ch

loc_12E07:				; CODE XREF: dseg:2E03  j		 /* DOS offset ---> A4C:7 */
dec	si
jnz	short loc_12DDA
call	loc_12C9E
or	ax, ax
jnz	short loc_12E1C
call	loc_12CFA
or	ax, ax
jnz	short loc_12E1C
sub	cx, cx

loc_12E1A:				; CODE XREF: dseg:22E0E  j		 /* DOS offset ---> A4D:A */
jmp	short loc_12E1F
;     ***************************************************************************

loc_12E1C:				; CODE XREF: unkfunc_12D86:loc_12DC5  j		 /* DOS offset ---> A4D:C */
; dseg:loc_12DFC  j ...
mov	cx, 1

loc_12E1F:				; CODE XREF: dseg:loc_12E1A  j		 /* DOS offset ---> A4D:F */
mov	ax, 351Eh
int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
; AL = interrupt number
; Return: ES:BX	= value	of interrupt vector
mov	al, byte ptr loc_13422
mov	es:[bx+3], al
mov	al, byte ptr loc_13422+1
mov	es:[bx+4], al

loc_12E32:				; CODE XREF: game_personal_recruit_calc+20  j		 /* DOS offset ---> A4F:2 */
mov	al, byte ptr loc_13424
mov	es:[bx+5], al
mov	al, byte ptr loc_13424+1
mov	es:[bx+7], al
; START	OF FUNCTION CHUNK FOR game_personal_recruit_calc

loc_12E40:				; CODE XREF: game_personal_recruit_calc+23  j		 /* DOS offset ---> A50:0 */
mov	ax, cx
add	sp, 200h
pop	di
pop	si
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_personal_recruit_calc
;     ***************************************************************************
db  63h	; c
db  2Eh	; .
db  1Fh
db  32h	; 2
system_graphics_render_graphics	db  55h	; U
db  8Bh	;   *
db 0ECh	;   *
db  56h	; V
db  57h	; W
db  8Ah	;   *
db  1Eh
db 0A2h	;   *
db 0CEh	;   *
db  80h	;   *
unk_12E58	db 0E3h	;   *		; CODE XREF: game_personal_recruit_calc+26  j
; dseg:22E4C  j
db    1
db  32h	; 2
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db  2Eh	; .
db 0FFh
db 0A7h	;   *
db  4Ah	; J
db  2Eh	; .
;     ***************************************************************************
mov	dx, 3CEh

loc_12E66:				; CODE XREF: dseg:22E44  j		 /* DOS offset ---> A52:6 */
mov	al, 4
out	dx, al		; EGA: graph 1 and 2 addr reg:
; read map select.
; Data bits 0-2	select map # for read mode 00.
mov	dx, 3C4h
shr	al, 1
out	dx, al		; EGA: sequencer address reg
; map mask: data bits 0-3 enable writes	to bit planes 0-3
push	es

loc_12E70:				; CODE XREF: dseg:22E26  j		 /* DOS offset ---> A53:0 */
call	dword ptr [bp+0Ah]
; START	OF FUNCTION CHUNK FOR game_personal_recruit_calc

loc_12E73:				; CODE XREF: game_personal_recruit_calc+39  j		 /* DOS offset ---> A53:3 */
; game_personal_recruit_calc+46  j
pop	es

loc_12E74:				; CODE XREF: dseg:22F77  p		 /* DOS offset ---> A53:4 */
push	ax
; END OF FUNCTION CHUNK	FOR game_personal_recruit_calc
;     ***************************************************************************
db    6
db 0FFh
unk_12E77	db  5Eh	; ^		; CODE XREF: game_personal_recruit_calc+5D  j
db  0Ah
db    7
db  5Bh	; [
db  8Ah	;   *
db 0F8h	;   *
db  8Bh	;   *
db 0C3h	;   *
db  48h	; H
db  3Dh	; =
db  7Fh	; 
db    2
db  77h	; w
db  5Eh	; ^
db  53h	; S
db    6
db 0FFh
db  5Eh	; ^
db  0Ah
db    7
db  50h	; P
db    6
db 0FFh
db  5Eh	; ^
db  0Ah
db    7
db  59h	; Y
db  8Ah	;   *
db 0E8h	;   *
db  5Bh	; [
db  8Bh	;   *
db 0C1h	;   *
db  48h	; H
db  3Dh	; =
db 0C7h	;   *
db    0
db  77h	; w
db  46h	; F
db  8Bh	;   *
db  46h	; F
db    8
db  3Dh	; =
db 0C7h	;   *
db    0
db  77h	; w
db  3Eh	; >
db  8Bh	;   *
db 0D1h	;   *
db    3
unk_12EA8	db 0D0h	;   *		; CODE XREF: f_10DF2+24  P dseg:1D128  P
db  81h	;   *
db 0FAh	;   *
db 0C8h	;   *
db    0
db  77h	; w
db  34h	; 4
db 0D1h	;   *
db 0E0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db  8Bh	;   *
db 0D0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    3
unk_12EBE	db 0D0h	;   *		; CODE XREF: dseg:22EB7  j
db 0D1h	;   *
db 0E2h	;   *
db  8Bh	;   *
db  46h	; F
db    6
;     ***************************************************************************

loc_12EC4:				; CODE XREF: dseg:22EB5  j dseg:22EBC  j		 /* DOS offset ---> A58:4 */
cmp	ax, 27Fh
ja	short loc_12EE3
push	ax
add	ax, bx
cmp	ax, 280h
pop	ax
; START	OF FUNCTION CHUNK FOR game_personal_recruit_sub

loc_12ED0:				; CODE XREF: game_personal_recruit_sub+22  j		 /* DOS offset ---> A59:0 */
ja	short loc_12EE3
shr	ax, 1

loc_12ED4:				; CODE XREF: game_personal_recruit_sub+E  j		 /* DOS offset ---> A59:4 */
shr	ax, 1
add	ax, dx
mov	di, ax
add	bx, 3
shr	bx, 1
shr	bx, 1
jmp	short loc_12EE9
;     ***************************************************************************

loc_12EE3:				; CODE XREF: dseg:2EC7  j		 /* DOS offset ---> A5A:3 */
; game_personal_recruit_sub:loc_12ED0  j
mov	ax, 0FFFFh

loc_12EE6:				; CODE XREF: dseg:22EDB  j		 /* DOS offset ---> A5A:6 */
jmp	loc_1321B
;     ***************************************************************************

loc_12EE9:				; CODE XREF: game_personal_recruit_sub-FFC7  j		 /* DOS offset ---> A5A:9 */
; game_personal_recruit_sub-FC92  j
push	bx
push	cx
push	di
mov	cx, bx

loc_12EEE:				; CODE XREF: game_personal_recruit_sub-FCA0  j		 /* DOS offset ---> A5A:E */
; dseg:22FA8  p
push	cx
; END OF FUNCTION CHUNK	FOR game_personal_recruit_sub
;     ***************************************************************************
db    6
db 0FFh
db  5Eh	; ^
db  0Ah
db    7
db 0A8h	;   *
db  80h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db 0FFh
db    1
db  8Ah	;   *
db 0C8h	;   *
db  25h	; %
db  30h	; 0
db    0
db 0F6h	;   *
db 0C1h	;   *
db  40h	; @
db  74h	; t
db    3
db 0E9h	;   *
db  15h
db    1
db 0D1h	;   *
db 0E8h	;   *
db 0D1h	;   *
db 0E8h	;   *
db 0D1h	;   *
db 0E8h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_personal_recruit_sub

loc_12F0E:				; CODE XREF: game_personal_recruit_sub+42  j		 /* DOS offset ---> A5C:E */
; game_personal_recruit_sub+4A  j
shr	ax, 1
inc	ax

loc_12F11:				; CODE XREF: game_personal_recruit_sub+64  j		 /* DOS offset ---> A5D:1 */
mov	si, di
sub	si, ax
and	cx, 0Fh
inc	cx
push	cx
push	di
shr	si, 1
jb	short loc_12F26
shr	di, 1
jb	short loc_12FA2
jmp	loc_1303A
;     ***************************************************************************

loc_12F26:				; CODE XREF: game_personal_recruit_sub-FF8B  j		 /* DOS offset ---> A5E:6 */
shr	di, 1

loc_12F28:				; CODE XREF: dseg:23319  p		 /* DOS offset ---> A5E:8 */
jnb	short loc_12F2D
jmp	loc_13096
;     ***************************************************************************

loc_12F2D:				; CODE XREF: game_personal_recruit_sub:loc_12F28  j		 /* DOS offset ---> A5E:D */
; game_personal_recruit_sub-FE91  j
mov	ax, 0A000h
mov	es, ax

loc_12F32:				; CODE XREF: game_personal_recruit_sub+26  j		 /* DOS offset ---> A5F:2 */
; game_personal_recruit_sub+2A  j
mov	dx, 3C5h

loc_12F35:				; CODE XREF: game_personal_recruit_sub+77  j		 /* DOS offset ---> A5F:5 */
mov	al, 1

loc_12F37:				; CODE XREF: dseg:22FB7  j		 /* DOS offset ---> A5F:7 */
out	dx, al		; EGA port: sequencer data register
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register

loc_12F3E:				; CODE XREF: dseg:1FE30  P		 /* DOS offset ---> A5F:E */
mov	ah, es:[si]
; END OF FUNCTION CHUNK	FOR game_personal_recruit_sub
;     ***************************************************************************
db 0D0h	;   *
db 0E4h	;   *
db 0D0h	;   *
db 0E4h	;   *
db 0D0h	;   *
db 0E4h	;   *
db 0D0h	;   *
db 0E4h	;   *
db  80h	;   *
db 0E4h	;   *
db 0F0h	;   *
db  26h	; &
db  8Ah	;   *
db    5
db  24h	; $
db  0Fh
db  0Ah
db 0C4h	;   *
db  26h	; &
db  88h	;   *
db    5
db 0BAh	;   *
db 0C5h	;   *
db    3
db 0B0h	;   *
db    4
db 0EEh	;   *
db 0BAh	;   *
db 0CFh	;   *
db    3
db 0D0h	;   *
db 0E8h	;   *
db 0EEh	;   *
db  26h	; &
db  8Ah	;   *
db  24h	; $
db 0D0h	;   *
db 0E4h	;   *
db 0D0h	;   *
db 0E4h	;   *
db 0D0h	;   *
unk_12F6A	db 0E4h	;   *		; CODE XREF: dseg:22F50  j
db 0D0h	;   *
db 0E4h	;   *
db  80h	;   *
db 0E4h	;   *
db 0F0h	;   *
db  26h	; &
db  8Ah	;   *
db    5
db  24h	; $
db  0Fh
db  0Ah
db 0C4h	;   *
db  26h	; &
db  88h	;   *
db    5
db 0BAh	;   *
db 0C5h	;   *
db    3
db 0B0h	;   *
db    2
db 0EEh	;   *
db 0BAh	;   *
db 0CFh	;   *
db    3
db 0D0h	;   *
db 0E8h	;   *
db 0EEh	;   *
db  26h	; &
db  8Ah	;   *
db  24h	; $
db 0D0h	;   *
db 0E4h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_personal_recruit_ruler

loc_12F8B:				; CODE XREF: game_personal_recruit_ruler+48  j		 /* DOS offset ---> A64:B */
shl	ah, 1
shl	ah, 1
shl	ah, 1

loc_12F91:				; DATA XREF: game_messenger_travel+175  t		 /* DOS offset ---> A65:1 */
and	ah, 0F0h
mov	al, es:[di]
and	al, 0Fh
or	al, ah
mov	es:[di], al
inc	si
dec	cx
jz	short loc_1301A
; END OF FUNCTION CHUNK	FOR game_personal_recruit_ruler
; START	OF FUNCTION CHUNK FOR game_personal_recruit_sub

loc_12FA2:				; CODE XREF: game_personal_recruit_sub-FF87  j		 /* DOS offset ---> A66:2 */
mov	ax, 0A000h
mov	es, ax
mov	dx, 3C5h
mov	al, 1
out	dx, al		; EGA port: sequencer data register

loc_12FAD:				; CODE XREF: dseg:22F7F  j dseg:22F86  j		 /* DOS offset ---> A66:D */
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	ah, es:[si]
shr	ah, 1
shr	ah, 1

loc_12FBA:				; CODE XREF: dseg:22FB5  j		 /* DOS offset ---> A67:A */
shr	ah, 1
shr	ah, 1
and	ah, 0Fh
mov	al, es:[di]
and	al, 0F0h
or	al, ah
mov	es:[di], al
mov	dx, 3C5h
mov	al, 4
out	dx, al		; EGA port: sequencer data register
mov	dx, 3CFh
shr	al, 1

loc_12FD6:				; CODE XREF: dseg:22FD0  j		 /* DOS offset ---> A69:6 */
out	dx, al		; EGA port: graphics controller	data register
mov	ah, es:[si]
shr	ah, 1
shr	ah, 1
shr	ah, 1
shr	ah, 1
and	ah, 0Fh
mov	al, es:[di]
and	al, 0F0h
or	al, ah
mov	es:[di], al
mov	dx, 3C5h
mov	al, 2
out	dx, al		; EGA port: sequencer data register
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register

loc_12FFB:				; CODE XREF: s_12F92+B4  j		 /* DOS offset ---> A6B:B */
mov	ah, es:[si]
shr	ah, 1
shr	ah, 1
shr	ah, 1
shr	ah, 1
and	ah, 0Fh
mov	al, es:[di]
and	al, 0F0h
or	al, ah
mov	es:[di], al
inc	di
dec	cx
jz	short loc_1301A
jmp	loc_12F2D
;     ***************************************************************************

loc_1301A:				; CODE XREF: game_personal_recruit_ruler-FF9E  j		 /* DOS offset ---> A6D:A */
; game_personal_recruit_sub-FE93  j
jmp	loc_131FF
; END OF FUNCTION CHUNK	FOR game_personal_recruit_sub
;     ***************************************************************************
db    5
db  10h
db    0
db  8Bh	;   *
db 0D8h	;   *
db 0D1h	;   *
db 0E0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    3
db 0C3h	;   *
db 0D1h	;   *
db 0E0h	;   *
db  8Bh	;   *
db 0F7h	;   *
db  2Bh	; +
db 0F0h	;   *
db  83h	;   *
db 0E1h	;   *
db  0Fh
db  41h	; A
db  51h	; Q
db  57h	; W
db 0D1h	;   *
db 0EEh	;   *
db 0D1h	;   *
db 0EFh	;   *
db  72h	; r
db  5Ch	; \
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_personal_recruit_sub

loc_1303A:				; CODE XREF: game_personal_recruit_sub-FF85  j		 /* DOS offset ---> A6F:A */
; game_personal_recruit_sub-FDB4  j
mov	ax, 0A000h
mov	es, ax
mov	dx, 3C5h
mov	al, 1
out	dx, al		; EGA port: sequencer data register
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	ah, es:[si]
and	ah, 0F0h
mov	al, es:[di]
and	al, 0Fh
or	al, ah

loc_13058:				; CODE XREF: dseg:230F6  p		 /* DOS offset ---> A71:8 */
mov	es:[di], al
mov	dx, 3C5h

loc_1305E:				; CODE XREF: s_12F92+BF  j		 /* DOS offset ---> A71:E */
mov	al, 4
out	dx, al		; EGA port: sequencer data register
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register

loc_13067:				; CODE XREF: s_12F92+C9  j		 /* DOS offset ---> A72:7 */
mov	ah, es:[si]
and	ah, 0F0h
mov	al, es:[di]
and	al, 0Fh
or	al, ah
mov	es:[di], al
mov	dx, 3C5h
mov	al, 2
out	dx, al		; EGA port: sequencer data register
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	ah, es:[si]
and	ah, 0F0h
mov	al, es:[di]
and	al, 0Fh
or	al, ah

loc_13090:				; CODE XREF: dseg:23089  j		 /* DOS offset ---> A75:0 */
mov	es:[di], al
dec	cx
jz	short loc_130F7

loc_13096:				; CODE XREF: game_personal_recruit_sub-FF7E  j		 /* DOS offset ---> A75:6 */
; dseg:23289  p
mov	ax, 0A000h
mov	es, ax

loc_1309B:				; CODE XREF: dseg:116B4  P s_1F482+EF  P ...		 /* DOS offset ---> A75:B */
mov	dx, 3C5h
mov	al, 1
out	dx, al		; EGA port: sequencer data register
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	ah, es:[si]
and	ah, 0Fh
mov	al, es:[di]
and	al, 0F0h
or	al, ah
mov	es:[di], al
mov	dx, 3C5h
mov	al, 4
out	dx, al		; EGA port: sequencer data register

loc_130BD:				; CODE XREF: dseg:10812  P dseg:11986  P ...		 /* DOS offset ---> A77:D */
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	ah, es:[si]
and	ah, 0Fh

loc_130C9:				; CODE XREF: dseg:230C6  j		 /* DOS offset ---> A78:9 */
mov	al, es:[di]
and	al, 0F0h
or	al, ah
mov	es:[di], al
mov	dx, 3C5h
mov	al, 2
out	dx, al		; EGA port: sequencer data register

loc_130D9:				; CODE XREF: dseg:230D5  j dseg:2316B  j		 /* DOS offset ---> A79:9 */
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register
mov	ah, es:[si]
and	ah, 0Fh
mov	al, es:[di]
and	al, 0F0h
or	al, ah
mov	es:[di], al
inc	si
inc	di
dec	cx
jz	short loc_130F7
jmp	loc_1303A
;     ***************************************************************************

loc_130F7:				; CODE XREF: game_personal_recruit_sub-FE14  j		 /* DOS offset ---> A7B:7 */
; game_personal_recruit_sub-FDB6  j
jmp	loc_131FF
; END OF FUNCTION CHUNK	FOR game_personal_recruit_sub
;     ***************************************************************************
db  50h	; P
db    6
db 0FFh
db  5Eh	; ^
db  0Ah
db    7
db  8Ah	;   *
db 0D0h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_warning_unkfunc_130BE

loc_13102:				; CODE XREF: game_warning_unkfunc_130BE+E  j		 /* DOS offset ---> A7C:2 */
pop	ax

loc_13103:		 /* DOS offset ---> A7C:3 */
mov	dh, al
shr	al, 1
shr	al, 1
shr	al, 1
shr	al, 1
and	ax, 7

loc_13110:				; DATA XREF: game_war_func+F  t		 /* DOS offset ---> A7D:0 */
; game_personal_search+9  t ...
inc	ax
; END OF FUNCTION CHUNK	FOR game_warning_unkfunc_130BE
;     ***************************************************************************
db  8Bh	;   *
db 0C8h	;   *
db  51h	; Q
db  57h	; W
db 0D1h	;   *
db 0EFh	;   *
db  72h	; r
db  75h	; u
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_display_draw_province_menu

loc_13119:				; CODE XREF: game_display_draw_province_menu-FFC6  j		 /* DOS offset ---> A7D:9 */
mov	ax, 0A000h
mov	es, ax
; END OF FUNCTION CHUNK	FOR game_display_draw_province_menu
;     ***************************************************************************
db  87h	;   *
db 0DAh	;   *
db 0BAh	;   *
db 0C5h	;   *
db    3
db 0B0h	;   *
db    1
db 0EEh	;   *
glb_13126	db 0BAh	;   *
db 0CFh	;   *
db    3
db 0D0h	;   *
db 0E8h	;   *
db 0EEh	;   *
db  87h	;   *
db 0DAh	;   *
db  26h	; &
db  8Ah	;   *
db  25h	; %
db  80h	;   *
db 0E4h	;   *
db  0Fh
db  8Ah	;   *
db 0C2h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_display_draw_province_menu_sub

loc_13136:				; CODE XREF: game_display_draw_province_menu_sub+7  j		 /* DOS offset ---> A7F:6 */
shl	al, 1

loc_13138:				; CODE XREF: game_display_draw_province_menu_sub+C  j		 /* DOS offset ---> A7F:8 */
shl	al, 1
shl	al, 1
shl	al, 1
and	al, 0F0h
or	al, ah
mov	es:[di], al
xchg	bx, dx
mov	dx, 3C5h

loc_1314A:				; CODE XREF: game_display_draw_province_menu_sub+1A  j		 /* DOS offset ---> A80:A */
mov	al, 4

loc_1314C:				; CODE XREF: game_display_draw_province_menu_sub+1F  j		 /* DOS offset ---> A80:C */
out	dx, al		; EGA port: sequencer data register

loc_1314D:		 /* DOS offset ---> A80:D */
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register
xchg	bx, dx
mov	ah, es:[di]
and	ah, 0Fh
mov	al, dl

loc_1315D:				; CODE XREF: game_display_draw_province_menu_sub+2E  j		 /* DOS offset ---> A81:D */
and	al, 0F0h

loc_1315F:				; CODE XREF: game_display_draw_province_menu_sub+33  j		 /* DOS offset ---> A81:F */
or	al, ah

loc_13161:				; CODE XREF: dseg:230E6  j dseg:230EC  j ...		 /* DOS offset ---> A82:1 */
mov	es:[di], al
xchg	bx, dx
mov	dx, 3C5h
mov	al, 2
out	dx, al		; EGA port: sequencer data register

loc_1316C:				; CODE XREF: dseg:230BC  j dseg:230C8  j ...		 /* DOS offset ---> A82:C */
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register

loc_13172:				; CODE XREF: game_display_draw_province_menu_sub+42  j		 /* DOS offset ---> A83:2 */
xchg	bx, dx

loc_13174:				; CODE XREF: game_display_draw_province_menu_sub+47  j		 /* DOS offset ---> A83:4 */
; dseg:2322A  p
mov	ah, es:[di]
; END OF FUNCTION CHUNK	FOR game_display_draw_province_menu_sub
;     ***************************************************************************
db  80h	;   *
db 0E4h	;   *
db  0Fh
db  8Ah	;   *
db 0C6h	;   *
db 0D0h	;   *
db 0E0h	;   *
db 0D0h	;   *
db 0E0h	;   *
db 0D0h	;   *
db 0E0h	;   *
db 0D0h	;   *
db 0E0h	;   *
db  24h	; $
db 0F0h	;   *
db  0Ah
db 0C4h	;   *
db  26h	; &
db  88h	;   *
db    5
db  49h	; I
db  74h	; t
db  71h	; q
db 0B8h	;   *
db    0
db 0A0h	;   *
db  8Eh	;   *
db 0C0h	;   *
db  87h	;   *
db 0DAh	;   *
db 0BAh	;   *
unk_13196	db 0C5h	;   *		; CODE XREF: dseg:23186  j
db    3
db 0B0h	;   *
db    1
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_display_draw_province_menu_sub

loc_1319A:				; CODE XREF: game_display_draw_province_menu_sub+6A  j		 /* DOS offset ---> A85:A */
out	dx, al		; EGA port: sequencer data register

loc_1319B:				; CODE XREF: game_display_draw_province_menu_sub+6F  j		 /* DOS offset ---> A85:B */
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register
xchg	bx, dx
mov	ah, es:[di]
and	ah, 0F0h

loc_131A9:				; CODE XREF: dseg:231C1  j		 /* DOS offset ---> A86:9 */
mov	al, dl
and	al, 0Fh

loc_131AD:				; CODE XREF: game_display_draw_province_menu_sub+14  j		 /* DOS offset ---> A86:D */
; game_display_draw_province_menu_sub+28  j ...
or	al, ah
mov	es:[di], al
xchg	bx, dx
mov	dx, 3C5h

loc_131B7:				; CODE XREF: game_display_draw_province_menu_sub+83  j		 /* DOS offset ---> A87:7 */
mov	al, 4
out	dx, al		; EGA port: sequencer data register
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register
xchg	bx, dx
mov	ah, es:[di]
; END OF FUNCTION CHUNK	FOR game_display_draw_province_menu_sub
;     ***************************************************************************
db  80h	;   *
unk_131C6	db 0E4h	;   *		; CODE XREF: dseg:231B8  j
db 0F0h	;   *
db  8Ah	;   *
db 0C2h	;   *
db 0D0h	;   *
db 0E8h	;   *
db 0D0h	;   *
db 0E8h	;   *
db 0D0h	;   *
db 0E8h	;   *
db 0D0h	;   *
db 0E8h	;   *
db  24h	; $
db  0Fh
db  0Ah
db 0C4h	;   *
db  26h	; &
unk_131D7	db  88h	;   *		; CODE XREF: game_display_draw_province_menu+1F5  j
db    5
db  87h	;   *
db 0DAh	;   *
db 0BAh	;   *
db 0C5h	;   *
db    3
db 0B0h	;   *
db    2
;     ***************************************************************************

loc_131E0:				; CODE XREF: dseg:23193  j		 /* DOS offset ---> A8A:0 */
out	dx, al		; EGA port: sequencer data register
; START	OF FUNCTION CHUNK FOR game_display_draw_province_menu

loc_131E1:				; CODE XREF: game_display_draw_province_menu:loc_233A6  j		 /* DOS offset ---> A8A:1 */
; dseg:231C3  j
mov	dx, 3CFh
shr	al, 1
out	dx, al		; EGA port: graphics controller	data register
xchg	bx, dx
mov	ah, es:[di]
and	ah, 0F0h
mov	al, dh
and	al, 0Fh
or	al, ah
mov	es:[di], al
inc	di
dec	cx
jz	short loc_131FF
jmp	loc_13119
; END OF FUNCTION CHUNK	FOR game_display_draw_province_menu
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_personal_recruit_sub

loc_131FF:				; CODE XREF: game_personal_recruit_sub:loc_1301A  j		 /* DOS offset ---> A8B:F */
; game_personal_recruit_sub:loc_130F7  j	...
pop	di
pop	ax

loc_13201:		 /* DOS offset ---> A8C:1 */
add	di, ax
pop	cx
sub	cx, ax
jbe	short loc_1320B
jmp	loc_12EEE
;     ***************************************************************************

loc_1320B:				; CODE XREF: game_personal_recruit_sub-FCA2  j		 /* DOS offset ---> A8C:B */
pop	di
mov	ax, 0A0h ; '  *'

loc_1320F:				; CODE XREF: game_display_draw_province_menu+48  j		 /* DOS offset ---> A8C:F */
add	di, ax
pop	cx
pop	bx
dec	cx
jz	short loc_13219
jmp	loc_12EE9
;     ***************************************************************************

loc_13219:				; CODE XREF: game_personal_recruit_sub-FC94  j		 /* DOS offset ---> A8D:9 */
sub	ax, ax

loc_1321B:				; CODE XREF: game_personal_recruit_sub:loc_12EE6  j		 /* DOS offset ---> A8D:B */
pop	di

loc_1321C:				; CODE XREF: dseg:23201  j		 /* DOS offset ---> A8D:C */
pop	si
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_personal_recruit_sub
;     ***************************************************************************
mov	ax, [bp+0Eh]

loc_13222:				; CODE XREF: game_display_draw_province_menu+5A  j		 /* DOS offset ---> A8E:2 */
mov	word ptr loc_13426+2, ax

loc_13225:				; CODE XREF: dseg:23269  j		 /* DOS offset ---> A8E:5 */
push	es
; START	OF FUNCTION CHUNK FOR game_display_draw_province_menu

loc_13226:				; CODE XREF: game_display_draw_province_menu+5F  j		 /* DOS offset ---> A8E:6 */
call	[bp+arg_6]
pop	es
push	ax
push	es
call	[bp+arg_6]
pop	es
pop	bx
mov	bh, al

loc_13233:				; CODE XREF: game_display_draw_province_menu+6B  j		 /* DOS offset ---> A8F:3 */
mov	ax, bx
dec	ax

loc_13236:				; CODE XREF: game_display_draw_province_menu+70  j		 /* DOS offset ---> A8F:6 */
cmp	ax, 27Fh
ja	short loc_132A7
push	bx
push	es
call	[bp+arg_6]
pop	es
push	ax

loc_13242:				; CODE XREF: dseg:23232  j		 /* DOS offset ---> A90:2 */
push	es
call	[bp+arg_6]

loc_13246:				; CODE XREF: game_display_draw_province_menu+7D  j		 /* DOS offset ---> A90:6 */
pop	es
pop	cx

loc_13248:				; CODE XREF: game_display_draw_province_menu+82  j		 /* DOS offset ---> A90:8 */
mov	ch, al
pop	bx
mov	ax, cx
dec	ax

loc_1324E:				; CODE XREF: dseg:23248  j		 /* DOS offset ---> A90:E */
cmp	ax, 0C7h ; '  *'
ja	short loc_132A7
mov	ax, [bp+arg_4]

loc_13256:				; CODE XREF: game_display_draw_province_menu+8D  j		 /* DOS offset ---> A91:6 */
; game_display_draw_province_menu+92  j
cmp	ax, 0C7h ; '  *'
ja	short loc_132A7

loc_1325B:		 /* DOS offset ---> A91:B */
mov	dx, cx
add	dx, ax

loc_1325F:				; CODE XREF: dseg:23238  j dseg:23240  j		 /* DOS offset ---> A91:F */
cmp	dx, 0C8h ; '  *'
ja	short loc_132A7
shr	ax, 1
shl	ax, 1
shl	ax, 1

loc_1326B:				; CODE XREF: game_display_draw_province_menu+77  j		 /* DOS offset ---> A92:B */
; game_display_draw_province_menu+99  j ...
shl	ax, 1
shl	ax, 1

loc_1326F:				; CODE XREF: dseg:2324C  j dseg:23260  j		 /* DOS offset ---> A92:F */
mov	dx, ax
shl	ax, 1
shl	ax, 1
add	dx, ax
shl	dx, 1

loc_13279:				; CODE XREF: game_display_draw_province_menu+109  j		 /* DOS offset ---> A93:9 */
; game_display_draw_province_menu+130  j	...
mov	ax, [bp+arg_0]
cmp	ax, 27Fh
ja	short loc_132A7
push	ax
add	ax, bx

loc_13284:				; CODE XREF: dseg:23315  j		 /* DOS offset ---> A94:4 */
cmp	ax, 280h
pop	ax

loc_13288:				; CODE XREF: game_display_draw_province_menu+54  j		 /* DOS offset ---> A94:8 */
ja	short loc_132A7
shr	ax, 1
shr	ax, 1
add	ax, dx
mov	di, ax

loc_13292:		 /* DOS offset ---> A95:2 */
mov	ax, [bp+arg_4]
test	ax, 1
jz	short loc_1329E

loc_1329A:				; CODE XREF: dseg:23293  j dseg:23297  j		 /* DOS offset ---> A95:A */
add	di, 4000h

loc_1329E:				; CODE XREF: game_display_draw_province_menu-FF2A  j		 /* DOS offset ---> A95:E */
add	bx, 3

loc_132A1:		 /* DOS offset ---> A96:1 */
shr	bx, 1
shr	bx, 1
jmp	short loc_132AD
;     ***************************************************************************

loc_132A7:				; CODE XREF: game_display_draw_province_menu-FF89  j		 /* DOS offset ---> A96:7 */
; game_display_draw_province_menu-FF71  j ...
mov	ax, 0FFFFh
jmp	loc_13497
;     ***************************************************************************

loc_132AD:				; CODE XREF: game_display_draw_province_menu-FF1D  j		 /* DOS offset ---> A96:D */
; dseg:loc_13492  j
push	bx
push	cx
push	di
mov	cx, bx

loc_132B2:				; CODE XREF: dseg:3474  j		 /* DOS offset ---> A97:2 */
push	cx
push	es
call	[bp+arg_6]
pop	es
test	al, 80h
jnz	short loc_132BF

loc_132BC:				; CODE XREF: game_display_draw_province_menu+DD  j		 /* DOS offset ---> A97:C */
; game_display_draw_province_menu+E3  j ...
jmp	near ptr word_133A6+1
;     ***************************************************************************

loc_132BF:				; CODE XREF: game_display_draw_province_menu-FF08  j		 /* DOS offset ---> A97:F */
mov	cl, al
and	ax, 30h
test	cl, 40h
jz	short loc_132CB
jmp	short loc_13337
;     ***************************************************************************

loc_132CB:				; CODE XREF: game_display_draw_province_menu-FEFB  j		 /* DOS offset ---> A98:B */
shr	ax, 1

loc_132CD:				; CODE XREF: game_display_draw_province_menu+D7  j		 /* DOS offset ---> A98:D */
shr	ax, 1
shr	ax, 1
shr	ax, 1
inc	ax
mov	si, di
sub	si, ax
and	cx, 0Fh
inc	cx
push	cx
push	di
shr	si, 1
jb	short loc_132E9

loc_132E2:				; CODE XREF: game_display_draw_province_menu+110  j		 /* DOS offset ---> A9A:2 */
; game_display_draw_province_menu+116  j	...
shr	di, 1
jb	short loc_13311
jmp	loc_13370
;     ***************************************************************************

loc_132E9:				; CODE XREF: game_display_draw_province_menu-FEE2  j		 /* DOS offset ---> A9A:9 */
shr	di, 1
jnb	short loc_132F0
jmp	loc_13388
;     ***************************************************************************

loc_132F0:				; CODE XREF: game_display_draw_province_menu-FED7  j		 /* DOS offset ---> A9B:0 */
; game_display_draw_province_menu-FE90  j
mov	ax, 0B800h

loc_132F3:				; CODE XREF: game_display_draw_province_menu+4A  j		 /* DOS offset ---> A9B:3 */
mov	es, ax
mov	ah, es:[si]
shl	ah, 1
shl	ah, 1
shl	ah, 1
shl	ah, 1
and	ah, 0F0h
mov	al, es:[di]
and	al, 0Fh

loc_13308:				; CODE XREF: game_display_draw_province_menu+13F  j		 /* DOS offset ---> A9C:8 */
or	al, ah

loc_1330A:				; CODE XREF: game_display_draw_province_menu+144  j		 /* DOS offset ---> A9C:A */
; dseg:232A6  j ...
mov	es:[di], al
inc	si
dec	cx
jz	short loc_13334

loc_13311:				; CODE XREF: game_display_draw_province_menu-FEDE  j		 /* DOS offset ---> A9D:1 */
mov	ax, 0B800h
mov	es, ax

loc_13316:				; CODE XREF: game_display_draw_province_menu+14F  j		 /* DOS offset ---> A9D:6 */
; dseg:23313  j
mov	ah, es:[si]

loc_13319:				; CODE XREF: game_display_draw_province_menu+154  j		 /* DOS offset ---> A9D:9 */
shr	ah, 1
shr	ah, 1
shr	ah, 1
shr	ah, 1
and	ah, 0Fh
mov	al, es:[di]
and	al, 0F0h

loc_13329:				; CODE XREF: game_display_draw_province_menu+161  j		 /* DOS offset ---> A9E:9 */
or	al, ah

loc_1332B:				; CODE XREF: game_display_draw_province_menu+166  j		 /* DOS offset ---> A9E:B */
mov	es:[di], al
inc	di

loc_1332F:				; CODE XREF: dseg:23329  j		 /* DOS offset ---> A9E:F */
dec	cx
jz	short loc_13334
jmp	short loc_132F0
;     ***************************************************************************

loc_13334:				; CODE XREF: game_display_draw_province_menu-FEB3  j		 /* DOS offset ---> A9F:4 */
; game_display_draw_province_menu-FE92  j
jmp	loc_1346B
;     ***************************************************************************

loc_13337:				; CODE XREF: game_display_draw_province_menu-FEF9  j		 /* DOS offset ---> A9F:7 */
mov	dx, ax

loc_13339:				; CODE XREF: game_display_draw_province_menu+171  j		 /* DOS offset ---> A9F:9 */
mov	si, di

loc_1333B:				; CODE XREF: game_display_draw_province_menu+176  j		 /* DOS offset ---> A9F:B */
; dseg:233B9  p
test	dl, 10h
jnz	short loc_13353

loc_13340:				; CODE XREF: game_display_draw_province_menu+15B  j		 /* DOS offset ---> AA0:0 */
cmp	si, 4000h
jb	short loc_1334C
sub	si, 4000h
jmp	short loc_13356
;     ***************************************************************************

loc_1334C:				; CODE XREF: game_display_draw_province_menu-FE7E  j		 /* DOS offset ---> AA0:C */
add	si, 4000h
add	ax, 10h

loc_13353:				; CODE XREF: game_display_draw_province_menu-FE84  j		 /* DOS offset ---> AA1:3 */
; game_display_draw_province_menu+139  j
add	ax, 10h

loc_13356:				; CODE XREF: game_display_draw_province_menu-FE78  j		 /* DOS offset ---> AA1:6 */
shr	al, 1
mov	bx, ax
shl	ax, 1

loc_1335C:		 /* DOS offset ---> AA1:C */
shl	ax, 1
add	ax, bx
shl	ax, 1
sub	si, ax
and	cx, 0Fh
inc	cx
push	cx
push	di
shr	si, 1
shr	di, 1
; END OF FUNCTION CHUNK	FOR game_display_draw_province_menu
;     ***************************************************************************
db 72h
byte_1336F	db 18h			; DATA XREF: game_start_new_game_sub_3+30  w
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_display_draw_province_menu

loc_13370:				; CODE XREF: game_display_draw_province_menu-FEDC  j		 /* DOS offset ---> AA3:0 */
mov	ax, 0B800h

loc_13373:				; CODE XREF: game_display_draw_province_menu+1A9  j		 /* DOS offset ---> AA3:3 */
mov	es, ax
mov	ah, es:[si]
and	ah, 0F0h
mov	al, es:[di]
and	al, 0Fh
or	al, ah
mov	es:[di], al
dec	cx

loc_13386:				; CODE XREF: game_display_draw_province_menu+A7  j		 /* DOS offset ---> AA4:6 */
; game_display_draw_province_menu+F7  j ...
jz	short near ptr word_133A4

loc_13388:				; CODE XREF: game_display_draw_province_menu-FED5  j		 /* DOS offset ---> AA4:8 */
mov	ax, 0B800h
mov	es, ax
mov	ah, es:[si]

loc_13390:				; DATA XREF: dseg:FD3E  r		 /* DOS offset ---> AA5:0 */
; s_1FC80:loc_1FD50  w ...
and	ah, 0Fh
; END OF FUNCTION CHUNK	FOR game_display_draw_province_menu
;     ***************************************************************************
byte_13393	db 26h			; DATA XREF: dseg:FA9B  r
; dseg:loc_1FAAA  w ...
current_ruler	dw 58Ah			; DATA XREF: game_data_get_rulers_in_game+33  r
; game_display_generals_action_list2:loc_15DBF  r ...
word_13396	dw 0F024h		; DATA XREF: dseg:FB04  w dseg:FB0B  r ...
byte_13398	db 0Ah			; DATA XREF: dseg:FE93  w
byte_13399	db 0C4h			; CODE XREF: game_display_draw_province_menu+C2  j
; DATA XREF: dseg:FE90  w
current_province dw 8826h		; DATA XREF: dseg:loc_1FA6E  r
; dseg:FAEE  w ...
byte_1339C	db 5			; DATA XREF: game_diplomacy_marriage_result:loc_16EA8  r
; game_quit_execute+A  r	...
db  46h	; F
dw 4947h
word_133A0	dw 274h			; DATA XREF: s_D008:loc_1D03E  r
; s_F530:loc_1F586  r
dw 0CCEBh
word_133A4	dw 0C4E9h		; CODE XREF: game_display_draw_province_menu:loc_13386  j
word_133A6	dw 5000h		; CODE XREF: game_display_draw_province_menu:loc_132BC  j
word_133A8	dw 0FF06h		; CODE XREF: game_display_draw_province_menu+1E2  j
word_133AA	dw 0A5Eh		; DATA XREF: s_D008:loc_1D030  r
; dseg:F415  w ...
;     ***************************************************************************
pop	es
mov	bl, al
and	bl, 0Fh
;     ***************************************************************************
db 0D0h
game_difficulty	db 0E3h			; DATA XREF: setup_game_difficulty_level_query+42  w
; dseg:C302  r ...
options_value	db 0D0h			; CODE XREF: dseg:233ED  j
; DATA XREF: s_4D48+3  r	...
message_wait_value db 0E3h		; DATA XREF: system_sound_delay_1+3  r
; system_sound_warning_error_delay_after  r ...
;     ***************************************************************************

messenger_speed_value:			; DATA XREF: game_messenger_travel+7  r
; game_options_wait_messenger_speed+7  r	...
shl	bl, 1
;     ***************************************************************************
word_133B8	dw 0E3D0h		; DATA XREF: game_start_new_game_init_func+6F  w
; game_events_check_add_followers+C  r ...
word_133BA	dw 0D08Ah		; CODE XREF: game_display_draw_province_menu+1F3  j
; DATA XREF: game_start_new_game_init_func+50  w	...
byte_133BC	db 80h			; DATA XREF: game_events_check_add_followers_display+120  r
; game_events_check_add_followers:loc_1DC34  r
byte_133BD	db 0E2h			; DATA XREF: game_events_check_add_followers_display:loc_1DB1C  w
byte_133BE	db 0F0h			; DATA XREF: game_events_check_add_followers_display+1BA  r
;     ***************************************************************************
pop	ax
mov	dh, al
shl	dh, 1

loc_133C4:				; CODE XREF: game_diplomacy_alliance_result:loc_173E9  P		 /* DOS offset ---> AA8:4 */
; game_build_fort_map_fort_placement-FF21  P ...
shl	dh, 1
shl	dh, 1
shl	dh, 1

loc_133CA:				; CODE XREF: dseg:233C6  j		 /* DOS offset ---> AA8:A */
cmp	word ptr loc_13426+2, 1
jz	short loc_133FB

loc_133D1:				; CODE XREF: dseg:233C4  j dseg:233CB  j ...		 /* DOS offset ---> AA9:1 */
cmp	word ptr loc_13426+2, 2
; START	OF FUNCTION CHUNK FOR game_advisor_display_sub2_2

loc_133D6:				; CODE XREF: game_advisor_display_sub2_2+23  j		 /* DOS offset ---> AA9:6 */
jz	short loc_13400
cmp	word ptr loc_13426+2, 3
jz	short loc_13404
cmp	word ptr loc_13426+2, 4
jz	short loc_13409

loc_133E6:				; CODE XREF: game_advisor_display_sub2_2+10  j		 /* DOS offset ---> AAA:6 */
; DATA XREF: game_advice_rumors_output:loc_1A8AA  w
cmp	word ptr loc_13426+2, 5

loc_133EB:				; DATA XREF: dseg:9CD9  r		 /* DOS offset ---> AAA:B */
; unkfunc_A8DA:loc_1A8E0  r ...
jz	short loc_1340E
; END OF FUNCTION CHUNK	FOR game_advisor_display_sub2_2
;     ***************************************************************************
byte_133ED	db 83h			; DATA XREF: game_start_new_game_clear_header+66  w
; dseg:loc_1DF8C  r ...
unk_133EE	db  3Eh	; >		; DATA XREF: dseg:DF82  r dseg:E02A  w
db  28h	; (
db  34h	; 4
db    6
word_133F2	dw 2174h		; DATA XREF: system_time:loc_100BE  w
; system_time_wait:wait_entry_001  r
word_133F4	dw 3E83h		; CODE XREF: dseg:2341F  p
; DATA XREF: system_time:loc_100B7  w ...
dw 3428h
unk_133F8	db    7			; CODE XREF: game_advisor_display_sub2_2+45  j
db  74h	; t
db  1Fh
;     ***************************************************************************

loc_133FB:				; CODE XREF: dseg:33CF  j		 /* DOS offset ---> AAB:B */
mov	dl, bl
jmp	short loc_1341E
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_advisor_display_sub2_2

loc_13400:				; CODE XREF: game_advisor_display_sub2_2:loc_133D6  j		 /* DOS offset ---> AAC:0 */
nop
jmp	short loc_1341E
; END OF FUNCTION CHUNK	FOR game_advisor_display_sub2_2
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_advisor_display_sub2_2

loc_13404:				; CODE XREF: game_advisor_display_sub2_2-FFE7  j		 /* DOS offset ---> AAC:4 */
or	dl, bl
jmp	short loc_1341E
; END OF FUNCTION CHUNK	FOR game_advisor_display_sub2_2
;     ***************************************************************************

loc_13408:				; DATA XREF: dseg:0D2B  w dseg:0D76  r ...		 /* DOS offset ---> AAC:8 */
nop
; START	OF FUNCTION CHUNK FOR game_advisor_display_sub2_2

loc_13409:				; CODE XREF: game_advisor_display_sub2_2-FFE0  j		 /* DOS offset ---> AAC:9 */
; DATA XREF: dseg:0CFE  w ...
mov	dl, dh

loc_1340B:				; DATA XREF: game_check_provinces_in_war:loc_10657  w		 /* DOS offset ---> AAC:B */
jmp	short loc_1341E
; END OF FUNCTION CHUNK	FOR game_advisor_display_sub2_2
;     ***************************************************************************

loc_1340D:				; DATA XREF: game_check_provinces_in_war:loc_10647  w		 /* DOS offset ---> AAC:D */
nop
; START	OF FUNCTION CHUNK FOR game_advisor_display_sub2_2

loc_1340E:				; CODE XREF: game_advisor_display_sub2_2:loc_133EB  j		 /* DOS offset ---> AAC:E */
; game_advisor_display_sub2_2+15  j
; DATA XREF: ...
or	dh, bl

loc_13410:				; DATA XREF: game_check_provinces_in_war:loc_1064F  w		 /* DOS offset ---> AAD:0 */
mov	dh, dl

loc_13412:				; DATA XREF: game_check_provinces_in_war-FFE1  w		 /* DOS offset ---> AAD:2 */
jmp	short loc_1341E
; END OF FUNCTION CHUNK	FOR game_advisor_display_sub2_2
;     ***************************************************************************
nop

loc_13415:				; CODE XREF: game_advisor_display_sub2_2+37  j		 /* DOS offset ---> AAD:5 */
; DATA XREF: game_check_provinces_in_war:loc_10633  w ...
or	dl, dh

loc_13417:				; DATA XREF: game_check_provinces_in_war-FFED  w		 /* DOS offset ---> AAD:7 */
; dseg:082E  r ...
jmp	short loc_1341E
;     ***************************************************************************

loc_13419:				; DATA XREF: game_check_provinces_in_war:loc_1063B  w		 /* DOS offset ---> AAD:9 */
; game_diplomacy_cancel_alliance_sub-FF9E  w
nop
or	dh, bl
or	dl, dh
; START	OF FUNCTION CHUNK FOR game_advisor_display_sub2_2

loc_1341E:				; CODE XREF: dseg:33FD  j		 /* DOS offset ---> AAD:E */
; game_advisor_display_sub2_2-FFC3  j ...
shr	al, 1

loc_13420:				; DATA XREF: dseg:2A42  r		 /* DOS offset ---> AAE:0 */
; dseg:loc_12AD0  r
shr	al, 1

loc_13422:				; DATA XREF: dseg:2E24  r dseg:2E2B  r		 /* DOS offset ---> AAE:2 */
shr	al, 1

loc_13424:				; DATA XREF: dseg:loc_12E32  r		 /* DOS offset ---> AAE:4 */
; dseg:2E39  r
shr	al, 1

loc_13426:				; DATA XREF: unkfunc_12D86:loc_12DA1  w		 /* DOS offset ---> AAE:6 */
; unkfunc_12D86:loc_12DA5  r ...
and	ax, 7
inc	ax

loc_1342A:				; DATA XREF: dseg:loc_134AA  o		 /* DOS offset ---> AAE:A */
mov	cx, ax
push	cx

loc_1342D:				; CODE XREF: game_advisor_display_sub2_2+75  j		 /* DOS offset ---> AAE:D */
push	di
shr	di, 1
jb	short loc_13449
; END OF FUNCTION CHUNK	FOR game_advisor_display_sub2_2
;     ***************************************************************************
word_13432	dw 0B8h			; CODE XREF: game_advisor_display_sub2_2-FF5B  j
; DATA XREF: s_42CA  r ...
word_13434	dw 8EB8h		; DATA XREF: s_42CA+19  r s_42CA+20  r ...
unk_13436	db 0C0h	;   *		; DATA XREF: s_43E0  r s_43FC:loc_14442  r ...
db 26h
byte_13438	db 8Ah			; DATA XREF: game_display_draw_table_lines+6  w
; s_444C+6B  r ...
byte_13439	db 25h			; DATA XREF: game_display_text_color+1D  w
; game_display_text_color+27  w ...
byte_1343A	db 80h			; DATA XREF: game_display_text_color:loc_1435E  r
; s_4388+15  r ...
unk_1343B	db 0E4h	;   *		; CODE XREF: game_advisor_display_sub2_2+67  j
unk_1343C	db  0Fh			; DATA XREF: s_444C:loc_1447C  w
; s_444C:loc_1450A  w ...
;     ***************************************************************************
mov	al, dl
and	al, 0F0h
or	al, ah
mov	es:[di], al
dec	cx
jz	short loc_1346B
; START	OF FUNCTION CHUNK FOR game_advisor_display_sub2_2

loc_13449:				; CODE XREF: game_advisor_display_sub2_2-FF94  j		 /* DOS offset ---> AB0:9 */
mov	ax, 0B800h

loc_1344C:				; CODE XREF: game_advisor_display_sub2_2+57  j		 /* DOS offset ---> AB0:C */
mov	es, ax

loc_1344E:				; CODE XREF: dseg:23446  j		 /* DOS offset ---> AB0:E */
mov	ah, es:[di]
and	ah, 0F0h

loc_13454:				; CODE XREF: dseg:23419  j dseg:23427  j		 /* DOS offset ---> AB1:4 */
mov	al, dl
shr	al, 1
shr	al, 1
shr	al, 1

loc_1345C:		 /* DOS offset ---> AB1:C */
shr	al, 1
and	al, 0Fh
or	al, ah
mov	es:[di], al
inc	di
dec	cx
jz	short loc_1346B
jmp	short near ptr word_13432
; END OF FUNCTION CHUNK	FOR game_advisor_display_sub2_2
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_display_draw_province_menu

loc_1346B:				; CODE XREF: game_display_draw_province_menu:loc_13334  j		 /* DOS offset ---> AB2:B */
; dseg:3447  j ...
pop	di
; END OF FUNCTION CHUNK	FOR game_display_draw_province_menu
;     ***************************************************************************
word_1346C	dw 358h			; DATA XREF: dseg:4B2C  w
word_1346E	dw 59F8h		; DATA XREF: dseg:4B2F  w
;     ***************************************************************************

loc_13470:				; DATA XREF: dseg:4C9A  r dseg:4CBF  w ...		 /* DOS offset ---> AB3:0 */
sub	cx, ax

loc_13472:				; CODE XREF: dseg:23466  j		 /* DOS offset ---> AB3:2 */
jbe	short loc_13477
jmp	loc_132B2
;     ***************************************************************************

loc_13477:				; CODE XREF: dseg:loc_13472  j		 /* DOS offset ---> AB3:7 */
pop	di
mov	ax, 0A0h ; '  *'
cmp	di, 4000h
jb	short loc_13489
add	di, ax
sub	di, 4000h

loc_13487:				; CODE XREF: dseg:234DD  p dseg:23A5A  p ...		 /* DOS offset ---> AB4:7 */
jmp	short loc_1348D
;     ***************************************************************************

loc_13489:				; CODE XREF: dseg:347F  j		 /* DOS offset ---> AB4:9 */
add	di, 4000h

loc_1348D:				; CODE XREF: dseg:loc_13487  j		 /* DOS offset ---> AB4:D */
pop	cx
pop	bx
dec	cx
jz	short loc_13495

loc_13492:				; CODE XREF: dseg:234C7  j		 /* DOS offset ---> AB5:2 */
jmp	loc_132AD
;     ***************************************************************************

loc_13495:				; CODE XREF: dseg:3490  j		 /* DOS offset ---> AB5:5 */
; DATA XREF: game_gfx_render_graphics+30  r ...
sub	ax, ax
; START	OF FUNCTION CHUNK FOR game_display_draw_province_menu

loc_13497:				; CODE XREF: game_display_draw_province_menu-FF18  j		 /* DOS offset ---> AB5:7 */
pop	di
pop	si
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_display_draw_province_menu
;     ***************************************************************************
push	bp
mov	bp, sp
push	ds
mov	ah, 35h	; '5'
mov	al, 66h	; 'f'
int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
; AL = interrupt number
; Return: ES:BX	= value	of interrupt vector
sub	bx, 8
mov	di, bx

loc_134AA:				; CODE XREF: dseg:234BE  j		 /* DOS offset ---> AB6:A */
lea	si, loc_1342A
mov	cx, 7
cld
repe cmpsb
jnz	short loc_134C4
mov	dx, [bp+6]
mov	ds, word ptr [bp+8]
sub	ah, ah
int	66h		; reserved for user interrupt

loc_134C0:				; CODE XREF: dseg:234AA  j		 /* DOS offset ---> AB8:0 */
or	ax, ax
jz	short loc_134C7

loc_134C4:				; CODE XREF: dseg:34B4  j		 /* DOS offset ---> AB8:4 */
mov	ax, 0FFFFh

loc_134C7:				; CODE XREF: dseg:34C2  j		 /* DOS offset ---> AB8:7 */
inc	ax
pop	ds
pop	bp
retf
;     ***************************************************************************

loc_134CB:				; CODE XREF: dseg:234B2  j		 /* DOS offset ---> AB8:B */
add	[si-32D0h], dh
and	[si], di
add	dh, [bp+di+5]
xor	ax, ax
push	es
push	ax
retf
;     ***************************************************************************
mov	di, 2FA6h
mov	si, _0002_	; [0002]
sub	si, di
cmp	si, 1000h
jb	short loc_134EB
mov	si, 1000h

loc_134EB:				; CODE XREF: dseg:34E6  j		 /* DOS offset ---> ABA:B */
cli
mov	ss, di
add	sp, 0D48Eh
sti
jnb	short loc_13507
push	ss
pop	ds
push	cs
call	loc_139A4
xor	ax, ax
push	ax
push	cs
call	loc_13C2B
mov	ax, 4CFFh
int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
; AL = exit code
;     ***************************************************************************

loc_13507:				; CODE XREF: dseg:34F3  j		 /* DOS offset ---> ABC:7 */
mov	ax, si

loc_13509:				; CODE XREF: dseg:23520  j		 /* DOS offset ---> ABC:9 */
mov	cl, 4
shl	ax, cl
dec	ax
mov	ss:word_3C0EC, ax
mov	bx, 0C68Eh
mov	word ptr ss:[bx], ss
and	sp, 0FFFEh
mov	ss:[bx+4], sp
mov	ax, 0FFFEh
push	ax

loc_13523:				; CODE XREF: dseg:23514  j		 /* DOS offset ---> ABE:3 */
mov	ss:[bx+0Ah], sp
not	ax
push	ax
;     ***************************************************************************
db 36h
db  89h	;   *
word_1352C	dw 667h			; CODE XREF: dseg:23507  j dseg:23522  j
; DATA XREF: ...
dw 8936h
word_13530	dw 867h			; DATA XREF: game_query_user_input_main+13  r
; game_query_user_input_main+19  r ...
word_13532	dw 8936h		; DATA XREF: game_query_user_input_main+10  r
; game_query_user_input_main+2A  r ...
word_13534	dw 8826h		; DATA XREF: dseg:492A  r dseg:4931  r ...
word_13536	dw 3C6h			; DATA XREF: dseg:loc_14957  r
; dseg:495E  r ...
db 0F7h	;   *
;     ***************************************************************************
mov	word ptr ds:loc_2FA62, si
mov	bx, es

loc_1353F:				; CODE XREF: dseg:2359F  j		 /* DOS offset ---> ABF:F */
sub	bx, si
neg	bx
mov	ah, 4Ah
int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
; ES = segment address of block	to change
; BX = new size	in paragraphs
mov	ss:word_3C128, ds
push	ss
pop	es
cld
mov	di, 0C816h
mov	cx, 0D490h
sub	cx, di
xor	ax, ax
rep stosb
push	ss
pop	ds
mov	cx, word ptr ds:loc_3C176
jcxz	short loc_13565
call	cx ; loc_1589A

loc_13565:				; CODE XREF: dseg:3561  j		 /* DOS offset ---> AC2:5 */
nop
push	cs
call	loc_13B82
;     ***************************************************************************
byte_1356A	db 90h			; DATA XREF: game_audio_start_music:loc_16F68  r
; game_audio_start_music+63  w ...
db 0Eh
word_1356C	dw 81E8h		; DATA XREF: game_send_func:loc_151F7  r
; game_build_fort_map_fort_placement_interface-FF88  w ...
word_1356E	dw 3304h		; DATA XREF: game_gfx_blk_bkgrnd_shape_3+15  w
; game_gfx_blk_bkgrnd_shape_1:loc_14DCB  w ...
word_13570	dw 90EDh		; DATA XREF: s_4EB4:loc_14ED9  w
; game_diplomacy_threaten-FFF0  w ...
word_13572	dw 0E80Eh		; DATA XREF: s_4D48+23  w
; game_gfx_blk_bkgrnd_shape_3:loc_14DA3  w ...
word_13574	dw 4Eh			; DATA XREF: game_gfx_blk_bkgrnd_shape_3:loc_14DAF  w
; s_4EB4+1F  w ...
word_13576	dw 1F16h		; DATA XREF: game_gfx_buffer_main_data_window+2B  w
; dseg:loc_1FA86  w ...
word_13578	dw 36FFh		; DATA XREF: game_display_generals_action_list_query:loc_164A0  w
; game_display_generals_action_list_query:loc_164D0  r ...
byte_1357A	db 0E9h			; DATA XREF: game_display_generals_action_list+4F  r
; game_display_generals_action_list:loc_16201  r	...
db 0C6h	;   *
db 0FFh
db  36h	; 6
db 0E7h	;   *
db 0C6h	;   *
;     ***************************************************************************
push	ds:word_3C145
call	far ptr	6A3h:43Ch
push	ax
push	cs
call	loc_13689
retn
;     ***************************************************************************
mov	ax, cs:word_135C1
mov	ds, ax
mov	ax, 3

loc_13598:				; CODE XREF: dseg:23561  j dseg:23574  j ...		 /* DOS offset ---> AC5:8 */
mov	ss:word_3C0EA, 3689h
push	ax
push	cs
call	loc_139A4
push	cs
call	loc_13C2B

loc_135A8:				; CODE XREF: dseg:2360B  p		 /* DOS offset ---> AC6:8 */
cmp	word ptr ss:loc_3C176+2, 0D6D6h
;     ***************************************************************************
db  75h	; u
db    7
db  58h	; X
db  50h	; P
db  36h	; 6
db 0FFh
db  16h
db  1Ch
db 0C7h	;   *
db 0B8h	;   *
db 0FFh
db    0
db  50h	; P
db  0Eh
db 0FFh
db  16h
db  8Ah	;   *
db 0C6h	;   *
word_135C1	dw 2FA6h		; DATA XREF: dseg:358F  r
align 2
unk_135C4	db 0B8h	;   *		; CODE XREF: dseg:23616  p
db    0
db  35h	; 5
db 0CDh	;   *
db  21h	; !
;     ***************************************************************************
mov	word ptr ds:dword_3C114, bx
mov	word ptr ds:dword_3C114+2, es
push	cs
pop	ds
mov	ax, 2500h
mov	dx, 358Fh
int	21h		; DOS -	SET INTERRUPT VECTOR
; AL = interrupt number
; DS:DX	= new vector to	be used	for specified interrupt
push	ss
pop	ds
mov	cx, word ptr ds:loc_3C189+1

loc_135E1:				; CODE XREF: game_advisor_display_sub+2A  j		 /* DOS offset ---> ACA:1 */
jcxz	short loc_13611
mov	es, ds:word_3C128

loc_135E7:				; CODE XREF: game_advisor_display_sub+1E  j		 /* DOS offset ---> ACA:7 */
; game_advisor_display_sub+24  j
mov	si, es:2Ch
lds	ax, dword ptr ds:loc_3C18B+1
; START	OF FUNCTION CHUNK FOR game_advisor_display_sub

loc_135F0:				; CODE XREF: game_advisor_display_sub:loc_235E0  j		 /* DOS offset ---> ACB:0 */
; game_advisor_display_sub+3A  j
mov	dx, ds
xor	bx, bx
call	dword ptr ss:loc_3C186+2
jnb	short loc_13600
push	ss
pop	ds
jmp	loc_139C6
;     ***************************************************************************

loc_13600:				; CODE XREF: game_advisor_display_sub-FFB5  j		 /* DOS offset ---> ACC:0 */
lds	ax, dword ptr ss:loc_3C190

loc_13605:				; CODE XREF: game_spy_rival_tigers_ruler_2_result+53  P		 /* DOS offset ---> ACC:5 */
; game_spy_rival_tigers_ruler_2_result+9D  P ...
mov	dx, ds

loc_13607:		 /* DOS offset ---> ACC:7 */
mov	bx, 3
call	dword ptr ss:loc_3C186+2
push	ss
pop	ds

loc_13611:				; CODE XREF: dseg:loc_135E1  j		 /* DOS offset ---> ACD:1 */
mov	es, ds:word_3C128
mov	cx, es:2Ch
jcxz	short loc_1365A
mov	es, cx
xor	di, di

loc_13620:				; CODE XREF: game_advisor_display_sub-FF75  j		 /* DOS offset ---> ACE:0 */
cmp	byte ptr es:[di], 0
jz	short loc_1365A
mov	cx, 0Dh

loc_13629:				; CODE XREF: game_advisor_display_sub_3+5  j		 /* DOS offset ---> ACE:9 */
mov	si, 0C6A6h
repe cmpsb
jz	short loc_1363B
mov	cx, 7FFFh
xor	ax, ax
repne scasb
jnz	short loc_1365A
jmp	short loc_13620
;     ***************************************************************************

loc_1363B:				; CODE XREF: game_advisor_display_sub-FF80  j		 /* DOS offset ---> ACF:B */
push	es
push	ds
pop	es
pop	ds
mov	si, di
mov	di, 0C6D1h
mov	cl, 4

loc_13646:				; CODE XREF: game_advisor_display_sub-FF58  j		 /* DOS offset ---> AD0:6 */
lodsb
sub	al, 41h	; 'A'
jb	short loc_13658

loc_1364B:				; CODE XREF: game_advisor_display_sub_3+22  j		 /* DOS offset ---> AD0:B */
shl	al, cl
xchg	ax, dx
lodsb
sub	al, 41h	; 'A'
jb	short loc_13658
or	al, dl
stosb
jmp	short loc_13646
; END OF FUNCTION CHUNK	FOR game_advisor_display_sub
;     ***************************************************************************

loc_13658:				; CODE XREF: game_advisor_display_sub-FF65  j		 /* DOS offset ---> AD1:8 */
; game_advisor_display_sub-FF5D  j
push	ss
;     ***************************************************************************
db  1Fh
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_advisor_display_sub

loc_1365A:				; CODE XREF: game_advisor_display_sub-FF94  j		 /* DOS offset ---> AD1:A */
; game_advisor_display_sub-FF8A  j ...
mov	bx, 4

loc_1365D:				; CODE XREF: game_advisor_display_sub-FF3A  j		 /* DOS offset ---> AD1:D */
and	byte ptr [bx-392Fh], 0BFh
mov	ax, 4400h
int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
; BX = file or device handle
jb	short loc_13673
test	dl, 80h

loc_1366C:				; CODE XREF: dseg:23666  j		 /* DOS offset ---> AD2:C */
jz	short loc_13673
or	byte ptr [bx-392Fh], 40h

loc_13673:				; CODE XREF: game_advisor_display_sub-FF47  j		 /* DOS offset ---> AD3:3 */
; game_advisor_display_sub:loc_1366C  j
dec	bx
jns	short loc_1365D

loc_13676:				; CODE XREF: dseg:2366A  j		 /* DOS offset ---> AD3:6 */
mov	si, 0C734h

loc_13679:		 /* DOS offset ---> AD3:9 */
mov	di, 0C734h
call	loc_13739

loc_1367F:		 /* DOS offset ---> AD3:F */
mov	si, 0C734h
mov	di, 0C734h
call	loc_13739
retf
; END OF FUNCTION CHUNK	FOR game_advisor_display_sub
;     ***************************************************************************

loc_13689:				; CODE XREF: dseg:358B  p		 /* DOS offset ---> AD4:9 */
push	bp
mov	bp, sp
xor	cx, cx
jmp	short loc_136AA
;     ***************************************************************************
push	bp
mov	bp, sp
mov	cx, 1
jmp	short loc_136AA
;     ***************************************************************************
push	bp
mov	bp, sp
push	si
push	di
mov	cx, 100h
jmp	short loc_136AA
;     ***************************************************************************
push	bp
mov	bp, sp
push	si
push	di
mov	cx, 101h

loc_136AA:				; CODE XREF: dseg:368E  j dseg:3696  j ...		 /* DOS offset ---> AD6:A */
push	cx
or	cl, cl
jnz	short loc_136CD
mov	si, 0C976h
mov	di, 0C976h

loc_136B5:				; CODE XREF: game_messenger_travel_results+26  j		 /* DOS offset ---> AD7:5 */
call	loc_13739

loc_136B8:				; CODE XREF: dseg:236B4  j		 /* DOS offset ---> AD7:8 */
mov	si, 0C734h

loc_136BB:				; CODE XREF: dseg:236B8  j		 /* DOS offset ---> AD7:B */
mov	di, 0C734h
call	loc_13739
cmp	word ptr loc_1C716+2, 0D6D6h
jnz	short loc_136CD

loc_136C9:				; CODE XREF: game_messenger_travel_results+43  j		 /* DOS offset ---> AD8:9 */
call	word ptr loc_1C71C+2

loc_136CD:				; CODE XREF: dseg:36AD  j dseg:36C7  j		 /* DOS offset ---> AD8:D */
mov	si, 0C734h
; START	OF FUNCTION CHUNK FOR game_messenger_travel_results

loc_136D0:				; CODE XREF: game_messenger_travel_results+29  j		 /* DOS offset ---> AD9:0 */
mov	di, 0C734h
call	loc_13739
mov	si, 0C734h
mov	di, 0C734h
call	loc_13739
nop
push	cs
call	loc_139CC

loc_136E4:				; CODE XREF: game_messenger_travel_results+5D  j		 /* DOS offset ---> ADA:4 */
or	ax, ax
jz	short loc_136F9
pop	ax

loc_136E9:				; CODE XREF: game_messenger_travel_results+2C  j		 /* DOS offset ---> ADA:9 */
or	ah, ah
push	ax
jnz	short loc_136F9
cmp	[bp+arg_0], 0
jnz	short loc_136F9

loc_136F4:				; CODE XREF: dseg:236EB  j		 /* DOS offset ---> ADB:4 */
mov	[bp+arg_0], 0FFh

loc_136F9:				; CODE XREF: game_messenger_travel_results-FF9A  j		 /* DOS offset ---> ADB:9 */
; game_messenger_travel_results-FF94  j ...
call	loc_1370C
pop	ax

loc_136FD:				; CODE XREF: game_messenger_travel_results+77  j		 /* DOS offset ---> ADB:D */
or	ah, ah
jnz	short loc_13708

loc_13701:				; CODE XREF: game_messenger_travel_results+48  j		 /* DOS offset ---> ADC:1 */
; game_messenger_travel_results+4D  j ...
mov	ax, [bp+arg_0]
mov	ah, 4Ch
int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
; AL = exit code
;     ***************************************************************************

loc_13708:				; CODE XREF: game_messenger_travel_results-FF81  j		 /* DOS offset ---> ADC:8 */
pop	di
pop	si

loc_1370A:		 /* DOS offset ---> ADC:A */
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_messenger_travel_results
;     ***************************************************************************

loc_1370C:				; CODE XREF: game_messenger_travel_results:loc_136F9  p		 /* DOS offset ---> ADC:C */
mov	cx, word ptr loc_1C728+2
;     ***************************************************************************
db 0E3h	;   *
db    7
db 0BBh	;   *
db    2
db    0
db 0FFh
db  1Eh
db  28h	; (
db 0C7h	;   *
db  1Eh
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_messenger_travel_results

loc_1371A:				; CODE XREF: game_messenger_travel_results+2F  j		 /* DOS offset ---> ADD:A */
lds	dx, dword ptr loc_1C6B0+4
; END OF FUNCTION CHUNK	FOR game_messenger_travel_results
;     ***************************************************************************
db 0B8h	;   *
db    0
db  25h	; %
db 0CDh	;   *
db  21h	; !
db  1Fh
db  80h	;   *
db  3Eh	; >
db 0F2h	;   *
db 0C6h	;   *
db    0
db  74h	; t
db  0Dh
db  1Eh
db 0A0h	;   *
db 0F3h	;   *
db 0C6h	;   *
db 0C5h	;   *
db  16h
db 0F4h	;   *
db 0C6h	;   *
db 0B4h	;   *
db  25h	; %
db 0CDh	;   *
db  21h	; !
db  1Fh
db 0C3h	;   *
;     ***************************************************************************

loc_13739:				; CODE XREF: game_advisor_display_sub-FF32  p		 /* DOS offset ---> ADF:9 */
; game_advisor_display_sub-FF29  p ...
cmp	si, di
;     ***************************************************************************
db  73h	; s
db  0Eh
db  83h	;   *
db 0EFh	;   *
db    4
;     ***************************************************************************

loc_13740:				; CODE XREF: dseg:2373A  j		 /* DOS offset ---> AE0:0 */
mov	ax, [di]
or	ax, [di+2]
;     ***************************************************************************
db  74h	; t
db 0F2h	;   *
db 0FFh
db  1Dh
db 0EBh	;   *
db 0EEh	;   *
db 0C3h	;   *
;     ***************************************************************************
jmp	near ptr loc_13CB7+1
;     ***************************************************************************
add	[di-75h], dl

loc_13752:				; CODE XREF: dseg:23711  j		 /* DOS offset ---> AE1:2 */
in	al, dx
push	si
push	di
sub	sp, 0Ah
mov	byte ptr [bp-0Ah], 0CDh	; '  *'
; START	OF FUNCTION CHUNK FOR game_messenger_travel_results_2

loc_1375C:				; CODE XREF: game_messenger_travel_results_2+12  j		 /* DOS offset ---> AE1:C */
mov	ax, [bp+arg_2]
mov	[bp-9],	al
cmp	al, 25h	; '%'

loc_13764:				; CODE XREF: game_messenger_travel_results_2+15  j		 /* DOS offset ---> AE2:4 */
jz	short loc_13770
cmp	al, 26h	; '&'

loc_13768:				; CODE XREF: game_messenger_travel_results_2:loc_23759  j		 /* DOS offset ---> AE2:8 */
jz	short loc_13770
mov	[bp+var_8], 0CBh ; '  *'

loc_1376E:		 /* DOS offset ---> AE2:E */
jmp	short loc_1377C
;     ***************************************************************************

loc_13770:				; CODE XREF: game_messenger_travel_results_2:loc_13764  j		 /* DOS offset ---> AE3:0 */
; game_messenger_travel_results_2:loc_13768  j
mov	[bp+var_6], 0CBh ; '  *'

loc_13774:				; CODE XREF: game_messenger_travel_results_2+1F  j		 /* DOS offset ---> AE3:4 */
mov	[bp+var_7], 44h	; 'D'
mov	[bp+var_8], 44h	; 'D'

loc_1377C:				; CODE XREF: game_messenger_travel_results_2:loc_1376E  j		 /* DOS offset ---> AE3:C */
; dseg:FB8A  P ...
mov	[bp+var_C], ss
; END OF FUNCTION CHUNK	FOR game_messenger_travel_results_2
;     ***************************************************************************
db  8Dh	;   *
db  46h	; F
db 0F6h	;   *
db 89h
db  46h	; F
word_13784	dw 8BF2h		; DATA XREF: dseg:CB3C  r s_CBE8+C  r ...
db  7Eh	; ~
db    8
;     ***************************************************************************
mov	ax, [di]
mov	bx, [di+2]

loc_1378D:		 /* DOS offset ---> AE4:D */
mov	cx, [di+4]
mov	dx, [di+6]
mov	si, [di+8]

loc_13796:				; CODE XREF: dseg:23776  j dseg:23792  j		 /* DOS offset ---> AE5:6 */
mov	di, [di+0Ah]
push	bp
call	dword ptr [bp-0Eh]
pop	bp
cld
push	di
mov	di, [bp+0Ah]
mov	[di], ax
mov	[di+2],	bx
mov	[di+4],	cx
mov	[di+6],	dx
mov	[di+8],	si
pop	word ptr [di+0Ah]
jb	short loc_137BA
xor	si, si
jmp	short loc_137C3
;     ***************************************************************************

loc_137BA:				; CODE XREF: dseg:37B4  j		 /* DOS offset ---> AE7:A */
push	cs
call	loc_13C84
mov	si, 1
mov	ax, [di]

loc_137C3:				; CODE XREF: dseg:37B8  j		 /* DOS offset ---> AE8:3 */
mov	[di+0Ch], si
add	sp, 0Ah
pop	di
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
add	[di-75h], dl
in	al, dx
push	si
push	di
mov	di, [bp+6]
mov	ax, [di]
mov	bx, [di+2]
mov	cx, [di+4]
mov	dx, [di+6]

loc_137E3:				; CODE XREF: dseg:237D4  j		 /* DOS offset ---> AEA:3 */
mov	si, [di+8]
mov	di, [di+0Ah]

loc_137E9:				; CODE XREF: dseg:23699  p dseg:23B8D  p ...		 /* DOS offset ---> AEA:9 */
int	21h		; DOS -
push	di
mov	di, [bp+8]
mov	[di], ax
mov	[di+2],	bx
mov	[di+4],	cx
mov	[di+6],	dx
mov	[di+8],	si
pop	word ptr [di+0Ah]
jb	short loc_13806

loc_13802:				; CODE XREF: dseg:23824  j		 /* DOS offset ---> AEC:2 */
xor	si, si
jmp	short loc_1380F
;     ***************************************************************************

loc_13806:				; CODE XREF: dseg:3800  j		 /* DOS offset ---> AEC:6 */
push	cs
call	loc_13C84

loc_1380A:				; CODE XREF: dseg:23819  j		 /* DOS offset ---> AEC:A */
mov	si, 1
mov	ax, [di]

loc_1380F:				; CODE XREF: dseg:3804  j		 /* DOS offset ---> AEC:F */
mov	[di+0Ch], si
pop	di
pop	si
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

math_divide_2_16bit_values proc	far	; CODE XREF: s_3984+13  p

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
;     ***************************************************************************

loc_1381B:				; CODE XREF: dseg:23809  j		 /* DOS offset ---> AED:B */
push	di
push	si
push	bx
xor	di, di
mov	ax, [bp+arg_2]
or	ax, ax
jge	short loc_13838
inc	di

loc_13828:				; CODE XREF: dseg:23813  j		 /* DOS offset ---> AEE:8 */
mov	dx, [bp+arg_0]
neg	ax

loc_1382D:				; CODE XREF: dseg:23826  j		 /* DOS offset ---> AEE:D */
neg	dx
sbb	ax, 0
mov	[bp+arg_2], ax
mov	[bp+arg_0], dx

loc_13838:				; CODE XREF: math_divide_2_16bit_values+D  j		 /* DOS offset ---> AEF:8 */
mov	ax, [bp+arg_6]
or	ax, ax
jge	short loc_13850
inc	di
mov	dx, [bp+arg_4]
neg	ax
neg	dx
sbb	ax, 0
mov	[bp+arg_6], ax
mov	[bp+arg_4], dx

loc_13850:				; CODE XREF: math_divide_2_16bit_values+25  j		 /* DOS offset ---> AF1:0 */
or	ax, ax
jnz	short loc_13869
mov	cx, [bp+arg_4]
mov	ax, [bp+arg_2]
xor	dx, dx
div	cx
mov	bx, ax

loc_13860:				; CODE XREF: dseg:1E6A4  P Q_1E7BE+E  P ...		 /* DOS offset ---> AF2:0 */
mov	ax, [bp+arg_0]
div	cx
mov	dx, bx
jmp	short loc_138A1
;     ***************************************************************************

loc_13869:				; CODE XREF: math_divide_2_16bit_values+3A  j		 /* DOS offset ---> AF2:9 */
mov	bx, ax
mov	cx, [bp+arg_4]
mov	dx, [bp+arg_2]
mov	ax, [bp+arg_0]

loc_13874:				; CODE XREF: math_divide_2_16bit_values+66  j		 /* DOS offset ---> AF3:4 */
shr	bx, 1
rcr	cx, 1
shr	dx, 1

loc_1387A:				; CODE XREF: game_display_draw_province_header_data+B  j		 /* DOS offset ---> AF3:A */
; game_display_draw_province_header_data+13  j
rcr	ax, 1
or	bx, bx
jnz	short loc_13874
div	cx
mov	si, ax
mul	[bp+arg_6]
xchg	ax, cx
mov	ax, [bp+arg_4]
mul	si
add	dx, cx
jb	short loc_1389D
cmp	dx, [bp+arg_2]
ja	short loc_1389D
jb	short loc_1389E
cmp	ax, [bp+arg_0]
jbe	short loc_1389E

loc_1389D:				; CODE XREF: math_divide_2_16bit_values+77  j		 /* DOS offset ---> AF5:D */
; math_divide_2_16bit_values+7C  j
dec	si

loc_1389E:				; CODE XREF: math_divide_2_16bit_values+7E  j		 /* DOS offset ---> AF5:E */
; math_divide_2_16bit_values+83  j
xor	dx, dx
xchg	ax, si

loc_138A1:				; CODE XREF: math_divide_2_16bit_values+4F  j		 /* DOS offset ---> AF6:1 */
dec	di
jnz	short loc_138AB
neg	dx
neg	ax
sbb	dx, 0

loc_138AB:				; CODE XREF: math_divide_2_16bit_values+8A  j		 /* DOS offset ---> AF6:B */
pop	bx
pop	si
pop	di
pop	bp
retf	8
math_divide_2_16bit_values endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

math_multiply_2_16bit_values proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp
mov	bp, sp
mov	ax, [bp+arg_2]
mov	cx, [bp+arg_6]
or	cx, ax
mov	cx, [bp+arg_4]
jnz	short Continue_001
mov	ax, [bp+arg_0]

loc_138C5:				; CODE XREF: dseg:238EB  j		 /* DOS offset ---> AF8:5 */
mul	cx
pop	bp
retf	8
;     ***************************************************************************

Continue_001:				; CODE XREF: math_multiply_2_16bit_values+E  j
push	bx
mul	cx
mov	bx, ax
mov	ax, [bp+arg_0]
mul	[bp+arg_6]
add	bx, ax
mov	ax, [bp+arg_0]
mul	cx
add	dx, bx
pop	bx
pop	bp
retf	8
math_multiply_2_16bit_values endp

;     ***************************************************************************
push	bp
mov	bp, sp
push	bx
push	di
xor	di, di
mov	ax, [bp+8]
or	ax, ax
jge	short loc_13903

loc_138F2:				; CODE XREF: dseg:238E2  j		 /* DOS offset ---> AFB:2 */
inc	di
mov	dx, [bp+6]
neg	ax
neg	dx

loc_138FA:				; CODE XREF: dseg:2392C  p		 /* DOS offset ---> AFB:A */
sbb	ax, 0
;     ***************************************************************************
db  89h	;   *
unk_138FE	db  46h	; F		; CODE XREF: game_display_draw_province_header_data+8A  j
db    8
db  89h	;   *
db  56h	; V
db    6
;     ***************************************************************************

loc_13903:				; CODE XREF: dseg:38F0  j		 /* DOS offset ---> AFC:3 */
mov	ax, [bp+0Ch]
or	ax, ax
jge	short loc_1391A
mov	dx, [bp+0Ah]
neg	ax
neg	dx
sbb	ax, 0
mov	[bp+0Ch], ax
mov	[bp+0Ah], dx

loc_1391A:				; CODE XREF: dseg:3908  j		 /* DOS offset ---> AFD:A */
or	ax, ax
jnz	short loc_13936

loc_1391E:				; CODE XREF: dseg:23901  j dseg:23917  j		 /* DOS offset ---> AFD:E */
mov	cx, [bp+0Ah]
mov	ax, [bp+8]
xor	dx, dx
div	cx
mov	ax, [bp+6]
div	cx
mov	ax, dx
xor	dx, dx
dec	di
jns	short loc_13977

loc_13934:				; CODE XREF: dseg:2378A  p dseg:239E5  p		 /* DOS offset ---> AFF:4 */
jmp	short loc_1397E
;     ***************************************************************************

loc_13936:				; CODE XREF: dseg:391C  j		 /* DOS offset ---> AFF:6 */
mov	bx, ax
mov	cx, [bp+0Ah]
mov	dx, [bp+8]
mov	ax, [bp+6]

loc_13941:				; CODE XREF: dseg:394B  j		 /* DOS offset ---> B00:1 */
shr	bx, 1
rcr	cx, 1
shr	dx, 1
rcr	ax, 1
or	bx, bx
jnz	short loc_13941
div	cx
mov	cx, ax
mul	word ptr [bp+0Ch]
xchg	ax, cx
mul	word ptr [bp+0Ah]
add	dx, cx
jb	short loc_13968
cmp	dx, [bp+8]
ja	short loc_13968

loc_13961:				; CODE XREF: dseg:23957  j		 /* DOS offset ---> B02:1 */
jb	short loc_1396E
cmp	ax, [bp+6]
jbe	short loc_1396E

loc_13968:				; CODE XREF: dseg:395A  j dseg:395F  j		 /* DOS offset ---> B02:8 */
sub	ax, [bp+0Ah]
sbb	dx, [bp+0Ch]

loc_1396E:				; CODE XREF: dseg:loc_13961  j		 /* DOS offset ---> B02:E */
; dseg:3966  j
sub	ax, [bp+6]
sbb	dx, [bp+8]
dec	di
jns	short loc_1397E

loc_13977:				; CODE XREF: dseg:3932  j		 /* DOS offset ---> B03:7 */
neg	dx
neg	ax
sbb	dx, 0

loc_1397E:				; CODE XREF: dseg:loc_13934  j		 /* DOS offset ---> B03:E */
; dseg:3975  j
pop	di
pop	bx
pop	bp
retf	8

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_3984		proc far		 /* DOS offset ---> B04:4 */

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

push	bp
mov	bp, sp
push	bx
mov	bx, [bp+arg_0]
push	[bp+arg_4]
push	[bp+arg_2]
push	word ptr [bx+2]
push	word ptr [bx]
push	cs
call	near ptr math_divide_2_16bit_values
mov	[bx+2],	dx
mov	[bx], ax
pop	bx
pop	bp
retf	6
s_3984		endp		 /* DOS offset ---> B04:4 */

;     ***************************************************************************

loc_139A4:				; CODE XREF: dseg:34F8  p dseg:35A1  p ...		 /* DOS offset ---> B06:4 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db 0B8h	;   *
db 0FCh	;   *
db    0
db  50h	; P
db  0Eh
db 0E8h	;   *
db  7Ch	; |
db    2
db  83h	;   *
db  3Eh	; >
db 0FAh	;   *
db 0C6h	;   *
db    0
db  74h	; t
unk_139B5	db    4			; CODE XREF: game_display_draw_province_header_data:loc_238FA  j
; game_display_draw_province_header_data+12E  j
db 0FFh
db  1Eh
db 0F8h	;   *
db 0C6h	;   *
db 0B8h	;   *
db 0FFh
db    0
db  50h	; P
db  0Eh
db 0E8h	;   *
db  69h	; i
unk_139C1	db    2			; CODE XREF: game_display_draw_province_header_data+15  j
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************

loc_139C6:				; CODE XREF: game_advisor_display_sub-FFB1  j		 /* DOS offset ---> B08:6 */
; s_1FC0E-FF1C  P ...
mov	ax, 2
;     ***************************************************************************
db 0E9h	;   *
db 0D3h	;   *
db 0FBh	;   *
;     ***************************************************************************

loc_139CC:				; CODE XREF: game_messenger_travel_results-FF9F  p		 /* DOS offset ---> B08:C */
push	si
;     ***************************************************************************
db  33h	; 3
unk_139CE	db 0F6h	;   *		; CODE XREF: dseg:239C3  j
db 0B9h	;   *
db  42h	; B
db    0
db  32h	; 2
db 0E4h	;   *
db 0FCh	;   *
;     ***************************************************************************

loc_139D5:				; CODE XREF: dseg:39D8  j		 /* DOS offset ---> B09:5 */
lodsb
xor	ah, al
loop	loc_139D5
xor	ah, 55h
jz	short loc_139EE
push	cs
call	loc_139A4
;     ***************************************************************************
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  0Eh
db 0E8h	;   *
db  40h	; @
db    2
db 0B8h	;   *
db    1
db    0
;     ***************************************************************************

loc_139EE:				; CODE XREF: dseg:39DD  j		 /* DOS offset ---> B0A:E */
pop	si
retf
;     ***************************************************************************
pop	word ptr loc_1C6FC
pop	word ptr loc_1C6FE
mov	ah, 30h
int	21h		; DOS -	GET DOS	VERSION
; Return: AL = major version number (00h for DOS 1.x)

loc_139FC:				; CODE XREF: game_diplomacy_threaten_calc+69  j		 /* DOS offset ---> B0B:C */
mov	word ptr loc_1C6C9+1, ax
mov	dx, 1
cmp	al, 2
jz	short loc_13A2F
mov	es, word ptr loc_1C6C6+2
mov	es, word ptr es:2Ch
mov	word ptr loc_1C6EB+2, es
xor	ax, ax
cwd
mov	cx, 8000h
xor	di, di

loc_13A1B:				; CODE XREF: dseg:3A1E  j		 /* DOS offset ---> B0D:B */
repne scasb
scasb
jnz	short loc_13A1B
inc	di
inc	di

loc_13A22:				; CODE XREF: dseg:239EC  j dseg:239FE  j ...		 /* DOS offset ---> B0E:2 */
mov	word ptr loc_1C6EB, di

loc_13A26:				; CODE XREF: dseg:2356C  p dseg:239F7  p		 /* DOS offset ---> B0E:6 */
mov	cx, 0FFFFh

loc_13A29:		 /* DOS offset ---> B0E:9 */
repne scasb
not	cx
mov	dx, cx

loc_13A2F:				; CODE XREF: dseg:3A04  j		 /* DOS offset ---> B0E:F */
mov	di, 1
mov	si, 81h	; '  *'
mov	ds, word ptr loc_1C6C6+2
; START	OF FUNCTION CHUNK FOR game_diplomacy_threaten_check

loc_13A39:				; CODE XREF: game_diplomacy_threaten_check-10034  j		 /* DOS offset ---> B0F:9 */
; game_diplomacy_threaten_check-10030  j	...
lodsb

loc_13A3A:				; CODE XREF: game_diplomacy_threaten_calc+29  j		 /* DOS offset ---> B0F:A */
; game_diplomacy_threaten_calc+3C  j ...
cmp	al, 20h	; ' '
jz	short loc_13A39

loc_13A3E:				; CODE XREF: game_diplomacy_threaten_calc+1B  j		 /* DOS offset ---> B0F:E */
cmp	al, 9
jz	short loc_13A39
cmp	al, 0Dh
jz	short loc_13AB5
or	al, al
jz	short loc_13AB5
inc	di

loc_13A4B:				; CODE XREF: game_diplomacy_threaten_check-FFFA  j		 /* DOS offset ---> B10:B */
dec	si

loc_13A4C:				; CODE XREF: game_diplomacy_threaten_check-1000A  j		 /* DOS offset ---> B10:C */
; game_diplomacy_threaten_check-FFF0  j ...
lodsb
cmp	al, 20h	; ' '
jz	short loc_13A39
cmp	al, 9
jz	short loc_13A39
cmp	al, 0Dh
jz	short loc_13AB5
or	al, al
jz	short loc_13AB5
cmp	al, 22h	; '"'
jz	short loc_13A85
cmp	al, 5Ch	; '\'
jz	short loc_13A68
inc	dx
jmp	short loc_13A4C
;     ***************************************************************************

loc_13A68:				; CODE XREF: game_diplomacy_threaten_check-1000D  j		 /* DOS offset ---> B12:8 */
xor	cx, cx

loc_13A6A:				; CODE XREF: game_diplomacy_threaten_check-10002  j		 /* DOS offset ---> B12:A */
inc	cx
lodsb
cmp	al, 5Ch	; '\'
jz	short loc_13A6A
cmp	al, 22h	; '"'
jz	short loc_13A78

loc_13A74:				; CODE XREF: dseg:23AB7  j		 /* DOS offset ---> B13:4 */
add	dx, cx
jmp	short loc_13A4B
;     ***************************************************************************

loc_13A78:				; CODE XREF: game_diplomacy_threaten_check-FFFE  j		 /* DOS offset ---> B13:8 */
mov	ax, cx
shr	cx, 1

loc_13A7C:				; CODE XREF: dseg:23A73  j		 /* DOS offset ---> B13:C */
adc	dx, cx
test	al, 1
jnz	short loc_13A4C
jmp	short loc_13A85
;     ***************************************************************************

loc_13A84:				; CODE XREF: game_diplomacy_threaten_check-FFC9  j		 /* DOS offset ---> B14:4 */
dec	si

loc_13A85:				; CODE XREF: game_diplomacy_threaten_check-10011  j		 /* DOS offset ---> B14:5 */
; game_diplomacy_threaten_check-FFEE  j ...
lodsb
cmp	al, 0Dh
jz	short loc_13AB5
or	al, al

loc_13A8C:		 /* DOS offset ---> B14:C */
jz	short loc_13AB5

loc_13A8E:				; CODE XREF: game_diplomacy_threaten_check+35  j		 /* DOS offset ---> B14:E */
; game_diplomacy_threaten_check+47  j ...
cmp	al, 22h	; '"'
jz	short loc_13A4C
cmp	al, 5Ch	; '\'
jz	short loc_13A99

loc_13A96:				; CODE XREF: game_diplomacy_threaten_check+17  j		 /* DOS offset ---> B15:6 */
inc	dx
jmp	short loc_13A85
;     ***************************************************************************

loc_13A99:				; CODE XREF: game_diplomacy_threaten_check-FFDC  j		 /* DOS offset ---> B15:9 */
; game_diplomacy_threaten_check+3E  j
xor	cx, cx

loc_13A9B:				; CODE XREF: game_diplomacy_threaten_check-FFD1  j		 /* DOS offset ---> B15:B */
inc	cx
lodsb
cmp	al, 5Ch	; '\'
jz	short loc_13A9B

loc_13AA1:				; CODE XREF: dseg:23A8B  j dseg:23A94  j		 /* DOS offset ---> B16:1 */
cmp	al, 22h	; '"'
jz	short loc_13AA9
add	dx, cx
jmp	short loc_13A84
;     ***************************************************************************

loc_13AA9:				; CODE XREF: game_diplomacy_threaten_check-FFCD  j		 /* DOS offset ---> B16:9 */
mov	ax, cx
shr	cx, 1
adc	dx, cx

loc_13AAF:				; CODE XREF: game_diplomacy_threaten_check+1D  j		 /* DOS offset ---> B16:F */
test	al, 1
jnz	short loc_13A85
jmp	short loc_13A4C
;     ***************************************************************************

loc_13AB5:				; CODE XREF: game_diplomacy_threaten_check-1002C  j		 /* DOS offset ---> B17:5 */
; game_diplomacy_threaten_check-10028  j	...
push	ss
pop	ds

loc_13AB7:				; CODE XREF: dseg:23AA0  j dseg:23A9A  j ...		 /* DOS offset ---> B17:7 */
mov	ds:word_3C145, di
add	dx, di
inc	di
shl	di, 1

loc_13AC0:				; CODE XREF: dseg:23AAF  p dseg:23BD1  p		 /* DOS offset ---> B18:0 */
add	dx, di
; END OF FUNCTION CHUNK	FOR game_diplomacy_threaten_check
;     ***************************************************************************
db  42h	; B
db  80h	;   *
db 0E2h	;   *
db 0FEh	;   *
db  2Bh	; +
db 0E2h	;   *
db  8Bh	;   *
db 0C4h	;   *
db 0A3h	;   *
db 0E7h	;   *
db 0C6h	;   *
db  8Bh	;   *
db 0D8h	;   *
db    3
db 0FBh	;   *
db  16h
db    7
db  36h	; 6
db  89h	;   *
db  3Fh	; ?
db  43h	; C
db  43h	; C
db 0C5h	;   *
db  36h	; 6
db 0EBh	;   *
db 0C6h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_diplomacy_threaten_check

loc_13ADC:				; CODE XREF: game_diplomacy_threaten_check:loc_13AE0  j		 /* DOS offset ---> B19:C */
lodsb
stosb
or	al, al

loc_13AE0:				; CODE XREF: game_diplomacy_threaten_check+87  j		 /* DOS offset ---> B1A:0 */
jnz	short loc_13ADC
mov	ds, ss:word_3C128
mov	si, 81h	; '  *'
jmp	short loc_13AEF
;     ***************************************************************************

loc_13AEC:				; CODE XREF: game_diplomacy_threaten_check-FF67  j		 /* DOS offset ---> B1A:C */
; game_diplomacy_threaten_check-FF63  j
xor	ax, ax
stosb

loc_13AEF:				; CODE XREF: game_diplomacy_threaten_check-FF86  j		 /* DOS offset ---> B1A:F */
; game_diplomacy_threaten_check-FF7E  j ...
lodsb

loc_13AF0:				; CODE XREF: dseg:23AE5  j dseg:23AEB  j		 /* DOS offset ---> B1B:0 */
cmp	al, 20h	; ' '
jz	short loc_13AEF
cmp	al, 9
jz	short loc_13AEF

loc_13AF8:				; CODE XREF: game_diplomacy_threaten_check+6E  j		 /* DOS offset ---> B1B:8 */
cmp	al, 0Dh
jz	short loc_13B78
or	al, al
jz	short loc_13B78
mov	ss:[bx], di
inc	bx
inc	bx

loc_13B05:				; CODE XREF: game_diplomacy_threaten_check-FF3E  j		 /* DOS offset ---> B1C:5 */
dec	si

loc_13B06:				; CODE XREF: game_diplomacy_threaten_check-FF50  j		 /* DOS offset ---> B1C:6 */
; game_diplomacy_threaten_check:loc_13B3F  j ...
lodsb
cmp	al, 20h	; ' '
jz	short loc_13AEC
cmp	al, 9
jz	short loc_13AEC
cmp	al, 0Dh
jz	short loc_13B75
or	al, al

loc_13B15:				; CODE XREF: dseg:23B6C  j		 /* DOS offset ---> B1D:5 */
jz	short loc_13B75

loc_13B17:				; CODE XREF: game_diplomacy_threaten_check+A2  j		 /* DOS offset ---> B1D:7 */
cmp	al, 22h	; '"'
jz	short loc_13B42
cmp	al, 5Ch	; '\'

loc_13B1D:				; CODE XREF: dseg:23AFF  j dseg:23B08  j		 /* DOS offset ---> B1D:D */
jz	short loc_13B22
stosb
jmp	short loc_13B06
;     ***************************************************************************

loc_13B22:				; CODE XREF: game_diplomacy_threaten_check:loc_13B1D  j		 /* DOS offset ---> B1E:2 */
xor	cx, cx

loc_13B24:				; CODE XREF: game_diplomacy_threaten_check-FF48  j		 /* DOS offset ---> B1E:4 */
inc	cx
lodsb
cmp	al, 5Ch	; '\'
jz	short loc_13B24

loc_13B2A:				; CODE XREF: dseg:23B22  j		 /* DOS offset ---> B1E:A */
cmp	al, 22h	; '"'

loc_13B2C:				; CODE XREF: dseg:23B27  j		 /* DOS offset ---> B1E:C */
jz	short loc_13B34
mov	al, 5Ch	; '\'
rep stosb
jmp	short loc_13B05
;     ***************************************************************************

loc_13B34:				; CODE XREF: game_diplomacy_threaten_check:loc_13B2C  j		 /* DOS offset ---> B1F:4 */
mov	al, 5Ch	; '\'
shr	cx, 1
rep stosb
jnb	short loc_13B42

loc_13B3C:				; CODE XREF: dseg:23B34  j		 /* DOS offset ---> B1F:C */
mov	al, 22h	; '"'
stosb

loc_13B3F:				; CODE XREF: dseg:23B39  j		 /* DOS offset ---> B1F:F */
jmp	short loc_13B06
;     ***************************************************************************

loc_13B41:				; CODE XREF: game_diplomacy_threaten_check-FF0A  j		 /* DOS offset ---> B20:1 */
dec	si

loc_13B42:				; CODE XREF: game_diplomacy_threaten_check-FF57  j		 /* DOS offset ---> B20:2 */
; game_diplomacy_threaten_check-FF36  j ...
lodsb
cmp	al, 0Dh
jz	short loc_13B75
or	al, al
jz	short loc_13B75
cmp	al, 22h	; '"'
jz	short loc_13B06
cmp	al, 5Ch	; '\'
jz	short loc_13B56
stosb
jmp	short loc_13B42
;     ***************************************************************************

loc_13B56:				; CODE XREF: game_diplomacy_threaten_check-FF1F  j		 /* DOS offset ---> B21:6 */
xor	cx, cx

loc_13B58:				; CODE XREF: game_diplomacy_threaten_check-FF14  j		 /* DOS offset ---> B21:8 */
inc	cx
lodsb
cmp	al, 5Ch	; '\'
jz	short loc_13B58

loc_13B5E:				; CODE XREF: dseg:23B75  j		 /* DOS offset ---> B21:E */
cmp	al, 22h	; '"'
jz	short loc_13B68
mov	al, 5Ch	; '\'
rep stosb
jmp	short loc_13B41
;     ***************************************************************************

loc_13B68:				; CODE XREF: game_diplomacy_threaten_check-FF10  j		 /* DOS offset ---> B22:8 */
mov	al, 5Ch	; '\'
shr	cx, 1
rep stosb
jnb	short loc_13B06
mov	al, 22h	; '"'
stosb
jmp	short loc_13B42
;     ***************************************************************************

loc_13B75:				; CODE XREF: game_diplomacy_threaten_check-FF5F  j		 /* DOS offset ---> B23:5 */
; game_diplomacy_threaten_check:loc_13B15  j ...
xor	ax, ax

loc_13B77:				; CODE XREF: dseg:23AED  j dseg:23B0E  j ...		 /* DOS offset ---> B23:7 */
stosb

loc_13B78:				; CODE XREF: game_diplomacy_threaten_check-FF76  j		 /* DOS offset ---> B23:8 */
; game_diplomacy_threaten_check-FF72  j
push	ss
pop	ds
mov	word ptr [bx], 0

loc_13B7E:				; CODE XREF: dseg:2358B  p dseg:23A15  p		 /* DOS offset ---> B23:E */
jmp	ds:dword_3C15C
; END OF FUNCTION CHUNK	FOR game_diplomacy_threaten_check
;     ***************************************************************************

loc_13B82:				; CODE XREF: dseg:3567  p		 /* DOS offset ---> B24:2 */
push	bp
mov	bp, sp
push	ds
mov	es, ds:word_3C128

loc_13B8A:				; CODE XREF: game_spy_rival_tigers_select_rulers_sub+2A  j		 /* DOS offset ---> B24:A */
mov	bx, es:2Ch

loc_13B8F:		 /* DOS offset ---> B24:F */
mov	es, bx
xor	ax, ax
xor	si, si
xor	di, di
mov	cx, 0FFFFh
or	bx, bx
jz	short loc_13BAC
cmp	byte ptr es:0, 0
jz	short loc_13BAC

loc_13BA6:				; CODE XREF: dseg:3BAA  j		 /* DOS offset ---> B26:6 */
repne scasb
inc	si
scasb
jnz	short loc_13BA6

loc_13BAC:				; CODE XREF: dseg:3B9C  j dseg:3BA4  j		 /* DOS offset ---> B26:C */
mov	ax, di
inc	ax
and	al, 0FEh
inc	si
mov	di, si
shl	si, 1
mov	cx, 9
call	loc_13D0C
push	ax
mov	ax, si
call	loc_13D0C
mov	ds:word_3C149, ax
push	es
push	ds
pop	es
pop	ds
mov	cx, di
mov	bx, ax
xor	si, si
pop	di
dec	cx
jcxz	short loc_13BF9
; START	OF FUNCTION CHUNK FOR game_spy_rival_tigers_select_rulers_display

loc_13BD3:				; CODE XREF: game_spy_rival_tigers_select_rulers_display-FF99  j		 /* DOS offset ---> B29:3 */
; game_spy_rival_tigers_select_rulers_display+57  j
mov	ax, [si]
cmp	ax, ss:word_3C106

loc_13BDA:				; CODE XREF: dseg:23BC8  j		 /* DOS offset ---> B29:A */
jnz	short loc_13BEC
push	cx
push	si
push	di
mov	di, 0C6A6h

loc_13BE2:				; CODE XREF: dseg:23BC2  j dseg:23BD9  j		 /* DOS offset ---> B2A:2 */
mov	cx, 6
repe cmpsw
pop	di
pop	si

loc_13BE9:				; CODE XREF: game_spy_rival_tigers_select_rulers_display+41  j		 /* DOS offset ---> B2A:9 */
pop	cx

loc_13BEA:				; CODE XREF: dseg:23559  p		 /* DOS offset ---> B2A:A */
jz	short loc_13BF1

loc_13BEC:				; CODE XREF: game_spy_rival_tigers_select_rulers_display:loc_13BDA  j		 /* DOS offset ---> B2A:C */
mov	es:[bx], di
inc	bx
inc	bx

loc_13BF1:				; CODE XREF: game_spy_rival_tigers_select_rulers_display:loc_13BEA  j		 /* DOS offset ---> B2B:1 */
; game_spy_rival_tigers_select_rulers_display-FF9B  j
lodsb
stosb
or	al, al
jnz	short loc_13BF1
loop	loc_13BD3

loc_13BF9:				; CODE XREF: dseg:3BD1  j		 /* DOS offset ---> B2B:9 */
mov	es:[bx], cx
pop	ds
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_rival_tigers_select_rulers_display
;     ***************************************************************************

loc_13BFF:		 /* DOS offset ---> B2B:F */
add	[di-75h], dl
in	al, dx		; DMA controller, 8237A-5.
; channel 0 current word count
push	si
push	di
push	ds
pop	es
mov	dx, [bp+6]
mov	si, 0C73Ch

loc_13C0D:				; CODE XREF: dseg:3C20  j		 /* DOS offset ---> B2C:D */
lodsw
cmp	ax, dx
jz	short loc_13C22
inc	ax
xchg	ax, si
jz	short loc_13C22
xchg	ax, di

loc_13C17:				; CODE XREF: game_spy_rival_tigers_select_rulers+16  j		 /* DOS offset ---> B2D:7 */
xor	ax, ax
mov	cx, 0FFFFh
repne scasb
mov	si, di
jmp	short loc_13C0D
;     ***************************************************************************

loc_13C22:				; CODE XREF: dseg:3C10  j dseg:3C14  j		 /* DOS offset ---> B2E:2 */
xchg	ax, si
pop	di
pop	si
mov	sp, bp
pop	bp

locret_13C28:				; CODE XREF: game_spy_rival_tigers_select_rulers+31  j
; game_spy_rival_tigers_select_rulers+35  j
retf	2
;     ***************************************************************************

loc_13C2B:				; CODE XREF: dseg:34FF  p dseg:35A5  p		 /* DOS offset ---> B2E:B */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  57h	; W
db 0FFh
db  76h	; v
db    6
db  0Eh
db 0E8h	;   *
db 0CAh	;   *
db 0FFh
db  0Bh
db 0C0h	;   *
db  74h	; t
db  20h
db  92h	;   *
db  8Bh	;   *
db 0FAh	;   *
db  33h	; 3
db 0C0h	;   *
db 0B9h	;   *
db 0FFh
db 0FFh
db 0F2h	;   *
db 0AEh	;   *
db 0F7h	;   *
db 0D1h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_spy_rival_tigers_select_rulers

loc_13C46:				; CODE XREF: game_spy_rival_tigers_select_rulers+A7  j		 /* DOS offset ---> B30:6 */
; game_spy_rival_tigers_select_rulers+CA  j ...
dec	cx
mov	bx, 2

loc_13C4A:				; CODE XREF: dseg:23C1F  j dseg:23C24  j ...		 /* DOS offset ---> B30:A */
cmp	word ptr loc_1C716+2, 0D6D6h
jnz	short loc_13C56
call	word ptr loc_1C719+1

loc_13C56:				; CODE XREF: game_spy_rival_tigers_select_rulers-FFA0  j		 /* DOS offset ---> B31:6 */
mov	ah, 40h
int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
pop	di

loc_13C5B:		 /* DOS offset ---> B31:B */
mov	sp, bp

loc_13C5D:				; CODE XREF: game_spy_rival_tigers_select_rulers+5F  j		 /* DOS offset ---> B31:D */
pop	bp
retf	2
; END OF FUNCTION CHUNK	FOR game_spy_rival_tigers_select_rulers
;     ***************************************************************************
add	[bp+si+15h], dh

loc_13C64:				; CODE XREF: dseg:3C6A  j		 /* DOS offset ---> B32:4 */
xor	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
jnb	short loc_13C64
push	ax
call	loc_13C8A
pop	ax
xor	ah, ah
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
jnb	short loc_13C80
call	loc_13C8A
mov	ax, 0FFFFh
cwd
; START	OF FUNCTION CHUNK FOR game_spy_rival_tigers_select_rulers

loc_13C80:				; CODE XREF: dseg:3C77  j		 /* DOS offset ---> B34:0 */
; game_spy_rival_tigers_select_rulers+8B  j
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_rival_tigers_select_rulers
;     ***************************************************************************

loc_13C84:				; CODE XREF: dseg:37BB  p dseg:3807  p		 /* DOS offset ---> B34:4 */
xor	ah, ah
;     ***************************************************************************
db 0E8h	;   *
db    1
db    0
db 0CBh	;   *
;     ***************************************************************************

loc_13C8A:				; CODE XREF: dseg:3C6D  p dseg:3C79  p		 /* DOS offset ---> B34:A */
mov	byte ptr loc_1C6CD, al
;     ***************************************************************************
db  0Ah
db 0E4h	;   *
db  75h	; u
db  22h	; "
db  80h	;   *
db  3Eh	; >
db 0CAh	;   *
db 0C6h	;   *
db    3
db  72h	; r
db  0Ch
db  3Ch	; <
db  22h	; "
db  73h	; s
db  0Ch
db  3Ch	; <
db  20h
db  72h	; r
db    4
db 0B0h	;   *
db    5
db 0EBh	;   *
db    6
db  3Ch	; <
db  13h
db  76h	; v
db    2
db 0B0h	;   *
db  13h
db 0BBh	;   *
db    0
db 0C7h	;   *
db 0D7h	;   *
db  98h	;   *
db 0A3h	;   *
db 0C2h	;   *
db 0C6h	;   *
db 0C3h	;   *
db  8Ah	;   *
db 0C4h	;   *
db 0EBh	;   *
unk_13CB6	db 0F7h	;   *		; CODE XREF: game_spy_rival_tigers_select_rulers+B3  j
;     ***************************************************************************

loc_13CB7:				; CODE XREF: dseg:374C  j		 /* DOS offset ---> B37:7 */
add	[di-75h], dl
in	al, dx
push	di
push	si
mov	si, [bp+6]
xor	ax, ax
cwd

loc_13CC3:				; CODE XREF: dseg:23D2F  p		 /* DOS offset ---> B38:3 */
xor	bx, bx
; START	OF FUNCTION CHUNK FOR game_spy_rival_tigers_select_rulers

loc_13CC5:				; CODE XREF: game_spy_rival_tigers_select_rulers-FF28  j		 /* DOS offset ---> B38:5 */
; game_spy_rival_tigers_select_rulers-FF24  j
lodsb
cmp	al, 20h	; ' '
jz	short loc_13CC5

loc_13CCA:				; CODE XREF: game_spy_rival_tigers_select_rulers+C3  j		 /* DOS offset ---> B38:A */
cmp	al, 9
jz	short loc_13CC5
push	ax
cmp	al, 2Dh	; '-'
jz	short loc_13CD7
cmp	al, 2Bh	; '+'
jnz	short loc_13CD8

loc_13CD7:				; CODE XREF: game_spy_rival_tigers_select_rulers-FF1F  j		 /* DOS offset ---> B39:7 */
; game_spy_rival_tigers_select_rulers-FEF7  j ...
lodsb

loc_13CD8:				; CODE XREF: game_spy_rival_tigers_select_rulers-FF1B  j		 /* DOS offset ---> B39:8 */
cmp	al, 39h	; '9'
ja	short loc_13CFB
sub	al, 30h	; '0'
jb	short loc_13CFB
shl	bx, 1

loc_13CE2:				; CODE XREF: game_spy_rival_tigers_select_rulers+EE  j		 /* DOS offset ---> B3A:2 */
rcl	dx, 1

loc_13CE4:				; CODE XREF: dseg:23CDB  j		 /* DOS offset ---> B3A:4 */
mov	cx, bx
mov	di, dx
shl	bx, 1
rcl	dx, 1
shl	bx, 1
rcl	dx, 1
add	bx, cx

loc_13CF2:				; CODE XREF: game_spy_rival_tigers_select_rulers+88  j		 /* DOS offset ---> B3B:2 */
adc	dx, di
add	bx, ax
adc	dx, 0
jmp	short loc_13CD7
;     ***************************************************************************

loc_13CFB:				; CODE XREF: game_spy_rival_tigers_select_rulers-FF16  j		 /* DOS offset ---> B3B:B */
; game_spy_rival_tigers_select_rulers-FF12  j
pop	ax
cmp	al, 2Dh	; '-'

loc_13CFE:				; CODE XREF: game_spy_rival_tigers_select_rulers+108  j		 /* DOS offset ---> B3B:E */
xchg	ax, bx
jnz	short loc_13D08
neg	ax

loc_13D03:				; CODE XREF: game_spy_rival_tigers_select_rulers+10C  j		 /* DOS offset ---> B3C:3 */
adc	dx, 0
neg	dx

loc_13D08:				; CODE XREF: game_spy_rival_tigers_select_rulers-FEF1  j		 /* DOS offset ---> B3C:8 */
pop	si
pop	di
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_rival_tigers_select_rulers
;     ***************************************************************************

loc_13D0C:				; CODE XREF: dseg:3BB9  p dseg:3BBF  p		 /* DOS offset ---> B3C:C */
push	bx
;     ***************************************************************************
db    6
db  51h	; Q
db 0B9h	;   *
db    0
db    4
db  87h	;   *
db  0Eh
db  14h
db 0C7h	;   *
db  51h	; Q
db  50h	; P
db  90h	;   *
db  0Eh
db 0E8h	;   *
db  15h
unk_13D1C	db    0			; CODE XREF: game_spy_rival_tigers_select_rulers+8D  j
db  5Bh	; [
db  8Fh	;   *
db    6
db  14h
db 0C7h	;   *
db  59h	; Y
db  8Ch	;   *
db 0DAh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
unk_13D28	db    3			; CODE XREF: dseg:23D13  j
db    7
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_spy_rival_tigers_select_rulers

loc_13D2A:				; CODE XREF: game_spy_rival_tigers_select_rulers+24  j		 /* DOS offset ---> B3E:A */
; game_spy_rival_tigers_select_rulers+130  j
pop	bx
retn
; END OF FUNCTION CHUNK	FOR game_spy_rival_tigers_select_rulers
;     ***************************************************************************
db  8Bh	;   *
db 0C1h	;   *
db 0E9h	;   *
db  6Eh	; n
db 0F8h	;   *
;     ***************************************************************************

loc_13D31:		 /* DOS offset ---> B3F:1 */
add	cl, ch
and	al, [bx+di]
nop
nop

loc_13D37:		 /* DOS offset ---> B3F:7 */
add	[bx+di+57h], dl

loc_13D3A:				; CODE XREF: dseg:23D1A  j		 /* DOS offset ---> B3F:A */
test	byte ptr [bx+2], 1
jz	short loc_13DA3

loc_13D40:				; CODE XREF: dseg:23D23  j		 /* DOS offset ---> B40:0 */
call	loc_13E15
mov	di, si
mov	ax, [si]

loc_13D47:				; CODE XREF: dseg:23D3F  j		 /* DOS offset ---> B40:7 */
test	al, 1
jz	short loc_13D4E
sub	cx, ax
dec	cx

loc_13D4E:				; CODE XREF: dseg:3D49  j		 /* DOS offset ---> B40:E */
inc	cx
inc	cx
mov	si, [bx+4]
or	si, si

loc_13D55:				; CODE XREF: dseg:23D16  j dseg:23D1F  j ...		 /* DOS offset ---> B41:5 */
jz	short loc_13DA3
add	cx, si
jnb	short loc_13D64

loc_13D5B:				; CODE XREF: dseg:23EE6  p		 /* DOS offset ---> B41:B */
xor	ax, ax
mov	dx, 0FFF0h
jcxz	short loc_13D92

loc_13D62:				; CODE XREF: game_view_data_order+25  j		 /* DOS offset ---> B42:2 */
jmp	short loc_13DA3
;     ***************************************************************************

loc_13D64:				; CODE XREF: dseg:3D59  j		 /* DOS offset ---> B42:4 */
push	ss
pop	es

loc_13D66:		 /* DOS offset ---> B42:6 */
mov	ax, word ptr es:loc_3C173+1
cmp	ax, 2000h
jz	short loc_13D85
mov	dx, 8000h

loc_13D72:				; CODE XREF: dseg:3D78  j		 /* DOS offset ---> B43:2 */
cmp	dx, ax
jb	short loc_13D7C
shr	dx, 1
jnz	short loc_13D72
jmp	short loc_13D9E
;     ***************************************************************************

loc_13D7C:				; CODE XREF: dseg:3D74  j		 /* DOS offset ---> B43:C */
cmp	dx, 8
jb	short loc_13D9E
shl	dx, 1
mov	ax, dx

loc_13D85:				; CODE XREF: dseg:3D6D  j dseg:3DA1  j		 /* DOS offset ---> B44:5 */
dec	ax
mov	dx, ax
add	ax, cx
jnb	short loc_13D8E
xor	ax, ax

loc_13D8E:				; CODE XREF: dseg:3D8A  j		 /* DOS offset ---> B44:E */
not	dx
and	ax, dx

loc_13D92:				; CODE XREF: dseg:3D60  j		 /* DOS offset ---> B45:2 */
push	dx
call	loc_13DC4
pop	dx
jnb	short loc_13DA6
cmp	dx, 0FFF0h
jz	short loc_13DA3

loc_13D9E:				; CODE XREF: dseg:3D7A  j dseg:3D7F  j		 /* DOS offset ---> B45:E */
mov	ax, 10h
jmp	short loc_13D85
;     ***************************************************************************

loc_13DA3:				; CODE XREF: dseg:3D3E  j		 /* DOS offset ---> B46:3 */
; dseg:loc_13D55  j ...
stc
jmp	short loc_13DC1
;     ***************************************************************************

loc_13DA6:				; CODE XREF: dseg:3D97  j		 /* DOS offset ---> B46:6 */
mov	dx, ax
sub	dx, [bx+4]
mov	[bx+4],	ax
mov	[bx+8],	di
mov	si, [bx+0Ah]
dec	dx
mov	[si], dx
inc	dx
add	si, dx
mov	word ptr [si], 0FFFEh
mov	[bx+0Ah], si

loc_13DC1:				; CODE XREF: dseg:3DA4  j		 /* DOS offset ---> B48:1 */
pop	di
pop	cx
retn
;     ***************************************************************************

loc_13DC4:				; CODE XREF: dseg:3D93  p		 /* DOS offset ---> B48:4 */
mov	dx, ax
;     ***************************************************************************
db 0F6h	;   *
db  47h	; G
db    2
db    4
db  74h	; t
db  0Fh
db  4Ah	; J
db  8Bh	;   *
db  77h	; w
db    4
db  4Eh	; N
db  3Bh	; ;
db 0D6h	;   *
db  72h	; r
db    5
db  39h	; 9
db  57h	; W
db 0FEh	;   *
db  73h	; s
db  36h	; 6
db  42h	; B
db  53h	; S
db  51h	; Q
db  8Ch	;   *
db 0DEh	;   *
db  8Eh	;   *
db 0C6h	;   *
db 0B1h	;   *
db    4
db 0D3h	;   *
db 0E8h	;   *
db  75h	; u
db    3
db 0B8h	;   *
db    0
db  10h
db 0F6h	;   *
db  47h	; G
unk_13DEC	db    2			; CODE XREF: game_view_general_data+65  j
db    4
db  74h	; t
db  0Ah
db    3
db 0C6h	;   *
;     ***************************************************************************

loc_13DF2:				; CODE XREF: dseg:23D86  j		 /* DOS offset ---> B4B:2 */
mov	bx, word ptr loc_1C6C6+2
sub	ax, bx
mov	es, bx
; START	OF FUNCTION CHUNK FOR game_view_general_data

loc_13DFA:				; CODE XREF: game_view_general_data+8B  j		 /* DOS offset ---> B4B:A */
mov	bx, ax
mov	ah, 4Ah
int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
; ES = segment address of block	to change
; BX = new size	in paragraphs
pop	cx
pop	bx
jb	short locret_13E14
mov	ax, dx

loc_13E06:				; CODE XREF: game_view_general_data:loc_23DF8  j		 /* DOS offset ---> B4C:6 */
test	byte ptr [bx+2], 4
jz	short loc_13E10
dec	dx
mov	[bx-2],	dx

loc_13E10:				; CODE XREF: game_view_general_data-FF5E  j		 /* DOS offset ---> B4D:0 */
clc
jmp	short locret_13E14
; END OF FUNCTION CHUNK	FOR game_view_general_data
;     ***************************************************************************
stc

locret_13E14:				; CODE XREF: game_view_general_data-FF66  j
; game_view_general_data-FF57  j
retn
;     ***************************************************************************

loc_13E15:				; CODE XREF: dseg:loc_13D40  p		 /* DOS offset ---> B4D:5 */
push	di
;     ***************************************************************************
db  8Bh	;   *
db  77h	; w
unk_13E18	db    8			; CODE XREF: dseg:23EA2  j
db  3Bh	; ;
db  77h	; w
db  0Ah
db  75h	; u
unk_13E1D	db    3			; CODE XREF: dseg:23E92  j
db  8Bh	;   *
db  77h	; w
db    6
;     ***************************************************************************

loc_13E21:				; CODE XREF: dseg:3E2D  j		 /* DOS offset ---> B4E:1 */
lodsw
cmp	ax, 0FFFEh
jz	short loc_13E2F
mov	di, si
and	al, 0FEh
add	si, ax
jmp	short loc_13E21
;     ***************************************************************************

loc_13E2F:				; CODE XREF: dseg:3E25  j		 /* DOS offset ---> B4E:F */
dec	di
; START	OF FUNCTION CHUNK FOR game_view_general_data

loc_13E30:				; CODE XREF: game_view_general_data+6A  j		 /* DOS offset ---> B4F:0 */
dec	di
mov	si, di
pop	di
retn
; END OF FUNCTION CHUNK	FOR game_view_general_data
;     ***************************************************************************
add	[di-75h], dl
in	al, dx
; START	OF FUNCTION CHUNK FOR game_view_general_data

loc_13E39:				; CODE XREF: game_view_general_data+C6  j		 /* DOS offset ---> B4F:9 */
push	si

loc_13E3A:				; CODE XREF: game_view_general_data+81  j		 /* DOS offset ---> B4F:A */
mov	bx, [bp+arg_2]
mov	si, 0C68Eh
cmp	[si+6],	bx
jnb	short loc_13E52
dec	bx
dec	bx
or	byte ptr [bx], 1

loc_13E4A:				; CODE XREF: dseg:23E31  j		 /* DOS offset ---> B50:A */
cmp	[si+8],	bx
jbe	short loc_13E52
mov	[si+8],	bx

loc_13E52:				; CODE XREF: game_view_general_data-FF25  j		 /* DOS offset ---> B51:2 */
; game_view_general_data-FF1B  j
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_view_general_data
;     ***************************************************************************
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  56h	; V
db  57h	; W
db  8Bh	;   *
db  4Eh	; N
db    6
db  83h	;   *
db 0F9h	;   *
db 0E8h	;   *
db  77h	; w
db  12h
db 0BBh	;   *
db  8Eh	;   *
db 0C6h	;   *
db 0E8h	;   *
db  16h
db    0
db  73h	; s
db  0Fh
db 0E8h	;   *
db 0C9h	;   *
db 0FEh	;   *
db  72h	; r
db    5
db 0E8h	;   *
db  0Ch
db    0
db  73h	; s
db    5
db  33h	; 3
db 0C0h	;   *
db  99h	;   *
db 0EBh	;   *
db    0
db  5Fh	; _
db  5Eh	; ^
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************

loc_13E7F:		 /* DOS offset ---> B53:F */
add	[bx+di-80h], al

loc_13E82:				; CODE XREF: dseg:loc_13E82  j		 /* DOS offset ---> B54:2 */
loope	loc_13E82
push	bx
cld

loc_13E86:		 /* DOS offset ---> B54:6 */
mov	si, [bx+8]

loc_13E89:				; CODE XREF: dseg:23E2A  j dseg:23E48  j		 /* DOS offset ---> B54:9 */
mov	bx, [bx+0Ah]
xor	di, di
jmp	short loc_13EB3
;     ***************************************************************************

loc_13E90:				; CODE XREF: dseg:3EAD  j		 /* DOS offset ---> B55:0 */
mov	ax, bx
pop	bx
test	al, 1
jnz	short loc_13ED9
push	bx
mov	si, [bx+6]
mov	bx, [bx+8]
cmp	bx, si
jz	short loc_13ED8
dec	bx
xor	di, di

loc_13EA5:				; CODE XREF: dseg:23EA0  j		 /* DOS offset ---> B56:5 */
jmp	short loc_13EB3
;     ***************************************************************************
nop

loc_13EA8:				; CODE XREF: dseg:3EB6  j dseg:3EC8  j		 /* DOS offset ---> B56:8 */
lea	dx, [si-2]
cmp	dx, bx
jnb	short loc_13E90
add	si, ax

loc_13EB1:				; CODE XREF: game_view_general_data+11F  j		 /* DOS offset ---> B57:1 */
; game_view_general_data+125  j
jb	short loc_13ED6

loc_13EB3:				; CODE XREF: dseg:3E8E  j		 /* DOS offset ---> B57:3 */
; dseg:loc_13EA5  j
lodsw
test	al, 1
jz	short loc_13EA8
mov	di, si

loc_13EBA:				; CODE XREF: dseg:3ED4  j		 /* DOS offset ---> B57:A */
dec	ax
cmp	ax, cx

loc_13EBD:				; CODE XREF: game_view_general_data+147  j		 /* DOS offset ---> B57:D */
jnb	short loc_13EE2

loc_13EBF:				; CODE XREF: dseg:23EFC  j		 /* DOS offset ---> B57:F */
add	si, ax
jb	short loc_13ED6

loc_13EC3:				; CODE XREF: dseg:23EF3  j		 /* DOS offset ---> B58:3 */
mov	dx, ax
lodsw
test	al, 1
jz	short loc_13EA8
add	ax, dx
add	ax, 2
mov	si, di
mov	[si-2],	ax
jmp	short loc_13EBA
;     ***************************************************************************

loc_13ED6:				; CODE XREF: dseg:loc_13EB1  j		 /* DOS offset ---> B59:6 */
; dseg:3EC1  j
mov	ax, ax

loc_13ED8:				; CODE XREF: dseg:3EA0  j		 /* DOS offset ---> B59:8 */
pop	bx

loc_13ED9:				; CODE XREF: dseg:3E95  j		 /* DOS offset ---> B59:9 */
mov	ax, [bx+6]
mov	[bx+8],	ax
stc
jmp	short locret_13EFB
;     ***************************************************************************

loc_13EE2:				; CODE XREF: dseg:loc_13EBD  j		 /* DOS offset ---> B5A:2 */
pop	bx
mov	[si-2],	cx
jz	short loc_13EF1
add	di, cx
sub	ax, cx

loc_13EEC:				; CODE XREF: dseg:23ED6  j		 /* DOS offset ---> B5A:C */
dec	ax
mov	[di], ax
sub	di, cx

loc_13EF1:				; CODE XREF: dseg:3EE6  j		 /* DOS offset ---> B5B:1 */
add	di, cx
mov	[bx+8],	di
mov	ax, si
mov	dx, ds
clc

locret_13EFB:				; CODE XREF: dseg:3EE0  j
retn
;     ***************************************************************************

loc_13EFC:				; CODE XREF: game_view_summary_territory_gfx_table:loc_140DC  p		 /* DOS offset ---> B5B:C */
; game_view_summary_territory_gfx_table-FF49  p
push	bp
;     ***************************************************************************
db  8Bh	;   *
unk_13EFE	db 0ECh	;   *		; CODE XREF: game_view_general_data+176  j
; game_view_general_data+17C  j
db  83h	;   *
db 0ECh	;   *
db    4
db 0C7h	;   *
db  46h	; F
db 0FCh	;   *
db    0
db    0
db 0EBh	;   *
db  19h
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_view_general_data

loc_13F0A:				; CODE XREF: game_view_general_data-FE34  j		 /* DOS offset ---> B5C:A */
; game_view_general_data+193  j
mov	ax, [bp+var_4]
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx

loc_13F15:				; CODE XREF: dseg:23F71  j		 /* DOS offset ---> B5D:5 */
shl	ax, 1
add	ax, [bp+var_2]
mov	[bp+var_4], ax
mov	bx, [bp+arg_2]
inc	word ptr [bx]
mov	bx, [bp+arg_2]
mov	bx, [bx]

loc_13F27:		 /* DOS offset ---> B5E:7 */
mov	al, [bx]
sub	ah, ah
sub	ax, 30h	; '0'
mov	[bp+var_2], ax
cmp	ax, 0Ah
jb	short loc_13F0A
mov	ax, [bp+var_4]
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_view_general_data
;     ***************************************************************************
nop

loc_13F3E:				; CODE XREF: dseg:3F81  p dseg:3FA1  p ...		 /* DOS offset ---> B5F:E */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  56h	; V
db  83h	;   *
unk_13F46	db  7Eh	; ~		; CODE XREF: game_view_general_select_general+56  j
db  0Ah
db    0
db  7Fh	; 
db  1Fh
db  7Ch	; |
db    6
db  83h	;   *
db  7Eh	; ~
db    8
db  0Ah
db  73h	; s
db  17h
db  8Ah	;   *
db  46h	; F
db    8
db    4
db  30h	; 0
db  8Bh	;   *
db  5Eh	; ^
db    6
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_view_general_select_general

loc_13F5B:				; CODE XREF: game_view_general_select_general+1B  j		 /* DOS offset ---> B61:B */
mov	si, [bx]
mov	[si], al
inc	word ptr [bx]
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_view_general_select_general
;     ***************************************************************************
nop
mov	ax, 0Ah
cwd
push	dx
push	ax
push	word ptr [bp+0Ah]

loc_13F73:				; CODE XREF: dseg:23F14  j		 /* DOS offset ---> B63:3 */
push	word ptr [bp+8]

loc_13F76:				; CODE XREF: dseg:23FD1  p		 /* DOS offset ---> B63:6 */
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
push	dx
push	ax
push	word ptr [bp+6]
push	cs
call	loc_13F3E
add	sp, 6

loc_13F87:				; CODE XREF: game_view_general_select_general+19  j		 /* DOS offset ---> B64:7 */
mov	[bp-2],	ax

loc_13F8A:				; CODE XREF: dseg:23F7F  j		 /* DOS offset ---> B64:A */
mov	ax, 0Ah
cwd
push	dx
push	ax
push	word ptr [bp+0Ah]
push	word ptr [bp+8]

loc_13F96:				; DATA XREF: dseg:7941  w		 /* DOS offset ---> B65:6 */
; game_spy_betrayal_result:loc_17959  r ...
call	far ptr	0:38E4h
push	dx

loc_13F9C:				; DATA XREF: dseg:7944  w		 /* DOS offset ---> B65:C */
; game_spy_betrayal_result:loc_1794F  r ...
push	ax
push	word ptr [bp+6]
push	cs
call	loc_13F3E
add	sp, 6
mov	ax, [bp-2]
inc	ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_13FB0:				; CODE XREF: dseg:3FE3  p		 /* DOS offset ---> B67:0 */
; game_view_summary_territory_gfx_table-FE3A  p
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  56h	; V
db  83h	;   *
db  7Eh	; ~
db    8
db  0Ah
db  73h	; s
db  17h
db  8Ah	;   *
db  46h	; F
db    8
db    4
db  30h	; 0
db  8Bh	;   *
db  5Eh	; ^
unk_13FC4	db    6			; CODE XREF: dseg:23FB7  j
db  8Bh	;   *
db  37h	; 7
db  88h	;   *
db    4
db 0FFh
db    7
db 0B8h	;   *
db    1
db    0
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
unk_13FD2	db 0CBh	;   *		; DATA XREF: game_spy_betrayal_result-FF25  w
; game_spy_betrayal_result-FF1A  r ...
;     ***************************************************************************
nop

loc_13FD4:				; CODE XREF: dseg:23F9B  j		 /* DOS offset ---> B69:4 */
; DATA XREF: game_spy_betrayal_result-FF04  w ...
mov	ax, [bp+8]

loc_13FD7:				; CODE XREF: dseg:243A9  p		 /* DOS offset ---> B69:7 */
; DATA XREF: dseg:loc_1798F  w ...
mov	cx, 0Ah

loc_13FDA:				; DATA XREF: game_spy_betrayal:loc_17AD1  w		 /* DOS offset ---> B69:A */
; game_spy_betrayal-FFEE  r ...
sub	dx, dx

loc_13FDC:				; DATA XREF: game_spy_betrayal:loc_17ADC  w		 /* DOS offset ---> B69:C */
; game_spy_betrayal-FFC0  r ...
div	cx

loc_13FDE:				; DATA XREF: game_spy_betrayal-FFFC  w		 /* DOS offset ---> B69:E */
; game_spy_betrayal-FFE1  r ...
push	ax

loc_13FDF:				; DATA XREF: game_spy_betrayal-10007  r		 /* DOS offset ---> B69:F */
; game_spy_betrayal-FFF6  w ...
push	word ptr [bp+6]
push	cs
call	loc_13FB0
add	sp, 4

loc_13FE9:				; CODE XREF: game_view_summary_gfx_table_lines+56  j		 /* DOS offset ---> B6A:9 */
mov	[bp-2],	ax

loc_13FEC:				; CODE XREF: game_view_summary_gfx_table_lines+5B  j		 /* DOS offset ---> B6A:C */
mov	ax, [bp+8]
mov	cx, 0Ah
sub	dx, dx

loc_13FF4:				; CODE XREF: game_view_summary_gfx_table_lines+AE  j		 /* DOS offset ---> B6B:4 */
div	cx
push	dx
push	word ptr [bp+6]

loc_13FFA:				; CODE XREF: dseg:23F09  p dseg:2438D  p		 /* DOS offset ---> B6B:A */
push	cs
;     ***************************************************************************
db 0E8h	;   *
db 0B2h	;   *
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db  46h	; F
db 0FEh	;   *
db  40h	; @
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************

loc_1400A:				; CODE XREF: game_view_summary_gfx_table_lines-FF49  p		 /* DOS offset ---> B6C:A */
; game_view_summary_gfx_table_lines-FF31  p ...
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  56h	; V
db  83h	;   *
db  7Eh	; ~
db    8
db  0Ah
db  73h	; s
db  1Dh
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  37h	; 7
db 0C6h	;   *
db    4
db  82h	;   *
db  8Ah	;   *
db  46h	; F
db    8
;     ***************************************************************************

loc_14022:				; CODE XREF: dseg:23C5A  p dseg:23F9E  p ...		 /* DOS offset ---> B6E:2 */
add	al, 4Fh	; 'O'
;     ***************************************************************************
db 0FFh
db    7
db  8Bh	;   *
db  37h	; 7
db  88h	;   *
db    4
word_1402A	dw 7FFh			; DATA XREF: game_spy_tiger_and_wolf_result:loc_17C52  w
; game_spy_tiger_and_wolf_result:loc_17C5A  r ...
word_1402C	dw 2B8h			; DATA XREF: game_spy_tiger_and_wolf_result:loc_17C96  w
; game_spy_tiger_and_wolf_result-FE5D  r	...
byte_1402E	db 0			; DATA XREF: game_spy_rival_tigers_ruler_2_result-FFC4  w
; game_spy_rival_tigers_ruler_2_result:loc_17E22  r ...
byte_1402F	db 5Eh			; DATA XREF: game_spy_rival_tigers_ruler_2_result-FF40  r
byte_14030	db 8Bh			; DATA XREF: game_spy_rival_tigers_ruler_2_result-FF67  r
; game_spy_rival_tigers_ruler_2_result-FF30  r ...
db 0E5h	;   *
word_14032	dw 0CB5Dh		; DATA XREF: game_spy_rival_tigers_ruler_2_result:loc_17DB7  r
; game_spy_rival_tigers_ruler_2_result:loc_17DBD  w ...
word_14034	dw 468Bh		; DATA XREF: game_spy_rival_tigers_ruler_2_result-FFC0  r
; game_spy_rival_tigers_ruler_2_result:loc_17DCC  w ...
word_14036	dw 0B908h		; DATA XREF: game_spy_rival_tigers_ruler_2_result:loc_17DEE  r
; game_spy_rival_tigers_ruler_2_result-FF8A  r ...
word_14038	dw 0Ah			; DATA XREF: game_spy_rival_tigers_ruler_2_result-FF8D  w
; game_spy_rival_tigers_ruler_2_result-FF78  r ...
db  2Bh	; +
db 0D2h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_view_summary_gfx_table_lines

loc_1403C:				; CODE XREF: game_view_summary_gfx_table_lines+67  j		 /* DOS offset ---> B6F:C */
div	cx
push	ax
push	[bp+arg_0]
push	cs
call	loc_1400A
add	sp, 4

loc_14049:		 /* DOS offset ---> B70:9 */
mov	[bp+var_2], ax
mov	ax, [bp+arg_2]
mov	cx, 0Ah
sub	dx, dx
div	cx
push	dx
push	[bp+arg_0]
push	cs
call	loc_1400A
add	sp, 4
mov	ax, [bp+var_2]
inc	ax
inc	ax
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_view_summary_gfx_table_lines
;     ***************************************************************************
nop

loc_1406C:				; CODE XREF: system_output_display_text+10  p		 /* DOS offset ---> B72:C */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  34h	; 4
db  8Bh	;   *
db  5Eh	; ^
db    6
db  83h	;   *
db  46h	; F
db    6
db    2
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0F0h	;   *
db  8Bh	;   *
db  46h	; F
db    6
db  89h	;   *
db  46h	; F
db 0CEh	;   *
db 0E9h	;   *
db  0Fh
db    2
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_view_summary_territory_gfx_table

loc_14088:				; CODE XREF: game_view_summary_territory_gfx_table-FDA5  j		 /* DOS offset ---> B74:8 */
cmp	[bp+var_6], 25h	; '%' ; ss:[E3DC]
jz	short loc_14091
jmp	loc_1428C
;     ***************************************************************************

loc_14091:				; CODE XREF: game_view_summary_territory_gfx_table-FFBE  j		 /* DOS offset ---> B75:1 */
lea	ax, [bp+var_24]	; ss:[E3BE]

loc_14094:				; CODE XREF: game_view_summary_territory_gfx_table+79  j		 /* DOS offset ---> B75:4 */
mov	[bp+var_E], ax	; ss:[E3D4]
mov	[bp+var_8], 6	; ss:[E3DA]
sub	ax, ax
mov	[bp+var_C], ax	; ss:[E3E8]
mov	[bp+var_26], ax	; ss:[E3BC]
mov	[bp+var_4], ax	; ss:[E3DE]
mov	bx, [bp+var_10]	; ss:[E3D2]
cmp	byte ptr [bx], 2Dh ; '-'
jnz	short loc_140B7
inc	[bp+var_10]

loc_140B2:				; CODE XREF: dseg:24120  j		 /* DOS offset ---> B77:2 */
mov	[bp+var_4], 1

loc_140B7:				; CODE XREF: game_view_summary_territory_gfx_table-FF9D  j		 /* DOS offset ---> B77:7 */
; dseg:240EF  j
mov	bx, [bp+var_10]	; ss:[E3D2]
mov	al, [bx]

loc_140BC:				; CODE XREF: dseg:240AD  j		 /* DOS offset ---> B77:C */
mov	[bp+var_6], al
mov	[bp+var_34], ax
cmp	al, 30h	; '0'
jz	short loc_140C8
mov	al, 20h	; ' '

loc_140C8:				; CODE XREF: game_view_summary_territory_gfx_table-FF86  j		 /* DOS offset ---> B78:8 */
mov	[bp+var_2], al

loc_140CB:				; DATA XREF: dseg:loc_17EE3  w		 /* DOS offset ---> B78:B */
; dseg:7F21  r ...
cmp	byte ptr [bp+var_34], 30h ; '0'

loc_140CF:				; DATA XREF: dseg:7F6B  w		 /* DOS offset ---> B78:F */
; game_spy_rival_tigers_send_whom-FFEA  r ...
jb	short loc_140E8

loc_140D1:				; DATA XREF: game_spy_rival_tigers_send_whom-FFF2  r		 /* DOS offset ---> B79:1 */
; game_spy_rival_tigers_send_whom-FF8D  w ...
cmp	[bp+var_6], 39h	; '9'
ja	short loc_140E8

loc_140D7:				; DATA XREF: dseg:7ED7  w		 /* DOS offset ---> B79:7 */
; dseg:loc_17F1A  r ...
lea	ax, [bp+var_10]
push	ax
push	cs

loc_140DC:				; DATA XREF: game_spy_rival_tigers_send_whom-FF4B  w		 /* DOS offset ---> B79:C */
; game_spy_rival_tigers_send_whom-FF3B  r ...
call	loc_13EFC
add	sp, 2

loc_140E2:				; DATA XREF: game_spy_func-FF1D  r		 /* DOS offset ---> B7A:2 */
; game_spy_func-FEF8  r ...
mov	[bp+var_A], ax

loc_140E5:				; DATA XREF: game_spy_infiltrate_verify_output:loc_182E6  r		 /* DOS offset ---> B7A:5 */
; game_spy_infiltrate_verify_output-FFBE  r ...
jmp	short loc_140ED
; END OF FUNCTION CHUNK	FOR game_view_summary_territory_gfx_table
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_view_summary_territory_gfx_table

loc_140E8:				; CODE XREF: game_view_summary_territory_gfx_table:loc_140CF  j		 /* DOS offset ---> B7A:8 */
; game_view_summary_territory_gfx_table-FF75  j
; DATA XREF: ...
mov	[bp+var_A], 0

loc_140ED:				; CODE XREF: game_view_summary_territory_gfx_table:loc_140E5  j		 /* DOS offset ---> B7A:D */
mov	bx, [bp+var_10]

loc_140F0:				; CODE XREF: dseg:24082  j		 /* DOS offset ---> B7B:0 */
inc	[bp+var_10]
mov	al, [bx]
mov	[bp+var_6], al

loc_140F8:				; CODE XREF: game_view_territory_data+12  j		 /* DOS offset ---> B7B:8 */
cmp	al, 2Eh	; '.'
jnz	short loc_1411A
lea	ax, [bp+var_10]
push	ax
push	cs
call	loc_13EFC
add	sp, 2
mov	[bp+var_8], ax
mov	[bp+var_26], 1
mov	bx, [bp+var_10]
inc	[bp+var_10]
mov	al, [bx]

loc_14117:				; CODE XREF: game_view_territory_data+135  j		 /* DOS offset ---> B7D:7 */
mov	[bp+var_6], al

loc_1411A:				; CODE XREF: game_view_summary_territory_gfx_table-FF50  j		 /* DOS offset ---> B7D:A */
cmp	[bp+var_6], 6Ch	; 'l'
jnz	short loc_14130

loc_14120:				; CODE XREF: dseg:2411B  j		 /* DOS offset ---> B7E:0 */
; DATA XREF: game_view_func:loc_188BE  r
mov	[bp+var_C], 1

loc_14125:				; DATA XREF: game_view_func:loc_188C4  r		 /* DOS offset ---> B7E:5 */
mov	bx, [bp+var_10]
inc	[bp+var_10]
mov	al, [bx]
mov	[bp+var_6], al

loc_14130:				; CODE XREF: game_view_summary_territory_gfx_table-FF2C  j		 /* DOS offset ---> B7F:0 */
mov	al, [bp+var_6]
push	ax
call	far ptr	561h:144h
add	sp, 2
sub	ah, ah
cmp	ax, 57h	; 'W'
jnz	short loc_14146
jmp	loc_141EE
;     ***************************************************************************

loc_14146:				; CODE XREF: game_view_summary_territory_gfx_table-FF09  j		 /* DOS offset ---> B80:6 */
jbe	short loc_1414B
jmp	loc_1428C
;     ***************************************************************************

loc_1414B:				; CODE XREF: game_view_summary_territory_gfx_table:loc_14146  j		 /* DOS offset ---> B80:B */
cmp	al, 44h	; 'D'
jz	short loc_14184
jg	short loc_14160
or	al, al

loc_14153:				; CODE XREF: dseg:24391  p		 /* DOS offset ---> B81:3 */
jnz	short loc_14158
jmp	loc_142A8
;     ***************************************************************************

loc_14158:				; CODE XREF: game_view_summary_territory_gfx_table:loc_14153  j		 /* DOS offset ---> B81:8 */
sub	al, 43h	; 'C'
jz	short loc_1416C
jmp	loc_1428C
; END OF FUNCTION CHUNK	FOR game_view_summary_territory_gfx_table
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_view_summary_territory_gfx_table

loc_14160:				; CODE XREF: game_view_summary_territory_gfx_table-FEFB  j		 /* DOS offset ---> B82:0 */
sub	al, 53h	; 'S'
jz	short loc_141D4
sub	al, 2
jz	short loc_141A8
jmp	loc_1428C
; END OF FUNCTION CHUNK	FOR game_view_summary_territory_gfx_table
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_view_summary_territory_gfx_table

loc_1416C:				; CODE XREF: game_view_summary_territory_gfx_table-FEF0  j		 /* DOS offset ---> B82:C */
mov	bx, [bp+var_32]
mov	al, [bx]
mov	bx, [bp+var_E]
mov	[bx], al
inc	[bp+var_E]

loc_14179:				; CODE XREF: dseg:24399  p		 /* DOS offset ---> B83:9 */
add	[bp+var_32], 2
dec	[bp+var_A]
jmp	loc_14219
; END OF FUNCTION CHUNK	FOR game_view_summary_territory_gfx_table
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_view_summary_territory_gfx_table

loc_14184:				; CODE XREF: game_view_summary_territory_gfx_table-FEFD  j		 /* DOS offset ---> B84:4 */
; game_view_territory_data+92  j
cmp	[bp+var_C], 0
jz	short loc_141C8
mov	bx, [bp+var_32]
cmp	word ptr [bx+2], 0
jge	short loc_141C8
neg	word ptr [bx]
adc	word ptr [bx+2], 0
neg	word ptr [bx+2]
mov	bx, [bp+var_E]
mov	byte ptr [bx], 2Dh ; '-'
inc	[bp+var_E]
dec	[bp+var_A]

loc_141A8:				; CODE XREF: game_view_summary_territory_gfx_table-FEE4  j		 /* DOS offset ---> B86:8 */
; game_view_summary_territory_gfx_table-FE7E  j ...
cmp	[bp+var_C], 0
jz	short loc_14202
mov	bx, [bp+var_32]
add	[bp+var_32], 4
push	word ptr [bx+2]
push	word ptr [bx]

loc_141BA:				; CODE XREF: dseg:2439D  p		 /* DOS offset ---> B87:A */
lea	ax, [bp+var_E]
push	ax
push	cs
call	loc_13F3E
add	sp, 6

loc_141C5:				; CODE XREF: game_view_territory_data+A0  j		 /* DOS offset ---> B88:5 */
jmp	short loc_14216
; END OF FUNCTION CHUNK	FOR game_view_summary_territory_gfx_table
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_view_summary_territory_gfx_table

loc_141C8:				; CODE XREF: game_view_summary_territory_gfx_table-FEC2  j		 /* DOS offset ---> B88:8 */
; game_view_summary_territory_gfx_table-FEB9  j
cmp	[bp+var_C], 0
jnz	short loc_141A8
mov	bx, [bp+var_32]
jmp	short loc_141A8
; END OF FUNCTION CHUNK	FOR game_view_summary_territory_gfx_table
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_view_summary_territory_gfx_table

loc_141D4:				; CODE XREF: game_view_summary_territory_gfx_table-FEE8  j		 /* DOS offset ---> B89:4 */
mov	bx, [bp+var_32]
add	[bp+var_32], 2
mov	ax, [bx]
mov	[bp+var_E], ax
push	ax

loc_141E1:		 /* DOS offset ---> B8A:1 */
call	far ptr	561h:11Eh

loc_141E6:		 /* DOS offset ---> B8A:6 */
add	sp, 2
sub	[bp+var_A], ax

loc_141EC:				; CODE XREF: game_view_territory_data+103  j		 /* DOS offset ---> B8A:C */
jmp	short loc_1422A
;     ***************************************************************************

loc_141EE:				; CODE XREF: game_view_summary_territory_gfx_table-FF07  j		 /* DOS offset ---> B8A:E */
mov	bx, [bp+var_32]
add	[bp+var_32], 2
push	word ptr [bx]
lea	ax, [bp+var_E]
push	ax
push	cs
call	loc_1400A
jmp	short loc_14213
; END OF FUNCTION CHUNK	FOR game_view_summary_territory_gfx_table
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_view_summary_territory_gfx_table

loc_14202:				; CODE XREF: game_view_summary_territory_gfx_table-FE9E  j		 /* DOS offset ---> B8C:2 */
mov	bx, [bp+var_32]
add	[bp+var_32], 2
push	word ptr [bx]
lea	ax, [bp+var_E]

loc_1420E:				; CODE XREF: dseg:243A1  p		 /* DOS offset ---> B8C:E */
push	ax
push	cs
call	loc_13FB0

loc_14213:				; CODE XREF: game_view_summary_territory_gfx_table-FE4B  j		 /* DOS offset ---> B8D:3 */
add	sp, 4

loc_14216:				; CODE XREF: game_view_summary_territory_gfx_table:loc_141C5  j		 /* DOS offset ---> B8D:6 */
sub	[bp+var_A], ax

loc_14219:				; CODE XREF: game_view_summary_territory_gfx_table-FECA  j		 /* DOS offset ---> B8D:9 */
; game_view_territory_data+114  j
mov	bx, [bp+var_E]
mov	byte ptr [bx], 0

loc_1421F:				; CODE XREF: game_view_territory_data+129  j		 /* DOS offset ---> B8D:F */
lea	ax, [bp+var_24]
mov	[bp+var_E], ax
mov	[bp+var_26], 0

loc_1422A:				; CODE XREF: game_view_summary_territory_gfx_table:loc_141EC  j		 /* DOS offset ---> B8E:A */
cmp	[bp+var_4], 0
jnz	short loc_14246

loc_14230:				; CODE XREF: game_view_summary_territory_gfx_table-FE06  j		 /* DOS offset ---> B8F:0 */
mov	ax, [bp+var_A]
dec	[bp+var_A]
or	ax, ax
jle	short loc_14246

loc_1423A:				; CODE XREF: dseg:243A5  p		 /* DOS offset ---> B8F:A */
mov	al, [bp+var_2]
push	ax
call	[bp+arg_2]

loc_14241:				; CODE XREF: game_view_territory_data+14  j		 /* DOS offset ---> B90:1 */
; game_view_territory_data+151  j
add	sp, 2
jmp	short loc_14230
; END OF FUNCTION CHUNK	FOR game_view_summary_territory_gfx_table
;     ***************************************************************************

loc_14246:				; CODE XREF: game_view_summary_territory_gfx_table-FE1C  j		 /* DOS offset ---> B90:6 */
; game_view_summary_territory_gfx_table-FE12  j
mov	bx, [bp-0Eh]
cmp	byte ptr [bx], 0
jz	short loc_14271

loc_1424E:				; CODE XREF: dseg:426F  j		 /* DOS offset ---> B90:E */
cmp	word ptr [bp-26h], 0
jz	short loc_1425A
cmp	word ptr [bp-8], 0
jle	short loc_14266

loc_1425A:				; CODE XREF: dseg:4252  j		 /* DOS offset ---> B91:A */
mov	al, [bx]
push	ax
call	dword ptr [bp+8]

loc_14260:				; CODE XREF: game_view_summary_data+17  j		 /* DOS offset ---> B92:0 */
add	sp, 2
dec	word ptr [bp-8]

loc_14266:				; CODE XREF: dseg:4258  j		 /* DOS offset ---> B92:6 */
inc	word ptr [bp-0Eh]
mov	bx, [bp-0Eh]
cmp	byte ptr [bx], 0
jnz	short loc_1424E

loc_14271:				; CODE XREF: dseg:424C  j		 /* DOS offset ---> B93:1 */
cmp	word ptr [bp-4], 0
jz	short loc_14296

loc_14277:				; CODE XREF: dseg:428A  j		 /* DOS offset ---> B93:7 */
mov	ax, [bp-0Ah]
dec	word ptr [bp-0Ah]
or	ax, ax
jle	short loc_14296
mov	al, 20h	; ' '
push	ax
call	dword ptr [bp+8]
add	sp, 2
jmp	short loc_14277
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_view_summary_territory_gfx_table

loc_1428C:				; CODE XREF: game_view_summary_territory_gfx_table-FFBC  j		 /* DOS offset ---> B94:C */
; game_view_summary_territory_gfx_table-FF02  j ...
mov	al, [bp+var_6]
push	ax
call	[bp+arg_2]
add	sp, 2

loc_14296:				; CODE XREF: dseg:4275  j dseg:427F  j		 /* DOS offset ---> B95:6 */
mov	bx, [bp+var_10]	; SS:[E3D2]
inc	[bp+var_10]
mov	al, [bx]	; ds:[C0F2]
mov	[bp+var_6], al	; ss:[598D]
or	al, al

loc_142A3:				; CODE XREF: game_view_summary_data+191  j		 /* DOS offset ---> B96:3 */
; game_view_summary_data+1C6  j
jz	short loc_142A8
jmp	loc_14088
;     ***************************************************************************

loc_142A8:				; CODE XREF: game_view_summary_territory_gfx_table-FEF5  j		 /* DOS offset ---> B96:8 */
; game_view_summary_territory_gfx_table:loc_142A3  j
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_view_summary_territory_gfx_table

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_42AC		proc far		; CODE XREF: game_query_user_input_main+4  p		 /* DOS offset ---> B96:C */
push	bp
mov	bp, sp
call	far ptr	0:5Bh
or	ax, ax
jz	short loc_142C6

loc_142B8:				; CODE XREF: s_42AC+18  j		 /* DOS offset ---> B97:8 */
call	far ptr	0:75h
call	far ptr	0:5Bh
or	ax, ax
jnz	short loc_142B8

loc_142C6:				; CODE XREF: s_42AC+A  j		 /* DOS offset ---> B98:6 */
mov	sp, bp
pop	bp
retf
s_42AC		endp		 /* DOS offset ---> B96:C */


;     *************** S U B	R O U T	I N E     ***************************************


s_42CA		proc far		; CODE XREF: dseg:430A  p s_4312+A  p ...		 /* DOS offset ---> B98:A */
cmp	word_13432, 0
jl	short loc_142DE
mov	ax, word_13432	; ds:[3432]
cmp	ax, 4Fh	; 'O'
jle	short loc_142E0
mov	ax, 4Fh	; 'O'
jmp	short loc_142E0
;     ***************************************************************************

loc_142DE:				; CODE XREF: s_42CA+5  j	dseg:242C9  j		 /* DOS offset ---> B99:E */
sub	ax, ax

loc_142E0:				; CODE XREF: s_42CA+D  j	s_42CA+12  j		 /* DOS offset ---> B9A:0 */
mov	word_13432, ax	; ds:[3432]
cmp	word_13434, 0
jl	short loc_142FA
mov	ax, word_13434	; ds:[3434]
cmp	ax, 0C0h ; '  *'

loc_142F0:				; CODE XREF: dseg:24374  p		 /* DOS offset ---> B9B:0 */
jle	short loc_142FC
;     ***************************************************************************
db 0B8h	;   *
db 0C0h	;   *
db    0
db 0A3h	;   *
db  34h	; 4
db  34h	; 4
db 0CBh	;   *
;     ***************************************************************************
nop

loc_142FA:				; CODE XREF: s_42CA+1E  j		 /* DOS offset ---> B9B:A */
sub	ax, ax

loc_142FC:				; CODE XREF: s_42CA:loc_142F0  j		 /* DOS offset ---> B9B:C */
mov	word_13434, ax
retf
s_42CA		endp		 /* DOS offset ---> B98:A */

;     ***************************************************************************

loc_14300:				; CODE XREF: s_444C+120  p		 /* DOS offset ---> B9C:0 */
push	bp
mov	bp, sp
mov	ax, [bp+6]
mov	word_13432, ax
push	cs
call	near ptr s_42CA
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_4312		proc far		; CODE XREF: s_444C:loc_14554  p		 /* DOS offset ---> B9D:2 */
; game_input_query_func_wait_for_input+11  p

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	ax, [bp+arg_0]
mov	word_13434, ax
push	cs
call	near ptr s_42CA
mov	sp, bp
pop	bp
retf
s_4312		endp		 /* DOS offset ---> B9D:2 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_display_generals_list_x_y proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp		; really is the	main display area and not necessarily general data stuff
mov	bp, sp
cmp	[bp+arg_0], 0
jl	short loc_14333
mov	ax, [bp+arg_0]	; ss:[E3F4]
mov	word_13432, ax	; ds:[3432]

loc_14333:				; CODE XREF: game_display_generals_list_x_y+7  j		 /* DOS offset ---> B9F:3 */
cmp	[bp+arg_2], 0

loc_14337:				; CODE XREF: dseg:24330  j		 /* DOS offset ---> B9F:7 */
jl	short loc_1433F

loc_14339:				; CODE XREF: dseg:24335  j		 /* DOS offset ---> B9F:9 */
mov	ax, [bp+arg_2]	; ss:[E3F6]
mov	word_13434, ax	; ds:[3434]

loc_1433F:				; CODE XREF: game_display_generals_list_x_y:loc_14337  j		 /* DOS offset ---> B9F:F */
push	cs
call	near ptr s_42CA	; nop, unknown
mov	sp, bp
pop	bp

locret_14346:				; CODE XREF: dseg:24395  p
retf
game_display_generals_list_x_y endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_display_text_color	proc far	; CODE XREF: s_444C+130  p

arg_0		= word ptr  6

push	bp
mov	bp, sp
cmp	[bp+arg_0], 7
ja	short loc_14372
cmp	word_1CEA2, 0
jz	short loc_1436C
cmp	[bp+arg_0], 7
jz	short loc_1436C

loc_1435E:				; CODE XREF: dseg:24386  j		 /* DOS offset ---> BA1:E */
cmp	byte_1343A, 0

loc_14363:				; CODE XREF: game_view_summary_data+10F  j		 /* DOS offset ---> BA2:3 */
jz	short loc_1436C
mov	byte_13439, 0
pop	bp
retf
;     ***************************************************************************

loc_1436C:				; CODE XREF: game_display_text_color+E  j		 /* DOS offset ---> BA2:C */
; game_display_text_color+14  j ...
mov	al, byte ptr [bp+arg_0]
mov	byte_13439, al

loc_14372:				; CODE XREF: game_display_text_color+7  j		 /* DOS offset ---> BA3:2 */
pop	bp
retf
game_display_text_color	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_display_draw_table_lines proc far

arg_0		= byte ptr  6

push	bp
mov	bp, sp
mov	al, [bp+arg_0]
mov	byte_13438, al
pop	bp
retf
game_display_draw_table_lines endp

;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_view_summary_data

loc_14380:				; CODE XREF: game_view_summary_data+122  j		 /* DOS offset ---> BA4:0 */
mov	ax, word_13432
retf
; END OF FUNCTION CHUNK	FOR game_view_summary_data
;     ***************************************************************************
mov	ax, word_13434
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_4388		proc far		; CODE XREF: s_444C+84  p		 /* DOS offset ---> BA4:8 */

var_8		= word ptr -8
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp
mov	bp, sp
sub	sp, 8
lea	ax, [bp+var_8]
push	ax
push	[bp+arg_6]

loc_14395:		 /* DOS offset ---> BA5:5 */
call	far ptr	0:11D5h

loc_1439A:				; CODE XREF: game_view_summary_data+138  j		 /* DOS offset ---> BA5:A */
add	sp, 4
cmp	byte_1343A, 0
jnz	short loc_143C2
lea	ax, [bp+var_8]
push	ax
push	[bp+arg_4]
mov	ax, 8

loc_143AE:				; CODE XREF: dseg:245D5  p		 /* DOS offset ---> BA6:E */
push	ax
mov	ax, 1
push	ax
push	[bp+arg_2]
push	[bp+arg_0]
call	far ptr	0:1469h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_143C2:				; CODE XREF: s_4388+1A  j		 /* DOS offset ---> BA8:2 */
lea	ax, [bp+var_8]
push	ax
push	[bp+arg_4]
mov	ax, 8
push	ax
mov	ax, 1

loc_143D0:				; CODE XREF: dseg:243BC  j		 /* DOS offset ---> BA9:0 */
push	ax
push	[bp+arg_2]

loc_143D4:				; CODE XREF: dseg:243BF  j		 /* DOS offset ---> BA9:4 */
push	[bp+arg_0]

loc_143D7:				; CODE XREF: game_view_summary_data+18F  j		 /* DOS offset ---> BA9:7 */
call	far ptr	0:133Dh

loc_143DC:				; CODE XREF: game_view_summary_data+17F  j		 /* DOS offset ---> BA9:C */
; dseg:243C3  j
mov	sp, bp
pop	bp
retf
s_4388		endp		 /* DOS offset ---> BA4:8 */


;     *************** S U B	R O U T	I N E     ***************************************


s_43E0		proc far		; CODE XREF: s_43FC+3F  p s_444C+56  p ...		 /* DOS offset ---> BAA:0 */
mov	ax, word ptr unk_13436
mov	word_13432, ax

loc_143E6:				; CODE XREF: dseg:243D4  j dseg:243DA  j ...		 /* DOS offset ---> BAA:6 */
call	far ptr	492h:66h ; s_4986
mov	ax, word_13434
add	ax, 8
cmp	ax, 0C0h ; '  *'
jg	short locret_143FB
add	word_13434, 8

locret_143FB:				; CODE XREF: s_43E0+14  j
retf
s_43E0		endp		 /* DOS offset ---> BAA:0 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_43FC		proc far		; CODE XREF: s_444C:loc_14491  p		 /* DOS offset ---> BAB:C */

arg_0		= byte ptr  6

push	bp
mov	bp, sp
mov	al, [bp+arg_0]
sub	ah, ah
sub	ax, 7
jz	short loc_1441A
dec	ax
jz	short loc_1442A
dec	ax
dec	ax
jz	short loc_1443A

loc_14410:				; CODE XREF: game_view_summary_data+1A4  j		 /* DOS offset ---> BAD:0 */
sub	ax, 3
jz	short loc_14442

loc_14415:				; CODE XREF: game_view_summary_data+1B9  j		 /* DOS offset ---> BAD:5 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1441A:				; CODE XREF: s_43FC+B  j		 /* DOS offset ---> BAD:A */
mov	ax, 6
push	ax
call	far ptr	6EBh:0Eh ; s_6EBE
mov	sp, bp
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1442A:				; CODE XREF: s_43FC+E  j		 /* DOS offset ---> BAE:A */
cmp	word_13432, 1
jl	short loc_14448
dec	word_13432
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1443A:				; CODE XREF: s_43FC+12  j		 /* DOS offset ---> BAF:A */
; game_view_summary_data+19  j ...
push	cs
call	near ptr s_43E0
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_14442:				; CODE XREF: s_43FC+17  j		 /* DOS offset ---> BB0:2 */
mov	ax, word ptr unk_13436
mov	word_13432, ax

loc_14448:				; CODE XREF: s_43FC+33  j		 /* DOS offset ---> BB0:8 */
mov	sp, bp

loc_1444A:				; CODE XREF: dseg:245A0  p		 /* DOS offset ---> BB0:A */
pop	bp
retf
s_43FC		endp		 /* DOS offset ---> BAB:C */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_444C		proc far		; CODE XREF: system_execute_function+15  p		 /* DOS offset ---> BB0:C */
; game_input_query_func_query_keyboard2+30  p ...

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  9Ah	;   *
db  66h	; f
db    0
db  92h	;   *
db    4
db 0A1h	;   *
unk_14458	db  3Ch	; <		; CODE XREF: game_view_other_province_sub_3_1+29  j
db  34h	; 4
db  48h	; H
db  3Dh	; =
db    6
db    0
db  77h	; w
db  16h
;     ***************************************************************************

loc_14460:				; CODE XREF: dseg:24454  j dseg:2445A  j		 /* DOS offset ---> BB2:0 */
shl	ax, 1
xchg	ax, bx
jmp	word ptr cs:loc_10578[bx]
;     ***************************************************************************
out	dx, al

loc_14469:				; CODE XREF: game_view_other_province_sub_3_1+16  j		 /* DOS offset ---> BB2:9 */
add	ax, 656h
jb	short loc_14474
add	byte ptr loc_10690+2, 0A0h ; '  *'
push	es

loc_14474:				; CODE XREF: s_444C+20  j		 /* DOS offset ---> BB3:4 */
stosb
push	es
cmp	[bp+arg_0], 1Bh
jnz	short loc_14486

loc_1447C:				; CODE XREF: game_view_other_province_sub_3_1+4F  j		 /* DOS offset ---> BB3:C */
mov	word ptr unk_1343C, 1
jmp	loc_145A8
;     ***************************************************************************
nop

loc_14486:				; CODE XREF: s_444C+2E  j		 /* DOS offset ---> BB4:6 */
cmp	[bp+arg_0], 20h	; ' '
jnb	short loc_1449A
mov	al, [bp+arg_0]
push	ax
push	cs

loc_14491:				; CODE XREF: game_view_other_province_sub_3_1+2F  j		 /* DOS offset ---> BB5:1 */
; game_view_other_province_sub_3_1+3C  j
call	near ptr s_43FC	; *
add	sp, 2
jmp	loc_145A8
;     ***************************************************************************

loc_1449A:				; CODE XREF: s_444C+3E  j		 /* DOS offset ---> BB5:A */
cmp	word_13432, 4Fh	; 'O'
jle	short loc_144A5
push	cs
call	near ptr s_43E0	; *

loc_144A5:				; CODE XREF: s_444C+53  j		 /* DOS offset ---> BB6:5 */
mov	al, [bp+arg_0]
sub	ah, ah
mov	[bp+var_2], ax
mov	al, byte_1343A

loc_144B0:				; CODE XREF: game_view_other_province_sub_3_2+1D  j		 /* DOS offset ---> BB7:0 */
mov	[bp+var_4], ax
or	ax, ax
jnz	short loc_144BD
mov	al, byte_13438

loc_144BA:				; CODE XREF: game_view_other_province_sub_3_2+12  j		 /* DOS offset ---> BB7:A */
mov	[bp+var_4], ax

loc_144BD:				; CODE XREF: s_444C+69  j		 /* DOS offset ---> BB7:D */
push	[bp+var_2]
mov	al, byte_13439
mov	ah, byte ptr [bp+var_4]
push	ax

loc_144C7:				; CODE XREF: dseg:24499  j		 /* DOS offset ---> BB8:7 */
push	word_13434

loc_144CB:				; CODE XREF: game_view_other_province_sub_3_2+3B  j		 /* DOS offset ---> BB8:B */
push	word_13432
push	cs
call	near ptr s_4388	; *
add	sp, 8

loc_144D6:				; CODE XREF: game_view_other_province_sub_3_2+23  j		 /* DOS offset ---> BB9:6 */
; game_view_other_province_sub_3_2+30  j
inc	word_13432
jmp	loc_145A8
;     ***************************************************************************
nop

loc_144DE:		 /* DOS offset ---> BB9:E */
mov	al, [bp+arg_0]
sub	ah, ah
cmp	ax, 57h	; 'W'
jz	short loc_14538
jbe	short loc_144ED
jmp	loc_145A8
;     ***************************************************************************

loc_144ED:				; CODE XREF: s_444C+9C  j		 /* DOS offset ---> BBA:D */
cmp	al, 43h	; 'C'
jz	short loc_1451E
jg	short loc_144FE
sub	al, 3Dh	; '='
jz	short loc_1450A
sub	al, 5
jz	short loc_14514
jmp	loc_145A8
;     ***************************************************************************

loc_144FE:				; CODE XREF: s_444C+A5  j dseg:244E8  j		 /* DOS offset ---> BBB:E */
sub	al, 4Dh	; 'M'
jz	short loc_14528
sub	al, 5
jz	short loc_14530
jmp	loc_145A8
;     ***************************************************************************
nop

loc_1450A:				; CODE XREF: s_444C+A9  j		 /* DOS offset ---> BBC:A */
mov	word ptr unk_1343C, 2
jmp	loc_145A8
;     ***************************************************************************
nop

loc_14514:				; CODE XREF: s_444C+AD  j		 /* DOS offset ---> BBD:4 */
mov	word ptr unk_1343C, 7
jmp	loc_145A8
;     ***************************************************************************
nop

loc_1451E:				; CODE XREF: s_444C+A3  j		 /* DOS offset ---> BBD:E */
mov	word ptr unk_1343C, 4
jmp	loc_145A8
;     ***************************************************************************
nop

loc_14528:				; CODE XREF: s_444C+B4  j		 /* DOS offset ---> BBE:8 */
mov	word ptr unk_1343C, 6
jmp	short loc_145A8
;     ***************************************************************************

loc_14530:				; CODE XREF: s_444C+B8  j		 /* DOS offset ---> BBF:0 */
; game_view_other_province_sub_3+C6  j ...
mov	word ptr unk_1343C, 5
jmp	short loc_145A8
;     ***************************************************************************

loc_14538:				; CODE XREF: s_444C+9A  j		 /* DOS offset ---> BBF:8 */
mov	ax, 1
push	ax
call	far ptr	57Ch:96h ; system_sound_delay_1

loc_14541:				; CODE XREF: s_444C+123  j s_444C+133  j		 /* DOS offset ---> BC0:1 */
add	sp, 2
jmp	short loc_145A2
;     ***************************************************************************
mov	cl, 3
mov	al, [bp+arg_0]
sub	ah, ah
sub	ax, 20h	; ' '
shl	ax, cl
push	ax
push	cs

loc_14554:				; CODE XREF: game_view_other_province_sub_3+6F  j		 /* DOS offset ---> BC1:4 */
call	near ptr s_4312	; *
add	sp, 2

loc_1455A:				; CODE XREF: game_view_other_province_sub_3+74  j		 /* DOS offset ---> BC1:A */
mov	word ptr unk_1343C, 3
jmp	short loc_145A8
;     ***************************************************************************
mov	al, [bp+arg_0]
sub	ah, ah

loc_14567:				; DATA XREF: game_build_fort_map_fort_placement_interface-FFE0  r		 /* DOS offset ---> BC2:7 */
sub	ax, 20h	; ' '
push	ax
push	cs
call	loc_14300
jmp	short loc_14541
;     ***************************************************************************
nop
mov	al, [bp+arg_0]
sub	ah, ah
sub	ax, 30h	; '0'
push	ax
push	cs
call	near ptr game_display_text_color ; *
jmp	short loc_14541
;     ***************************************************************************
nop
mov	al, [bp+arg_0]
sub	ah, ah
sub	ax, 20h	; ' '
mov	word ptr unk_13436, ax
jmp	short loc_145A2
;     ***************************************************************************
nop

loc_14590:				; CODE XREF: dseg:2457A  j		 /* DOS offset ---> BC5:0 */
mov	al, [bp+arg_0]
sub	al, 30h	; '0'
mov	byte_13438, al
jmp	short loc_145A2
;     ***************************************************************************
mov	al, [bp+arg_0]
sub	al, 30h	; '0'
mov	byte_1343A, al

loc_145A2:				; CODE XREF: s_444C+F8  j s_444C+141  j ...		 /* DOS offset ---> BC6:2 */
mov	word ptr unk_1343C, 0

loc_145A8:				; CODE XREF: s_444C+36  j s_444C+4B  j ...		 /* DOS offset ---> BC6:8 */
mov	al, [bp+arg_0]

loc_145AB:				; CODE XREF: game_view_other_province_sub_3+115  j		 /* DOS offset ---> BC6:B */
mov	sp, bp
pop	bp
retf
s_444C		endp		 /* DOS offset ---> BB0:C */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_execute_function	proc far	; CODE XREF: game_input_query_func_query_keyboard+5  p
; game_input_query_display_yes_no+5  p ...

arg_0		= word ptr  6

push	bp
mov	bp, sp

loc_145B3:				; CODE XREF: dseg:2458D  j dseg:245AD  j		 /* DOS offset ---> BC7:3 */
sub	sp, 2
mov	bx, [bp+arg_0]
cmp	byte ptr [bx], 0
jz	short loc_145D3

loc_145BE:				; CODE XREF: system_execute_function+21  j		 /* DOS offset ---> BC7:E */
inc	[bp+arg_0]
mov	al, [bx]
push	ax
push	cs
call	near ptr s_444C	; Function
; ????
;
add	sp, 2
mov	bx, [bp+arg_0]
cmp	byte ptr [bx], 0
jnz	short loc_145BE

loc_145D3:				; CODE XREF: system_execute_function+C  j		 /* DOS offset ---> BC9:3 */
mov	sp, bp
pop	bp
retf
system_execute_function	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_output_display_text proc	far	; CODE XREF: game_input_query_display_and_query+11  p

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	ax, 55Ch
mov	dx, 3EFh
push	dx
push	ax
lea	ax, [bp+arg_0]
push	ax
push	cs
call	loc_1406C	; call 0000017C	-> JKL
; dseg:406C
; ????
mov	sp, bp
pop	bp
retf
system_output_display_text endp

;     ***************************************************************************

loc_145EF:				; CODE XREF: dseg:2460E  j		 /* DOS offset ---> BCA:F */
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_input_query_func_query_keyboard proc far
; CODE XREF: game_input_query_func_query_keyboard2+60  p
; game_input_query_func_wait_for_input+51  p ...
mov	ax, 3448h
push	ax
push	cs
call	near ptr system_execute_function
add	sp, 2
retf
game_input_query_func_query_keyboard endp

;     ***************************************************************************
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db 0FFh
db  76h	; v
db  0Eh
db 0FFh
db  76h	; v
unk_14604	db  0Ch			; CODE XREF: dseg:245F5  j
db 0FFh
db  76h	; v
db  0Ah
db 0FFh
db  76h	; v
db    8
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0BAh	;   *
unk_14610	db  0Ch			; CODE XREF: dseg:245ED  j
db    0
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


s_4618		proc far		; CODE XREF: game_query_user_input_main+D  p		 /* DOS offset ---> BCD:8 */
; game_query_user_input_main+27  p ...
mov	ax, 3B90h
push	ax
mov	ax, 107h
push	ax
mov	ax, 8
push	ax

loc_14624:				; CODE XREF: game_view_other_province_sub_2+14  j		 /* DOS offset ---> BCE:4 */
mov	ax, 1
push	ax

loc_14628:				; CODE XREF: dseg:2463E  j		 /* DOS offset ---> BCE:8 */
push	word_13434
mov	ax, 4Fh	; 'O'
push	ax

loc_14630:		 /* DOS offset ---> BCF:0 */
push	word_13432

loc_14634:				; CODE XREF: dseg:24630  j		 /* DOS offset ---> BCF:4 */
call	far ptr	561h:18Ah
add	sp, 4
push	ax

loc_1463D:				; CODE XREF: dseg:24628  j		 /* DOS offset ---> BCF:D */
call	far ptr	0:1469h
add	sp, 0Ch
retf
s_4618		endp		 /* DOS offset ---> BCD:8 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_query_user_input proc far		; CODE XREF: game_query_user_input_main+1E  p
; game_query_user_input_main+38  p

var_2		= word ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
unk_14648	db 0ECh	;   *		; CODE XREF: dseg:23E85  p dseg:244BD  p ...
db  83h	;   *
db 0ECh	;   *
db    2
;     ***************************************************************************

loc_1464C:				; CODE XREF: game_view_other_province_sub_2+1C  j		 /* DOS offset ---> BD0:C */
call	far ptr	49Ch:13Eh
mov	[bp+var_2], ax
mov	ax, 5
;     ***************************************************************************
db  50h	; P
db  9Ah	;   *
db 0AFh	;   *
db    0
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db    2
;     ***************************************************************************

loc_14660:				; CODE XREF: game_query_user_input+2D  j		 /* DOS offset ---> BD2:0 */
inc	[bp+var_2]

loc_14663:				; CODE XREF: game_view_other_province_sub+D  j		 /* DOS offset ---> BD2:3 */
call	far ptr	0:5Bh
or	ax, ax

loc_1466A:				; DATA XREF: game_build_fort_map_fort_placement:loc_19C0C  r		 /* DOS offset ---> BD2:A */
jnz	short loc_1467A

loc_1466C:				; DATA XREF: game_build_fort_map_fort_placement-FF31  r		 /* DOS offset ---> BD2:C */
call	far ptr	0:0C5h
or	ax, ax
jnz	short loc_14660
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1467A:				; CODE XREF: game_query_user_input:loc_1466A  j		 /* DOS offset ---> BD3:A */
push	[bp+var_2]
call	far ptr	49Ch:166h
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
game_query_user_input endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_query_user_input_main proc	far	; CODE XREF: game_input_query_func_query_keyboard2+37  p
; game_input_query_display_yes_no:loc_148D2  p
push	bp
mov	bp, sp
push	cs
call	near ptr s_42AC

loc_14691:				; CODE XREF: game_query_user_input_main+3D  j		 /* DOS offset ---> BD5:1 */
call	far ptr	492h:4
push	cs
call	near ptr s_4618
mov	ax, word_13532
or	ax, word_13530
jz	short loc_146A7
call	dword ptr word_13530

loc_146A7:				; CODE XREF: game_query_user_input_main+17  j		 /* DOS offset ---> BD6:7 */
push	cs
call	near ptr game_query_user_input
call	far ptr	492h:4

loc_146B0:				; CODE XREF: dseg:24663  j		 /* DOS offset ---> BD7:0 */
push	cs
call	near ptr s_4618
mov	ax, word_13532
or	ax, word_13530
jz	short loc_146C1
call	dword ptr word_13530

loc_146C1:				; CODE XREF: game_query_user_input_main+31  j		 /* DOS offset ---> BD8:1 */
push	cs
call	near ptr game_query_user_input
or	ax, ax
jz	short loc_14691
call	far ptr	0:75h
mov	sp, bp
pop	bp
retf
game_query_user_input_main endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_46D2		proc far		; CODE XREF: game_input_query_func_query_keyboard2+8A  p		 /* DOS offset ---> BD9:2 */

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 6
push	di
push	si
mov	ax, [bp+arg_0]
mov	[bp+var_2], ax
sub	cx, cx
mov	[bp+var_4], cx
mov	[bp+var_6], cx
mov	bx, ax
cmp	byte ptr [bx], 0
jz	short loc_14726

loc_146EF:				; CODE XREF: s_46D2+52  j		 /* DOS offset ---> BDA:F */
inc	[bp+var_2]
mov	al, [bx]
sub	ah, ah

loc_146F6:				; CODE XREF: dseg:246AD  j		 /* DOS offset ---> BDB:6 */
sub	ax, 30h	; '0'
cwd
mov	cx, [bp+var_6]
mov	bx, [bp+var_4]
mov	si, cx
mov	di, bx
shl	cx, 1
rcl	bx, 1
shl	cx, 1
rcl	bx, 1
add	cx, si
adc	bx, di
shl	cx, 1
rcl	bx, 1
add	ax, cx
adc	dx, bx
mov	[bp+var_6], ax
mov	[bp+var_4], dx
mov	bx, [bp+var_2]
cmp	byte ptr [bx], 0
jnz	short loc_146EF

loc_14726:				; CODE XREF: s_46D2+1B  j		 /* DOS offset ---> BDE:6 */
mov	ax, [bp+var_6]
mov	dx, [bp+var_4]
pop	si
pop	di
mov	sp, bp
pop	bp
retf
s_46D2		endp		 /* DOS offset ---> BD9:2 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_input_query_func_query_keyboard2 proc far
; CODE XREF: game_input_query_func_wait_for_input:loc_14832  p

var_10		= word ptr -10h
var_C		= word ptr -0Ch
var_2		= byte ptr -2
arg_0		= word ptr  6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  10h
db  56h	; V
db 0C6h	;   *
db  46h	; F
db 0F0h	;   *
db    0
db 0EBh	;   *
db  29h	; )
;     ***************************************************************************
nop

loc_14740:				; CODE XREF: game_input_query_func_query_keyboard2+3F  j		 /* DOS offset ---> BE0:0 */
cmp	[bp+var_2], 39h	; '9'
ja	short loc_14773
mov	al, byte ptr [bp+var_10]
sub	ah, ah

loc_1474B:				; CODE XREF: dseg:24712  j		 /* DOS offset ---> BE0:B */
cmp	ax, [bp+arg_0]
jge	short loc_14768
mov	al, [bp+var_2]

loc_14753:		 /* DOS offset ---> BE1:3 */
mov	cl, byte ptr [bp+var_10]
inc	byte ptr [bp+var_10]
sub	ch, ch
mov	si, cx
mov	byte ptr [bp+si+var_C],	al
push	ax
push	cs
call	near ptr s_444C
add	sp, 2

loc_14768:				; CODE XREF: game_input_query_func_query_keyboard2+1C  j		 /* DOS offset ---> BE2:8 */
; game_input_query_func_query_keyboard2+4B  j ...
push	cs
call	near ptr game_query_user_input_main
mov	[bp+var_2], al
cmp	al, 30h	; '0'
jnb	short loc_14740

loc_14773:				; CODE XREF: game_input_query_func_query_keyboard2+12  j		 /* DOS offset ---> BE3:3 */
; dseg:24760  j
mov	al, [bp+var_2]

loc_14776:				; CODE XREF: game_view_other_province_sub+FF  j		 /* DOS offset ---> BE3:6 */
; game_view_other_province_sub+10E  j
sub	ah, ah
cmp	ax, 7Fh	; ''
jz	short loc_1478B
ja	short loc_14768

loc_1477F:				; CODE XREF: game_view_other_province_sub+F  j		 /* DOS offset ---> BE3:F */
sub	al, 8
jz	short loc_1478B

loc_14783:		 /* DOS offset ---> BE4:3 */
sub	al, 5
jz	short loc_147A6
sub	al, 10h
jnz	short loc_14768

loc_1478B:				; CODE XREF: game_input_query_func_query_keyboard2+49  j		 /* DOS offset ---> BE4:B */
; game_input_query_func_query_keyboard2+4F  j
cmp	byte ptr [bp+var_10], 0
jz	short loc_14768
push	cs
call	near ptr game_input_query_func_query_keyboard
dec	byte ptr [bp+var_10]
mov	al, byte ptr [bp+var_10]
sub	ah, ah
mov	si, ax
mov	byte ptr [bp+si+var_C],	20h ; ' '
jmp	short loc_14768
;     ***************************************************************************
nop

loc_147A6:				; CODE XREF: game_input_query_func_query_keyboard2+53  j		 /* DOS offset ---> BE6:6 */
mov	si, [bp+var_10]
and	si, 0FFh
mov	byte ptr [bp+si+var_C],	0
cmp	byte ptr [bp+var_10], 0
jz	short loc_147C8
lea	ax, [bp+var_C]
push	ax
push	cs
call	near ptr s_46D2

loc_147BF:				; CODE XREF: game_view_other_province_view_another+37  j		 /* DOS offset ---> BE7:F */
add	sp, 2
pop	si

loc_147C3:		 /* DOS offset ---> BE8:3 */
mov	sp, bp
pop	bp

locret_147C6:				; CODE XREF: dseg:249C0  p
retf
;     ***************************************************************************
nop

loc_147C8:				; CODE XREF: game_input_query_func_query_keyboard2+83  j		 /* DOS offset ---> BE8:8 */
mov	ax, 0FFFFh
sub	dx, dx
pop	si
mov	sp, bp
pop	bp
retf
game_input_query_func_query_keyboard2 endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_input_query_func_wait_for_input proc far ;	CODE XREF: game_input_query_func+13  p

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp
mov	bp, sp

loc_147D5:				; CODE XREF: game_view_other_province_queries+D  j		 /* DOS offset ---> BE9:5 */
sub	sp, 8
mov	ax, word_13432
mov	[bp+var_6], ax
push	word_13434
push	cs
call	near ptr s_4312	; nop, unknown
add	sp, 2
mov	ax, [bp+arg_4]

loc_147EC:		 /* DOS offset ---> BEA:C */
mov	dx, [bp+arg_6]
mov	[bp+var_4], ax
mov	[bp+var_2], dx
mov	[bp+var_8], 0

loc_147FA:				; CODE XREF: game_input_query_func_wait_for_input+46  j		 /* DOS offset ---> BEB:A */
mov	al, 20h	; ' '
push	ax
push	cs
call	near ptr s_444C	; nop, unknown
add	sp, 2
inc	[bp+var_8]
mov	ax, 0Ah
cwd
push	dx
push	ax
lea	ax, [bp+var_4]
push	ax
call	far ptr	0:3984h	; s_3984
; nop, freezes game
or	dx, ax
jnz	short loc_147FA
mov	ax, word_13432
cmp	[bp+var_6], ax
jge	short loc_1482E

loc_14822:				; CODE XREF: game_input_query_func_wait_for_input+5A  j		 /* DOS offset ---> BEE:2 */
push	cs
call	near ptr game_input_query_func_query_keyboard
mov	ax, word_13432
cmp	[bp+var_6], ax
jl	short loc_14822

loc_1482E:				; CODE XREF: game_input_query_func_wait_for_input+4E  j		 /* DOS offset ---> BEE:E */
; game_input_query_func_wait_for_input+9C  j ...
push	[bp+var_8]
push	cs

loc_14832:				; CODE XREF: dseg:24816  j dseg:24825  j		 /* DOS offset ---> BEF:2 */
call	near ptr game_input_query_func_query_keyboard2

loc_14835:				; CODE XREF: dseg:2482F  j		 /* DOS offset ---> BEF:5 */
add	sp, 2
mov	[bp+var_4], ax
mov	[bp+var_2], dx
cmp	dx, [bp+arg_2]
jl	short loc_1485C
jg	short loc_1484A
cmp	ax, [bp+arg_0]
jb	short loc_1485C

loc_1484A:				; CODE XREF: game_input_query_func_wait_for_input+71  j		 /* DOS offset ---> BF0:A */
mov	ax, [bp+arg_4]
mov	dx, [bp+arg_6]
cmp	[bp+var_2], dx
jl	short loc_1487E
jg	short loc_1485C
cmp	[bp+var_4], ax
jbe	short loc_1487E

loc_1485C:				; CODE XREF: game_input_query_func_wait_for_input+6F  j		 /* DOS offset ---> BF1:C */
; game_input_query_func_wait_for_input+76  j ...
cmp	[bp+var_4], 0FFFFh
jnz	short loc_14868
cmp	[bp+var_2], 0
jz	short loc_1487E

loc_14868:				; CODE XREF: game_input_query_func_wait_for_input+8E  j		 /* DOS offset ---> BF2:8 */
mov	ax, word_13432

loc_1486B:				; CODE XREF: game_view_other_province_queries+F  j		 /* DOS offset ---> BF2:B */
; game_view_other_province_queries+2E  j	...
cmp	[bp+var_6], ax
jge	short loc_1482E

loc_14870:				; CODE XREF: game_input_query_func_wait_for_input+A8  j		 /* DOS offset ---> BF3:0 */
push	cs
call	near ptr game_input_query_func_query_keyboard

loc_14874:				; CODE XREF: game_view_other_province_queries+F5  j		 /* DOS offset ---> BF3:4 */
; game_view_other_province_queries+115  j
mov	ax, word_13432

loc_14877:				; CODE XREF: game_view_other_province_queries+E0  j		 /* DOS offset ---> BF3:7 */
; game_view_other_province_queries+EA  j	...
cmp	[bp+var_6], ax
jl	short loc_14870
jmp	short loc_1482E
;     ***************************************************************************

loc_1487E:				; CODE XREF: game_input_query_func_wait_for_input+81  j		 /* DOS offset ---> BF3:E */
; game_input_query_func_wait_for_input+88  j ...
mov	ax, [bp+var_4]
mov	dx, [bp+var_2]
mov	sp, bp
pop	bp
retf
game_input_query_func_wait_for_input endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_input_query_func proc far		; CODE XREF: game_input_query_display_and_query+1D  p

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 4
mov	ax, [bp+arg_2]
sub	dx, dx
push	dx
push	ax
mov	ax, [bp+arg_0]
push	dx
push	ax

loc_1489A:				; CODE XREF: dseg:24894  j		 /* DOS offset ---> BF5:A */
push	cs
call	near ptr game_input_query_func_wait_for_input ;	nop, results in	game mode no human players
mov	sp, bp
pop	bp
retf
game_input_query_func endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_input_query_display_and_query proc	far ; DATA XREF: game_mil_hire_reassign_troops+CC  t

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

push	bp
mov	bp, sp
push	[bp+arg_4]
push	[bp+arg_2]
push	[bp+arg_0]
mov	ax, 344Fh
push	ax

loc_148B2:				; CODE XREF: game_view_other_province_queries+D5  j		 /* DOS offset ---> BF7:2 */
; game_view_other_province_queries+DB  j
push	cs
call	near ptr system_output_display_text
mov	sp, bp

loc_148B8:				; CODE XREF: dseg:24898  j		 /* DOS offset ---> BF7:8 */
push	[bp+arg_4]

loc_148BB:				; CODE XREF: game_view_other_province_queries+E5  j		 /* DOS offset ---> BF7:B */
push	[bp+arg_2]
push	cs
call	near ptr game_input_query_func
mov	sp, bp
pop	bp
retf
game_input_query_display_and_query endp


;     *************** S U B	R O U T	I N E     ***************************************


game_input_query_display_yes_no	proc far ; CODE	XREF: game_input_query_display_OK:loc_14920  p

; FUNCTION CHUNK AT 4904 SIZE 0000000F BYTES

mov	ax, 13404
push	ax
push	cs
call	near ptr system_execute_function
add	sp, 2

loc_148D1:				; CODE XREF: game_input_query_display_yes_no:loc_148DC  j		 /* DOS offset ---> BF9:1 */
; game_input_query_display_yes_no+26  j ...
push	cs

loc_148D2:				; CODE XREF: game_view_other_province_queries+E8  j		 /* DOS offset ---> BF9:2 */
call	near ptr game_query_user_input_main
sub	ah, ah
cmp	ax, 79h	; 'y'

loc_148DA:		 /* DOS offset ---> BF9:A */
jz	short loc_14904

loc_148DC:				; CODE XREF: game_view_other_province_queries+D8  j		 /* DOS offset ---> BF9:C */
ja	short loc_148D1
cmp	al, 4Eh	; 'N'
jz	short loc_148F6
jg	short loc_148EE

loc_148E4:				; CODE XREF: game_view_other_province_queries+D3  j		 /* DOS offset ---> BFA:4 */
sub	al, 0Dh
jz	short loc_148F6
sub	al, 23h	; '#'
jz	short loc_14904
jmp	short loc_148D1
;     ***************************************************************************

loc_148EE:				; CODE XREF: game_input_query_display_yes_no+1C  j		 /* DOS offset ---> BFA:E */
sub	al, 59h	; 'Y'
jz	short loc_14904
sub	al, 15h
jnz	short loc_148D1

loc_148F6:				; CODE XREF: game_input_query_display_yes_no+1A  j		 /* DOS offset ---> BFB:6 */
; game_input_query_display_yes_no+20  j
mov	ax, 3467h
push	ax
push	cs

loc_148FB:		 /* DOS offset ---> BFB:B */
call	near ptr system_execute_function

loc_148FE:				; CODE XREF: game_view_other_province_who_will_spy+4B  j		 /* DOS offset ---> BFB:E */
add	sp, 2

loc_14901:		 /* DOS offset ---> BFC:1 */
sub	ax, ax
retf
game_input_query_display_yes_no	endp

;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_input_query_display_yes_no

loc_14904:				; CODE XREF: game_input_query_display_yes_no:loc_148DA  j		 /* DOS offset ---> BFC:4 */
; game_input_query_display_yes_no+24  j ...
mov	ax, 3465h
push	ax
push	cs
call	near ptr system_execute_function
add	sp, 2
mov	ax, 1
retf
; END OF FUNCTION CHUNK	FOR game_input_query_display_yes_no
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_input_query_display_OK proc far
mov	ax, 3469h
push	ax
push	cs
call	near ptr system_execute_function
add	sp, 2
push	cs

loc_14920:				; CODE XREF: dseg:248ED  j		 /* DOS offset ---> BFE:0 */
call	near ptr game_input_query_display_yes_no
retf
game_input_query_display_OK endp

;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
cmp	word_13534, 0
jz	short loc_14957
mov	bx, word_13534
mov	ax, [bx+1Ch]
mov	cx, [bx+1Eh]
shr	cx, 1
mov	dx, 3B90h
push	dx
mov	dx, 106h
push	dx
;     ***************************************************************************
db 0BAh	;   *
db    9
db    0
db  52h	; R
db 0BAh	;   *
db  10h
db    0
db  52h	; R
db  51h	; Q
db  50h	; P
db  9Ah	;   *
db  52h	; R
unk_14951	db    4			; CODE XREF: dseg:249D3  j
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ch
;     ***************************************************************************

loc_14957:				; CODE XREF: dseg:492F  j		 /* DOS offset ---> C01:7 */
cmp	word_13536, 0
jz	short loc_14981
mov	bx, word_13536
mov	ax, [bx+1Ch]
mov	cx, [bx+1Eh]
shr	cx, 1
mov	dx, 3BB4h
push	dx
mov	dx, 106h
push	dx

loc_14972:				; CODE XREF: game_view_other_province+15  j		 /* DOS offset ---> C03:2 */
; game_view_other_province+9B  j
mov	dx, 9
push	dx
mov	dx, 10h
push	dx
push	cx
push	ax
call	far ptr	0:452h

loc_14981:				; CODE XREF: dseg:495C  j		 /* DOS offset ---> C04:1 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_4986		proc far		 /* DOS offset ---> C04:6 */
push	bp
mov	bp, sp
sub	sp, 2
cmp	byte_14CEF, 0
jnz	short loc_149C6
call	far ptr	0:5Bh
or	ax, ax
jz	short loc_149C6
call	far ptr	0:75h
sub	ah, ah
cmp	ax, 3
jz	short loc_149AD

loc_149A8:				; CODE XREF: game_view_other_province+36  j		 /* DOS offset ---> C06:8 */
cmp	ax, 1Bh
jnz	short loc_149C6

loc_149AD:				; CODE XREF: s_4986+20  j		 /* DOS offset ---> C06:D */
mov	al, 18h
push	ax
call	far ptr	6EBh:3Ah

loc_149B5:				; CODE XREF: game_view_other_province+55  j		 /* DOS offset ---> C07:5 */
add	sp, 2

loc_149B8:				; CODE XREF: s_4986+39  j		 /* DOS offset ---> C07:8 */
call	far ptr	6EBh:64h
or	ax, ax
jnz	short loc_149B8
call	far ptr	0A95h:4

loc_149C6:				; CODE XREF: s_4986+B  j	s_4986+14  j ...		 /* DOS offset ---> C08:6 */
mov	sp, bp
pop	bp
retf
s_4986		endp		 /* DOS offset ---> C04:6 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

math_value_x2_from_x1_y1_y2 proc far	; CODE XREF: math_value_x2_from_x1_y1_y2_2+E  p
; dseg:2497C  j ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

push	bp
mov	bp, sp

loc_149CD:				; CODE XREF: game_view_other_province+6A  j		 /* DOS offset ---> C08:D */
cmp	[bp+arg_4], 0   ; 0x64
jnz	short loc_149DA
mov	ax, 0FFFFh

loc_149D6:				; CODE XREF: dseg:249C8  j dseg:249D1  j ...		 /* DOS offset ---> C09:6 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_149DA:				; CODE XREF: math_value_x2_from_x1_y1_y2+7  j		 /* DOS offset ---> C09:A */
mov	ax, [bp+arg_4]  ;0x64
sub	dx, dx
push	dx
push	ax
mov	ax, [bp+arg_2]  ;0x3b
mul	[bp+arg_0]  ;0x1d --->6af
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/	; math_divide_2_16bit_values    6af/0x64=0x11
mov	sp, bp
pop	bp
retf
math_value_x2_from_x1_y1_y2 endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

math_value_x2_from_x1_y1_y2_2 proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
mov	ax, 100

loc_149F8:				; CODE XREF: game_view_other_province+99  j		 /* DOS offset ---> C0B:8 */
push	ax          ;0x64
push	[bp+arg_2]  ;0x3b
push	[bp+arg_0]  ;0x1d
push	cs
call	near ptr math_value_x2_from_x1_y1_y2
mov	sp, bp
pop	bp
retf
math_value_x2_from_x1_y1_y2_2 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_prov_move_next_free_general_pointer proc far

arg_0		= word ptr  6
arg_2		= byte ptr  8
arg_4		= byte ptr  0Ah

push	bp
mov	bp, sp

loc_14A0B:				; CODE XREF: game_view_other_province+42  j		 /* DOS offset ---> C0C:B */
; game_view_other_province+88  j
mov	al, [bp+arg_4]
sub	ah, ah
push	ax
mov	bx, [bp+arg_0]
mov	al, [bx]
mov	cl, [bp+arg_2]
sub	ch, ch

loc_14A1B:				; CODE XREF: game_view_other_province+17  j		 /* DOS offset ---> C0D:B */
add	ax, cx
push	ax

loc_14A1E:				; math_truncate_decimal_value		 /* DOS offset ---> C0D:E */
call	far ptr	561h:18Ah
mov	bx, [bp+arg_0]
mov	[bx], al
mov	sp, bp
pop	bp
retf
game_data_prov_move_next_free_general_pointer endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

math_subtract_x1_from_y1 proc far

arg_0		= word ptr  6
arg_2		= byte ptr  8

push	bp
mov	bp, sp

loc_14A2F:				; CODE XREF: game_options_save_game_sub+B  j		 /* DOS offset ---> C0E:F */
mov	al, [bp+arg_2]
sub	ah, ah
push	ax
mov	bx, [bp+arg_0]
mov	al, [bx]
push	ax
call	far ptr	561h:18Ah ; math_truncate_decimal_value
mov	bx, [bp+arg_0]
sub	[bx], al
mov	al, [bx]
mov	sp, bp
pop	bp

locret_14A4A:
retf
math_subtract_x1_from_y1 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_set_generals_soldiers	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

push	bp
mov	bp, sp
push	[bp+arg_4]
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, [bp+arg_2]
push	ax

loc_14A5B:				; CODE XREF: dseg:24A3D  j		 /* DOS offset ---> C11:B */
call	far ptr	561h:18Ah ; math_truncate_decimal_value
mov	bx, [bp+arg_0]
mov	[bx], ax

loc_14A65:				; CODE XREF: dseg:24A05  j dseg:24A19  j ...		 /* DOS offset ---> C12:5 */
mov	sp, bp
pop	bp
retf
game_data_set_generals_soldiers	endp

;     ***************************************************************************
nop

loc_14A6A:				; CODE XREF: game_options_save_game_sub+42  j		 /* DOS offset ---> C12:A */
push	bp
mov	bp, sp
; START	OF FUNCTION CHUNK FOR game_options_save_game_sub

loc_14A6D:				; CODE XREF: game_options_save_game_sub+47  j		 /* DOS offset ---> C12:D */
push	[bp+arg_2]
mov	bx, [bp+arg_0]
push	word ptr [bx]
call	far ptr	561h:18Ah ; math_truncate_decimal_value
mov	bx, [bp+arg_0]
sub	[bx], ax
mov	ax, [bx]
mov	sp, bp
pop	bp

locret_14A84:				; CODE XREF: dseg:24A7F  j
retf
; END OF FUNCTION CHUNK	FOR game_options_save_game_sub
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

math_value_z1_z2_from_x1_x2_y1_y2 proc far

var_6		= word ptr -6
var_4		= word ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp
mov	bp, sp
sub	sp, 6
push	di
push	si
cmp	[bp+arg_2], 0
jnz	short loc_14AA2
cmp	[bp+arg_6], 0
jnz	short loc_14AA2
sub	ax, ax
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_14AA2:				; CODE XREF: math_value_z1_z2_from_x1_x2_y1_y2+C  j		 /* DOS offset ---> C16:2 */
; math_value_z1_z2_from_x1_x2_y1_y2+12  j
mov	ax, 100
push	ax

loc_14AA6:				; CODE XREF: game_options_save_game_sub+3B  j		 /* DOS offset ---> C16:6 */
mov	ax, [bp+arg_6]
sub	dx, dx
mov	cx, [bp+arg_2]
sub	bx, bx
mov	[bp+var_6], cx
mov	[bp+var_4], bx
add	cx, ax
adc	bx, dx
push	bx
push	cx

loc_14ABC:				; CODE XREF: game_options_save_game_sub+D  j		 /* DOS offset ---> C17:C */
mov	cx, [bp+arg_0]
sub	bx, bx
push	bx
push	cx
push	[bp+var_4]
push	[bp+var_6]
mov	si, ax
mov	di, dx
call	far ptr	0:38B2h	; multiples 1st	ratio side
mov	cx, [bp+arg_4]
sub	bx, bx
push	bx

loc_14AD8:				; CODE XREF: dseg:24AC8  j		 /* DOS offset ---> C19:8 */
push	cx
push	di
push	si
mov	si, ax
mov	di, dx
call	far ptr	0:38B2h	; multiples 2nd	ratio side
add	si, ax		; add them together
adc	di, dx
push	di
push	si
call	far ptr	0:3818h /* math_divide_2_16bit_values*/	; divides by total for new ratio
push	ax
call	far ptr	561h:18Ah

loc_14AF5:				; CODE XREF: game_options_save_game+10  j		 /* DOS offset ---> C1B:5 */
add	sp, 4
pop	si
pop	di
mov	sp, bp
pop	bp
retf
math_value_z1_z2_from_x1_x2_y1_y2 endp


;     *************** S U B	R O U T	I N E     ***************************************


math_random_number_generator_2 proc far	; CODE XREF: math_random_number_generator+11  p
mov	ax, 4E6Dh
;     ***************************************************************************
db 0BAh	;   *
db 0C6h	;   *
db  41h	; A
db  52h	; R
db  50h	; P
db 0FFh
db  36h	; 6
db  6Eh	; n
db  34h	; 4
db 0FFh
db  36h	; 6
db  6Ch	; l
db  34h	; 4
db  9Ah	;   *
db 0B2h	;   *
db  38h	; 8
db    0
db    0
db    5
db  39h	; 9
db  30h	; 0
db  83h	;   *
db 0D2h	;   *
db    0
db 0A3h	;   *
unk_14B1A	db  6Ch	; l		; CODE XREF: dseg:24B06  j
db  34h	; 4
db  89h	;   *
db  16h
db  6Eh	; n
db  34h	; 4
db  8Bh	;   *
unk_14B21	db 0C2h	;   *		; CODE XREF: game_options_save_game+5A  j
db  80h	;   *
db 0E4h	;   *
db  7Fh	; 
db 0CBh	;   *
math_random_number_generator_2 endp

;     ***************************************************************************
push	bp
mov	bp, sp
mov	ax, [bp+6]
mov	word_1346C, ax
mov	word_1346E, 0
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

math_random_number_generator proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
cmp	[bp+arg_0], 2	; [E3EE]=0013
jnb	short RND_Value
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

RND_Value:				; CODE XREF: math_random_number_generator+7  j
push	cs
call	near ptr math_random_number_generator_2	; s_4AFE
sub	dx, dx
div	[bp+arg_0]
;     ***************************************************************************
db  8Bh	;   *
db 0C2h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
math_random_number_generator endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_4B58		proc far		 /* DOS offset ---> C21:8 */

var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_2], 0

loc_14B63:				; CODE XREF: s_4B58+45  j		 /* DOS offset ---> C22:3 */
; game_options_save_game+6D  j ...
mov	[bp+var_4], 0
mov	ax, [bp+var_2]
inc	ax
or	ax, ax
jle	short loc_14B8A

loc_14B70:				; CODE XREF: s_4B58+30  j		 /* DOS offset ---> C23:0 */
push	[bp+var_4]
push	[bp+var_2]
call	far ptr	0:154h
add	sp, 4
mov	ax, [bp+var_2]
inc	ax
inc	[bp+var_4]
cmp	ax, [bp+var_4]
jg	short loc_14B70

loc_14B8A:				; CODE XREF: s_4B58+16  j		 /* DOS offset ---> C24:A */
mov	ax, 1
push	ax

loc_14B8E:				; CODE XREF: dseg:24B78  j		 /* DOS offset ---> C24:E */
call	far ptr	57Ch:5Eh

loc_14B93:				; CODE XREF: game_options_save_game+B2  j		 /* DOS offset ---> C25:3 */
add	sp, 2
inc	[bp+var_2]
cmp	[bp+var_2], 8
jl	short loc_14B63
mov	sp, bp
pop	bp

locret_14BA2:				; CODE XREF: dseg:24B60  j dseg:24B64  j
retf
s_4B58		endp		 /* DOS offset ---> C21:8 */

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	word ptr [bp-2], 0
mov	ax, [bp-2]
inc	ax

loc_14BB4:				; CODE XREF: game_options_save_game+ED  j		 /* DOS offset ---> C27:4 */
mov	[bp-4],	ax
or	ax, ax
jz	short loc_14BD4

loc_14BBB:				; CODE XREF: dseg:4BD2  j		 /* DOS offset ---> C27:B */
mov	ax, [bp-4]
dec	ax
push	ax

loc_14BC0:				; CODE XREF: dseg:24BBA  j		 /* DOS offset ---> C28:0 */
push	word ptr [bp-2]
mov	si, ax

loc_14BC5:				; CODE XREF: dseg:24BBF  j dseg:24BB4  j		 /* DOS offset ---> C28:5 */
call	far ptr	0:154h
add	sp, 4
mov	[bp-4],	si
or	si, si
jnz	short loc_14BBB

loc_14BD4:				; CODE XREF: dseg:4BB9  j dseg:24BC6  j		 /* DOS offset ---> C29:4 */
mov	ax, 1
push	ax
call	far ptr	57Ch:5Eh
add	sp, 2

loc_14BE0:				; CODE XREF: dseg:24D5D  p		 /* DOS offset ---> C2A:0 */
inc	word ptr [bp-2]
;     ***************************************************************************
db  83h	;   *
db  7Eh	; ~
db 0FEh	;   *
db    8
db  7Ch	; |
db 0C7h	;   *
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *

;     *************** S U B	R O U T	I N E     ***************************************


s_4BEE		proc far		; CODE XREF: game_gfx_render_graphics+5D  p		 /* DOS offset ---> C2A:E */
mov	ax, 3472h
push	ax
call	far ptr	0:0EDh
add	sp, 2
retf
s_4BEE		endp		 /* DOS offset ---> C2A:E */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


s_4BFC		proc far		; CODE XREF: game_gfx_render_graphics+55  p		 /* DOS offset ---> C2B:C */
; dseg:24BEC  j ...
test	byte ptr word_1CEA2, 4
jnz	short loc_14C28
test	byte ptr word_1CEA2, 1
jnz	short loc_14C16
mov	ax, 3484h
push	ax

loc_14C0E:				; CODE XREF: dseg:24C09  j		 /* DOS offset ---> C2C:E */
call	far ptr	0:0EDh
jmp	short loc_14C31
;     ***************************************************************************
nop

loc_14C16:				; CODE XREF: s_4BFC+C  j		 /* DOS offset ---> C2D:6 */
; game_options_save_game+5C  j ...
mov	ax, 7
push	ax
mov	ax, 1
push	ax
call	far ptr	0:154h

loc_14C23:				; CODE XREF: dseg:24C1B  j		 /* DOS offset ---> C2E:3 */
add	sp, 4
retf
;     ***************************************************************************
nop

loc_14C28:				; CODE XREF: s_4BFC+5  j	dseg:24D8C  p		 /* DOS offset ---> C2E:8 */
mov	ax, 1
push	ax
call	far ptr	0:199h

loc_14C31:				; CODE XREF: s_4BFC+17  j		 /* DOS offset ---> C2F:1 */
add	sp, 2
retf
s_4BFC		endp		 /* DOS offset ---> C2B:C */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_gfx_render_graphics proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
test	byte ptr word_1CEA2, 4
jz	short loc_14C60
cmp	[bp+arg_0], 0
jz	short loc_14C54
sub	ax, ax
push	ax
call	far ptr	0:199h	; s_199
; nop, unknown

loc_14C4E:				; CODE XREF: game_gfx_render_graphics+27  j		 /* DOS offset ---> C30:E */
mov	sp, bp
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_14C54:				; CODE XREF: game_gfx_render_graphics+E  j		 /* DOS offset ---> C31:4 */
mov	ax, 6
push	ax

loc_14C58:				; CODE XREF: game_move_send_whom:loc_24C57  j		 /* DOS offset ---> C31:8 */
call	far ptr	0:0E66h	; system_graphics_video_set_mode
jmp	short loc_14C4E
;     ***************************************************************************
nop

loc_14C60:				; CODE XREF: game_gfx_render_graphics+8  j		 /* DOS offset ---> C32:0 */
cmp	[bp+arg_0], 0
jz	short loc_14C92
cmp	word ptr loc_13495+1, 0
jnz	short loc_14C8A
test	byte ptr word_1CEA2, 1
jz	short loc_14C7A
mov	ax, 6
jmp	short loc_14C7D
;     ***************************************************************************
nop

loc_14C7A:				; CODE XREF: game_gfx_render_graphics+3C  j		 /* DOS offset ---> C33:A */
mov	ax, 0Eh

loc_14C7D:				; CODE XREF: game_gfx_render_graphics+41  j		 /* DOS offset ---> C33:D */
push	ax

loc_14C7E:				; CODE XREF: game_move_send_whom+5F  j		 /* DOS offset ---> C33:E */
call	far ptr	0:0E66h	; system_graphics_video_set_mode
add	sp, 2
inc	word ptr loc_13495+1

loc_14C8A:				; CODE XREF: game_gfx_render_graphics+35  j		 /* DOS offset ---> C34:A */
; dseg:24C70  j ...
push	cs
call	near ptr s_4BFC	; nop, doesn't even play the beginning menu
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_14C92:				; CODE XREF: game_gfx_render_graphics+2E  j		 /* DOS offset ---> C35:2 */
push	cs
call	near ptr s_4BEE	; nop, didn't see a difference
mov	sp, bp
pop	bp
retf
game_gfx_render_graphics endp

;     ***************************************************************************
cmp	word ptr loc_13470, 0
jnz	short loc_14CC2
mov	ax, word_1CEA8
mov	word ptr dword_1CB9A+2,	ax
mov	cx, 2F40h
push	cx
sub	cx, cx
mov	word ptr dword_1CB9A, cx
push	cx
push	ax
push	word_1CC6C
call	far ptr	0:277h

loc_14CBC:				; CODE XREF: game_move_send_whom+99  j		 /* DOS offset ---> C37:C */
add	sp, 8
mov	word ptr loc_13470, ax

loc_14CC2:				; CODE XREF: dseg:4C9F  j		 /* DOS offset ---> C38:2 */
dec	word ptr loc_13470
les	bx, dword_1CB9A
inc	word ptr dword_1CB9A
mov	al, es:[bx]
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_4CD2		proc far		; CODE XREF: s_4D48+20  p		 /* DOS offset ---> C39:2 */

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

push	bp
mov	bp, sp
sub	ax, ax
push	ax
push	[bp+arg_6]
push	[bp+arg_4]
push	word_1CC6C
call	far ptr	0:2CCh
mov	sp, bp

loc_14CE9:				; CODE XREF: game_move_send_whom+B4  j		 /* DOS offset ---> C3A:9 */
cmp	ax, 0FFFFh
jnz	short loc_14CF2
;     ***************************************************************************
byte_14CEE	db 3Bh			; DATA XREF: game_start_new_game_display_scenario:loc_1ACDC  r
; game_start_new_game_display_scenario+72  r ...
byte_14CEF	db 0D0h			; DATA XREF: s_4986+6  r
; game_start_new_game_sub_3+4F  r ...
word_14CF0	dw 1C74h		; DATA XREF: game_start_new_game_which_scenario:loc_1B54E  w
; dseg:C968  r ...
;     ***************************************************************************

loc_14CF2:				; CODE XREF: s_4CD2+1A  j		 /* DOS offset ---> C3B:2 */
mov	word ptr loc_13470, 0
push	[bp+arg_8]

loc_14CFB:		 /* DOS offset ---> C3B:B */
mov	ax, 14Ah
mov	dx, 4B5h
push	dx
push	ax
push	[bp+arg_2]
push	[bp+arg_0]
call	far ptr	0:2E4Eh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
les	bx, dword_1CB9A
inc	word ptr dword_1CB9A

loc_14D1A:				; CODE XREF: game_move_send_whom+3B  j		 /* DOS offset ---> C3D:A */
; game_move_send_whom+61  j ...
mov	al, es:[bx]
retf
s_4CD2		endp		 /* DOS offset ---> C39:2 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_gfx_area_division_lines_display proc far ;	CODE XREF: s_4E12+13  p
; s_4E12:loc_14E87  p ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp
mov	bp, sp
mov	ax, word_1CAF4
mov	word ptr dword_1CB9A+2,	ax
mov	ax, [bp+arg_4]
mov	word ptr dword_1CB9A, ax
push	[bp+arg_6]
mov	ax, 1C2h
mov	dx, 4B5h
push	dx
push	ax

loc_14D38:				; CODE XREF: game_move_func+D  j		 /* DOS offset ---> C3F:8 */
; game_move_func+60  j ...
push	[bp+arg_2]
push	[bp+arg_0]
call	far ptr	0:2E4Eh	; system_graphics_render_graphics
mov	sp, bp
pop	bp
retf
game_gfx_area_division_lines_display endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_4D48		proc far		 /* DOS offset ---> C40:8 */

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

push	bp
mov	bp, sp
test	options_value, 4
jz	short loc_14D71
push	cs
call	near ptr game_gfx_blk_bkgrnd_shape_1

loc_14D56:				; CODE XREF: dseg:24D3A  j dseg:24D4F  j		 /* DOS offset ---> C41:6 */
push	[bp+arg_4]
push	[bp+arg_2]

loc_14D5C:				; CODE XREF: game_move_func+37  j		 /* DOS offset ---> C41:C */
push	[bp+arg_0]
mov	ax, 40h	; '@'
push	ax
mov	ax, 128h
push	ax
push	cs
call	near ptr s_4CD2	; *
mov	word_13572, 1

loc_14D71:				; CODE XREF: s_4D48+8  j		 /* DOS offset ---> C43:1 */
mov	sp, bp
pop	bp
retf
s_4D48		endp		 /* DOS offset ---> C40:8 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_gfx_blk_bkgrnd_shape_2 proc far	; CODE XREF: game_gfx_blk_bkgrnd_shape_3+9  p
; game_gfx_blk_bkgrnd_shape_1+9  p ...

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp

loc_14D79:				; CODE XREF: dseg:24D6A  j		 /* DOS offset ---> C43:9 */
sub	ax, ax
push	ax
push	[bp+arg_2]
mov	ax, 42		; x width of black rectangle shape
push	ax
push	[bp+arg_0]

loc_14D86:				; CODE XREF: dseg:24DBA  j		 /* DOS offset ---> C44:6 */
mov	ax, 37		; x position of	black rectangle	shape
push	ax

loc_14D8A:				; CODE XREF: dseg:24DA5  j		 /* DOS offset ---> C44:A */
call	far ptr	juqiang_draw_shape_to_video_buffer	; draw shape to	video buffer
mov	sp, bp
pop	bp
retf
game_gfx_blk_bkgrnd_shape_2 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_gfx_blk_bkgrnd_shape_3 proc far	; CODE XREF: dseg:24D6D  j
mov	ax, 141
push	ax
mov	ax, 3
push	ax
push	cs
call	near ptr game_gfx_blk_bkgrnd_shape_2
add	sp, 4

loc_14DA3:				; CODE XREF: dseg:24D70  j		 /* DOS offset ---> C46:3 */
mov	word_13572, 1
mov	word_1356E, 0

loc_14DAF:				; CODE XREF: game_move_func+7E  j		 /* DOS offset ---> C46:F */
mov	word_13574, 0
retf
game_gfx_blk_bkgrnd_shape_3 endp


;     *************** S U B	R O U T	I N E     ***************************************


game_gfx_blk_bkgrnd_shape_1 proc far	; CODE XREF: s_4D48+B  p
; game_gfx_blk_bkgrnd_shape_4+1  p ...
mov	ax, 80		; y position of	black rectangle	shape
push	ax

loc_14DBA:				; CODE XREF: dseg:24D75  j		 /* DOS offset ---> C47:A */
mov	ax, 64		; y height of black rectangle shape
push	ax
push	cs
call	near ptr game_gfx_blk_bkgrnd_shape_2 ; nop, results in game crashing and graphics showing all purple lines down
add	sp, 4
mov	word_13572, 1

loc_14DCB:				; CODE XREF: dseg:24D77  j dseg:24D92  j		 /* DOS offset ---> C48:B */
mov	word_1356E, 0
retf
game_gfx_blk_bkgrnd_shape_1 endp


;     *************** S U B	R O U T	I N E     ***************************************


game_gfx_blk_bkgrnd_shape_4 proc far
push	cs
call	near ptr game_gfx_blk_bkgrnd_shape_1
sub	ax, ax
mov	word_13572, ax
mov	word_1356E, ax
retf
game_gfx_blk_bkgrnd_shape_4 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_gfx_buffer_main_data_window proc far
mov	ax, 49
push	ax
mov	ax, 147
push	ax
push	cs
call	near ptr game_gfx_blk_bkgrnd_shape_2
add	sp, 4
mov	ax, 152
push	ax
mov	ax, 38

loc_14DF6:				; CODE XREF: dseg:24DF0  j		 /* DOS offset ---> C4B:6 */
push	ax

loc_14DF7:				; CODE XREF: dseg:24DF4  j		 /* DOS offset ---> C4B:7 */
call	far ptr	3EFh:434h ; game_display_generals_list_x_y

loc_14DFC:				; CODE XREF: dseg:24DEA  j		 /* DOS offset ---> C4B:C */
add	sp, 4
mov	ax, 3498h
push	ax
call	far ptr	3EFh:6C0h ; call to change video text
add	sp, 2
mov	word_13576, 0
retf
game_gfx_buffer_main_data_window endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_4E12		proc far		; CODE XREF: s_4EB4+6  p		 /* DOS offset ---> C4D:2 */

var_10		= word ptr -10h
var_E		= dword	ptr -0Eh
var_A		= dword	ptr -0Ah
var_4		= dword	ptr -4

push	bp
mov	bp, sp
sub	sp, 10h

loc_14E18:				; CODE XREF: dseg:24E11  j		 /* DOS offset ---> C4D:8 */
mov	ax, 4

loc_14E1B:				; CODE XREF: game_move_func+CA  j		 /* DOS offset ---> C4D:B */
; game_move_func+DD  j
push	ax
mov	ax, 37AEh
push	ax

loc_14E20:				; CODE XREF: dseg:24E09  j		 /* DOS offset ---> C4E:0 */
sub	ax, ax
push	ax
push	ax

loc_14E24:				; CODE XREF: game_move_func+39  j		 /* DOS offset ---> C4E:4 */
; game_move_func+C1  j
push	cs
call	near ptr game_gfx_area_division_lines_display
add	sp, 8
;     ***************************************************************************
db 0F6h	;   *
db    6
db 0A2h	;   *
db 0CEh	;   *
db    1
db  74h	; t
db  45h	; E
db 0C7h	;   *
db  46h	; F
db 0FEh	;   *
db    0
unk_14E36	db 0B8h	;   *		; CODE XREF: dseg:24E42  j
db 0A1h	;   *
db 0FCh	;   *
db 0C9h	;   *
db  89h	;   *
unk_14E3B	db  46h	; F		; CODE XREF: game_send_result+E  j
unk_14E3C	db 0F8h	;   *		; CODE XREF: dseg:24E2C  j
db  2Bh	; +
unk_14E3E	db 0C9h	;   *		; CODE XREF: game_send_result+7  j
db  89h	;   *
db  4Eh	; N
db 0FCh	;   *
db  89h	;   *
db  4Eh	; N
unk_14E44	db 0F6h	;   *		; CODE XREF: dseg:24E34  j
db  89h	;   *
db  46h	; F
db 0F4h	;   *
db 0B8h	;   *
db    0
unk_14E4A	db  40h	; @		; CODE XREF: dseg:24E26  j
db  89h	;   *
db  46h	; F
db 0F2h	;   *
db  89h	;   *
db  46h	; F
db 0F0h	;   *
;     ***************************************************************************

loc_14E51:				; CODE XREF: s_4E12+63  j		 /* DOS offset ---> C51:1 */
les	bx, [bp+var_4]

loc_14E54:				; CODE XREF: game_send_result+24  j		 /* DOS offset ---> C51:4 */
mov	al, es:[bx]

loc_14E57:				; CODE XREF: game_send_result+29  j		 /* DOS offset ---> C51:7 */
; dseg:24E64  j
les	bx, [bp+var_E]
mov	es:[bx], al

loc_14E5D:				; CODE XREF: dseg:24E4E  j		 /* DOS offset ---> C51:D */
inc	word ptr [bp+var_E]
les	bx, [bp+var_4]
mov	al, es:[bx]

loc_14E66:				; CODE XREF: dseg:24E56  j		 /* DOS offset ---> C52:6 */
les	bx, [bp+var_A]
mov	es:[bx], al
inc	word ptr [bp+var_4]

loc_14E6F:				; CODE XREF: game_send_result+B  j		 /* DOS offset ---> C52:F */
inc	word ptr [bp+var_A]

loc_14E72:		 /* DOS offset ---> C53:2 */
dec	[bp+var_10]
jnz	short loc_14E51
mov	ax, 4
push	ax
mov	ax, 62B2h
push	ax
sub	ax, ax
push	ax
mov	ax, 128h
push	ax

loc_14E86:				; CODE XREF: game_send_result+56  j		 /* DOS offset ---> C54:6 */
push	cs

loc_14E87:				; CODE XREF: game_send_result+5B  j		 /* DOS offset ---> C54:7 */
call	near ptr game_gfx_area_division_lines_display
mov	sp, bp
pop	bp
retf
s_4E12		endp		 /* DOS offset ---> C4D:2 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_gfx_province_division_lines_display proc far ; CODE XREF: s_4EB4+E  p
; s_4EB4+19  p

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	ax, 4
push	ax
mov	ax, 6951h
push	ax
push	[bp+arg_0]
mov	ax, 128h
push	ax
push	cs

loc_14EA1:				; CODE XREF: dseg:24E9B  j		 /* DOS offset ---> C56:1 */
call	near ptr game_gfx_area_division_lines_display

loc_14EA4:				; CODE XREF: dseg:24E9F  j		 /* DOS offset ---> C56:4 */
mov	sp, bp
pop	bp
retf
game_gfx_province_division_lines_display endp


;     *************** S U B	R O U T	I N E     ***************************************


game_gfx_blk_bkgrnd_shape_5 proc far
push	cs
call	near ptr game_gfx_blk_bkgrnd_shape_1

loc_14EAC:				; CODE XREF: game_send_result+7C  j		 /* DOS offset ---> C56:C */
mov	word_13572, 0

locret_14EB2:				; CODE XREF: dseg:24E8F  j dseg:24E95  j ...
retf
game_gfx_blk_bkgrnd_shape_5 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


s_4EB4		proc far		; CODE XREF: dseg:24F40  p		 /* DOS offset ---> C57:4 */
call	far ptr	0:15B3h
push	cs
call	near ptr s_4E12
mov	ax, 61
push	ax
push	cs
call	near ptr game_gfx_province_division_lines_display
add	sp, 2
mov	ax, 144
push	ax
push	cs
call	near ptr game_gfx_province_division_lines_display

loc_14ED0:				; CODE XREF: dseg:24EE9  j		 /* DOS offset ---> C59:0 */
add	sp, 2
mov	word_13574, 0

loc_14ED9:				; CODE XREF: dseg:24ED8  j		 /* DOS offset ---> C59:9 */
mov	word_13570, 1
push	cs

loc_14EE0:				; CODE XREF: dseg:24ECE  j		 /* DOS offset ---> C5A:0 */
call	near ptr game_gfx_display_month
push	cs
call	near ptr s_5038
retf
s_4EB4		endp		 /* DOS offset ---> C57:4 */


;     *************** S U B	R O U T	I N E     ***************************************


game_gfx_display_month proc far		; CODE XREF: s_4EB4:loc_14EE0  p
mov	ax, 4
push	ax
mov	ax, 2
push	ax

loc_14EF0:				; CODE XREF: dseg:2504B  p		 /* DOS offset ---> C5B:0 */
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
push	year_value

loc_14EFC:				; CODE XREF: game_send_result+CB  j		 /* DOS offset ---> C5B:C */
mov	bl, month_value	; game_gfx_display_month
sub	bh, bh
shl	bx, 1
push	word ptr [bx+361Ch]

loc_14F08:				; CODE XREF: game_send_result+C9  j		 /* DOS offset ---> C5C:8 */
; game_send_result+D3  j
mov	ax, 34B8h
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
mov	ax, 0Ch
push	ax
mov	ax, 5
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4

loc_14F24:				; CODE XREF: game_send_result+9F  j		 /* DOS offset ---> C5E:4 */
mov	al, month_value	; game_gfx_display_month
mov	cl, 3

loc_14F29:				; CODE XREF: game_send_result+96  j		 /* DOS offset ---> C5E:9 */
sub	ah, ah
div	cl
mov	bl, al
sub	bh, bh
shl	bx, 1
push	word ptr [bx+34D6h]
mov	ax, 34CCh	; 0x3305F
; Text:	'Spring Summer Autumn Winter '
push	ax

loc_14F3B:				; CODE XREF: dseg:24F32  j		 /* DOS offset ---> C5F:B */
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
retf
game_gfx_display_month endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_4F44		proc far		; CODE XREF: s_5038+23  p		 /* DOS offset ---> C60:4 */

var_10		= word ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  10h
db 0F6h	;   *
db    6
db 0A2h	;   *
unk_14F4D	db 0CEh	;   *		; CODE XREF: game_send_result+81  j
; game_send_result+FA  j	...
db    1
db  75h	; u
db    3
db 0E9h	;   *
db  84h	;   *
db    0
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0C2h	;   *
db    1
db  42h	; B
db    5
;     ***************************************************************************

loc_14F5C:				; CODE XREF: dseg:24F57  j		 /* DOS offset ---> C61:C */
add	sp, 2
or	ax, ax
jz	short loc_14F68
mov	ax, 3B90h

loc_14F66:				; CODE XREF: game_send_result+10  j		 /* DOS offset ---> C62:6 */
; dseg:24F60  j
jmp	short loc_14F91
;     ***************************************************************************

loc_14F68:				; CODE XREF: s_4F44+1D  j dseg:24F64  j		 /* DOS offset ---> C62:8 */
push	[bp+arg_0]
call	far ptr	525h:4Ah

loc_14F70:				; CODE XREF: game_send_result+13  j		 /* DOS offset ---> C63:0 */
add	sp, 2
push	ax

loc_14F74:		 /* DOS offset ---> C63:4 */
call	far ptr	525h:6
add	sp, 2
mov	bl, al
sub	bh, bh
mov	al, [bx+48h]

loc_14F84:				; CODE XREF: dseg:24FE7  j		 /* DOS offset ---> C64:4 */
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 3B30h

loc_14F91:				; CODE XREF: s_4F44:loc_14F66  j		 /* DOS offset ---> C65:1 */
mov	[bp+var_2], ax
;     ***************************************************************************
db 83h
db  3Eh	; >
db  70h	; p
db  35h	; 5
word_14F98	dw 7400h		; DATA XREF: game_start_new_ruler_enter_sex+F  r
word_14F9A	dw 0A135h		; DATA XREF: game_start_new_ruler_enter_sex+B  r
unk_14F9C	db 0FCh	;   *		; DATA XREF: dseg:loc_1C81B  r
db 0C9h	;   *
;     ***************************************************************************

loc_14F9E:				; DATA XREF: dseg:C817  r dseg:C813  r		 /* DOS offset ---> C65:E */
mov	word ptr [bp+var_8+2], ax
mov	word ptr [bp+var_8], 0
mov	word ptr [bp+var_C+2], ax
mov	ax, 4000h
mov	word ptr [bp+var_C], ax
mov	[bp+var_10], ax

loc_14FB2:				; CODE XREF: s_4F44+83  j		 /* DOS offset ---> C67:2 */
les	bx, [bp+var_C]
mov	al, es:[bx]
les	bx, [bp+var_8]
mov	es:[bx], al
inc	word ptr [bp+var_C]
inc	word ptr [bp+var_8]
dec	[bp+var_10]
jnz	short loc_14FB2

loc_14FC9:		 /* DOS offset ---> C68:9 */
push	word_1C9FC
jmp	short loc_14FD3
;     ***************************************************************************
nop
sub	ax, ax
push	ax

loc_14FD3:				; CODE XREF: s_4F44+89  j		 /* DOS offset ---> C69:3 */
push	[bp+var_2]
jmp	short loc_1501E
;     ***************************************************************************
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0C2h	;   *
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db    5
db 0B8h	;   *
db  90h	;   *
unk_14FE9	db  3Bh	; ;		; CODE XREF: dseg:24F83  j
db 0EBh	;   *
db  29h	; )
db 0FFh
db  76h	; v
unk_14FEE	db    6			; CODE XREF: game_send_how_much_gold_food+6F  j
db  9Ah	;   *
db  4Ah	; J
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
unk_14FF6	db    2			; CODE XREF: game_send_how_much_gold_food+22  j
db  50h	; P
db  9Ah	;   *
db    6
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Ah	;   *
db 0D8h	;   *
db  2Ah	; *
db 0FFh
db  8Ah	;   *
db  87h	;   *
db  48h	; H
db    0
db  2Ah	; *
db 0E4h	;   *
db  8Bh	;   *
db 0C8h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    3
unk_1500F	db 0C1h	;   *		; CODE XREF: game_send_how_much_gold_food+6D  j
; game_send_how_much_gold_food+74  j ...
db 0D1h	;   *
db 0E0h	;   *
db    5
db 0D0h	;   *
db  3Ah	; :
db  89h	;   *
db  46h	; F
db 0F2h	;   *
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db 0FFh
db  76h	; v
db 0F2h	;   *
;     ***************************************************************************

loc_1501E:				; CODE XREF: s_4F44+92  j		 /* DOS offset ---> C6D:E */
mov	ax, 2
push	ax
sub	ax, ax
push	ax
mov	bx, [bp+arg_0]
push	word ptr [bx+1Eh]
push	word ptr [bx+1Ch]
call	far ptr	0:5E6h
mov	sp, bp

loc_15035:				; CODE XREF: game_send_how_much_gold_food+104  j		 /* DOS offset ---> C6F:5 */
pop	bp
retf
s_4F44		endp		 /* DOS offset ---> C60:4 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5038		proc far		; CODE XREF: s_4EB4+30  p		 /* DOS offset ---> C6F:8 */

var_6		= word ptr -6
var_2		= word ptr -2

push	bp
mov	bp, sp

loc_1503B:				; CODE XREF: game_send_how_much_gold_food+A1  j		 /* DOS offset ---> C6F:B */
; game_send_how_much_gold_food+BB  j
sub	sp, 6
mov	[bp+var_2], 2DC4h
mov	[bp+var_6], 29h	; ')'

loc_15048:				; CODE XREF: s_5038+30  j		 /* DOS offset ---> C70:8 */
; game_send_how_much_gold_food+CA  j
push	[bp+var_2]
call	far ptr	game_data_get_province_rulers_potrait

loc_15050:				; CODE XREF: dseg:24F59  j		 /* DOS offset ---> C71:0 */
add	sp, 2
or	ax, ax

loc_15055:				; CODE XREF: dseg:25037  p dseg:250A6  p		 /* DOS offset ---> C71:5 */
jnz	short loc_15061
push	[bp+var_2]
push	cs
call	near ptr s_4F44
add	sp, 2

loc_15061:				; CODE XREF: s_5038:loc_15055  j		 /* DOS offset ---> C72:1 */
add	[bp+var_2], 35
dec	[bp+var_6]
jnz	short loc_15048
mov	sp, bp
pop	bp
retf
s_5038		endp		 /* DOS offset ---> C6F:8 */

;     ***************************************************************************

loc_1506E:				; CODE XREF: game_send_who_will_supervise-FF5F  p		 /* DOS offset ---> C72:E */
; dseg:2543E  p
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    8
db  8Bh	;   *
db  46h	; F
db    6
db    5
db 0B2h	;   *
db 0D0h	;   *
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  8Bh	;   *
unk_1507E	db  46h	; F		; CODE XREF: game_send_how_much_gold_food+C8  j
; game_send_how_much_gold_food+D0  j ...
db  0Ah
db  89h	;   *
db  46h	; F
db 0FAh	;   *
db  83h	;   *
db  7Eh	; ~
db    8
db    0
db  74h	; t
db  1Bh
db  8Bh	;   *
db  46h	; F
db    8
db  89h	;   *
db  46h	; F
db 0F8h	;   *
;     ***************************************************************************

loc_1508F:				; CODE XREF: dseg:50A2  j		 /* DOS offset ---> C74:F */
mov	bx, [bp-6]
mov	al, [bx]
mov	bx, [bp-2]
or	[bx], al
inc	word ptr [bp-2]
inc	word ptr [bp-6]
dec	word ptr [bp-8]
jnz	short loc_1508F
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_150A8:				; CODE XREF: game_send_func-FFA7  p		 /* DOS offset ---> C76:8 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  81h	;   *
db 0ECh	;   *
unk_150AD	db  1Eh			; CODE XREF: game_send_pre_result+15  j
; game_send_pre_result+1E  j
unk_150AE	db    2			; CODE XREF: Duel_Grfx_Flash+18  p
; Duel_Grfx_Flash+28  p
db  56h	; V
db  8Ah	;   *
db  46h	; F
db    6
db  25h	; %
db    7
db    0
db 0B9h	;   *
db 0C0h	;   *
db  18h
;     ***************************************************************************

loc_150B9:				; CODE XREF: dseg:250F1  j		 /* DOS offset ---> C77:9 */
mul	cx
mov	[bp-216h], ax
mov	[bp-214h], dx
mov	cl, 3
mov	ax, [bp+6]
shr	ax, cl
and	al, cl
mov	[bp-21Eh], al
mov	cl, 5
mov	ax, [bp+6]
shr	ax, cl
and	al, 3
mov	[bp-21Dh], al
mov	cl, 7
mov	ax, [bp+6]

loc_150E2:				; CODE XREF: dseg:250D5  j		 /* DOS offset ---> C7A:2 */
shr	ax, cl
and	al, 3
mov	[bp-21Ch], al

loc_150EA:				; CODE XREF: dseg:250DF  j		 /* DOS offset ---> C7A:A */
mov	al, [bp+7]
shr	al, 1
and	al, 3
mov	[bp-21Bh], al
mov	cl, 3
mov	al, [bp+7]
sub	ah, ah
shr	ax, cl
and	al, cl
; START	OF FUNCTION CHUNK FOR game_send_pre_result

loc_15100:				; CODE XREF: game_send_pre_result+E  j		 /* DOS offset ---> C7C:0 */
; game_send_pre_result+1C  j ...
mov	[bp+var_21A], al
sub	al, al
push	ax

loc_15107:		 /* DOS offset ---> C7C:7 */
mov	cx, 3C0h
push	cx
mov	cx, 0D0B2h

loc_1510E:				; CODE XREF: game_send_who_will_supervise+43  j		 /* DOS offset ---> C7C:E */
; game_send_who_will_supervise+4B  j ...
push	cx
call	far ptr	561h:0A0h
add	sp, 6
mov	[bp+var_212], 0

loc_1511C:				; CODE XREF: game_send_who_will_supervise-FF4E  j		 /* DOS offset ---> C7D:C */
sub	ax, ax
push	ax
mov	bl, [bp+var_212]
sub	bh, bh
mov	ax, bx
shl	bx, 1
mov	si, ax
mov	cl, [bp+si+var_21E]
sub	ch, ch
mov	ax, [bx+34DEh]

loc_15135:				; CODE XREF: dseg:251CB  p dseg:251E5  p ...		 /* DOS offset ---> C7F:5 */
mov	[bp+var_218], ax
mul	cx
add	ax, [bx+34F2h]
sub	dx, dx
add	ax, [bp+var_216]
adc	dx, [bp+var_214]
push	dx

loc_1514A:				; CODE XREF: dseg:253A3  p		 /* DOS offset ---> C80:A */
push	ax
; END OF FUNCTION CHUNK	FOR game_send_pre_result
;     ***************************************************************************
db 0FFh
db  36h	; 6
db  80h	;   *
db 0D4h	;   *
db  9Ah	;   *
db 0CCh	;   *
db    2
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db    8
db  80h	;   *
db 0BEh	;   *
db 0EEh	;   *
db 0FDh	;   *
db    2
db  73h	; s
db  20h
db 0FFh
db 0B6h	;   *
db 0E8h	;   *
db 0FDh	;   *
db  8Ah	;   *
db  9Eh	;   *
db 0EEh	;   *
db 0FDh	;   *
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db  87h	;   *
db 0E8h	;   *
db  34h	; 4
db    5
db 0B2h	;   *
db 0D0h	;   *
db  50h	; P
db 0FFh
db  36h	; 6
db  80h	;   *
db 0D4h	;   *
db  9Ah	;   *
db  5Eh	; ^
db    2
db    0
db    0
db 0EBh	;   *
db  2Fh	; /
;     ***************************************************************************
nop
push	word ptr [bp-218h]
lea	ax, [bp-210h]
push	ax
push	word ptr loc_1D480
call	far ptr	0:25Eh
add	sp, 6
lea	ax, [bp-210h]

loc_15197:				; CODE XREF: dseg:2518F  j		 /* DOS offset ---> C85:7 */
push	ax

loc_15198:				; CODE XREF: game_send_who_will_supervise+25  j		 /* DOS offset ---> C85:8 */
push	word ptr [bp-218h]
mov	bl, [bp-212h]
; START	OF FUNCTION CHUNK FOR game_send_who_will_supervise

loc_151A0:				; CODE XREF: game_send_who_will_supervise+89  j		 /* DOS offset ---> C86:0 */
sub	bh, bh

loc_151A2:				; CODE XREF: dseg:2519B  j		 /* DOS offset ---> C86:2 */
shl	bx, 1
push	word ptr [bx+34E8h]
push	cs
call	loc_1506E
add	sp, 6
inc	[bp+var_212]
cmp	[bp+var_212], 5
jnb	short loc_151BD
jmp	loc_1511C
;     ***************************************************************************

loc_151BD:				; CODE XREF: game_send_who_will_supervise-FF50  j		 /* DOS offset ---> C87:D */
pop	si

loc_151BE:		 /* DOS offset ---> C87:E */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_send_who_will_supervise
;     ***************************************************************************

loc_151C2:				; CODE XREF: game_send_func:loc_15212  p		 /* DOS offset ---> C88:2 */
; game_send_func+8  j
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db  8Bh	;   *
db  46h	; F
db    6
db  48h	; H
db 0B9h	;   *
db 0C0h	;   *
db    3
db 0F7h	;   *
db 0E1h	;   *
;     ***************************************************************************

loc_151D1:				; CODE XREF: dseg:251BB  j dseg:251C2  j		 /* DOS offset ---> C89:1 */
push	dx
push	ax
push	word_1CB6E
call	far ptr	0:2CCh
mov	sp, bp
; START	OF FUNCTION CHUNK FOR game_send_func

loc_151DE:				; CODE XREF: game_send_func+25  j		 /* DOS offset ---> C89:E */
mov	ax, 3C0h
push	ax
mov	ax, 0D0B2h
push	ax

loc_151E6:		 /* DOS offset ---> C8A:6 */
push	word_1CB6E
call	far ptr	0:25Eh
mov	sp, bp
pop	bp

locret_151F2:				; CODE XREF: dseg:251AD  j
retf
; END OF FUNCTION CHUNK	FOR game_send_func
;     ***************************************************************************
nop
push	bp
; START	OF FUNCTION CHUNK FOR game_send_func

loc_151F5:				; CODE XREF: game_send_func+34  j		 /* DOS offset ---> C8B:5 */
mov	bp, sp

loc_151F7:				; CODE XREF: dseg:251A7  j		 /* DOS offset ---> C8B:7 */
mov	ax, word_1356C

loc_151FA:				; CODE XREF: game_send_func+10  j		 /* DOS offset ---> C8B:A */
; game_send_func+1C  j
cmp	[bp+0Ah], ax
jz	short loc_1521E
test	byte ptr [bp+0Bh], 80h
jz	short loc_1520E
push	word ptr [bp+0Ah]
push	cs
call	loc_150A8
jmp	short near ptr byte_15215
;     ***************************************************************************

loc_1520E:				; CODE XREF: game_send_func-FFAD  j		 /* DOS offset ---> C8C:E */
push	word ptr [bp+0Ah]
push	cs

loc_15212:		 /* DOS offset ---> C8D:2 */
call	loc_151C2
; END OF FUNCTION CHUNK	FOR game_send_func
;     ***************************************************************************
byte_15215	db 83h			; CODE XREF: game_send_func-FFA4  j
word_15216	dw 2C4h			; DATA XREF: setup_game_difficulty_level_query+13  r
word_15218	dw 468Bh		; DATA XREF: setup_game_difficulty_level_query:loc_1C083  r
word_1521A	dw 0A30Ah		; DATA XREF: setup_game_difficulty_level_query+B  r
word_1521C	dw 356Ch		; DATA XREF: setup_game_select_game_mode:loc_1C14D  r
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_send_func

loc_1521E:				; CODE XREF: game_send_func-FFB3  j		 /* DOS offset ---> C8D:E */
; dseg:2520B  j ...
mov	ax, 0D0B2h
push	ax
sub	ax, ax
push	ax
mov	ax, 28h	; '('
push	ax
mov	ax, 8

loc_1522C:		 /* DOS offset ---> C8E:C */
push	ax
push	word ptr [bp+8]
push	word ptr [bp+6]

loc_15233:		 /* DOS offset ---> C8F:3 */
call	far ptr	0:1627h
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_send_func

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_523C		proc far		; CODE XREF: dseg:251FC  j		 /* DOS offset ---> C8F:C */

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
mov	ax, 4
push	ax

loc_15243:				; CODE XREF: dseg:25223  j dseg:2522A  j ...		 /* DOS offset ---> C90:3 */
mov	ax, 696Ah
push	ax

loc_15247:				; CODE XREF: dseg:251F5  j		 /* DOS offset ---> C90:7 */
push	[bp+arg_2]

loc_1524A:				; CODE XREF: dseg:251D5  j dseg:251DC  j		 /* DOS offset ---> C90:A */
push	[bp+arg_0]
push	cs

loc_1524E:				; CODE XREF: dseg:2540C  p		 /* DOS offset ---> C90:E */
call	near ptr game_gfx_area_division_lines_display
mov	sp, bp
pop	bp
retf
s_523C		endp		 /* DOS offset ---> C8F:C */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_rulers_data proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	ax, [bp+arg_0]
sub	ax, 2B34h
mov	cx, 41
cwd
idiv	cx
pop	bp
retf
game_data_get_rulers_data endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_province_governor_name proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]	; get province data
mov	al, [bx+22h]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 3C5Ch
pop	bp
retf
game_data_get_province_governor_name endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5280		proc far		; CODE XREF: dseg:loc_152F4  p		 /* DOS offset ---> C94:0 */

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
cmp	byte ptr [bx+0Ah], 0FFh
jnz	short loc_15290

loc_1528C:				; CODE XREF: game_war_send_whom_display_info+2C  j		 /* DOS offset ---> C94:C */
sub	ax, ax
pop	bp

locret_1528F:				; CODE XREF: game_war_send_whom_display_info+1E  j
retf
;     ***************************************************************************

loc_15290:				; CODE XREF: s_5280+A  j		 /* DOS offset ---> C95:0 */
mov	al, 41
mul	byte ptr [bx+0Ah]
add	ax, 2B34h
pop	bp
retf
s_5280		endp		 /* DOS offset ---> C94:0 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_province_rulers_data proc	far

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
cmp	byte ptr [bx+10h], 255
jnz	short loc_152AA
sub	ax, ax
pop	bp
retf
;     ***************************************************************************

loc_152AA:				; CODE XREF: game_data_get_province_rulers_data+A  j		 /* DOS offset ---> C96:A */
; dseg:2529D  j
mov	al, 41
mul	byte ptr [bx+10h]
add	ax, 2B34h
pop	bp
retf
game_data_get_province_rulers_data endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_province_number proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	ax, [bp+arg_0]
sub	ax, 2DC4h
mov	cx, 23h	; '#'
cwd
idiv	cx
pop	bp
retf
game_data_get_province_number endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_province_num_data_address	proc far

arg_0		= byte ptr  6

push	bp
mov	bp, sp
mov	al, 35
mul	[bp+arg_0]
add	ax, 2DC4h
pop	bp
retf
game_data_get_province_num_data_address	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_52D4		proc far		; CODE XREF: dseg:252B7  j		 /* DOS offset ---> C99:4 */

arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 4
push	[bp+arg_0]
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short loc_152F0
sub	al, al

loc_152EB:				; CODE XREF: dseg:252A7  j		 /* DOS offset ---> C9A:B */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_152F0:				; CODE XREF: s_52D4+13  j		 /* DOS offset ---> C9B:0 */
push	[bp+arg_0]
push	cs
s_52D4		endp		 /* DOS offset ---> C99:4 */


loc_152F4:				; CODE XREF: dseg:2534B  p		 /* DOS offset ---> C9B:4 */
call	near ptr s_5280
;     ***************************************************************************
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db    7
db 0B0h	;   *
db    4
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
mov	bx, ax
mov	ax, [bx+2]
or	ax, ax
jz	short loc_15321

loc_15311:				; CODE XREF: dseg:531F  j		 /* DOS offset ---> C9D:1 */
mov	bx, ax
mov	ax, [bp+6]
cmp	[bx+2],	ax
jz	short loc_15332
mov	ax, [bx]
or	ax, ax
jnz	short loc_15311
; START	OF FUNCTION CHUNK FOR game_war_who_will_command

loc_15321:				; CODE XREF: dseg:530F  j		 /* DOS offset ---> C9E:1 */
; game_war_who_will_command+C8  j ...
mov	bx, [bp-2]
mov	ax, [bp+6]
cmp	[bx+4],	ax
jnz	short loc_15338
mov	al, 2

loc_1532E:				; CODE XREF: dseg:25416  p		 /* DOS offset ---> C9E:E */
; DATA XREF: game_start_new_ruler_add_follower  w ...
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_war_who_will_command
;     ***************************************************************************

loc_15332:				; CODE XREF: dseg:5319  j		 /* DOS offset ---> C9F:2 */
mov	al, 1
; START	OF FUNCTION CHUNK FOR game_war_send_whom

loc_15334:				; CODE XREF: game_war_send_whom+2B  j		 /* DOS offset ---> C9F:4 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_war_send_whom
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_war_who_will_command

loc_15338:				; CODE XREF: game_war_who_will_command-1000A  j		 /* DOS offset ---> C9F:8 */
mov	al, 3
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_war_who_will_command

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_generals_weapons_and_arms	proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
cmp	word ptr [bx+12h], 0
jnz	short loc_15350
mov	al, 100
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_15350:				; CODE XREF: game_data_get_generals_weapons_and_arms+A  j		 /* DOS offset ---> CA1:0 */
mov	ax, 100
push	ax
mov	ax, [bx+12h]
sub	dx, dx
push	dx
push	ax
mov	ax, 100
mul	word ptr [bx+14h]
push	dx
push	ax

loc_15363:				; CODE XREF: dseg:24C3A  p		 /* DOS offset ---> CA2:3 */
call	far ptr	0:3818h /* math_divide_2_16bit_values*/	; math_divide_2_16bit_values
push	ax
call	far ptr	561h:18Ah ; math_truncate_decimal_value
mov	sp, bp
pop	bp
retf
game_data_get_generals_weapons_and_arms	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

math_return_total_province_troops proc far

var_6		= word ptr -6
var_4		= word ptr -4
arg_2		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 6
sub	ax, ax
mov	[bp+var_4], ax

loc_1537D:				; CODE XREF: dseg:2536E  j		 /* DOS offset ---> CA3:D */
mov	[bp+var_6], ax
mov	bx, [bp+arg_2]
mov	ax, [bx+2]
or	ax, ax
jz	short loc_1539D

loc_1538A:				; CODE XREF: math_return_total_province_troops+29  j		 /* DOS offset ---> CA4:A */
mov	bx, ax

loc_1538C:				; CODE XREF: game_war_who_will_command+1B  j		 /* DOS offset ---> CA4:C */
; game_war_who_will_command+22  j ...
mov	ax, [bx+12h]	; get general's troops
sub	dx, dx
add	[bp+var_6], ax
adc	[bp+var_4], dx
mov	ax, [bx]
or	ax, ax
jnz	short loc_1538A	; jump back if not end of general's chain

loc_1539D:				; CODE XREF: math_return_total_province_troops+16  j		 /* DOS offset ---> CA5:D */
mov	ax, [bp+var_6]
mov	dx, [bp+var_4]
mov	sp, bp
pop	bp
retf
math_return_total_province_troops endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_generals_or_free_in_province proc	far

var_2		= byte ptr -2
arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 2
mov	[bp+var_2], 0
cmp	[bp+arg_0], 0
jz	short loc_153C7

loc_153B8:				; CODE XREF: game_data_get_generals_or_free_in_province+1D  j		 /* DOS offset ---> CA7:8 */
inc	[bp+var_2]
mov	bx, [bp+arg_0]
mov	ax, [bx]
mov	[bp+arg_0], ax
or	ax, ax
jnz	short loc_153B8

loc_153C7:				; CODE XREF: game_data_get_generals_or_free_in_province+E  j		 /* DOS offset ---> CA8:7 */
mov	al, [bp+var_2]

loc_153CA:		 /* DOS offset ---> CA8:A */
mov	sp, bp
pop	bp

locret_153CD:				; CODE XREF: game_war_who_will_command+62  j
retf
game_data_get_generals_or_free_in_province endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_53CE		proc far		 /* DOS offset ---> CA8:E */

var_A		= word ptr -0Ah
var_6		= byte ptr -6
var_4		= byte ptr -4
var_2		= byte ptr -2

push	bp
mov	bp, sp

loc_153D1:				; CODE XREF: dseg:253BC  j		 /* DOS offset ---> CA9:1 */
sub	sp, 0Ah
push	si
mov	[bp+var_A], 3

loc_153DA:				; CODE XREF: s_53CE+4D  j		 /* DOS offset ---> CA9:A */
mov	al, 6
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2
mov	[bp+var_4], al
mov	al, 6
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2
mov	[bp+var_6], al

loc_153F6:				; CODE XREF: dseg:253E5  j		 /* DOS offset ---> CAB:6 */
mov	bl, [bp+var_4]
sub	bh, bh
mov	al, [bx-3572h]

loc_153FF:				; CODE XREF: game_war_who_will_command+C6  j		 /* DOS offset ---> CAB:F */
mov	[bp+var_2], al
mov	ax, bx

loc_15404:				; CODE XREF: dseg:253AD  j dseg:253CF  j		 /* DOS offset ---> CAC:4 */
mov	bl, [bp+var_6]
mov	si, ax
mov	al, [bx-3572h]
mov	[si-3572h], al

loc_15411:				; CODE XREF: dseg:25402  j		 /* DOS offset ---> CAD:1 */
mov	al, [bp+var_2]
mov	[bx-3572h], al
dec	[bp+var_A]
jnz	short loc_153DA
pop	si

loc_1541E:				; CODE XREF: dseg:24C50  p		 /* DOS offset ---> CAD:E */
mov	sp, bp
;     ***************************************************************************
db  5Dh	; ]
db 0CBh	;   *
s_53CE		endp		 /* DOS offset ---> CA8:E */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5422		proc far		 /* DOS offset ---> CAE:2 */

var_4		= byte ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_2], 2B34h
mov	[bp+var_4], 0

loc_15431:				; CODE XREF: s_5422+2E  j		 /* DOS offset ---> CAF:1 */
mov	bx, [bp+var_2]
cmp	word ptr [bx], 0
jz	short loc_15445
push	bx
push	cs
call	near ptr s_54DA
add	sp, 2
or	ax, ax
jnz	short loc_15454

loc_15445:				; CODE XREF: s_5422+15  j		 /* DOS offset ---> CB0:5 */
add	[bp+var_2], 41
inc	[bp+var_4]
cmp	[bp+var_4], 16
jb	short loc_15431
jmp	short loc_1545A
;     ***************************************************************************

loc_15454:				; CODE XREF: s_5422+21  j		 /* DOS offset ---> CB1:4 */
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1545A:				; CODE XREF: s_5422+30  j		 /* DOS offset ---> CB1:A */
mov	ax, 1
mov	sp, bp
pop	bp
retf
s_5422		endp		 /* DOS offset ---> CAE:2 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5462		proc far		 /* DOS offset ---> CB2:2 */

arg_0		= word ptr  6

push	bp
mov	bp, sp

loc_15465:				; CODE XREF: dseg:25521  p		 /* DOS offset ---> CB2:5 */
mov	bx, [bp+arg_0]
cmp	byte ptr [bx+22h], 0FFh
jz	short loc_15474
mov	ax, 1
pop	bp

locret_15472:				; CODE XREF: game_war_who_will_command+135  j
; game_war_who_will_command+139  j
retf
;     ***************************************************************************
nop

loc_15474:				; CODE XREF: s_5462+A  j		 /* DOS offset ---> CB3:4 */
sub	ax, ax
pop	bp
retf
s_5462		endp		 /* DOS offset ---> CB2:2 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_general_action proc far	; CODE XREF: dseg:25471  j

arg_0		= word ptr  6

push	bp
mov	bp, sp

loc_1547B:				; CODE XREF: dseg:25476  j		 /* DOS offset ---> CB3:B */
push	[bp+arg_0]
push	cs
call	near ptr game_data_get_general_action_02
mov	sp, bp
or	ax, ax
jnz	short loc_1549A
push	[bp+arg_0]
push	cs
call	near ptr game_data_get_general_action_03
mov	sp, bp

loc_15491:				; CODE XREF: game_war_who_will_command+156  j		 /* DOS offset ---> CB5:1 */
or	ax, ax
jz	short loc_1549A

loc_15495:				; CODE XREF: game_war_who_will_command+15B  j		 /* DOS offset ---> CB5:5 */
mov	ax, 1
pop	bp
retf
;     ***************************************************************************

loc_1549A:				; CODE XREF: game_data_get_general_action+E  j		 /* DOS offset ---> CB5:A */
; game_data_get_general_action+1B  j
sub	ax, ax
pop	bp
retf
game_data_get_general_action endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_general_action_03	proc far ; CODE	XREF: game_data_get_general_action+14  p

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
mov	al, [bx+3]

loc_154A7:		 /* DOS offset ---> CB6:7 */
and	al, 0Fh

loc_154A9:				; CODE XREF: game_war_who_will_command+171  j		 /* DOS offset ---> CB6:9 */
cmp	al, 1
sbb	ax, ax
neg	ax
pop	bp
retf
game_data_get_general_action_03	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_check_province_in_war	proc far ; CODE	XREF: s_54FA+1F  p

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
cmp	byte ptr [bx+11h], 0FFh
jz	short loc_154C4
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
nop

loc_154C4:				; CODE XREF: game_data_check_province_in_war+A  j		 /* DOS offset ---> CB8:4 */
sub	ax, ax
pop	bp
retf
game_data_check_province_in_war	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_province_delegate_policy proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
mov	al, [bx+12h]
and	al, 4
cmp	al, 1
sbb	ax, ax
inc	ax
pop	bp
retf
game_data_get_province_delegate_policy endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_54DA		proc far		; CODE XREF: s_5422+19  p dseg:254C8  j		 /* DOS offset ---> CB9:A */

arg_0		= word ptr  6

push	bp
mov	bp, sp
push	[bp+arg_0]
call	far ptr	525h:6	; game_data_get_rulers_data
mov	sp, bp
mov	bl, al
sub	bh, bh
cmp	[bx+3360h], bh

loc_154EF:				; CODE XREF: game_war_who_will_command+180  j		 /* DOS offset ---> CBA:F */
; game_war_who_will_command+18A  j ...
jz	short loc_154F6
mov	ax, 1
pop	bp
retf
;     ***************************************************************************

loc_154F6:				; CODE XREF: s_54DA:loc_154EF  j		 /* DOS offset ---> CBB:6 */
sub	ax, ax
pop	bp
retf
s_54DA		endp		 /* DOS offset ---> CB9:A */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_54FA		proc far		 /* DOS offset ---> CBB:A */

arg_0		= word ptr  6

push	bp

loc_154FB:		 /* DOS offset ---> CBB:B */
mov	bp, sp
sub	sp, 2
push	si
mov	bx, [bp+arg_0]
mov	ax, [bx+2]
or	ax, ax
jz	short loc_1552C
mov	bx, ax
mov	si, [bp+arg_0]
mov	ax, [si]
cmp	[bx+2],	ax

loc_15515:				; CODE XREF: game_war_neighboring_provinces_query+C9  j		 /* DOS offset ---> CBD:5 */
jnz	short loc_1552C
push	bx
push	cs
call	near ptr game_data_check_province_in_war
add	sp, 2
or	ax, ax
jnz	short loc_1552C
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1552C:				; CODE XREF: s_54FA+F  j		 /* DOS offset ---> CBE:C */
; s_54FA:loc_15515  j ...
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
s_54FA		endp		 /* DOS offset ---> CBB:A */

;     ***************************************************************************
nop
push	bp
; START	OF FUNCTION CHUNK FOR game_war_neighboring_provinces_query

loc_15535:				; CODE XREF: game_war_neighboring_provinces_query+34  j		 /* DOS offset ---> CBF:5 */
mov	bp, sp
push	[bp+arg_2]
call	far ptr	525h:6
mov	cl, al
mov	ax, 1
shl	ax, cl
mov	bx, [bp+arg_0]
and	ax, [bx+0Ah]
cmp	ax, 1
sbb	ax, ax
inc	ax
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_war_neighboring_provinces_query

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_general_action_02	proc far ; CODE	XREF: game_data_get_general_action+7  p

current_general	= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+current_general]
mov	al, [bx+2]	; get general action used
and	al, 1
cmp	al, 1
sbb	ax, ax
inc	ax

loc_15566:				; CODE XREF: dseg:2568B  p		 /* DOS offset ---> CC2:6 */
pop	bp
retf
game_data_get_general_action_02	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5568		proc far		 /* DOS offset ---> CC2:8 */

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
mov	al, [bx+12h]
and	al, 80h
cmp	al, 1
sbb	ax, ax
inc	ax

loc_15578:				; CODE XREF: game_war_neighboring_provinces_query+66  j		 /* DOS offset ---> CC3:8 */
pop	bp
retf
s_5568		endp		 /* DOS offset ---> CC2:8 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_check_advisor_in_province proc far

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 2
mov	bx, [bp+arg_2]
mov	ax, [bx+2]
mov	[bp+var_2], ax
or	ax, ax
jz	short loc_155AC

loc_1558D:				; CODE XREF: game_data_check_advisor_in_province+25  j		 /* DOS offset ---> CC4:D */
mov	ax, [bp+arg_0]

loc_15590:				; CODE XREF: dseg:25587  j		 /* DOS offset ---> CC5:0 */
cmp	[bp+var_2], ax
jz	short loc_155A4
mov	bx, [bp+var_2]
mov	ax, [bx]
mov	[bp+var_2], ax

loc_1559D:				; CODE XREF: game_war_neighboring_provinces_query+76  j		 /* DOS offset ---> CC5:D */
; game_war_neighboring_provinces_query+8A  j
or	ax, ax
jnz	short loc_1558D
jmp	short loc_155AC
;     ***************************************************************************
nop

loc_155A4:				; CODE XREF: game_data_check_advisor_in_province+19  j		 /* DOS offset ---> CC6:4 */
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_155AC:				; CODE XREF: game_data_check_advisor_in_province+11  j		 /* DOS offset ---> CC6:C */
; game_data_check_advisor_in_province+27  j
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_data_check_advisor_in_province endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_province_ruler proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
push	si
push	[bp+arg_0]

loc_155B9:				; CODE XREF: game_war_neighboring_provinces_query+36  j		 /* DOS offset ---> CC7:9 */
; game_war_neighboring_provinces_query+4B  j ...
call	far ptr	525h:4Ah ; game_data_get_province_rulers_data
add	sp, 2
push	[bp+arg_2]
mov	si, ax

loc_155C6:				; CODE XREF: game_war_neighboring_provinces_query+C7  j		 /* DOS offset ---> CC8:6 */
call	far ptr	525h:4Ah ; game_data_get_province_rulers_data
add	sp, 2
cmp	ax, si
jnz	short loc_155DA

loc_155D2:				; CODE XREF: dseg:255CB  j dseg:255D0  j		 /* DOS offset ---> CC9:2 */
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_155DA:				; CODE XREF: game_data_get_province_ruler+1E  j		 /* DOS offset ---> CC9:A */
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
game_data_get_province_ruler endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_province_rulers_potrait proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
push	[bp+arg_0]

loc_155E8:				; CODE XREF: game_war_neighboring_provinces_query+D0  j		 /* DOS offset ---> CCA:8 */
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
cmp	ax, 1
sbb	ax, ax
neg	ax
mov	sp, bp
pop	bp
retf
game_data_get_province_rulers_potrait endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_check_if_home_province proc far

arg_2		= word ptr  6

push	bp
mov	bp, sp
push	[bp+arg_2]
call	far ptr	525h:30h ; s_5280
; nop, unknown
mov	sp, bp
mov	bx, ax
mov	ax, [bp+arg_2]
cmp	[bx], ax

loc_1560C:				; CODE XREF: game_war_func+D  j		 /* DOS offset ---> CCC:C */
jnz	short loc_15614
mov	ax, 1

loc_15611:				; CODE XREF: game_war_func+70  j		 /* DOS offset ---> CCD:1 */
; game_war_func+C3  j ...
pop	bp
retf
;     ***************************************************************************
nop

loc_15614:				; CODE XREF: game_data_check_if_home_province:loc_1560C  j		 /* DOS offset ---> CCD:4 */
sub	ax, ax
pop	bp
retf
game_data_check_if_home_province endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5618		proc far		 /* DOS offset ---> CCD:8 */

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

push	bp
mov	bp, sp
mov	ax, [bp+arg_0]
cmp	[bp+arg_2], ax

loc_15621:				; CODE XREF: game_war_func+28  j		 /* DOS offset ---> CCE:1 */
jnb	short loc_15642
cmp	[bp+arg_4], 0
jz	short loc_15664

loc_15629:				; CODE XREF: s_5618+24  j		 /* DOS offset ---> CCE:9 */
mov	bx, [bp+arg_0]
inc	[bp+arg_0]
mov	al, [bx]
mov	bx, [bp+arg_2]
inc	[bp+arg_2]
mov	[bx], al
dec	[bp+arg_4]
jnz	short loc_15629
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_15642:				; CODE XREF: s_5618:loc_15621  j		 /* DOS offset ---> CD0:2 */
mov	ax, [bp+arg_4]
add	[bp+arg_2], ax

loc_15648:				; CODE XREF: game_war_func+4F  j		 /* DOS offset ---> CD0:8 */
; dseg:25721  p
add	[bp+arg_0], ax
or	ax, ax
jz	short loc_15664

loc_1564F:				; CODE XREF: s_5618+4A  j		 /* DOS offset ---> CD0:F */
dec	[bp+arg_0]
mov	bx, [bp+arg_0]
mov	al, [bx]
dec	[bp+arg_2]
mov	bx, [bp+arg_2]
mov	[bx], al
dec	[bp+arg_4]
jnz	short loc_1564F

loc_15664:				; CODE XREF: s_5618+F  j	s_5618+35  j		 /* DOS offset ---> CD2:4 */
mov	sp, bp
pop	bp
retf
s_5618		endp		 /* DOS offset ---> CCD:8 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_gfx_draw_minimap_sprites proc far

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp
mov	bp, sp
cmp	[bp+arg_6], 0
jz	short loc_15687

loc_15671:				; CODE XREF: game_gfx_draw_minimap_sprites+1D  j		 /* DOS offset ---> CD3:1 */
les	bx, [bp+arg_0]
inc	word ptr [bp+arg_0]
mov	al, es:[bx]
mov	bx, [bp+arg_4]
inc	[bp+arg_4]
mov	[bx], al

loc_15682:				; CODE XREF: dseg:2567A  j dseg:2567F  j		 /* DOS offset ---> CD4:2 */
dec	[bp+arg_6]
jnz	short loc_15671

loc_15687:				; CODE XREF: game_gfx_draw_minimap_sprites+7  j		 /* DOS offset ---> CD4:7 */
mov	sp, bp
pop	bp
retf
game_gfx_draw_minimap_sprites endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_568C		proc far		 /* DOS offset ---> CD4:C */

arg_0		= dword	ptr  6
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp
mov	bp, sp
cmp	[bp+arg_6], 0
jz	short loc_156AB

loc_15695:				; CODE XREF: s_568C+1D  j		 /* DOS offset ---> CD5:5 */
mov	bx, [bp+arg_4]
inc	[bp+arg_4]
mov	al, [bx]
les	bx, [bp+arg_0]
inc	word ptr [bp+arg_0]
mov	es:[bx], al
dec	[bp+arg_6]
jnz	short loc_15695

loc_156AB:				; CODE XREF: s_568C+7  j		 /* DOS offset ---> CD6:B */
mov	sp, bp
pop	bp
retf
s_568C		endp		 /* DOS offset ---> CD4:C */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_56B0		proc far		 /* DOS offset ---> CD7:0 */

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= byte ptr  0Ah

push	bp
mov	bp, sp
cmp	[bp+arg_2], 0
jz	short loc_156C9

loc_156B9:				; CODE XREF: s_56B0:loc_156C7  j		 /* DOS offset ---> CD7:9 */
; game_war_func+B1  j
mov	al, [bp+arg_4]
mov	bx, [bp+arg_0]
inc	[bp+arg_0]
mov	[bx], al
dec	[bp+arg_2]

loc_156C7:				; CODE XREF: dseg:256AA  j		 /* DOS offset ---> CD8:7 */
jnz	short loc_156B9

loc_156C9:				; CODE XREF: s_56B0+7  j		 /* DOS offset ---> CD8:9 */
mov	sp, bp
pop	bp
retf
s_56B0		endp		 /* DOS offset ---> CD7:0 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_56CE		proc far		 /* DOS offset ---> CD8:E */

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp

loc_156CF:				; CODE XREF: dseg:256C6  j		 /* DOS offset ---> CD8:F */
mov	bp, sp
sub	sp, 4
mov	ax, [bp+arg_0]
mov	[bp+var_2], ax

loc_156DA:				; CODE XREF: s_56CE+1E  j		 /* DOS offset ---> CD9:A */
mov	bx, [bp+arg_2]
inc	[bp+arg_2]

loc_156E0:				; CODE XREF: dseg:25693  j		 /* DOS offset ---> CDA:0 */
mov	al, [bx]

loc_156E2:				; CODE XREF: game_war_func+C1  j		 /* DOS offset ---> CDA:2 */
; game_war_func+D4  j ...
mov	bx, [bp+arg_0]
inc	[bp+arg_0]
mov	[bx], al
or	al, al
jnz	short loc_156DA
mov	ax, [bp+var_2]

loc_156F1:				; CODE XREF: game_war_func+F8  j		 /* DOS offset ---> CDB:1 */
mov	sp, bp
pop	bp
retf
s_56CE		endp		 /* DOS offset ---> CD8:E */

;     ***************************************************************************
db  90h	;   *

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_56F6		proc far		; CODE XREF: dseg:256EE  j		 /* DOS offset ---> CDB:6 */

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp

loc_156F9:				; CODE XREF: dseg:256F3  j		 /* DOS offset ---> CDB:9 */
sub	sp, 4
mov	bx, [bp+arg_0]
mov	[bp+var_2], bx
cmp	byte ptr [bx], 0
jz	short loc_15712

loc_15707:				; CODE XREF: s_56F6+1A  j		 /* DOS offset ---> CDC:7 */
inc	[bp+arg_0]

loc_1570A:				; CODE XREF: dseg:256E4  j		 /* DOS offset ---> CDC:A */
mov	bx, [bp+arg_0]
cmp	byte ptr [bx], 0
jnz	short loc_15707

loc_15712:				; CODE XREF: s_56F6+F  j	s_56F6+2E  j		 /* DOS offset ---> CDD:2 */
mov	bx, [bp+arg_2]

loc_15715:				; CODE XREF: dseg:2570F  j		 /* DOS offset ---> CDD:5 */
inc	[bp+arg_2]

loc_15718:				; CODE XREF: dseg:25714  j		 /* DOS offset ---> CDD:8 */
mov	al, [bx]
mov	bx, [bp+arg_0]
inc	[bp+arg_0]
mov	[bx], al
or	al, al
jnz	short loc_15712

loc_15726:				; CODE XREF: dseg:25708  j		 /* DOS offset ---> CDE:6 */
mov	ax, [bp+var_2]
mov	sp, bp
pop	bp
retf
s_56F6		endp		 /* DOS offset ---> CDB:6 */

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, [bp+6]

loc_15737:				; CODE XREF: dseg:256DD  j		 /* DOS offset ---> CDF:7 */
mov	[bp-2],	bx
cmp	byte ptr [bx], 0
jz	short loc_1574A

loc_1573F:				; CODE XREF: dseg:loc_15748  j		 /* DOS offset ---> CDF:F */
inc	word ptr [bp+6]
mov	bx, [bp+6]
cmp	byte ptr [bx], 0

loc_15748:				; CODE XREF: dseg:2573C  j		 /* DOS offset ---> CE0:8 */
jnz	short loc_1573F

loc_1574A:				; CODE XREF: dseg:573D  j		 /* DOS offset ---> CE0:A */
mov	ax, bx
sub	ax, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
cmp	byte ptr [bp+6], 61h ; 'a'
jb	short loc_1576A
cmp	byte ptr [bp+6], 7Ah ; 'z'
ja	short loc_1576A

loc_15763:				; CODE XREF: game_war_func+140  j		 /* DOS offset ---> CE2:3 */
; game_war_func+153  j
mov	al, [bp+6]
sub	al, 20h	; ' '
pop	bp
retf
;     ***************************************************************************

loc_1576A:				; CODE XREF: dseg:575B  j dseg:5761  j		 /* DOS offset ---> CE2:A */
mov	al, [bp+6]
pop	bp
retf
;     ***************************************************************************

loc_1576F:				; CODE XREF: dseg:25795  j		 /* DOS offset ---> CE2:F */
nop
push	bp
mov	bp, sp

loc_15773:				; CODE XREF: game_war_func+117  j		 /* DOS offset ---> CE3:3 */
cmp	byte ptr [bp+6], 41h ; 'A'
jb	short loc_15786
; START	OF FUNCTION CHUNK FOR game_war_func

loc_15779:				; CODE XREF: game_war_func+110  j		 /* DOS offset ---> CE3:9 */
; game_war_func+127  j ...
cmp	[bp+arg_0], 5Ah	; 'Z'
ja	short loc_15786

loc_1577F:				; CODE XREF: game_war_func+2A  j		 /* DOS offset ---> CE3:F */
; game_war_func+51  j
mov	al, [bp+arg_0]
add	al, 20h	; ' '
pop	bp
; END OF FUNCTION CHUNK	FOR game_war_func
;     ***************************************************************************
db 0CBh	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_war_func

loc_15786:				; CODE XREF: dseg:5777  j		 /* DOS offset ---> CE4:6 */
; game_war_func-FE77  j
mov	al, [bp+arg_0]
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_war_func
;     ***************************************************************************
nop
push	bp
mov	bp, sp
; START	OF FUNCTION CHUNK FOR game_mil_train_soldiers_check_if_max

loc_1578F:				; CODE XREF: game_mil_train_soldiers_check_if_max+17  j		 /* DOS offset ---> CE4:F */
mov	ax, [bp+6]
cwd
xor	ax, dx
sub	ax, dx

loc_15797:				; CODE XREF: dseg:2576D  j		 /* DOS offset ---> CE5:7 */
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_mil_train_soldiers_check_if_max
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

math_truncate_decimal_value proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
mov	ax, [bp+arg_2]

loc_157A0:				; CODE XREF: game_mil_train_soldiers_check_if_max+11  j		 /* DOS offset ---> CE6:0 */
; dseg:257C9  j
sub	ax, [bp+arg_0]

loc_157A3:				; CODE XREF: game_mil_train_soldiers_check_if_max+9  j		 /* DOS offset ---> CE6:3 */
; game_mil_train_soldiers_check_if_max+19  j
sbb	cx, cx
and	ax, cx
add	ax, [bp+arg_0]
pop	bp
retf
math_truncate_decimal_value endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

math_max_function_x1_y1	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
mov	ax, [bp+arg_2]
sub	ax, [bp+arg_0]
sbb	cx, cx
not	cx
and	ax, cx
add	ax, [bp+arg_0]
pop	bp
retf
math_max_function_x1_y1	endp

;     ***************************************************************************
push	bp
mov	bp, sp
push	word ptr [bp+0Eh]
push	word ptr [bp+8]
push	word ptr [bp+0Ah]
push	word ptr [bp+8]

loc_157CF:				; CODE XREF: dseg:25774  j dseg:25787  j ...		 /* DOS offset ---> CE8:F */
push	word ptr [bp+6]
call	far ptr	3EFh:70Ch
mov	sp, bp
push	word ptr [bp+0Eh]

loc_157DC:				; CODE XREF: dseg:2579F  j		 /* DOS offset ---> CE9:C */
push	word ptr [bp+0Ch]

loc_157DF:				; CODE XREF: dseg:2577F  p dseg:2587F  p		 /* DOS offset ---> CE9:F */
push	word ptr [bp+6]
push	word ptr [bp+8]
push	word ptr [bp+6]
call	far ptr	3EFh:70Ch
mov	sp, bp
push	word ptr [bp+0Eh]
push	word ptr [bp+0Ch]
push	word ptr [bp+0Ah]
push	word ptr [bp+8]
push	word ptr [bp+0Ah]
call	far ptr	3EFh:70Ch
mov	sp, bp
push	word ptr [bp+0Eh]

loc_15808:				; CODE XREF: dseg:257FE  j		 /* DOS offset ---> CEC:8 */
push	word ptr [bp+0Ch]
push	word ptr [bp+0Ah]
push	word ptr [bp+0Ch]
push	word ptr [bp+6]
call	far ptr	3EFh:70Ch
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_time_delay proc far		; CODE XREF: system_sound_delay_2+12  p
; dseg:5881  p ...

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	ax, [bp+arg_0]
shr	ax, 1
inc	ax
push	ax

loc_15828:				; CODE XREF: dseg:2589F  j		 /* DOS offset ---> CEE:8 */
call	far ptr	0:0AFh	; Function_timer
; - pulls up current CLOCK data
;
mov	sp, bp

loc_1582F:				; CODE XREF: system_time_delay+18  j		 /* DOS offset ---> CEE:F */
call	far ptr	0:0C5h	; Function_wait
; - cycles through wait	function
;
or	ax, ax
jnz	short loc_1582F
mov	sp, bp
pop	bp
retf
system_time_delay endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_sound_delay_2 proc far		; CODE XREF: system_sound_delay_1+D  p
; system_sound_warning_error_delay_after+7  p

arg_0		= byte ptr  6

push	bp
mov	bp, sp
mov	al, [bp+arg_0]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1

loc_1584C:				; CODE XREF: game_mil_train_soldiers+8E  j		 /* DOS offset ---> CF0:C */
push	ax
push	cs
call	near ptr system_time_delay ;
; - calls delay	function
mov	sp, bp
pop	bp
retf
system_sound_delay_2 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_sound_delay_1 proc far

arg_0		= byte ptr  6

push	bp
mov	bp, sp
mov	al, message_wait_value

loc_1585C:				; CODE XREF: game_mil_train_soldiers+74  j		 /* DOS offset ---> CF1:C */
; game_mil_train_soldiers+A1  j
mul	[bp+arg_0]
shl	al, 1
push	ax
push	cs
call	near ptr system_sound_delay_2 ;	Function
; ????
;
mov	sp, bp
pop	bp
retf
system_sound_delay_1 endp

;     ***************************************************************************
push	bp
mov	bp, sp
cmp	word ptr [bp+6], 0
jz	short loc_15896

loc_15873:				; CODE XREF: dseg:loc_15889  j		 /* DOS offset ---> CF3:3 */
call	far ptr	0:5Bh
or	ax, ax
jnz	short loc_1588E
mov	ax, 1
push	ax
push	cs
call	near ptr system_time_delay
mov	sp, bp
dec	word ptr [bp+6]

loc_15889:				; CODE XREF: dseg:25873  j		 /* DOS offset ---> CF4:9 */
jnz	short loc_15873
jmp	short loc_15896
;     ***************************************************************************
nop

loc_1588E:				; CODE XREF: dseg:587A  j		 /* DOS offset ---> CF4:E */
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_15896:				; CODE XREF: dseg:5871  j dseg:588B  j		 /* DOS offset ---> CF5:6 */
sub	ax, ax

loc_15898:				; CODE XREF: dseg:2585A  j dseg:25887  j		 /* DOS offset ---> CF5:8 */
mov	sp, bp

loc_1589A:				; CODE XREF: dseg:3563  p		 /* DOS offset ---> CF5:A */
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_math_get_random_number_100	proc far

arg_0		= byte ptr  6

push	bp
mov	bp, sp
mov	ax, 100
push	ax

loc_158A3:				; CODE XREF: game_mil_hire_reassign_troops_query+34  j		 /* DOS offset ---> CF6:3 */
call	far ptr	49Ch:178h ; math_random_number_generator
mov	sp, bp
cmp	al, [bp+arg_0]
jb	short loc_158B4
sub	ax, ax
pop	bp
retf
;     ***************************************************************************
nop

loc_158B4:				; CODE XREF: game_math_get_random_number_100+11  j		 /* DOS offset ---> CF7:4 */
; dseg:258FB  p
mov	ax, 1
;     ***************************************************************************
db  5Dh	; ]
db 0CBh	;   *
game_math_get_random_number_100	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_math_get_random_number proc far

arg_0		= byte ptr  6

push	bp
mov	bp, sp		; bp=[E3F0]
mov	al, [bp+arg_0]	; [E3F6]=0013
sub	ah, ah		; make sure there's no AH (higher byte data) in AX
push	ax
call	far ptr	49Ch:178h ; math_random_number_generator
mov	sp, bp
pop	bp
retf
game_math_get_random_number endp


;     *************** S U B	R O U T	I N E     ***************************************


system_sound_warning_error_delay_after proc far
; CODE XREF: system_sound_warning_error_and_wait:loc_15917  p
; system_sound_6_dings+64  p ...
mov	al, message_wait_value
add	al, 2
push	ax
push	cs
call	near ptr system_sound_delay_2
add	sp, 2
mov	ax, 7
push	ax
call	far ptr	3EFh:458h ; s_4348
; nop, warning error unknown
add	sp, 2
retf
system_sound_warning_error_delay_after endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_sound_warning_error_and_wait proc far

var_4		= word ptr -4

push	bp
mov	bp, sp
sub	sp, 4

loc_158EC:				; CODE XREF: dseg:25929  j dseg:25932  j ...		 /* DOS offset ---> CFA:C */
cmp	word_1352C, 0
jz	short loc_15900
mov	al, 0Ah
push	ax

loc_158F6:				; system_sound_out		 /* DOS offset ---> CFB:6 */
call	far ptr	6EBh:4F0h
add	sp, 2
jmp	short loc_15916
;     ***************************************************************************

loc_15900:				; CODE XREF: system_sound_warning_error_and_wait+B  j		 /* DOS offset ---> CFC:0 */
; dseg:258F4  j
mov	[bp+var_4], 3

loc_15905:				; CODE XREF: system_sound_warning_error_and_wait+2E  j		 /* DOS offset ---> CFC:5 */
mov	ax, 3
push	ax
call	far ptr	6EBh:0Eh ; Switch_Target_Focus
; nop, unknown?
add	sp, 2
dec	[bp+var_4]
jnz	short loc_15905

loc_15916:				; CODE XREF: system_sound_warning_error_and_wait+18  j		 /* DOS offset ---> CFD:6 */
push	cs

loc_15917:				; CODE XREF: dseg:25905  j		 /* DOS offset ---> CFD:7 */
call	near ptr system_sound_warning_error_delay_after
mov	sp, bp

loc_1591C:				; CODE XREF: game_mil_hire_reassign_troops_query+44  j		 /* DOS offset ---> CFD:C */
pop	bp
retf
system_sound_warning_error_and_wait endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_sound_6_dings proc far

var_2		= byte ptr -2

push	bp
mov	bp, sp
sub	sp, 2
cmp	word_1352C, 0
jnz	short loc_15976
mov	[bp+var_2], 0
test	options_value, 1
jz	short loc_15981
cmp	[bp+var_2], 4

loc_1593A:				; CODE XREF: dseg:25924  j		 /* DOS offset ---> CFF:A */
jnb	short loc_15981
mov	ax, 1
push	ax

loc_15940:				; CODE XREF: dseg:2592D  j		 /* DOS offset ---> D00:0 */
; game_mil_hire_reassign_troops_query+B0  j
call	far ptr	6EBh:0Eh ; Switch_Target_Focus,	unrelated to building fort at least
add	sp, 2
mov	ax, 3
push	ax

loc_1594C:				; CODE XREF: dseg:25936  j		 /* DOS offset ---> D00:C */
push	cs
call	near ptr system_time_delay

loc_15950:				; CODE XREF: game_mil_hire_reassign_troops_query+DE  j		 /* DOS offset ---> D01:0 */
add	sp, 2
mov	ax, 1

loc_15956:				; CODE XREF: dseg:259DF  p		 /* DOS offset ---> D01:6 */
push	ax
;     ***************************************************************************
db  9Ah	;   *
db  0Eh
db    0
db 0EBh	;   *
db    6
db  83h	;   *
db 0C4h	;   *
db    2
db 0B8h	;   *
db    9
db    0
db  50h	; P
db  0Eh
db 0E8h	;   *
unk_15965	db 0B7h	;   *		; CODE XREF: game_mil_hire_reassign_troops_query+36  j
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    2
s_1596C:		 /* DOS offset ---> 1D02:C */
glb_1596A	db 0FEh	;   *
db  46h	; F
db 0FEh	;   *
db 0F6h	;   *
db    6
db 0B4h	;   *
db  33h	; 3
db    1
db  75h	; u
db 0C2h	;   *
db 0EBh	;   *
db  0Bh
;     ***************************************************************************

loc_15976:				; CODE XREF: system_sound_6_dings+B  j		 /* DOS offset ---> D03:6 */
mov	al, 0Eh
push	ax
call	far ptr	6EBh:4F0h ; system_sound_out
add	sp, 2

loc_15981:				; CODE XREF: system_sound_6_dings+16  j		 /* DOS offset ---> D04:1 */
; system_sound_6_dings:loc_1593A  j
push	cs
call	near ptr system_sound_warning_error_delay_after
mov	sp, bp
pop	bp
retf
system_sound_6_dings endp

;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	bx, [bp+6]

loc_15990:				; CODE XREF: dseg:25967  j dseg:2597E  j ...		 /* DOS offset ---> D05:0 */
mov	bl, [bx+22h]

loc_15993:				; CODE XREF: game_mil_hire_reassign_troops+23  j		 /* DOS offset ---> D05:3 */
sub	bh, bh

loc_15995:				; CODE XREF: dseg:25C72  p		 /* DOS offset ---> D05:5 */
mov	al, [bx+3C4Eh]
push	ax
call	far ptr	6EBh:96h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, word_1CA9A
mov	bl, [bx+22h]
sub	bh, bh
mov	al, [bx+3C4Eh]
add	al, 5
push	ax

loc_159B4:				; CODE XREF: game_mil_hire_reassign_troops+EA  j		 /* DOS offset ---> D07:4 */
call	far ptr	6EBh:96h
add	sp, 2

locret_159BC:				; CODE XREF: game_mil_hire_reassign_troops+4B  j
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_input_hit_any_key proc far
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 3634h	; 0x331CF
; Text:	'Hit any key. '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2

loc_159CF:				; CODE XREF: game_mil_hire_reassign_troops+5D  j		 /* DOS offset ---> D08:F */
call	far ptr	3EFh:79Ah ; game_query_user_input_main
retf
game_input_hit_any_key endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_59D6		proc near		 /* DOS offset ---> D09:6 */

arg_2		= word ptr  6

push	bp

loc_159D7:				; CODE XREF: game_mil_hire_reassign_troops+5B  j		 /* DOS offset ---> D09:7 */
; game_mil_hire_reassign_troops+65  j
mov	bp, sp
sub	ax, ax

loc_159DB:				; CODE XREF: game_mil_hire_reassign_troops+6A  j		 /* DOS offset ---> D09:B */
push	ax
push	[bp+arg_2]

loc_159DF:		 /* DOS offset ---> D09:F */
call	loc_25E3F+1
s_59D6		endp		 /* DOS offset ---> D09:6 */

;     ***************************************************************************
word_159E4	dw 0E58Bh		; DATA XREF: game_display_draw_province_menu_sub+10  r
special_tax_unavailable	dw 0CB5Dh	; DATA XREF: game_display_draw_province_menu_sub+24  r
; game_tax_check+19  w ...
word_159E8	dw 8B55h		; CODE XREF: s_5E6C+5A  p
; DATA XREF: game_display_draw_province_menu_sub+38  r ...
word_159EA	dw 8BECh		; DATA XREF: game_display_draw_province_menu_sub+60  r
; game_move_send_whom+F9  w ...
word_159EC	dw 65Eh			; CODE XREF: dseg:259E7  j
; DATA XREF: game_display_draw_province_menu_sub:loc_23174  r ...
word_159EE	dw 3F83h		; DATA XREF: game_display_draw_province_menu_sub+74  r
; game_reward_func+44  w
db    0
;     ***************************************************************************
jz	short loc_159FD

loc_159F3:				; CODE XREF: dseg:59FB  j		 /* DOS offset ---> D0B:3 */
mov	bx, [bx]
mov	[bp+6],	bx
cmp	word ptr [bx], 0
jnz	short loc_159F3

loc_159FD:				; CODE XREF: dseg:59F1  j		 /* DOS offset ---> D0B:D */
mov	ax, bx
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_15A04:				; CODE XREF: s_5EFE+13  p		 /* DOS offset ---> D0C:4 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  47h	; G
db    2
db  0Bh
unk_15A11	db 0C0h	;   *		; CODE XREF: game_mil_hire_reassign_troops+48  j
; game_mil_hire_reassign_troops+88  j ...
db  74h	; t
db  18h
;     ***************************************************************************

loc_15A14:				; CODE XREF: dseg:loc_15A21  j		 /* DOS offset ---> D0D:4 */
mov	bx, ax
mov	ax, [bp+8]
cmp	[bx], ax
jz	short loc_15A26
mov	ax, [bx]
or	ax, ax

loc_15A21:		 /* DOS offset ---> D0E:1 */
jnz	short loc_15A14
jmp	short loc_15A2C
;     ***************************************************************************
nop

loc_15A26:				; CODE XREF: dseg:5A1B  j		 /* DOS offset ---> D0E:6 */
mov	ax, bx
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_15A2C:				; CODE XREF: dseg:5A23  j		 /* DOS offset ---> D0E:C */
sub	ax, ax
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5A32		proc far		; CODE XREF: s_5F5E:loc_15F88  p		 /* DOS offset ---> D0F:2 */
; s_5F9E:loc_15FEC  p

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
cmp	word ptr [bx], 0
jz	short loc_15A47

loc_15A3D:				; CODE XREF: s_5A32+13  j		 /* DOS offset ---> D0F:D */
mov	bx, [bx]
mov	[bp+arg_0], bx
cmp	word ptr [bx], 0
jnz	short loc_15A3D

loc_15A47:				; CODE XREF: s_5A32+9  j		 /* DOS offset ---> D10:7 */
mov	ax, bx
mov	sp, bp
pop	bp
retf
s_5A32		endp		 /* DOS offset ---> D0F:2 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5A4E		proc far		; CODE XREF: s_6078+16  p		 /* DOS offset ---> D10:E */

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp

loc_15A4F:				; CODE XREF: dseg:25A8B  j		 /* DOS offset ---> D10:F */
mov	bp, sp
sub	sp, 2
cmp	[bp+arg_0], 0

loc_15A58:				; CODE XREF: dseg:25A3B  j		 /* DOS offset ---> D11:8 */
; game_mil_hire_reassign_troops+E8  j
jz	short loc_15A76

loc_15A5A:				; CODE XREF: s_5A4E+1D  j		 /* DOS offset ---> D11:A */
mov	bx, [bp+arg_0]
mov	ax, [bp+arg_2]
cmp	[bx], ax

loc_15A62:				; CODE XREF: dseg:25A4E  j		 /* DOS offset ---> D12:2 */
jz	short loc_15A70
mov	ax, [bx]
mov	[bp+arg_0], ax
or	ax, ax
jnz	short loc_15A5A
jmp	short loc_15A76
;     ***************************************************************************
nop

loc_15A70:				; CODE XREF: s_5A4E:loc_15A62  j		 /* DOS offset ---> D13:0 */
; game_mil_hire_reassign_troops+FD  j
mov	ax, bx
mov	sp, bp
pop	bp

locret_15A75:				; CODE XREF: game_mil_hire_reassign_troops+101  j
retf
;     ***************************************************************************

loc_15A76:				; CODE XREF: s_5A4E:loc_15A58  j		 /* DOS offset ---> D13:6 */
; s_5A4E+1F  j
sub	ax, ax
mov	sp, bp
pop	bp
retf
s_5A4E		endp		 /* DOS offset ---> D10:E */

;     ***************************************************************************
push	bp
mov	bp, sp
mov	ax, [bp+6]
mov	word_1CEB2, ax

loc_15A85:				; CODE XREF: game_mil_hire_reassign_troops+4D  j		 /* DOS offset ---> D14:5 */
call	far ptr	793h:5A4h
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_general_clear_spy_ruler proc far ; CODE XREF:	s_5AA2+5D  p s_5B60+44  p	...

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]

loc_15A94:				; CODE XREF: dseg:25B55  p		 /* DOS offset ---> D15:4 */
and	byte ptr [bx+2], 0D1h
and	byte ptr [bx+3], 0Fh
mov	byte ptr [bx+0Dh], 0FFh
pop	bp
retf
game_data_general_clear_spy_ruler endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5AA2		proc far		; CODE XREF: s_5B60+36  p		 /* DOS offset ---> D16:2 */

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp

loc_15AA3:				; CODE XREF: game_mil_hire_reassign_troops+121  j		 /* DOS offset ---> D16:3 */
mov	bp, sp
sub	sp, 4
mov	bx, [bp+arg_0]
mov	al, [bx+0Dh]
mov	[bx+0Ah], al
push	bx

loc_15AB2:				; CODE XREF: dseg:25AA8  j		 /* DOS offset ---> D17:2 */
call	far ptr	525h:30h
add	sp, 2

loc_15ABA:				; CODE XREF: game_mil_hire_reassign_troops+14A  j		 /* DOS offset ---> D17:A */
mov	bx, ax
mov	[bp+var_2], bx
mov	ax, [bx+2]
mov	[bp+var_4], ax
or	ax, ax

loc_15AC7:				; CODE XREF: dseg:25BDA  p		 /* DOS offset ---> D18:7 */
jz	short loc_15AE2

loc_15AC9:				; CODE XREF: s_5AA2+3E  j		 /* DOS offset ---> D18:9 */
push	ax
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_15AE2
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_4], ax
or	ax, ax
jnz	short loc_15AC9

loc_15AE2:				; CODE XREF: s_5AA2:loc_15AC7  j		 /* DOS offset ---> D1A:2 */
; s_5AA2+32  j
cmp	[bp+var_4], 0
jnz	short loc_15AEE
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_15AEE:				; CODE XREF: s_5AA2+44  j		 /* DOS offset ---> D1A:E */
mov	bx, [bp+arg_0]
mov	byte ptr [bx+0Bh], 64h ; 'd'
mov	al, [bx+0Eh]

loc_15AF8:				; CODE XREF: dseg:25AF3  j		 /* DOS offset ---> D1B:8 */
dec	al
add	[bx+0Ch], al
push	bx
push	cs
call	near ptr game_data_general_clear_spy_ruler
add	sp, 2
push	[bp+arg_0]
push	[bp+var_4]
push	cs
call	near ptr s_5F9E
add	sp, 4
push	[bp+var_2]
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_15B58
call	far ptr	4B5h:290h
mov	ax, [bp+arg_0]
add	ax, 1Ch
push	ax
mov	bx, [bp+var_2]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 3642h
push	ax

loc_15B3A:				; CODE XREF: game_mil_reassign_troops_query+45  j		 /* DOS offset ---> D1F:A */
call	far ptr	3EFh:6E8h
add	sp, 6

loc_15B42:				; CODE XREF: game_mil_reassign_troops_query+14  j		 /* DOS offset ---> D20:2 */
call	far ptr	57Ch:126h
mov	ax, 3678h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	57Ch:126h

loc_15B58:				; CODE XREF: s_5AA2+7D  j		 /* DOS offset ---> D21:8 */
mov	ax, 1
mov	sp, bp
pop	bp

locret_15B5E:				; CODE XREF: game_mil_hire_soldiers_recalc_training_max_hire+44  j
retf
s_5AA2		endp		 /* DOS offset ---> D16:2 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5B60		proc far		 /* DOS offset ---> D22:0 */

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp

loc_15B61:		 /* DOS offset ---> D22:1 */
mov	bp, sp

loc_15B63:				; CODE XREF: dseg:25B0D  j dseg:25B21  j ...		 /* DOS offset ---> D22:3 */
sub	sp, 2
push	[bp+arg_2]
call	far ptr	525h:30h
add	sp, 2
mov	bx, ax
mov	ax, [bp+arg_2]
cmp	[bx+4],	ax
jnz	short loc_15B80
mov	word ptr [bx+4], 0

loc_15B80:				; CODE XREF: s_5B60+19  j dseg:25B5D  j		 /* DOS offset ---> D24:0 */
mov	bx, [bp+arg_2]
mov	word ptr [bx+12h], 0

loc_15B88:				; CODE XREF: dseg:25B7E  j dseg:25B62  j		 /* DOS offset ---> D24:8 */
mov	byte ptr [bx+16h], 64h ; 'd'
test	byte ptr [bx+2], 2
jz	short loc_15BA0

loc_15B92:		 /* DOS offset ---> D25:2 */
push	[bp+arg_2]
push	cs
call	near ptr s_5AA2	; *
add	sp, 2
or	ax, ax
jnz	short loc_15BB4

loc_15BA0:				; CODE XREF: s_5B60+30  j dseg:25AF5  j		 /* DOS offset ---> D26:0 */
push	[bp+arg_2]
push	cs
call	near ptr game_data_general_clear_spy_ruler ; *

loc_15BA7:				; CODE XREF: dseg:25DC4  p		 /* DOS offset ---> D26:7 */
add	sp, 2
push	[bp+arg_2]
push	[bp+arg_0]
push	cs
call	near ptr s_5F5E	; *

loc_15BB4:				; CODE XREF: s_5B60+3E  j dseg:25BE2  j ...		 /* DOS offset ---> D27:4 */
mov	sp, bp
pop	bp
retf
s_5B60		endp		 /* DOS offset ---> D22:0 */

;     ***************************************************************************

loc_15BB8:				; CODE XREF: dseg:5C4D  p		 /* DOS offset ---> D27:8 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db 0B0h	;   *
db    5
;     ***************************************************************************

loc_15BC0:				; CODE XREF: dseg:25BBB  j		 /* DOS offset ---> D28:0 */
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bx, [bp+8]
push	word ptr [bx]
push	word ptr [bp+6]
mov	[bp-2],	ax
call	far ptr	60Dh:630h ; CODE XREF: dseg:25BD3  j
add	sp, 4
mov	bx, [bp+6]
mov	cl, [bx+0Bh]
shr	cl, 1
mul	cl
push	ax
call	far ptr	0:1B0h
sub	al, 64h	; 'd'
neg	al

loc_15BF0:				; CODE XREF: game_mil_hire_soldiers_main+59  j		 /* DOS offset ---> D2B:0 */
sub	al, [bp-2]
mov	bx, [bp+6]
mov	[bx+0Bh], al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
push	word ptr [bp+6]
call	far ptr	525h:30h
add	sp, 2
mov	[bp-2],	ax
push	word ptr [bp+8]
call	far ptr	525h:6
add	sp, 2
mov	[bp-4],	al
mov	bx, [bp+6]
mov	[bx+0Ah], al
test	byte ptr [bx+2], 2

loc_15C2A:				; CODE XREF: dseg:25C25  j		 /* DOS offset ---> D2E:A */
jz	short loc_15C46
mov	bx, [bp+6]
mov	al, [bp-4]
cmp	[bx+0Dh], al
jnz	short loc_15C46
mov	byte ptr [bx+0Bh], 64h ; 'd'

loc_15C3B:		 /* DOS offset ---> D2F:B */
mov	al, [bx+0Eh]
dec	al
add	[bx+0Ch], al
jmp	short loc_15C5A
;     ***************************************************************************
nop

loc_15C46:				; CODE XREF: dseg:loc_15C2A  j		 /* DOS offset ---> D30:6 */
; dseg:5C35  j
push	word ptr [bp+8]
push	word ptr [bp+6]
push	cs
call	loc_15BB8
add	sp, 4
mov	bx, [bp+6]

loc_15C56:				; CODE XREF: game_mil_hire_soldiers_main+85  j		 /* DOS offset ---> D31:6 */
mov	byte ptr [bx+0Ch], 1

loc_15C5A:				; CODE XREF: dseg:5C43  j		 /* DOS offset ---> D31:A */
push	word ptr [bp+6]
push	cs
call	near ptr game_data_general_clear_spy_ruler
add	sp, 2
mov	bx, [bp-2]
mov	ax, [bp+6]

loc_15C6A:				; CODE XREF: game_mil_hire_soldiers_main+CC  j		 /* DOS offset ---> D32:A */
cmp	[bx+4],	ax
jnz	short loc_15C74
mov	word ptr [bx+4], 0

loc_15C74:				; CODE XREF: dseg:5C6D  j		 /* DOS offset ---> D33:4 */
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_surrounding_provinces proc far ; CODE XREF: s_5DF8+3A  p /* DOS offset ---> d33:8 */

var_4		= byte ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= byte ptr  0Ah

push	bp
mov	bp, sp
sub	sp, 4
push	si

loc_15C7F:				; CODE XREF: dseg:25C6B  j dseg:25C7A  j		 /* DOS offset ---> D33:F */
mov	bx, [bp+arg_0]

loc_15C82:				; CODE XREF: game_mil_hire_soldiers_main+5B  j		 /* DOS offset ---> D34:2 */
mov	al, [bx]    ; JUQIANG: al->3, looks like x of province geo
mov	cx, ax      ; JUQIANG: cx->3
and	ax, 1       ; JUQIANG: al->1
mov	si, ax
shl	si, 1       ; JUQIANG: si->2
add	si, ax      ; JUQIANG: si->3
shl	si, 1       ; JUQIANG: si->6
mov	bl, [bp+arg_4]
sub	bh, bh
mov	al, [bx+si+36A0h]   ;JUQIANG: al->2     36a0 value: 01 02 01 00 00 00 02 02 02 01 00 01 , offset is 36a6, value is 02
mov	bx, [bp+arg_2]
add	al, [bx]            ;JUQIANG [bx]=1, maybe y of province
mov	[bp+var_4], al

loc_15CA2:				; CODE XREF: game_mil_hire_soldiers_check+E  j		 /* DOS offset ---> D36:2 */
mov	al, [bp+arg_4]  ;JUQIANG: al->0
mov	dl, 3
sub	ah, ah
div	dl      ;JUQIANG: ax->0
add	cl, ah  ;JUQIANG: cl->3
jz	short loc_15CE8

loc_15CAF:				; CODE XREF: game_mil_hire_soldiers_check+20  j		 /* DOS offset ---> D36:F */
cmp	cl, 8
ja	short loc_15CE8

loc_15CB4:				; CODE XREF: game_mil_hire_soldiers_check+1E  j		 /* DOS offset ---> D37:4 */
; game_mil_hire_soldiers_check+26  j
cmp	[bp+var_4], 0   ; JUQIANG: [bp-4]=3
jz	short loc_15CE8
cmp	[bp+var_4], 9   ;
ja	short loc_15CE8

loc_15CC0:				; CODE XREF: dseg:25CBC  j		 /* DOS offset ---> D38:0 */
mov	al, cl

loc_15CC2:				; CODE XREF: game_mil_hire_soldiers_check+2B  j		 /* DOS offset ---> D38:2 */
dec	al      ; JUQIANG: al->2

loc_15CC4:				; CODE XREF: dseg:25C27  j		 /* DOS offset ---> D38:4 */
mov	bx, [bp+arg_0]
mov	[bx], al
mov	al, [bp+var_4]  ;JUQIANG: al->3

loc_15CCC:				; CODE XREF: game_mil_hire_soldiers_check+35  j		 /* DOS offset ---> D38:C */
dec	al          ;JUQIANG: al->2
mov	si, [bp+arg_2]
mov	[si], al
sub	ah, ah
mov	si, ax  ;JUQIANG: si->2
mov	cl, dl  ;JUQIANG: cl->3
shl	si, cl  ;JUQIANG: si->0x10
mov	bl, [bx]

loc_15CDD:				; CODE XREF: dseg:25CC1  j		 /* DOS offset ---> D39:D */
sub	bh, bh
mov	al, [bx+si+3C06h]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_15CE8:				; CODE XREF: game_data_get_surrounding_provinces+35  j		 /* DOS offset ---> D3A:8 */
; game_data_get_surrounding_provinces+3A  j ...
mov	al, 0FFh
pop	si
mov	sp, bp
pop	bp
retf
game_data_get_surrounding_provinces endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_rulers_in_game proc far

var_A		= word ptr -0Ah
var_8		= byte ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp

loc_15CF1:				; CODE XREF: game_mil_hire_soldiers+7  j		 /* DOS offset ---> D3B:1 */
mov	bp, sp

loc_15CF3:				; CODE XREF: dseg:25BBD  j dseg:25BD5  j		 /* DOS offset ---> D3B:3 */
sub	sp, 0Ah
mov	[bp+var_8], 0
mov	[bp+var_2], 0CAF8h
mov	[bp+var_4], 2B34h
mov	[bp+var_A], 10h

loc_15D09:				; CODE XREF: game_data_get_rulers_in_game:loc_15D41  j		 /* DOS offset ---> D3C:9 */
mov	bx, [bp+var_4]
cmp	word ptr [bx], 0
jz	short loc_15D3A
push	bx

loc_15D12:				; s_5462		 /* DOS offset ---> D3D:2 */
call	far ptr	542h:42h
add	sp, 2

loc_15D1A:				; CODE XREF: game_mil_hire_soldiers+2C  j		 /* DOS offset ---> D3D:A */
or	ax, ax
jnz	short loc_15D3A
cmp	[bp+arg_0], ax
jnz	short loc_15D2B
mov	ax, current_ruler
cmp	[bp+var_4], ax

loc_15D29:				; CODE XREF: dseg:25D22  j		 /* DOS offset ---> D3E:9 */
jz	short loc_15D3A

loc_15D2B:				; CODE XREF: game_data_get_rulers_in_game+31  j		 /* DOS offset ---> D3E:B */
; dseg:25D27  j
mov	ax, [bp+var_4]
mov	bx, [bp+var_2]
add	[bp+var_2], 2
mov	[bx], ax

loc_15D37:				; CODE XREF: dseg:25D4F  j		 /* DOS offset ---> D3F:7 */
inc	[bp+var_8]

loc_15D3A:				; CODE XREF: game_data_get_rulers_in_game+1F  j		 /* DOS offset ---> D3F:A */
; game_data_get_rulers_in_game+2C  j ...
add	[bp+var_4], 29h	; ')'
dec	[bp+var_A]

loc_15D41:				; CODE XREF: dseg:25D3C  j		 /* DOS offset ---> D40:1 */
jnz	short loc_15D09

loc_15D43:				; CODE XREF: dseg:25D36  j dseg:25D38  j		 /* DOS offset ---> D40:3 */
mov	bx, [bp+var_2]
mov	word ptr [bx], 0
mov	al, [bp+var_8]
mov	sp, bp
pop	bp
retf
game_data_get_rulers_in_game endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_display_generals_action_list2 proc	far

var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= byte ptr  8

push	bp
mov	bp, sp
sub	sp, 8
mov	[bp+var_2], 0CEB2h

loc_15D5D:		 /* DOS offset ---> D41:D */
mov	[bp+var_6], 0
test	[bp+arg_2], 1
jz	short loc_15DB9
push	[bp+arg_0]
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_15DB9
mov	bx, [bp+arg_0]
mov	ax, [bx+2]
mov	[bp+var_4], ax
test	[bp+arg_2], 8
jnz	short loc_15D9D
push	bx

loc_15D86:				; CODE XREF: dseg:25D6C  j dseg:25DBD  j		 /* DOS offset ---> D44:6 */
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
mov	bx, ax
mov	ax, [bp+var_4]
cmp	[bx], ax
jnz	short loc_15DA1

loc_15D97:				; CODE XREF: game_personal_dismiss_which_general+34  j		 /* DOS offset ---> D45:7 */
test	[bp+arg_2], 4
jz	short loc_15DA1

loc_15D9D:				; CODE XREF: game_display_generals_action_list2+31  j		 /* DOS offset ---> D45:D */
mov	bx, ax
mov	ax, [bx]

loc_15DA1:				; CODE XREF: game_display_generals_action_list2+43  j		 /* DOS offset ---> D46:1 */
; game_display_generals_action_list2+49  j
or	ax, ax
jz	short loc_15DB9

loc_15DA5:				; CODE XREF: game_display_generals_action_list2+65  j		 /* DOS offset ---> D46:5 */
mov	bx, [bp+var_2]
add	[bp+var_2], 2
mov	[bx], ax
inc	[bp+var_6]
mov	bx, ax
mov	ax, [bx]

loc_15DB5:				; CODE XREF: game_personal_dismiss_which_general+50  j		 /* DOS offset ---> D47:5 */
or	ax, ax
jnz	short loc_15DA5

loc_15DB9:				; CODE XREF: game_display_generals_action_list2+13  j		 /* DOS offset ---> D47:9 */
; game_display_generals_action_list2+22  j ...
test	[bp+arg_2], 2
jz	short loc_15DE9

loc_15DBF:				; CODE XREF: dseg:25D43  j		 /* DOS offset ---> D47:F */
push	current_ruler

loc_15DC3:				; CODE XREF: game_personal_dismiss_which_general+5F  j		 /* DOS offset ---> D48:3 */
; dseg:25D3E  j ...
call	far ptr	525h:6	; game_data_get_rulers_data
add	sp, 2

loc_15DCB:				; CODE XREF: dseg:25FD6  p		 /* DOS offset ---> D48:B */
mov	bx, [bp+arg_0]
mov	ax, [bx+4]
or	ax, ax
jz	short loc_15DE9

loc_15DD5:				; CODE XREF: game_display_generals_action_list2+95  j		 /* DOS offset ---> D49:5 */
mov	bx, [bp+var_2]

loc_15DD8:				; CODE XREF: game_personal_dismiss_which_general+73  j		 /* DOS offset ---> D49:8 */
add	[bp+var_2], 2

loc_15DDC:				; CODE XREF: game_personal_dismiss_which_general+78  j		 /* DOS offset ---> D49:C */
mov	[bx], ax
inc	[bp+var_6]
mov	bx, ax
mov	ax, [bx]
or	ax, ax
jnz	short loc_15DD5

loc_15DE9:				; CODE XREF: game_display_generals_action_list2+6B  j		 /* DOS offset ---> D4A:9 */
; game_display_generals_action_list2+81  j
mov	bx, [bp+var_2]
mov	word ptr [bx], 0
mov	al, [bp+var_6]
mov	sp, bp
pop	bp
retf
game_display_generals_action_list2 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5DF8		proc far		 /* DOS offset ---> D4B:8 */

var_C		= byte ptr -0Ch
var_A		= byte ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 0Ch
mov	[bp+var_8], 0CA62h
call	far ptr	525h:17Eh
sub	al, al
mov	[bp+var_A], al

loc_15E0D:		 /* DOS offset ---> D4C:D */
mov	[bp+var_C], al

loc_15E10:				; CODE XREF: s_5DF8+63  j		 /* DOS offset ---> D4D:0 */
mov	bx, [bp+arg_0]
mov	al, [bx+20h]
mov	byte ptr [bp+var_4], al
mov	al, [bx+21h]
mov	byte ptr [bp+var_6], al
mov	bl, [bp+var_C]
sub	bh, bh
mov	al, [bx-3572h]
push	ax
lea	ax, [bp+var_6]
push	ax
lea	ax, [bp+var_4]
push	ax
push	cs
call	near ptr game_data_get_surrounding_provinces
add	sp, 6
mov	[bp+var_2], al

loc_15E3B:				; CODE XREF: dseg:25E20  j		 /* DOS offset ---> D4F:B */
cmp	al, 0FFh
jz	short loc_15E54
push	ax

loc_15E40:		 /* DOS offset ---> D50:0 */
call	far ptr	525h:76h
add	sp, 2
mov	bx, [bp+var_8]
add	[bp+var_8], 2
mov	[bx], ax
inc	[bp+var_A]

loc_15E54:				; CODE XREF: s_5DF8+45  j		 /* DOS offset ---> D51:4 */
inc	[bp+var_C]
cmp	[bp+var_C], 6
jb	short loc_15E10
mov	bx, [bp+var_8]
mov	word ptr [bx], 0
mov	al, [bp+var_A]
mov	sp, bp

loc_15E69:				; CODE XREF: game_personal_dismiss_which_general+F3  j		 /* DOS offset ---> D52:9 */
; game_personal_dismiss_which_general+FE  j
pop	bp
retf
s_5DF8		endp		 /* DOS offset ---> D4B:8 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5E6C		proc far		; CODE XREF: s_5F9E+8E  p		 /* DOS offset ---> D52:C */

var_4		= word ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 4
push	si
push	[bp+arg_0]
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp+arg_2]

loc_15E81:				; CODE XREF: game_personal_dismiss_which_general+36  j		 /* DOS offset ---> D54:1 */
; game_personal_dismiss_which_general+52  j ...
mov	[bx+10h], al
mov	bx, [bp+arg_0]

loc_15E87:		 /* DOS offset ---> D54:7 */
mov	ax, [bx+2]
mov	[bp+var_4], ax
or	ax, ax
jnz	short loc_15E9C
mov	bx, [bp+arg_2]
mov	si, [bp+arg_0]
mov	[si+2],	bx
jmp	short loc_15ED5
;     ***************************************************************************

loc_15E9C:				; CODE XREF: s_5E6C+23  j		 /* DOS offset ---> D55:C */
mov	bx, [bp+arg_2]
push	word ptr [bx+2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_15EC2

loc_15EAE:				; CODE XREF: s_25E40+54  j		 /* DOS offset ---> D56:E */
mov	bx, [bp+arg_0]
mov	ax, [bx+2]

loc_15EB4:				; CODE XREF: dseg:25FBE  p		 /* DOS offset ---> D57:4 */
mov	si, [bp+arg_2]
mov	[si], ax
mov	[bx+2],	si
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_15EC2:				; CODE XREF: s_5E6C+40  j		 /* DOS offset ---> D58:2 */
push	[bp+var_4]
push	cs
call	near ptr word_159E8

loc_15EC9:				; CODE XREF: game_personal_dismiss_advisor_query+12  j		 /* DOS offset ---> D58:9 */
add	sp, 2
mov	bx, ax
mov	ax, [bp+arg_2]

loc_15ED1:				; CODE XREF: dseg:25FC2  p		 /* DOS offset ---> D59:1 */
mov	[bx], ax
mov	bx, ax

loc_15ED5:				; CODE XREF: s_5E6C+2E  j		 /* DOS offset ---> D59:5 */
mov	word ptr [bx], 0
pop	si
mov	sp, bp
pop	bp
retf
s_5E6C		endp		 /* DOS offset ---> D52:C */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5EDE		proc far		 /* DOS offset ---> D59:E */

arg_0		= word ptr  6

push	bp
mov	bp, sp

loc_15EE1:				; CODE XREF: dseg:25FA8  j		 /* DOS offset ---> D5A:1 */
mov	bx, [bp+arg_0]
mov	word ptr [bx+2], 0
mov	byte ptr [bx+12h], 0
and	byte ptr [bx+13h], 3
mov	al, 0FFh
mov	[bx+10h], al
mov	[bx+14h], al
mov	[bx+15h], al
pop	bp
retf
s_5EDE		endp		 /* DOS offset ---> D59:E */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5EFE		proc far		; CODE XREF: s_5F9E+AA  p		 /* DOS offset ---> D5B:E */
; s_6078:loc_160B0  p

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+arg_2]

loc_15F07:		 /* DOS offset ---> D5C:7 */
mov	ax, [bx]
mov	[bp+var_2], ax
push	bx
push	[bp+arg_0]

loc_15F10:				; CODE XREF: game_personal_dismiss_advisor_query+43  j		 /* DOS offset ---> D5D:0 */
push	cs
call	loc_15A04
add	sp, 4
mov	[bp+var_4], ax
cmp	[bp+var_2], 0
jnz	short loc_15F40

loc_15F20:				; CODE XREF: game_personal_dismiss_query+9A  j		 /* DOS offset ---> D5E:0 */
mov	bx, [bp+arg_0]
mov	ax, [bp+arg_2]
cmp	[bx+2],	ax
jnz	short loc_15F34
mov	word ptr [bx+2], 0
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_15F34:				; CODE XREF: s_5EFE+2B  j		 /* DOS offset ---> D5F:4 */
mov	bx, [bp+var_4]
mov	word ptr [bx], 0
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_15F40:				; CODE XREF: s_5EFE+20  j		 /* DOS offset ---> D60:0 */
or	ax, ax
jnz	short loc_15F52
mov	ax, [bp+var_2]
mov	bx, [bp+arg_0]
mov	[bx+2],	ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_15F52:				; CODE XREF: s_5EFE+44  j		 /* DOS offset ---> D61:2 */
mov	ax, [bp+var_2]
mov	bx, [bp+var_4]
mov	[bx], ax
mov	sp, bp
pop	bp
retf
s_5EFE		endp		 /* DOS offset ---> D5B:E */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5F5E		proc far		; CODE XREF: s_5B60+51  p dseg:25F50  j		 /* DOS offset ---> D61:E */

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+arg_2]

loc_15F67:				; CODE XREF: dseg:25F5C  j		 /* DOS offset ---> D62:7 */
mov	byte ptr [bx+0Ah], 0FFh
mov	word ptr [bx+12h], 0
mov	byte ptr [bx+16h], 100
mov	bx, [bp+arg_0]
mov	ax, [bx+4]
or	ax, ax

loc_15F7C:				; CODE XREF: game_personal_dismiss_query+47  j		 /* DOS offset ---> D63:C */
jnz	short loc_15F86
mov	ax, [bp+arg_2]
mov	[bx+4],	ax
jmp	short loc_15F92
;     ***************************************************************************

loc_15F86:				; CODE XREF: s_5F5E:loc_15F7C  j		 /* DOS offset ---> D64:6 */
push	ax

loc_15F87:				; CODE XREF: dseg:25F80  j		 /* DOS offset ---> D64:7 */
push	cs

loc_15F88:				; CODE XREF: game_personal_dismiss_query+61  j		 /* DOS offset ---> D64:8 */
call	near ptr s_5A32	; *
mov	bx, ax
mov	ax, [bp+arg_2]
mov	[bx], ax

loc_15F92:				; CODE XREF: s_5F5E+26  j dseg:25F7E  j ...		 /* DOS offset ---> D65:2 */
mov	bx, [bp+arg_2]
mov	word ptr [bx], 0

loc_15F99:				; CODE XREF: dseg:25F6E  j dseg:25F8F  j		 /* DOS offset ---> D65:9 */
mov	sp, bp

loc_15F9B:				; CODE XREF: game_personal_dismiss_advisor_query+79  j		 /* DOS offset ---> D65:B */
; game_personal_dismiss_query+1C  j ...
pop	bp
retf
s_5F5E		endp		 /* DOS offset ---> D61:E */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_5F9E		proc far		; CODE XREF: s_5AA2+6A  p		 /* DOS offset ---> D65:E */

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    6
db  56h	; V
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  47h	; G
db    2
;     ***************************************************************************

loc_15FAB:				; CODE XREF: dseg:25FA6  j		 /* DOS offset ---> D66:B */
mov	[bp+var_2], ax
push	[bp+arg_2]
call	far ptr	525h:30h
add	sp, 2
mov	[bp+var_4], ax
push	[bp+arg_2]

loc_15FBF:				; CODE XREF: game_personal_dismiss_query+98  j		 /* DOS offset ---> D67:F */
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_15FE2
mov	bx, [bp+arg_0]

loc_15FCE:				; CODE XREF: game_personal_dismiss_query+A1  j		 /* DOS offset ---> D68:E */
and	byte ptr [bx+12h], 0FBh
mov	ax, [bp+arg_2]
mov	[bx+2],	ax
mov	bx, ax
mov	ax, [bp+var_2]

loc_15FDD:				; CODE XREF: dseg:2681D  p		 /* DOS offset ---> D69:D */
mov	[bx], ax
;     ***************************************************************************
db 0EBh	;   *
db  2Bh	; +
;     ***************************************************************************
nop

loc_15FE2:				; CODE XREF: s_5F9E+2B  j		 /* DOS offset ---> D6A:2 */
cmp	[bp+var_2], 0
jz	short loc_15FFC
push	[bp+var_2]
push	cs

loc_15FEC:				; CODE XREF: game_personal_dismiss_func+12  j		 /* DOS offset ---> D6A:C */
call	near ptr s_5A32	; *
add	sp, 2
mov	bx, ax
mov	ax, [bp+arg_2]
mov	[bx], ax

loc_15FF9:				; DATA XREF: dseg:3AF1D  r		 /* DOS offset ---> D6B:9 */
jmp	short loc_16005
;     ***************************************************************************
nop

loc_15FFC:				; CODE XREF: s_5F9E+48  j		 /* DOS offset ---> D6B:C */
mov	ax, [bp+arg_2]
mov	bx, [bp+arg_0]

loc_16002:				; CODE XREF: dseg:26021  j		 /* DOS offset ---> D6C:2 */
mov	[bx+2],	ax

loc_16005:				; CODE XREF: s_5F9E:loc_15FF9  j		 /* DOS offset ---> D6C:5 */
mov	bx, [bp+arg_2]
mov	word ptr [bx], 0
push	[bp+arg_0]
call	far ptr	542h:92h

loc_16014:				; CODE XREF: game_personal_dismiss_func+36  j		 /* DOS offset ---> D6D:4 */
; dseg:26000  j ...
add	sp, 2
or	ax, ax
jnz	short loc_1605C
cmp	[bp+var_2], ax
jnz	short loc_16032
mov	bx, [bp+arg_0]
or	byte ptr [bx+13h], 30h
push	bx

loc_16028:				; CODE XREF: game_personal_appoint_which_province_query+A  j		 /* DOS offset ---> D6E:8 */
; dseg:26009  j
push	[bp+var_4]

loc_1602B:				; CODE XREF: game_personal_appoint_which_province_query+F  j		 /* DOS offset ---> D6E:B */
push	cs
call	near ptr s_5E6C	; *
add	sp, 4

loc_16032:				; CODE XREF: s_5F9E+80  j dseg:26012  j		 /* DOS offset ---> D6F:2 */
push	[bp+arg_2]
call	far ptr	542h:1D8h
add	sp, 2

loc_1603D:				; CODE XREF: dseg:263FB  p		 /* DOS offset ---> D6F:D */
or	ax, ax
jz	short loc_1605C
push	[bp+arg_0]
push	[bp+var_4]
push	cs
call	near ptr s_5EFE	; *
add	sp, 4
mov	bx, [bp+var_4]
mov	ax, [bx+2]
mov	si, [bp+arg_0]
mov	[si], ax
mov	[bx+2],	si

loc_1605C:				; CODE XREF: s_5F9E+7B  j s_5F9E+A1  j		 /* DOS offset ---> D71:C */
pop	si
mov	sp, bp
pop	bp
retf
s_5F9E		endp		 /* DOS offset ---> D65:E */

;     ***************************************************************************
nop
push	bp
; START	OF FUNCTION CHUNK FOR game_personal_appoint_which_province_query

loc_16063:				; CODE XREF: game_personal_appoint_which_province_query+48  j		 /* DOS offset ---> D72:3 */
mov	bp, sp
mov	ax, word_12B2E
mov	bx, [bp+arg_0]
mov	[bx], ax
mov	byte ptr [bx+19h], 0

loc_16071:				; CODE XREF: dseg:26684  p		 /* DOS offset ---> D73:1 */
mov	word_12B2E, bx
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_personal_appoint_which_province_query
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_6078		proc far		 /* DOS offset ---> D73:8 */

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 6
mov	bx, [bp+arg_2]

loc_16081:				; CODE XREF: game_personal_appoint_which_province_query+59  j		 /* DOS offset ---> D74:1 */
mov	ax, [bx]
mov	[bp+var_2], ax
push	bx
mov	bx, [bp+arg_0]
push	word ptr [bx+2]
push	cs
call	near ptr s_5A4E	; *
add	sp, 4
mov	[bp+var_4], ax
or	ax, ax
jnz	short loc_160C4
cmp	[bp+var_2], ax
jnz	short loc_160B6
push	[bp+arg_0]

loc_160A3:				; CODE XREF: dseg:260E4  j		 /* DOS offset ---> D76:3 */
push	[bp+arg_2]

loc_160A6:				; CODE XREF: game_personal_appoint_which_province_query+51  j		 /* DOS offset ---> D76:6 */
; game_personal_appoint_which_province_query+73  j
call	far ptr	525h:30h
add	sp, 2
push	ax
push	cs

loc_160B0:				; CODE XREF: game_personal_appoint_which_province_query+94  j		 /* DOS offset ---> D77:0 */
call	near ptr s_5EFE	; *
;

loc_160B3:				; CODE XREF: game_personal_appoint_which_province_query+99  j		 /* DOS offset ---> D77:3 */
add	sp, 4

loc_160B6:				; CODE XREF: s_6078+26j		 /* DOS offset ---> D77:6 */
mov	ax, [bp+var_2]
mov	bx, [bp+arg_0]
mov	[bx+2],	ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_160C4:				; CODE XREF: s_6078+21  j		 /* DOS offset ---> D78:4 */
mov	ax, [bp+var_2]
mov	bx, [bp+var_4]
mov	[bx], ax
mov	sp, bp
pop	bp
retf
s_6078		endp		 /* DOS offset ---> D73:8 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_set_general_action_02	proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
or	byte ptr [bx+2], 1
pop	bp
retf
game_data_set_general_action_02	endp

;     ***************************************************************************
push	bp

loc_160DD:				; CODE XREF: dseg:260CD  j		 /* DOS offset ---> D79:D */
mov	bp, sp
push	word ptr [bp+6]

loc_160E2:				; CODE XREF: game_personal_appoint_which_province_query+BC  j		 /* DOS offset ---> D7A:2 */
mov	ax, 36ACh
push	ax

loc_160E6:				; CODE XREF: dseg:261F1  j		 /* DOS offset ---> D7A:6 */
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp

locret_160EE:				; CODE XREF: dseg:261E5  j
retf
;     ***************************************************************************
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
mov	bx, [bp+6]
mov	al, [bx]
mov	cx, ax
sub	ah, ah
inc	ax
push	ax

loc_160FE:				; CODE XREF: dseg:260F9  j		 /* DOS offset ---> D7B:E */
push	cx
call	far ptr	525h:76h
add	sp, 2
push	ax
call	far ptr	525h:4Ah
add	sp, 2
mov	bx, ax
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 36AFh
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_personal_appoint_which_province_query

loc_16125:				; CODE XREF: game_personal_appoint_which_province_query+4A  j		 /* DOS offset ---> D7E:5 */
; game_personal_appoint_which_province_query+ED  j ...
nop
push	bp
mov	bp, sp
mov	al, byte ptr [bp+arg_0]
and	al, 4
shr	al, 1
shr	al, 1
mov	cl, 14h
mul	cl
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_personal_appoint_which_province_query

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_6138		proc far		; CODE XREF: game_display_generals_action_list+115  p		 /* DOS offset ---> D7F:8 */
; dseg:loc_162CC  p

arg_0		= word ptr  6
arg_2		= byte ptr  8

push	bp
mov	bp, sp
push	si
mov	al, [bp+arg_2]
sub	ah, ah
dec	ax
cmp	ax, 5
ja	short loc_1618A
shl	ax, 1

loc_16149:				; CODE XREF: dseg:2613C  j dseg:26144  j		 /* DOS offset ---> D80:9 */
xchg	ax, bx

loc_1614A:				; CODE XREF: game_personal_appoint_func+18  j		 /* DOS offset ---> D80:A */
jmp	word ptr cs:loc_10080[bx]
;     ***************************************************************************
nop
mov	word ptr [bx+si], es
mov	word ptr [bx+si], es
mov	word ptr [bx+si], es
mov	al, byte ptr loc_1ABFF+1
add	[si-7500h], dh
jbe	short near ptr loc_16166+1
and	si, 0FFh
mov	bx, [bp+6]

loc_16166:				; CODE XREF: s_6138+25  j		 /* DOS offset ---> D82:6 */
mov	al, [bx+si+3]

loc_16169:				; CODE XREF: s_6138+4A  j		 /* DOS offset ---> D82:9 */
sub	ah, ah
pop	si

loc_1616C:				; CODE XREF: game_personal_appoint_func+2B  j		 /* DOS offset ---> D82:C */
; game_personal_appoint_func+3A  j
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, [bp+arg_0]
mov	ax, [bx+12h]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, [bp+6]
mov	al, [bx+0Bh]
jmp	short loc_16169
;     ***************************************************************************
mov	bx, [bp+arg_0]
mov	ax, [bx+14h]

loc_1618A:				; CODE XREF: s_6138+D  j		 /* DOS offset ---> D84:A */
pop	si
mov	sp, bp
pop	bp
retf
s_6138		endp		 /* DOS offset ---> D7F:8 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_display_generals_action_list proc far
; CODE XREF: game_display_generals_action_list_query_sub+57  p
; game_personal_appoint_func+61  j

var_C		= byte ptr -0Ch
var_A		= byte ptr -0Ah
var_8		= byte ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= byte ptr  6
arg_4		= byte ptr  8

; FUNCTION CHUNK AT 62DF SIZE 00000050 BYTES

push	bp
mov	bp, sp

loc_16193:				; CODE XREF: game_personal_appoint_func+F9  j		 /* DOS offset ---> D85:3 */
; game_personal_appoint_func+10F  j ...
sub	sp, 0Ch
mov	bl, [bp+arg_2]
sub	bh, bh
shl	bx, 1
mov	ax, [bx-314Eh]
mov	[bp+var_2], ax
mov	[bp+var_4], 2Eh	; '.'
mov	al, [bp+arg_2]

loc_161AC:				; CODE XREF: game_personal_appoint_func+7D  j		 /* DOS offset ---> D86:C */
mov	cl, 7
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
mov	dx, ax
shl	ax, 1

loc_161BA:				; CODE XREF: game_personal_appoint_func+74  j		 /* DOS offset ---> D87:A */
shl	ax, 1
shl	ax, 1
add	ax, dx
add	ax, 80		; y position of	starting general list
mov	[bp+var_6], ax
push	ax
mov	ax, 46		; x position of	starting general list
push	ax

loc_161CB:				; game_display_generals_list_x_y		 /* DOS offset ---> D88:B */
call	far ptr	3EFh:434h
add	sp, 4
mov	al, 7
mov	[bp+var_A], al

loc_161D8:				; CODE XREF: game_personal_appoint_func+98  j		 /* DOS offset ---> D89:8 */
mov	[bp+var_C], al

loc_161DB:				; CODE XREF: dseg:260FB  j dseg:26122  j ...		 /* DOS offset ---> D89:B */
mov	[bp+var_8], 0
test	byte_1357A, 1
jz	short loc_16201

loc_161E6:				; CODE XREF: game_personal_appoint_func+AD  j		 /* DOS offset ---> D8A:6 */
; dseg:261E3  j
push	[bp+var_2]
call	far ptr	542h:136h ; game_data_set_general_action_used
add	sp, 2

loc_161F1:				; CODE XREF: game_personal_appoint_func+8D  j		 /* DOS offset ---> D8B:1 */
or	ax, ax

loc_161F3:				; CODE XREF: dseg:261EF  j		 /* DOS offset ---> D8B:3 */
jz	short loc_16201
mov	[bp+var_A], 2
mov	[bp+var_C], 0
mov	[bp+var_8], 1

loc_16201:				; CODE XREF: game_display_generals_action_list+54  j		 /* DOS offset ---> D8C:1 */
; game_display_generals_action_list:loc_161F3  j	...
test	byte_1357A, 2
jz	short loc_16223
push	[bp+var_2]
call	far ptr	542h:7Eh ; s_549E
; nop, unknown

loc_16210:				; CODE XREF: dseg:261CD  j dseg:261D3  j ...		 /* DOS offset ---> D8D:0 */
add	sp, 2
or	ax, ax

loc_16215:				; CODE XREF: dseg:26670  p		 /* DOS offset ---> D8D:5 */
jnz	short loc_16223
mov	[bp+var_A], 3
mov	[bp+var_C], 0
mov	[bp+var_8], 2

loc_16223:				; CODE XREF: game_display_generals_action_list+76  j		 /* DOS offset ---> D8E:3 */
; game_display_generals_action_list:loc_16215  j	...
cmp	word_1CEA2, 0
jz	short loc_1624E
mov	ax, [bp+var_2]
add	ax, 1Ch
push	ax
mov	al, [bp+var_C]
sub	ah, ah
push	ax
mov	al, [bp+var_8]
push	ax

loc_1623B:				; CODE XREF: game_personal_appoint_func+10D  j		 /* DOS offset ---> D8F:B */
mov	al, [bp+arg_2]
inc	ax
push	ax
mov	ax, 36DDh
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
; nop, unknown
add	sp, 0Ah
jmp	short loc_1626C
;     ***************************************************************************

loc_1624E:				; CODE XREF: game_display_generals_action_list+98  j		 /* DOS offset ---> D90:E */
; game_personal_appoint_func+11F  j
mov	ax, [bp+var_2]
add	ax, 1Ch
push	ax
mov	al, [bp+var_A]
sub	ah, ah
push	ax
mov	al, [bp+arg_2]
inc	ax
push	ax
mov	ax, 36F4h
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
; nop, doesn't show the generals list
add	sp, 8

loc_1626C:				; CODE XREF: game_display_generals_action_list+BC  j		 /* DOS offset ---> D92:C */
cmp	[bp+arg_4], 5

loc_16270:				; CODE XREF: game_personal_appoint_func+141  j		 /* DOS offset ---> D93:0 */
jnz	short loc_16290
push	[bp+var_2]
call	far ptr	542h:1D8h ; game_data_check_if_home_province

loc_1627A:				; CODE XREF: game_personal_appoint_func+139  j		 /* DOS offset ---> D93:A */
add	sp, 2
or	ax, ax
jz	short loc_16290
mov	ax, 3704h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
; nop, unknown

loc_1628A:				; CODE XREF: game_personal_appoint_func+14A  j		 /* DOS offset ---> D94:A */
; game_personal_appoint_func+156  j ...
add	sp, 2
jmp	short loc_162DF
;     ***************************************************************************
nop

loc_16290:				; CODE XREF: game_display_generals_action_list:loc_16270  j		 /* DOS offset ---> D95:0 */
; game_display_generals_action_list+EF  j
cmp	[bp+arg_4], 0
jz	short loc_162DF
cmp	word_1CEA2, 0
jz	short near ptr word_162C4
mov	al, [bp+arg_4]
push	ax
push	[bp+var_2]
push	cs
call	near ptr s_6138	; nop, unknown

loc_162A8:				; CODE XREF: game_personal_appoint_func+17A  j		 /* DOS offset ---> D96:8 */
add	sp, 4
push	ax

loc_162AC:				; CODE XREF: game_personal_appoint_func+7F  j		 /* DOS offset ---> D96:C */
mov	al, [bp+var_C]

loc_162AF:				; CODE XREF: game_personal_appoint_func+3F  j		 /* DOS offset ---> D96:F */
sub	ah, ah
push	ax
mov	al, [bp+var_8]
push	ax
mov	ax, 370Ah
push	ax

loc_162BA:				; CODE XREF: game_personal_appoint_func+D8  j		 /* DOS offset ---> D97:A */
; game_personal_appoint_func+17F  j
call	far ptr	3EFh:6E8h ; nop, unknown
add	sp, 8

loc_162C2:				; CODE XREF: dseg:265E8  p		 /* DOS offset ---> D98:2 */
jmp	short loc_162DF
game_display_generals_action_list endp

;     ***************************************************************************
word_162C4	dw 468Ah		; CODE XREF: game_display_generals_action_list+10B  j
; DATA XREF: game_personal_recruit_func+111  r ...
db    8
;     ***************************************************************************
push	ax

loc_162C8:				; CODE XREF: game_personal_appoint_func+63  j		 /* DOS offset ---> D98:8 */
; game_personal_appoint_func+194  j
push	word ptr [bp-2]
push	cs

loc_162CC:		 /* DOS offset ---> D98:C */
call	near ptr s_6138
add	sp, 4
push	ax
mov	ax, 371Ah
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
; START	OF FUNCTION CHUNK FOR game_display_generals_action_list

loc_162DF:				; CODE XREF: game_display_generals_action_list+FD  j		 /* DOS offset ---> D99:F */
; game_display_generals_action_list+104  j ...
cmp	word ptr [bp+0Ah], 0
jz	short loc_16322
push	[bp+var_6]
mov	ax, [bp+var_4]
add	ax, 4
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 4

loc_162FA:				; CODE XREF: dseg:262C9  j		 /* DOS offset ---> D9B:A */
push	ax
call	far ptr	3EFh:458h
add	sp, 2
mov	bl, [bp+arg_2]
sub	bh, bh
shl	bx, 1

loc_1630A:				; CODE XREF: game_personal_recruit_func_result+37  j		 /* DOS offset ---> D9C:A */
cmp	word ptr [bx-3390h], 0

loc_1630F:				; CODE XREF: game_personal_recruit_func_result+3C  j		 /* DOS offset ---> D9C:F */
; dseg:262F8  j
jz	short loc_16316
mov	ax, 371Eh
jmp	short loc_16319
;     ***************************************************************************

loc_16316:				; CODE XREF: game_display_generals_action_list:loc_1630F  j		 /* DOS offset ---> D9D:6 */
; dseg:2669A  p
mov	ax, 3720h

loc_16319:				; CODE XREF: game_display_generals_action_list+184  j		 /* DOS offset ---> D9D:9 */
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2

loc_16322:				; CODE XREF: game_display_generals_action_list+153  j		 /* DOS offset ---> D9E:2 */
mov	ax, 7
push	ax

loc_16326:				; CODE XREF: game_personal_recruit_func_result+7  j		 /* DOS offset ---> D9E:6 */
call	far ptr	3EFh:458h
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_display_generals_action_list
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_display_generals_action_list_query_sub proc far
; CODE XREF: game_display_generals_action_list_query+2B  p

var_2		= byte ptr -2
arg_0		= byte ptr  6
arg_2		= byte ptr  8
arg_4		= word ptr  0Ah

push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:266h ; game_gfx_blk_bkgrnd_shape_y_pos_height
; clears the province and query	window area display
mov	al, [bp+arg_0]
dec	al
mov	[bp+var_2], al

loc_16343:				; CODE XREF: game_display_generals_action_list_query_sub+79  j		 /* DOS offset ---> DA0:3 */
mov	al, [bp+var_2]
mov	cl, 7
sub	ah, ah
div	cl
or	ah, ah
jnz	short loc_1637B

loc_16350:				; CODE XREF: game_personal_recruit_func_result+7B  j		 /* DOS offset ---> DA1:0 */
mov	ax, 373Ch

loc_16353:				; CODE XREF: game_personal_recruit_func_result+80  j		 /* DOS offset ---> DA1:3 */
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
; set #	General	text to	yellow
add	sp, 2
mov	bl, [bp+arg_2]
sub	bh, bh
shl	bx, 1
push	word ptr [bx+3756h]
call	far ptr	3EFh:6C0h ; system_execute_function
; nop, unknown but should be something about text color

loc_1636C:		 /* DOS offset ---> DA2:C */
add	sp, 2
mov	ax, 7
push	ax
call	far ptr	3EFh:458h ; s_4348
; nop, unknown exactly what it does
add	sp, 2

loc_1637B:				; CODE XREF: game_display_generals_action_list_query_sub+1E  j		 /* DOS offset ---> DA3:B */
push	[bp+arg_4]
mov	al, [bp+arg_2]
push	ax
mov	al, [bp+var_2]
push	ax
push	cs
call	near ptr game_display_generals_action_list
add	sp, 6
inc	[bp+var_2]
mov	bl, [bp+var_2]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-314Eh], 0
jz	short loc_163AB
mov	al, [bp+var_2]
mov	cl, 7
sub	ah, ah
div	cl

loc_163A7:				; CODE XREF: game_personal_search_query+35  j		 /* DOS offset ---> DA6:7 */
or	ah, ah
jnz	short loc_16343

loc_163AB:				; CODE XREF: game_display_generals_action_list_query_sub+6C  j		 /* DOS offset ---> DA6:B */
mov	al, [bp+var_2]
mov	sp, bp
pop	bp
retf
game_display_generals_action_list_query_sub endp


;     *************** S U B	R O U T	I N E     ***************************************


s_63B2		proc far		; CODE XREF: game_display_generals_action_list_query+16  p		 /* DOS offset ---> DA7:2 */
sub	al, al
push	ax
mov	ax, 222h
push	ax
mov	ax, 0CC70h
push	ax
call	far ptr	561h:0A0h ; s_56B0
;
add	sp, 6
retf
s_63B2		endp		 /* DOS offset ---> DA7:2 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_display_generals_action_list_query	proc far ; CODE	XREF: s_661C+B2  p

var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= byte ptr -8
var_6		= word ptr -6
var_4		= byte ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  6
arg_2		= byte ptr  8
arg_4		= byte ptr  0Ah
arg_6		= dword	ptr  0Ch
arg_A		= word ptr  10h

push	bp
mov	bp, sp

loc_163C9:				; CODE XREF: dseg:263C4  j dseg:26432  j		 /* DOS offset ---> DA8:9 */
sub	sp, 0Eh
cmp	[bp+arg_2], 7
jbe	short loc_163D6
sub	al, al
jmp	short loc_163D8
;     ***************************************************************************

loc_163D6:				; CODE XREF: game_display_generals_action_list_query+A  j		 /* DOS offset ---> DA9:6 */
mov	al, 1

loc_163D8:				; CODE XREF: game_display_generals_action_list_query+E  j		 /* DOS offset ---> DA9:8 */
mov	[bp+var_4], al
push	cs
call	near ptr s_63B2	; nop, unknown

loc_163DF:				; CODE XREF: game_personal_search_query+6C  j		 /* DOS offset ---> DA9:F */
mov	al, [bp+arg_4]
mov	byte_1357A, al
mov	ax, 1
push	ax
mov	al, [bp+arg_0]
push	ax

loc_163ED:				; CODE XREF: game_display_generals_action_list_query:loc_164C4  j		 /* DOS offset ---> DAA:D */
mov	al, 1

loc_163EF:				; CODE XREF: game_display_generals_action_list_query+106  j		 /* DOS offset ---> DAA:F */
push	ax
push	cs
call	near ptr game_display_generals_action_list_query_sub
add	sp, 6
mov	[bp+var_8], al

loc_163FA:				; CODE XREF: game_display_generals_action_list_query+BE  j		 /* DOS offset ---> DAB:A */
; game_display_generals_action_list_query+D7  j ...
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	[bp+arg_A]
call	[bp+arg_6]
add	sp, 2
mov	al, [bp+arg_2]
sub	ah, ah
push	ax
mov	al, [bp+var_4]
push	ax
mov	ax, 3764h
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
; call to display (1-#)	general	inquiry	text
; - effects hire, reassign and train data
add	sp, 6
cmp	[bp+var_4], 0
jnz	short loc_16448
mov	ax, word_13432
mov	[bp+var_A], ax
mov	ax, word_13434
mov	[bp+var_C], ax
mov	ax, 376Fh
push	ax

loc_16434:				; CODE XREF: game_personal_search_query+BB  j		 /* DOS offset ---> DAF:4 */
; dseg:263F2  j
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 2
mov	ax, [bp+var_A]

loc_1643F:				; CODE XREF: game_personal_search_query+C7  j		 /* DOS offset ---> DAF:F */
mov	word_13432, ax
mov	ax, [bp+var_C]
mov	word_13434, ax

loc_16448:				; CODE XREF: game_display_generals_action_list_query+5C  j		 /* DOS offset ---> DB0:8 */
mov	al, [bp+arg_2]

loc_1644B:				; CODE XREF: dseg:2643C  j		 /* DOS offset ---> DB0:B */
sub	ah, ah
push	ax
mov	al, [bp+var_4]
push	ax
call	far ptr	3EFh:998h ; game_input_query_func
add	sp, 4
mov	[bp+var_6], ax
or	ax, ax
jz	short loc_164AE
inc	ax
jz	short loc_164D0
mov	bx, [bp+var_6]
shl	bx, 1
mov	ax, [bx-3150h]
mov	[bp+var_2], ax
test	byte_1357A, 1
jz	short loc_16487
push	ax
call	far ptr	542h:136h ; game_data_set_general_action_used
add	sp, 2
or	ax, ax
jz	short loc_16487
jmp	loc_163FA
;     ***************************************************************************

loc_16487:				; CODE XREF: game_display_generals_action_list_query+AF  j		 /* DOS offset ---> DB4:7 */
; game_display_generals_action_list_query+BC  j
test	byte_1357A, 2
jz	short loc_164A0

loc_1648E:				; CODE XREF: game_personal_search_query+118  j		 /* DOS offset ---> DB4:E */
push	[bp+var_2]

loc_16491:				; CODE XREF: game_personal_search_query+11D  j		 /* DOS offset ---> DB5:1 */
call	far ptr	542h:7Eh ; s_549E
; nop, unknown
add	sp, 2
or	ax, ax
jnz	short loc_164A0
jmp	loc_163FA
;     ***************************************************************************

loc_164A0:				; CODE XREF: game_display_generals_action_list_query+C6  j		 /* DOS offset ---> DB6:0 */
; game_display_generals_action_list_query+D5  j ...
mov	word_13578, 1
mov	ax, [bp+var_2]
mov	sp, bp
pop	bp

locret_164AC:				; CODE XREF: game_personal_search_query+89  j
retf
;     ***************************************************************************
nop

loc_164AE:				; CODE XREF: game_display_generals_action_list_query+99  j		 /* DOS offset ---> DB6:E */
mov	ax, 1
push	ax
mov	al, [bp+arg_0]
push	ax
mov	bl, [bp+var_8]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-314Eh], 0

loc_164C2:				; CODE XREF: game_personal_search_query+14C  j		 /* DOS offset ---> DB8:2 */
jnz	short loc_164C7

loc_164C4:				; CODE XREF: dseg:263C6  j dseg:26434  j ...		 /* DOS offset ---> DB8:4 */
jmp	loc_163ED
;     ***************************************************************************

loc_164C7:				; CODE XREF: game_display_generals_action_list_query:loc_164C2  j		 /* DOS offset ---> DB8:7 */
mov	al, [bp+var_8]
inc	al
jmp	loc_163EF
;     ***************************************************************************
nop

loc_164D0:				; CODE XREF: game_display_generals_action_list_query+9C  j		 /* DOS offset ---> DB9:0 */
cmp	word_13578, 0
jnz	short loc_164DA
jmp	loc_163FA
;     ***************************************************************************

loc_164DA:				; CODE XREF: game_display_generals_action_list_query+10F  j		 /* DOS offset ---> DB9:A */
; game_personal_search_query+37  j ...
mov	word_13578, 1
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_display_generals_action_list_query	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_64E6		proc far		 /* DOS offset ---> DBA:6 */

arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 2
push	si
mov	bx, [bp+arg_0]

loc_164F0:				; CODE XREF: game_personal_search+7  j		 /* DOS offset ---> DBB:0 */
add	bx, 4
mov	al, [bx+2]
sub	ah, ah
push	ax
mov	al, [bx+1]
push	ax
mov	si, bx

loc_164FF:				; CODE XREF: game_personal_recruit_func+7B  p		 /* DOS offset ---> DBB:F */
call	far ptr	561h:19Ch ; math_max_function_x1_y1
add	sp, 4
push	ax

loc_16508:				; CODE XREF: game_personal_recruit_query+4A  j		 /* DOS offset ---> DBC:8 */
; game_personal_recruit_query+62  j ...
mov	al, [si]
sub	ah, ah
push	ax
call	far ptr	561h:19Ch ; math_max_function_x1_y1
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
s_64E6		endp		 /* DOS offset ---> DBA:6 */

;     ***************************************************************************

loc_1651A:				; CODE XREF: game_personal_recruit_query-FF5F  p		 /* DOS offset ---> DBD:A */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db    6
db  83h	;   *
db 0C3h	;   *
db    4
db  8Ah	;   *
db  47h	; G
db    2
db  2Ah	; *
db 0E4h	;   *
db  8Ah	;   *
db  4Fh	; O
db    1
db  2Ah	; *
db 0EDh	;   *
db    3
db 0C1h	;   *
db  8Ah	;   *
db  0Fh
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_personal_recruit_query

loc_16534:				; CODE XREF: game_personal_recruit_query+23  j		 /* DOS offset ---> DBF:4 */
add	ax, cx
mov	cx, 3
sub	dx, dx
div	cx
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_personal_recruit_query
;     ***************************************************************************
nop

loc_16542:				; CODE XREF: s_661C+CC  p		 /* DOS offset ---> DC0:2 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
unk_16546	db 0ECh	;   *		; CODE XREF: dseg:264D9  j dseg:264ED  j ...
db  0Ch
db  56h	; V
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  4Ah	; J
unk_1654E	db    0			; CODE XREF: game_personal_recruit_query+26  j
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db 0D8h	;   *
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0F6h	;   *
db  2Ah	; *
db 0C0h	;   *
db  88h	;   *
db  46h	; F
db 0F8h	;   *
db  88h	;   *
db  46h	; F
db 0F4h	;   *
db  38h	; 8
db  46h	; F
db    8
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_personal_recruit_query

loc_16566:				; CODE XREF: game_personal_recruit_query+29  j		 /* DOS offset ---> DC2:6 */
jz	short loc_165D8

loc_16568:				; CODE XREF: game_personal_recruit_query-FF37  j		 /* DOS offset ---> DC2:8 */
mov	bl, [bp+var_C]
sub	bh, bh
shl	bx, 1
mov	ax, [bx-314Eh]

loc_16573:		 /* DOS offset ---> DC3:3 */
mov	[bp+var_2], ax
mov	bx, ax

loc_16578:				; CODE XREF: game_personal_recruit_query+2E  j		 /* DOS offset ---> DC3:8 */
mov	si, [bp+var_A]
mov	ax, [si+10h]

loc_1657E:				; CODE XREF: game_personal_recruit_query+30  j		 /* DOS offset ---> DC3:E */
; game_personal_recruit_query+43  j ...
test	[bx+10h], ax
jnz	short loc_165D0
mov	ax, 64h	; 'd'
push	ax

loc_16587:		 /* DOS offset ---> DC4:7 */
mov	al, [bx+0Ch]
sub	ah, ah
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
push	ax
call	far ptr	561h:18Ah
add	sp, 4
push	[bp+var_2]
mov	si, ax
push	cs
call	loc_1651A

loc_165A6:				; CODE XREF: dseg:26572  j		 /* DOS offset ---> DC6:6 */
add	sp, 2

loc_165A9:				; CODE XREF: game_personal_recruit_func+1C  j		 /* DOS offset ---> DC6:9 */
shr	al, 1

loc_165AB:				; CODE XREF: game_personal_recruit_func+20  j		 /* DOS offset ---> DC6:B */
mov	cx, si

loc_165AD:				; CODE XREF: dseg:268D5  p		 /* DOS offset ---> DC6:D */
add	al, cl
mov	bx, [bp+var_2]
add	al, [bx+0Bh]
cmp	al, [bp+var_8]
jbe	short loc_165C2
mov	[bp+var_8], al
mov	ax, bx
mov	[bp+var_4], ax

loc_165C2:				; CODE XREF: game_personal_recruit_query-FF4A  j		 /* DOS offset ---> DC8:2 */
inc	[bp+var_C]
mov	al, [bp+arg_2]
cmp	[bp+var_C], al
jb	short loc_16568

loc_165CD:				; CODE XREF: game_personal_recruit_func+41  j		 /* DOS offset ---> DC8:D */
jmp	short loc_165D8
; END OF FUNCTION CHUNK	FOR game_personal_recruit_query
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_personal_recruit_query

loc_165D0:				; CODE XREF: game_personal_recruit_query-FF81  j		 /* DOS offset ---> DC9:0 */
mov	ax, bx
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_personal_recruit_query
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_personal_recruit_query

loc_165D8:				; CODE XREF: game_personal_recruit_query:loc_16566  j		 /* DOS offset ---> DC9:8 */
; game_personal_recruit_query:loc_165CD  j
mov	ax, [bp+var_4]
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_personal_recruit_query

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_65E0		proc far		; CODE XREF: s_661C+DC  p		 /* DOS offset ---> DCA:0 */

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 2
push	si
mov	bx, [bp+arg_0]
mov	ax, [bp+arg_2]
cmp	[bx+2],	ax
jz	short loc_16616
push	ax
push	word ptr [bx+2]
call	far ptr	59Dh:7Eh
add	sp, 4
mov	[bp+var_2], ax

loc_16601:				; CODE XREF: game_personal_recruit_func+75  j		 /* DOS offset ---> DCC:1 */
mov	bx, [bp+arg_2]
mov	ax, [bx]
mov	si, [bp+var_2]
mov	[si], ax
mov	si, [bp+arg_0]

loc_1660E:				; CODE XREF: dseg:265DA  j		 /* DOS offset ---> DCC:E */
; game_personal_recruit_func+83  j
mov	ax, [si+2]
mov	[bx], ax
mov	[si+2],	bx

loc_16616:				; CODE XREF: s_65E0+10  j		 /* DOS offset ---> DCD:6 */
pop	si
mov	sp, bp
pop	bp
retf
s_65E0		endp		 /* DOS offset ---> DCA:0 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_661C		proc far		 /* DOS offset ---> DCD:C */

var_8		= byte ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp

loc_1661D:				; CODE XREF: game_personal_recruit_func+8A  j		 /* DOS offset ---> DCD:D */
mov	bp, sp
sub	sp, 8
mov	bx, [bp+arg_0]
cmp	word ptr [bx+2], 0
jnz	short loc_1662E
jmp	loc_166FB
;     ***************************************************************************

loc_1662E:				; CODE XREF: s_661C+D  j		 /* DOS offset ---> DCE:E */
push	word ptr [bx+2]

loc_16631:				; CODE XREF: dseg:26630  j		 /* DOS offset ---> DCF:1 */
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_16640
jmp	loc_166FB
;     ***************************************************************************

loc_16640:				; CODE XREF: s_661C+1F  j		 /* DOS offset ---> DD0:0 */
mov	bx, [bp+arg_0]
push	word ptr [bx+2]

loc_16646:				; CODE XREF: game_personal_recruit_func+93  j		 /* DOS offset ---> DD0:6 */
call	far ptr	525h:158h
add	sp, 2
dec	al
jnz	short loc_16655

loc_16652:				; CODE XREF: game_personal_recruit_func+C5  j		 /* DOS offset ---> DD1:2 */
jmp	loc_166FB
;     ***************************************************************************

loc_16655:				; CODE XREF: s_661C+34  j		 /* DOS offset ---> DD1:5 */
mov	al, 1
push	ax
push	[bp+arg_0]
call	far ptr	59Dh:382h
add	sp, 4

loc_16663:				; CODE XREF: dseg:26658  j		 /* DOS offset ---> DD2:3 */
mov	[bp+var_8], al
push	[bp+arg_0]
call	far ptr	525h:4Ah
add	sp, 2
push	ax

loc_16672:				; CODE XREF: dseg:26687  j		 /* DOS offset ---> DD3:2 */
; game_personal_recruit_func+D9  j
call	far ptr	542h:0BAh

loc_16677:				; CODE XREF: dseg:2665B  j		 /* DOS offset ---> DD3:7 */
add	sp, 2
or	ax, ax
jz	short loc_166E0
push	[bp+arg_0]
call	far ptr	542h:0A8h

loc_16686:				; CODE XREF: game_personal_recruit_func+EC  j		 /* DOS offset ---> DD4:6 */
add	sp, 2

loc_16689:				; CODE XREF: dseg:2665F  j		 /* DOS offset ---> DD4:9 */
or	ax, ax
jnz	short loc_166E0
mov	ax, word_13536
mov	[bp+var_4], ax
or	ax, ax
jnz	short loc_166A3
mov	ax, [bp+arg_0]
cmp	word_13534, ax
jz	short loc_166A3

loc_166A0:				; CODE XREF: dseg:26661  j dseg:26676  j		 /* DOS offset ---> DD6:0 */
mov	word_13536, ax

loc_166A3:				; CODE XREF: s_661C+79  j s_661C+82  j		 /* DOS offset ---> DD6:3 */
push	[bp+arg_0]
call	far ptr	525h:64h
add	sp, 2
mov	byte ptr [bp+var_6], al

loc_166B1:				; CODE XREF: game_personal_recruit_func+126  j		 /* DOS offset ---> DD7:1 */
; dseg:2660B  j ...
mov	word_13578, 0
lea	ax, [bp+var_6]
push	ax

loc_166BB:				; CODE XREF: dseg:26908  p		 /* DOS offset ---> DD7:B */
mov	ax, 20h	; ' '

loc_166BE:				; CODE XREF: game_personal_recruit_func+131  j		 /* DOS offset ---> DD7:E */
mov	dx, 60Dh
push	dx
push	ax
sub	al, al
push	ax
mov	al, [bp+var_8]
push	ax

loc_166CA:				; CODE XREF: game_personal_recruit_func+134  j		 /* DOS offset ---> DD8:A */
mov	al, 5
push	ax
push	cs
call	near ptr game_display_generals_action_list_query
add	sp, 0Ch
mov	[bp+var_2], ax
mov	ax, [bp+var_4]
mov	word_13536, ax
jmp	short loc_166F1
;     ***************************************************************************
nop

loc_166E0:				; CODE XREF: s_661C+60  j s_661C+6F  j ...		 /* DOS offset ---> DDA:0 */
mov	al, [bp+var_8]
push	ax
push	[bp+arg_0]
push	cs
call	loc_16542
add	sp, 4
mov	[bp+var_2], ax

loc_166F1:				; CODE XREF: s_661C+C1  j		 /* DOS offset ---> DDB:1 */
push	[bp+var_2]
push	[bp+arg_0]
push	cs
call	near ptr s_65E0

loc_166FB:				; CODE XREF: s_661C+F  j	s_661C+21  j ...		 /* DOS offset ---> DDB:B */
mov	sp, bp
pop	bp
retf
s_661C		endp		 /* DOS offset ---> DCD:C */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_ruler_general_compatibility proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 2
mov	bx, [bp+arg_0]
mov	al, [bx+0Fh]
sub	ah, ah
mov	bx, [bp+arg_2]

loc_16711:				; CODE XREF: game_personal_recruit_func+180  j		 /* DOS offset ---> DDD:1 */
mov	cl, [bx+0Fh]
sub	ch, ch
sub	ax, cx
cbw
xor	al, ah
sub	al, ah

loc_1671D:				; CODE XREF: game_personal_recruit_func+18F  j		 /* DOS offset ---> DDD:D */
mov	sp, bp
pop	bp
retf
game_data_get_ruler_general_compatibility endp

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
; START	OF FUNCTION CHUNK FOR game_personal_recruit_func

loc_16728:				; CODE XREF: game_personal_recruit_func+192  j		 /* DOS offset ---> DDE:8 */
mov	[bp+var_2], 0C816h
mov	bx, [bp+arg_0]

loc_16730:				; CODE XREF: game_personal_recruit_func+187  j		 /* DOS offset ---> DDF:0 */
; game_personal_recruit_func+194  j ...
cmp	byte ptr [bx], 0
jz	short loc_1674F

loc_16735:				; CODE XREF: game_personal_recruit_func-FE3B  j		 /* DOS offset ---> DDF:5 */
cmp	byte ptr [bx], 20h ; ' '
jz	short loc_1674F
inc	[bp+arg_0]

loc_1673D:				; CODE XREF: game_personal_recruit_func+15E  j		 /* DOS offset ---> DDF:D */
mov	al, [bx]
mov	bx, [bp+var_2]

loc_16742:				; CODE XREF: dseg:26711  j		 /* DOS offset ---> DE0:2 */
inc	[bp+var_2]
mov	[bx], al
mov	bx, [bp+arg_0]

loc_1674A:				; CODE XREF: dseg:2692D  p		 /* DOS offset ---> DE0:A */
cmp	byte ptr [bx], 0
jnz	short loc_16735

loc_1674F:				; CODE XREF: game_personal_recruit_func-FE55  j		 /* DOS offset ---> DE0:F */
; game_personal_recruit_func-FE50  j
mov	bx, [bp+var_2]
mov	byte ptr [bx], 0

loc_16755:				; CODE XREF: game_personal_recruit_func+1BA  j		 /* DOS offset ---> DE1:5 */
mov	ax, 0C816h
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_personal_recruit_func
;     ***************************************************************************
push	bp
; START	OF FUNCTION CHUNK FOR game_personal_recruit_func

loc_1675D:				; CODE XREF: game_personal_recruit_func+1AF  j		 /* DOS offset ---> DE1:D */
mov	bp, sp
sub	sp, 2

loc_16762:				; CODE XREF: game_personal_recruit_func-FE18  j		 /* DOS offset ---> DE2:2 */
; game_personal_recruit_func+43  j ...
mov	bx, [bp+arg_0]
cmp	byte ptr [bx], 0
jz	short loc_16772
inc	[bp+arg_0]
cmp	byte ptr [bx], 20h ; ' '
jnz	short loc_16762

loc_16772:				; CODE XREF: game_personal_recruit_func-FE20  j		 /* DOS offset ---> DE3:2 */
mov	ax, [bp+arg_0]
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_personal_recruit_func
;     ***************************************************************************
nop

loc_1677A:				; CODE XREF: game_diplomacy_threaten_result-FF42  p		 /* DOS offset ---> DE3:A */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
unk_1677E	db 0ECh	;   *		; CODE XREF: dseg:26771  j
db    2
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_personal_recruit

loc_16780:				; CODE XREF: game_personal_recruit+D  j		 /* DOS offset ---> DE4:0 */
mov	byte ptr [bp+var_2], 0

loc_16784:				; CODE XREF: game_personal_recruit-FFD2  j		 /* DOS offset ---> DE4:4 */
mov	al, byte ptr [bp+var_2]
mov	bl, al
sub	bh, bh
mov	[bx-3572h], al
inc	byte ptr [bp+var_2]
cmp	byte ptr [bp+var_2], 6
jb	short loc_16784
mov	sp, bp

loc_1679A:				; CODE XREF: dseg:2678B  j		 /* DOS offset ---> DE5:A */
pop	bp
retf
;     ***************************************************************************

loc_1679C:				; CODE XREF: game_personal_recruit+29  j		 /* DOS offset ---> DE5:C */
; game_personal_recruit+74  j ...
push	bp
mov	bp, sp
sub	sp, 1Ch

loc_167A2:				; CODE XREF: dseg:26895  p		 /* DOS offset ---> DE6:2 */
mov	[bp+var_1A], 3608h

loc_167A7:				; CODE XREF: game_personal_recruit-FF86  j		 /* DOS offset ---> DE6:7 */
mov	bx, [bp+var_1A]
mov	ax, [bx]
mov	[bp+var_16], ax

loc_167AF:				; CODE XREF: game_personal_recruit-FFB0  j		 /* DOS offset ---> DE6:F */
mov	bx, [bp+var_16]
inc	[bp+var_16]
cmp	byte ptr [bx], 3Ah ; ':'
jnz	short loc_167AF
push	[bp+var_16]
lea	ax, [bp+var_14]

loc_167C0:				; CODE XREF: game_personal_recruit+53  j		 /* DOS offset ---> DE8:0 */
push	ax
call	far ptr	561h:0BEh
add	sp, 4
lea	ax, [bp+var_14]
push	ax
call	far ptr	0:2E8h
add	sp, 2
or	ax, ax
jz	short loc_1681D
add	[bp+var_1A], 2
cmp	[bp+var_1A], 361Ah
jb	short loc_167A7
mov	[bp+var_1C], 3608h
mov	bx, [bp+var_1C]
mov	ax, [bx]
mov	[bp+var_16], ax

loc_167F1:				; CODE XREF: game_personal_recruit-FF6E  j		 /* DOS offset ---> DEB:1 */
mov	bx, [bp+var_16]
inc	[bp+var_16]
cmp	byte ptr [bx], 3Ah ; ':'
jnz	short loc_167F1
push	[bp+var_16]
mov	bx, [bp+var_1C]
push	word ptr [bx]

loc_16804:				; CODE XREF: dseg:269B4  p		 /* DOS offset ---> DEC:4 */
; game_personal_recruit+31  j ...
call	far ptr	561h:0BEh
; END OF FUNCTION CHUNK	FOR game_personal_recruit
;     ***************************************************************************
db  83h	;   *
db 0C4h	;   *
db    4
db  83h	;   *
db  46h	; F
db 0E4h	;   *
db    2
db  81h	;   *
db  7Eh	; ~
db 0E4h	;   *
unk_16813	db  1Ah			; CODE XREF: dseg:26851  j dseg:2688F  j ...
db  36h	; 6
db  72h	; r
db 0D2h	;   *
db 0C7h	;   *
db    6
db  84h	;   *
db  37h	; 7
db    1
db    0
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_personal_recruit

loc_1681D:				; CODE XREF: game_personal_recruit-FF91  j		 /* DOS offset ---> DED:D */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_personal_recruit
;     ***************************************************************************
nop

loc_16822:				; CODE XREF: game_personal_recruit+F5  j		 /* DOS offset ---> DEE:2 */
push	word ptr loc_1CB9E
call	far ptr	0:248h

loc_1682B:				; CODE XREF: dseg:26828  j		 /* DOS offset ---> DEE:B */
add	sp, 2
push	word_1CC6C
; START	OF FUNCTION CHUNK FOR game_personal_recruit

loc_16832:				; CODE XREF: game_personal_recruit+A6  j		 /* DOS offset ---> DEF:2 */
call	far ptr	0:248h
add	sp, 2
push	word_1CB6E
call	far ptr	0:248h
add	sp, 2
push	word ptr loc_1D480
call	far ptr	0:248h
add	sp, 2
retf
; END OF FUNCTION CHUNK	FOR game_personal_recruit
;     ***************************************************************************
nop

loc_16854:				; CODE XREF: game_diplomacy_threaten_result:loc_16A2E  p		 /* DOS offset ---> DF1:4 */
mov	ax, 3598h
;     ***************************************************************************
db  50h	; P
db  9Ah	;   *
db    6
db    0
db 0A3h	;   *
db    6
db  83h	;   *
db 0C4h	;   *
db    2
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_personal_recruit

loc_16860:				; CODE XREF: game_personal_recruit+DF  j		 /* DOS offset ---> DF2:0 */
; game_personal_recruit+F0  j
mov	word ptr loc_1CB9E, ax
mov	ax, 35D0h

loc_16866:				; CODE XREF: game_personal_recruit+B7  j		 /* DOS offset ---> DF2:6 */
push	ax
call	far ptr	6A3h:6
add	sp, 2
mov	word_1CC6C, ax
mov	ax, 35A6h
push	ax
call	far ptr	6A3h:6
add	sp, 2
mov	word_1CB6E, ax
mov	ax, 35B4h
push	ax

loc_16885:				; CODE XREF: game_personal_recruit+55  j		 /* DOS offset ---> DF4:5 */
; game_personal_recruit+115  j
call	far ptr	6A3h:6
add	sp, 2
mov	word ptr loc_1D480, ax
retf
; END OF FUNCTION CHUNK	FOR game_personal_recruit
;     ***************************************************************************
nop

loc_16892:				; CODE XREF: game_personal_func:loc_168FC  p		 /* DOS offset ---> DF5:2 */
; game_personal_func:loc_1691E  p ...
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  9Ah	;   *
db 0B3h	;   *
db  15h
db    0
db    0
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  9Ah	;   *
db 0E6h	;   *
db    0
db 0B5h	;   *
unk_168A2	db    4			; CODE XREF: dseg:2689D  j
db  8Bh	;   *
db 0E5h	;   *
db 0B8h	;   *
db  86h	;   *
db  37h	; 7
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  8Bh	;   *
db 0E5h	;   *
db  83h	;   *
db  7Eh	; ~
db    8
db    0
db  74h	; t
db    6
db 0B8h	;   *
db  93h	;   *
db  37h	; 7
db 0EBh	;   *
db    4
;     ***************************************************************************
nop
mov	ax, 37A0h	; CODE XREF: dseg:2686B  j dseg:2687C  j
push	ax
call	far ptr	3EFh:6C0h
mov	sp, bp
push	word ptr [bp+6]

loc_168CA:				; CODE XREF: game_personal_func+32  j		 /* DOS offset ---> DF8:A */
call	far ptr	3EFh:6C0h
mov	sp, bp
call	far ptr	3EFh:79Ah
call	far ptr	0:3689h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_168E0:				; CODE XREF: dseg:268DD  j		 /* DOS offset ---> DFA:0 */
mov	ax, 2ADh
push	ax

loc_168E4:				; CODE XREF: dseg:268C3  j		 /* DOS offset ---> DFA:4 */
call	far ptr	0:125h
add	sp, 2
mov	word_1D47E, ax
or	ax, ax
jnz	short loc_16902
mov	ax, 1
push	ax
mov	ax, 37ADh
push	ax
push	cs
; START	OF FUNCTION CHUNK FOR game_personal_func

loc_168FC:				; CODE XREF: game_personal_func+5E  j		 /* DOS offset ---> DFB:C */
call	loc_16892
add	sp, 4

loc_16902:				; CODE XREF: dseg:68F1  j		 /* DOS offset ---> DFC:2 */
mov	ax, 190h
push	ax

loc_16906:				; CODE XREF: game_personal_func+55  j		 /* DOS offset ---> DFC:6 */
call	far ptr	0:125h
add	sp, 2
mov	word_1D47C, ax
or	ax, ax
jnz	short loc_16924
mov	ax, 1
push	ax

loc_16919:				; CODE XREF: dseg:268FD  j		 /* DOS offset ---> DFD:9 */
mov	ax, 37B7h
push	ax
push	cs

loc_1691E:				; CODE XREF: game_personal_func+83  j		 /* DOS offset ---> DFD:E */
call	loc_16892
add	sp, 4

loc_16924:				; CODE XREF: game_personal_func-FF7B  j		 /* DOS offset ---> DFE:4 */
mov	ax, 2F4h
push	ax

loc_16928:				; CODE XREF: game_personal_func+6B  j		 /* DOS offset ---> DFE:8 */
; game_personal_func+79  j ...
call	far ptr	0:125h
add	sp, 2

loc_16930:		 /* DOS offset ---> DFF:0 */
mov	word_1CEA8, ax

loc_16933:				; CODE XREF: dseg:2691F  j		 /* DOS offset ---> DFF:3 */
or	ax, ax
jnz	short loc_16946
mov	ax, 1
push	ax
mov	ax, 37BEh
push	ax
push	cs
call	loc_16892

loc_16943:				; CODE XREF: game_personal_func+A9  j		 /* DOS offset ---> E00:3 */
add	sp, 4

loc_16946:				; CODE XREF: game_personal_func-FF59  j		 /* DOS offset ---> E00:6 */
mov	ax, 54h	; 'T'
push	ax
call	far ptr	0:125h
add	sp, 2
mov	word_1CE98, ax
or	ax, ax
jnz	short loc_16968
mov	ax, 1
push	ax
mov	ax, 37C5h
push	ax
push	cs
call	loc_16892
add	sp, 4

loc_16968:				; CODE XREF: game_personal_func-FF37  j		 /* DOS offset ---> E02:8 */
sub	ax, ax
push	ax
mov	ax, 31F8h
cwd
push	dx
push	ax

loc_16971:		 /* DOS offset ---> E03:1 */
push	word ptr loc_1CB9E
call	far ptr	0:2CCh

loc_1697A:				; CODE XREF: dseg:2682A  j		 /* DOS offset ---> E03:A */
add	sp, 8
mov	ax, 540h
push	ax
sub	ax, ax
push	ax
push	word_1CE98
push	word ptr loc_1CB9E

loc_1698C:				; CODE XREF: game_diplomacy_threaten_result+14  j		 /* DOS offset ---> E04:C */
call	far ptr	0:277h
add	sp, 8
mov	ax, 42h	; 'B'
push	ax
call	far ptr	0:125h
add	sp, 2
mov	word ptr loc_1CA60, ax
or	ax, ax
jnz	short loc_169B6
mov	ax, 1
push	ax
mov	ax, 37CFh
push	ax
push	cs
call	loc_16892
add	sp, 4

loc_169B6:				; CODE XREF: game_personal_func-FEE9  j		 /* DOS offset ---> E07:6 */
mov	ax, 414h
push	ax
sub	ax, ax
push	ax

loc_169BD:				; CODE XREF: dseg:269A4  j dseg:269A9  j		 /* DOS offset ---> E07:D */
push	word ptr loc_1CA60

loc_169C1:				; CODE XREF: dseg:273A1  p		 /* DOS offset ---> E08:1 */
push	word ptr loc_1CB9E
call	far ptr	0:277h

loc_169CA:				; CODE XREF: game_diplomacy_threaten_result+51  j		 /* DOS offset ---> E08:A */
add	sp, 8
mov	ax, 800h
push	ax
call	far ptr	0:125h
add	sp, 2
mov	word_1C9FC, ax
or	ax, ax
jnz	short locret_169EF
mov	ax, 1
push	ax
mov	ax, 37D6h
push	ax
push	cs
call	loc_16892
add	sp, 4

locret_169EF:				; CODE XREF: game_personal_func-FEB0  j
retf
; END OF FUNCTION CHUNK	FOR game_personal_func
;     ***************************************************************************

loc_169F0:				; CODE XREF: dseg:269D1  j		 /* DOS offset ---> E0B:0 */
mov	ax, 2
mov	cx, 2DB9h
push	cx
push	ax
call	far ptr	0:349Bh

loc_169FD:				; CODE XREF: dseg:269EE  j		 /* DOS offset ---> E0B:D */
add	sp, 4
; START	OF FUNCTION CHUNK FOR game_diplomacy_threaten_result

loc_16A00:				; CODE XREF: game_diplomacy_threaten_result+87  j		 /* DOS offset ---> E0C:0 */
or	ax, ax
jnz	short loc_16A07
mov	word_1352C, ax

loc_16A07:				; CODE XREF: game_diplomacy_threaten_result-FF72  j		 /* DOS offset ---> E0C:7 */
mov	options_value, 5Fh ; '_'

loc_16A0C:				; CODE XREF: dseg:26A70  j		 /* DOS offset ---> E0C:C */
mov	message_wait_value, 5
call	far ptr	0:15B3h

loc_16A16:				; CODE XREF: game_diplomacy_threaten_result+93  j		 /* DOS offset ---> E0D:6 */
sub	ax, ax
push	ax
call	far ptr	4B5h:0E6h
add	sp, 2
mov	ax, 1
push	ax
call	far ptr	4B5h:0E6h

loc_16A2A:				; CODE XREF: game_diplomacy_threaten_result+B0  j		 /* DOS offset ---> E0E:A */
add	sp, 2
push	cs

loc_16A2E:				; CODE XREF: game_diplomacy_threaten_result+B5  j		 /* DOS offset ---> E0E:E */
call	loc_16854
push	cs
call	loc_1677A
retf
; END OF FUNCTION CHUNK	FOR game_diplomacy_threaten_result

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_6A36		proc far		 /* DOS offset ---> E0F:6 */

arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 2
sub	ax, ax
push	ax
push	[bp+arg_0]

loc_16A42:				; system_file_open_with_handle		 /* DOS offset ---> E10:2 */
call	far ptr	0:234h
mov	sp, bp
pop	bp
retf
s_6A36		endp		 /* DOS offset ---> E0F:6 */

;     ***************************************************************************
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2

loc_16A52:				; CODE XREF: dseg:26A3D  j		 /* DOS offset ---> E11:2 */
mov	ax, 2
push	ax
push	word ptr [bp+6]
call	far ptr	0:234h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_16A62:				; CODE XREF: dseg:6A7D  p dseg:6A88  p ...		 /* DOS offset ---> E12:2 */
cmp	byte ptr loc_1CB65+2, 0FFh
jz	short loc_16A70

loc_16A69:				; CODE XREF: game_diplomacy_threaten_result+96  j		 /* DOS offset ---> E12:9 */
call	far ptr	818h:0A02h
retf
;     ***************************************************************************
nop

loc_16A70:				; CODE XREF: dseg:6A67  j dseg:26A0B  j		 /* DOS offset ---> E13:0 */
call	far ptr	4B5h:364h
call	far ptr	4B5h:358h
retf
;     ***************************************************************************
nop
push	cs
call	loc_16A62

locret_16A80:				; CODE XREF: dseg:26DC7  p
retf
;     ***************************************************************************
nop
call	loc_22890+2
push	cs
call	loc_16A62
retf
;     ***************************************************************************

loc_16A8C:				; CODE XREF: game_diplomacy_marriage_result-FEF8  p		 /* DOS offset ---> E14:C */
push	bp
;     ***************************************************************************
db  8Bh	;   *
unk_16A8E	db 0ECh	;   *		; CODE XREF: game_diplomacy_threaten_result+113  j
db  83h	;   *
db 0ECh	;   *
unk_16A91	db    4			; CODE XREF: game_diplomacy_threaten_result+118  j
db  2Bh	; +
db 0C0h	;   *
db 0A3h	;   *
db  36h	; 6
db  35h	; 5
db 0A3h	;   *
db  34h	; 4
db  35h	; 5
db  89h	;   *
db  46h	; F
db 0FCh	;   *
;     ***************************************************************************

loc_16A9D:				; CODE XREF: dseg:26A98  j dseg:26B4B  j		 /* DOS offset ---> E15:D */
mov	word_1CA9A, 2DC4h
mov	byte ptr [bp-2], 0
; START	OF FUNCTION CHUNK FOR game_diplomacy_threaten

loc_16AA7:				; CODE XREF: game_diplomacy_threaten:loc_16B0C  j		 /* DOS offset ---> E16:7 */
; game_diplomacy_threaten_result+16  j ...
mov	bx, word_1CA9A
cmp	byte ptr [bx+11h], 0FFh
jz	short loc_16B00
test	byte ptr [bx+12h], 10h
jz	short loc_16AFC
call	far ptr	57Ch:1E4h
mov	word_13570, 0

loc_16AC2:				; CODE XREF: game_diplomacy_threaten+D  j		 /* DOS offset ---> E18:2 */
call	far ptr	0:15B3h
mov	al, byte ptr [bp+var_2]
sub	ah, ah
inc	ax
push	ax
mov	ax, 37E2h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, 1

loc_16ADD:				; CODE XREF: game_diplomacy_threaten+5B  j		 /* DOS offset ---> E19:D */
mov	[bp+var_4], ax
push	ax
call	far ptr	57Ch:96h
add	sp, 2
call	loc_22890+2

loc_16AEE:				; CODE XREF: game_diplomacy_threaten+2F  j		 /* DOS offset ---> E1A:E */
cmp	byte ptr loc_1CB65+2, 0FFh
jz	short loc_16B00
call	far ptr	818h:0A02h
jmp	short loc_16B00
;     ***************************************************************************

loc_16AFC:				; CODE XREF: game_diplomacy_threaten-FFF7  j		 /* DOS offset ---> E1B:C */
or	byte ptr [bx+12h], 10h

loc_16B00:				; CODE XREF: game_diplomacy_threaten-FFFD  j		 /* DOS offset ---> E1C:0 */
; game_diplomacy_threaten-FFB9  j ...
add	word_1CA9A, 23h	; '#'
inc	byte ptr [bp+var_2]

loc_16B08:				; CODE XREF: game_diplomacy_threaten+4D  j		 /* DOS offset ---> E1C:8 */
cmp	byte ptr [bp+var_2], 29h ; ')'

loc_16B0C:				; CODE XREF: dseg:26AEE  j		 /* DOS offset ---> E1C:C */
jb	short loc_16AA7
cmp	[bp+var_4], 0
jz	short loc_16B3F
mov	al, 40h	; '@'
push	ax
call	far ptr	6EBh:3Ah
add	sp, 2

loc_16B1F:				; CODE XREF: game_diplomacy_threaten:loc_16B26  j		 /* DOS offset ---> E1D:F */
call	far ptr	6EBh:64h
or	ax, ax

loc_16B26:				; CODE XREF: game_diplomacy_threaten+6F  j		 /* DOS offset ---> E1E:6 */
jnz	short loc_16B1F
mov	al, 2
push	ax
call	far ptr	6EBh:96h
add	sp, 2
cmp	word_13570, 0
jnz	short loc_16B3F

loc_16B3A:				; CODE XREF: dseg:26AC2  j dseg:26AE6  j ...		 /* DOS offset ---> E1F:A */
call	far ptr	4B5h:364h

loc_16B3F:				; CODE XREF: game_diplomacy_threaten-FF9A  j		 /* DOS offset ---> E1F:F */
; game_diplomacy_threaten-FF74  j
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_diplomacy_threaten
;     ***************************************************************************
nop

loc_16B44:				; CODE XREF: game_diplomacy_gift_query_result-FEFD  p		 /* DOS offset ---> E20:4 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  9Ah	;   *
db  2Fh	; /
db    0
db    0
unk_16B4E	db    0			; CODE XREF: dseg:26A9A  j dseg:26B49  j
db 0B8h	;   *
db  8Ah	;   *
db  35h	; 5
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    2
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  59h	; Y
db 0B8h	;   *
db  68h	; h
db  0Bh
db  50h	; P
db  9Ah	;   *
db  25h	; %
db    1
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db    2
db 0A3h	;   *
db 0F4h	;   *
db 0CAh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db  10h
db 0B8h	;   *
db    1
db    0
db  50h	; P
db 0B8h	;   *
unk_16B77	db  0Fh			; CODE XREF: game_diplomacy_cancel_alliance+1D  j
db  38h	; 8
db  50h	; P
db  9Ah	;   *
db  22h	; "
db    1
db  77h	; w
db    6
db  83h	;   *
db 0C4h	;   *
db    4
db 0B8h	;   *
db  8Ah	;   *
db  35h	; 5
db  50h	; P
db  0Eh
db 0E8h	;   *
db 0ACh	;   *
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db 0B8h	;   *
db  7Bh	; {
db 0B6h	;   *
db  50h	; P
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db 0FFh
db  36h	; 6
db 0F4h	;   *
db 0CAh	;   *
db 0FFh
db  76h	; v
unk_16B9D	db 0FEh	;   *		; CODE XREF: game_diplomacy_gift_query_result+14  j
db  9Ah	;   *
db  77h	; w
db    2
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db    8
db 0FFh
db  76h	; v
db 0FEh	;   *
db  9Ah	;   *
db  48h	; H
db    2
db    0
db    0
;     ***************************************************************************

loc_16BAE:				; CODE XREF: dseg:26B80  j dseg:26B8B  j		 /* DOS offset ---> E26:E */
add	sp, 2
mov	ax, 1

loc_16BB4:				; CODE XREF: dseg:26BA2  j dseg:26BAC  j		 /* DOS offset ---> E27:4 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************

loc_16BBE:				; CODE XREF: game_diplomacy_marriage_result-FF12  p		 /* DOS offset ---> E27:E */
; dseg:26B52  j
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db 0B8h	;   *
db  16h
unk_16BC6	db  38h	; 8		; CODE XREF: dseg:26DB5  p
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
unk_16BCC	db    3			; CODE XREF: game_diplomacy_gift_query_result+43  j
db  83h	;   *
db 0C4h	;   *
db    2
db  0Eh
db 0E8h	;   *
db  70h	; p
db 0FFh
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db 0BBh	;   *
db    0
db  50h	; P
db  9Ah	;   *
db 0E6h	;   *
db    0
db 0B5h	;   *
db    4
db  83h	;   *
db 0C4h	;   *
db    2
db  9Ah	;   *
db 0B3h	;   *
db  15h
db    0
db    0
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  9Ah	;   *
db 0E6h	;   *
db    0
db 0B5h	;   *
db    4
db  83h	;   *
db 0C4h	;   *
db    2
db 0C7h	;   *
db  46h	; F
db 0FEh	;   *
db    1
db    0
db 0B8h	;   *
db  50h	; P
db    0
db  50h	; P
db 0B8h	;   *
db  14h
db    0
db  50h	; P
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0F6h	;   *
unk_16C0B	db    6			; CODE XREF: dseg:26C77  j
db 0A2h	;   *
db 0CEh	;   *
db    1
db  74h	; t
db    5
db 0B8h	;   *
db  23h	; #
db  38h	; 8
db 0EBh	;   *
unk_16C15	db    3			; CODE XREF: game_diplomacy_gift_query_result+88  j
db 0B8h	;   *
db  4Eh	; N
db  38h	; 8
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_diplomacy_gift_query_result

loc_16C1F:				; CODE XREF: game_diplomacy_gift_query_result+8F  j		 /* DOS offset ---> E2D:F */
add	sp, 2
call	far ptr	3EFh:79Ah

loc_16C27:				; CODE XREF: game_diplomacy_gift_query_result-FEF5  j		 /* DOS offset ---> E2E:7 */
cmp	[bp+var_2], 0

loc_16C2B:				; CODE XREF: game_diplomacy_gift_query_result+A2  j		 /* DOS offset ---> E2E:B */
jnz	short loc_16C86
mov	ax, 6Ch	; 'l'
push	ax
mov	ax, 1Fh
push	ax
call	far ptr	3EFh:434h

loc_16C3A:				; CODE XREF: game_diplomacy_gift_query_result+B1  j		 /* DOS offset ---> E2F:A */
add	sp, 4

loc_16C3D:				; CODE XREF: game_diplomacy_gift_query_result+B8  j		 /* DOS offset ---> E2F:D */
test	byte ptr word_1CEA2, 1
jz	short loc_16C4A

loc_16C44:				; CODE XREF: game_diplomacy_gift_query_result+AE  j		 /* DOS offset ---> E30:4 */
mov	ax, 387Fh
jmp	short loc_16C4D
; END OF FUNCTION CHUNK	FOR game_diplomacy_gift_query_result
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_diplomacy_gift_query_result

loc_16C4A:				; CODE XREF: game_diplomacy_gift_query_result-FF42  j		 /* DOS offset ---> E30:A */
mov	ax, 388Dh

loc_16C4D:				; CODE XREF: game_diplomacy_gift_query_result-FF3D  j		 /* DOS offset ---> E30:D */
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
sub	ax, ax
push	ax
mov	ax, 10h
push	ax
mov	ax, 12h
push	ax
mov	ax, 6Ch	; 'l'
push	ax
mov	ax, 1Fh
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer

loc_16C6E:				; CODE XREF: dseg:26C2D  j dseg:26C4E  j		 /* DOS offset ---> E32:E */
add	sp, 0Ah
mov	ax, 4Ch	; 'L'
push	ax
mov	ax, 43h	; 'C'
push	ax

loc_16C79:				; CODE XREF: dseg:26CD3  j		 /* DOS offset ---> E33:9 */
call	far ptr	3EFh:434h

loc_16C7E:				; CODE XREF: game_diplomacy_gift_query_result+CE  j		 /* DOS offset ---> E33:E */
add	sp, 4
call	far ptr	3EFh:79Ah

loc_16C86:				; CODE XREF: game_diplomacy_gift_query_result:loc_16C2B  j		 /* DOS offset ---> E34:6 */
push	cs
call	loc_16B44
mov	[bp+var_2], ax
or	ax, ax
jz	short loc_16C27
call	far ptr	0:15B3h
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_diplomacy_gift_query_result
;     ***************************************************************************

loc_16C9A:				; CODE XREF: game_diplomacy_gift_query_result:loc_16CED  p		 /* DOS offset ---> E35:A */
; game_diplomacy_gift_query_result-FDFB  p
call	far ptr	0:2Fh
;     ***************************************************************************
db 0B8h	;   *
db 0A6h	;   *
db  35h	; 5
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    2
unk_16CA6	db    0			; CODE XREF: game_diplomacy_gift_query_result+F8  j
db    0
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  15h
db 0B8h	;   *
db  98h	;   *
db  35h	; 5
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    2
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db    5
db 0B8h	;   *
db    1
db    0
;     ***************************************************************************

locret_16CC2:				; CODE XREF: game_diplomacy_gift_query_result+B3  j
retf
;     ***************************************************************************
nop
sub	ax, ax
retf
;     ***************************************************************************
nop

loc_16CC8:				; CODE XREF: game_diplomacy_marriage_result-FF0E  p		 /* DOS offset ---> E38:8 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
unk_16CCC	db 0ECh	;   *		; CODE XREF: dseg:26CB2  j
db    2
db 0B8h	;   *
db 0A3h	;   *
db  38h	; 8
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
unk_16CD8	db 0C4h	;   *		; CODE XREF: dseg:26CCA  j
db    2
db  2Ah	; *
db 0C0h	;   *
db  50h	; P
db  9Ah	;   *
db    9
db    1
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db    2
db  0Ah
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db 0ACh	;   *
db    0
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_diplomacy_gift_query_result

loc_16CEC:				; CODE XREF: game_diplomacy_gift_query_result+161  j		 /* DOS offset ---> E3A:C */
push	cs

loc_16CED:				; CODE XREF: game_diplomacy_gift_query_result+166  j		 /* DOS offset ---> E3A:D */
call	loc_16C9A
or	ax, ax
jz	short loc_16CF7
jmp	loc_16D98
;     ***************************************************************************

loc_16CF7:				; CODE XREF: game_diplomacy_gift_query_result-FE92  j		 /* DOS offset ---> E3B:7 */
mov	[bp+var_2], 1
mov	ax, 50h	; 'P'
push	ax
mov	ax, 14h
push	ax
call	far ptr	3EFh:434h
add	sp, 4
test	byte ptr word_1CEA2, 1
jz	short loc_16D18

loc_16D13:				; CODE XREF: game_diplomacy_gift_query_result+BA  j		 /* DOS offset ---> E3D:3 */
mov	ax, 38B0h
jmp	short loc_16D1B
;     ***************************************************************************

loc_16D18:				; CODE XREF: game_diplomacy_gift_query_result-FE73  j		 /* DOS offset ---> E3D:8 */
mov	ax, 38DBh

loc_16D1B:				; CODE XREF: game_diplomacy_gift_query_result-FE6E  j		 /* DOS offset ---> E3D:B */
push	ax

loc_16D1C:				; CODE XREF: game_diplomacy_gift_query_result+BD  j		 /* DOS offset ---> E3D:C */
call	far ptr	3EFh:6C0h

loc_16D21:				; CODE XREF: game_diplomacy_gift_query_result+16  j		 /* DOS offset ---> E3E:1 */
; game_diplomacy_gift_query_result+45  j	...
add	sp, 2
call	far ptr	3EFh:79Ah

loc_16D29:				; CODE XREF: game_diplomacy_gift_query_result-FDF3  j		 /* DOS offset ---> E3E:9 */
cmp	[bp+var_2], 0
jnz	short loc_16D88
mov	ax, 6Ch	; 'l'
push	ax
mov	ax, 1Fh
push	ax
call	far ptr	3EFh:434h
add	sp, 4

loc_16D3F:				; CODE XREF: game_diplomacy_gift+D  j		 /* DOS offset ---> E3F:F */
; dseg:26D08  j
test	byte ptr word_1CEA2, 1
jz	short loc_16D4C

loc_16D46:				; CODE XREF: dseg:26D21  j dseg:26D2B  j ...		 /* DOS offset ---> E40:6 */
mov	ax, 390Ch
jmp	short loc_16D4F
; END OF FUNCTION CHUNK	FOR game_diplomacy_gift_query_result
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_diplomacy_gift_query_result

loc_16D4C:				; CODE XREF: game_diplomacy_gift_query_result-FE40  j		 /* DOS offset ---> E40:C */
mov	ax, 391Ah

loc_16D4F:				; CODE XREF: game_diplomacy_gift_query_result-FE3B  j		 /* DOS offset ---> E40:F */
push	ax

loc_16D50:				; CODE XREF: dseg:26CD5  j		 /* DOS offset ---> E41:0 */
call	far ptr	3EFh:6C0h

loc_16D55:				; CODE XREF: game_diplomacy_gift+4D  j		 /* DOS offset ---> E41:5 */
add	sp, 2

loc_16D58:				; CODE XREF: dseg:26E2E  p		 /* DOS offset ---> E41:8 */
sub	ax, ax
; END OF FUNCTION CHUNK	FOR game_diplomacy_gift_query_result
;     ***************************************************************************
db  50h	; P
db 0B8h	;   *
db  10h
db    0
db  50h	; P
db 0B8h	;   *
db  12h
db    0
db  50h	; P
db 0B8h	;   *
db  6Ch	; l
db    0
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_diplomacy_gift

loc_16D66:				; CODE XREF: game_diplomacy_gift+2C  j		 /* DOS offset ---> E42:6 */
push	ax
mov	ax, 1Fh
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 4Ch	; 'L'
push	ax

loc_16D77:				; CODE XREF: game_diplomacy_gift+46  j		 /* DOS offset ---> E43:7 */
mov	ax, 43h	; 'C'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
call	far ptr	3EFh:79Ah
; END OF FUNCTION CHUNK	FOR game_diplomacy_gift
; START	OF FUNCTION CHUNK FOR game_diplomacy_gift_query_result

loc_16D88:				; CODE XREF: game_diplomacy_gift_query_result-FE57  j		 /* DOS offset ---> E44:8 */
push	cs
call	loc_16C9A
mov	[bp+var_2], ax
or	ax, ax
jz	short loc_16D29

loc_16D93:				; CODE XREF: game_diplomacy_gift+5F  j		 /* DOS offset ---> E45:3 */
call	far ptr	0:15B3h

loc_16D98:				; CODE XREF: game_diplomacy_gift_query_result-FE90  j		 /* DOS offset ---> E45:8 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_diplomacy_gift_query_result
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Eh
mov	byte ptr [bp-0Dh], 19h

loc_16DA6:				; CODE XREF: dseg:26D77  j		 /* DOS offset ---> E46:6 */
lea	ax, [bp-0Eh]
push	ax
push	ax
mov	cx, 21h	; '!'
push	cx

loc_16DAF:				; CODE XREF: game_diplomacy_marriage_result+D  j		 /* DOS offset ---> E46:F */
call	far ptr	0:3750h
mov	al, [bp-0Eh]
mov	byte_1CC6E, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_16DBE:				; CODE XREF: game_diplomacy_marriage_result+21  j		 /* DOS offset ---> E47:E */
push	bp

loc_16DBF:				; CODE XREF: dseg:26DAB  j		 /* DOS offset ---> E47:F */
mov	bp, sp
sub	sp, 2
sub	al, al
push	ax

loc_16DC7:		 /* DOS offset ---> E48:7 */
call	far ptr	0:109h
add	sp, 2
or	al, al

loc_16DD1:				; CODE XREF: dseg:26D63  j dseg:26DE6  j		 /* DOS offset ---> E49:1 */
jnz	short loc_16DF8
mov	bx, 3608h
mov	[bp-2],	bx

loc_16DD9:		 /* DOS offset ---> E49:9 */
cmp	word ptr [bx], 0
jz	short loc_16E16

loc_16DDE:				; CODE XREF: dseg:6DF1  j		 /* DOS offset ---> E49:E */
mov	al, byte_1CC6E
add	al, 41h	; 'A'
mov	bx, [bx]
mov	[bx], al
add	word ptr [bp-2], 2
mov	bx, [bp-2]
cmp	word ptr [bx], 0
jnz	short loc_16DDE
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_16DF8:				; CODE XREF: dseg:loc_16DD1  j		 /* DOS offset ---> E4B:8 */
mov	bx, 3608h
mov	[bp-2],	bx

loc_16DFE:				; CODE XREF: game_diplomacy_marriage_result+62  j		 /* DOS offset ---> E4B:E */
cmp	word ptr [bx], 0
jz	short loc_16E16

loc_16E03:				; CODE XREF: dseg:loc_16E14  j		 /* DOS offset ---> E4C:3 */
mov	al, byte_1CC6E
mov	bx, [bx]
add	[bx], al
add	word ptr [bp-2], 2
mov	bx, [bp-2]
cmp	word ptr [bx], 0

loc_16E14:				; CODE XREF: dseg:26DBD  j dseg:26DCF  j		 /* DOS offset ---> E4D:4 */
jnz	short loc_16E03

loc_16E16:				; CODE XREF: dseg:6DDC  j dseg:6E01  j		 /* DOS offset ---> E4D:6 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_16E1A:				; CODE XREF: dseg:26E98  p		 /* DOS offset ---> E4D:A */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  2Ah	; *
db 0C0h	;   *
db  50h	; P
db  9Ah	;   *
db    9
db    1
db    0
db    0
db  83h	;   *
unk_16E29	db 0C4h	;   *		; CODE XREF: game_diplomacy_marriage_result+8C  j
db    2
db  0Ah
db 0C0h	;   *
db  75h	; u
db  39h	; 9
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db  9Ah	;   *
db    0
db    1
db    0
db    0
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db  8Bh	;   *
db  1Eh
db    8
db  36h	; 6
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_diplomacy_marriage_result

loc_16E3E:				; CODE XREF: game_diplomacy_marriage_result+98  j		 /* DOS offset ---> E4F:E */
cmp	byte ptr [bx], 0
jz	short loc_16E68

loc_16E43:				; CODE XREF: game_diplomacy_marriage_result-FF32  j		 /* DOS offset ---> E50:3 */
mov	al, [bp+var_4]
add	al, 41h	; 'A'

loc_16E48:				; CODE XREF: dseg:27403  p		 /* DOS offset ---> E50:8 */
mov	bl, byte ptr [bp+var_2]
sub	bh, bh
shl	bx, 1
mov	bx, [bx+3608h]
mov	[bx], al
inc	byte ptr [bp+var_2]
mov	bl, byte ptr [bp+var_2]
sub	bh, bh
shl	bx, 1
mov	bx, [bx+3608h]
cmp	byte ptr [bx], 0
jnz	short loc_16E43

loc_16E68:				; CODE XREF: game_diplomacy_marriage_result-FF57  j		 /* DOS offset ---> E52:8 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_diplomacy_marriage_result
;     ***************************************************************************
push	bp
mov	bp, sp
mov	bx, [bp+8]
; START	OF FUNCTION CHUNK FOR game_diplomacy_marriage_result

loc_16E72:				; CODE XREF: game_diplomacy_marriage_result+B4  j		 /* DOS offset ---> E53:2 */
push	word ptr [bx+2]

loc_16E75:				; CODE XREF: dseg:26EA8  j		 /* DOS offset ---> E53:5 */
call	far ptr	0:374Ch
mov	sp, bp
dec	ax

loc_16E7D:				; CODE XREF: game_diplomacy_marriage_result+D8  j		 /* DOS offset ---> E53:D */
mov	word_1CEA2, ax
call	far ptr	677h:2Ch
push	cs
call	loc_16BBE
push	cs
call	loc_16CC8

loc_16E8D:				; CODE XREF: game_diplomacy_marriage_result+9B  j		 /* DOS offset ---> E54:D */
call	far ptr	677h:280h
call	far ptr	0A95h:0E94h
jmp	short loc_16EA3
; END OF FUNCTION CHUNK	FOR game_diplomacy_marriage_result
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_diplomacy_marriage_result

loc_16E9A:				; CODE XREF: game_diplomacy_marriage_result:loc_16EAD  j		 /* DOS offset ---> E55:A */
call	far ptr	0FA4h:43Ch
push	cs
call	loc_16A8C

loc_16EA3:				; CODE XREF: game_diplomacy_marriage_result-FF01  j		 /* DOS offset ---> E56:3 */
call	far ptr	0CD7h:38Eh

loc_16EA8:				; CODE XREF: dseg:26E73  j dseg:26E8D  j		 /* DOS offset ---> E56:8 */
test	byte_1339C, 2

loc_16EAD:				; CODE XREF: dseg:26EE3  p		 /* DOS offset ---> E56:D */
jz	short loc_16E9A
call	far ptr	73Ch:4A4h
call	far ptr	0A95h:4

loc_16EB9:				; CODE XREF: game_diplomacy_marriage_result+106  j		 /* DOS offset ---> E57:9 */
mov	sp, bp
pop	bp

locret_16EBC:				; CODE XREF: dseg:26EB5  j
retf
; END OF FUNCTION CHUNK	FOR game_diplomacy_marriage_result
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Switch_Target_Focus proc far

arg_0		= word ptr  6

push	bp

loc_16EBF:				; CODE XREF: dseg:26EBA  j		 /* DOS offset ---> E57:F */
mov	bp, sp
test	options_value, 1
jz	short loc_16ED3
mov	ax, 1
push	ax

loc_16ECC:				; CODE XREF: dseg:26EC6  j		 /* DOS offset ---> E58:C */
call	far ptr	0:3Dh	; nop, sound error nothing

loc_16ED1:				; CODE XREF: game_diplomacy_marriage_result+120  j		 /* DOS offset ---> E59:1 */
mov	sp, bp

loc_16ED3:				; CODE XREF: Switch_Target_Focus+8  j		 /* DOS offset ---> E59:3 */
push	[bp+arg_0]

loc_16ED6:				; CODE XREF: dseg:273E3  p		 /* DOS offset ---> E59:6 */
call	far ptr	57Ch:5Eh ; system_time_delay
mov	sp, bp
sub	ax, ax
push	ax
call	far ptr	0:3Dh	; s_003D
; nop, unknown
mov	sp, bp
pop	bp
retf
Switch_Target_Focus endp

;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_diplomacy_marriage_result

loc_16EE9:				; CODE XREF: game_diplomacy_marriage_result+23  j		 /* DOS offset ---> E5A:9 */
; game_diplomacy_marriage_result+64  j ...
nop
; END OF FUNCTION CHUNK	FOR game_diplomacy_marriage_result

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_audio_fade_music proc far		; CODE XREF: game_audio_start_music+2E  p

var_E		= word ptr -0Eh
arg_0		= byte ptr  6

push	bp
mov	bp, sp
sub	sp, 0Eh

loc_16EF0:		 /* DOS offset ---> E5B:0 */
cmp	word_1352C, 0
jz	short loc_16F0F
mov	byte ptr [bp+var_E+1], 2
mov	al, [bp+arg_0]
mov	byte ptr [bp+var_E], al
lea	ax, [bp+var_E]
push	ax
push	ax

loc_16F06:				; CODE XREF: game_diplomacy_marriage+D  j		 /* DOS offset ---> E5C:6 */
mov	ax, 102
push	ax

loc_16F0A:				; CODE XREF: dseg:26F83  j		 /* DOS offset ---> E5C:A */
call	far ptr	0:3750h

loc_16F0F:				; CODE XREF: game_audio_fade_music+B  j		 /* DOS offset ---> E5C:F */
mov	sp, bp
pop	bp
retf
game_audio_fade_music endp

;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_diplomacy_marriage

loc_16F13:				; CODE XREF: game_diplomacy_marriage+47  j		 /* DOS offset ---> E5D:3 */
nop
; END OF FUNCTION CHUNK	FOR game_diplomacy_marriage

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_audio_fade_music_check proc far	; CODE XREF: game_audio_start_music+1B  p
; game_audio_start_music+35  p ...

var_F		= byte ptr -0Fh

push	bp
mov	bp, sp
sub	sp, 10h

loc_16F1A:				; CODE XREF: game_diplomacy_marriage+5F  j		 /* DOS offset ---> E5D:A */
cmp	word_1352C, 0
jnz	short loc_16F28
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_16F28:				; CODE XREF: game_audio_fade_music_check+B  j		 /* DOS offset ---> E5E:8 */
mov	[bp+var_F], 3

loc_16F2C:				; CODE XREF: game_diplomacy_marriage+20  j		 /* DOS offset ---> E5E:C */
lea	ax, [bp-10h]
push	ax
push	ax
mov	ax, 102
push	ax

loc_16F35:				; CODE XREF: game_diplomacy_marriage+42  j		 /* DOS offset ---> E5F:5 */
call	far ptr	0:3750h
sub	ah, ah
cmp	ax, 1
sbb	ax, ax
inc	ax
mov	sp, bp
pop	bp
retf
game_audio_fade_music_check endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_audio_start_music proc far		; CODE XREF: dseg:loc_17006  p

var_E		= word ptr -0Eh
arg_0		= byte ptr  6

push	bp
mov	bp, sp
sub	sp, 0Eh
cmp	word_1352C, 0
jz	short loc_16FAC
test	options_value, 2
jz	short loc_16FAC
cmp	[bp+arg_0], 15h
jnb	short loc_16FAC
push	cs
call	near ptr game_audio_fade_music_check
or	ax, ax
jz	short loc_16F82

loc_16F68:				; CODE XREF: game_diplomacy_marriage+70  j		 /* DOS offset ---> E62:8 */
mov	al, byte_1356A
cmp	[bp+arg_0], al
jz	short loc_16FAC
mov	al, 10h
push	ax
push	cs
call	near ptr game_audio_fade_music
add	sp, 2

loc_16F7A:				; CODE XREF: game_audio_start_music+3A  j		 /* DOS offset ---> E63:A */
push	cs
call	near ptr game_audio_fade_music_check

loc_16F7E:				; CODE XREF: dseg:26F2C  j dseg:26F74  j		 /* DOS offset ---> E63:E */
or	ax, ax
jnz	short loc_16F7A

loc_16F82:				; CODE XREF: game_audio_start_music+20  j		 /* DOS offset ---> E64:2 */
; game_diplomacy_joint_invasion_result+F  j ...
mov	byte ptr [bp+var_E+1], 1
mov	al, [bp+arg_0]

loc_16F89:		 /* DOS offset ---> E64:9 */
inc	al
mov	byte ptr [bp+var_E], al
lea	ax, [bp+var_E]
push	ax
push	ax
mov	ax, 102
push	ax
call	far ptr	0:3750h
add	sp, 6
mov	al, 1
push	ax
push	cs
call	near ptr game_audio_start_music_sub
mov	al, [bp+arg_0]
mov	byte_1356A, al

loc_16FAC:				; CODE XREF: game_audio_start_music+B  j		 /* DOS offset ---> E66:C */
; game_audio_start_music+12  j ...
mov	sp, bp
pop	bp
retf
game_audio_start_music endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_audio_start_music_sub proc	far	; CODE XREF: game_audio_start_music+5D  p
; dseg:6FFB  p
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Eh
db  83h	;   *
db  3Eh	; >
db  2Ch	; ,
db  35h	; 5
db    0
db  74h	; t
db  18h
db 0C6h	;   *
db  46h	; F
db 0F3h	;   *
db    4
db  8Ah	;   *
db  46h	; F
unk_16FC3	db    6			; CODE XREF: game_diplomacy_joint_invasion_result+50  j
db  88h	;   *
db  46h	; F
unk_16FC6	db 0F2h	;   *		; CODE XREF: dseg:277B3  p
db  8Dh	;   *
db  46h	; F
db 0F2h	;   *
db  50h	; P
db  50h	; P
db 0B8h	;   *
db  66h	; f
db    0
db  50h	; P
;     ***************************************************************************

loc_16FD0:				; CODE XREF: dseg:27794  p		 /* DOS offset ---> E69:0 */
call	far ptr	0:3750h
mov	sp, bp
pop	bp
retf
game_audio_start_music_sub endp

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Eh
cmp	word_1352C, 0
jz	short loc_1702E

loc_16FE7:				; CODE XREF: dseg:27790  p		 /* DOS offset ---> E6A:7 */
test	options_value, 2
jz	short loc_1702E
push	cs
call	near ptr game_audio_fade_music_check

loc_16FF2:				; CODE XREF: dseg:27018  j		 /* DOS offset ---> E6B:2 */
; game_diplomacy_joint_invasion_result+80  j
or	ax, ax
jnz	short loc_17010

loc_16FF6:				; CODE XREF: dseg:2700F  j		 /* DOS offset ---> E6B:6 */
mov	al, [bp+8]
push	ax
push	cs
call	near ptr game_audio_start_music_sub
add	sp, 2
mov	al, [bp+6]
push	ax
push	cs

loc_17006:				; CODE XREF: game_diplomacy_joint_invasion_result+8C  j		 /* DOS offset ---> E6C:6 */
call	near ptr game_audio_start_music
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_17010:				; CODE XREF: dseg:6FF4  j		 /* DOS offset ---> E6D:0 */
mov	byte ptr [bp-0Dh], 8
mov	al, [bp+6]
mov	[bp-0Eh], al
mov	al, [bp+8]

loc_1701D:				; CODE XREF: dseg:277C3  p		 /* DOS offset ---> E6D:D */
mov	[bp-8],	al
lea	ax, [bp-0Eh]
push	ax
push	ax
mov	ax, 66h	; 'f'
push	ax

loc_17029:				; CODE XREF: dseg:27096  j		 /* DOS offset ---> E6E:9 */
call	far ptr	0:3750h

loc_1702E:				; CODE XREF: dseg:6FE5  j dseg:6FEC  j		 /* DOS offset ---> E6E:E */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

locret_17032:				; CODE XREF: game_diplomacy_joint_invasion_result+BD  j
retf
;     ***************************************************************************
nop

loc_17034:				; CODE XREF: dseg:70A5  p dseg:70CB  p ...		 /* DOS offset ---> E6F:4 */
push	bp
; START	OF FUNCTION CHUNK FOR game_diplomacy_joint_invasion_result

loc_17035:				; CODE XREF: game_diplomacy_joint_invasion_result+C2  j		 /* DOS offset ---> E6F:5 */
mov	bp, sp
sub	sp, 0Eh
mov	byte ptr [bp+var_E], 0
mov	ax, [bp+arg_2]

loc_17041:				; CODE XREF: dseg:2708D  j		 /* DOS offset ---> E70:1 */
mov	[bp+var_8], ax
mov	byte ptr [bp+var_E+1], 5
lea	ax, [bp+var_E]
push	ax
push	ax
mov	ax, 66h	; 'f'

loc_17050:				; CODE XREF: game_diplomacy_joint_invasion_result+8F  j		 /* DOS offset ---> E71:0 */
push	ax
call	far ptr	0:3750h
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_diplomacy_joint_invasion_result
;     ***************************************************************************

loc_1705A:				; CODE XREF: dseg:70AF  p		 /* DOS offset ---> E71:A */
; dseg:loc_170D5  p ...
push	bp

loc_1705B:				; CODE XREF: dseg:2704E  j		 /* DOS offset ---> E71:B */
mov	bp, sp
sub	sp, 0Eh
mov	byte ptr [bp-0Eh], 0
mov	al, [bp+6]
mov	[bp-8],	al
mov	byte ptr [bp-0Dh], 6
lea	ax, [bp-0Eh]
push	ax
push	ax
mov	ax, 66h	; 'f'
push	ax

loc_17077:				; CODE XREF: game_diplomacy_joint_invasion_result+F0  j		 /* DOS offset ---> E73:7 */
call	far ptr	0:3750h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_17080:				; CODE XREF: dseg:loc_170C1  p		 /* DOS offset ---> E74:0 */
; dseg:70E7  p ...
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Eh
;     ***************************************************************************

loc_17086:				; CODE XREF: dseg:27079  j		 /* DOS offset ---> E74:6 */
mov	byte ptr [bp-0Eh], 0
mov	byte ptr [bp-0Dh], 7
lea	ax, [bp-0Eh]
push	ax
push	ax
mov	ax, 66h	; 'f'
push	ax
call	far ptr	0:3750h
mov	sp, bp

loc_1709E:				; CODE XREF: dseg:27742  p		 /* DOS offset ---> E75:E */
pop	bp
retf
;     ***************************************************************************

loc_170A0:				; CODE XREF: game_diplomacy_joint_invasion_result+10A  j		 /* DOS offset ---> E76:0 */
mov	ax, 3970h
push	ax
push	cs
call	loc_17034
add	sp, 2
mov	al, 24h	; '$'
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	al, 14h
push	ax

loc_170B8:				; CODE XREF: game_diplomacy_joint_invasion_result+11  j		 /* DOS offset ---> E77:8 */
; game_diplomacy_joint_invasion_result+52  j ...
call	far ptr	57Ch:7Ch

loc_170BD:		 /* DOS offset ---> E77:D */
add	sp, 2
push	cs

loc_170C1:		 /* DOS offset ---> E78:1 */
call	loc_17080
retf
;     ***************************************************************************
nop
mov	ax, 3986h
push	ax
push	cs
call	loc_17034
add	sp, 2
mov	al, 0Ch
push	ax
push	cs

loc_170D5:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom_sub+13  j		 /* DOS offset ---> E79:5 */
call	loc_1705A
add	sp, 2
mov	al, 14h
push	ax

loc_170DE:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom_sub+9E  j		 /* DOS offset ---> E79:E */
call	far ptr	57Ch:7Ch
add	sp, 2
push	cs
call	loc_17080
retf
;     ***************************************************************************
nop
mov	ax, 399Ch
push	ax
push	cs
call	loc_17034
add	sp, 2
mov	al, 30h	; '0'
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	al, 14h
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
push	cs
call	loc_17080
retf
;     ***************************************************************************
nop
mov	ax, 39B2h
push	ax
push	cs
call	loc_17034
add	sp, 2

loc_1711D:				; CODE XREF: dseg:27767  p		 /* DOS offset ---> E7D:D */
mov	al, 0Ch
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	al, 14h
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
push	cs
call	loc_17080
retf
;     ***************************************************************************
nop
mov	ax, 39C8h
push	ax
push	cs

loc_1713D:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom_sub+77  j		 /* DOS offset ---> E7F:D */
call	loc_17034
add	sp, 2
mov	al, 18h
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	ax, 4
push	ax

loc_17151:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom_sub+4B  j		 /* DOS offset ---> E81:1 */
; game_diplomacy_joint_invasion_invade_whom_sub+64  j ...
call	far ptr	57Ch:5Eh
add	sp, 2
push	cs

loc_1715A:				; CODE XREF: dseg:273AD  p		 /* DOS offset ---> E81:A */
call	loc_17080
retf
;     ***************************************************************************
mov	ax, 39DEh
push	ax
push	cs
call	loc_17034
add	sp, 2
mov	al, 59h	; 'Y'
push	ax
push	cs
call	loc_1705A

loc_17170:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom_sub+15  j		 /* DOS offset ---> E83:0 */
; game_diplomacy_joint_invasion_invade_whom_sub+A4  j ...
add	sp, 2
mov	al, 3
push	ax

loc_17176:		 /* DOS offset ---> E83:6 */
call	far ptr	57Ch:7Ch
add	sp, 2
mov	al, 54h	; 'T'
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	al, 0Ah
push	ax
call	far ptr	57Ch:7Ch

loc_17190:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom_neighbors+A0  j		 /* DOS offset ---> E85:0 */
add	sp, 2
push	cs
call	loc_17080
retf
;     ***************************************************************************
mov	ax, 39F4h

loc_1719B:				; CODE XREF: dseg:271DA  j		 /* DOS offset ---> E85:B */
push	ax
push	cs
call	loc_17034
add	sp, 2
mov	al, 7
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	al, 3
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
sub	al, al
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	al, 3
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
mov	al, 7
push	ax
push	cs

loc_171D1:				; CODE XREF: dseg:271AD  j		 /* DOS offset ---> E89:1 */
call	loc_1705A
add	sp, 2
mov	al, 3
push	ax

loc_171DA:				; CODE XREF: dseg:27199  j dseg:2719F  j		 /* DOS offset ---> E89:A */
call	far ptr	57Ch:7Ch

loc_171DF:				; CODE XREF: dseg:2734B  p		 /* DOS offset ---> E89:F */
add	sp, 2
sub	al, al
push	ax
push	cs
call	loc_1705A

loc_171E9:				; CODE XREF: dseg:271FB  j		 /* DOS offset ---> E8A:9 */
add	sp, 2
mov	al, 3
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
push	cs
call	loc_17080
retf
;     ***************************************************************************

loc_171FC:				; CODE XREF: dseg:271E7  j		 /* DOS offset ---> E8B:C */
mov	ax, 3A0Ah
push	ax
push	cs

loc_17201:				; CODE XREF: dseg:2737A  p		 /* DOS offset ---> E8C:1 */
call	loc_17034
add	sp, 2
mov	al, 24h	; '$'
push	ax
push	cs
call	loc_1705A

loc_1720E:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom_neighbors+34  j		 /* DOS offset ---> E8C:E */
; game_diplomacy_joint_invasion_invade_whom_neighbors+4A  j ...
add	sp, 2
retf
;     ***************************************************************************
mov	ax, 3A20h
push	ax
push	cs
call	loc_17034

loc_1721A:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom_neighbors+9E  j		 /* DOS offset ---> E8D:A */
add	sp, 2
mov	al, 5Fh	; '_'
push	ax
push	cs
call	loc_1705A

loc_17224:				; CODE XREF: Q_27202+1C  j		 /* DOS offset ---> E8E:4 */
add	sp, 2
retf
;     ***************************************************************************
mov	ax, 3A36h
push	ax
push	cs
call	loc_17034
add	sp, 2

loc_17233:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom_neighbors+A7  j		 /* DOS offset ---> E8F:3 */
mov	al, 30h	; '0'
push	ax
; START	OF FUNCTION CHUNK FOR Q_27202

loc_17236:				; CODE XREF: Q_27202+2E  j		 /* DOS offset ---> E8F:6 */
push	cs

loc_17237:				; CODE XREF: Q_27202+32  j		 /* DOS offset ---> E8F:7 */
call	loc_1705A

loc_1723A:		 /* DOS offset ---> E8F:A */
add	sp, 2
mov	al, 0Fh
push	ax

loc_17240:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom+5C  j		 /* DOS offset ---> E90:0 */
; game_diplomacy_joint_invasion_invade_whom+72  j ...
call	far ptr	57Ch:7Ch
add	sp, 2
push	cs
call	loc_17080
retf
; END OF FUNCTION CHUNK	FOR Q_27202
;     ***************************************************************************
nop
mov	ax, 3A4Ch
push	ax
push	cs
call	loc_17034

loc_17256:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom+17  j		 /* DOS offset ---> E91:6 */
add	sp, 2
mov	al, 24h	; '$'
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	al, 3
push	ax
; START	OF FUNCTION CHUNK FOR Q_27202

loc_17266:				; CODE XREF: Q_27202+FC  j		 /* DOS offset ---> E92:6 */
call	far ptr	57Ch:7Ch

loc_1726B:				; CODE XREF: Q_27202+65  j		 /* DOS offset ---> E92:B */
add	sp, 2
push	cs
call	loc_17080
retf
; END OF FUNCTION CHUNK	FOR Q_27202
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	word ptr [bp-4], 1

loc_1727F:				; CODE XREF: dseg:72A3  j		 /* DOS offset ---> E93:F */
mov	ax, 3A62h
push	ax
push	cs

loc_17284:		 /* DOS offset ---> E94:4 */
call	loc_17034
add	sp, 2
mov	al, 24h	; '$'
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	ax, 3
push	ax
call	far ptr	57Ch:5Eh
add	sp, 2

loc_172A0:				; CODE XREF: Q_27202+8D  j		 /* DOS offset ---> E96:0 */
dec	word ptr [bp-4]
jnz	short loc_1727F
push	cs
call	loc_17080
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 3A78h
push	ax
push	cs
call	loc_17034
; START	OF FUNCTION CHUNK FOR Q_27202

loc_172B6:				; CODE XREF: Q_27202+9D  j		 /* DOS offset ---> E97:6 */
add	sp, 2
mov	al, 30h	; '0'
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	al, 0Ah
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
push	cs
call	loc_17080
retf
; END OF FUNCTION CHUNK	FOR Q_27202
;     ***************************************************************************
nop
mov	ax, 3A8Eh
; START	OF FUNCTION CHUNK FOR game_diplomacy_joint_invasion_invade_whom

loc_172D7:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom+96  j		 /* DOS offset ---> E99:7 */
push	ax
push	cs
call	loc_17034

loc_172DC:				; CODE XREF: Q_27202+60  j Q_27202+81  j ...		 /* DOS offset ---> E99:C */
add	sp, 2
mov	al, 0Ch
push	ax
push	cs
call	loc_1705A
add	sp, 2

loc_172E9:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom+AA  j		 /* DOS offset ---> E9A:9 */
mov	ax, 1
push	ax

loc_172ED:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom+19  j		 /* DOS offset ---> E9A:D */
; game_diplomacy_joint_invasion_invade_whom+3E  j
call	far ptr	57Ch:5Eh

loc_172F2:				; CODE XREF: game_diplomacy_joint_invasion_invade_whom+AF  j		 /* DOS offset ---> E9B:2 */
add	sp, 2
push	cs
call	loc_17080
retf
; END OF FUNCTION CHUNK	FOR game_diplomacy_joint_invasion_invade_whom
;     ***************************************************************************
mov	ax, 3AA4h
push	ax
push	cs

loc_172FF:				; CODE XREF: Q_27202+FA  j		 /* DOS offset ---> E9B:F */
call	loc_17034
add	sp, 2
mov	al, 4Dh	; 'M'
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	al, 1
push	ax

loc_17312:				; CODE XREF: game_diplomacy_joint_invasion+E  j		 /* DOS offset ---> E9D:2 */
call	far ptr	57Ch:7Ch
add	sp, 2
; START	OF FUNCTION CHUNK FOR Q_27202

loc_1731A:				; CODE XREF: Q_27202+112  j		 /* DOS offset ---> E9D:A */
mov	al, 48h	; 'H'
push	ax
push	cs

loc_1731E:				; CODE XREF: Q_27202+116  j		 /* DOS offset ---> E9D:E */
call	loc_1705A
add	sp, 2
mov	al, 1
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2

loc_1732F:				; CODE XREF: Q_27202+67  j		 /* DOS offset ---> E9E:F */
mov	al, 4Dh	; 'M'
push	ax
push	cs
call	loc_1705A

loc_17336:				; CODE XREF: dseg:27760  p		 /* DOS offset ---> E9F:6 */
add	sp, 2
mov	al, 1
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
mov	al, 48h	; 'H'
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	al, 1
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
mov	al, 4Dh	; 'M'
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	al, 1
push	ax

loc_17366:				; CODE XREF: game_diplomacy_joint_invasion+27  j		 /* DOS offset ---> EA2:6 */
call	far ptr	57Ch:7Ch
add	sp, 2
mov	al, 48h	; 'H'
push	ax
push	cs
call	loc_1705A

loc_17375:				; CODE XREF: dseg:27395  j		 /* DOS offset ---> EA3:5 */
add	sp, 2
retf
; END OF FUNCTION CHUNK	FOR Q_27202
;     ***************************************************************************
nop
mov	ax, 3ABAh
push	ax
push	cs
call	loc_17034
add	sp, 2
mov	al, 30h	; '0'
push	ax
push	cs
call	loc_1705A
add	sp, 2
mov	ax, 1
push	ax

loc_17393:				; CODE XREF: dseg:2738C  j		 /* DOS offset ---> EA5:3 */
call	far ptr	57Ch:5Eh
add	sp, 2
push	cs
call	loc_17080
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

system_sound_out proc far

arg_0		= byte ptr  6

push	bp
mov	bp, sp
mov	al, options_value
and	al, byte ptr word_1352C
test	al, 1

loc_173AC:				; CODE XREF: dseg:2736B  j dseg:27374  j		 /* DOS offset ---> EA6:C */
jz	short loc_173C0
mov	bl, [bp+arg_0]
sub	bh, bh

loc_173B3:				; CODE XREF: game_diplomacy_joint_invasion+84  j		 /* DOS offset ---> EA7:3 */
; game_diplomacy_joint_invasion+90  j ...
shl	bx, 1
shl	bx, 1
call	dword ptr [bx+3930h] ; changing	this value, hangs the game
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_173C0:				; CODE XREF: system_sound_out:loc_173AC  j		 /* DOS offset ---> EA8:0 */
; game_diplomacy_joint_invasion+5B  j ...
mov	al, 3
push	ax

loc_173C3:				; system_sound_delay_2		 /* DOS offset ---> EA8:3 */
call	far ptr	57Ch:7Ch
mov	sp, bp
pop	bp
retf
system_sound_out endp

;     ***************************************************************************

loc_173CC:				; CODE XREF: dseg:7697  p		 /* DOS offset ---> EA8:C */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  56h	; V
db 0FFh
db  76h	; v
db    8
db 0B8h	;   *
db  28h	; (
db    0
db  50h	; P
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_diplomacy_alliance_result

loc_173DA:				; CODE XREF: game_diplomacy_alliance_result+F  j		 /* DOS offset ---> EA9:A */
mov	ax, 19h
push	ax
call	far ptr	4B5h:6A4h
add	sp, 6
push	[bp+arg_0]

loc_173E9:				; CODE XREF: dseg:273C9  j dseg:273D2  j		 /* DOS offset ---> EAA:9 */
call	far ptr	loc_133C4
add	sp, 2
mov	byte ptr [bp+var_2], al

loc_173F4:				; CODE XREF: dseg:273EE  j		 /* DOS offset ---> EAB:4 */
sub	ax, ax
push	ax
mov	ax, 38h	; '8'
push	ax
mov	ax, 19h
push	ax
mov	ax, 28h	; '('
push	ax
mov	cx, 23h	; '#'
push	cx
call	far ptr	juqiang_draw_shape_to_video_buffer

loc_1740C:				; CODE XREF: dseg:273E8  j		 /* DOS offset ---> EAC:C */
add	sp, 0Ah
mov	ax, 3BD6h
push	ax
mov	ax, 407h
push	ax

loc_17417:				; CODE XREF: dseg:273BB  j dseg:2740C  j		 /* DOS offset ---> EAD:7 */
mov	cx, 8
push	cx

loc_1741B:				; CODE XREF: game_diplomacy_alliance_result+50  j		 /* DOS offset ---> EAD:B */
mov	dx, 1

loc_1741E:				; CODE XREF: dseg:277D3  p		 /* DOS offset ---> EAD:E */
push	dx
mov	bx, 28h	; '('
push	bx
mov	si, 23h	; '#'
push	si
call	far ptr	0:1469h
add	sp, 0Ch
mov	ax, 7
push	ax
mov	cx, 20h	; ' '
push	cx
mov	dx, 1
push	dx

loc_1743B:				; CODE XREF: dseg:27437  j		 /* DOS offset ---> EAF:B */
mov	bx, 30h	; '0'
push	bx
push	si
call	far ptr	juqiang_draw_shape_to_video_buffer

loc_17445:				; CODE XREF: game_diplomacy_alliance_result+7A  j		 /* DOS offset ---> EB0:5 */
add	sp, 0Ah
mov	ax, 3BE6h
push	ax
mov	ax, 407h
push	ax
mov	cx, 8
push	cx
mov	dx, 1
push	dx

loc_17458:				; CODE XREF: game_diplomacy_alliance_result+86  j		 /* DOS offset ---> EB1:8 */
mov	bx, 50h	; 'P'
push	bx
push	si

loc_1745D:				; CODE XREF: dseg:27449  j dseg:27452  j		 /* DOS offset ---> EB1:D */
call	far ptr	0:1469h
add	sp, 0Ch
mov	ax, 7
push	ax
mov	cx, 30h	; '0'
push	cx
mov	dl, byte ptr [bp+var_2]
sub	dh, dh
inc	dx
inc	dx
push	dx

loc_17475:				; CODE XREF: dseg:2746C  j		 /* DOS offset ---> EB3:5 */
mov	dx, 28h	; '('
push	dx
mov	bx, 24h	; '$'
push	bx
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah

loc_17485:				; CODE XREF: dseg:27475  j		 /* DOS offset ---> EB4:5 */
mov	ax, 3BDEh
push	ax
mov	ax, 407h
push	ax
mov	cx, 8
push	cx

loc_17491:				; CODE XREF: dseg:27485  j		 /* DOS offset ---> EB5:1 */
mov	dx, 1
push	dx
mov	bx, 28h	; '('
push	bx
mov	bl, byte ptr [bp+var_2]

loc_1749C:				; CODE XREF: dseg:274C2  j		 /* DOS offset ---> EB5:C */
; game_diplomacy_alliance_result+A2  j
add	bl, 26h	; '&'
sub	bh, bh
push	bx
mov	si, bx
call	far ptr	0:1469h

loc_174A9:				; CODE XREF: game_diplomacy_alliance_result+D6  j		 /* DOS offset ---> EB6:9 */
add	sp, 0Ch
mov	ax, 7
push	ax
mov	ax, 20h	; ' '
push	ax
mov	ax, 1
push	ax
mov	cx, 30h	; '0'
push	cx

loc_174BC:				; CODE XREF: game_diplomacy_alliance_result+89  j		 /* DOS offset ---> EB7:C */
push	si
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 3BEEh

loc_174C8:				; CODE XREF: dseg:27439  j		 /* DOS offset ---> EB8:8 */
push	ax
mov	ax, 407h
push	ax
mov	cx, 8
push	cx

loc_174D1:				; CODE XREF: dseg:274FC  j		 /* DOS offset ---> EB9:1 */
mov	dx, 1
push	dx
mov	dx, 50h	; 'P'
push	dx
push	si
call	far ptr	0:1469h

loc_174DF:				; CODE XREF: dseg:274F3  j		 /* DOS offset ---> EB9:F */
add	sp, 0Ch
mov	ax, 3BC6h
push	ax
mov	ax, 407h
push	ax
mov	ax, 8
push	ax
mov	ax, 2
push	ax
mov	ax, 40h	; '@'

loc_174F5:				; CODE XREF: dseg:274DE  j		 /* DOS offset ---> EBB:5 */
push	ax

loc_174F6:				; CODE XREF: game_diplomacy_alliance_result+129  j		 /* DOS offset ---> EBB:6 */
mov	ax, 21h	; '!'

loc_174F9:				; CODE XREF: game_diplomacy_alliance_result+12E  j		 /* DOS offset ---> EBB:9 */
push	ax
call	far ptr	0:1469h
add	sp, 0Ch

loc_17502:				; CODE XREF: dseg:27656  p		 /* DOS offset ---> EBC:2 */
push	[bp+arg_0]
mov	ax, 3CB0h
push	ax

loc_17509:				; CODE XREF: dseg:2759C  j		 /* DOS offset ---> EBC:9 */
call	far ptr	3EFh:6E8h

loc_1750E:				; CODE XREF: game_diplomacy_alliance_result+11  j		 /* DOS offset ---> EBC:E */
; game_diplomacy_alliance_result+52  j ...
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_diplomacy_alliance_result
;     ***************************************************************************

loc_17516:				; CODE XREF: dseg:7672  p		 /* DOS offset ---> EBD:6 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Eh
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0F4h	;   *
db 0C7h	;   *
db  46h	; F
db 0FCh	;   *
db 0B2h	;   *
db 0CEh	;   *
db 0C6h	;   *
db  46h	; F
db 0F8h	;   *
unk_1752C	db    0			; CODE XREF: game_diplomacy_alliance+D  j
db 0C7h	;   *
db  46h	; F
db 0F6h	;   *
db 0C4h	;   *
db  2Dh	; -
db 0C7h	;   *
db  46h	; F
db 0F2h	;   *
db  29h	; )
db    0
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_diplomacy_alliance

loc_17537:				; CODE XREF: game_diplomacy_alliance-FFA4  j		 /* DOS offset ---> EBF:7 */
mov	bx, [bp+var_A]
mov	ax, [bx+2]
mov	[bp+var_2], ax
or	ax, ax
jz	short loc_17569

loc_17544:				; CODE XREF: game_diplomacy_alliance-FFAD  j		 /* DOS offset ---> EC0:4 */
cmp	[bp+var_C], ax
jz	short loc_1755D
mov	bx, [bp+arg_0]
cmp	[bx+4],	ax
jz	short loc_1755D

loc_17551:				; CODE XREF: game_diplomacy_alliance+2C  j		 /* DOS offset ---> EC1:1 */
mov	bx, [bp+var_4]
add	[bp+var_4], 2
mov	[bx], ax
inc	[bp+var_8]

loc_1755D:				; CODE XREF: game_diplomacy_alliance-FFCD  j		 /* DOS offset ---> EC1:D */
; game_diplomacy_alliance-FFC5  j
mov	bx, [bp+var_2]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_17544

loc_17569:				; CODE XREF: game_diplomacy_alliance-FFD2  j		 /* DOS offset ---> EC2:9 */
; dseg:27562  j ...
add	[bp+var_A], 23h	; '#'

loc_1756D:				; CODE XREF: game_diplomacy_alliance+4D  j		 /* DOS offset ---> EC2:D */
dec	[bp+var_E]
jnz	short loc_17537

loc_17572:				; CODE XREF: dseg:27553  j		 /* DOS offset ---> EC3:2 */
mov	bx, [bp+var_4]
mov	word ptr [bx], 0
mov	al, [bp+var_8]
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_diplomacy_alliance
;     ***************************************************************************

loc_17580:				; CODE XREF: dseg:loc_1767A  p		 /* DOS offset ---> EC4:0 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  10h
db  56h	; V
;     ***************************************************************************

loc_17587:				; CODE XREF: dseg:27539  j dseg:27568  j ...		 /* DOS offset ---> EC4:7 */
mov	word ptr [bp-4], 0CEB2h
mov	byte ptr [bp-8], 0
mov	al, [bp+6]

loc_17593:				; CODE XREF: dseg:2758E  j		 /* DOS offset ---> EC5:3 */
dec	byte ptr [bp+6]
mov	[bp-0Eh], al
or	al, al
jz	short loc_17615
; START	OF FUNCTION CHUNK FOR game_diplomacy_func

loc_1759D:				; CODE XREF: game_diplomacy_func-FF5F  j		 /* DOS offset ---> EC5:D */
; dseg:2759A  j
mov	bx, [bp+var_4]
push	word ptr [bx]

loc_175A2:				; CODE XREF: dseg:27776  p		 /* DOS offset ---> EC6:2 */
call	far ptr	60Dh:416h
add	sp, 2
mov	[bp+var_A], al
mov	ax, [bp+var_4]

loc_175B0:				; CODE XREF: game_diplomacy_func+32  j		 /* DOS offset ---> EC7:0 */
inc	ax
inc	ax
mov	[bp+var_6], ax

loc_175B5:				; CODE XREF: dseg:276C4  j		 /* DOS offset ---> EC7:5 */
mov	al, [bp+var_8]
inc	al
mov	[bp+var_C], al
cmp	al, [bp+arg_0]
jnb	short loc_17606
mov	al, [bp+arg_0]
sub	al, [bp+var_C]
mov	[bp+var_10], al

loc_175CB:				; CODE XREF: game_diplomacy_func-FF6E  j		 /* DOS offset ---> EC8:B */
mov	bx, [bp+var_6]
push	word ptr [bx]

loc_175D0:				; CODE XREF: dseg:275CE  j		 /* DOS offset ---> EC9:0 */
call	far ptr	60Dh:416h

loc_175D5:				; CODE XREF: game_diplomacy_func+55  j		 /* DOS offset ---> EC9:5 */
; dseg:275D2  j
add	sp, 2
cmp	al, [bp+var_A]
jbe	short loc_175FD

loc_175DD:				; CODE XREF: dseg:275DA  j		 /* DOS offset ---> EC9:D */
mov	bx, [bp+var_6]
mov	ax, [bx]
mov	[bp+var_2], ax
mov	si, [bp+var_4]
mov	ax, [si]
mov	[bx], ax

loc_175EC:				; CODE XREF: game_diplomacy_func+6B  j		 /* DOS offset ---> ECA:C */
mov	ax, [bp+var_2]
mov	[si], ax
push	ax
call	far ptr	60Dh:416h
add	sp, 2
mov	[bp+var_A], al

loc_175FD:				; CODE XREF: game_diplomacy_func-FF97  j		 /* DOS offset ---> ECB:D */
add	[bp+var_6], 2
dec	[bp+var_10]
jnz	short loc_175CB

loc_17606:				; CODE XREF: game_diplomacy_func-FFB2  j		 /* DOS offset ---> ECC:6 */
; dseg:27601  j
add	[bp+var_4], 2

loc_1760A:				; CODE XREF: game_diplomacy_func+82  j		 /* DOS offset ---> ECC:A */
; game_diplomacy_func+88  j
inc	[bp+var_8]
mov	al, [bp+var_E]

loc_17610:				; CODE XREF: dseg:2760A  j dseg:2760E  j		 /* DOS offset ---> ECD:0 */
cmp	[bp+var_8], al
jb	short loc_1759D

loc_17615:				; CODE XREF: dseg:759B  j		 /* DOS offset ---> ECD:5 */
; game_diplomacy_func+62  j ...
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_diplomacy_func
;     ***************************************************************************
nop
nop

loc_1761C:				; CODE XREF: game_spy_forged_letter-FF8D  p		 /* DOS offset ---> ECD:C */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  42h	; B
db  56h	; V
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  47h	; G
db    4
db  89h	;   *
db  46h	; F
unk_1762B	db 0FEh	;   *		; CODE XREF: dseg:27626  j
db  0Bh
db 0C0h	;   *
db  74h	; t
db  3Eh	; >
db  8Bh	;   *
db    7
db    5
db  1Ch
db    0
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0BEh	;   *
db  50h	; P
db  9Ah	;   *
db 0BEh	;   *
db    0
db  61h	; a
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db 0B8h	;   *
db  39h	; 9
db  3Dh	; =
db  50h	; P
db  8Dh	;   *
db  46h	; F
aPC		db '  *P    **',0             ; CODE XREF: game_diplomacy_func+B7  j
; game_diplomacy_func+CA  j
db  61h	; a
db    5
db  83h	;   *
unk_17650	db 0C4h	;   *		; CODE XREF: dseg:27649  j
db    4
db  8Bh	;   *
unk_17653	db  5Eh	; ^		; CODE XREF: game_diplomacy_func+B2  j
db 0FEh	;   *
db 0FFh
db  77h	; w
db  1Ah
;     ***************************************************************************
lea	ax, [bp-42h]
;     ***************************************************************************
db  50h	; P
db  0Eh
db 0E8h	;   *
db  6Ch	; l
db 0FDh	;   *
;     ***************************************************************************

loc_17660:				; CODE XREF: dseg:27672  j		 /* DOS offset ---> ED2:0 */
add	sp, 4
mov	al, 28h	; '('
push	ax

loc_17666:				; CODE XREF: dseg:2765E  j		 /* DOS offset ---> ED2:6 */
call	far ptr	57Ch:7Ch
add	sp, 2
push	word ptr [bp+6]
push	cs
call	loc_17516
add	sp, 2
push	ax
push	cs

loc_1767A:				; CODE XREF: dseg:2764E  j dseg:27665  j		 /* DOS offset ---> ED3:A */
call	loc_17580
add	sp, 2
mov	byte ptr [bp-4], 0

loc_17684:				; CODE XREF: dseg:76AF  j		 /* DOS offset ---> ED4:4 */
mov	bl, [bp-4]

loc_17687:				; DATA XREF: game_spy_betrayal+1D  t		 /* DOS offset ---> ED4:7 */
sub	bh, bh
shl	bx, 1

loc_1768B:				; CODE XREF: game_spy_betrayal_letter_query+42  j		 /* DOS offset ---> ED4:B */
mov	si, [bx-314Eh]

loc_1768F:				; CODE XREF: dseg:27639  j		 /* DOS offset ---> ED4:F */
push	word ptr [si+1Ah]
push	word ptr [bx+3D60h]
push	cs
call	loc_173CC
add	sp, 4
mov	al, 1Eh
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2

loc_176A8:				; CODE XREF: dseg:2768E  j		 /* DOS offset ---> ED6:8 */
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 3
jb	short loc_17684
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_176B6:				; CODE XREF: game_spy_forged_letter-FF86  p		 /* DOS offset ---> ED7:6 */
; dseg:275DC  j ...
push	word_1D47E
;     ***************************************************************************
db  9Ah	;   *
db  16h
db    3
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db    2
db  3Dh	; =
db 0FFh
db 0FFh
db  75h	; u
db  0Fh
;     ***************************************************************************

loc_176C7:				; CODE XREF: dseg:276C2  j		 /* DOS offset ---> ED8:7 */
sub	ax, ax
push	ax

loc_176CA:				; CODE XREF: dseg:27749  p dseg:2776F  p		 /* DOS offset ---> ED8:A */
mov	ax, 3D66h
push	ax
; START	OF FUNCTION CHUNK FOR game_spy_betrayal_letter_query

loc_176CE:				; CODE XREF: game_spy_betrayal_letter_query+24  j		 /* DOS offset ---> ED8:E */
call	far ptr	677h:122h

loc_176D3:				; CODE XREF: game_spy_betrayal_letter_query+44  j		 /* DOS offset ---> ED9:3 */
add	sp, 4
push	word_1D47C

loc_176DA:		 /* DOS offset ---> ED9:A */
call	far ptr	0:316h
add	sp, 2
cmp	ax, 0FFFFh
jnz	short loc_176F6
sub	ax, ax
push	ax
mov	ax, 3D70h
push	ax
call	far ptr	677h:122h
add	sp, 4

loc_176F6:				; CODE XREF: game_spy_betrayal_letter_query-FFA3  j		 /* DOS offset ---> EDB:6 */
push	word_1CEA8

loc_176FA:				; CODE XREF: dseg:276E8  j		 /* DOS offset ---> EDB:A */
call	far ptr	0:316h
add	sp, 2
cmp	ax, 0FFFFh
jnz	short loc_17716
sub	ax, ax
push	ax
mov	ax, 3D77h
push	ax
call	far ptr	677h:122h
add	sp, 4

loc_17716:				; CODE XREF: game_spy_betrayal_letter_query-FF83  j		 /* DOS offset ---> EDD:6 */
push	word_1CAF4
call	far ptr	0:316h
add	sp, 2
cmp	ax, 0FFFFh
jnz	short loc_17736

loc_17727:				; CODE XREF: dseg:276FB  j		 /* DOS offset ---> EDE:7 */
sub	ax, ax
push	ax
mov	ax, 3D7Eh
push	ax

loc_1772E:				; CODE XREF: dseg:27701  j dseg:27713  j ...		 /* DOS offset ---> EDE:E */
call	far ptr	677h:122h

loc_17733:				; CODE XREF: game_spy_forged_letter_result+53  j		 /* DOS offset ---> EDF:3 */
add	sp, 4

loc_17736:				; CODE XREF: game_spy_betrayal_letter_query-FF63  j		 /* DOS offset ---> EDF:6 */
push	word ptr loc_1CA60
call	far ptr	0:316h
add	sp, 2
cmp	ax, 0FFFFh
jnz	short loc_17756
sub	ax, ax
push	ax
mov	ax, 3D85h
push	ax
call	far ptr	677h:122h

loc_17753:				; CODE XREF: game_spy_forged_letter_result+74  j		 /* DOS offset ---> EE1:3 */
add	sp, 4

loc_17756:				; CODE XREF: game_spy_betrayal_letter_query-FF43  j		 /* DOS offset ---> EE1:6 */
push	word_1CE98
call	far ptr	0:316h
add	sp, 2

loc_17762:				; CODE XREF: game_spy_forged_letter_result+83  j		 /* DOS offset ---> EE2:2 */
cmp	ax, 0FFFFh

loc_17765:				; CODE XREF: dseg:2775D  j		 /* DOS offset ---> EE2:5 */
jnz	short loc_17776
sub	ax, ax
push	ax
mov	ax, 3D8Ch
push	ax

loc_1776E:				; CODE XREF: game_spy_forged_letter_result+80  j		 /* DOS offset ---> EE2:E */
call	far ptr	677h:122h
add	sp, 4

loc_17776:				; CODE XREF: game_spy_betrayal_letter_query:loc_17765  j		 /* DOS offset ---> EE3:6 */
; dseg:27763  j
push	word_1C9FC
call	far ptr	0:316h
add	sp, 2
cmp	ax, 0FFFFh
jnz	short locret_17796
sub	ax, ax
push	ax
mov	ax, 3D96h
push	ax
call	far ptr	677h:122h
add	sp, 4

locret_17796:				; CODE XREF: game_spy_betrayal_letter_query-FF03  j
retf
; END OF FUNCTION CHUNK	FOR game_spy_betrayal_letter_query
;     ***************************************************************************
nop
push	bp
;     ***************************************************************************
db '    **/',0
align 4
db 0B8h	;   *
db  7Ch	; |
db  35h	; 5
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    2
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  47h	; G
;     ***************************************************************************

loc_177B0:				; CODE XREF: dseg:77F5  j		 /* DOS offset ---> EE7:0 */
call	far ptr	0:15B3h
call	far ptr	4B5h:8
mov	ax, 50h	; 'P'
push	ax
mov	ax, 14h
push	ax

loc_177C2:				; CODE XREF: game_spy_forged_letter_result+E3  j		 /* DOS offset ---> EE8:2 */
call	far ptr	3EFh:434h

loc_177C7:				; CODE XREF: game_spy_forged_letter_result+E8  j		 /* DOS offset ---> EE8:7 */
add	sp, 4
test	byte ptr word_1CEA2, 1
jz	short loc_177D6
mov	ax, 3DA2h
jmp	short loc_177D9
;     ***************************************************************************

loc_177D6:				; CODE XREF: dseg:77CF  j		 /* DOS offset ---> EE9:6 */
mov	ax, 3DCDh

loc_177D9:				; CODE XREF: dseg:77D4  j		 /* DOS offset ---> EE9:9 */
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2

loc_177E2:				; CODE XREF: game_spy_forged_letter_result+85  j		 /* DOS offset ---> EEA:2 */
call	far ptr	3EFh:79Ah
mov	ax, 357Ch
push	ax

loc_177EB:				; CODE XREF: dseg:277E4  j dseg:27898  p		 /* DOS offset ---> EEA:B */
call	far ptr	0:2E8h
add	sp, 2
or	ax, ax
jz	short loc_177B0
mov	sp, bp
pop	bp

locret_177FA:				; CODE XREF: game_spy_forged_letter_result+116  j
retf
;     ***************************************************************************
nop

loc_177FC:				; CODE XREF: game_spy_forged_letter-FF6E  p		 /* DOS offset ---> EEB:C */
push	bp
; START	OF FUNCTION CHUNK FOR game_spy_forged_letter_result

loc_177FD:				; CODE XREF: game_spy_forged_letter_result+11B  j		 /* DOS offset ---> EEB:D */
; dseg:27832  j
mov	bp, sp
sub	sp, 4
cmp	word_1CEA2, 0
jnz	short loc_17816
mov	word ptr [bp+var_4+2], 0A000h
mov	word ptr [bp+var_4], 3FF0h
jmp	short loc_17820
; END OF FUNCTION CHUNK	FOR game_spy_forged_letter_result
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_spy_forged_letter_result

loc_17816:				; CODE XREF: game_spy_forged_letter_result-FED5  j		 /* DOS offset ---> EED:6 */
mov	word ptr [bp+var_4+2], 0B800h
mov	word ptr [bp+var_4], 3FE0h

loc_17820:				; CODE XREF: game_spy_forged_letter_result-FEC9  j		 /* DOS offset ---> EEE:0 */
les	bx, [bp+var_4]

loc_17823:				; CODE XREF: game_spy_forged_letter_result+55  j		 /* DOS offset ---> EEE:3 */
; game_spy_forged_letter_result+76  j
mov	byte ptr es:[bx], 30h ;	'0'

loc_17827:				; CODE XREF: dseg:27804  j dseg:2781B  j ...		 /* DOS offset ---> EEE:7 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_forged_letter_result
;     ***************************************************************************
nop

loc_1782C:				; CODE XREF: game_spy_forged_letter-FF6A  p		 /* DOS offset ---> EEE:C */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  1Ch
db  9Ah	;   *
db  54h	; T
unk_17834	db    0			; CODE XREF: dseg:277FC  j
db 0B5h	;   *
db    4
db  0Eh
db 0E8h	;   *
db  5Dh	; ]
db 0FFh
db  9Ah	;   *
unk_1783C	db 0B2h	;   *		; CODE XREF: dseg:28512  p dseg:28526  p
db    0
db  77h	; w
db    6
db 0C6h	;   *
db  46h	; F
db 0F3h	;   *
db  4Ch	; L
db 0C6h	;   *
db  46h	; F
db 0F2h	;   *
db 0FFh
db  8Dh	;   *
db  46h	; F
db 0E4h	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0F2h	;   *
db  50h	; P
db  9Ah	;   *
db 0D0h	;   *
db  37h	; 7
db    0
db    0
db  83h	;   *
unk_17856	db 0C4h	;   *		; CODE XREF: game_spy_forged_letter_send_to_whom+1A  j
db    4
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db  9Ah	;   *
db  89h	;   *
db  36h	; 6
db    0
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
push	si

loc_1786B:				; CODE XREF: dseg:278A8  j		 /* DOS offset ---> EF2:B */
call	far ptr	0:15B3h
mov	word_13534, 0
sub	ax, ax
push	ax
call	far ptr	4B5h:0E6h
add	sp, 2
or	options_value, 3
mov	ax, 2
push	ax
mov	ax, 0E2A0h

loc_1788D:				; CODE XREF: game_spy_forged_letter_send_to_whom+4F  j		 /* DOS offset ---> EF4:D */
; game_spy_forged_letter_send_to_whom+60  j
sub	dx, dx
push	dx
push	ax
mov	ax, 10h
push	ax
mov	ax, 90h	; '  *'
push	ax
call	far ptr	4B5h:182h
add	sp, 0Ah

loc_178A1:				; CODE XREF: dseg:78A8  j dseg:2787D  j		 /* DOS offset ---> EF6:1 */
call	far ptr	6EBh:64h
or	ax, ax
jnz	short loc_178A1
mov	al, 0Ch
push	ax

loc_178AD:				; CODE XREF: game_spy_forged_letter+D  j		 /* DOS offset ---> EF6:D */
call	far ptr	6EBh:96h

loc_178B2:				; CODE XREF: dseg:27AA7  p		 /* DOS offset ---> EF7:2 */
add	sp, 2
mov	ax, 1
push	ax

loc_178B9:				; CODE XREF: dseg:279A1  j		 /* DOS offset ---> EF7:9 */
call	far ptr	4B5h:0E6h
add	sp, 2
mov	ax, 2DC4h
push	ax
call	far ptr	525h:4Ah
add	sp, 2
mov	bx, ax
mov	si, [bx]
push	word ptr [si+1Ah]
mov	ax, 28h	; '('
push	ax
mov	ax, 19h
push	ax
; START	OF FUNCTION CHUNK FOR game_spy_forged_letter

loc_178DC:				; CODE XREF: game_spy_forged_letter+25  j		 /* DOS offset ---> EF9:C */
; game_spy_forged_letter+35  j ...
mov	si, bx

loc_178DE:		 /* DOS offset ---> EF9:E */
call	far ptr	4B5h:6A4h

loc_178E3:				; CODE XREF: dseg:278DE  j		 /* DOS offset ---> EFA:3 */
add	sp, 6
mov	ax, [si]

loc_178E8:				; DATA XREF: dseg:1BFA1  w		 /* DOS offset ---> EFA:8 */
add	ax, 1Ch
push	ax
push	year_value
mov	ax, 3DFEh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
mov	al, 19h
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
push	si
push	cs
call	loc_1761C
add	sp, 2
push	cs
call	loc_176B6
mov	al, 60h	; '`'
push	ax

loc_17916:				; CODE XREF: dseg:27915  j		 /* DOS offset ---> EFD:6 */
call	far ptr	6EBh:3Ah
add	sp, 2

loc_1791E:				; CODE XREF: game_spy_forged_letter-FF71  j		 /* DOS offset ---> EFD:E */
call	far ptr	6EBh:64h
or	ax, ax
jnz	short loc_1791E
push	cs
call	loc_177FC
push	cs
call	loc_1782C
pop	si
mov	sp, bp
pop	bp

locret_17933:				; CODE XREF: dseg:278F5  j
retf
; END OF FUNCTION CHUNK	FOR game_spy_forged_letter
;     ***************************************************************************

loc_17934:				; CODE XREF: game_spy_rival_tigers_send_whom-FF58  p		 /* DOS offset ---> EFF:4 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
;     ***************************************************************************

loc_17937:				; CODE XREF: dseg:27996  j		 /* DOS offset ---> EFF:7 */
; game_spy_betrayal_result+53  j
push	word ptr [bp+6]
call	far ptr	525h:6
mov	sp, bp
mov	byte ptr loc_13F96+3, al
mov	word ptr loc_13F9C, 58h	; 'X'
mov	byte ptr loc_13F96+4, 0
; START	OF FUNCTION CHUNK FOR game_spy_betrayal_result

loc_1794F:				; CODE XREF: game_spy_betrayal_result-FF65  j		 /* DOS offset ---> F00:F */
mov	bx, word ptr loc_13F9C
cmp	byte ptr [bx+19h], 0
jz	short loc_1796D

loc_17959:				; CODE XREF: game_spy_betrayal_result+74  j		 /* DOS offset ---> F01:9 */
mov	al, byte ptr loc_13F96+3
cmp	[bx+0Dh], al
jnz	short loc_1796D
and	byte ptr [bx+2], 0D9h

loc_17965:				; CODE XREF: game_spy_betrayal_result+83  j		 /* DOS offset ---> F02:5 */
mov	bx, word ptr loc_13F9C
mov	byte ptr [bx+0Dh], 0FFh

loc_1796D:				; CODE XREF: game_spy_betrayal_result-FF89  j		 /* DOS offset ---> F02:D */
; game_spy_betrayal_result-FF81  j
add	word ptr loc_13F9C, 2Bh	; '+'

loc_17972:				; CODE XREF: game_spy_betrayal_result+80  j		 /* DOS offset ---> F03:2 */
inc	byte ptr loc_13F96+4
cmp	byte ptr loc_13F96+4, 0FFh
jb	short loc_1794F
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_betrayal_result
;     ***************************************************************************
nop

loc_17982:				; CODE XREF: dseg:7D0B  p		 /* DOS offset ---> F04:2 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0BAh	;   *
db    0
db  42h	; B
db    5
db  8Bh	;   *
db 0E5h	;   *
;     ***************************************************************************

loc_1798F:				; CODE XREF: dseg:27959  j dseg:2796D  j		 /* DOS offset ---> F04:F */
mov	word ptr loc_13FD7+1, ax
mov	bx, [bp+6]
mov	ax, [bx+2]

loc_17998:				; CODE XREF: dseg:278E0  j		 /* DOS offset ---> F05:8 */
mov	word ptr loc_13FD4+2, ax
or	ax, ax
jnz	short loc_179A2
jmp	loc_17A8E
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_spy_betrayal_result

loc_179A2:				; CODE XREF: dseg:799D  j		 /* DOS offset ---> F06:2 */
; game_spy_betrayal_result-FE55  j
push	ax

loc_179A3:				; CODE XREF: dseg:2799F  j		 /* DOS offset ---> F06:3 */
call	far ptr	542h:92h

loc_179A8:				; CODE XREF: dseg:27917  j dseg:27931  j ...		 /* DOS offset ---> F06:8 */
mov	sp, bp

loc_179AA:				; CODE XREF: game_spy_betrayal_result+A0  j		 /* DOS offset ---> F06:A */
or	ax, ax
jz	short loc_179B1

loc_179AE:				; CODE XREF: dseg:279A4  j		 /* DOS offset ---> F06:E */
jmp	loc_17A7E
;     ***************************************************************************

loc_179B1:				; CODE XREF: game_spy_betrayal_result-FF34  j		 /* DOS offset ---> F07:1 */
push	[bp+arg_0]

loc_179B4:				; CODE XREF: dseg:28657  p		 /* DOS offset ---> F07:4 */
mov	bx, word ptr loc_13FD4+2
mov	ax, [bx+2]
mov	word ptr unk_13FD2, ax
push	ax
call	far ptr	59Dh:1E8h
mov	sp, bp
mov	bx, word ptr unk_13FD2
mov	ax, [bx]
mov	word ptr unk_13FD2, ax

loc_179CF:				; CODE XREF: game_spy_betrayal_result+C8  j		 /* DOS offset ---> F08:F */
or	ax, ax
jnz	short loc_179D6
jmp	loc_17A7E
;     ***************************************************************************

loc_179D6:				; CODE XREF: game_spy_betrayal_result-FF0F  j		 /* DOS offset ---> F09:6 */
; game_spy_betrayal_result-FE65  j
mov	bx, word ptr unk_13FD2
mov	ax, [bx]
mov	word ptr loc_13FD4, ax
push	[bp+arg_0]
push	bx
call	far ptr	59Dh:1E8h
mov	sp, bp
mov	al, 0Ah

loc_179EC:				; CODE XREF: game_spy_betrayal_result+85  j		 /* DOS offset ---> F0A:C */
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
mov	sp, bp
add	al, 14h
mov	bx, word ptr unk_13FD2
cmp	al, [bx+0Bh]
jbe	short loc_17A71
push	bx
push	word ptr loc_13FD4+2
call	far ptr	59Dh:6A8h
mov	sp, bp
cmp	word ptr loc_13FD7+1, 0
jz	short loc_17A47
call	far ptr	4B5h:290h
mov	ax, word ptr unk_13FD2
add	ax, 1Ch
push	ax
push	word ptr loc_13FD4+2

loc_17A22:				; CODE XREF: game_spy_betrayal_result+11A  j		 /* DOS offset ---> F0E:2 */
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 3F9Eh

loc_17A3A:				; CODE XREF: game_spy_betrayal_result+142  j		 /* DOS offset ---> F0F:A */
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
call	far ptr	57Ch:126h

loc_17A47:				; CODE XREF: game_spy_betrayal_result-FED0  j		 /* DOS offset ---> F10:7 */
push	word ptr unk_13FD2

loc_17A4B:		 /* DOS offset ---> F10:B */
push	word ptr loc_13FD4+2

loc_17A4F:				; CODE XREF: game_spy_betrayal_result+55  j		 /* DOS offset ---> F10:F */
; game_spy_betrayal_result+76  j
call	far ptr	59Dh:428h

loc_17A54:		 /* DOS offset ---> F11:4 */
add	sp, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */

loc_17A5D:				; CODE XREF: dseg:27A96  j		 /* DOS offset ---> F11:D */
add	sp, 2
mov	bl, al
sub	bh, bh
shl	bx, 1

loc_17A66:				; CODE XREF: dseg:27A5D  j		 /* DOS offset ---> F12:6 */
push	word ptr [bx-359Eh]
call	far ptr	59Dh:190h
mov	sp, bp

loc_17A71:				; CODE XREF: game_spy_betrayal_result-FEE3  j		 /* DOS offset ---> F13:1 */
mov	ax, word ptr loc_13FD4
mov	word ptr unk_13FD2, ax
or	ax, ax
jz	short loc_17A7E
jmp	loc_179D6
;     ***************************************************************************

loc_17A7E:				; CODE XREF: game_spy_betrayal_result:loc_179AE  j		 /* DOS offset ---> F13:E */
; game_spy_betrayal_result-FF0D  j ...
mov	bx, word ptr loc_13FD4+2
mov	ax, [bx]

loc_17A84:				; CODE XREF: game_spy_betrayal_invite_whom_select+1A  j		 /* DOS offset ---> F14:4 */
mov	word ptr loc_13FD4+2, ax
or	ax, ax
jz	short loc_17A8E
jmp	loc_179A2
;     ***************************************************************************

loc_17A8E:				; CODE XREF: dseg:799F  j		 /* DOS offset ---> F14:E */
; game_spy_betrayal_result-FE57  j
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_betrayal_result
;     ***************************************************************************

loc_17A90:				; CODE XREF: game_spy_tiger_and_wolf_result-FEC2  p		 /* DOS offset ---> F15:0 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
unk_17A92	db 0ECh	;   *		; CODE XREF: dseg:27A8B  j
db  83h	;   *
db 0ECh	;   *
db    2
db  56h	; V
db 0C7h	;   *
db    6
db 0DEh	;   *
db  3Fh	; ?
db    0
db    0
db 0C6h	;   *
db    6
db 0E0h	;   *
db  3Fh	; ?
db    0
db 0C7h	;   *
db    6
db 0DAh	;   *
db  3Fh	; ?
db 0B2h	;   *
db 0CEh	;   *
db 0EBh	;   *
db  2Ch	; ,
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_spy_betrayal

loc_17AAA:				; CODE XREF: game_spy_betrayal-FFE3  j		 /* DOS offset ---> F16:A */
mov	bx, ax
mov	si, [bp+arg_0]
mov	ax, [si+10h]

loc_17AB2:				; CODE XREF: dseg:27A37  j dseg:27A6E  j ...		 /* DOS offset ---> F17:2 */
test	[bx+10h], ax
jz	short loc_17AD1

loc_17AB7:				; CODE XREF: dseg:27B2F  p		 /* DOS offset ---> F17:7 */
mov	al, [bx+9]

loc_17ABA:				; CODE XREF: game_spy_betrayal_invite_whom_select+4F  j		 /* DOS offset ---> F17:A */
; game_spy_betrayal_invite_whom_select+60  j
mov	byte ptr loc_13FDF+2, al
mov	al, byte ptr loc_13FDF+1
cmp	byte ptr loc_13FDF+2, al

loc_17AC4:				; CODE XREF: dseg:27AE7  j		 /* DOS offset ---> F18:4 */
jbe	short loc_17AD1
mov	ax, bx
mov	word ptr loc_13FDE, ax
mov	al, byte ptr loc_13FDF+2
mov	byte ptr loc_13FDF+1, al

loc_17AD1:				; CODE XREF: game_spy_betrayal-1000F  j		 /* DOS offset ---> F19:1 */
; game_spy_betrayal:loc_17AC4  j
add	word ptr loc_13FDA, 2
mov	bx, word ptr loc_13FDA
mov	ax, [bx]

loc_17ADC:				; CODE XREF: game_spy_betrayal+D  j		 /* DOS offset ---> F19:C */
mov	word ptr loc_13FDC, ax
or	ax, ax
jnz	short loc_17AAA
cmp	word ptr loc_13FDE, ax
jnz	short loc_17B42

loc_17AE9:				; CODE XREF: dseg:27AC2  j		 /* DOS offset ---> F1A:9 */
mov	byte ptr loc_13FDF+1, 0
mov	word ptr loc_13FDA, 0CEB2h
jmp	short loc_17B35
;     ***************************************************************************

loc_17AF6:				; CODE XREF: game_spy_betrayal:loc_17B40  j		 /* DOS offset ---> F1B:6 */
push	[bp+arg_0]
push	ax
call	far ptr	60Dh:630h
add	sp, 4
shr	al, 1
push	word ptr loc_13FDC

loc_17B08:				; CODE XREF: game_spy_betrayal+25  j		 /* DOS offset ---> F1C:8 */
; game_spy_betrayal+35  j ...
mov	[bp+var_2], ax

loc_17B0B:		 /* DOS offset ---> F1C:B */
call	far ptr	60Dh:44Ah
add	sp, 2
sub	al, byte ptr [bp+var_2]
add	al, 32h	; '2'
mov	byte ptr loc_13FDF+2, al
mov	al, byte ptr loc_13FDF+1
cmp	byte ptr loc_13FDF+2, al
jbe	short loc_17B30
mov	ax, word ptr loc_13FDC
mov	word ptr loc_13FDE, ax
mov	al, byte ptr loc_13FDF+2
mov	byte ptr loc_13FDF+1, al

loc_17B30:				; CODE XREF: game_spy_betrayal-FFA2  j		 /* DOS offset ---> F1F:0 */
add	word ptr loc_13FDA, 2

loc_17B35:				; CODE XREF: game_spy_betrayal-FFD0  j		 /* DOS offset ---> F1F:5 */
mov	bx, word ptr loc_13FDA
mov	ax, [bx]
mov	word ptr loc_13FDC, ax
or	ax, ax

loc_17B40:				; CODE XREF: dseg:27B39  j		 /* DOS offset ---> F20:0 */
jnz	short loc_17AF6

loc_17B42:				; CODE XREF: game_spy_betrayal-FFDD  j		 /* DOS offset ---> F20:2 */
; dseg:27B3D  j
mov	ax, word ptr loc_13FDE
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_betrayal
;     ***************************************************************************
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
unk_17B4E	db 0ECh	;   *		; CODE XREF: dseg:27B47  j
db    6
;     ***************************************************************************

loc_17B50:				; CODE XREF: dseg:27B4B  j		 /* DOS offset ---> F21:0 */
push	si
mov	byte ptr [bp-2], 0
jmp	short loc_17B5B
;     ***************************************************************************
nop

loc_17B58:				; CODE XREF: dseg:7B69  j		 /* DOS offset ---> F21:8 */
inc	byte ptr [bp-2]

loc_17B5B:				; CODE XREF: dseg:7B55  j		 /* DOS offset ---> F21:B */
mov	bl, [bp-2]

loc_17B5E:				; CODE XREF: dseg:27B20  j		 /* DOS offset ---> F21:E */
sub	bh, bh
shl	bx, 1
mov	ax, [bp+8]

loc_17B65:				; CODE XREF: game_spy_tiger_and_wolf_result+53  j		 /* DOS offset ---> F22:5 */
cmp	[bx-314Eh], ax
jnz	short loc_17B58
mov	bl, [bp-2]
sub	bh, bh
mov	al, [bx+3E2Ah]
push	ax

loc_17B75:				; CODE XREF: dseg:27CBB  p		 /* DOS offset ---> F23:5 */
call	far ptr	525h:76h
add	sp, 2
mov	bx, ax
mov	[bp-4],	bx
and	byte ptr [bx+12h], 0FBh
push	bx
; START	OF FUNCTION CHUNK FOR game_spy_tiger_and_wolf_result

loc_17B87:				; CODE XREF: game_spy_tiger_and_wolf_result+74  j		 /* DOS offset ---> F24:7 */
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_17BD4
push	[bp+var_4]
call	far ptr	525h:4Ah

loc_17B9B:				; CODE XREF: game_spy_tiger_and_wolf_result+80  j		 /* DOS offset ---> F25:B */
add	sp, 2
cmp	ax, [bp+arg_0]
jnz	short loc_17BF0
mov	bx, ax
mov	ax, [bp+var_4]
cmp	[bx+2],	ax
jz	short loc_17BF0
push	ax
push	bx
call	far ptr	59Dh:34h
add	sp, 4
mov	[bp+var_6], ax
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	si, [bp+var_6]
mov	[si], ax

loc_17BC4:				; CODE XREF: dseg:27BBE  j		 /* DOS offset ---> F28:4 */
mov	si, [bp+arg_0]
mov	ax, [si+2]
mov	[bx], ax
mov	[si+2],	bx
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_17BD4:				; CODE XREF: game_spy_tiger_and_wolf_result-FF7D  j		 /* DOS offset ---> F29:4 */
; game_spy_tiger_and_wolf_result+BF  j
push	[bp+arg_2]

loc_17BD7:				; CODE XREF: game_spy_tiger_and_wolf_result+C4  j		 /* DOS offset ---> F29:7 */
push	[bp+var_4]
call	far ptr	59Dh:6A8h
add	sp, 4

loc_17BE2:				; CODE XREF: dseg:27BAB  j		 /* DOS offset ---> F2A:2 */
push	[bp+arg_2]
push	[bp+var_4]

loc_17BE8:				; CODE XREF: dseg:27CCF  p		 /* DOS offset ---> F2A:8 */
call	far ptr	59Dh:5CEh
add	sp, 4

loc_17BF0:				; CODE XREF: game_spy_tiger_and_wolf_result-FF6D  j		 /* DOS offset ---> F2B:0 */
; game_spy_tiger_and_wolf_result-FF63  j
pop	si

loc_17BF1:				; CODE XREF: game_spy_tiger_and_wolf_result+83  j		 /* DOS offset ---> F2B:1 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_tiger_and_wolf_result
;     ***************************************************************************
nop
push	bp
mov	bp, sp
push	word ptr [bp+6]
mov	ax, 3FE2h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp

locret_17C08:				; CODE XREF: game_spy_tiger_and_wolf_result+F2  j
retf
;     ***************************************************************************
nop

loc_17C0A:				; CODE XREF: game_spy_rival_tigers_send_whom-FE57  p		 /* DOS offset ---> F2C:A */
push	bp
; START	OF FUNCTION CHUNK FOR game_spy_tiger_and_wolf_result

loc_17C0B:				; CODE XREF: game_spy_tiger_and_wolf_result+F7  j		 /* DOS offset ---> F2C:B */
mov	bp, sp
sub	sp, 2
push	[bp+arg_0]

loc_17C13:				; CODE XREF: dseg:27C11  j		 /* DOS offset ---> F2D:3 */
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_17C48

loc_17C1F:		 /* DOS offset ---> F2D:F */
mov	word_13578, 0
mov	ax, [bp+arg_2]
add	ax, 1Ch
push	ax
mov	ax, 2C6h
mov	dx, 793h
push	dx
push	ax
sub	al, al
push	ax
mov	al, [bp+arg_4]
push	ax
mov	al, 3
push	ax

loc_17C3E:				; CODE XREF: game_spy_tiger_and_wolf_result+12B  j		 /* DOS offset ---> F2F:E */
call	far ptr	60Dh:2F6h

loc_17C43:				; CODE XREF: game_spy_tiger_and_wolf_result+130  j		 /* DOS offset ---> F30:3 */
add	sp, 0Ch
jmp	short loc_17C52
;     ***************************************************************************

loc_17C48:				; CODE XREF: game_spy_tiger_and_wolf_result-FEF1  j		 /* DOS offset ---> F30:8 */
push	[bp+arg_2]
push	cs
call	loc_17A90
add	sp, 2

loc_17C52:				; CODE XREF: game_spy_tiger_and_wolf_result-FEC8  j		 /* DOS offset ---> F31:2 */
mov	word_1402A, ax
call	far ptr	4B5h:290h

loc_17C5A:				; CODE XREF: game_spy_tiger_and_wolf_result+55  j		 /* DOS offset ---> F31:A */
; game_spy_tiger_and_wolf_result+76  j
mov	ax, word_1402A
add	ax, 1Ch

loc_17C60:				; CODE XREF: dseg:27C4A  j		 /* DOS offset ---> F32:0 */
push	ax

loc_17C61:				; CODE XREF: dseg:27C5B  j		 /* DOS offset ---> F32:1 */
mov	ax, 3FF9h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
call	far ptr	57Ch:15Eh
push	word_1402A

loc_17C76:				; CODE XREF: game_spy_tiger_and_wolf+D  j		 /* DOS offset ---> F33:6 */
call	far ptr	59Dh:0BEh

loc_17C7B:				; CODE XREF: game_spy_tiger_and_wolf+65  j		 /* DOS offset ---> F33:B */
; game_spy_tiger_and_wolf+75  j ...
add	sp, 2
push	[bp+arg_0]
call	far ptr	542h:42h
add	sp, 2
or	ax, ax
jz	short loc_17C90
jmp	loc_17D14
;     ***************************************************************************

loc_17C90:				; CODE XREF: game_spy_tiger_and_wolf_result-FE83  j		 /* DOS offset ---> F35:0 */
mov	bx, [bp+arg_0]
mov	ax, [bx+2]

loc_17C96:				; CODE XREF: dseg:27C13  j		 /* DOS offset ---> F35:6 */
mov	word_1402C, ax
or	ax, ax
jz	short loc_17CD8
mov	bx, ax

loc_17C9F:				; CODE XREF: game_spy_tiger_and_wolf+3C  j		 /* DOS offset ---> F35:F */
mov	ax, [bp+arg_2]
cmp	[bx+2],	ax
jnz	short loc_17CD8
push	ax
push	bx
call	far ptr	59Dh:6A8h
add	sp, 4
mov	bx, word_1402C
and	byte ptr [bx+12h], 0FBh
mov	bx, word_1402C

loc_17CBD:		 /* DOS offset ---> F37:D */
cmp	word ptr [bx+2], 0
jnz	short loc_17CD8
push	bx
call	far ptr	59Dh:50Eh

loc_17CC9:				; CODE XREF: dseg:27CAC  j		 /* DOS offset ---> F38:9 */
add	sp, 2
push	word_1402C
call	far ptr	4B5h:3F4h
add	sp, 2

loc_17CD8:				; CODE XREF: game_spy_tiger_and_wolf_result-FE73  j		 /* DOS offset ---> F39:8 */
; game_spy_tiger_and_wolf_result-FE69  j	...
push	[bp+arg_2]
call	far ptr	59Dh:692h
add	sp, 2
mov	ax, word_1402A
mov	bx, [bp+arg_0]
mov	[bx], ax
; END OF FUNCTION CHUNK	FOR game_spy_tiger_and_wolf_result
;     ***************************************************************************
db 0FFh
word_17CEC	dw 2A36h		; DATA XREF: game_spy_infiltrate_withdraw+13  r
; game_spy_infiltrate_verify+25  r
word_17CEE	dw 5340h		; DATA XREF: game_spy_forged_letter+18  r
; game_spy_betrayal+18  r
word_17CF0	dw 0E80Eh		; DATA XREF: game_spy_infiltrate_withdraw_output+17  r
; game_spy_infiltrate_verify+68  r
word_17CF2	dw 0FE56h		; DATA XREF: game_spy_forged_letter_send_to_whom+1C  r
; game_spy_betrayal_invite_whom_select+1C  r
;     ***************************************************************************
add	sp, 4
mov	bx, [bp+6]
mov	ax, word_1402A
cmp	[bx+4],	ax
jnz	short loc_17D07
mov	word ptr [bx+4], 0

loc_17D07:				; CODE XREF: dseg:7D00  j		 /* DOS offset ---> F3C:7 */
push	word ptr [bp+6]
push	cs
call	loc_17982
add	sp, 2
jmp	short loc_17D7A
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_spy_tiger_and_wolf_result

loc_17D14:				; CODE XREF: game_spy_tiger_and_wolf_result-FE81  j		 /* DOS offset ---> F3D:4 */
mov	bx, [bp+arg_2]
mov	ax, word_1402A
cmp	[bx], ax
jz	short loc_17D42

loc_17D1E:				; CODE XREF: dseg:27E8D  p		 /* DOS offset ---> F3D:E */
push	ax
push	word ptr [bx]
call	far ptr	59Dh:7Eh
add	sp, 4
mov	[bp+var_2], ax
mov	bx, word_1402A
mov	ax, [bx]

loc_17D32:				; CODE XREF: game_spy_tiger_and_wolf+CF  j		 /* DOS offset ---> F3F:2 */
mov	bx, [bp+var_2]
mov	[bx], ax
mov	bx, [bp+arg_2]
mov	ax, [bx]
mov	bx, word_1402A
mov	[bx], ax

loc_17D42:				; CODE XREF: game_spy_tiger_and_wolf_result-FDF2  j		 /* DOS offset ---> F40:2 */
mov	ax, word_1402A
mov	bx, [bp+arg_0]
mov	[bx], ax
push	[bp+arg_2]
call	far ptr	59Dh:692h

loc_17D52:				; CODE XREF: game_spy_tiger_and_wolf+3E  j		 /* DOS offset ---> F41:2 */
add	sp, 2
mov	bx, word_1402A
mov	ax, [bx]
mov	[bp+arg_2], ax
or	ax, ax
jz	short loc_17D7A

loc_17D62:				; CODE XREF: game_spy_tiger_and_wolf_result-FD96  j		 /* DOS offset ---> F42:2 */
push	[bp+arg_0]
push	ax

loc_17D66:				; CODE XREF: game_spy_tiger_and_wolf+E3  j		 /* DOS offset ---> F42:6 */
call	far ptr	59Dh:1E8h
add	sp, 4
mov	bx, [bp+arg_2]
mov	ax, [bx]
mov	[bp+arg_2], ax
or	ax, ax
jnz	short loc_17D62

loc_17D7A:				; CODE XREF: dseg:7D11  j		 /* DOS offset ---> F43:A */
; game_spy_tiger_and_wolf_result-FDAE  j
mov	bx, [bp+arg_0]
and	byte ptr [bx+7], 7Dh

loc_17D81:				; CODE XREF: game_spy_tiger_and_wolf+FA  j		 /* DOS offset ---> F44:1 */
; game_spy_tiger_and_wolf+117  j
mov	byte ptr [bx+21h], 0FFh

loc_17D85:		 /* DOS offset ---> F44:5 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_tiger_and_wolf_result
;     ***************************************************************************
nop

loc_17D8A:				; CODE XREF: game_spy_rival_tigers_send_whom-FF93  p		 /* DOS offset ---> F44:A */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db 0C6h	;   *
db    6
db  2Eh	; .
db  40h	; @
db    0
db 0C7h	;   *
db    6
db  32h	; 2
db  40h	; @
unk_17D96	db 0B2h	;   *		; CODE XREF: dseg:27D5C  j dseg:27D64  j ...
db 0CEh	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  42h	; B
db    0
unk_17D9E	db  42h	; B		; CODE XREF: game_spy_rival_tigers_ruler_2_result+A  j
; dseg:2803A  p
db    5
db  8Bh	;   *
db 0E5h	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  30h	; 0
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  1Fh
db  8Bh	;   *
db    7
db 0A3h	;   *
db  34h	; 4
db  40h	; @
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db  0Eh
db    1
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_spy_rival_tigers_ruler_2_result

loc_17DB7:				; CODE XREF: game_spy_rival_tigers_ruler_2_result-FFB5  j		 /* DOS offset ---> F47:7 */
; game_spy_rival_tigers_ruler_2_result+2B  j
mov	bx, word_14032
mov	[bx], ax

loc_17DBD:				; CODE XREF: game_spy_rival_tigers_ruler_2_result+25  j		 /* DOS offset ---> F47:D */
add	word_14032, 2
inc	byte_1402E
mov	bx, word_14034

loc_17DCA:				; CODE XREF: game_spy_rival_tigers_ruler_2_result+3C  j		 /* DOS offset ---> F48:A */
mov	ax, [bx]

loc_17DCC:				; CODE XREF: game_spy_rival_tigers_ruler_2_result+30  j		 /* DOS offset ---> F48:C */
; game_spy_rival_tigers_ruler_2_result+35  j ...
mov	word_14034, ax
or	ax, ax
jnz	short loc_17DB7
jmp	loc_17EC5
; END OF FUNCTION CHUNK	FOR game_spy_rival_tigers_ruler_2_result
;     ***************************************************************************
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db    6
db    0
db  25h	; %
db    5
db  8Bh	;   *
db 0E5h	;   *
db 0A2h	;   *
db  2Fh	; /
db  40h	; @
db 0C7h	;   *
db    6
db  36h	; 6
db  40h	; @
db 0C4h	;   *
unk_17DE8	db  2Dh	; -		; CODE XREF: game_spy_rival_tigers_ruler_2_result+D  j
db 0C6h	;   *
db    6
db  30h	; 0
db  40h	; @
db    0
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_spy_rival_tigers_ruler_2_result

loc_17DEE:				; CODE XREF: game_spy_rival_tigers_ruler_2_result-FEC4  j		 /* DOS offset ---> F4A:E */
; dseg:27DDA  j ...
push	word_14036
call	far ptr	525h:4Ah
mov	sp, bp
mov	word_14038, ax
push	word_14036

loc_17E00:				; CODE XREF: game_spy_rival_tigers_ruler_2_result+75  j		 /* DOS offset ---> F4C:0 */
call	far ptr	542h:92h
mov	sp, bp

loc_17E07:				; CODE XREF: game_spy_rival_tigers_ruler_2_result+6F  j		 /* DOS offset ---> F4C:7 */
or	ax, ax
jz	short loc_17E68
mov	ax, [bp+arg_0]
cmp	word_14038, ax
jnz	short loc_17E42

loc_17E14:				; CODE XREF: game_spy_rival_tigers_ruler_2_result+86  j		 /* DOS offset ---> F4D:4 */
; game_spy_rival_tigers_ruler_2_result+7A  j ...
push	word_14036
call	far ptr	59Dh:6
mov	sp, bp
mov	al, byte_14030

loc_17E22:				; CODE XREF: dseg:27EC4  j		 /* DOS offset ---> F4E:2 */
mov	bl, byte_1402E
sub	bh, bh
mov	[bx+3E2Ah], al
mov	ax, word ptr loc_1CB76

loc_17E2F:				; CODE XREF: game_spy_rival_tigers_ruler_2_result-FF20  j		 /* DOS offset ---> F4E:F */
mov	bx, word_14032
mov	[bx], ax
add	word_14032, 2
inc	byte_1402E
jmp	short loc_17EB2
; END OF FUNCTION CHUNK	FOR game_spy_rival_tigers_ruler_2_result
;     ***************************************************************************
nop
nop
; START	OF FUNCTION CHUNK FOR game_spy_rival_tigers_ruler_2_result

loc_17E42:				; CODE XREF: game_spy_rival_tigers_ruler_2_result-FF74  j		 /* DOS offset ---> F50:2 */
; game_spy_rival_tigers_ruler_1_result+D  j
mov	bx, word_14036
mov	al, byte_1402F
cmp	[bx+11h], al

loc_17E4C:				; CODE XREF: game_spy_rival_tigers_ruler_1_result+A  j		 /* DOS offset ---> F50:C */
jnz	short loc_17EB2
push	bx
call	far ptr	59Dh:6
mov	sp, bp
mov	al, byte_14030
mov	bl, byte_1402E
sub	bh, bh
mov	[bx+3E2Ah], al
mov	ax, word ptr loc_1CB8A
jmp	short loc_17E2F
;     ***************************************************************************

loc_17E68:				; CODE XREF: game_spy_rival_tigers_ruler_2_result-FF7D  j		 /* DOS offset ---> F52:8 */
mov	ax, [bp+arg_0]
cmp	word_14038, ax
jnz	short loc_17EB2
mov	bx, word_14036
mov	ax, [bx+2]
mov	word_14034, ax
or	ax, ax
jz	short loc_17EB2

loc_17E7F:				; CODE XREF: game_spy_rival_tigers_ruler_2_result-FED6  j		 /* DOS offset ---> F53:F */
mov	bx, [bp+arg_0]
cmp	[bx], ax

loc_17E84:				; CODE XREF: game_spy_rival_tigers_ruler_1_result+27  j		 /* DOS offset ---> F54:4 */
jz	short loc_17EA5
mov	al, byte_14030
mov	bl, byte_1402E
sub	bh, bh
mov	[bx+3E2Ah], al
mov	ax, word_14034
mov	bx, word_14032
mov	[bx], ax
add	word_14032, 2
inc	byte_1402E

loc_17EA5:				; CODE XREF: game_spy_rival_tigers_ruler_2_result:loc_17E84  j		 /* DOS offset ---> F56:5 */
mov	bx, word_14034

loc_17EA9:				; CODE XREF: game_spy_rival_tigers_ruler_1_result+4F  j		 /* DOS offset ---> F56:9 */
mov	ax, [bx]

loc_17EAB:				; CODE XREF: dseg:27E95  j		 /* DOS offset ---> F56:B */
mov	word_14034, ax
or	ax, ax
jnz	short loc_17E7F

loc_17EB2:				; CODE XREF: game_spy_rival_tigers_ruler_2_result-FF48  j		 /* DOS offset ---> F57:2 */
; game_spy_rival_tigers_ruler_2_result:loc_17E4C  j ...
add	word_14036, 23h	; '#'
inc	byte_14030

loc_17EBB:				; CODE XREF: dseg:27E50  j dseg:27E64  j ...		 /* DOS offset ---> F57:B */
cmp	byte_14030, 29h	; ')'
jnb	short loc_17EC5
jmp	loc_17DEE
;     ***************************************************************************

loc_17EC5:				; CODE XREF: game_spy_rival_tigers_ruler_2_result-FFB3  j		 /* DOS offset ---> F58:5 */
; game_spy_rival_tigers_ruler_2_result-FEC6  j ...
mov	bx, word_14032
mov	word ptr [bx], 0
mov	al, byte_1402E
mov	sp, bp

loc_17ED2:				; CODE XREF: dseg:27ECB  j		 /* DOS offset ---> F59:2 */
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_rival_tigers_ruler_2_result
;     ***************************************************************************

loc_17ED4:				; CODE XREF: dseg:27ECF  j		 /* DOS offset ---> F59:4 */
mov	ax, word_1CEB2
mov	word ptr loc_140D7+1, ax
push	ax
call	far ptr	525h:30h

loc_17EE0:				; CODE XREF: dseg:27FE8  j		 /* DOS offset ---> F5A:0 */
add	sp, 2

loc_17EE3:				; CODE XREF: dseg:27FDC  j		 /* DOS offset ---> F5A:3 */
mov	word ptr loc_140CB+1, ax
mov	al, byte_1356A
mov	byte ptr loc_140D1+3, al
mov	ax, 4
push	ax
mov	ax, 0C724h
sub	dx, dx

loc_17EF5:				; CODE XREF: dseg:27EF0  j		 /* DOS offset ---> F5B:5 */
push	dx
push	ax
call	far ptr	4B5h:1F8h
add	sp, 6

loc_17EFF:				; DATA XREF: dseg:3AEF9  w		 /* DOS offset ---> F5B:F */
call	far ptr	4B5h:290h
mov	al, 0Eh
push	ax
call	far ptr	6EBh:96h
add	sp, 2
sub	al, al
push	ax
call	far ptr	6EBh:100h

loc_17F17:				; CODE XREF: game_spy_rival_tigers_ruler_1_result+17  j		 /* DOS offset ---> F5D:7 */
add	sp, 2

loc_17F1A:				; CODE XREF: dseg:27F17  j		 /* DOS offset ---> F5D:A */
mov	ax, word ptr loc_140D7+1
add	ax, 1Ch
push	ax
push	word ptr loc_140CB+1
call	far ptr	542h:0BAh
add	sp, 2
cmp	ax, 1
sbb	bx, bx
neg	bx
shl	bx, 1
;     ***************************************************************************
db 0FFh
db 0B7h	;   *
db 0C8h	;   *
db  40h	; @
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
unk_17F40	db 0C4h	;   *		; CODE XREF: dseg:27F33  j dseg:27F3B  j
db    4
db 0B0h	;   *
db  20h
db  50h	; P
db  9Ah	;   *
db  7Ch	; |
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  9Ah	;   *
db  20h
db    3
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db 0FFh
db  36h	; 6
db 0CCh	;   *
db  40h	; @
db  9Ah	;   *
db    6
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db 0A2h	;   *
db 0D2h	;   *
db  40h	; @
;     ***************************************************************************
mov	bx, 0CAF8h
mov	word ptr loc_140CF+1, bx
cmp	word ptr [bx], 0
jz	short loc_17FA0
; START	OF FUNCTION CHUNK FOR game_spy_rival_tigers_send_whom

loc_17F74:				; CODE XREF: game_spy_rival_tigers_send_whom-FFCA  j		 /* DOS offset ---> F63:4 */
mov	bx, [bx]
mov	al, byte ptr loc_140D1+1
cmp	[bx+21h], al
jnz	short loc_17F92
mov	bx, word ptr loc_140CF+1

loc_17F82:				; CODE XREF: game_spy_rival_tigers_send_whom+15  j		 /* DOS offset ---> F64:2 */
mov	bx, [bx]
mov	byte ptr [bx+21h], 0FFh
mov	bx, word ptr loc_140CF+1
mov	bx, [bx]
or	byte ptr [bx+7], 2

loc_17F92:				; CODE XREF: game_spy_rival_tigers_send_whom-FFEC  j		 /* DOS offset ---> F65:2 */
add	word ptr loc_140CF+1, 2
mov	bx, word ptr loc_140CF+1
cmp	word ptr [bx], 0
jnz	short loc_17F74

loc_17FA0:				; CODE XREF: dseg:7F72  j		 /* DOS offset ---> F66:0 */
mov	bx, word ptr loc_140CB+1
or	byte ptr [bx+7], 1

loc_17FA8:				; CODE XREF: game_spy_rival_tigers_send_whom+32  j		 /* DOS offset ---> F66:8 */
mov	ax, 28h	; '('
push	ax
mov	ax, 3F2Ah
push	ax
mov	ax, 0CB72h
push	ax
call	far ptr	561h:8
add	sp, 6
mov	ax, 47h	; 'G'
push	ax
mov	ax, 3F52h
push	ax
mov	ax, 0CAA1h
push	ax
call	far ptr	561h:8
add	sp, 6

loc_17FD0:				; CODE XREF: dseg:27EF2  j dseg:27F19  j ...		 /* DOS offset ---> F69:0 */
push	word ptr loc_140CB+1
push	cs
call	loc_17D8A
add	sp, 2
mov	byte ptr loc_140D1+1, al

loc_17FDE:				; CODE XREF: dseg:27FDA  j		 /* DOS offset ---> F69:E */
or	al, al
jz	short loc_17FE5
jmp	loc_18104
;     ***************************************************************************

loc_17FE5:				; CODE XREF: game_spy_rival_tigers_send_whom-FF88  j		 /* DOS offset ---> F6A:5 */
push	word ptr loc_140CB+1

loc_17FE9:				; CODE XREF: dseg:27FE6  j		 /* DOS offset ---> F6A:9 */
call	far ptr	542h:0BAh
add	sp, 2
mov	word ptr loc_140DC+2, ax

loc_17FF4:				; CODE XREF: game_spy_rival_tigers+41  j		 /* DOS offset ---> F6B:4 */
; game_spy_rival_tigers+45  j
push	word ptr loc_140CB+1

loc_17FF8:				; CODE XREF: game_spy_rival_tigers+4C  j		 /* DOS offset ---> F6B:8 */
call	far ptr	525h:6
add	sp, 2
mov	byte ptr loc_140D1+2, al
mov	bl, al
sub	bh, bh

loc_18007:				; CODE XREF: dseg:27FC4  j dseg:27FCA  j ...		 /* DOS offset ---> F6C:7 */
mov	[bx+3360h], bh
push	word ptr loc_140CB+1
push	cs
call	loc_17934
add	sp, 2

loc_18016:				; CODE XREF: game_spy_rival_tigers+6B  j		 /* DOS offset ---> F6D:6 */
mov	bx, word ptr loc_140CB+1
mov	ax, [bx+2]
mov	word ptr loc_140DC, ax
or	ax, ax
jz	short loc_18042
push	ax
call	far ptr	59Dh:50Eh
add	sp, 2
push	word ptr loc_140DC
call	far ptr	4B5h:3F4h
add	sp, 2
mov	bx, word ptr loc_140CB+1
mov	word ptr [bx+2], 0

loc_18042:				; CODE XREF: game_spy_rival_tigers_send_whom-FF46  j		 /* DOS offset ---> F70:2 */
; dseg:281CB  p
push	word ptr loc_140D7+1
call	far ptr	59Dh:692h
add	sp, 2

loc_1804E:				; CODE XREF: game_spy_rival_tigers+A1  j		 /* DOS offset ---> F70:E */
mov	bx, word ptr loc_140CB+1
mov	word ptr [bx], 0
mov	bx, word ptr loc_140CB+1

loc_1805A:				; CODE XREF: game_spy_rival_tigers+A5  j		 /* DOS offset ---> F71:A */
mov	byte ptr [bx+22h], 0FFh
mov	ax, word ptr loc_140D7+1
add	ax, 1Ch
push	ax
mov	ax, 40A1h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
dec	byte_10047
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
add	sp, 2
mov	ax, 1
push	ax
call	far ptr	59Dh:320h
add	sp, 2
mov	byte ptr loc_140D1+1, al
mov	word ptr loc_140CF+1, 0CAF8h
jmp	short loc_180BB
;     ***************************************************************************

loc_18098:				; CODE XREF: game_spy_rival_tigers_send_whom-FEA2  j		 /* DOS offset ---> F75:8 */
mov	bx, ax
mov	al, byte ptr loc_140D1+2

loc_1809D:				; CODE XREF: game_spy_rival_tigers_send_whom+17  j		 /* DOS offset ---> F75:D */
; game_spy_rival_tigers+6D  j ...
cmp	[bx+1Eh], al
jnz	short loc_180A6
mov	byte ptr [bx+1Eh], 0FFh

loc_180A6:				; CODE XREF: game_spy_rival_tigers_send_whom-FEC8  j		 /* DOS offset ---> F76:6 */
mov	bx, word ptr loc_140CB+3
mov	al, byte ptr loc_140D1+2
cmp	[bx+9],	al

loc_180B0:				; CODE XREF: dseg:2809C  j		 /* DOS offset ---> F77:0 */
jnz	short loc_180B6

loc_180B2:				; CODE XREF: dseg:280AD  j		 /* DOS offset ---> F77:2 */
mov	byte ptr [bx+9], 0FFh

loc_180B6:				; CODE XREF: game_spy_rival_tigers_send_whom:loc_180B0  j		 /* DOS offset ---> F77:6 */
; game_spy_rival_tigers+107  j
add	word ptr loc_140CF+1, 2

loc_180BB:				; CODE XREF: game_spy_rival_tigers_send_whom-FED2  j		 /* DOS offset ---> F77:B */
mov	bx, word ptr loc_140CF+1
mov	ax, [bx]
mov	word ptr loc_140CB+3, ax
or	ax, ax
jnz	short loc_18098
cmp	byte ptr loc_140D1+1, 0

loc_180CD:				; DATA XREF: dseg:133F  w		 /* DOS offset ---> F78:D */
jz	short loc_180DE
cmp	word ptr loc_140DC+2, ax

loc_180D3:				; CODE XREF: game_spy_rival_tigers+119  j		 /* DOS offset ---> F79:3 */
jz	short loc_18117
call	far ptr	542h:2
or	ax, ax

loc_180DC:				; CODE XREF: game_spy_rival_tigers+163  j		 /* DOS offset ---> F79:C */
jz	short loc_18117

loc_180DE:				; CODE XREF: game_spy_rival_tigers_send_whom:loc_180CD  j		 /* DOS offset ---> F79:E */
test	options_value, 4
jnz	short loc_180FD
call	far ptr	4B5h:266h
mov	ax, 4
push	ax
mov	ax, 0C724h
sub	dx, dx
push	dx
push	ax
call	far ptr	4B5h:1F8h

loc_180FA:		 /* DOS offset ---> F7B:A */
add	sp, 6

loc_180FD:				; CODE XREF: game_spy_rival_tigers_send_whom-FE85  j		 /* DOS offset ---> F7B:D */
call	far ptr	0A95h:4
jmp	short loc_18117
;     ***************************************************************************

loc_18104:				; CODE XREF: game_spy_rival_tigers_send_whom-FF86  j		 /* DOS offset ---> F7C:4 */
; game_spy_rival_tigers+141  j
mov	al, byte ptr loc_140D1+1
push	ax
push	word ptr loc_140D7+1
push	word ptr loc_140CB+1

loc_18110:				; CODE XREF: game_spy_rival_tigers+147  j		 /* DOS offset ---> F7D:0 */
push	cs
call	loc_17C0A
add	sp, 6

loc_18117:				; CODE XREF: game_spy_rival_tigers_send_whom:loc_180D3  j		 /* DOS offset ---> F7D:7 */
; game_spy_rival_tigers_send_whom:loc_180DC  j ...
mov	ax, 28h	; '('
push	ax
mov	ax, 0CB72h

loc_1811E:				; CODE XREF: game_spy_rival_tigers+165  j		 /* DOS offset ---> F7D:E */
push	ax
mov	ax, 3F2Ah
push	ax
call	far ptr	561h:8
add	sp, 6
mov	ax, 47h	; 'G'
push	ax
mov	ax, 0CAA1h
push	ax
mov	ax, 3F52h
push	ax
call	far ptr	561h:8

loc_1813C:				; CODE XREF: game_spy_rival_tigers+18A  j		 /* DOS offset ---> F7F:C */
add	sp, 6

loc_1813F:				; CODE XREF: game_spy_rival_tigers_send_whom-FE19  j		 /* DOS offset ---> F7F:F */
; game_spy_rival_tigers_send_whom-FE10  j
call	far ptr	6EBh:64h
or	ax, ax
jz	short loc_18165
call	far ptr	0:5Bh
or	ax, ax
jz	short loc_1813F
call	far ptr	0:75h
or	al, al
jz	short loc_1813F
mov	al, 10h
push	ax
call	far ptr	6EBh:3Ah
add	sp, 2

loc_18165:				; CODE XREF: game_spy_rival_tigers_send_whom-FE22  j		 /* DOS offset ---> F82:5 */
cmp	byte ptr loc_140D1+3, 0Fh
jz	short locret_1817F
cmp	byte ptr loc_140D1+3, 10h
jz	short locret_1817F
mov	al, byte ptr loc_140D1+3
push	ax
call	far ptr	6EBh:96h

loc_1817C:				; CODE XREF: game_spy_infiltrate_withdraw_list+6D  j		 /* DOS offset ---> F83:C */
add	sp, 2

locret_1817F:				; CODE XREF: game_spy_rival_tigers_send_whom-FDFE  j
; game_spy_rival_tigers_send_whom-FDF7  j
retf
; END OF FUNCTION CHUNK	FOR game_spy_rival_tigers_send_whom
;     ***************************************************************************

loc_18180:				; CODE XREF: dseg:858C  p		 /* DOS offset ---> F84:0 */
; game_spy_func:loc_1863B  p ...
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Ch
db 0C6h	;   *
db  46h	; F
db 0FAh	;   *
db    0
db  8Bh	;   *
db  5Eh	; ^
unk_1818C	db    6			; CODE XREF: game_spy_infiltrate_withdraw_list+40  j
db 0FFh
db  77h	; w
db    2
db 0FFh
db  37h	; 7
db  9Ah	;   *
db 0EEh	;   *
db    1
db 0D5h	;   *
db    9
;     ***************************************************************************

loc_18197:				; CODE XREF: dseg:28192  j dseg:28203  j		 /* DOS offset ---> F85:7 */
add	sp, 4
mov	[bp-8],	ax
or	ax, ax
jnz	short loc_181B4
mov	ax, word_1CA9A
; START	OF FUNCTION CHUNK FOR game_spy_infiltrate_withdraw_list

loc_181A4:				; CODE XREF: game_spy_infiltrate_withdraw_list+48  j		 /* DOS offset ---> F86:4 */
; game_spy_infiltrate_withdraw_list+52  j
mov	[bp+var_8], ax

loc_181A7:				; CODE XREF: game_spy_infiltrate_withdraw_list+39  j		 /* DOS offset ---> F86:7 */
mov	word ptr [bp+var_C], 190h
mov	word ptr [bp+var_C+2], 59Dh
jmp	short loc_181D6
; END OF FUNCTION CHUNK	FOR game_spy_infiltrate_withdraw_list
;     ***************************************************************************
nop

loc_181B4:				; CODE XREF: dseg:819F  j		 /* DOS offset ---> F87:4 */
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short loc_181CC

loc_181C1:		 /* DOS offset ---> F88:1 */
cmp	word_1CB68, 0
jz	short loc_181CC
mov	byte ptr [bp-6], 1

loc_181CC:				; CODE XREF: dseg:81BF  j dseg:81C6  j		 /* DOS offset ---> F88:C */
mov	word ptr [bp-0Ch], 5CEh
mov	word ptr [bp-0Ah], 59Dh
; START	OF FUNCTION CHUNK FOR game_spy_infiltrate_withdraw_list

loc_181D6:				; CODE XREF: game_spy_infiltrate_withdraw_list-FF91  j		 /* DOS offset ---> F89:6 */
mov	[bp+var_4], 0
cmp	[bp+arg_2], 0
jz	short loc_181FF

loc_181E0:				; CODE XREF: game_spy_infiltrate_withdraw_list-FF45  j		 /* DOS offset ---> F8A:0 */
mov	bx, [bp+arg_2]
mov	ax, [bx]
mov	[bp+var_2], ax
push	bx
push	[bp+var_8]

loc_181EC:				; CODE XREF: game_spy_infiltrate_withdraw_output+15  j		 /* DOS offset ---> F8A:C */
call	[bp+var_C]
add	sp, 4
inc	[bp+var_4]
mov	ax, [bp+var_2]
mov	[bp+arg_2], ax
or	ax, ax
jnz	short loc_181E0

loc_181FF:				; CODE XREF: game_spy_infiltrate_withdraw_list-FF64  j		 /* DOS offset ---> F8B:F */
cmp	byte ptr [bp+var_6], 0
jz	short loc_1820D
push	[bp+var_8]

loc_18208:				; CODE XREF: dseg:281C1  j		 /* DOS offset ---> F8C:8 */
call	far ptr	4B5h:3F4h

loc_1820D:				; CODE XREF: game_spy_infiltrate_withdraw_list-FF3F  j		 /* DOS offset ---> F8C:D */
mov	al, [bp+var_4]
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_infiltrate_withdraw_list
;     ***************************************************************************
db  55h	; U
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  56h	; V
db  8Bh	;   *
unk_1821C	db  1Eh			; CODE XREF: dseg:2820C  j
db 0E8h	;   *
db  40h	; @
db  8Bh	;   *
db  47h	; G
db    4
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  8Bh	;   *
db  1Eh
db  9Ah	;   *
db 0CAh	;   *
db  83h	;   *
db  7Fh	; 
db    2
db    0
db  75h	; u
db    9
db  89h	;   *
db  47h	; G
db    2
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
push	word ptr [bx+2]
call	far ptr	59Dh:62h
add	sp, 2
mov	[bp-4],	ax
mov	bx, word_1CA9A
push	word ptr [bx+2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_18266
mov	ax, [bp-2]
mov	bx, [bp-4]
mov	[bx], ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_18266:				; CODE XREF: dseg:8257  j		 /* DOS offset ---> F92:6 */
mov	bx, [bp-2]
mov	ax, [bx]

loc_1826B:		 /* DOS offset ---> F92:B */
mov	si, [bp-4]
mov	[si], ax

loc_18270:				; CODE XREF: dseg:2821A  j dseg:28257  j		 /* DOS offset ---> F93:0 */
mov	si, word_1CA9A
mov	ax, [si+2]
mov	[bx], ax
mov	si, word_1CA9A
mov	[si+2],	bx
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_18286:				; CODE XREF: game_spy_infiltrate_verify_output:loc_18320  p		 /* DOS offset ---> F94:6 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  56h	; V
db  8Bh	;   *
db  1Eh
db  9Ah	;   *
db 0CAh	;   *
db 0FFh
db  77h	; w
db    2
db  9Ah	;   *
db  62h	; b
db    0
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0D8h	;   *
db    1
db  42h	; B
unk_182A6	db    5			; CODE XREF: dseg:28194  j dseg:28205  j
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  20h
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db    7
db  8Bh	;   *
db  76h	; v
db 0FEh	;   *
db  89h	;   *
db    4
db  8Bh	;   *
db  36h	; 6
db  9Ah	;   *
db 0CAh	;   *
db  8Bh	;   *
unk_182BD	db  44h	; D		; CODE XREF: game_spy_infiltrate_withdraw+25  j
; game_spy_infiltrate_withdraw+3E  j
db    2
db  89h	;   *
db    7
db  8Bh	;   *
db  36h	; 6
db  9Ah	;   *
db 0CAh	;   *
db  89h	;   *
db  5Ch	; \
db    2
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
mov	ax, [bp+6]
mov	bx, [bp-2]
mov	[bx], ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_182DC:				; CODE XREF: game_spy_infiltrate_verify_output:loc_18339  p		 /* DOS offset ---> F99:C */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db 0C6h	;   *
db  46h	; F
db 0FEh	;   *
db    0
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_spy_infiltrate_verify_output

loc_182E6:				; CODE XREF: game_spy_infiltrate_verify_output-FF95  j		 /* DOS offset ---> F9A:6 */
mov	bl, byte ptr loc_140E5+1
sub	bh, bh
mov	ax, bx
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	al, [bp-2]
sub	ah, ah

loc_182F9:				; CODE XREF: game_spy_infiltrate_verify_output+19  j		 /* DOS offset ---> F9B:9 */
; game_spy_infiltrate_verify_output+2E  j
add	bx, ax
shl	bx, 1

loc_182FD:				; CODE XREF: game_spy_infiltrate_verify_output+35  j		 /* DOS offset ---> F9B:D */
cmp	word ptr [bx-354Bh], 0
jz	short loc_18326
mov	bl, byte ptr loc_140E5+1
sub	bh, bh
mov	ax, bx
shl	bx, 1
add	bx, ax

loc_18310:				; CODE XREF: game_spy_infiltrate_verify_output+49  j		 /* DOS offset ---> F9D:0 */
shl	bx, 1
mov	al, [bp-2]
sub	ah, ah
add	bx, ax
shl	bx, 1
push	word ptr [bx-3533h]
push	cs

loc_18320:				; CODE XREF: game_spy_infiltrate_verify_output+55  j		 /* DOS offset ---> F9E:0 */
call	loc_18286
add	sp, 2

loc_18326:				; CODE XREF: game_spy_infiltrate_verify_output-FFC0  j		 /* DOS offset ---> F9E:6 */
; dseg:282BB  j ...
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 6
jb	short loc_182E6
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_infiltrate_verify_output
;     ***************************************************************************
nop

loc_18334:				; CODE XREF: dseg:8574  p dseg:85CD  p ...		 /* DOS offset ---> F9F:4 */
push	cs
;     ***************************************************************************
db 0E8h	;   *
db 0DCh	;   *
db 0FEh	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_spy_infiltrate_verify_output

loc_18338:				; CODE XREF: game_spy_infiltrate_verify_output+6E  j		 /* DOS offset ---> F9F:8 */
push	cs

loc_18339:				; CODE XREF: game_spy_infiltrate_verify_output+73  j		 /* DOS offset ---> F9F:9 */
call	loc_182DC
retf
; END OF FUNCTION CHUNK	FOR game_spy_infiltrate_verify_output
;     ***************************************************************************
nop

loc_1833E:				; CODE XREF: dseg:842E  p		 /* DOS offset ---> F9F:E */
; game_spy_infiltrate_available_generals-FFCC  p
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  53h	; S
db  8Bh	;   *
db  5Eh	; ^
db    8
db 0FFh
db  77h	; w
db    6
db  9Ah	;   *
unk_18354	db  7Eh	; ~		; CODE XREF: game_spy_infiltrate_verify_output+58  j
db    0
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db  0Eh
db  8Bh	;   *
db  46h	; F
db 0FEh	;   *
db  8Bh	;   *
db  5Eh	; ^
db    8
db  89h	;   *
db  47h	; G
db    6
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
mov	ax, [bp-2]
mov	bx, [bp-4]
mov	[bx], ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  55h	; U
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  56h	; V
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  30h	; 0
db    0
db  25h	; %
db    5
db  83h	;   *
unk_1838C	db 0C4h	;   *		; CODE XREF: game_spy_infiltrate_verify_output+C3  j
db    2
db  3Bh	; ;
unk_1838F	db    6			; CODE XREF: game_spy_infiltrate_verify_output+C8  j
db 0E2h	;   *
db  40h	; @
db  75h	; u
db  18h
db  8Bh	;   *
db  1Eh
db 0E8h	;   *
db  40h	; @
db  83h	;   *
db  7Fh	; 
db    4
db    0
db  75h	; u
unk_1839D	db    8			; CODE XREF: dseg:28367  j
db  8Bh	;   *
db  46h	; F
db    6
db  89h	;   *
unk_183A2	db  47h	; G		; CODE XREF: dseg:28693  p dseg:2871C  p
db    4
db 0EBh	;   *
db  56h	; V
db 0FFh
db  77h	; w
db    4
db 0EBh	;   *
db  42h	; B
;     ***************************************************************************
nop
mov	bx, word ptr loc_140E8
; CODE XREF: game_spy_infiltrate_verify_output+4B  j
cmp	word ptr [bx+6], 0 ; CODE XREF:	dseg:283AB  j
jnz	short loc_183BE

loc_183B6:				; CODE XREF: dseg:286D1  p		 /* DOS offset ---> FA7:6 */
mov	ax, [bp+6]
mov	[bx+6],	ax
jmp	short loc_183FC
;     ***************************************************************************

loc_183BE:				; CODE XREF: dseg:83B4  j		 /* DOS offset ---> FA7:E */
push	word ptr [bp+6]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_183E6
mov	bx, word ptr loc_140E8
mov	ax, [bx+6]
mov	bx, [bp+6]
mov	[bx], ax
mov	si, word ptr loc_140E8
mov	[si+6],	bx
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_183E5:				; CODE XREF: dseg:2841E  j		 /* DOS offset ---> FAA:5 */
nop

loc_183E6:				; CODE XREF: dseg:83CB  j		 /* DOS offset ---> FAA:6 */
; game_spy_infiltrate_verify_sub+23  j ...
mov	bx, word ptr loc_140E8
push	word ptr [bx+6]
call	far ptr	59Dh:62h
add	sp, 2
mov	bx, ax
mov	ax, [bp+6]
mov	[bx], ax

loc_183FC:				; CODE XREF: dseg:83BC  j		 /* DOS offset ---> FAB:C */
mov	bx, [bp+6]
mov	word ptr [bx], 0
pop	si
mov	sp, bp
; START	OF FUNCTION CHUNK FOR game_spy_infiltrate_verify

loc_18406:				; CODE XREF: game_spy_infiltrate_verify+D  j		 /* DOS offset ---> FAC:6 */
; game_spy_infiltrate_verify+55  j ...
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_infiltrate_verify
;     ***************************************************************************

loc_18408:				; CODE XREF: dseg:8564  p dseg:85BD  p ...		 /* DOS offset ---> FAC:8 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  83h	;   *
db  7Eh	; ~
db    6
db    0
db  74h	; t
db  34h	; 4
;     ***************************************************************************

loc_18414:				; CODE XREF: dseg:283FA  j		 /* DOS offset ---> FAD:4 */
mov	bx, [bp+6]
mov	ax, [bx+6]
mov	[bp-4],	ax
or	ax, ax

loc_1841F:				; CODE XREF: dseg:283E3  j		 /* DOS offset ---> FAD:F */
jz	short loc_18448
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-2],	ax
push	word ptr [bp+6]
push	bx
push	cs
call	loc_1833E
add	sp, 4

loc_18434:				; CODE XREF: dseg:28485  p dseg:28549  p ...		 /* DOS offset ---> FAF:4 */
push	word ptr [bp-4]
;     ***************************************************************************
db  0Eh
db 0E8h	;   *
db  41h	; A
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  46h	; F
db 0FEh	;   *
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0D9h	;   *
;     ***************************************************************************

loc_18448:				; CODE XREF: dseg:loc_1841F  j		 /* DOS offset ---> FB0:8 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1844C:				; CODE XREF: dseg:855A  p dseg:85F6  p ...		 /* DOS offset ---> FB0:C */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
unk_18450	db 0ECh	;   *		; CODE XREF: dseg:284C6  p
db    6
db  8Bh	;   *
db  5Eh	; ^
db    6
db  83h	;   *
db  7Fh	; 
db    2
db    0
db  74h	; t
db  7Ch	; |
db  83h	;   *
db  7Fh	; 
db    4
db    0
db  75h	; u
db    5
db  2Bh	; +
db 0C0h	;   *
db 0EBh	;   *
unk_18464	db  0Ch			; CODE XREF: game_spy_infiltrate_verify+66  j
;     ***************************************************************************
nop
push	word ptr [bx+4]
call	far ptr	59Dh:62h
add	sp, 2
mov	[bp-6],	ax
mov	bx, [bp+8]
mov	ax, [bx+6]
mov	[bp-4],	ax
or	ax, ax
jz	short loc_184CA
; START	OF FUNCTION CHUNK FOR game_spy_infiltrate_available_generals

loc_18481:				; CODE XREF: game_spy_infiltrate_available_generals-FFBE  j		 /* DOS offset ---> FB4:1 */
; game_spy_infiltrate_verify+37  j ...
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_2], ax
push	bx
call	far ptr	525h:30h
add	sp, 2
mov	bx, [bp+arg_0]
cmp	ax, [bx]
jnz	short loc_184C0
cmp	[bp+var_6], 0
jnz	short loc_184A8

loc_1849F:				; CODE XREF: dseg:28497  j		 /* DOS offset ---> FB5:F */
mov	ax, [bp+var_4]
mov	[bx+4],	ax
jmp	short loc_184B0
; END OF FUNCTION CHUNK	FOR game_spy_infiltrate_available_generals
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_spy_infiltrate_available_generals

loc_184A8:				; CODE XREF: game_spy_infiltrate_available_generals-FFE9  j		 /* DOS offset ---> FB6:8 */
mov	ax, [bp+var_4]

loc_184AB:				; CODE XREF: dseg:2848F  j dseg:28495  j ...		 /* DOS offset ---> FB6:B */
mov	bx, [bp+var_6]
mov	[bx], ax

loc_184B0:				; CODE XREF: game_spy_infiltrate_available_generals-FFE1  j		 /* DOS offset ---> FB7:0 */
; dseg:286DC  p
mov	[bp+var_6], ax
push	[bp+arg_2]
push	[bp+var_4]
push	cs
call	loc_1833E
add	sp, 4

loc_184C0:				; CODE XREF: game_spy_infiltrate_available_generals-FFEF  j		 /* DOS offset ---> FB8:0 */
mov	ax, [bp+var_2]

loc_184C3:				; CODE XREF: dseg:284D9  j		 /* DOS offset ---> FB8:3 */
mov	[bp+var_4], ax

loc_184C6:				; CODE XREF: game_spy_infiltrate_available_generals+2D  j		 /* DOS offset ---> FB8:6 */
or	ax, ax
jnz	short loc_18481

loc_184CA:				; CODE XREF: dseg:847F  j		 /* DOS offset ---> FB8:A */
cmp	[bp+var_6], 0
jz	short loc_184D7

loc_184D0:				; CODE XREF: game_spy_infiltrate_available_generals+25  j		 /* DOS offset ---> FB9:0 */
mov	bx, [bp+var_6]
mov	word ptr [bx], 0

loc_184D7:				; CODE XREF: game_spy_infiltrate_available_generals-FFB8  j		 /* DOS offset ---> FB9:7 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_infiltrate_available_generals
;     ***************************************************************************
nop
push	bp
;     ***************************************************************************
db  8Bh	;   *
unk_184DE	db 0ECh	;   *		; CODE XREF: dseg:284CE  j
db  83h	;   *
db 0ECh	;   *
db    2
db 0A0h	;   *
db 0E7h	;   *
db 0CAh	;   *
db  24h	; $
unk_184E6	db  0Ah			; CODE XREF: dseg:284C1  j dseg:284DB  j
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db  80h	;   *
db  3Eh	; >
unk_184EC	db 0E6h	;   *		; CODE XREF: dseg:285E5  p dseg:285F6  p
db  40h	; @
db    1
db  75h	; u
db  0Dh
db 0F6h	;   *
db  46h	; F
unk_184F3	db 0FEh	;   *		; CODE XREF: game_spy_infiltrate+E  j
db    8
db  74h	; t
db  14h
db  80h	;   *
db  4Eh	; N
db 0FEh	;   *
db    1
db 0EBh	;   *
db  0Eh
;     ***************************************************************************
nop
shr	byte ptr [bp-2], 1
; START	OF FUNCTION CHUNK FOR game_spy_infiltrate

loc_18501:				; CODE XREF: game_spy_infiltrate+1C  j		 /* DOS offset ---> FBC:1 */
test	byte ptr [bp+var_2], 4
jz	short loc_1850B
or	byte ptr [bp+var_2], 2

loc_1850B:				; CODE XREF: game_spy_infiltrate-FFDB  j		 /* DOS offset ---> FBC:B */
and	byte ptr [bp+var_2], 3
mov	al, byte ptr [bp+var_2]
mov	byte_1CAE7, al
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_infiltrate
;     ***************************************************************************
nop

loc_1851A:				; CODE XREF: dseg:8ACF  p		 /* DOS offset ---> FBD:A */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Eh
db 0C6h	;   *
db  46h	; F
db 0FEh	;   *
db    0
db  0Eh
db 0E8h	;   *
unk_18526	db 0B4h	;   *		; CODE XREF: game_spy_infiltrate+61  j
; game_spy_infiltrate+CD  j ...
db 0FFh
db 0A0h	;   *
db 0E7h	;   *
db 0CAh	;   *
db  2Ah	; *
db 0E4h	;   *
db  0Bh
unk_1852E	db 0C0h	;   *		; CODE XREF: game_spy_infiltrate+44  j
db  74h	; t
db  13h
db  48h	; H
db  74h	; t
db  6Ch	; l
db  48h	; H
db  75h	; u
db    3
db 0E9h	;   *
db 0B0h	;   *
db    0
db  48h	; H
db  75h	; u
db    3
db 0E9h	;   *
db  22h	; "
db    1
db 0E9h	;   *
db  85h	;   *
db    1
;     ***************************************************************************
nop
mov	ax, word ptr loc_140E8+2
mov	[bp-4],	ax
mov	word ptr [bp-8], 2

loc_1854F:				; CODE XREF: dseg:8571  j		 /* DOS offset ---> FC0:F */
push	word ptr [bp-4]
mov	ax, word ptr loc_140E8
add	ax, 0Ah
push	ax
push	cs
call	loc_1844C
add	sp, 4
push	word ptr [bp-4]
push	cs
call	loc_18408
add	sp, 2

loc_1856A:				; CODE XREF: game_spy_infiltrate+84  j		 /* DOS offset ---> FC2:A */
add	word ptr [bp-4], 0Ah
dec	word ptr [bp-8]
jnz	short loc_1854F
push	cs
call	loc_18334
mov	bx, word ptr loc_140E8
add	bx, 0Ah
mov	[bp-4],	bx
cmp	word ptr [bx+2], 0
jz	short loc_18595
push	word ptr [bx+4]
push	bx
push	cs
call	loc_18180
add	sp, 4
mov	[bp-2],	al

loc_18595:				; CODE XREF: dseg:8585  j		 /* DOS offset ---> FC5:5 */
mov	bx, word ptr loc_140E8+2
mov	word ptr [bx+6], 0
jmp	short loc_185E2
;     ***************************************************************************
db 0A1h	;   *
db 0E8h	;   *
db  40h	; @
db    5
db  0Ah
db    0
db  50h	; P
db  0Eh
db 0E8h	;   *
db  5Dh	; ]
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db 0A1h	;   *
unk_185AF	db 0EAh	;   *		; CODE XREF: dseg:2877A  j
unk_185B0	db  40h	; @		; CODE XREF: game_spy_infiltrate+94  j
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db 0C7h	;   *
db  46h	; F
db 0F6h	;   *
db    2
db    0
;     ***************************************************************************

loc_185B9:				; CODE XREF: dseg:85CA  j		 /* DOS offset ---> FC7:9 */
push	word ptr [bp-4]
push	cs
call	loc_18408
add	sp, 2
add	word ptr [bp-4], 0Ah
dec	word ptr [bp-0Ah]
jnz	short loc_185B9
push	cs
call	loc_18334
mov	bx, word ptr loc_140E8+2
mov	word ptr [bx+6], 0
mov	bx, word ptr loc_140E8
mov	word ptr [bx+10h], 0

loc_185E2:				; CODE XREF: dseg:859E  j		 /* DOS offset ---> FCA:2 */
; game_spy_infiltrate+10  j ...
mov	bx, word ptr loc_140E8+2
jmp	loc_186C3
;     ***************************************************************************
nop
push	word ptr loc_140E8+2
mov	ax, word ptr loc_140E8+2
add	ax, 0Ah
push	ax
push	cs
call	loc_1844C
add	sp, 4
mov	ax, word ptr loc_140E8+2
mov	[bp-4],	ax
mov	word ptr [bp-0Ch], 2

loc_18607:				; CODE XREF: dseg:8629  j		 /* DOS offset ---> FCC:7 */
push	word ptr [bp-4]
mov	ax, word ptr loc_140E8

loc_1860D:				; CODE XREF: dseg:28603  j		 /* DOS offset ---> FCC:D */
add	ax, 0Ah
push	ax
push	cs

loc_18612:				; CODE XREF: game_spy_func+D  j		 /* DOS offset ---> FCD:2 */
; game_spy_func+15  j ...
call	loc_1844C
add	sp, 4
push	word ptr [bp-4]
push	cs
call	loc_18408
add	sp, 2
add	word ptr [bp-4], 0Ah
dec	word ptr [bp-0Ch]
jnz	short loc_18607
push	cs
call	loc_18334

loc_1862F:				; CODE XREF: game_spy_func+30  j		 /* DOS offset ---> FCE:F */
; dseg:28627  j
mov	bx, word ptr loc_140E8+2
push	word ptr [bx+0Eh]

loc_18636:				; CODE XREF: dseg:2862F  j		 /* DOS offset ---> FCF:6 */
lea	ax, [bx+0Ah]
push	ax
push	cs
; START	OF FUNCTION CHUNK FOR game_spy_func

loc_1863B:				; CODE XREF: game_spy_func+3D  j		 /* DOS offset ---> FCF:B */
call	loc_18180
add	sp, 4
mov	bx, word ptr loc_140E8
push	word ptr [bx+0Eh]
lea	ax, [bx+0Ah]
push	ax
push	cs
call	loc_18180
add	sp, 4

loc_18653:				; CODE XREF: game_spy_func+57  j		 /* DOS offset ---> FD1:3 */
mov	[bp-2],	al
mov	bx, word ptr loc_140E8+2
mov	word ptr [bx+6], 0
jmp	short loc_186C8
; END OF FUNCTION CHUNK	FOR game_spy_func
;     ***************************************************************************
nop
push	word ptr loc_140E8+2
mov	ax, word ptr loc_140E8+2
add	ax, 0Ah
push	ax
push	cs
; START	OF FUNCTION CHUNK FOR game_spy_func

loc_1866E:				; CODE XREF: game_spy_func+75  j		 /* DOS offset ---> FD2:E */
; dseg:2865F  j
call	loc_1844C
add	sp, 4
mov	ax, word ptr loc_140E8+2

loc_18677:				; CODE XREF: dseg:28674  j		 /* DOS offset ---> FD3:7 */
mov	[bp-4],	ax

loc_1867A:				; CODE XREF: dseg:286E7  j dseg:28712  j		 /* DOS offset ---> FD3:A */
mov	word ptr [bp-0Eh], 2

loc_1867F:				; CODE XREF: game_spy_func-FF60  j		 /* DOS offset ---> FD3:F */
push	word ptr [bp-4]
push	cs
call	loc_18408
add	sp, 2

loc_18689:				; CODE XREF: game_spy_func+8A  j		 /* DOS offset ---> FD4:9 */
; dseg:2867C  j
add	word ptr [bp-4], 0Ah
dec	word ptr [bp-0Eh]
jnz	short loc_1867F
mov	ax, word ptr loc_140E8
add	ax, 0Ah
push	ax
push	cs
call	loc_18408
add	sp, 2

loc_186A0:				; CODE XREF: game_spy_func+A1  j		 /* DOS offset ---> FD6:0 */
push	cs

loc_186A1:		 /* DOS offset ---> FD6:1 */
call	loc_18334
mov	bx, word ptr loc_140E8+2
push	word ptr [bx+0Eh]

loc_186AB:				; CODE XREF: game_spy_func+97  j		 /* DOS offset ---> FD6:B */
; game_spy_func+AE  j
lea	ax, [bx+0Ah]
push	ax

loc_186AF:				; CODE XREF: dseg:286A8  j		 /* DOS offset ---> FD6:F */
push	cs
call	loc_18180

loc_186B3:				; CODE XREF: dseg:286A6  j dseg:286AD  j		 /* DOS offset ---> FD7:3 */
add	sp, 4
mov	bx, word ptr loc_140E8+2

loc_186BA:				; CODE XREF: dseg:2869B  j		 /* DOS offset ---> FD7:A */
mov	word ptr [bx+6], 0
mov	bx, word ptr loc_140E8

loc_186C3:				; CODE XREF: dseg:85E6  j		 /* DOS offset ---> FD8:3 */
; game_spy_func+C7  j
mov	word ptr [bx+10h], 0

loc_186C8:				; CODE XREF: game_spy_func-FF91  j		 /* DOS offset ---> FD8:8 */
cmp	byte ptr loc_140E5+1, 1

loc_186CD:				; CODE XREF: game_view_func+3B  j		 /* DOS offset ---> FD8:D */
jnz	short loc_186F4
push	word_1CA9A
push	word ptr loc_140E2
call	far ptr	59Dh:49Ch
add	sp, 4
cmp	word_1CB68, 0
jz	short loc_18711

loc_186E6:				; CODE XREF: dseg:286D9  j dseg:286E1  j		 /* DOS offset ---> FDA:6 */
push	word_1CA9A
call	far ptr	4B5h:3F4h
add	sp, 2
jmp	short loc_18711
;     ***************************************************************************

loc_186F4:				; CODE XREF: game_spy_func:loc_186CD  j		 /* DOS offset ---> FDB:4 */
; dseg:286CA  j
push	word_1CA9A
push	word ptr loc_140E2
call	far ptr	59Dh:52Eh

loc_18701:				; CODE XREF: game_view_func+64  j		 /* DOS offset ---> FDC:1 */
; game_view_func+7F  j ...
add	sp, 4
push	word_1CA9A
push	word ptr loc_140E2
call	far ptr	59Dh:49Ch

loc_18711:				; CODE XREF: game_spy_func-FF0C  j		 /* DOS offset ---> FDD:1 */
; game_spy_func-FEFE  j
mov	al, [bp-2]

loc_18714:				; CODE XREF: dseg:28708  j dseg:28710  j		 /* DOS offset ---> FDD:4 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_spy_func
;     ***************************************************************************

loc_18718:				; CODE XREF: game_view_func:loc_187B4  p		 /* DOS offset ---> FDD:8 */
; game_view_func-FECF  p	...
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db 0C7h	;   *
db  46h	; F
db 0FCh	;   *
db 0ECh	;   *
db  40h	; @
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  21h	; !
db 0FFh
db  76h	; v
db 0FCh	;   *
db 0B8h	;   *
db  82h	;   *
aPC_0		db '  *P    **',0             ; CODE XREF: game_view_func+6E  j
db  61h	; a
db    5
db  83h	;   *
db 0C4h	;   *
db    4
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_view_func

loc_1873E:				; CODE XREF: game_view_func+5E  j		 /* DOS offset ---> FDF:E */
; dseg:28724  j
mov	bx, [bp+var_2]
mov	ax, [bx]
add	ax, 1Ch
push	ax

loc_18747:		 /* DOS offset ---> FE0:7 */
mov	ax, 0C982h
push	ax

loc_1874B:				; CODE XREF: game_view_func+B1  j		 /* DOS offset ---> FE0:B */
; game_view_func+BD  j
call	far ptr	561h:0E6h
mov	sp, bp
pop	bp

locret_18753:				; CODE XREF: dseg:2873B  j
retf
; END OF FUNCTION CHUNK	FOR game_view_func
;     ***************************************************************************

loc_18754:				; CODE XREF: game_reward_gift_writing-FEFA  p		 /* DOS offset ---> FE1:4 */
; game_reward_gift_writing-FED0  p
push	bp

loc_18755:				; CODE XREF: dseg:286B1  j dseg:286B6  j		 /* DOS offset ---> FE1:5 */
mov	bp, sp
sub	sp, 6
push	si

loc_1875B:				; CODE XREF: dseg:2866B  j dseg:28688  j ...		 /* DOS offset ---> FE1:B */
mov	word ptr [bp-4], 40EEh
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp-6],	ax
mov	bx, ax
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C982h
push	ax
call	far ptr	561h:0BEh
add	sp, 4

loc_1877C:				; CODE XREF: dseg:28778  j		 /* DOS offset ---> FE3:C */
mov	ax, word ptr loc_140E2
cmp	[bp-6],	ax

loc_18782:				; CODE XREF: dseg:28E13  p Q_28E30+45  p ...		 /* DOS offset ---> FE4:2 */
jnz	short loc_1878A
; START	OF FUNCTION CHUNK FOR game_view_func

loc_18784:				; CODE XREF: game_view_func+5C  j		 /* DOS offset ---> FE4:4 */
mov	ax, 1

loc_18787:		 /* DOS offset ---> FE4:7 */
jmp	short loc_1878C
; END OF FUNCTION CHUNK	FOR game_view_func
;     ***************************************************************************
nop

loc_1878A:				; CODE XREF: dseg:loc_18782  j		 /* DOS offset ---> FE4:A */
sub	ax, ax
; START	OF FUNCTION CHUNK FOR game_view_func

loc_1878C:				; CODE XREF: game_view_func:loc_18787  j		 /* DOS offset ---> FE4:C */
mov	[bp+var_2], ax
mov	al, byte_1CAE7
sub	ah, ah
or	ax, ax
jz	short loc_187AA
dec	ax
jz	short loc_187E4
dec	ax
jnz	short loc_187A1
jmp	loc_18828
;     ***************************************************************************

loc_187A1:				; CODE XREF: game_view_func-FF28  j		 /* DOS offset ---> FE6:1 */
dec	ax
jnz	short loc_187A7
jmp	loc_18866
;     ***************************************************************************

loc_187A7:				; CODE XREF: game_view_func-FF22  j		 /* DOS offset ---> FE6:7 */
jmp	loc_188A6
;     ***************************************************************************

loc_187AA:				; CODE XREF: game_view_func-FF2E  j		 /* DOS offset ---> FE6:A */
mov	ax, [bp+arg_2]
add	ax, 0Ah
push	ax
mov	si, ax
push	cs

loc_187B4:				; CODE XREF: dseg:287A4  j		 /* DOS offset ---> FE7:4 */
call	loc_18718

loc_187B7:				; CODE XREF: dseg:287B2  j		 /* DOS offset ---> FE7:7 */
add	sp, 2
cmp	word ptr [si], 0
jz	short loc_187DE
push	[bp+var_4]

loc_187C2:				; CODE XREF: game_development_land_query+35  j		 /* DOS offset ---> FE8:2 */
mov	ax, 0C982h
push	ax
call	far ptr	561h:0E6h
add	sp, 4

loc_187CE:				; CODE XREF: dseg:2899D  p		 /* DOS offset ---> FE8:E */
cmp	word_1CB68, 0
jnz	short loc_187D8
jmp	loc_188A6
;     ***************************************************************************

loc_187D8:				; CODE XREF: game_view_func-FEF1  j		 /* DOS offset ---> FE9:8 */
mov	ax, 4119h
jmp	loc_18899
;     ***************************************************************************

loc_187DE:				; CODE XREF: game_view_func-FF07  j		 /* DOS offset ---> FE9:E */
mov	ax, 411Bh
jmp	loc_18899
;     ***************************************************************************

loc_187E4:				; CODE XREF: game_view_func-FF2B  j		 /* DOS offset ---> FEA:4 */
cmp	[bp+var_2], 0
jz	short loc_187ED
jmp	loc_188A6
;     ***************************************************************************

loc_187ED:				; CODE XREF: game_view_func-FEDC  j		 /* DOS offset ---> FEA:D */
mov	ax, [bp+arg_2]

loc_187F0:				; CODE XREF: dseg:287E9  j		 /* DOS offset ---> FEB:0 */
; game_development_land_query+64  j
add	ax, 0Ah

loc_187F3:				; CODE XREF: dseg:287EE  j		 /* DOS offset ---> FEB:3 */
push	ax
push	cs
call	loc_18718
add	sp, 2
mov	ax, word ptr loc_140E8
add	ax, 0Ah
push	ax
push	cs
call	loc_18718

loc_18806:				; CODE XREF: dseg:287FF  j		 /* DOS offset ---> FEC:6 */
add	sp, 2

loc_18809:				; CODE XREF: dseg:28804  j		 /* DOS offset ---> FEC:9 */
push	[bp+var_4]
mov	ax, 0C982h
push	ax
call	far ptr	561h:0E6h

loc_18815:				; CODE XREF: game_development_land_query+88  j		 /* DOS offset ---> FED:5 */
add	sp, 4

loc_18818:				; CODE XREF: game_development_land_query+8C  j		 /* DOS offset ---> FED:8 */
cmp	word_1CB68, 0
jnz	short loc_18822
jmp	loc_188A6
;     ***************************************************************************

loc_18822:				; CODE XREF: game_view_func-FEA7  j		 /* DOS offset ---> FEE:2 */
mov	ax, 411Dh
jmp	short loc_18899
; END OF FUNCTION CHUNK	FOR game_view_func
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_view_func

loc_18828:				; CODE XREF: game_view_func-FF26  j		 /* DOS offset ---> FEE:8 */
cmp	[bp+var_2], 1
jnz	short loc_188A6
mov	ax, [bp+arg_2]
add	ax, 0Ah
push	ax
push	cs
call	loc_18718
add	sp, 2
mov	ax, word ptr loc_140E8+2
add	ax, 0Ah
push	ax
push	cs
call	loc_18718
add	sp, 2
push	[bp+var_4]
mov	ax, 0C982h
push	ax
call	far ptr	561h:0E6h
add	sp, 4
cmp	word_1CB68, 0
jz	short loc_188A6
mov	ax, 411Fh
jmp	short loc_18899
; END OF FUNCTION CHUNK	FOR game_view_func
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_view_func

loc_18866:				; CODE XREF: game_view_func-FF20  j		 /* DOS offset ---> FF2:6 */
cmp	[bp+var_2], 1
jnz	short loc_18872
mov	ax, word ptr loc_140E8+2
jmp	short loc_18875
; END OF FUNCTION CHUNK	FOR game_view_func
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_view_func

loc_18872:				; CODE XREF: game_view_func-FE5A  j		 /* DOS offset ---> FF3:2 */
mov	ax, word ptr loc_140E8

loc_18875:				; CODE XREF: game_view_func-FE55  j		 /* DOS offset ---> FF3:5 */
add	ax, 0Ah

loc_18878:				; CODE XREF: game_development_land_query+CE  j		 /* DOS offset ---> FF3:8 */
push	ax
push	cs
call	loc_18718
add	sp, 2
push	[bp+var_4]
mov	ax, 0C982h
push	ax

loc_18887:				; CODE XREF: game_development_land_query+37  j		 /* DOS offset ---> FF4:7 */
; game_development_land_query+66  j ...
call	far ptr	561h:0E6h
add	sp, 4
cmp	word_1CB68, 0
jz	short loc_188A6
mov	ax, 4121h

loc_18899:				; CODE XREF: game_view_func-FEE9  j		 /* DOS offset ---> FF5:9 */
; game_view_func-FEE3  j	...
push	ax
mov	ax, 0C982h
push	ax
call	far ptr	561h:0E6h

loc_188A3:				; CODE XREF: game_development_land_check+8  j		 /* DOS offset ---> FF6:3 */
add	sp, 4

loc_188A6:				; CODE XREF: game_view_func:loc_187A7  j		 /* DOS offset ---> FF6:6 */
; game_view_func-FEEF  j	...
mov	ax, 4123h
push	ax
mov	ax, 0C982h
push	ax
call	far ptr	561h:0E6h

loc_188B3:				; CODE XREF: game_development_land_check+1D  j		 /* DOS offset ---> FF7:3 */
add	sp, 4
mov	ax, word ptr loc_140E2
cmp	[bp+var_6], ax
jnz	short loc_188C4

loc_188BE:				; CODE XREF: game_development_land_check+13  j		 /* DOS offset ---> FF7:E */
push	word ptr loc_14120+4
jmp	short loc_188C8
;     ***************************************************************************

loc_188C4:				; CODE XREF: game_view_func-FE08  j		 /* DOS offset ---> FF8:4 */
push	word ptr loc_14125+1

loc_188C8:				; CODE XREF: game_view_func-FE02  j		 /* DOS offset ---> FF8:8 */
mov	ax, 0C982h
push	ax
call	far ptr	561h:0E6h
add	sp, 4

loc_188D4:				; CODE XREF: dseg:288CE  j		 /* DOS offset ---> FF9:4 */
cmp	word_1CB68, 0

loc_188D9:				; CODE XREF: dseg:288D3  j		 /* DOS offset ---> FF9:9 */
jz	short loc_188E2
call	far ptr	4B5h:290h
jmp	short loc_1891A
;     ***************************************************************************

loc_188E2:				; CODE XREF: game_view_func:loc_188D9  j		 /* DOS offset ---> FFA:2 */
sub	ax, ax
push	ax
mov	cx, 10h
push	cx
mov	cx, 4Fh	; 'O'
push	cx
mov	cx, 60h	; '`'
push	cx
push	ax

loc_188F2:				; CODE XREF: dseg:288EA  j dseg:288EF  j		 /* DOS offset ---> FFB:2 */
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 60h	; '`'
push	ax

loc_188FE:				; CODE XREF: game_development_flood_query+35  j		 /* DOS offset ---> FFB:E */
mov	ax, 0C982h
push	ax

loc_18902:				; CODE XREF: dseg:288FA  j dseg:288FF  j		 /* DOS offset ---> FFC:2 */
call	far ptr	561h:11Eh
add	sp, 2
shr	ax, 1
sub	ax, 28h	; '('
neg	ax
push	ax
call	far ptr	3EFh:434h
add	sp, 4

loc_1891A:				; CODE XREF: game_view_func-FDE4  j		 /* DOS offset ---> FFD:A */
mov	ax, 0C982h
push	ax

loc_1891E:				; CODE XREF: dseg:2908D  p dseg:29105  p ...		 /* DOS offset ---> FFD:E */
call	far ptr	3EFh:6C0h
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_view_func
;     ***************************************************************************
nop

loc_1892C:				; CODE XREF: game_reward_gift_writing-FED7  p		 /* DOS offset ---> FFE:C */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
;     ***************************************************************************

loc_1892F:				; CODE XREF: game_development_flood_query+64  j		 /* DOS offset ---> FFE:F */
sub	sp, 60h
push	si

loc_18933:				; CODE XREF: dseg:2892D  j		 /* DOS offset ---> FFF:3 */
push	word ptr loc_140E2
call	far ptr	542h:0BAh
add	sp, 2

loc_1893F:				; CODE XREF: dseg:28938  j		 /* DOS offset ---> FFF:F */
mov	[bp-2],	ax

loc_18942:				; CODE XREF: dseg:2893D  j		 /* DOS offset ---> 1000:2 */
mov	bx, word ptr loc_140E2+2
mov	ax, [bx]
add	ax, 1Ch
push	ax
lea	ax, [bp-60h]
push	ax

loc_18950:				; CODE XREF: dseg:2894A  j		 /* DOS offset ---> 1001:0 */
; game_development_flood_query+88  j
call	far ptr	561h:0BEh

loc_18955:				; CODE XREF: dseg:2894F  j		 /* DOS offset ---> 1001:5 */
; game_development_flood_query+8C  j
add	sp, 4
mov	al, byte ptr loc_1CB65+2
sub	ah, ah
cmp	ax, 6
jbe	short loc_18965
jmp	loc_18A02
;     ***************************************************************************

loc_18965:				; CODE XREF: dseg:8960  j		 /* DOS offset ---> 1002:5 */
shl	ax, 1
xchg	ax, bx
jmp	word ptr cs:(loc_107EB+3)[bx]
;     ***************************************************************************
nop
cld
pop	es
add	cl, [bx+si]
push	sp

loc_18973:				; CODE XREF: dseg:2895C  j		 /* DOS offset ---> 1003:3 */
or	[bp+8],	ah
cld

loc_18977:				; CODE XREF: dseg:28971  j		 /* DOS offset ---> 1003:7 */
pop	es
add	cl, [bx+si]
push	sp
or	[bx+si+4128h], bh
jmp	short loc_189F5
;     ***************************************************************************
nop
mov	ax, 413Ch
push	ax
lea	ax, [bp-60h]
push	ax

loc_1898A:		 /* DOS offset ---> 1004:A */
call	far ptr	561h:0E6h
add	sp, 4
mov	bx, word ptr loc_140E8

loc_18996:				; CODE XREF: dseg:28992  j		 /* DOS offset ---> 1005:6 */
mov	si, word ptr loc_140E2+2

loc_1899A:				; CODE XREF: dseg:28996  j		 /* DOS offset ---> 1005:A */
mov	ax, [si]
cmp	[bx+6],	ax
jnz	short loc_189A6
mov	ax, 413Dh
jmp	short loc_189B5
;     ***************************************************************************

loc_189A6:				; CODE XREF: dseg:899F  j		 /* DOS offset ---> 1006:6 */
cmp	byte ptr loc_1CB65+2, 1
jnz	short loc_189B2
mov	ax, 413Eh
jmp	short loc_189B5
;     ***************************************************************************

loc_189B2:				; CODE XREF: dseg:89AB  j		 /* DOS offset ---> 1007:2 */
mov	ax, 414Bh

loc_189B5:				; CODE XREF: dseg:89A4  j dseg:89B0  j		 /* DOS offset ---> 1007:5 */
push	ax
; START	OF FUNCTION CHUNK FOR game_development_flood_query

loc_189B6:				; CODE XREF: game_development_flood_query+CE  j		 /* DOS offset ---> 1007:6 */
lea	ax, [bp+var_60]
push	ax

loc_189BA:				; CODE XREF: dseg:289B3  j dseg:289B8  j		 /* DOS offset ---> 1007:A */
call	far ptr	561h:0E6h
add	sp, 4
cmp	[bp+var_2], 0

loc_189C6:				; CODE XREF: game_development_flood_query+37  j		 /* DOS offset ---> 1008:6 */
; game_development_flood_query+66  j ...
jz	short loc_189CE
mov	ax, 4158h
jmp	short loc_189F5
; END OF FUNCTION CHUNK	FOR game_development_flood_query
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_development_flood_query

loc_189CE:				; CODE XREF: game_development_flood_query:loc_189C6  j		 /* DOS offset ---> 1008:E */
mov	ax, 416Bh
jmp	short loc_189F5
; END OF FUNCTION CHUNK	FOR game_development_flood_query
;     ***************************************************************************
nop
cmp	word ptr [bp-2], 0
jz	short loc_189E0
mov	ax, 4176h
jmp	short loc_189F5
;     ***************************************************************************
nop

loc_189E0:				; CODE XREF: dseg:89D8  j		 /* DOS offset ---> 100A:0 */
; game_development_flood_check+8  j
mov	ax, 4190h
jmp	short loc_189F5
;     ***************************************************************************
nop
cmp	word ptr [bp-2], 0
jz	short loc_189F2
mov	ax, 41A0h
jmp	short loc_189F5
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_development_flood_check

loc_189F2:				; CODE XREF: dseg:89EA  j		 /* DOS offset ---> 100B:2 */
; game_development_flood_check+1D  j
mov	ax, 41BFh
; END OF FUNCTION CHUNK	FOR game_development_flood_check
; START	OF FUNCTION CHUNK FOR game_development_flood_query

loc_189F5:				; CODE XREF: dseg:897F  j		 /* DOS offset ---> 100B:5 */
; game_development_flood_query-FEFB  j ...
push	ax
lea	ax, [bp+var_60]
push	ax

loc_189FA:				; CODE XREF: Q_28E30+74  p		 /* DOS offset ---> 100B:A */
call	far ptr	561h:0E6h

loc_189FF:				; CODE XREF: game_development_flood_check+13  j		 /* DOS offset ---> 100B:F */
add	sp, 4

loc_18A02:				; CODE XREF: dseg:8962  j		 /* DOS offset ---> 100C:2 */
call	far ptr	0:15B3h
mov	ax, 60h	; '`'
push	ax
lea	ax, [bp+var_60]
push	ax
call	far ptr	561h:11Eh
add	sp, 2
shr	ax, 1
sub	ax, 28h	; '('
neg	ax
push	ax

loc_18A1F:				; CODE XREF: dseg:28A08  j dseg:28A17  j		 /* DOS offset ---> 100D:F */
call	far ptr	3EFh:434h
add	sp, 4

s_18A27:		 /* DOS offset ---> 200E:7 */
lea	ax, [bp+var_60]
push	ax

loc_18A2B:				; CODE XREF: dseg:28A3A  j		 /* DOS offset ---> 100E:B */
call	far ptr	3EFh:6C0h
add	sp, 2
mov	al, 0Ah
push	ax
call	far ptr	57Ch:7Ch

loc_18A3B:				; CODE XREF: dseg:28A25  j		 /* DOS offset ---> 100F:B */
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_development_flood_query
;     ***************************************************************************
nop

loc_18A44:				; CODE XREF: game_reward_gift_horse-FF9B  p		 /* DOS offset ---> 1010:4 */
; dseg:29410  p ...
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Eh
db 0C7h	;   *
db  46h	; F
db 0FCh	;   *
db  86h	;   *
db 0CBh	;   *
db 0A1h	;   *
db  86h	;   *
db 0CBh	;   *
;     ***************************************************************************

loc_18A52:				; CODE XREF: dseg:28A92  j		 /* DOS offset ---> 1011:2 */
mov	[bp-6],	ax

loc_18A55:				; CODE XREF: game_reward_gift_writing+29  j		 /* DOS offset ---> 1011:5 */
mov	bx, 0CB72h
mov	[bp-0Ah], bx
mov	cx, [bx]
mov	[bp-0Ch], cx
push	ax
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short loc_18A82
push	word ptr [bp-0Ch]

loc_18A70:				; CODE XREF: game_reward_gift_writing+45  j		 /* DOS offset ---> 1013:0 */
call	far ptr	542h:0BAh

loc_18A75:				; CODE XREF: game_reward_gift_writing+4A  j		 /* DOS offset ---> 1013:5 */
add	sp, 2
or	ax, ax
jz	short loc_18A82
mov	ax, [bp-0Ah]
jmp	short loc_18A85
;     ***************************************************************************
nop

loc_18A82:				; CODE XREF: dseg:8A6B  j dseg:8A7A  j		 /* DOS offset ---> 1014:2 */
mov	ax, [bp-4]

loc_18A85:				; CODE XREF: dseg:8A7F  j		 /* DOS offset ---> 1014:5 */
mov	[bp-0Eh], ax
cmp	byte ptr loc_1CB65+2, 4
jnb	short loc_18AAC
mov	ax, [bp-6]
mov	word ptr loc_140E2, ax
mov	ax, [bp-0Ch]

loc_18A98:				; CODE XREF: dseg:28A77  j dseg:28A86  j		 /* DOS offset ---> 1015:8 */
mov	word ptr loc_140E2+2, ax
mov	byte ptr loc_140E5+1, 1

loc_18AA0:				; CODE XREF: dseg:290E8  p		 /* DOS offset ---> 1016:0 */
mov	ax, [bp-4]
mov	word ptr loc_140E8, ax
mov	ax, [bp-0Ah]
jmp	short loc_18AC6
;     ***************************************************************************
nop

loc_18AAC:				; CODE XREF: dseg:8A8D  j		 /* DOS offset ---> 1016:C */
mov	ax, [bp-0Ch]
mov	word ptr loc_140E2, ax
mov	ax, [bp-6]
mov	word ptr loc_140E2+2, ax
mov	byte ptr loc_140E5+1, 0
mov	ax, [bp-0Ah]
mov	word ptr loc_140E8, ax
mov	ax, [bp-4]

loc_18AC6:				; CODE XREF: dseg:8AA9  j		 /* DOS offset ---> 1018:6 */
mov	word ptr loc_140E8+2, ax

loc_18AC9:				; CODE XREF: game_reward_gift_writing+83  j		 /* DOS offset ---> 1018:9 */
call	far ptr	8C2h:266h
push	cs
call	loc_1851A
mov	[bp-2],	al
mov	bx, [bp-0Eh]
mov	ax, word ptr loc_140E2
cmp	[bx], ax
; START	OF FUNCTION CHUNK FOR game_reward_gift_writing

loc_18ADD:				; CODE XREF: game_reward_gift_writing+2B  j		 /* DOS offset ---> 1019:D */
; game_reward_gift_writing+6E  j
jnz	short loc_18AF0
mov	ax, 5
push	ax
call	far ptr	3EFh:458h
add	sp, 2
mov	al, 0Fh

loc_18AED:				; CODE XREF: dseg:28AD1  j dseg:28AE8  j		 /* DOS offset ---> 101A:D */
jmp	short loc_18AFE
; END OF FUNCTION CHUNK	FOR game_reward_gift_writing
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_reward_gift_writing

loc_18AF0:				; CODE XREF: game_reward_gift_writing:loc_18ADD  j		 /* DOS offset ---> 101B:0 */
mov	ax, 2

loc_18AF3:				; CODE XREF: dseg:28AEC  j		 /* DOS offset ---> 101B:3 */
push	ax
call	far ptr	3EFh:458h
add	sp, 2
mov	al, 10h

loc_18AFE:				; CODE XREF: game_reward_gift_writing:loc_18AED  j		 /* DOS offset ---> 101B:E */
push	ax
call	far ptr	6EBh:96h
add	sp, 2
sub	al, al
push	ax
call	far ptr	6EBh:100h
add	sp, 2
mov	ax, 41E4h
push	ax

loc_18B16:				; CODE XREF: dseg:28AFA  j dseg:28B14  j		 /* DOS offset ---> 101D:6 */
call	far ptr	3EFh:6C0h
add	sp, 2

loc_18B1E:				; CODE XREF: game_reward_gift_loyalty_output+1C  j		 /* DOS offset ---> 101D:E */
cmp	word_1CB68, 0
jz	short loc_18B50

loc_18B25:				; CODE XREF: dseg:28B6B  j		 /* DOS offset ---> 101E:5 */
call	far ptr	4B5h:290h
push	[bp+var_E]
push	cs
call	loc_18754
add	sp, 2
mov	al, 1Eh
push	ax
call	far ptr	57Ch:7Ch

loc_18B3C:		 /* DOS offset ---> 101F:C */
add	sp, 2

loc_18B3F:				; CODE XREF: game_reward_gift_writing-FEE2  j		 /* DOS offset ---> 101F:F */
call	far ptr	6EBh:64h
or	ax, ax
jnz	short loc_18B3F
call	far ptr	4B5h:290h
jmp	short loc_18B71
; END OF FUNCTION CHUNK	FOR game_reward_gift_writing
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_reward_gift_writing

loc_18B50:				; CODE XREF: game_reward_gift_writing-FF05  j		 /* DOS offset ---> 1021:0 */
push	cs
call	loc_1892C
push	[bp+var_E]
push	cs
call	loc_18754
add	sp, 2

loc_18B5E:				; CODE XREF: game_reward_gift_writing-FEC3  j		 /* DOS offset ---> 1021:E */
; dseg:28B3D  j
call	far ptr	6EBh:64h
or	ax, ax
jnz	short loc_18B5E
call	far ptr	0:15B3h

loc_18B6C:				; CODE XREF: dseg:28B23  j		 /* DOS offset ---> 1022:C */
call	far ptr	4B5h:364h

loc_18B71:				; CODE XREF: game_reward_gift_writing-FEDB  j		 /* DOS offset ---> 1023:1 */
mov	ax, 7
push	ax

loc_18B75:				; CODE XREF: dseg:291CB  p		 /* DOS offset ---> 1023:5 */
call	far ptr	3EFh:458h
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_reward_gift_writing
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
mov	al, byte ptr loc_1CB65+2
and	ax, 80h
; START	OF FUNCTION CHUNK FOR game_reward_gift_horse

loc_18B8E:				; CODE XREF: game_reward_gift_horse+4A  j		 /* DOS offset ---> 1024:E */
mov	word_1CB68, ax

loc_18B91:				; CODE XREF: game_reward_gift_horse+4E  j		 /* DOS offset ---> 1025:1 */
or	ax, ax
jz	short loc_18B9A
and	byte ptr loc_1CB65+2, 7Fh

loc_18B9A:				; CODE XREF: game_reward_gift_horse-FFAB  j		 /* DOS offset ---> 1025:A */
mov	bx, word_1CA9A
mov	byte ptr [bx+11h], 0FFh
push	cs
call	loc_18A44
mov	byte ptr [bp+var_2], al
call	far ptr	9D5h:58Eh
mov	word_13536, 0
call	far ptr	9D5h:0
call	far ptr	8C2h:4DAh

loc_18BBE:				; CODE XREF: game_reward_gift_horse+29  j		 /* DOS offset ---> 1027:E */
; game_reward_gift_horse+5E  j
add	byte ptr [bp+var_2], al

loc_18BC1:		 /* DOS offset ---> 1028:1 */
call	far ptr	8C2h:45Ch

loc_18BC6:		 /* DOS offset ---> 1028:6 */
call	far ptr	8C2h:902h
cmp	byte ptr [bp+var_2], 0
jz	short loc_18BDD
mov	al, byte ptr [bp+var_2]
push	ax
call	far ptr	8C2h:300h
add	sp, 2

loc_18BDD:				; CODE XREF: game_reward_gift_horse-FF6F  j		 /* DOS offset ---> 1029:D */
mov	ax, word_1CB86
cmp	word ptr loc_140E2, ax
jnz	short loc_18C0F
push	word ptr loc_140E2
call	far ptr	542h:0BAh
add	sp, 2

loc_18BF2:				; CODE XREF: game_reward_gift_gold+29  j		 /* DOS offset ---> 102B:2 */
or	ax, ax
jz	short loc_18C0F
mov	ax, word_1CA9A
mov	word_13536, ax
push	ax
push	word ptr loc_140E2
call	far ptr	0A49h:44Ah
add	sp, 4
mov	word_13536, 0

loc_18C0F:				; CODE XREF: game_reward_gift_horse-FF5A  j		 /* DOS offset ---> 102C:F */
; game_reward_gift_horse-FF4A  j
cmp	word_13572, 0
jz	short loc_18C22
cmp	word_1CB68, 0
jnz	short loc_18C22
call	far ptr	4B5h:358h

loc_18C22:				; CODE XREF: game_reward_gift_horse-FF2A  j		 /* DOS offset ---> 102E:2 */
; game_reward_gift_horse-FF23  j
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_reward_gift_horse
;     ***************************************************************************

loc_18C26:				; CODE XREF: dseg:28C0A  j dseg:28C21  j		 /* DOS offset ---> 102E:6 */
push	bp
mov	bp, sp

loc_18C29:				; CODE XREF: dseg:28C7E  j		 /* DOS offset ---> 102E:9 */
sub	sp, 2
push	si
mov	word_13574, 0
mov	ax, word_1CA9A
mov	word_13536, ax
mov	ax, 7
push	ax
mov	ax, 3Ah	; ':'
push	ax
mov	ax, 2Ah	; '*'
push	ax
mov	ax, 3
; START	OF FUNCTION CHUNK FOR game_reward_gift_gold

loc_18C48:				; CODE XREF: game_reward_gift_gold+7E  j		 /* DOS offset ---> 1030:8 */
push	ax

loc_18C49:				; CODE XREF: game_reward_gift_gold+82  j		 /* DOS offset ---> 1030:9 */
mov	ax, 25h	; '%'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
call	far ptr	4B5h:282h
push	word_1CA9A
call	far ptr	525h:18h
add	sp, 2
push	ax
push	word_1CA9A
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, 41E8h
push	ax

loc_18C7B:				; CODE XREF: dseg:28C4E  j dseg:28C62  j ...		 /* DOS offset ---> 1033:B */
call	far ptr	3EFh:6E8h
add	sp, 6		; CODE XREF: dseg:28C79  j
; END OF FUNCTION CHUNK	FOR game_reward_gift_gold
;     ***************************************************************************
db 0B8h	;   *
db    4
db    0
db  50h	; P
db 0B8h	;   *
db    0
db    2
db  50h	; P
db  9Ah	;   *
unk_18C8C	db 0ECh	;   *		; CODE XREF: dseg:28C80  j
db    6
db 0B5h	;   *
db    4
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  37h	; 7
db  89h	;   *
db  76h	; v
db 0FEh	;   *
db 0FFh
db  74h	; t
db  1Ah
db 0B8h	;   *
db  0Ch
db    0
db  50h	; P
db 0B8h	;   *
db  41h	; A
db    0
db  50h	; P
db  9Ah	;   *
db 0A4h	;   *
db    6
db 0B5h	;   *
unk_18CAA	db    4			; CODE XREF: game_reward_func_options+22  j
db  83h	;   *
unk_18CAC	db 0C4h	;   *		; CODE XREF: game_reward_func_options+27  j
db    6
db 0B8h	;   *
db  28h	; (
unk_18CB0	db    0			; CODE XREF: dseg:28C89  j
db  50h	; P
db 0B8h	;   *
db  26h	; &
db    0
db  50h	; P
;     ***************************************************************************

loc_18CB6:				; CODE XREF: dseg:28C23  j XYZ+B  p		 /* DOS offset ---> 1037:6 */
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 41FBh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, word ptr loc_140E2
cmp	[bp+6],	ax
jnz	short loc_18CD8
mov	ax, 4200h
jmp	short loc_18CDB
;     ***************************************************************************
nop

loc_18CD8:				; CODE XREF: dseg:8CD0  j		 /* DOS offset ---> 1039:8 */
mov	ax, 4209h

loc_18CDB:				; CODE XREF: dseg:8CD5  j		 /* DOS offset ---> 1039:B */
push	ax
; START	OF FUNCTION CHUNK FOR game_reward_func_options

loc_18CDC:				; CODE XREF: game_reward_func_options+40  j		 /* DOS offset ---> 1039:C */
; game_reward_func_options+53  j
call	far ptr	3EFh:6E8h

loc_18CE1:				; CODE XREF: game_reward_func_options+5A  j		 /* DOS offset ---> 103A:1 */
add	sp, 2
mov	ax, [bp+var_2]

loc_18CE7:				; CODE XREF: AAA+1B  j		 /* DOS offset ---> 103A:7 */
add	ax, 1Ch
push	ax

loc_18CEB:				; CODE XREF: game_reward_func_options+65  j		 /* DOS offset ---> 103A:B */
; dseg:28D61  j
mov	ax, 4210h

loc_18CEE:				; CODE XREF: game_reward_func_options+6A  j		 /* DOS offset ---> 103A:E */
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_reward_func_options
;     ***************************************************************************

loc_18CFC:				; CODE XREF: dseg:28CF0  j		 /* DOS offset ---> 103B:C */
push	bp
mov	bp, sp

loc_18CFF:				; CODE XREF: game_reward_func_options+1C  j		 /* DOS offset ---> 103B:F */
; game_reward_func_options+36  j	...
cmp	word_13572, 0
jz	short loc_18D0B
call	far ptr	4B5h:358h
; START	OF FUNCTION CHUNK FOR game_reward_func_options

loc_18D0B:				; CODE XREF: dseg:8D04  j		 /* DOS offset ---> 103C:B */
; game_reward_func_options+7E  j
mov	bx, [bp+arg_2]
push	word ptr [bx+1Ah]
mov	ax, 54h	; 'T'
push	ax

loc_18D15:		 /* DOS offset ---> 103D:5 */
mov	ax, 2Ah	; '*'
push	ax

loc_18D19:				; CODE XREF: game_reward_func_sub+6D  j		 /* DOS offset ---> 103D:9 */
; game_reward_func_sub+86  j
call	far ptr	4B5h:6A4h
mov	sp, bp
sub	ax, ax
push	ax
mov	cx, 8
push	cx
mov	cx, 7
push	cx

loc_18D2B:				; CODE XREF: game_reward_func_sub+30  j		 /* DOS offset ---> 103E:B */
mov	cx, 64h	; 'd'
push	cx
mov	cx, 33h	; '3'
push	cx

loc_18D33:				; CODE XREF: dseg:28D2D  j		 /* DOS offset ---> 103F:3 */
call	far ptr	juqiang_draw_shape_to_video_buffer
mov	sp, bp
mov	ax, [bp+arg_2]
add	ax, 1Ch
push	ax

loc_18D41:				; CODE XREF: dseg:28D34  j		 /* DOS offset ---> 1040:1 */
mov	ax, 421Ch
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp

loc_18D4C:				; CODE XREF: dseg:28D26  j		 /* DOS offset ---> 1040:C */
push	[bp+arg_2]
call	far ptr	542h:1D8h
mov	sp, bp

loc_18D56:				; CODE XREF: dseg:28D4B  j		 /* DOS offset ---> 1041:6 */
or	ax, ax
jz	short loc_18D8C
sub	ax, ax
push	ax
mov	ax, 28h	; '('
push	ax
mov	ax, 0Fh
push	ax
mov	ax, 50h	; 'P'

loc_18D68:				; CODE XREF: Q_28E30+34  p		 /* DOS offset ---> 1042:8 */
push	ax
mov	ax, 33h	; '3'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
mov	sp, bp

loc_18D74:				; CODE XREF: game_reward_func_sub+4F  j		 /* DOS offset ---> 1043:4 */
mov	ax, 4238h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
mov	ax, [bp+arg_2]
add	ax, 1Ch
push	ax

loc_18D86:				; CODE XREF: game_reward_func_sub+52  j		 /* DOS offset ---> 1044:6 */
mov	ax, 4242h

loc_18D89:				; CODE XREF: dseg:28DDA  j		 /* DOS offset ---> 1044:9 */
jmp	short loc_18DB8
; END OF FUNCTION CHUNK	FOR game_reward_func_options
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_reward_func_options

loc_18D8C:				; CODE XREF: game_reward_func_options-FF28  j		 /* DOS offset ---> 1044:C */
mov	bx, [bp+arg_2]
cmp	byte ptr [bx+0Ah], 0FFh

loc_18D93:				; CODE XREF: game_reward_func_sub+AA  j		 /* DOS offset ---> 1045:3 */
jnz	short loc_18DA4
mov	ax, 4253h
push	ax
call	far ptr	3EFh:6E8h

loc_18D9E:				; CODE XREF: game_reward_func_sub+55  j		 /* DOS offset ---> 1045:E */
add	sp, 2
jmp	short loc_18DC1
; END OF FUNCTION CHUNK	FOR game_reward_func_options
;     ***************************************************************************
nop

loc_18DA4:				; CODE XREF: game_reward_func_options:loc_18D93  j		 /* DOS offset ---> 1046:4 */
push	bx
call	far ptr	525h:30h
add	sp, 2
mov	bx, ax
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 4262h
; START	OF FUNCTION CHUNK FOR game_reward_func_options

loc_18DB8:				; CODE XREF: game_reward_func_options:loc_18D89  j		 /* DOS offset ---> 1047:8 */
push	ax

loc_18DB9:				; CODE XREF: game_reward_func_sub+92  j		 /* DOS offset ---> 1047:9 */
call	far ptr	3EFh:6E8h
add	sp, 4

loc_18DC1:				; CODE XREF: game_reward_func_options-FEDF  j		 /* DOS offset ---> 1048:1 */
; game_reward_func_sub+4C  j ...
mov	ax, 4279h
push	ax

loc_18DC5:				; CODE XREF: game_reward_func_sub+5C  j		 /* DOS offset ---> 1048:5 */
; game_reward_func_sub+66  j ...
call	far ptr	3EFh:6C0h
add	sp, 2
mov	bx, [bp+arg_2]
mov	al, [bx+6]
sub	ah, ah
push	ax
mov	al, [bx+5]
push	ax

loc_18DDA:				; CODE XREF: dseg:28D87  j		 /* DOS offset ---> 1049:A */
mov	al, [bx+4]
push	ax
push	word ptr [bx+12h]
mov	al, [bx+19h]
sub	ax, year_value
neg	ax

loc_18DEA:				; CODE XREF: dseg:2981B  p		 /* DOS offset ---> 104A:A */
inc	ax
push	ax
mov	ax, 4281h
push	ax

loc_18DF0:				; CODE XREF: game_reward_func+17  j		 /* DOS offset ---> 104B:0 */
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_reward_func_options
;     ***************************************************************************
nop

loc_18DFA:				; CODE XREF: game_reward_func-FF5E  p		 /* DOS offset ---> 104B:A */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  8Bh	;   *
db  1Eh
db 0E8h	;   *
db  40h	; @
db  83h	;   *
db  7Fh	; 
db    6
db    0
db  75h	; u
db  0Ah
db  8Bh	;   *
db  46h	; F
db    6
db  89h	;   *
db  47h	; G
db    6
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db 0FFh
db  77h	; w
db    6
db  9Ah	;   *
db  62h	; b
db    0
db  9Dh	;   *
db    5
db  8Bh	;   *
db 0D8h	;   *
db  8Bh	;   *
db  46h	; F
db    6
db  89h	;   *
db    7
db  8Bh	;   *
unk_18E24	db 0E5h	;   *		; CODE XREF: game_reward_func+36  j
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
push	bp
mov	bp, sp

loc_18E2B:				; CODE XREF: dseg:28E09  j		 /* DOS offset ---> 104E:B */
sub	sp, 2

loc_18E2E:				; CODE XREF: dseg:290D3  p		 /* DOS offset ---> 104E:E */
mov	byte ptr [bp-2], 0
; START	OF FUNCTION CHUNK FOR game_reward_func

loc_18E32:				; CODE XREF: game_reward_func-FF51  j		 /* DOS offset ---> 104F:2 */
mov	bl, byte ptr loc_140E5+1

loc_18E36:				; CODE XREF: game_reward_func+5B  j		 /* DOS offset ---> 104F:6 */
xor	bl, 1
sub	bh, bh
mov	ax, bx
shl	bx, 1

loc_18E3F:				; CODE XREF: game_reward_func+5E  j		 /* DOS offset ---> 104F:F */
add	bx, ax
shl	bx, 1
mov	al, [bp+var_2]
sub	ah, ah
add	bx, ax

loc_18E4A:				; CODE XREF: game_reward_func+61  j		 /* DOS offset ---> 1050:A */
shl	bx, 1
cmp	word ptr [bx-354Bh], 0

loc_18E51:				; CODE XREF: game_reward_func+6E  j		 /* DOS offset ---> 1051:1 */
; game_reward_func+78  j
jz	short loc_18E78

loc_18E53:				; CODE XREF: game_reward_func+63  j		 /* DOS offset ---> 1051:3 */
mov	bl, byte ptr loc_140E5+1

loc_18E57:				; CODE XREF: Q_28E30+67  j		 /* DOS offset ---> 1051:7 */
xor	bl, 1
sub	bh, bh
mov	ax, bx
shl	bx, 1

loc_18E60:				; CODE XREF: Q_28E30+27  j		 /* DOS offset ---> 1052:0 */
add	bx, ax
shl	bx, 1
mov	al, [bp+var_2]
sub	ah, ah
add	bx, ax
shl	bx, 1

loc_18E6D:				; CODE XREF: Q_28E30+A4  j		 /* DOS offset ---> 1052:D */
push	word ptr [bx-3533h]
push	cs
call	loc_18DFA
add	sp, 2

loc_18E78:				; CODE XREF: game_reward_func:loc_18E51  j		 /* DOS offset ---> 1053:8 */
inc	[bp+var_2]
cmp	[bp+var_2], 6
jb	short loc_18E32
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_reward_func
;     ***************************************************************************
nop

loc_18E86:				; CODE XREF: game_give_population_func+10  j		 /* DOS offset ---> 1054:6 */
push	bp
mov	bp, sp
sub	sp, 4
push	si
cmp	byte ptr loc_140E5+1, 0
jnz	short loc_18E97
jmp	loc_18F1B
;     ***************************************************************************

loc_18E97:				; CODE XREF: dseg:8E92  j		 /* DOS offset ---> 1055:7 */
; game_give_population_func+27  j
mov	bx, word_1CA9A
mov	ax, [bx+2]
mov	[bp-2],	ax
or	ax, ax
jz	short loc_18EFF
mov	bx, word ptr loc_140E8

loc_18EA9:				; CODE XREF: game_give_population_func+3C  j		 /* DOS offset ---> 1056:9 */
cmp	word ptr [bx+6], 0
jnz	short loc_18EB4

loc_18EAF:				; CODE XREF: game_give_population_func+3A  j		 /* DOS offset ---> 1056:F */
; game_give_population_func+43  j
mov	[bx+6],	ax

loc_18EB2:				; CODE XREF: game_give_population_func+48  j		 /* DOS offset ---> 1057:2 */
jmp	short loc_18EF6
;     ***************************************************************************

loc_18EB4:				; CODE XREF: dseg:8EAD  j		 /* DOS offset ---> 1057:4 */
push	word ptr [bx+6]
call	far ptr	59Dh:62h
add	sp, 2
mov	[bp-4],	ax
push	word ptr [bp-2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_18EEE
mov	bx, [bp-2]
mov	ax, [bx]
mov	si, [bp-4]
mov	[si], ax
mov	si, word ptr loc_140E8
mov	ax, [si+6]
mov	[bx], ax

loc_18EE4:				; CODE XREF: game_give_population_func+7C  j		 /* DOS offset ---> 105A:4 */
mov	si, word ptr loc_140E8
mov	[si+6],	bx
jmp	short loc_18EF6
;     ***************************************************************************
nop

loc_18EEE:				; CODE XREF: dseg:8ECF  j		 /* DOS offset ---> 105A:E */
mov	ax, [bp-2]
mov	bx, [bp-4]
mov	[bx], ax

loc_18EF6:				; CODE XREF: dseg:loc_18EB2  j		 /* DOS offset ---> 105B:6 */
; dseg:8EEB  j
mov	bx, word_1CA9A
mov	word ptr [bx+2], 0

loc_18EFF:				; CODE XREF: dseg:8EA3  j		 /* DOS offset ---> 105B:F */
push	word_1CA9A

loc_18F03:				; CODE XREF: dseg:29062  p		 /* DOS offset ---> 105C:3 */
; game_give_population_func+9A  j
push	word ptr loc_140E2+2
call	far ptr	59Dh:52Eh
add	sp, 4

loc_18F0F:		 /* DOS offset ---> 105C:F */
push	word_1CA9A
call	far ptr	59Dh:50Eh
add	sp, 2

loc_18F1B:				; CODE XREF: dseg:8E94  j		 /* DOS offset ---> 105D:B */
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
push	si

loc_18F27:				; CODE XREF: game_give_population_func+BE  j		 /* DOS offset ---> 105E:7 */
; dseg:28F85  j
mov	bx, word ptr loc_140E8

loc_18F2B:				; CODE XREF: game_give_population_func+C2  j		 /* DOS offset ---> 105E:B */
mov	ax, [bx+0Ah]
mov	[bp-2],	ax
mov	bx, ax
mov	ax, [bx+2]
mov	[bp-0Ah], ax
or	ax, ax
jnz	short loc_18F40
jmp	loc_19076
;     ***************************************************************************

loc_18F40:				; CODE XREF: dseg:8F3B  j		 /* DOS offset ---> 1060:0 */
mov	ax, 7530h
push	ax
mov	ax, 0Ah
push	ax
mov	al, [bp+6]
sub	ah, ah
push	ax
mov	bx, word_1CA9A
push	word ptr [bx+8]
mov	si, ax
call	far ptr	49Ch:0Ah
add	sp, 6
mov	[bp-4],	ax
push	ax
mov	cx, [bp-0Ah]
add	cx, 8
push	cx
call	far ptr	49Ch:8Ch
add	sp, 6
mov	ax, [bp-4]
mov	bx, word_1CA9A

loc_18F79:				; CODE XREF: dseg:28F30  j dseg:28F36  j ...		 /* DOS offset ---> 1063:9 */
sub	[bx+8],	ax
mov	ax, 0Ah
cwd
push	dx
push	ax
sub	cx, cx
push	cx
push	si

loc_18F86:				; CODE XREF: dseg:28F28  j		 /* DOS offset ---> 1064:6 */
mov	bx, word_1CA9A
push	word ptr [bx+0Ch]

loc_18F8D:				; CODE XREF: game_give_population_func+109  j		 /* DOS offset ---> 1064:D */
push	word ptr [bx+0Ah]

loc_18F90:				; CODE XREF: dseg:29074  p		 /* DOS offset ---> 1065:0 */
call	far ptr	0:38B2h
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	[bp-8],	ax
; START	OF FUNCTION CHUNK FOR game_give_population_func

loc_18F9F:				; CODE XREF: game_give_population_func+7E  j		 /* DOS offset ---> 1065:F */
; game_give_population_func+9C  j ...
mov	[bp+var_6], dx
mov	bx, [bp+var_A]
add	[bx+0Ah], ax
adc	[bx+0Ch], dx

loc_18FAB:		 /* DOS offset ---> 1066:B */
cmp	word ptr [bx+0Ch], 2Dh ; '-'

loc_18FAF:				; CODE XREF: dseg:28FAA  j		 /* DOS offset ---> 1066:F */
jl	short loc_18FC7

loc_18FB1:				; CODE XREF: dseg:28FAE  j		 /* DOS offset ---> 1067:1 */
jg	short loc_18FBA
cmp	word ptr [bx+0Ah], 0C6C0h
jbe	short loc_18FC7

loc_18FBA:				; CODE XREF: game_give_population_func:loc_18FB1  j		 /* DOS offset ---> 1067:A */
mov	bx, [bp+var_A]
mov	word ptr [bx+0Ah], 0C6C0h
mov	word ptr [bx+0Ch], 2Dh ; '-'

loc_18FC7:				; CODE XREF: game_give_population_func:loc_18FAF  j		 /* DOS offset ---> 1068:7 */
; game_give_population_func-FEAE  j
mov	ax, [bp+var_8]
mov	dx, [bp+var_6]

loc_18FCD:				; CODE XREF: game_merchants_buy_weapons_amount_query_func+F  j		 /* DOS offset ---> 1068:D */
mov	bx, word_1CA9A
sub	[bx+0Ah], ax

loc_18FD4:				; CODE XREF: dseg:297D5  p dseg:297FD  p		 /* DOS offset ---> 1069:4 */
sbb	[bx+0Ch], dx
mov	al, 64h	; 'd'
push	ax
mov	al, [bp+arg_0]
shl	al, 1
push	ax
mov	ax, [bp+var_2]
add	ax, 6

loc_18FE6:				; CODE XREF: dseg:28FE0  j		 /* DOS offset ---> 106A:6 */
push	ax

loc_18FE7:				; CODE XREF: dseg:28FE4  j		 /* DOS offset ---> 106A:7 */
call	far ptr	49Ch:48h
add	sp, 6
call	far ptr	4B5h:290h
cmp	word_1CB68, 0
jnz	short loc_19007
cmp	word_13572, 0
jz	short loc_19007

loc_19002:		 /* DOS offset ---> 106C:2 */
call	far ptr	4B5h:282h

loc_19007:				; CODE XREF: game_give_population_func-FE6D  j		 /* DOS offset ---> 106C:7 */
; game_give_population_func-FE66  j
push	word ptr loc_140E2
call	far ptr	542h:0BAh
add	sp, 2

loc_19013:				; CODE XREF: dseg:2900F  j		 /* DOS offset ---> 106D:3 */
or	ax, ax
jz	short loc_19038
push	[bp+var_6]
push	[bp+var_8]
push	[bp+var_4]

loc_19020:				; CODE XREF: dseg:2901B  j		 /* DOS offset ---> 106E:0 */
mov	bx, [bp+var_2]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 42CCh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Ah
jmp	short loc_1906B
; END OF FUNCTION CHUNK	FOR game_give_population_func
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_give_population_func

loc_19038:				; CODE XREF: game_give_population_func-FE51  j		 /* DOS offset ---> 106F:8 */
push	[bp+var_2]
call	far ptr	542h:0BAh
add	sp, 2
push	[bp+var_6]
push	[bp+var_8]
push	[bp+var_4]
mov	bx, [bp+var_2]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	bx, word ptr loc_140E2
mov	ax, [bx]

loc_1905B:				; CODE XREF: game_merchants_buy_weapons_amount_query_func+55  j		 /* DOS offset ---> 1071:B */
; dseg:29035  j
add	ax, 1Ch
push	ax
mov	ax, 4311h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Ch

loc_1906B:				; CODE XREF: game_give_population_func-FE31  j		 /* DOS offset ---> 1072:B */
mov	al, 14h
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2

loc_19076:				; CODE XREF: dseg:8F3D  j		 /* DOS offset ---> 1073:6 */
pop	si
mov	sp, bp
pop	bp

locret_1907A:				; CODE XREF: dseg:290DD  j
retf
; END OF FUNCTION CHUNK	FOR game_give_population_func
;     ***************************************************************************
nop
mov	bx, word_1CA9A
and	byte ptr [bx+12h], 8Bh
mov	bx, word_1CA9A
and	byte ptr [bx+13h], 0C7h
mov	bx, word_1CA9A

loc_19090:				; CODE XREF: dseg:2912E  j dseg:29168  j		 /* DOS offset ---> 1075:0 */
or	byte ptr [bx+13h], 40h
mov	bx, word_1CA9A

loc_19098:				; CODE XREF: dseg:2906A  j		 /* DOS offset ---> 1075:8 */
mov	byte ptr [bx+14h], 0FFh
mov	bx, word_1CA9A
mov	byte ptr [bx+15h], 0FFh
mov	ax, word ptr loc_1CAA2+1

loc_190A7:				; CODE XREF: dseg:290DB  j		 /* DOS offset ---> 1076:7 */
add	ax, word ptr unk_1CAA1
mov	bx, word_1CA9A
mov	[bx+8],	ax
mov	bx, word_1CA9A
cmp	word ptr [bx+8], 7530h
jbe	short loc_190C2
mov	word ptr [bx+8], 7530h

loc_190C2:				; CODE XREF: dseg:90BB  j		 /* DOS offset ---> 1078:2 */
mov	ax, word_1CAA9
mov	dx, word_1CAAB
add	ax, word ptr loc_1CAA2+3

loc_190CD:				; CODE XREF: dseg:290C9  j		 /* DOS offset ---> 1078:D */
adc	dx, word_1CAA7

loc_190D1:				; CODE XREF: game_merchants_buy_horses+55  j		 /* DOS offset ---> 1079:1 */
mov	bx, word_1CA9A
mov	[bx+0Ah], ax
mov	[bx+0Ch], dx
mov	bx, word_1CA9A

loc_190DF:				; CODE XREF: dseg:29011  j dseg:2901D  j		 /* DOS offset ---> 1079:F */
cmp	word ptr [bx+0Ch], 2Dh ; '-'

loc_190E3:		 /* DOS offset ---> 107A:3 */
jl	short locret_190F8
jg	short loc_190EE
cmp	word ptr [bx+0Ah], 0C6C0h
jbe	short locret_190F8

loc_190EE:				; CODE XREF: dseg:90E5  j		 /* DOS offset ---> 107A:E */
mov	word ptr [bx+0Ah], 0C6C0h
mov	word ptr [bx+0Ch], 2Dh ; '-'

locret_190F8:				; CODE XREF: dseg:loc_190E3  j
; dseg:90EC  j
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	word ptr [bp-8], 0CB7Ch
sub	al, al
mov	[bp-2],	al
mov	[bp-0Ah], al

loc_1910D:				; CODE XREF: dseg:loc_1916C  j		 /* DOS offset ---> 107C:D */
mov	bx, [bp-8]
cmp	word ptr [bx+2], 0
jz	short loc_19161
mov	bl, [bp-0Ah]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-3551h], 0
jz	short loc_19161
mov	ax, word ptr loc_140E8+2
sub	ax, [bp-8]

loc_1912A:		 /* DOS offset ---> 107E:A */
cmp	ax, 0FFF6h
jnz	short loc_19148

loc_1912F:				; CODE XREF: dseg:2912C  j		 /* DOS offset ---> 107E:F */
mov	bl, [bp-0Ah]
sub	bh, bh
shl	bx, 1
push	word ptr [bx-3551h]
push	word ptr [bp-8]
call	far ptr	818h:0
add	sp, 4
jmp	short loc_19161
;     ***************************************************************************
nop

loc_19148:				; CODE XREF: dseg:912D  j		 /* DOS offset ---> 1080:8 */
mov	bl, [bp-0Ah]
sub	bh, bh
shl	bx, 1
push	word ptr [bx-3551h]
push	word ptr [bp-8]

loc_19156:				; CODE XREF: game_merchants_buy_horses+57  j		 /* DOS offset ---> 1081:6 */
call	far ptr	818h:0

loc_1915B:				; CODE XREF: dseg:29155  j		 /* DOS offset ---> 1081:B */
add	sp, 4
mov	[bp-2],	al	; CODE XREF: dseg:2915A  j

loc_19161:				; CODE XREF: dseg:9114  j dseg:9122  j ...		 /* DOS offset ---> 1082:1 */
add	word ptr [bp-8], 14h
inc	byte ptr [bp-0Ah]

loc_19168:		 /* DOS offset ---> 1082:8 */
cmp	byte ptr [bp-0Ah], 2

loc_1916C:				; CODE XREF: dseg:290F0  j		 /* DOS offset ---> 1082:C */
jb	short loc_1910D
mov	al, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_19176:				; CODE XREF: game_merchants_sell_food-FF6E  p		 /* DOS offset ---> 1083:6 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  56h	; V
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Ah	;   *
db  47h	; G
db  18h
db  8Bh	;   *
db 0C8h	;   *
db  24h	; $
db  0Fh
db  2Ah	; *
db 0E4h	;   *
db  8Bh	;   *
db 0F0h	;   *
db 0D1h	;   *
db 0E6h	;   *
db    3
db 0F0h	;   *
db 0D1h	;   *
db 0E6h	;   *
db 0D1h	;   *
db 0E6h	;   *
db    3
db 0F0h	;   *
db 0B3h	;   *
db    4
db  86h	;   *
db 0CBh	;   *
db 0D2h	;   *
db 0EBh	;   *
db  2Ah	; *
db 0FFh
db  80h	;   *
db 0A0h	;   *
db 0CEh	;   *
db 0CBh	;   *
db  20h
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0C6h	;   *
db  47h	; G
db  18h
db 0FFh
db  88h	;   *
db  67h	; g
db  17h
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop

loc_191B2:				; CODE XREF: game_merchants_func:loc_19431  p		 /* DOS offset ---> 1087:2 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db 0A1h	;   *
db  7Eh	; ~
db 0D4h	;   *
db 0A3h	;   *
db  9Ch	;   *
db 0CBh	;   *
db 0FFh
unk_191BC	db  76h	; v		; CODE XREF: dseg:290CB  j dseg:29170  j ...
db    6
db  9Ah	;   *
db  64h	; d
db    0
db  25h	; %
unk_191C2	db    5			; CODE XREF: dseg:293B3  p
db  8Bh	;   *
db 0E5h	;   *
db  2Ah	; *
db 0E4h	;   *
db 0B9h	;   *
db  0Bh
db    1
db 0F7h	;   *
db 0E1h	;   *
db 0A3h	;   *
db  9Ah	;   *
db 0CBh	;   *
db 0B8h	;   *
db  28h	; (
db    0
db  50h	; P
db 0B9h	;   *
db 0A4h	;   *
db 0CBh	;   *
db  51h	; Q
db 0FFh
db  36h	; 6
db  9Ch	;   *
db 0CBh	;   *
db 0FFh
db  36h	; 6
db  9Ah	;   *
db 0CBh	;   *
db  9Ah	;   *
db  58h	; X
unk_191E1	db    0			; CODE XREF: dseg:292D6  j
db  61h	; a
db    5
db  8Bh	;   *
db 0E5h	;   *
db 0B8h	;   *
db  47h	; G
db    0
db  50h	; P
db 0B9h	;   *
db  20h
db 0CBh	;   *
db  51h	; Q
db  83h	;   *
db    6
db  9Ah	;   *
db 0CBh	;   *
db  28h	; (
db 0FFh
db  36h	; 6
db  9Ch	;   *
db 0CBh	;   *
db 0FFh
db  36h	; 6
db  9Ah	;   *
db 0CBh	;   *
db  9Ah	;   *
db  58h	; X
db    0
db  61h	; a
db    5
db  8Bh	;   *
unk_19201	db 0E5h	;   *		; CODE XREF: game_merchants_buy_food+35  j
db 0B8h	;   *
db  9Ch	;   *
db    0
db  50h	; P
db 0B8h	;   *
db 0CEh	;   *
db 0CBh	;   *
db  50h	; P
db  83h	;   *
unk_1920B	db    6			; CODE XREF: game_merchants_buy_food+33  j
; game_merchants_buy_food+39  j
db  9Ah	;   *
db 0CBh	;   *
db  47h	; G
db 0FFh
db  36h	; 6
db  9Ch	;   *
db 0CBh	;   *
db 0FFh
db  36h	; 6
db  9Ah	;   *
db 0CBh	;   *
db  9Ah	;   *
db  58h	; X
db    0
db  61h	; a
db    5
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************

loc_19220:				; CODE XREF: game_merchants_func-FF5D  p		 /* DOS offset ---> 108E:0 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db 0A1h	;   *
db  7Eh	; ~
db 0D4h	;   *
db 0A3h	;   *
db  9Ch	;   *
db 0CBh	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  64h	; d
db    0
db  25h	; %
db    5
db  8Bh	;   *
db 0E5h	;   *
db  2Ah	; *
db 0E4h	;   *
db 0B9h	;   *
db  0Bh
db    1
db 0F7h	;   *
db 0E1h	;   *
db 0A3h	;   *
db  9Ah	;   *
db 0CBh	;   *
db 0B8h	;   *
db  28h	; (
db    0
db  50h	; P
db 0B9h	;   *
db 0A4h	;   *
db 0CBh	;   *
db  51h	; Q
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_merchants_buy_food

loc_19245:				; CODE XREF: game_merchants_buy_food+79  j		 /* DOS offset ---> 1090:5 */
push	word ptr dword_1CB9A+2
push	word ptr dword_1CB9A
call	far ptr	561h:7Ch
mov	sp, bp
mov	ax, 47h	; 'G'
push	ax
mov	cx, 0CB20h
push	cx
add	word ptr dword_1CB9A, 28h ; '('

loc_19261:				; CODE XREF: game_merchants_buy_food+7D  j		 /* DOS offset ---> 1092:1 */
push	word ptr dword_1CB9A+2
push	word ptr dword_1CB9A
call	far ptr	561h:7Ch
mov	sp, bp
mov	ax, 9Ch	; '  *'
push	ax
mov	ax, 0CBCEh
push	ax
add	word ptr dword_1CB9A, 47h ; 'G'
push	word ptr dword_1CB9A+2
push	word ptr dword_1CB9A
call	far ptr	561h:7Ch
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_merchants_buy_food
;     ***************************************************************************

loc_1928E:				; CODE XREF: game_merchants_func:loc_19447  p		 /* DOS offset ---> 1094:E */
; game_merchants_func-FF71  p
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Ah
db  56h	; V
db 0C6h	;   *
db  46h	; F
db 0F6h	;   *
db    0
;     ***************************************************************************

loc_19299:				; CODE XREF: dseg:92DC  j		 /* DOS offset ---> 1095:9 */
mov	bl, [bp-0Ah]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1

loc_192A8:				; CODE XREF: game_merchants_sell_food+3B  j		 /* DOS offset ---> 1096:8 */
mov	ax, [bx-3456h]
mov	[bp-4],	ax
or	ax, ax
jz	short loc_192D5

loc_192B3:				; CODE XREF: dseg:92D3  j		 /* DOS offset ---> 1097:3 */
push	ax

loc_192B4:				; CODE XREF: game_merchants_sell_food+39  j		 /* DOS offset ---> 1097:4 */
; game_merchants_sell_food+40  j
call	far ptr	525h:30h
add	sp, 2
cmp	ax, word ptr loc_140E2+2

loc_192C0:		 /* DOS offset ---> 1098:0 */
jnz	short loc_192C9
mov	bx, [bp-4]
mov	byte ptr [bx+0Ah], 0FFh

loc_192C9:				; CODE XREF: dseg:loc_192C0  j		 /* DOS offset ---> 1098:9 */
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jnz	short loc_192B3

loc_192D5:				; CODE XREF: dseg:92B1  j		 /* DOS offset ---> 1099:5 */
inc	byte ptr [bp-0Ah]

loc_192D8:				; CODE XREF: dseg:292D4  j		 /* DOS offset ---> 1099:8 */
cmp	byte ptr [bp-0Ah], 4
jb	short loc_19299
mov	al, 14h
mul	byte ptr [bp+6]
mov	bx, ax
mov	ax, [bx-344Eh]
mov	[bp-4],	ax
or	ax, ax
jz	short loc_19318
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-2],	ax
push	bx
; START	OF FUNCTION CHUNK FOR game_merchants_sell_food

loc_192F9:				; CODE XREF: game_merchants_sell_food+8B  j		 /* DOS offset ---> 109B:9 */
push	cs
call	loc_19176
add	sp, 2
push	[bp+var_4]

loc_19303:				; CODE XREF: Duel_Function+54  p		 /* DOS offset ---> 109C:3 */
push	[bp+arg_2]
; END OF FUNCTION CHUNK	FOR game_merchants_sell_food
;     ***************************************************************************
db  9Ah	;   *
db  90h	;   *
db    1
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db  46h	; F
db 0FEh	;   *
db  89h	;   *
db  46h	; F
unk_19313	db 0FCh	;   *		; CODE XREF: Duel_Rnd_Calc+8F  j
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0D8h	;   *
;     ***************************************************************************

loc_19318:				; CODE XREF: dseg:92EE  j		 /* DOS offset ---> 109D:8 */
mov	bl, [bp+6]
sub	bh, bh

loc_1931D:				; CODE XREF: Duel_Rnd_Calc+13  j		 /* DOS offset ---> 109D:D */
shl	bx, 1

loc_1931F:				; CODE XREF: Duel_Rnd_Calc+18  j		 /* DOS offset ---> 109D:F */
mov	ax, [bx-34D2h]
mov	[bp-4],	ax
or	ax, ax
jz	short loc_19348
; START	OF FUNCTION CHUNK FOR Duel_Rnd_Calc

loc_1932A:				; CODE XREF: Duel_Rnd_Calc:loc_19346  j		 /* DOS offset ---> 109E:A */
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_2], ax
push	bx
push	word ptr [bp+arg_2]

loc_19336:				; CODE XREF: game_merchants_sell_food+8F  j		 /* DOS offset ---> 109F:6 */
call	far ptr	59Dh:190h
add	sp, 4
mov	ax, [bp+var_2]

loc_19341:				; CODE XREF: Duel_Rnd_Calc+38  j		 /* DOS offset ---> 10A0:1 */
mov	[bp+var_4], ax

loc_19344:				; CODE XREF: Duel_Rnd_Calc+3C  j		 /* DOS offset ---> 10A0:4 */
or	ax, ax

loc_19346:				; CODE XREF: Duel_Rnd_Calc+32  j		 /* DOS offset ---> 10A0:6 */
jnz	short loc_1932A

loc_19348:				; CODE XREF: dseg:9328  j		 /* DOS offset ---> 10A0:8 */
mov	al, [bp+arg_0]
sub	ah, ah
mov	cx, 14h
mov	bx, ax
imul	cx
; END OF FUNCTION CHUNK	FOR Duel_Rnd_Calc
; START	OF FUNCTION CHUNK FOR game_merchants_warning_checks

loc_19354:				; CODE XREF: game_merchants_warning_checks+7  j		 /* DOS offset ---> 10A1:4 */
mov	si, ax
sub	ax, ax
mov	[si-3452h], ax
mov	[si-3450h], ax
mov	[si-344Eh], ax
shl	bx, 1
mov	[bx-34D2h], ax

loc_1936A:				; CODE XREF: game_merchants_warning_checks+26  j		 /* DOS offset ---> 10A2:A */
cmp	byte ptr [bp+arg_0], 0
jz	short loc_1938C

loc_19370:				; CODE XREF: game_merchants_warning_checks+24  j		 /* DOS offset ---> 10A3:0 */
; game_merchants_warning_checks+2B  j
test	byte ptr loc_1CB65+1, 8

loc_19375:				; CODE XREF: game_merchants_warning_checks+5A  j		 /* DOS offset ---> 10A3:5 */
; game_merchants_warning_checks+69  j
jz	short loc_19384
mov	[bp+var_8], 0CBA4h

loc_1937C:				; CODE XREF: game_merchants_warning_checks+89  j		 /* DOS offset ---> 10A3:C */
and	byte ptr loc_1CB65+1, 0F7h
jmp	short loc_193A5
; END OF FUNCTION CHUNK	FOR game_merchants_warning_checks
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_merchants_warning_checks

loc_19384:				; CODE XREF: game_merchants_warning_checks:loc_19375  j		 /* DOS offset ---> 10A4:4 */
; game_merchants_warning_checks+A  j
mov	[bp+var_8], 0CBB8h
jmp	short loc_193A5
; END OF FUNCTION CHUNK	FOR game_merchants_warning_checks
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_merchants_warning_checks

loc_1938C:				; CODE XREF: game_merchants_warning_checks-FFD0  j		 /* DOS offset ---> 10A4:C */
test	byte ptr loc_1CB65+1, 2
jz	short loc_193A0

loc_19393:				; CODE XREF: Duel_Rnd_Calc+8D  j		 /* DOS offset ---> 10A5:3 */
mov	[bp+var_8], 0CBB8h

loc_19398:				; CODE XREF: game_merchants_warning_checks+D  j		 /* DOS offset ---> 10A5:8 */
and	byte ptr loc_1CB65+1, 0FDh
jmp	short loc_193A5
; END OF FUNCTION CHUNK	FOR game_merchants_warning_checks
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_merchants_warning_checks

loc_193A0:				; CODE XREF: game_merchants_warning_checks-FFAD  j		 /* DOS offset ---> 10A6:0 */
mov	[bp+var_8], 0CBA4h

loc_193A5:				; CODE XREF: game_merchants_warning_checks-FFBD  j		 /* DOS offset ---> 10A6:5 */
; game_merchants_warning_checks-FFB5  j ...
mov	al, 14h
mul	byte ptr [bp+arg_0]

loc_193AA:				; CODE XREF: game_merchants_warning_checks+10  j		 /* DOS offset ---> 10A6:A */
; game_merchants_warning_checks+4F  j ...
mov	bx, ax
mov	ax, [bx-344Ch]
mov	[bp+var_4], ax
or	ax, ax

loc_193B5:				; CODE XREF: game_merchants_warning_checks+70  j		 /* DOS offset ---> 10A7:5 */
jz	short loc_193E5

loc_193B7:				; CODE XREF: game_merchants_warning_checks+75  j		 /* DOS offset ---> 10A7:7 */
mov	bx, [bp+var_8]
cmp	word ptr [bx+6], 0
jnz	short loc_193C6
mov	[bx+6],	ax
jmp	short loc_193D8
; END OF FUNCTION CHUNK	FOR game_merchants_warning_checks
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_merchants_warning_checks

loc_193C6:				; CODE XREF: game_merchants_warning_checks-FF80  j		 /* DOS offset ---> 10A8:6 */
push	word ptr [bx+6]

loc_193C9:				; CODE XREF: game_merchants_warning_checks+12  j		 /* DOS offset ---> 10A8:9 */
; game_merchants_warning_checks+32  j ...
call	far ptr	59Dh:62h
add	sp, 2
mov	bx, ax
mov	ax, [bp+var_4]
mov	[bx], ax

loc_193D8:				; CODE XREF: game_merchants_warning_checks-FF7B  j		 /* DOS offset ---> 10A9:8 */
mov	al, 14h
mul	byte ptr [bp+arg_0]
mov	bx, ax
mov	word ptr [bx-344Ch], 0

loc_193E5:				; CODE XREF: game_merchants_warning_checks:loc_193B5  j		 /* DOS offset ---> 10AA:5 */
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_merchants_warning_checks
;     ***************************************************************************

loc_193EA:				; CODE XREF: game_merchants_func+D  j		 /* DOS offset ---> 10AA:A */
push	bp

loc_193EB:				; DATA XREF: game_delegate_query_choose_policy+17  r		 /* DOS offset ---> 10AA:B */
mov	bp, sp

loc_193ED:				; DATA XREF: game_delegate_query_choose_policy+13  r		 /* DOS offset ---> 10AA:D */
sub	sp, 0Ch

loc_193F0:				; DATA XREF: game_delegate_query_choose_policy+F  r		 /* DOS offset ---> 10AB:0 */
; game_delegate_query_choose_policy+B  r
mov	byte ptr [bp-4], 0
mov	word ptr [bp-6], 2DC4h
mov	word ptr [bp-0Ch], 29h ; ')'
; START	OF FUNCTION CHUNK FOR game_merchants_func

loc_193FE:				; CODE XREF: game_merchants_func:loc_19484  j		 /* DOS offset ---> 10AB:E */
push	[bp+var_6]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_1947B

loc_1940D:				; CODE XREF: game_merchants_func+1F  j		 /* DOS offset ---> 10AC:D */
push	[bp+var_6]
call	far ptr	525h:4Ah
add	sp, 2
cmp	ax, word ptr loc_140E2+2
jz	short loc_1947B
push	[bp+var_6]

loc_19421:				; CODE XREF: dseg:29415  j		 /* DOS offset ---> 10AE:1 */
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_1947B
push	[bp+var_6]

loc_19430:				; CODE XREF: dseg:29429  j		 /* DOS offset ---> 10AF:0 */
push	cs

loc_19431:				; CODE XREF: dseg:29420  j dseg:2942E  j		 /* DOS offset ---> 10AF:1 */
call	loc_191B2
add	sp, 2
mov	ax, word ptr loc_1CBBF+3
cmp	word ptr loc_140E2+2, ax
jnz	short loc_19451
push	[bp+var_6]
mov	al, 1
push	ax
push	cs

loc_19447:				; CODE XREF: dseg:2943B  j		 /* DOS offset ---> 10B0:7 */
call	loc_1928E
add	sp, 4
mov	byte ptr [bp+var_4], 1

loc_19451:				; CODE XREF: game_merchants_func-FF94  j		 /* DOS offset ---> 10B1:1 */
mov	ax, word ptr loc_1CBAE

loc_19454:				; CODE XREF: dseg:2944F  j		 /* DOS offset ---> 10B1:4 */
cmp	word ptr loc_140E2+2, ax

loc_19458:				; CODE XREF: dseg:29446  j dseg:29453  j		 /* DOS offset ---> 10B1:8 */
jnz	short loc_1946B
push	[bp+var_6]
sub	al, al
push	ax
push	cs
call	loc_1928E

loc_19464:				; CODE XREF: game_merchants_func+8C  j		 /* DOS offset ---> 10B2:4 */
; game_merchants_func+90  j
add	sp, 4
mov	byte ptr [bp+var_4], 1

loc_1946B:				; CODE XREF: game_merchants_func:loc_19458  j		 /* DOS offset ---> 10B2:B */
; Duel_Function+68  j
cmp	byte ptr [bp+var_4], 0
jz	short loc_1947B
push	[bp+var_6]
push	cs
call	loc_19220
add	sp, 2

loc_1947B:				; CODE XREF: game_merchants_func-FFC7  j		 /* DOS offset ---> 10B3:B */
; game_merchants_func-FFB6  j ...
add	[bp+var_6], 23h	; '#'
dec	[bp+var_C]
jz	short loc_19487

loc_19484:				; CODE XREF: game_merchants_func+9F  j		 /* DOS offset ---> 10B4:4 */
jmp	loc_193FE
;     ***************************************************************************

loc_19487:				; CODE XREF: game_merchants_func-FF50  j		 /* DOS offset ---> 10B4:7 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_merchants_func
;     ***************************************************************************
nop
push	bp
; START	OF FUNCTION CHUNK FOR game_merchants_func

loc_1948D:				; CODE XREF: game_merchants_func+5B  j		 /* DOS offset ---> 10B4:D */
; game_merchants_func+67  j
mov	bp, sp
sub	sp, 8
mov	[bp+var_6], 0
mov	[bp+var_4], 2DC4h

loc_1949C:				; CODE XREF: game_merchants_func-FEE1  j		 /* DOS offset ---> 10B5:C */
push	[bp+var_4]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_194E6
push	[bp+var_4]

loc_194AE:				; CODE XREF: game_tax_calc+1A  j		 /* DOS offset ---> 10B6:E */
call	far ptr	525h:4Ah
add	sp, 2
cmp	ax, word ptr loc_140E2+2
jnz	short loc_194D2
push	[bp+var_4]

loc_194BF:				; CODE XREF: Duel_Function+5F  j		 /* DOS offset ---> 10B7:F */
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_194E6
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_194D2:				; CODE XREF: game_merchants_func-FF18  j		 /* DOS offset ---> 10B9:2 */
push	word ptr loc_140E2+2

loc_194D6:				; CODE XREF: dseg:295E7  p		 /* DOS offset ---> 10B9:6 */
call	far ptr	525h:6
; END OF FUNCTION CHUNK	FOR game_merchants_func
;     ***************************************************************************
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db  3Ah	; :
db  47h	; G
db  11h
db  74h	; t
db 0E5h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_merchants_func

loc_194E6:				; CODE XREF: game_merchants_func-FF29  j		 /* DOS offset ---> 10BA:6 */
; game_merchants_func-FF09  j
add	[bp+var_4], 23h	; '#'
inc	[bp+var_6]
cmp	[bp+var_6], 29h	; ')'
jl	short loc_1949C
sub	ax, ax
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_merchants_func
;     ***************************************************************************
nop

loc_194FA:				; CODE XREF: game_tax_calc-FF1C  p		 /* DOS offset ---> 10BB:A */
; game_tax_calc-FEF0  p
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db 0B0h	;   *
db  64h	; d
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db 0FFh
db  76h	; v
db    8
db  9Ah	;   *
db    6
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  2Ah	; *
db 0E4h	;   *
db    3
db  46h	; F
db    6
db    5
db  0Eh
db    0
db  50h	; P
db  9Ah	;   *
db  48h	; H
db    0
db  9Ch	;   *
db    4
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
cmp	byte_1CAE7, 0

loc_1952D:				; CODE XREF: dseg:294F8  j		 /* DOS offset ---> 10BE:D */
jnz	short loc_19532
jmp	loc_195B3
;     ***************************************************************************

loc_19532:				; CODE XREF: dseg:loc_1952D  j XYZ+23  p ...		 /* DOS offset ---> 10BF:2 */
mov	al, byte_1CAE7
;     ***************************************************************************
db  2Ah	; *
db 0E4h	;   *
db  48h	; H
db  74h	; t
db  0Ah
db  48h	; H
db  74h	; t
db  4Dh	; M
db  48h	; H
db  74h	; t
db  1Eh
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  8Bh	;   *
db  1Eh
db 0E8h	;   *
db  40h	; @
db  8Bh	;   *
db  47h	; G
db  0Ah
db  8Bh	;   *
db 0C8h	;   *
db    5
db    6
db    0
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db 0B0h	;   *
db  28h	; (
db  50h	; P
db  51h	; Q
db 0FFh
db  36h	; 6
db 0E2h	;   *
db  40h	; @
db 0EBh	;   *
db  44h	; D
;     ***************************************************************************
nop
mov	bx, word ptr loc_140E8
mov	ax, [bx+0Ah]
mov	cx, ax
add	ax, 6
mov	[bp-2],	ax
mov	al, 28h	; '('
push	ax
; START	OF FUNCTION CHUNK FOR game_tax_calc

loc_19570:				; CODE XREF: game_tax_calc+D5  j		 /* DOS offset ---> 10C3:0 */
push	cx
push	word ptr loc_140E2
push	cs
call	loc_194FA

loc_19579:				; CODE XREF: game_tax_calc+D3  j		 /* DOS offset ---> 10C3:9 */
; game_tax_calc+DC  j
add	sp, 6
mov	al, 19h
push	ax
push	[bp+var_2]
call	far ptr	49Ch:6Ch
add	sp, 4
mov	bx, word ptr loc_140E8+2
mov	ax, [bx+0Ah]
mov	cx, ax
add	ax, 6
mov	[bp+var_2], ax
mov	al, 28h	; '('
push	ax
push	cx
push	word ptr loc_140E2+2
push	cs
call	loc_194FA
add	sp, 6
mov	al, 19h
push	ax
push	[bp+var_2]
call	far ptr	49Ch:6Ch

loc_195B3:				; CODE XREF: dseg:952F  j		 /* DOS offset ---> 10C7:3 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_tax_calc
;     ***************************************************************************
nop

loc_195B8:				; CODE XREF: dseg:9734  p		 /* DOS offset ---> 10C7:8 */
; game_build_fort_map_fort_placement-FF0D  p ...
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    6
db  57h	; W
db  56h	; V
db  83h	;   *
unk_195C1	db  7Eh	; ~		; CODE XREF: dseg:295A6  j
db    6
db  31h	; 1
db  75h	; u
db  0Ah
db 0C7h	;   *
db  46h	; F
db 0FEh	;   *
unk_195C9	db  50h	; P		; CODE XREF: game_tax_calc+1C  j
db    0
db 0B8h	;   *
db  66h	; f
db  43h	; C
db 0EBh	;   *
db    8
db 0C7h	;   *
db  46h	; F
db 0FEh	;   *
db  40h	; @
db    0
db 0B8h	;   *
db  72h	; r
db  43h	; C
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db 0B8h	;   *
db 0D6h	;   *
db  3Bh	; ;
db  50h	; P
db 0B8h	;   *
db    7
db    4
db  50h	; P
db 0B9h	;   *
db    8
db    0
db  51h	; Q
;     ***************************************************************************

loc_195ED:				; CODE XREF: dseg:295DD  j		 /* DOS offset ---> 10CA:D */
mov	dx, 1
push	dx

loc_195F1:				; CODE XREF: dseg:296E3  p		 /* DOS offset ---> 10CB:1 */
push	word ptr [bp-2]
; START	OF FUNCTION CHUNK FOR game_tax_check

loc_195F4:				; CODE XREF: game_tax_check+B  j		 /* DOS offset ---> 10CB:4 */
push	word ptr [bp+6]
call	far ptr	0:1469h
add	sp, 0Ch
mov	ax, 7
push	ax
mov	cx, 20h	; ' '
push	cx
mov	dx, 1
push	dx
mov	bx, [bp-2]
lea	si, [bx+8]
push	si

loc_19612:				; CODE XREF: game_tax_check+2E  j		 /* DOS offset ---> 10CD:2 */
push	word ptr [bp+6]
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 3BE6h
push	ax
mov	ax, 407h
push	ax
mov	cx, 8

loc_19628:				; CODE XREF: game_tax_check+51  j		 /* DOS offset ---> 10CE:8 */
push	cx
mov	dx, 1
push	dx
mov	bx, [bp-2]

loc_19630:		 /* DOS offset ---> 10CF:0 */
add	bx, 28h	; '('
push	bx
push	word ptr [bp+6]
mov	di, bx
call	far ptr	0:1469h
add	sp, 0Ch
mov	ax, 7
push	ax
mov	cx, 30h	; '0'
push	cx
mov	cl, [bp+8]
sub	ch, ch
inc	cx
inc	cx
push	cx
push	word ptr [bp-2]
mov	cx, [bp+6]
inc	cx
push	cx

loc_19659:				; CODE XREF: dseg:29640  j		 /* DOS offset ---> 10D1:9 */
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 3BDEh
push	ax
mov	ax, 407h
push	ax
mov	cx, 8
push	cx
mov	dx, 1
push	dx
push	word ptr [bp-2]
mov	bl, [bp+8]
add	bl, [bp+6]
add	bl, 3
sub	bh, bh
push	bx
mov	[bp-6],	bx
call	far ptr	0:1469h
add	sp, 0Ch
mov	ax, 7
push	ax
mov	ax, 20h	; ' '

loc_19692:				; CODE XREF: game_build_fort_map_draw_tile_map_main_sub+1F  j		 /* DOS offset ---> 10D5:2 */
push	ax

loc_19693:				; CODE XREF: dseg:2980D  p		 /* DOS offset ---> 10D5:3 */
mov	ax, 1
push	ax
push	si
push	word ptr [bp-6]
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 3BEEh
push	ax
mov	ax, 407h
push	ax
mov	cx, 8
push	cx

loc_196AF:				; CODE XREF: XYZ+30  j		 /* DOS offset ---> 10D6:F */
mov	dx, 1
push	dx
push	di
push	word ptr [bp-6]
call	far ptr	0:1469h
add	sp, 0Ch
mov	ax, 3BC6h
push	ax
mov	ax, 407h
push	ax
mov	ax, 8

loc_196CA:				; CODE XREF: XYZ+15  j		 /* DOS offset ---> 10D8:A */
push	ax
mov	ax, 2
push	ax

loc_196CF:		 /* DOS offset ---> 10D8:F */
mov	ax, [bp-2]
add	ax, 1Ch
push	ax
mov	ax, [bp+6]
dec	ax
dec	ax

loc_196DB:				; CODE XREF: game_build_fort_map_draw_tile_map_main+2D  j		 /* DOS offset ---> 10D9:B */
push	ax

loc_196DC:				; CODE XREF: game_build_fort_map_draw_tile_map_main+24  j		 /* DOS offset ---> 10D9:C */
call	far ptr	0:1469h
add	sp, 0Ch
push	si
mov	ax, [bp+6]
inc	ax
inc	ax

loc_196EA:				; CODE XREF: dseg:2982A  p		 /* DOS offset ---> 10DA:A */
push	ax
call	far ptr	3EFh:434h
add	sp, 4
pop	si
pop	di
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_tax_check
;     ***************************************************************************
nop

loc_196FA:				; CODE XREF: dseg:9B12  p		 /* DOS offset ---> 10DB:A */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0F6h	;   *
db  47h	; G
db    7
db    2
db  74h	; t
db    6
db 0B0h	;   *
db    1
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  80h	;   *
db  7Fh	; 
db  21h	; !
db 0FFh
db  74h	; t
db    6
db 0B0h	;   *
db    2
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  2Ah	; *
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************

loc_1971E:				; CODE XREF: dseg:97F5  p		 /* DOS offset ---> 10DD:E */
; game_build_fort_map_fort_placement_interface:loc_19A41  p
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db 0FFh
db  76h	; v
db    8
db  9Ah	;   *
db  34h	; 4
db    4
db 0F9h	;   *
db  12h
db  83h	;   *
db 0C4h	;   *
db    2
db  50h	; P
;     ***************************************************************************

loc_19730:				; CODE XREF: dseg:2978B  j		 /* DOS offset ---> 10DF:0 */
push	word ptr [bp+6]
push	cs
call	loc_195B8
add	sp, 4
push	word ptr [bp+8]

loc_1973D:		 /* DOS offset ---> 10DF:D */
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 437Eh
push	ax
call	far ptr	3EFh:6C0h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  9Ah	;   *
db  82h	;   *
db    2
db 0B5h	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0FFh
db  77h	; w
db  1Ah
db 0B8h	;   *
db  54h	; T
db    0
db  50h	; P
db 0B8h	;   *
db  26h	; &
db    0
db  50h	; P
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_build_fort_surround_province_text

loc_19768:				; CODE XREF: game_build_fort_surround_province_text+8A  j		 /* DOS offset ---> 10E2:8 */
call	far ptr	4B5h:6A4h
mov	sp, bp
mov	ax, [bp+arg_0]
add	ax, 1Ch
push	ax
mov	ax, 4387h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_build_fort_surround_province_text
;     ***************************************************************************
nop
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  56h	; V
db 0FFh
db  36h	; 6
aJ_0		db '  *ʚJ',0             ; CODE XREF: dseg:2972E  j
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db 0D8h	;   *
db  8Bh	;   *
db  47h	; G
db    4
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  75h	; u
db 0FFh
db  36h	; 6
db  9Ah	;   *
db 0CAh	;   *
db  50h	; P
db  9Ah	;   *
db  5Ah	; Z
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  64h	; d
db 0B0h	;   *
db 0E4h	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
db  2Ah	; *
db  47h	; G
db    4
db 0D0h	;   *
db 0E0h	;   *
db  50h	; P
db  9Ah	;   *
db 0DCh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  0Bh
db  83h	;   *
db  7Eh	; ~
unk_197CD	db    6			; CODE XREF: dseg:297E7  j
db    1
db  1Bh
db 0C0h	;   *
db 0F7h	;   *
db 0D8h	;   *
db  89h	;   *
db  46h	; F
unk_197D5	db    6			; CODE XREF: game_build_fort_surround_province_text+3F  j
db 0FFh
db  76h	; v
db 0FEh	;   *
db  0Eh
db 0E8h	;   *
db  75h	; u
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db  83h	;   *
db  7Eh	; ~
db    6
db    1
db  1Bh
db 0DBh	;   *
db  43h	; C
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db  76h	; v
db    8
;     ***************************************************************************

loc_197EC:				; CODE XREF: dseg:297DD  j		 /* DOS offset ---> 10EA:C */
push	word ptr [bx+si]
mov	ax, 31h	; '1'
push	ax
mov	si, bx
push	cs
call	loc_1971E
add	sp, 4
call	far ptr	4B5h:290h
; START	OF FUNCTION CHUNK FOR game_build_fort_minimap_display

loc_19800:				; CODE XREF: game_build_fort_minimap_display+D0  j		 /* DOS offset ---> 10EC:0 */
mov	bx, [bp+arg_4]
push	word ptr [bx+si]

loc_19805:				; CODE XREF: game_build_fort_minimap_display+BE  j		 /* DOS offset ---> 10EC:5 */
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:9D6h
pop	si
mov	sp, bp
pop	bp

locret_19816:				; CODE XREF: dseg:29805  j
retf
; END OF FUNCTION CHUNK	FOR game_build_fort_minimap_display
;     ***************************************************************************
nop
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_19820:				; CODE XREF: dseg:98E2  p		 /* DOS offset ---> 10EE:0 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db    6
db  80h	;   *
db  7Fh	; 
db  0Bh
db  64h	; d
db  74h	; t
db  47h	; G
db  8Bh	;   *
unk_19830	db 0C3h	;   *		; CODE XREF: dseg:297E9  j dseg:29813  j
db    5
db  1Ch
db    0
db  50h	; P
db 0B8h	;   *
db 0DDh	;   *
db  43h	; C
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
unk_1983C	db 0EFh	;   *		; CODE XREF: dseg:29835  j
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0FFh
db  76h	; v
db    6
db  0Eh
db 0E8h	;   *
db  0Ah
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
unk_1984C	db  5Eh	; ^		; CODE XREF: dseg:299C3  p dseg:2A425  p
db    6
db  8Ah	;   *
db  47h	; G
db    5
db  38h	; 8
db  47h	; G
db    4
db  73h	; s
db    4
db  2Bh	; +
db 0DBh	;   *
db 0EBh	;   *
db    3
db 0BBh	;   *
db    1
unk_1985C	db    0			; CODE XREF: dseg:29857  j
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db  87h	;   *
db  1Eh
db  44h	; D
db  50h	; P
word_19864	dw 31B8h		; DATA XREF: game_advice_rumors_output+2FC  r
db    0
db  50h	; P
db  0Eh
db 0E8h	;   *
db 0B2h	;   *
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  9Ah	;   *
db  5Eh	; ^
db    1
db  7Ch	; |
db    5
db 0EBh	;   *
db  17h
word_19876	dw 0C38Bh		; DATA XREF: game_advice_rumors_output+526  r
db    5
db  1Ch
unk_1987A	db    0			; CODE XREF: game_build_fort_minimap_display+6D  j
db  50h	; P
db 0B8h	;   *
db 0F7h	;   *
db  43h	; C
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db  9Ah	;   *
db  26h	; &
db    1
db  7Ch	; |
db    5
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0C6h	;   *
db  47h	; G
db  0Bh
db  64h	; d
db 0B8h	;   *
unk_19895	db  18h			; CODE XREF: game_build_fort_minimap_display+8C  j
db  44h	; D
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  8Bh	;   *
db 0E5h	;   *
;     ***************************************************************************

loc_1989F:				; CODE XREF: dseg:2994B  j		 /* DOS offset ---> 10F5:F */
pop	bp
retf
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_build_fort_minimap_display

loc_198A1:				; CODE XREF: game_build_fort_minimap_display+73  j		 /* DOS offset ---> 10F6:1 */
; game_build_fort_minimap_display+93  j
nop

loc_198A2:				; CODE XREF: game_build_fort_map_fort_placement_interface:loc_19A56  p		 /* DOS offset ---> 10F6:2 */
push	bp
; END OF FUNCTION CHUNK	FOR game_build_fort_minimap_display
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db 0B0h	;   *
db    5
db  50h	; P
db 0FFh
db  36h	; 6
unk_198AD	db  9Ah	;   *		; CODE XREF: game_build_fort_minimap_display+BC  j
db 0CAh	;   *
db  9Ah	;   *
unk_198B0	db  82h	;   *		; CODE XREF: dseg:2986E  j dseg:29882  j
db    3
db  9Dh	;   *
db    5
;     ***************************************************************************

loc_198B4:				; CODE XREF: dseg:2992C  j		 /* DOS offset ---> 10F7:4 */
add	sp, 4
mov	[bp-4],	al
or	al, al
jz	short loc_198E5

loc_198BE:				; CODE XREF: game_build_fort_minimap_display+CE  j		 /* DOS offset ---> 10F7:E */
mov	ax, 4422h
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
sub	al, al
push	ax
mov	al, [bp-4]
push	ax
mov	al, 5
push	ax
call	far ptr	60Dh:2F6h
add	sp, 0Ch
or	ax, ax

loc_198DE:				; DATA XREF: game_advice_rumors_output+D  r		 /* DOS offset ---> 10F9:E */
jz	short loc_198E5

loc_198E0:				; DATA XREF: game_advice_rumors_output+26  r		 /* DOS offset ---> 10FA:0 */
push	ax
push	cs
call	loc_19820

loc_198E5:				; CODE XREF: dseg:98BC  j		 /* DOS offset ---> 10FA:5 */
; dseg:loc_198DE  j
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_198EA:				; CODE XREF: dseg:9D38  p		 /* DOS offset ---> 10FA:A */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    6
db 0FFh
db  36h	; 6
db  9Ah	;   *
db 0CAh	;   *
db  9Ah	;   *
db  4Ah	; J
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db 0D8h	;   *
db  8Bh	;   *
db  47h	; G
db    4
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db  80h	;   *
db    1
db 0FFh
db  36h	; 6
db  9Ah	;   *
db 0CAh	;   *
db  50h	; P
db  9Ah	;   *
db  5Ah	; Z
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db  6Ch	; l
db    1
db  9Ah	;   *
db  90h	;   *
db    2
db 0B5h	;   *
db    4
db  9Ah	;   *
unk_19925	db  5Eh	; ^		; CODE XREF: dseg:298E4  j dseg:298F8  j ...
db    1
db  7Ch	; |
db    5
db 0FFh
db  36h	; 6
db  5Ch	; \
db  45h	; E
db  9Ah	;   *
db 0C0h	;   *
db    6
unk_19930	db 0EFh	;   *		; CODE XREF: dseg:29923  j
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db  9Ah	;   *
db 0D6h	;   *
db    9
db 0EFh	;   *
db    3
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db  4Ah	; J
db    1
db 0B8h	;   *
db  5Ch	; \
db  45h	; E
db  50h	; P
db 0B8h	;   *
db  60h	; `
db  45h	; E
db  50h	; P
db  80h	;   *
db  7Eh	; ~
db    6
db    1
db  1Bh
unk_1994E	db 0C0h	;   *		; CODE XREF: dseg:29859  j dseg:2992E  j ...
db 0F7h	;   *
db 0D8h	;   *
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db  2Bh	; +
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  75h	; u
db  22h	; "
db 0FFh
db  76h	; v
db 0FEh	;   *
db  0Eh
db 0E8h	;   *
db 0EBh	;   *
unk_19966	db 0FDh	;   *		; CODE XREF: game_build_fort_map_fort_placement_interface_hex_move+44  j
; game_build_fort_map_fort_placement_interface_hex_move+49  j ...
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0FFh
db 0B7h	;   *
db  6Eh	; n
db  45h	; E
db 0B8h	;   *
db  31h	; 1
db    0
db  50h	; P
db  0Eh
db 0E8h	;   *
db 0A3h	;   *
db 0FDh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db 0E9h	;   *
db    1
db    1
;     ***************************************************************************
nop
cmp	byte ptr [bp+6], 0
jz	short loc_1998B
jmp	loc_19A5E
;     ***************************************************************************

loc_1998B:				; CODE XREF: dseg:9986  j		 /* DOS offset ---> 1104:B */
call	far ptr	4B5h:266h
mov	ax, 3Dh	; '='
push	ax

loc_19994:		 /* DOS offset ---> 1105:4 */
call	far ptr	4B5h:33Eh
add	sp, 2
mov	ax, 90h	; '  *'
push	ax
call	far ptr	4B5h:33Eh

loc_199A5:				; CODE XREF: dseg:2999D  j		 /* DOS offset ---> 1106:5 */
add	sp, 2
mov	al, 13h
push	ax

loc_199AB:				; CODE XREF: dseg:29A2C  p		 /* DOS offset ---> 1106:B */
call	far ptr	6EBh:96h
add	sp, 2
sub	al, al
push	ax
call	far ptr	6EBh:100h
add	sp, 2
; START	OF FUNCTION CHUNK FOR game_build_fort_map_fort_placement_interface

loc_199BE:				; CODE XREF: game_build_fort_map_fort_placement_interface+5F  j		 /* DOS offset ---> 1107:E */
mov	ax, 4550h
push	ax
call	far ptr	3EFh:6C0h

loc_199C7:				; CODE XREF: game_build_fort_map_fort_placement_interface+14  j		 /* DOS offset ---> 1108:7 */
add	sp, 2
push	word ptr loc_14567+1
call	far ptr	3EFh:6C0h

loc_199D3:				; CODE XREF: game_build_fort_map_fort_placement_interface+25  j		 /* DOS offset ---> 1109:3 */
add	sp, 2
mov	ax, 3
push	ax
mov	ax, 40h	; '@'
push	ax

loc_199DE:				; CODE XREF: dseg:29BCF  p		 /* DOS offset ---> 1109:E */
; game_build_fort_map_fort_placement_interface+19  j
mov	ax, 10h
push	ax
mov	ax, 48h	; 'H'
push	ax
mov	ax, 27h	; '''
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	al, [bp+arg_4]
sub	ah, ah

loc_199F7:				; CODE XREF: game_build_fort_map_fort_placement_interface+49  j		 /* DOS offset ---> 110B:7 */
; game_build_fort_map_fort_placement_interface+9E  j ...
add	ax, 0CCh ; '  *'
push	ax

loc_199FB:				; CODE XREF: game_build_fort_map_fort_placement_interface+12  j		 /* DOS offset ---> 110B:B */
; game_build_fort_map_fort_placement_interface+1B  j ...
call	far ptr	4B5h:672h
add	sp, 2
mov	ax, 0D0B2h
push	ax
sub	ax, ax

loc_19A09:				; CODE XREF: dseg:29A3C  j		 /* DOS offset ---> 110C:9 */
push	ax
mov	ax, 28h	; '('
push	ax
mov	ax, 8
push	ax
mov	ax, 0A8h ; '  *'
push	ax
mov	ax, 2Bh	; '+'
push	ax
call	far ptr	0:1627h
add	sp, 0Ch
mov	word_1356C, 0FFFFh
mov	ax, 2
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
push	word ptr [bx+4564h]

loc_19A3C:				; CODE XREF: dseg:29A07  j dseg:29A21  j		 /* DOS offset ---> 110F:C */
mov	ax, 38h	; '8'
push	ax
push	cs

loc_19A41:				; CODE XREF: dseg:29ABA  p		 /* DOS offset ---> 1110:1 */
call	loc_1971E
add	sp, 4

loc_19A47:				; CODE XREF: game_build_fort_map_fort_placement_interface-FF5C  j		 /* DOS offset ---> 1110:7 */
; game_build_fort_map_fort_placement_interface+83  j ...
call	far ptr	6EBh:64h
or	ax, ax
jnz	short loc_19A47
call	far ptr	3EFh:79Ah
push	cs

loc_19A56:				; CODE XREF: game_build_fort_map_fort_placement_interface+31  j		 /* DOS offset ---> 1111:6 */
call	loc_198A2
mov	sp, bp
pop	bp

locret_19A5C:				; CODE XREF: game_build_fort_map_fort_placement_interface+27  j
retf
; END OF FUNCTION CHUNK	FOR game_build_fort_map_fort_placement_interface
;     ***************************************************************************

loc_19A5D:				; CODE XREF: dseg:29A96  j		 /* DOS offset ---> 1111:D */
nop

loc_19A5E:				; CODE XREF: dseg:9988  j		 /* DOS offset ---> 1111:E */
mov	ax, 4556h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	bl, [bp+6]
sub	bh, bh
shl	bx, 1
push	word ptr [bx+4568h]

loc_19A75:				; CODE XREF: dseg:29A8D  j		 /* DOS offset ---> 1113:5 */
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	57Ch:126h
; START	OF FUNCTION CHUNK FOR game_build_fort_map_fort_placement_interface

loc_19A82:				; CODE XREF: game_build_fort_map_fort_placement_interface+9C  j		 /* DOS offset ---> 1114:2 */
mov	ax, 50h	; 'P'
push	ax
call	far ptr	57Ch:5Eh
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_build_fort_map_fort_placement_interface
;     ***************************************************************************
nop

loc_19A90:				; CODE XREF: game_build_fort_map_fort_placement-FF46  p		 /* DOS offset ---> 1115:0 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    6
db 0A1h	;   *
db  6Ch	; l
db  35h	; 5
db  39h	; 9
db  46h	; F
db  0Ah
db  74h	; t
db  1Bh
;     ***************************************************************************

loc_19A9E:				; CODE XREF: dseg:29A84  j		 /* DOS offset ---> 1115:E */
test	byte ptr [bp+0Bh], 80h
jz	short loc_19AAE
push	word ptr [bp+0Ah]
call	far ptr	4B5h:558h
jmp	short loc_19AB6
;     ***************************************************************************

loc_19AAE:				; CODE XREF: dseg:9AA2  j dseg:29BB1  p		 /* DOS offset ---> 1116:E */
push	word ptr [bp+0Ah]
call	far ptr	4B5h:672h

loc_19AB6:				; CODE XREF: dseg:9AAC  j		 /* DOS offset ---> 1117:6 */
add	sp, 2
mov	word_1356C, 0FFFFh
mov	ax, [bp+0Ch]
add	ax, 0D0B2h
mov	[bp-2],	ax
mov	word ptr [bp-6], 140h

loc_19ACD:				; CODE XREF: dseg:9ADA  j		 /* DOS offset ---> 1118:D */
mov	bx, [bp-2]
add	word ptr [bp-2], 3

loc_19AD4:				; CODE XREF: game_build_fort_map_fort_placement_interface+4B  j		 /* DOS offset ---> 1119:4 */
mov	byte ptr [bx], 0
dec	word ptr [bp-6]
jnz	short loc_19ACD
mov	ax, 0D0B2h
push	ax
sub	ax, ax
push	ax

loc_19AE3:				; CODE XREF: dseg:29B5A  j		 /* DOS offset ---> 111A:3 */
mov	ax, 28h	; '('
push	ax
mov	ax, 8
push	ax
push	word ptr [bp+8]
push	word ptr [bp+6]
call	far ptr	0:1627h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 10h
push	si
mov	ax, [bp+6]
add	ax, 1Ch
mov	[bp-0Ch], ax
mov	ax, word ptr loc_140E2+2
mov	[bp-8],	ax
push	ax
push	cs
call	loc_196FA
add	sp, 2
mov	[bp-0Ah], al
push	word ptr [bp-8]
call	far ptr	525h:6
add	sp, 2
mov	[bp-4],	al
push	word ptr [bp+6]
call	far ptr	525h:30h
add	sp, 2
push	ax

loc_19B35:		 /* DOS offset ---> 111F:5 */
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_19B59
mov	ax, 3Dh	; '='
push	ax
call	far ptr	4B5h:33Eh
add	sp, 2
mov	ax, 90h	; '  *'
push	ax
call	far ptr	4B5h:33Eh

loc_19B56:				; CODE XREF: dseg:29B03  j dseg:29B4B  j		 /* DOS offset ---> 1121:6 */
add	sp, 2

loc_19B59:				; CODE XREF: dseg:9B3F  j		 /* DOS offset ---> 1121:9 */
push	word ptr [bp+6]

loc_19B5C:				; CODE XREF: dseg:29AE2  j dseg:29AF1  j		 /* DOS offset ---> 1121:C */
call	far ptr	59Dh:0ACh

loc_19B61:				; CODE XREF: dseg:29E73  p dseg:29F5B  p ...		 /* DOS offset ---> 1122:1 */
add	sp, 2
mov	bx, [bp-8]
cmp	word ptr [bx], 0
jnz	short loc_19B6F
jmp	loc_19CD4
;     ***************************************************************************

loc_19B6F:				; CODE XREF: dseg:9B6A  j		 /* DOS offset ---> 1122:F */
push	word ptr [bp+8]
call	far ptr	525h:6
; START	OF FUNCTION CHUNK FOR game_build_fort_map_fort_placement

loc_19B77:				; CODE XREF: game_build_fort_map_fort_placement+3A  j		 /* DOS offset ---> 1123:7 */
add	sp, 2
sub	ah, ah
mov	si, ax
mov	bx, [bp+var_8]
mov	byte ptr [bx+si+0Eh], 64h ; 'd'
push	[bp+arg_4]
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp+var_8]
mov	[bx+9],	al
push	[bp+arg_4]
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short loc_19BA8
jmp	loc_19D4A
;     ***************************************************************************

loc_19BA8:				; CODE XREF: game_build_fort_map_fort_placement-FF95  j		 /* DOS offset ---> 1126:8 */
test	options_value, 10h
jnz	short loc_19BB2
jmp	loc_19D4A
;     ***************************************************************************

loc_19BB2:				; CODE XREF: game_build_fort_map_fort_placement-FF8B  j		 /* DOS offset ---> 1127:2 */
call	far ptr	4B5h:282h
mov	bx, [bp+var_8]
mov	ax, [bx]
add	ax, 1Ch
mov	[bp+var_E], ax

loc_19BC2:				; CODE XREF: dseg:29B69  j dseg:29B77  j ...		 /* DOS offset ---> 1128:2 */
call	far ptr	4B5h:290h
push	[bp+var_C]
mov	bx, [bp+arg_4]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 462Ch

loc_19BD6:				; CODE XREF: dseg:29FD4  p		 /* DOS offset ---> 1129:6 */
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
mov	ax, 1
push	ax
mov	bx, [bp+arg_2]
push	word ptr [bx+1Ah]

loc_19BE9:				; CODE XREF: dseg:29BE4  j		 /* DOS offset ---> 112A:9 */
mov	cx, 54h	; 'T'
push	cx
mov	cx, 26h	; '&'

loc_19BF0:				; CODE XREF: dseg:29BEB  j		 /* DOS offset ---> 112B:0 */
push	cx
push	cs
call	loc_19A90
add	sp, 8
mov	ax, 2
push	ax
call	far ptr	49Ch:178h
add	sp, 2
dec	ax
jnz	short loc_19C0C
mov	ax, word ptr loc_1466C
jmp	short loc_19C0F
;     ***************************************************************************

loc_19C0C:				; CODE XREF: game_build_fort_map_fort_placement-FF33  j		 /* DOS offset ---> 112C:C */
; dseg:29BF7  j
mov	ax, word ptr loc_1466A

loc_19C0F:				; CODE XREF: game_build_fort_map_fort_placement-FF2E  j		 /* DOS offset ---> 112C:F */
mov	[bp+var_2], ax
mov	[bp+var_6], 0
push	ax
call	far ptr	loc_133C4
add	sp, 2
add	[bp+var_6], al
mov	al, [bp+var_6]
push	ax
mov	ax, 31h	; '1'
push	ax
push	cs
call	loc_195B8

loc_19C2E:				; CODE XREF: game_build_fort_map_fort_placement+3C  j		 /* DOS offset ---> 112E:E */
; dseg:29C0B  j
add	sp, 4
push	[bp+var_C]
push	[bp+var_2]
call	far ptr	3EFh:6E8h
add	sp, 4
mov	al, 28h	; '('

loc_19C41:				; CODE XREF: dseg:29C1B  j		 /* DOS offset ---> 1130:1 */
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
mov	bx, [bp+var_8]
mov	bx, [bx]
push	word ptr [bx+1Ah]
mov	ax, 54h	; 'T'
push	ax

loc_19C56:				; CODE XREF: dseg:29C8A  j		 /* DOS offset ---> 1131:6 */
mov	ax, 26h	; '&'
push	ax
call	far ptr	4B5h:6A4h
add	sp, 6
mov	ax, 2
push	ax
call	far ptr	49Ch:178h
add	sp, 2

loc_19C6E:		 /* DOS offset ---> 1132:E */
cmp	ax, 1
sbb	bx, bx
inc	bx
shl	bx, 1
push	word ptr [bx+466Eh]
mov	si, bx
call	far ptr	loc_133C4
add	sp, 2
push	ax
mov	ax, 31h	; '1'
push	ax
push	cs

loc_19C8A:				; CODE XREF: dseg:29BE6  j dseg:29BED  j ...		 /* DOS offset ---> 1134:A */
call	loc_195B8
add	sp, 4

loc_19C90:				; CODE XREF: dseg:29E89  p		 /* DOS offset ---> 1135:0 */
push	[bp+var_C]
push	[bp+var_E]
push	word ptr [si+466Eh]

loc_19C9A:				; CODE XREF: game_build_fort_hit_any_key+65  j		 /* DOS offset ---> 1135:A */
call	far ptr	3EFh:6E8h
add	sp, 6
mov	ax, 4660h

loc_19CA5:				; CODE XREF: dseg:29CA0  j		 /* DOS offset ---> 1136:5 */
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	al, 0Ah
push	ax

loc_19CB1:		 /* DOS offset ---> 1137:1 */
call	far ptr	57Ch:7Ch
add	sp, 2

loc_19CB9:		 /* DOS offset ---> 1137:9 */
call	far ptr	4B5h:290h
mov	al, 23h	; '#'
push	ax

loc_19CC1:				; CODE XREF: dseg:29CAC  j		 /* DOS offset ---> 1138:1 */
call	far ptr	57Ch:7Ch

loc_19CC6:		 /* DOS offset ---> 1138:6 */
add	sp, 2
call	far ptr	4B5h:282h
pop	si
mov	sp, bp

loc_19CD1:				; CODE XREF: game_build_fort_hit_any_key+4F  j		 /* DOS offset ---> 1139:1 */
; game_build_fort_hit_any_key+55  j ...
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_build_fort_map_fort_placement
;     ***************************************************************************
nop

loc_19CD4:				; CODE XREF: dseg:9B6C  j		 /* DOS offset ---> 1139:4 */
call	far ptr	8C2h:7CAh
cmp	byte ptr loc_133EB+1, 10h
jnz	short loc_19D4A
push	word ptr [bp+8]

loc_19CE3:				; CODE XREF: dseg:29CC0  j		 /* DOS offset ---> 113A:3 */
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_19D4A
mov	ax, [bp+8]
cmp	word ptr loc_140E2, ax
jnz	short loc_19D4A
test	options_value, 10h

loc_19CFD:				; CODE XREF: game_build_fort_hit_any_key+6B  j		 /* DOS offset ---> 113B:D */
; game_build_fort_hit_any_key+71  j ...
jz	short loc_19D4A
cmp	byte ptr loc_140E5+1, 1

loc_19D04:				; CODE XREF: dseg:29CCF  j		 /* DOS offset ---> 113C:4 */
jnz	short loc_19D4A
mov	bx, word_1CA9A
mov	al, [bx+17h]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_19D4A

loc_19D1A:				; CODE XREF: dseg:29D5C  j		 /* DOS offset ---> 113D:A */
push	word_1CA9A
mov	bx, [bp+8]
push	word ptr [bx]
call	far ptr	542h:15Ah
add	sp, 4
or	ax, ax
jz	short loc_19D4A
mov	al, [bp-4]
push	ax
mov	al, [bp-0Ah]
push	ax
push	cs
call	loc_198EA
add	sp, 4
mov	ax, 32h	; '2'
push	ax
call	far ptr	57Ch:5Eh
add	sp, 2
; START	OF FUNCTION CHUNK FOR game_build_fort_map_fort_placement

loc_19D4A:				; CODE XREF: game_build_fort_map_fort_placement-FF93  j		 /* DOS offset ---> 1140:A */
; game_build_fort_map_fort_placement-FF89  j ...
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_build_fort_map_fort_placement
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
mov	ax, word_1CB7E
mov	[bp-4],	ax

loc_19D5C:				; CODE XREF: dseg:29D19  j		 /* DOS offset ---> 1141:C */
mov	ax, word_1CAE5
mov	[bp-2],	ax
or	ax, ax
jz	short loc_19D9A
cmp	byte ptr loc_140E5+1, 1
jnz	short loc_19D8E
mov	bx, word ptr loc_140E2+2
mov	ax, [bx+2]
or	ax, ax
jnz	short loc_19D88
push	word ptr [bp-2]
push	word ptr [bp-4]

loc_19D7E:		 /* DOS offset ---> 1143:E */
call	far ptr	59Dh:190h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_19D88:				; CODE XREF: dseg:9D76  j		 /* DOS offset ---> 1144:8 */
push	word ptr [bp-2]
push	ax
jmp	short loc_19D95
;     ***************************************************************************

loc_19D8E:				; CODE XREF: dseg:9D6B  j		 /* DOS offset ---> 1144:E */
push	word ptr [bp-2]
;     ***************************************************************************
db 0FFh
db  36h	; 6
db  9Ah	;   *
db 0CAh	;   *
;     ***************************************************************************

loc_19D95:				; CODE XREF: dseg:9D8C  j dseg:29CA2  j ...		 /* DOS offset ---> 1145:5 */
call	far ptr	59Dh:5CEh
; START	OF FUNCTION CHUNK FOR game_build_fort_func

loc_19D9A:				; CODE XREF: dseg:9D64  j		 /* DOS offset ---> 1145:A */
; game_build_fort_func+84  j
mov	sp, bp

loc_19D9C:				; CODE XREF: dseg:29E2C  p dseg:29F47  p ...		 /* DOS offset ---> 1145:C */
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_build_fort_func
;     ***************************************************************************
db  55h	; U
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    6
db 0FFh
db  36h	; 6
db 0E4h	;   *
db  40h	; @
;     ***************************************************************************

loc_19DA8:				; CODE XREF: dseg:2A037  p		 /* DOS offset ---> 1146:8 */
call	far ptr	525h:6
add	sp, 2

loc_19DB0:		 /* DOS offset ---> 1147:0 */
mov	[bp-6],	al
mov	ax, 1
push	ax
;     ***************************************************************************
db  9Ah	;   *
db  20h
db    3
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db 0C7h	;   *
db  46h	; F
db 0FCh	;   *
db 0F8h	;   *
db 0CAh	;   *
db 0EBh	;   *
db  1Bh
;     ***************************************************************************

loc_19DC6:				; CODE XREF: dseg:loc_19DEB  j		 /* DOS offset ---> 1148:6 */
mov	ax, word ptr loc_140E2+2
cmp	[bp-2],	ax
jz	short loc_19DDD
mov	bx, [bp-2]
mov	al, [bp-6]
cmp	[bx+1Eh], al
jnz	short loc_19DDD
mov	byte ptr [bx+1Eh], 0FFh

loc_19DDD:				; CODE XREF: dseg:9DCC  j dseg:9DD7  j		 /* DOS offset ---> 1149:D */
add	word ptr [bp-4], 2
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax

loc_19DEB:				; CODE XREF: dseg:29EBF  j		 /* DOS offset ---> 114A:B */
jnz	short loc_19DC6
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    6
db  8Bh	;   *
db  1Eh
db 0E4h	;   *
db  40h	; @
db  8Bh	;   *
db  47h	; G
db    2
db  89h	;   *
db  46h	; F
db 0FAh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  51h	; Q
db  8Bh	;   *
db 0D8h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_delegate_war_query_where

loc_19E08:				; CODE XREF: game_delegate_war_query_where+4A  j		 /* DOS offset ---> 114C:8 */
mov	ax, [bx]
mov	[bp+var_4], ax

loc_19E0D:				; CODE XREF: dseg:29E08  j		 /* DOS offset ---> 114C:D */
or	ax, ax
jz	short loc_19E57

loc_19E11:				; CODE XREF: game_delegate_war_query_where-FF61  j		 /* DOS offset ---> 114D:1 */
mov	bx, ax
mov	ax, [bx+2]
mov	[bp+var_2], ax
or	ax, ax
jz	short loc_19E42

loc_19E1D:				; CODE XREF: game_delegate_war_query_where-FF76  j		 /* DOS offset ---> 114D:D */
push	ax
push	bx
call	far ptr	59Dh:6A8h
add	sp, 4
push	[bp+var_2]
push	[bp+var_4]
call	far ptr	59Dh:190h

loc_19E32:				; CODE XREF: dseg:29E11  j dseg:29E18  j		 /* DOS offset ---> 114F:2 */
add	sp, 4

loc_19E35:				; CODE XREF: game_delegate_war_query+4D  j		 /* DOS offset ---> 114F:5 */
; game_delegate_war_query+5F  j ...
mov	bx, [bp+var_4]
mov	ax, [bx+2]
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_19E1D

loc_19E42:				; CODE XREF: game_delegate_war_query_where-FF9B  j		 /* DOS offset ---> 1150:2 */
push	bx
call	far ptr	59Dh:50Eh
add	sp, 2
mov	bx, [bp+var_6]

loc_19E4E:		 /* DOS offset ---> 1150:E */
mov	ax, [bx]
mov	[bp+var_4], ax
or	ax, ax
jnz	short loc_19E11

loc_19E57:				; CODE XREF: game_delegate_war_query_where-FFA7  j		 /* DOS offset ---> 1151:7 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_delegate_war_query_where
;     ***************************************************************************
nop

loc_19E5C:				; CODE XREF: dseg:A052  p		 /* DOS offset ---> 1151:C */
; game_delegate_func-FF9D  p
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db 0C6h	;   *
db  46h	; F
db 0FCh	;   *
db    0
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0C2h	;   *
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db    4
db 0C6h	;   *
db  46h	; F
db 0FCh	;   *
db    1
db 0FFh
db  76h	; v
db    8
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0CEh	;   *
db    5
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
unk_19E86	db    4			; CODE XREF: game_delegate_war_query+22  j
; game_delegate_war_query+34  j
db  80h	;   *
db  7Eh	; ~
db 0FCh	;   *
db    0
db  74h	; t
db    8
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0F4h	;   *
db    3
db 0B5h	;   *
db    4
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Ch
db 0C6h	;   *
db  46h	; F
db 0FAh	;   *
db    0
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_delegate_send_query

loc_19EA4:				; CODE XREF: game_delegate_send_query-FF5A  j		 /* DOS offset ---> 1156:4 */
mov	[bp+var_C], 0

loc_19EA8:				; CODE XREF: game_delegate_send_query-FF66  j		 /* DOS offset ---> 1156:8 */
mov	bx, word_1CA9A
mov	al, [bx+20h]

loc_19EAF:				; CODE XREF: dseg:29E9C  j dseg:29EA5  j		 /* DOS offset ---> 1156:F */
mov	byte ptr [bp+var_4], al

loc_19EB2:				; CODE XREF: game_delegate_send_query+45  j		 /* DOS offset ---> 1157:2 */
; game_delegate_send_query+52  j	...
mov	al, [bx+21h]

loc_19EB5:				; CODE XREF: dseg:29E0A  j		 /* DOS offset ---> 1157:5 */
mov	byte ptr [bp+var_8], al
mov	al, [bp+var_C]
push	ax
lea	ax, [bp+var_8]
push	ax

loc_19EC0:				; CODE XREF: dseg:29EBD  j		 /* DOS offset ---> 1158:0 */
lea	ax, [bp+var_4]
push	ax
call	far ptr	59Dh:2A8h

loc_19EC9:				; CODE XREF: dseg:2A058  p		 /* DOS offset ---> 1158:9 */
add	sp, 6
mov	[bp+var_2], al
cmp	al, 0FFh
jz	short loc_19F1F
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	[bp+var_A], ax
push	ax
call	far ptr	525h:4Ah
add	sp, 2
cmp	ax, [bp+arg_0]
jnz	short loc_19F0A
push	[bp+var_A]

loc_19EF0:				; CODE XREF: game_delegate_send_query+22  j		 /* DOS offset ---> 115B:0 */
; game_delegate_send_query+34  j
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_19F02
cmp	[bp+var_6], 0
jz	short loc_19F1F

loc_19F02:				; CODE XREF: game_delegate_send_query-FF94  j		 /* DOS offset ---> 115C:2 */
; game_delegate_send_query-FF71  j ...
mov	ax, [bp+var_A]

loc_19F05:				; CODE XREF: dseg:29F00  j		 /* DOS offset ---> 115C:5 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_delegate_send_query
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_delegate_send_query

loc_19F0A:				; CODE XREF: game_delegate_send_query-FFA3  j		 /* DOS offset ---> 115C:A */
push	[bp+var_A]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short loc_19F1F
cmp	[bp+var_6], 0
jnz	short loc_19F02

loc_19F1F:				; CODE XREF: game_delegate_send_query-FFBD  j		 /* DOS offset ---> 115D:F */
; game_delegate_send_query-FF8E  j ...
inc	[bp+var_C]
cmp	[bp+var_C], 6
jnb	short loc_19F2B
jmp	loc_19EA8
;     ***************************************************************************

loc_19F2B:				; CODE XREF: game_delegate_send_query-FF68  j		 /* DOS offset ---> 115E:B */
inc	[bp+var_6]
cmp	[bp+var_6], 2
jnb	short loc_19F37
jmp	loc_19EA4
;     ***************************************************************************

loc_19F37:				; CODE XREF: game_delegate_send_query-FF5C  j		 /* DOS offset ---> 115F:7 */
sub	ax, ax

loc_19F39:				; CODE XREF: dseg:29F33  j		 /* DOS offset ---> 115F:9 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_delegate_send_query
;     ***************************************************************************

loc_19F3D:				; CODE XREF: dseg:29F38  j		 /* DOS offset ---> 115F:D */
nop

loc_19F3E:				; CODE XREF: dseg:loc_1A0A5  p		 /* DOS offset ---> 115F:E */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
unk_19F42	db 0ECh	;   *		; CODE XREF: game_delegate_query_choose_policy+41  j
db    2
db 0FFh
db  76h	; v
db    8
db  9Ah	;   *
db 0C2h	;   *
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  29h	; )
db 0FFh
db  76h	; v
db    8
db  9Ah	;   *
db  4Ah	; J
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  3Bh	; ;
db  46h	; F
db    6
db  74h	; t
db  19h
db 0FFh
db  76h	; v
db    6
db  0Eh
db 0E8h	;   *
db  30h	; 0
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  0Eh
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  47h	; G
db    2
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
mov	ax, [bp+8]	; CODE XREF: dseg:29F15  j dseg:29F1B  j ...
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_19F84:				; CODE XREF: game_delegate_query_choose_policy-FEFD  p		 /* DOS offset ---> 1164:4 */
push	cs
;     ***************************************************************************
db 0E8h	;   *
db  16h
db 0FEh	;   *
db  0Eh
db 0E8h	;   *
unk_19F8A	db  66h	; f		; CODE XREF: game_delegate_query_choose_policy+7E  j
db 0FEh	;   *
db 0FFh
db  36h	; 6
db  9Ah	;   *
db 0CAh	;   *
db  9Ah	;   *
db  64h	; d
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  1Eh
db 0E4h	;   *
db  40h	; @
db  88h	;   *
unk_19F9D	db  47h	; G		; CODE XREF: game_delegate_query_choose_policy+8C  j
db  22h	; "
db  8Bh	;   *
db  1Eh
db 0E4h	;   *
db  40h	; @
db 0C7h	;   *
db  47h	; G
db  23h	; #
db    0
db    0
db  8Bh	;   *
db  1Eh
db 0E4h	;   *
db  40h	; @
db  2Bh	; +
db 0C0h	;   *
db  89h	;   *
db  47h	; G
db  27h	; '
;     ***************************************************************************

loc_19FB1:				; CODE XREF: dseg:29F81  j dseg:29F87  j		 /* DOS offset ---> 1167:1 */
mov	[bx+25h], ax
mov	bx, word ptr loc_140E2+2
mov	bx, [bx]
mov	[bx], ax

loc_19FBC:				; CODE XREF: game_delegate_query_choose_policy+B1  j		 /* DOS offset ---> 1167:C */
mov	bx, word ptr loc_140E2+2
or	byte ptr [bx+7], 4
retf
;     ***************************************************************************
nop

loc_19FC6:				; CODE XREF: game_exile_func_clear_home_province-FF73  p		 /* DOS offset ---> 1168:6 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  8Bh	;   *
db  1Eh
db 0EAh	;   *
db  40h	; @
db 0FFh
unk_19FD1	db  77h	; w		; CODE XREF: game_delegate_query_choose_policy+BF  j
db    2
db 0FFh
db  36h	; 6
db 0E4h	;   *
db  40h	; @
db  0Eh
db 0E8h	;   *
db  63h	; c
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    4
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
unk_19FE2	db 0C0h	;   *		; CODE XREF: dseg:29F02  j
db  75h	; u
db  49h	; I
db  9Ah	;   *
db  6Ch	; l
db    8
db 0C2h	;   *
unk_19FE9	db    8			; CODE XREF: game_delegate_query_choose_policy+E8  j
db  0Bh
db 0C0h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_delegate_query_choose_policy

loc_19FEC:				; CODE XREF: game_delegate_query_choose_policy+43  j		 /* DOS offset ---> 116A:C */
jz	short loc_19FF6
mov	ax, 1

loc_19FF1:				; CODE XREF: game_delegate_query_choose_policy+ED  j		 /* DOS offset ---> 116B:1 */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_delegate_query_choose_policy
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_delegate_query_choose_policy

loc_19FF6:				; CODE XREF: game_delegate_query_choose_policy:loc_19FEC  j		 /* DOS offset ---> 116B:6 */
call	far ptr	8C2h:7CAh

loc_19FFB:				; CODE XREF: dseg:2A068  j		 /* DOS offset ---> 116B:B */
push	[bp+arg_0]
push	cs
call	loc_19F84
add	sp, 2
call	far ptr	4B5h:290h
cmp	word_13572, 0
jz	short loc_1A016
call	far ptr	4B5h:358h

loc_1A016:				; CODE XREF: game_delegate_query_choose_policy-FEED  j		 /* DOS offset ---> 116D:6 */
mov	ax, [bp+arg_0]
add	ax, 1Ch
push	ax

loc_1A01D:				; CODE XREF: dseg:2A00E  j		 /* DOS offset ---> 116D:D */
mov	ax, 4672h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	al, 14h
jmp	short loc_1A05A
; END OF FUNCTION CHUNK	FOR game_delegate_query_choose_policy
;     ***************************************************************************
nop
call	far ptr	4B5h:290h ; CODE XREF: dseg:2A025  j dseg:2A02B  j
mov	ax, [bp+6]
add	ax, 1Ch
push	ax

loc_1A03A:				; CODE XREF: game_delegate_func_warnings+18  j		 /* DOS offset ---> 116F:A */
mov	ax, 4691h
push	ax

loc_1A03E:				; CODE XREF: dseg:2A028  j dseg:2A02E  j		 /* DOS offset ---> 116F:E */
call	far ptr	3EFh:6E8h

loc_1A043:		 /* DOS offset ---> 1170:3 */
add	sp, 4
mov	bx, [bp-2]
and	byte ptr [bx+12h], 0FBh
push	word ptr [bp+6]
push	bx
push	cs
call	loc_19E5C
add	sp, 4
mov	al, 0Ah
; START	OF FUNCTION CHUNK FOR game_delegate_query_choose_policy

loc_1A05A:				; CODE XREF: game_delegate_query_choose_policy-FED1  j		 /* DOS offset ---> 1171:A */
push	ax

loc_1A05B:				; CODE XREF: dseg:2A03D  j		 /* DOS offset ---> 1171:B */
call	far ptr	57Ch:7Ch

loc_1A060:				; CODE XREF: dseg:2A014  j dseg:2A01C  j ...		 /* DOS offset ---> 1172:0 */
sub	ax, ax

loc_1A062:				; CODE XREF: game_delegate_func+D7  j		 /* DOS offset ---> 1172:2 */
mov	sp, bp
pop	bp

locret_1A065:				; CODE XREF: game_delegate_func+DD  j
retf
; END OF FUNCTION CHUNK	FOR game_delegate_query_choose_policy
;     ***************************************************************************

loc_1A066:				; CODE XREF: game_exile_func_warnings-FF6C  p		 /* DOS offset ---> 1172:6 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    8
db  8Bh	;   *
db  5Eh	; ^
db    6
db  80h	;   *
db  7Fh	; 
db  0Ah
db 0FFh
db  74h	; t
db  3Ah	; :
;     ***************************************************************************

loc_1A075:				; CODE XREF: dseg:2A06E  j		 /* DOS offset ---> 1173:5 */
push	bx

loc_1A076:				; CODE XREF: dseg:2A30B  p		 /* DOS offset ---> 1173:6 */
call	far ptr	525h:30h
add	sp, 2
mov	[bp-4],	ax
mov	bx, word ptr loc_140E8+2
cmp	[bx], ax
jz	short loc_1A09D
add	bx, 0Ah
cmp	[bx], ax
jz	short loc_1A09D
mov	bx, word ptr loc_140E8
mov	ax, [bx+0Ah]
mov	[bp-4],	ax
lea	bx, [bx+0Ah]

loc_1A09D:				; CODE XREF: dseg:A087  j dseg:A08E  j		 /* DOS offset ---> 1175:D */
mov	ax, [bx+2]
push	ax
push	word ptr [bp-4]
push	cs

loc_1A0A5:		 /* DOS offset ---> 1176:5 */
call	loc_19F3E
add	sp, 4
or	ax, ax
jnz	short loc_1A0C0
push	word ptr [bp+6]
push	word_1CA9A
call	far ptr	59Dh:190h
mov	sp, bp
pop	bp

locret_1A0BE:				; CODE XREF: game_delegate_func+46  j
retf
;     ***************************************************************************
nop

loc_1A0C0:				; CODE XREF: dseg:A0AD  j		 /* DOS offset ---> 1178:0 */
push	word ptr [bp+6]
push	ax
; START	OF FUNCTION CHUNK FOR game_delegate_func

loc_1A0C4:				; CODE XREF: game_delegate_func_warnings+2B  j		 /* DOS offset ---> 1178:4 */
; game_delegate_func+2D  j ...
push	cs
call	loc_19E5C
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_delegate_func
;     ***************************************************************************

loc_1A0CC:				; CODE XREF: game_exile_func_warnings-10061  p		 /* DOS offset ---> 1178:C */
; dseg:A3A4  p ...
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0FFh
db  37h	; 7
db  9Ah	;   *
db    6
db    0
db  25h	; %
db    5
db  8Bh	;   *
db 0E5h	;   *
db  8Ah	;   *
db 0D8h	;   *
db  2Ah	; *
db 0FFh
db  38h	; 8
db 0BFh	;   *
db  60h	; `
db  33h	; 3
db  74h	; t
db  0Fh
db  8Bh	;   *
db  5Eh	; ^
db    6
db  83h	;   *
db  7Fh	; 
db    8
db    0
db  75h	; u
db    6
db 0B8h	;   *
db    1
db    0
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
sub	ax, ax
pop	bp
retf
;     ***************************************************************************

loc_1A0F8:				; CODE XREF: game_exile_func_warnings-FF77  p		 /* DOS offset ---> 117B:8 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    8
db  8Bh	;   *
db  46h	; F
db    8
db  39h	; 9
db    6
db 0E8h	;   *
db  40h	; @
db  74h	; t
db  2Bh	; +
db  8Bh	;   *
db 0D8h	;   *
db  8Bh	;   *
db  47h	; G
db    2
db  8Bh	;   *
db  0Fh
db  89h	;   *
db  4Eh	; N
db 0FAh	;   *
db  50h	; P
db  51h	; Q
db  0Eh
db 0E8h	;   *
db  27h	; '
unk_1A116	db 0FEh	;   *		; CODE XREF: dseg:2A100  j
db  83h	;   *
db 0C4h	;   *
db    4
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db  1Dh
db 0FFh
unk_1A122	db  76h	; v		; CODE XREF: dseg:2A0F2  j
db    6
db 0FFh
db  36h	; 6
db  9Ah	;   *
db 0CAh	;   *
db  9Ah	;   *
db  90h	;   *
unk_1A12A	db    1			; CODE XREF: dseg:2A0B6  j dseg:2A0D2  j ...
db  9Dh	;   *
db    5
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
;     ***************************************************************************

locret_1A130:				; CODE XREF: dseg:2A316  p
retf
;     ***************************************************************************
nop
mov	ax, word ptr loc_140E2
mov	[bp-6],	ax
mov	ax, word_1CA9A

loc_1A13B:				; CODE XREF: game_delegate_func+D5  j		 /* DOS offset ---> 117F:B */
mov	[bp-4],	ax
mov	bx, [bp+6]

loc_1A141:				; CODE XREF: game_delegate_func+81  j		 /* DOS offset ---> 1180:1 */
cmp	byte ptr [bx+0Ah], 0FFh

loc_1A145:		 /* DOS offset ---> 1180:5 */
jz	short loc_1A16A
push	bx
call	far ptr	525h:30h
add	sp, 2
mov	bx, ax
mov	ax, [bp+6]
cmp	[bx+4],	ax
jnz	short loc_1A16A
push	ax
call	far ptr	525h:30h

loc_1A160:				; CODE XREF: game_exile_func_sub+78  j		 /* DOS offset ---> 1182:0 */
add	sp, 2
mov	bx, ax
mov	word ptr [bx+4], 0

loc_1A16A:				; CODE XREF: dseg:loc_1A145  j		 /* DOS offset ---> 1182:A */
; dseg:A158  j
push	word ptr [bp-6]
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp+6]
mov	[bx+0Ah], al
; START	OF FUNCTION CHUNK FOR game_exile_func_sub

loc_1A17B:				; CODE XREF: game_exile_func_sub+58  j		 /* DOS offset ---> 1183:B */
push	[bp+var_6]
push	bx
call	far ptr	59Dh:22Eh
add	sp, 4
push	[bp+arg_0]
push	[bp+var_4]
call	far ptr	59Dh:5CEh
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_exile_func_sub
;     ***************************************************************************
db  55h	; U
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  56h	; V
db  8Bh	;   *
db  5Eh	; ^
db    6
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_exile_func_sub

loc_1A1A0:				; CODE XREF: game_exile_func_sub+33  j		 /* DOS offset ---> 1186:0 */
mov	ax, [bx]
mov	[bp+var_2], ax
push	word ptr loc_140E2+2
mov	si, ax
call	far ptr	525h:6
add	sp, 2

loc_1A1B3:				; CODE XREF: game_exile_func_sub+26  j		 /* DOS offset ---> 1187:3 */
mov	bl, al
sub	bh, bh
mov	al, [bx+si+0Eh]
sub	ah, ah
mov	bx, [bp+arg_2]

loc_1A1BF:				; CODE XREF: game_exile_func_sub+19  j		 /* DOS offset ---> 1187:F */
mov	cx, ax
mov	al, [bx+6]
sub	ax, cx

loc_1A1C6:				; CODE XREF: dseg:2A1B5  j		 /* DOS offset ---> 1188:6 */
add	ax, 64h	; 'd'
cwd
sub	ax, dx
sar	ax, 1
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax

loc_1A1D9:				; CODE XREF: dseg:2A1D3  j		 /* DOS offset ---> 1189:9 */
jz	short loc_1A20A

loc_1A1DB:				; CODE XREF: dseg:2A1D8  j		 /* DOS offset ---> 1189:B */
cmp	year_value, 0C8h ; '  *'

loc_1A1E1:				; CODE XREF: game_exile_func_clear_home_province+44  j		 /* DOS offset ---> 118A:1 */
jnb	short loc_1A20A
mov	al, 32h	; '2'
push	ax
push	[bp+var_2]
call	far ptr	525h:6
add	sp, 2
sub	ah, ah
add	ax, word ptr loc_140E2+2
add	ax, 0Eh
push	ax

loc_1A1FB:				; CODE XREF: dseg:2A1C3  j dseg:2A235  j		 /* DOS offset ---> 118B:B */
call	far ptr	49Ch:6Ch
add	sp, 4
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1A20A:				; CODE XREF: game_exile_func_sub:loc_1A1D9  j		 /* DOS offset ---> 118C:A */
; game_exile_func_sub:loc_1A1E1  j ...
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_exile_func_sub
;     ***************************************************************************

loc_1A212:				; CODE XREF: game_exile_func_warnings-FF14  p		 /* DOS offset ---> 118D:2 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db 0FFh
db  76h	; v
unk_1A21A	db    8			; CODE XREF: game_exile_func_clear_home_province+11  j
db  9Ah	;   *
db  30h	; 0
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db 0D8h	;   *
db 0F6h	;   *
db  47h	; G
unk_1A227	db    7			; CODE XREF: game_exile_func_clear_home_province+8A  j
db  80h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db  88h	;   *
db    0
db 0FFh
db  76h	; v
db    6
db  0Eh
db 0E8h	;   *
db  97h	;   *
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  20h
db 0FFh
db  76h	; v
db    8
db 0FFh
db  76h	; v
db    6
db  0Eh
db 0E8h	;   *
db  50h	; P
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  75h	; u
db  69h	; i
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_exile_func_clear_home_province

loc_1A24D:				; CODE XREF: game_exile_func_clear_home_province-FF10  j		 /* DOS offset ---> 1190:D */
push	[bp+arg_2]

loc_1A250:				; CODE XREF: game_exile_func_clear_home_province+61  j		 /* DOS offset ---> 1191:0 */
push	cs
call	loc_19FC6
add	sp, 2
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_exile_func_clear_home_province
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_exile_func_clear_home_province

loc_1A25C:				; CODE XREF: game_exile_func_clear_home_province-FF15  j		 /* DOS offset ---> 1191:C */
push	[bp+arg_2]
call	far ptr	8C2h:0DCh
add	sp, 2
call	far ptr	4B5h:290h
mov	ax, [bp+arg_2]
add	ax, 1Ch
push	ax
mov	ax, 46A9h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4

loc_1A27F:				; CODE XREF: game_exile_func_clear_home_province+53  j		 /* DOS offset ---> 1193:F */
cmp	word_1352C, 0
jz	short loc_1A290
mov	al, 7
push	ax
call	far ptr	6EBh:4F0h
jmp	short loc_1A299
;     ***************************************************************************

loc_1A290:				; CODE XREF: game_exile_func_clear_home_province-FF40  j		 /* DOS offset ---> 1195:0 */
mov	ax, 6
push	ax
call	far ptr	6EBh:0Eh

loc_1A299:				; CODE XREF: game_exile_func_clear_home_province-FF36  j		 /* DOS offset ---> 1195:9 */
add	sp, 2
mov	ax, 2
push	ax
mov	ax, 1
push	ax
call	far ptr	3EFh:998h
add	sp, 4
cmp	ax, 0FFFFh
jz	short loc_1A25C

loc_1A2B1:				; CODE XREF: dseg:2A31F  p		 /* DOS offset ---> 1197:1 */
cmp	ax, 1
jz	short loc_1A24D
mov	ax, 1
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_exile_func_clear_home_province
;     ***************************************************************************
nop

loc_1A2BE:				; CODE XREF: dseg:A3B2  p		 /* DOS offset ---> 1197:E */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Ah	;   *
db  47h	; G
db    4
db  2Ah	; *
db 0E4h	;   *
db  8Ah	;   *
db  4Fh	; O
db    5
db  2Ah	; *
db 0EDh	;   *
db    3
db 0C1h	;   *
db  3Dh	; =
db  46h	; F
unk_1A2D2	db    0			; CODE XREF: dseg:2A2FB  j
db  73h	; s
db    5
db 0B8h	;   *
db    1
db    0
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_exile_func_clear_home_province

loc_1A2DA:				; CODE XREF: game_exile_func_clear_home_province+10F  j		 /* DOS offset ---> 1199:A */
sub	ax, ax

loc_1A2DC:				; CODE XREF: dseg:2A2D2  j		 /* DOS offset ---> 1199:C */
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_exile_func_clear_home_province
;     ***************************************************************************
push	bp

loc_1A2DF:				; CODE XREF: game_exile_func_clear_home_province+10D  j		 /* DOS offset ---> 1199:F */
; game_exile_func_clear_home_province+114  j
mov	bp, sp
sub	sp, 18h
mov	word ptr [bp-16h], 0
mov	word ptr [bp-8], 0CB72h

loc_1A2EE:				; CODE XREF: dseg:2A2D9  j dseg:2A2DF  j ...		 /* DOS offset ---> 119A:E */
mov	word ptr [bp-18h], 4
; START	OF FUNCTION CHUNK FOR game_exile_func_warnings

loc_1A2F3:				; CODE XREF: game_exile_func_warnings-FF45  j		 /* DOS offset ---> 119B:3 */
mov	ax, [bp+var_8]
cmp	word ptr loc_140E8+2, ax
jnz	short loc_1A2FF
jmp	loc_1A44A
;     ***************************************************************************

loc_1A2FF:				; CODE XREF: game_exile_func_warnings-1009E  j		 /* DOS offset ---> 119B:F */
mov	bx, ax
mov	ax, [bx+6]
mov	[bp+var_4], ax
or	ax, ax
jnz	short loc_1A30E
jmp	loc_1A44A
;     ***************************************************************************

loc_1A30E:				; CODE XREF: game_exile_func_warnings-1008F  j		 /* DOS offset ---> 119C:E */
push	ax
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax

loc_1A319:		 /* DOS offset ---> 119D:9 */
jz	short loc_1A333
mov	ax, [bp+var_8]

loc_1A31E:				; CODE XREF: dseg:2A2CF  j dseg:2A313  j		 /* DOS offset ---> 119D:E */
mov	[bp+var_C], ax
mov	bx, ax

loc_1A323:				; CODE XREF: dseg:2A2E3  j		 /* DOS offset ---> 119E:3 */
mov	ax, [bx]
mov	[bp+var_10], ax

loc_1A328:				; CODE XREF: dseg:2A341  j		 /* DOS offset ---> 119E:8 */
mov	bx, [bp+var_4]
mov	[bp+var_16], bx
mov	ax, [bx]
mov	[bp+var_4], ax

loc_1A333:				; CODE XREF: game_exile_func_warnings:loc_1A319  j		 /* DOS offset ---> 119F:3 */
push	[bp+var_8]
push	cs
call	loc_1A0CC

loc_1A33A:				; CODE XREF: dseg:2A2EC  j		 /* DOS offset ---> 119F:A */
add	sp, 2
or	ax, ax
jz	short loc_1A362

loc_1A341:				; CODE XREF: dseg:2A2D7  j		 /* DOS offset ---> 11A0:1 */
push	word_1CA9A
call	far ptr	57Ch:1CAh
add	sp, 2

loc_1A34D:				; CODE XREF: dseg:2A348  j		 /* DOS offset ---> 11A0:D */
mov	bx, [bp+var_8]
push	word ptr [bx]
call	far ptr	8C2h:6
add	sp, 2
mov	bx, [bp+var_8]
mov	ax, [bx]
mov	[bp+var_E], ax

loc_1A362:				; CODE XREF: game_exile_func_warnings-10059  j		 /* DOS offset ---> 11A2:2 */
mov	bx, [bp+var_8]
mov	bx, [bx]
mov	ax, [bx]
add	ax, 1Ch
mov	[bp+var_14], ax

loc_1A36F:				; CODE XREF: dseg:2A36B  j dseg:2A3C0  j		 /* DOS offset ---> 11A2:F */
cmp	[bp+var_4], 0
jnz	short loc_1A378
jmp	loc_1A44A
;     ***************************************************************************

loc_1A378:				; CODE XREF: game_exile_func_warnings-10025  j		 /* DOS offset ---> 11A3:8 */
; game_exile_func_warnings-FF51  j ...
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_2], ax
push	bx
call	far ptr	525h:30h

loc_1A386:				; CODE XREF: dseg:2A37B  j		 /* DOS offset ---> 11A4:6 */
add	sp, 2

loc_1A389:				; CODE XREF: game_exile_func_check+2F  j		 /* DOS offset ---> 11A4:9 */
mov	bx, [bp+var_8]
cmp	ax, [bx]
jnz	short loc_1A3A2

loc_1A390:		 /* DOS offset ---> 11A5:0 */
push	[bp+var_4]
push	word ptr [bx+2]
call	far ptr	59Dh:5CEh

loc_1A39B:				; CODE XREF: game_exile_func_warnings-FF74  j		 /* DOS offset ---> 11A5:B */
add	sp, 4
jmp	loc_1A43D
; END OF FUNCTION CHUNK	FOR game_exile_func_warnings
;     ***************************************************************************
nop

loc_1A3A2:				; CODE XREF: game_exile_func_warnings-1000A  j		 /* DOS offset ---> 11A6:2 */
push	bx
push	cs
call	loc_1A0CC
add	sp, 2
or	ax, ax

loc_1A3AC:				; CODE XREF: dseg:2A3A5  j		 /* DOS offset ---> 11A6:C */
jnz	short loc_1A3C8
push	word ptr [bp-4]
push	cs
call	loc_1A2BE

loc_1A3B5:				; CODE XREF: dseg:2A385  j dseg:2A3B1  j		 /* DOS offset ---> 11A7:5 */
add	sp, 2

loc_1A3B8:				; CODE XREF: game_exile_func_warnings+17  j		 /* DOS offset ---> 11A7:8 */
cmp	ax, 1
sbb	ax, ax
and	al, 0FEh
add	ax, 3
mov	[bp-6],	ax

loc_1A3C5:				; CODE XREF: dseg:2A3AB  j		 /* DOS offset ---> 11A8:5 */
jmp	short loc_1A406
;     ***************************************************************************
nop

loc_1A3C8:				; CODE XREF: dseg:loc_1A3AC  j		 /* DOS offset ---> 11A8:8 */
push	word ptr [bp-4]
call	far ptr	8C2h:0DCh
; START	OF FUNCTION CHUNK FOR game_exile_func_warnings

loc_1A3D0:				; CODE XREF: game_exile_func_warnings+28  j		 /* DOS offset ---> 11A9:0 */
add	sp, 2

loc_1A3D3:				; CODE XREF: game_exile_func_warnings-FF94  j		 /* DOS offset ---> 11A9:3 */
call	far ptr	4B5h:290h
mov	ax, [bp+var_4]
add	ax, 1Ch
push	ax
push	[bp+var_14]
mov	ax, 46E5h
push	ax
call	far ptr	3EFh:6E8h

loc_1A3EB:				; CODE XREF: game_exile_func+18  j		 /* DOS offset ---> 11AA:B */
add	sp, 6

loc_1A3EE:				; CODE XREF: dseg:2A3D8  j dseg:2A3E7  j		 /* DOS offset ---> 11AA:E */
mov	ax, 3
push	ax
mov	ax, 1
push	ax
call	far ptr	3EFh:998h
add	sp, 4
mov	[bp+var_6], ax
cmp	ax, 0FFFFh
jz	short loc_1A3D3

loc_1A406:				; CODE XREF: dseg:loc_1A3C5  j		 /* DOS offset ---> 11AC:6 */
call	far ptr	4B5h:290h
mov	ax, [bp+var_6]
dec	ax
jz	short loc_1A41A
dec	ax
jz	short loc_1A428
dec	ax
jz	short loc_1A432
jmp	short loc_1A43D
; END OF FUNCTION CHUNK	FOR game_exile_func_warnings
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_exile_func_warnings

loc_1A41A:				; CODE XREF: game_exile_func_warnings-FF89  j		 /* DOS offset ---> 11AD:A */
push	[bp+var_8]
push	[bp+var_4]

loc_1A420:				; CODE XREF: game_exile_func+3A  j		 /* DOS offset ---> 11AE:0 */
push	cs
call	loc_1A0F8
jmp	loc_1A39B
; END OF FUNCTION CHUNK	FOR game_exile_func_warnings
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_exile_func_warnings

loc_1A428:				; CODE XREF: game_exile_func_warnings-FF86  j		 /* DOS offset ---> 11AE:8 */
push	[bp+var_4]
push	cs
call	loc_1A066
jmp	short loc_1A43A
; END OF FUNCTION CHUNK	FOR game_exile_func_warnings
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_exile_func_warnings

loc_1A432:				; CODE XREF: game_exile_func_warnings-FF83  j		 /* DOS offset ---> 11AF:2 */
push	[bp+var_4]
call	far ptr	59Dh:692h

loc_1A43A:				; CODE XREF: game_exile_func_warnings-FF69  j		 /* DOS offset ---> 11AF:A */
add	sp, 2

loc_1A43D:				; CODE XREF: game_exile_func_warnings-FFFA  j		 /* DOS offset ---> 11AF:D */
; game_exile_func_warnings-FF81  j
mov	ax, [bp+var_2]
mov	[bp+var_4], ax
or	ax, ax
jz	short loc_1A44A
jmp	loc_1A378
;     ***************************************************************************

loc_1A44A:				; CODE XREF: game_exile_func_warnings-1009C  j		 /* DOS offset ---> 11B0:A */
; game_exile_func_warnings-1008D  j ...
add	[bp+var_8], 0Ah
dec	[bp+var_18]

loc_1A451:				; CODE XREF: dseg:2A443  j		 /* DOS offset ---> 11B1:1 */
jz	short loc_1A456
jmp	loc_1A2F3
;     ***************************************************************************

loc_1A456:				; CODE XREF: game_exile_func_warnings:loc_1A451  j		 /* DOS offset ---> 11B1:6 */
cmp	[bp+var_16], 0
jz	short loc_1A499

loc_1A45C:				; CODE XREF: dseg:2A36D  j dseg:2A3B3  j		 /* DOS offset ---> 11B1:C */
mov	ax, [bp+var_10]
cmp	[bp+var_E], ax
jz	short loc_1A47D
push	[bp+var_C]
push	cs
call	loc_1A0CC
add	sp, 2
or	ax, ax
jz	short loc_1A47D

loc_1A472:				; CODE XREF: game_exile_func+1A  j		 /* DOS offset ---> 11B3:2 */
push	[bp+var_10]

loc_1A475:				; CODE XREF: game_advice_rumors_output+41  p		 /* DOS offset ---> 11B3:5 */
call	far ptr	8C2h:6
add	sp, 2

loc_1A47D:				; CODE XREF: game_exile_func_warnings-FF36  j		 /* DOS offset ---> 11B3:D */
; game_exile_func_warnings-FF28  j
push	[bp+var_16]
push	[bp+var_C]
push	cs
call	loc_1A212

loc_1A487:				; CODE XREF: dseg:1A499  j		 /* DOS offset ---> 11B4:7 */
add	sp, 4
or	ax, ax
jz	short loc_1A499
push	[bp+var_10]
push	[bp+var_16]
call	far ptr	95Bh:54Ah

loc_1A499:				; CODE XREF: game_exile_func_warnings-FF3E  j		 /* DOS offset ---> 11B5:9 */
; game_exile_func_warnings-FF0C  j
mov	sp, bp

loc_1A49B:				; CODE XREF: dseg:1A487  j		 /* DOS offset ---> 11B5:B */
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_exile_func_warnings
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Q_A49E		proc far		; CODE XREF: Q_A5EC+48  p

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp

loc_1A49F:				; CODE XREF: game_advice_rumors_output+6  p		 /* DOS offset ---> 11B5:F */
mov	bp, sp
sub	sp, 4
call	far ptr	4B5h:282h

loc_1A4A9:				; CODE XREF: Q_A49E+2A  j Q_A49E+43  j ...		 /* DOS offset ---> 11B6:9 */
call	far ptr	4B5h:290h
mov	ax, 41
push	ax
mov	ax, 1
push	ax

loc_1A4B6:				; CODE XREF: dseg:2A4AE  j		 /* DOS offset ---> 11B7:6 */
mov	ax, 4720h
push	ax

loc_1A4BA:				; CODE XREF: dseg:1A4E3  j		 /* DOS offset ---> 11B7:A */
call	far ptr	3EFh:9B2h ; Q_A49E

loc_1A4BF:				; CODE XREF: dseg:2A4B3  j		 /* DOS offset ---> 11B7:F */
add	sp, 6
mov	[bp+var_2], ax

loc_1A4C5:				; CODE XREF: dseg:2A498  j dseg:2A4A8  j		 /* DOS offset ---> 11B8:5 */
cmp	ax, 0FFFFh
jz	short loc_1A4A9

loc_1A4CA:				; CODE XREF: dseg:2A4C4  j		 /* DOS offset ---> 11B8:A */
mov	al, byte ptr [bp+var_2]
dec	al
push	ax
call	far ptr	525h:76h
add	sp, 2

loc_1A4D8:				; CODE XREF: dseg:1A4C8  j		 /* DOS offset ---> 11B9:8 */
mov	bx, ax
mov	[bp+var_4], bx
cmp	word ptr [bx+2], 0
jz	short loc_1A4A9
push	bx

loc_1A4E4:				; CODE XREF: dseg:1A4BB  j		 /* DOS offset ---> 11BA:4 */
call	far ptr	525h:4Ah
add	sp, 2
cmp	ax, [bp+arg_0]
jnz	short loc_1A4A9
mov	ax, [bp+var_4]

loc_1A4F4:				; CODE XREF: game_advice_advisor_output+1E5  p		 /* DOS offset ---> 11BB:4 */
; game_advice_advisor_output+425  p
mov	sp, bp
pop	bp
retf
Q_A49E		endp

;     ***************************************************************************

loc_1A4F8:				; CODE XREF: game_advice_doctor_no_doctor_here-FFBB  p		 /* DOS offset ---> 11BB:8 */
; dseg:A836  p
test	options_value, 1
;     ***************************************************************************
db  74h	; t
db    7
db  9Ah	;   *
db  5Eh	; ^
db    1
db  7Ch	; |
db    5
db 0CBh	;   *
;     ***************************************************************************
nop
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
add	sp, 2
retf
;     ***************************************************************************
nop

loc_1A514:				; CODE XREF: Q_A5EC:loc_1A6AF  p		 /* DOS offset ---> 11BD:4 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
unk_1A516	db 0ECh	;   *		; CODE XREF: dseg:2A50F  j
db  56h	; V
db  8Bh	;   *
unk_1A519	db  76h	; v		; CODE XREF: dseg:1A504  j
db    8
db  81h	;   *
db 0E6h	;   *
db 0FFh
db    0
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Ah	;   *
unk_1A523	db  40h	; @		; CODE XREF: dseg:2A513  j
db    4
db  2Ah	; *
db 0E4h	;   *
db  8Ah	;   *
db  4Eh	; N
db  0Ah
db  2Ah	; *
db 0EDh	;   *
db    3
db 0C1h	;   *
db  3Dh	; =
db  64h	; d
db    0
db  7Eh	; ~
db  0Fh
db 0B0h	;   *
db  64h	; d
db  8Bh	;   *
db  76h	; v
db    8
db  81h	;   *
db 0E6h	;   *
db 0FFh
db    0
db  2Ah	; *
db  40h	; @
db    4
db  88h	;   *
db  46h	; F
db  0Ah
;     ***************************************************************************

loc_1A542:				; CODE XREF: dseg:2A4DF  j		 /* DOS offset ---> 11C0:2 */
; game_advice_rumors_output+20  p ...
mov	al, [bp+0Ah]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1A54A:				; CODE XREF: Q_A5EC+126  p		 /* DOS offset ---> 11C0:A */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  9Ah	;   *
db  90h	;   *
db    2
db 0B5h	;   *
db    4
db  8Ah	;   *
db  5Eh	; ^
db    8
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db 0FFh
db 0B7h	;   *
db  58h	; X
db  49h	; I
db  8Bh	;   *
db  46h	; F
db    6
db    5
db  1Ch
db    0
db  50h	; P
db 0B8h	;   *
db    3
db  49h	; I
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  8Bh	;   *
db 0E5h	;   *
db  80h	;   *
db  7Eh	; ~
unk_1A571	db    8			; CODE XREF: dseg:2A5E0  j
db    3
db  73h	; s
db  41h	; A
db  80h	;   *
db  7Eh	; ~
db  0Ah
db    0
db  75h	; u
db  11h
db  8Ah	;   *
db  46h	; F
db  0Ah
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db 0B8h	;   *
db  0Ch
db  49h	; I
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_advice_rumors_output

loc_1A584:				; CODE XREF: game_advice_rumors_output+23  j		 /* DOS offset ---> 11C4:4 */
push	ax
call	far ptr	3EFh:6E8h
; END OF FUNCTION CHUNK	FOR game_advice_rumors_output
; START	OF FUNCTION CHUNK FOR game_advice_doctor_no_doctor_here

loc_1A58A:				; CODE XREF: game_advice_doctor_no_doctor_here+7  j		 /* DOS offset ---> 11C4:A */
jmp	short loc_1A5B4
; END OF FUNCTION CHUNK	FOR game_advice_doctor_no_doctor_here
;     ***************************************************************************
db  8Ah	;   *
db  46h	; F
db  0Ah
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db 0B8h	;   *
db  1Ch
db  49h	; I
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  8Bh	;   *
db 0E5h	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0D8h	;   *
db    1
db  42h	; B
db    5
db  8Bh	;   *
db 0E5h	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db  0Bh
db 0B8h	;   *
db  35h	; 5
db  49h	; I
db  50h	; P
db  9Ah	;   *
unk_1A5B0	db 0C0h	;   *		; CODE XREF: game_advice_rumors_output+B  j
db    6
db 0EFh	;   *
db    3
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_advice_doctor_no_doctor_here

loc_1A5B4:				; CODE XREF: game_advice_doctor_no_doctor_here:loc_1A58A  j		 /* DOS offset ---> 11C7:4 */
mov	sp, bp
push	cs
call	loc_1A4F8
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_advice_doctor_no_doctor_here
;     ***************************************************************************

loc_1A5BE:				; CODE XREF: Q_A5EC+114  p		 /* DOS offset ---> 11C7:E */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  56h	; V
db  8Ah	;   *
db  46h	; F
db    8
db  8Bh	;   *
db  76h	; v
db  0Ah
db  81h	;   *
db 0E6h	;   *
db 0FFh
db    0
db  8Bh	;   *
db  5Eh	; ^
db    6
db    0
db  40h	; @
db    4
db  80h	;   *
db  78h	; x
db    4
db  64h	; d
db  76h	; v
db  0Eh
db  8Bh	;   *
unk_1A5D9	db  76h	; v		; CODE XREF: dseg:2A5A3  j dseg:2A5B7  j
db  0Ah
db  81h	;   *
db 0E6h	;   *
db 0FFh
db    0
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0C6h	;   *
db  40h	; @
unk_1A5E4	db    4			; CODE XREF: game_advice_rumors_output+52  j
; dseg:2A5D7  j
db  64h	; d
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Q_A5EC		proc far		; CODE XREF: game_advice_rumors_output-FD07  p
; dseg:2A5E2  j

var_6		= byte ptr -6
var_4		= byte ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= byte ptr  0Ah

push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	al, [bp+arg_4]
sub	ah, ah
or	ax, ax

loc_1A5FA:				; CODE XREF: game_advice_rumors_output+68  j		 /* DOS offset ---> 11CB:A */
jz	short loc_1A608
dec	ax
jz	short loc_1A60E
dec	ax

loc_1A600:				; CODE XREF: dseg:2A6B9  j		 /* DOS offset ---> 11CC:0 */
jz	short loc_1A614
dec	ax
jz	short loc_1A61A
jmp	short loc_1A61E
;     ***************************************************************************
nop

loc_1A608:				; CODE XREF: Q_A5EC:loc_1A5FA  j		 /* DOS offset ---> 11CC:8 */
mov	[bp+var_6], 1
jmp	short loc_1A61E
;     ***************************************************************************

loc_1A60E:				; CODE XREF: Q_A5EC+11  j		 /* DOS offset ---> 11CC:E */
; game_advice_rumors_output+7E  j
mov	[bp+var_6], 2
jmp	short loc_1A61E
;     ***************************************************************************

loc_1A614:				; CODE XREF: Q_A5EC:loc_1A600  j		 /* DOS offset ---> 11CD:4 */
mov	[bp+var_6], 3
jmp	short loc_1A61E
;     ***************************************************************************

loc_1A61A:				; CODE XREF: Q_A5EC+17  j		 /* DOS offset ---> 11CD:A */
mov	[bp+var_6], 5

loc_1A61E:				; CODE XREF: Q_A5EC+19  j Q_A5EC+20  j ...		 /* DOS offset ---> 11CD:E */
mov	ax, 4960h
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax

loc_1A62A:				; CODE XREF: game_advice_rumors_output+94  j		 /* DOS offset ---> 11CE:A */
; game_advice_rumors_output+9A  j
sub	al, al
push	ax

loc_1A62D:				; CODE XREF: dseg:2A629  j		 /* DOS offset ---> 11CE:D */
mov	al, 1
push	ax

loc_1A630:				; CODE XREF: dseg:2A6AE  j		 /* DOS offset ---> 11CF:0 */
push	[bp+arg_0]
push	cs
call	near ptr Q_A49E
add	sp, 2
push	ax
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
mov	al, [bp+var_6]
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	[bp+var_2], ax

loc_1A653:				; CODE XREF: game_advice_rumors_output+C2  j		 /* DOS offset ---> 11D1:3 */
or	ax, ax
jz	short loc_1A61E
sub	ax, ax
push	ax
mov	cx, 8
push	cx
mov	cx, 20
push	cx
mov	cx, 160
push	cx

loc_1A666:				; CODE XREF: game_advice_rumors_output+D8  j		 /* DOS offset ---> 11D2:6 */
mov	cx, 37
push	cx

loc_1A66A:				; CODE XREF: game_advice_rumors_output+16F  p		 /* DOS offset ---> 11D2:A */
; game_advice_rumors_output+1CB  p ...
call	far ptr	juqiang_draw_shape_to_video_buffer ;JUQIANG: cs:ip is 76c:378	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
mov	ax, [bp+var_2]
add	ax, 1Ch
push	ax
mov	ax, 496Dh
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	3EFh:0A24h

loc_1A68A:				; CODE XREF: game_advice_rumors_output+159  j		 /* DOS offset ---> 11D4:A */
or	ax, ax
jz	short loc_1A61E
mov	bx, [bp+var_2]
mov	byte ptr [bx+0Bh], 100
mov	si, [bp+arg_2]
mov	al, [si+1]
push	ax

loc_1A69C:		 /* DOS offset ---> 11D5:C */
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2

loc_1A6A4:				; CODE XREF: game_advice_rumors_output+14D  j		 /* DOS offset ---> 11D6:4 */
add	al, 5
push	ax

loc_1A6A7:				; CODE XREF: dseg:2A65A  j dseg:2A66E  j ...		 /* DOS offset ---> 11D6:7 */
mov	al, [bp+arg_4]
push	ax
push	[bp+var_2]
push	cs

loc_1A6AF:				; CODE XREF: dseg:2A62B  j		 /* DOS offset ---> 11D6:F */
call	loc_1A514
add	sp, 6
mov	[bp+var_4], al
mov	al, [bp+arg_4]

loc_1A6BB:				; CODE XREF: dseg:2A6B7  j		 /* DOS offset ---> 11D7:B */
sub	ah, ah

loc_1A6BD:				; CODE XREF: dseg:2A6A5  j		 /* DOS offset ---> 11D7:D */
or	ax, ax
jl	short loc_1A706
dec	ax
jle	short loc_1A6F4
dec	ax
jz	short loc_1A6CC
dec	ax
jz	short loc_1A6EA
jmp	short loc_1A706
;     ***************************************************************************

loc_1A6CC:				; CODE XREF: Q_A5EC+D9  j		 /* DOS offset ---> 11D8:C */
; game_advice_rumors_output+125  j ...
mov	bx, [bp+arg_0]
mov	bx, [bx]
mov	al, [bx+0Fh]
sub	ah, ah

loc_1A6D6:				; CODE XREF: dseg:2A6BC  j		 /* DOS offset ---> 11D9:6 */
mov	bx, [bp+var_2]

loc_1A6D9:				; CODE XREF: game_advice_rumors_output+10B  j		 /* DOS offset ---> 11D9:9 */
; game_advice_rumors_output+118  j
mov	cl, [bx+0Fh]
sub	ch, ch
add	ax, cx
cwd
sub	ax, dx
sar	ax, 1

loc_1A6E5:				; CODE XREF: game_advice_rumors_output+FE  j		 /* DOS offset ---> 11DA:5 */
mov	[bx+0Fh], al
jmp	short loc_1A6F4
;     ***************************************************************************

loc_1A6EA:				; CODE XREF: Q_A5EC+DC  j		 /* DOS offset ---> 11DA:A */
mov	bx, [bp+var_2]
or	byte ptr [bx+2], 40h
jmp	short loc_1A706
;     ***************************************************************************
nop

loc_1A6F4:				; CODE XREF: Q_A5EC+D6  j Q_A5EC+FC  j		 /* DOS offset ---> 11DB:4 */
mov	al, [bp+arg_4]
push	ax

loc_1A6F8:		 /* DOS offset ---> 11DB:8 */
mov	al, [bp+var_4]
push	ax
push	[bp+var_2]
push	cs
call	loc_1A5BE
add	sp, 6

loc_1A706:				; CODE XREF: Q_A5EC+D3  j Q_A5EC+DE  j ...		 /* DOS offset ---> 11DC:6 */
mov	al, [bp+var_4]
push	ax
mov	al, [bp+arg_4]
push	ax
push	[bp+var_2]
push	cs
call	loc_1A54A
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
Q_A5EC		endp

;     ***************************************************************************
nop

loc_1A71E:				; CODE XREF: game_advice_rumors_output-FCFA  p		 /* DOS offset ---> 11DD:E */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  8Bh	;   *
db  5Eh	; ^
db    6
db  80h	;   *
db  4Fh	; O
unk_1A726	db    7			; CODE XREF: dseg:3AF23  p
db  40h	; @
db 0B8h	;   *
db  7Ah	; z
db  49h	; I
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  8Bh	;   *
db 0E5h	;   *
db  0Eh
db 0E8h	;   *
db 0C1h	;   *
db 0FDh	;   *
db 0B0h	;   *
db  1Eh
db  50h	; P
db  9Ah	;   *
db  7Ch	; |
unk_1A73C	db    0			; CODE XREF: dseg:2A71C  j
db  7Ch	; |
db    5
;     ***************************************************************************

loc_1A73F:				; CODE XREF: dseg:2A73A  j		 /* DOS offset ---> 11DF:F */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1A744:				; CODE XREF: dseg:A89A  p		 /* DOS offset ---> 11E0:4 */
; game_advice_rumors_output+177  j
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0C6h	;   *
db  47h	; G
db    6
db  64h	; d
db  8Bh	;   *
db  1Fh
db 0C6h	;   *
db  47h	; G
db    6
db  64h	; d
db 0B8h	;   *
db 0A2h	;   *
db  49h	; I
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  8Bh	;   *
db 0E5h	;   *
db  0Eh
db 0E8h	;   *
db  95h	;   *
db 0FDh	;   *
db 0B0h	;   *
db  1Eh
db  50h	; P
db  9Ah	;   *
db  7Ch	; |
db    0
db  7Ch	; |
db    5
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
mov	al, 10h
;     ***************************************************************************
db  50h	; P
db  9Ah	;   *
db 0FAh	;   *
db    0
db  7Ch	; |
db    5
;     ***************************************************************************

loc_1A778:				; CODE XREF: dseg:2A7E6  p dseg:2A83F  p		 /* DOS offset ---> 11E3:8 */
add	sp, 2
;     ***************************************************************************
db  8Ah	;   *
db 0C8h	;   *
db 0B8h	;   *
db    1
db    0
db 0D3h	;   *
db 0E0h	;   *
db  85h	;   *
db    6
db 0EAh	;   *
db  33h	; 3
db  74h	; t
db 0E8h	;   *
db  8Ah	;   *
db 0C1h	;   *
db 0CBh	;   *
;     ***************************************************************************
nop

loc_1A78C:				; CODE XREF: dseg:A83F  p		 /* DOS offset ---> 11E4:C */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db 0B8h	;   *
db    7
db    0
db  50h	; P
db 0B8h	;   *
db  3Ah	; :
db    0
db  50h	; P
db 0B8h	;   *
db  2Ah	; *
db    0
db  50h	; P
db 0B8h	;   *
db    3
unk_1A7A0	db    0			; CODE XREF: game_advice_rumors_output+1D3  j
db  50h	; P
db 0B8h	;   *
db  25h	; %
db    0
db  50h	; P
db  9Ah	;   *
db  78h	; x
db    3
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ah
db  8Bh	;   *
db  46h	; F
db    6
db  40h	; @
db  40h	; @
db  50h	; P
db 0B8h	;   *
db 0D1h	;   *
db  49h	; I
db  50h	; P
;     ***************************************************************************

loc_1A7B8:				; CODE XREF: dseg:2A7B0  j		 /* DOS offset ---> 11E7:8 */
call	far ptr	3EFh:6E8h
add	sp, 4

loc_1A7C0:				; CODE XREF: dseg:2A790  j dseg:2A7A7  j ...		 /* DOS offset ---> 11E8:0 */
cmp	byte ptr [bp+8], 6
jbe	short loc_1A7D4

loc_1A7C6:				; CODE XREF: dseg:2A9A8  p		 /* DOS offset ---> 11E8:6 */
cmp	byte ptr [bp+8], 0Dh
;     ***************************************************************************
db  73h	; s
db    8
db 0C7h	;   *
db  46h	; F
db 0FEh	;   *
db    5
db    0
db 0EBh	;   *
unk_1A7D2	db    6			; CODE XREF: dseg:2A804  j
;     ***************************************************************************
nop

loc_1A7D4:				; CODE XREF: dseg:A7C4  j		 /* DOS offset ---> 11E9:4 */
mov	word ptr [bp-2], 4
push	word ptr [bp-2]
mov	bl, [bp+8]
sub	bh, bh
shl	bx, 1
push	word ptr [bx+49ECh]
mov	ax, 18h
push	ax
mov	ax, 150h
push	ax
call	far ptr	4B5h:1CEh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1A7F8:				; CODE XREF: unkfunc_A8DA+6F  p		 /* DOS offset ---> 11EB:8 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
unk_1A7FA	db 0ECh	;   *		; CODE XREF: dseg:2A7EE  j
db  83h	;   *
db 0ECh	;   *
db    6
db  56h	; V
db  0Eh
db 0E8h	;   *
db  6Dh	; m
db 0FFh
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db 0B1h	;   *
db  18h
;     ***************************************************************************

loc_1A808:				; CODE XREF: dseg:2A7F8  j		 /* DOS offset ---> 11EC:8 */
mul	cl

loc_1A80A:				; CODE XREF: game_advice_rumors_output+22F  j		 /* DOS offset ---> 11EC:A */
add	ax, 472Ch
mov	[bp-6],	ax

loc_1A810:				; CODE XREF: dseg:2A7D0  j dseg:2A806  j		 /* DOS offset ---> 11ED:0 */
mov	si, ax
call	far ptr	4B5h:282h
call	far ptr	4B5h:290h
lea	ax, [si+2]
push	ax
mov	bx, [bp+6]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 4A0Ch
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
push	cs
call	loc_1A4F8
mov	al, [bp-2]
push	ax
push	si
push	cs
call	loc_1A78C
add	sp, 4
sub	ax, ax
push	ax
mov	ax, 1Ch
push	ax
mov	ax, 29h	; ')'
push	ax
mov	ax, 0A8h ; '  *'
push	ax
mov	ax, 26h	; '&'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah

loc_1A860:				; CODE XREF: dseg:2A847  j dseg:2A85B  j		 /* DOS offset ---> 11F2:0 */
mov	al, [si]
mov	[bp-4],	al
sub	ah, ah
or	ax, ax
jl	short loc_1A8A0
sub	ax, 3
jle	short loc_1A878
dec	ax
jz	short loc_1A88C
dec	ax
jz	short loc_1A896
jmp	short loc_1A8A0
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_advice_rumors_output

loc_1A878:				; CODE XREF: dseg:A86E  j		 /* DOS offset ---> 11F3:8 */
; game_advice_rumors_output+29B  j
mov	al, [bp-4]
push	ax
push	word ptr [bp-6]
push	word ptr [bp+6]
push	cs
call	near ptr Q_A5EC
add	sp, 6
jmp	short loc_1A8A0
; END OF FUNCTION CHUNK	FOR game_advice_rumors_output
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_advice_rumors_output

loc_1A88C:				; CODE XREF: dseg:A871  j		 /* DOS offset ---> 11F4:C */
; game_advice_rumors_output+2FA  j
push	word ptr [bp+6]
push	cs
call	loc_1A71E
jmp	short loc_1A89D
; END OF FUNCTION CHUNK	FOR game_advice_rumors_output
;     ***************************************************************************
nop

loc_1A896:				; CODE XREF: dseg:A874  j		 /* DOS offset ---> 11F5:6 */
push	word ptr [bp+6]
push	cs
call	loc_1A744
; START	OF FUNCTION CHUNK FOR game_advice_rumors_output

loc_1A89D:				; CODE XREF: game_advice_rumors_output-FCF7  j		 /* DOS offset ---> 11F5:D */
add	sp, 2

loc_1A8A0:				; CODE XREF: dseg:A869  j dseg:A876  j ...		 /* DOS offset ---> 11F6:0 */
mov	cl, [bp-2]
mov	ax, 1
shl	ax, cl
not	ax

loc_1A8AA:				; CODE XREF: dseg:2A831  j		 /* DOS offset ---> 11F6:A */
and	word ptr loc_133E6+4, ax
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_advice_rumors_output
;     ***************************************************************************
nop

loc_1A8B4:				; CODE XREF: unkfunc_A8DA+11  p		 /* DOS offset ---> 11F7:4 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db 0C6h	;   *
db  46h	; F
db 0FEh	;   *
db    0
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  47h	; G
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  0Bh
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_advice_rumors_output

loc_1A8C8:				; CODE XREF: game_advice_rumors_output-FCB9  j		 /* DOS offset ---> 11F8:8 */
inc	byte ptr [bp-2]
mov	bx, ax
mov	ax, [bx]

loc_1A8CF:				; CODE XREF: game_advice_rumors_output+329  j		 /* DOS offset ---> 11F8:F */
or	ax, ax
jnz	short loc_1A8C8
mov	al, [bp-2]
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_advice_rumors_output

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

unkfunc_A8DA	proc far

var_4		= byte ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 4

loc_1A8E0:				; CODE XREF: game_advice_rumors_output+300  j		 /* DOS offset ---> 11FA:0 */
cmp	byte ptr loc_133EB+1, 10h
jz	short loc_1A950
push	[bp+arg_0]
push	cs
call	loc_1A8B4
add	sp, 2
mov	[bp+var_4], al
push	[bp+arg_2]

loc_1A8F7:				; CODE XREF: game_advice_rumors_output+31A  j		 /* DOS offset ---> 11FB:7 */
; game_advice_rumors_output+343  j ...
call	far ptr	525h:64h
add	sp, 2
cmp	al, 9
jnz	short loc_1A908
mov	bl, 2
jmp	short loc_1A932
;     ***************************************************************************
nop

loc_1A908:				; CODE XREF: unkfunc_A8DA+27  j		 /* DOS offset ---> 11FC:8 */
mov	al, byte ptr loc_133EB+1
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 4
mov	cl, [bp+var_4]
sub	ch, ch
cmp	ax, cx
jg	short loc_1A930
mov	al, cl
sub	ah, ah
dec	ax
mov	cx, 3
cwd
idiv	cx
mov	bx, dx
jmp	short loc_1A932
;     ***************************************************************************

loc_1A930:				; CODE XREF: unkfunc_A8DA+45  j		 /* DOS offset ---> 11FF:0 */
mov	bl, 3

loc_1A932:				; CODE XREF: unkfunc_A8DA+2B  j		 /* DOS offset ---> 11FF:2 */
; unkfunc_A8DA+54  j
sub	bh, bh
mov	al, [bx+4A4Ah]	; always rewards province 10
push	ax
call	far ptr	57Ch:0DCh ; s_589C

loc_1A93E:				; CODE XREF: game_advice_rumors_output+37F  j		 /* DOS offset ---> 11FF:E */
add	sp, 2
or	ax, ax
jz	short loc_1A950

loc_1A945:				; CODE XREF: dseg:2A85D  j		 /* DOS offset ---> 1200:5 */
push	[bp+arg_0]
push	cs
call	loc_1A7F8
inc	byte ptr loc_133EB+1

loc_1A950:				; CODE XREF: unkfunc_A8DA+B  j		 /* DOS offset ---> 1201:0 */
; unkfunc_A8DA+69  j
mov	sp, bp
pop	bp
retf
unkfunc_A8DA	endp


;     *************** S U B	R O U T	I N E     ***************************************


game_quit_execute proc far		; CODE XREF: game_start_quit_game+2A  p
call	far ptr	4B5h:54h
call	far ptr	0:15B3h
test	byte_1339C, 2
jnz	short loc_1A991
mov	ax, 4
push	ax
mov	ax, 0FA9Ah
sub	dx, dx
push	dx

loc_1A96F:				; CODE XREF: game_advice_rumors_output+3B2  j		 /* DOS offset ---> 1202:F */
push	ax
mov	ax, 86
push	ax
mov	ax, 192
push	ax
call	far ptr	4B5h:182h ; s_4B58
add	sp, 0Ah
call	far ptr	4B5h:8

loc_1A985:				; CODE XREF: game_advice_rumors_output+567  p		 /* DOS offset ---> 1204:5 */
mov	ax, 40
push	ax
call	far ptr	57Ch:0AAh
add	sp, 2

loc_1A991:				; CODE XREF: game_quit_execute+F  j		 /* DOS offset ---> 1205:1 */
call	far ptr	677h:0B2h
mov	ax, 3
push	ax
call	far ptr	0:0E66h
add	sp, 2

loc_1A9A2:				; CODE XREF: game_advice_rumors_output+416  j		 /* DOS offset ---> 1206:2 */
call	far ptr	0:3689h
retf
game_quit_execute endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_sub_3 proc far	; CODE XREF: game_start_new_game+B7  p  /* DOS offset ---> 1206:8 */

var_4		= byte ptr -4
var_2		= byte ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db 0C6h	;   *
db  46h	; F
db 0FEh	;   *
unk_1A9B1	db    0			; CODE XREF: game_advice_rumors_output+422  j
db  80h	;   *
db  3Eh	; >
db 0EFh	;   *
db  4Ch	; L
db    0
db  74h	; t
db  46h	; F
db  8Ah	;   *
db  1Eh
db 0EEh	;   *
db  4Ch	; L
db  2Ah	; *
db 0FFh
db  8Ah	;   *
db  87h	;   *
unk_1A9C1	db 0E7h	;   *		; CODE XREF: game_advice_rumors_output+432  j
db  4Ch	; L
db  88h	;   *
db  46h	; F
db 0FCh	;   *
;     ***************************************************************************

loc_1A9C6:				; CODE XREF: game_start_new_game_sub_3+55  j		 /* DOS offset ---> 1208:6 */
mov	bl, [bp+var_2]

loc_1A9C9:				; CODE XREF: dseg:2A97B  j dseg:2A985  j ...		 /* DOS offset ---> 1208:9 */
sub	bh, bh
mov	al, [bx+4CF2h]
cmp	[bp+var_4], al

loc_1A9D2:				; CODE XREF: game_advice_rumors_output+444  j		 /* DOS offset ---> 1209:2 */
jnz	short loc_1A9E2
mov	al, bl
inc	al
mov	byte_1336F, al  ;JUQIANG al=1, [336f], unknown
inc	byte_10047
jmp	short loc_1A9F4
;     ***************************************************************************
nop

loc_1A9E2:				; CODE XREF: game_start_new_game_sub_3:loc_1A9D2  j		 /* DOS offset ---> 120A:2 */
mov	al, [bp+var_2]
inc	al
mov	bl, [bp+var_2]
sub	bh, bh
mov	bl, [bx+4CF2h]
mov	[bx+335Fh], al

loc_1A9F4:				; CODE XREF: game_start_new_game_sub_3+37  j		 /* DOS offset ---> 120B:4 */
inc	[bp+var_2]
mov	al, byte_14CEF
cmp	[bp+var_2], al
jb	short loc_1A9C6
mov	sp, bp
pop	bp
retf
game_start_new_game_sub_3 endp

;     ***************************************************************************
nop

loc_1AA04:				; CODE XREF: dseg:AB5A  p		 /* DOS offset ---> 120C:4 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db 0A0h	;   *
db  94h	;   *
db 0CEh	;   *
db  50h	; P
db 0A0h	;   *
db  95h	;   *
db 0CEh	;   *
db  50h	; P
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_advice_rumors_output

loc_1AA12:				; CODE XREF: game_advice_rumors_output+456  j		 /* DOS offset ---> 120D:2 */
call	far ptr	0C49h:2DEh
add	sp, 4
mov	[bp-4],	al
mov	bx, [bp+6]
mov	al, [bx+5]
cmp	[bx+4],	al
jbe	short loc_1AA2E
mov	ax, 1
jmp	short loc_1AA30
; END OF FUNCTION CHUNK	FOR game_advice_rumors_output
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_advice_rumors_output

loc_1AA2E:				; CODE XREF: game_advice_rumors_output-FB64  j		 /* DOS offset ---> 120E:E */
sub	ax, ax

loc_1AA30:				; CODE XREF: game_advice_rumors_output-FB5F  j		 /* DOS offset ---> 120F:0 */
mov	[bp-2],	ax
cmp	ax, 1
sbb	al, al
and	al, 6
add	al, 0C0h ; '  *'
add	[bp-4],	al
mov	al, byte_1CB70
cmp	[bp-4],	al
jnz	short loc_1AA58
cmp	word ptr [bp-2], 0
jz	short loc_1AA54

loc_1AA4D:				; CODE XREF: game_advice_rumors_output+485  j		 /* DOS offset ---> 1210:D */
add	byte ptr [bp-4], 6
jmp	short loc_1AA58
; END OF FUNCTION CHUNK	FOR game_advice_rumors_output
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_advice_rumors_output

loc_1AA54:				; CODE XREF: game_advice_rumors_output-FB3F  j		 /* DOS offset ---> 1211:4 */
sub	byte ptr [bp-4], 6

loc_1AA58:				; CODE XREF: game_advice_rumors_output-FB45  j		 /* DOS offset ---> 1211:8 */
; game_advice_rumors_output-FB39  j
mov	al, [bp-4]
sub	ah, ah
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_advice_rumors_output
;     ***************************************************************************
nop

loc_1AA62:				; CODE XREF: dseg:AB2E  p		 /* DOS offset ---> 1212:2 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  80h	;   *
db  7Eh	; ~
db    6
db    1
db  1Ah
db 0C0h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_advice_rumors_output

loc_1AA6E:				; CODE XREF: game_advice_rumors_output+418  j		 /* DOS offset ---> 1212:E */
; game_advice_rumors_output+424  j ...
neg	al
mov	[bp-2],	al

loc_1AA73:				; CODE XREF: game_advice_rumors_output+586  p		 /* DOS offset ---> 1213:3 */
; game_advice_rumors_output+597  p
cmp	byte ptr [bp+6], 2
jz	short loc_1AABE
mov	bl, [bp+6]

loc_1AA7C:				; CODE XREF: game_advice_rumors_output+503  j		 /* DOS offset ---> 1213:C */
sub	bh, bh
mov	al, [bx-34E6h]
mov	bl, [bp-2]
cmp	al, [bx-34E6h]
jz	short loc_1AABE
mov	bl, [bp+6]
mov	al, [bx-34E6h]

loc_1AA92:				; CODE XREF: game_advice_rumors_output+4FA  j		 /* DOS offset ---> 1215:2 */
mov	bl, [bp-2]
cmp	al, [bx-34E6h]

loc_1AA99:				; CODE XREF: game_advice_rumors_output+4F1  j		 /* DOS offset ---> 1215:9 */
; game_advice_rumors_output+505  j
jbe	short loc_1AAAC
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 3Ch	; '<'
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1AAAC:				; CODE XREF: game_advice_rumors_output:loc_1AA99  j		 /* DOS offset ---> 1216:C */
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2

loc_1AAB7:				; CODE XREF: game_advice_rumors_output+524  j		 /* DOS offset ---> 1217:7 */
add	al, 50h	; 'P'
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_advice_rumors_output
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR game_advice_rumors_output

loc_1AABE:				; CODE XREF: game_advice_rumors_output-FB13  j		 /* DOS offset ---> 1217:E */
; game_advice_rumors_output-FB01  j
mov	al, 0Ah

loc_1AAC0:				; DATA XREF: s_1E9BE+75  r		 /* DOS offset ---> 1218:0 */
push	ax

loc_1AAC1:				; DATA XREF: s_1E9BE+7A  r		 /* DOS offset ---> 1218:1 */
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	al, 46h	; 'F'
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR game_advice_rumors_output
;     ***************************************************************************
db  55h	; U ; push bp   JUQIANG /* DOS offset ---> 1201: 17c
db  8Bh	;   *
db 0ECh	;   *   move bp,sp
db  83h	;   *
db 0ECh	;   *
db    4         sub sp,4
db  56h	; V     push si
db 0BBh	;   *
db 0D7h	;   *
db  2Ah	; *     mov bx,2ad7
db  89h	;   *
db  5Eh	; ^
db 0FEh	;   *   mov [bp-2],bx
db  8Bh	;   *
db  76h	; v
db    6         mov si,[bp+6]   JUQIANG: si=2b02, ruler's offset
db  89h	;   *
db  1Ch         mov [si],bx     JUQIANG: ruler's offset set to base+0
db 0C7h	;   *
db    7
db    0
db    0         mov word ptr [bx],0 JUQIANG: unknown
db 0B8h	;   *
db  2Eh	; .
db  53h	; S     mov ax,532e
db  50h	; P     push ax
db 0B8h	;   *
db 0F3h	;   *
db  2Ah	; *     mov ax,2af3
db  50h	; P     push ax
db  9Ah	;   *
db 0BEh	;   *
db    0
db  61h	; a
db    5         ?????
db  83h	;   *
db 0C4h	;   *
db    4         add sp,4
db  8Ah	;   *
db  44h	; D
db  0Fh         mov al,[si+f]   si->2b02+0x0f
db 0A2h	;   *
db 0E6h	;   *
db  2Ah	; *     mov [2ae6],al   xiangxing
db 0B8h	;   *
db    0
db  80h	;   *   mov ax,8000h
db  89h	;   *
db  44h	; D
db  10h         mov [si+10],ax  2b02+10, xueyuan
db 0A3h	;   *
db 0E7h	;   *
unk_1AB00	db  2Ah	; *		; CODE XREF: game_advice_rumors_output+53B  j mov [2ae7],ax
db 0C6h	;   *
db    6
db 0E2h	;   *
db  2Ah	; *     mov [2ae7], ax  xueyuan 8000
db  64h	; d     mov byte ptr[2ae2],100
db 0C6h	;   *
db    6
db 0E3h	;   *
unk_1AB09	db  2Ah	; *		; CODE XREF: game_advice_rumors_output+5AC  j
db    1         mov byte ptr[2ae2],1    unknown
db 0C6h	;   *
db  46h	; F
db 0FCh	;   *
db    0         mov byte ptr[bp-4],1    unknown
;     ***************************************************************************

loc_1AB0F:				; CODE XREF: dseg:AB3E  j		 /* DOS offset ---> 121C:F */
mov	al, 15h
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 50h	; 'P'
mov	bl, [bp-4]
sub	bh, bh
add	bx, [bp-2]
mov	[bx+7],	al
mov	al, [bp-4]
push	ax
mov	si, bx
push	cs
call	loc_1AA62
add	sp, 2
mov	[si+4],	al

loc_1AB37:				; CODE XREF: game_advice_rumors_output+58E  j		 /* DOS offset ---> 121F:7 */
; game_advice_rumors_output+59F  j
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 3
jb	short loc_1AB0F
mov	bx, [bp-2]
mov	byte ptr [bx+0Ah], 0Fh

loc_1AB47:				; CODE XREF: game_advice_rumors_output+54A  j		 /* DOS offset ---> 1220:7 */
; game_advice_rumors_output+563  j ...
mov	word ptr [bx+12h], 3E8h
mov	al, byte ptr year_value
sub	al, byte_1CE95
add	al, 2
mov	[bx+19h], al
push	bx
push	cs
call	loc_1AA04

loc_1AB5D:				; CODE XREF: game_advice_rumors_output+52A  j		 /* DOS offset ---> 1221:D */
add	sp, 2
mov	bx, [bp-2]
mov	[bx+1Ah], ax
mov	si, [bp+6]
mov	al, [si+0Fh]
mov	[bx+0Fh], al
mov	word ptr [bx+14h], 1F4h

loc_1AB74:		 /* DOS offset ---> 1223:4 */
mov	byte ptr [bx+16h], 32h ; '2'
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_sub_2 proc far	; CODE XREF: game_start_new_game_sub+3D  p

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= byte ptr -4
var_2		= word ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    8
db  56h	; V
db 0BBh	;   *
db    2
db  2Bh	; +
db  89h	;   *
db  5Eh	; ^
db 0FEh	;   *
db 0C7h	;   *
db    7
db    0
unk_1AB8E	db    0			; CODE XREF: game_advice_check_rumors_no_travelers+7  j
db 0B0h	;   *
db  23h	; #
db 0F6h	;   *
db  26h	; &
db  1Fh
db 0CBh	;   *
db    5
db 0C4h	;   *
db  2Dh	; -
db  89h	;   *
db  46h	; F
db 0F8h	;   *
db  8Bh	;   *
db 0D8h	;   *
db 0C7h	;   *
db    7
db    0
db    0
db 0BBh	;   *
db  9Bh	;   *
db  2Dh	; -
db  89h	;   *
db  5Eh	; ^
db 0FAh	;   *
db 0C7h	;   *
db    7
db    2
db  2Bh	; +
db  8Bh	;   *
db  46h	; F
db 0F8h	;   *
db 0A3h	;   *
db  9Dh	;   *
db  2Dh	; -
db  8Ah	;   *
db  0Eh
db  1Dh
db 0CBh	;   *
db  88h	;   *
unk_1ABB6	db  0Eh			; CODE XREF: game_advice_check_rumors_sub+1F  j
db  9Dh	;   *
db  33h	; 3
db  8Ah	;   *
db  0Eh
db 0EAh	;   *
db 0CAh	;   *
db  88h	;   *
db  0Eh
db  9Eh	;   *
db  33h	; 3
db  8Bh	;   *
db 0D8h	;   *
db 0C6h	;   *
db  47h	; G
db  10h
db  0Fh
db 0C7h	;   *
db  47h	; G
db    2
db    2
db  2Bh	; +
db 0B8h	;   *
db  20h
db  53h	; S
db  50h	; P
;     ***************************************************************************

loc_1ABD0:				; CODE XREF: game_advice_check_rumors_sub+16  j		 /* DOS offset ---> 1229:0 */
mov	ax, 2B1Eh
push	ax

loc_1ABD4:				; CODE XREF: dseg:2ABC3  j		 /* DOS offset ---> 1229:4 */
; game_advice_check_rumors_sub+21  j
call	far ptr	561h:0BEh
add	sp, 4

loc_1ABDC:				; CODE XREF: dseg:2ABB4  j dseg:2ABD2  j		 /* DOS offset ---> 1229:C */
mov	al, byte_1CAEA/* ruler birthday day */
mul	byte_1CB1D/* ruler birthday month */
mov	cx, 65h	; 'e'
sub	dx, dx
div	cx
mov	byte ptr loc_12B11, dl
mov	[bp+var_4], 0

loc_1ABF2:				; CODE XREF: game_start_new_game_sub_2+9E  j		 /* DOS offset ---> 122B:2 */
mov	al, 15h
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; JUQIANG: yili,rende,yewang
add	sp, 2
add	al, 50h	; 'P'

loc_1ABFF:				; DATA XREF: s_6138+1E  r		 /* DOS offset ---> 122B:F */
mov	bl, [bp+var_4]
sub	bh, bh
mov	cx, bx

loc_1AC06:				; CODE XREF: game_advice_check_rumors+1F  j		 /* DOS offset ---> 122C:6 */
add	bx, [bp+var_2]

loc_1AC09:		 /* DOS offset ---> 122C:9 */
mov	[bx+7],	al ; yili
mov	si, cx

loc_1AC0E:		 /* DOS offset ---> 122C:E */
mov	al, [si-34E6h] ; JUQIANG: zhanli/zhili/haozhao
mov	[bx+4],	al ; JUQIANG: bx = 2B02, head of this general
inc	[bp+var_4]
cmp	[bp+var_4], 3 ; JUQIANG [bp-4] is 1
jb	short loc_1ABF2
mov	bx, [bp+var_2] ; JUQIANG: year 188
mov	byte ptr [bx+0Ah], 15 ; JUQIANG: ruler no.
mov	al, byte ptr year_value
sub	al, byte_1CAA0
add	al, 2; JUQIANG: year + 1, changed to 189
mov	[bx+19h], al ;JUQIANG: birth year
mov	word ptr [bx+12h], 10000; JUQIANG: soldiers number
mov	al, byte_1CB70 ; JUQIANG: value is 0xc6, portait offset
sub	ah, ah
mov	[bx+1Ah], ax
mov	al, byte_1CAEA/* ruler birthday day */
mul	byte_1CB1D/* ruler birthday month */
mov	cx, 65h	; 'e'
sub	dx, dx
div	cx
mov	[bx+0Fh], dl;JUQIANG: xiangxing

loc_1AC4F:		 /* DOS offset ---> 1230:F */
mov	word ptr [bx+14h], 5000 ;JUQIANG: weapons
mov	al, 50
mov	[bx+16h], al ;JUQIANG: training
mov	bx, [bp+var_6] ;JUQIANG: bx->2d9b,mapping to save data 2d9b-0x38. Save data 1st addr is 2afc, so 2afc+0x29*15 + 0x38 = 2d9b
mov	[bx+6],	al ; JUQIANG: trust
mov	bx, [bp+var_8] ; JUQIANG: bx->2dc4, ruler's city address
mov	word ptr [bx+8], 2000 ;	CODE XREF: dseg:2ACC0  j JUQIANG: gold
;     ***************************************************************************
db 0C7h	;   *
db  47h	; G
db  0Ah
db  20h
db  4Eh	; N
db 0C7h	;   * 34260~34265: mov word ptr[bx+a] , 20000 JUQIANG: food
db  47h	; G
db  0Ch
db    0
db    0* 34266~34270: mov word ptr[bx+c] , 0
db 0C6h	;
unk_1AC72	db  47h	; G		; CODE XREF: game_advice_doctor_check_sub+9  j
db  17h
db  41h	; A 34270~34273: mov byte ptr[bx+17], 0x41, people loyal
db  80h	;   *
db  3Eh	; >
db  2Eh	; .
db  53h	; S
db    0 ; 34274~ 34278: cmp byte ptr[532e], 0 , value is 0x42
db  74h	; t
db  0Ah ; jz 336
db 0FFh
db  76h	; v
db 0FEh	;   * push [bp-2]
db  0Eh ; push cs
db 0E8h	;   *
db  49h	; I
db 0FEh	;   * call 17c      line 33971  looks like generating follower's yili/rende/yewang
db  83h	;   *
db 0C4h	;   *
db    2 ;   add sp,2
db  5Eh	; ^ offset 336 pop si
db  8Bh	;   *
db 0E5h	;   * mov sp, bp
db  5Dh	; ] pop bp
db 0CBh	;   * retf
game_start_new_game_sub_2 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_sub	proc far	; CODE XREF: game_start_new_game:loc_1B767  p

var_4		= byte ptr -4
var_2		= byte ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db 0C6h	;   *
db  46h	; F
db 0FEh	;   *
db    0
db  80h	;   *
db  3Eh	; >
db 0EFh	;   *
db  4Ch	; L
db    0
db  74h	; t
unk_1AC9C	db  2Fh	; /		; CODE XREF: game_advice_doctor_check+1C  j
db  8Ah	;   *
db  1Eh
db 0EEh	;   *
db  4Ch	; L
db  2Ah	; *
db 0FFh
db  8Ah	;   *
db  87h	;   *
db 0E7h	;   *
db  4Ch	; L
db  88h	;   *
db  46h	; F
db 0FCh	;   *
;     ***************************************************************************

loc_1ACAA:				; CODE XREF: game_start_new_game_sub+35  j		 /* DOS offset ---> 1236:A */
mov	bl, [bp+var_2]
sub	bh, bh
mov	al, [bx+4CF2h]
cmp	[bp+var_4], al
jz	short loc_1ACC8

loc_1ACB8:				; CODE XREF: dseg:2AC9C  j		 /* DOS offset ---> 1237:8 */
inc	[bp+var_2]
mov	al, byte_14CEF
cmp	[bp+var_2], al
jb	short loc_1ACAA

loc_1ACC3:				; CODE XREF: dseg:2ACB7  j		 /* DOS offset ---> 1238:3 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1ACC8:				; CODE XREF: game_start_new_game_sub+2A  j		 /* DOS offset ---> 1238:8 */
push	cs
call	near ptr game_start_new_game_sub_2

loc_1ACCC:				; CODE XREF: dseg:2ACC2  j		 /* DOS offset ---> 1238:C */
mov	sp, bp
pop	bp
retf
game_start_new_game_sub	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_display_scenario proc far
; CODE XREF: game_start_new_game_player_select+197  p

var_2		= byte ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  56h	; V
db  9Ah	;   *
db  44h	; D
db    2
db 0B5h	;   *
db    4
;     ***************************************************************************

loc_1ACDC:				; CODE XREF: dseg:2AD76  j		 /* DOS offset ---> 1239:C */
mov	bl, byte_14CEE
sub	bh, bh
mov	ax, bx
shl	bx, 1

loc_1ACE6:				; CODE XREF: game_advice_advisor_output+70  p		 /* DOS offset ---> 123A:6 */
; game_advice_advisor_output+206  p ...
push	word ptr [bx+4CDAh]
push	ax
mov	ax, 4D9Ah
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
mov	ax, 4DB8h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	[bp+var_2], 0
cmp	byte_14CEF, 0
jnz	short loc_1AD11
jmp	loc_1AD96
;     ***************************************************************************

loc_1AD11:				; CODE XREF: game_start_new_game_display_scenario+3C  j		 /* DOS offset ---> 123D:1 */
; game_start_new_game_display_scenario+C3  j
mov	al, [bp+var_2]
sub	ah, ah
mov	cx, ax
and	al, 0FEh
shl	ax, 1
shl	ax, 1
add	ax, 20h	; ' '
push	ax

loc_1AD22:				; CODE XREF: game_advice_advisor_output+D  j		 /* DOS offset ---> 123E:2 */
mov	al, [bp+var_2]
and	ax, 1
mov	dx, ax
shl	ax, 1
add	ax, dx
shl	ax, 1
add	ax, dx
shl	ax, 1
add	ax, 33h	; '3'
push	ax
mov	si, cx
call	far ptr	3EFh:434h
add	sp, 4
mov	bl, byte_14CEE
sub	bh, bh
mov	al, [bx+4CE7h]
cmp	[si+4CF2h], al
jnz	short loc_1AD5C
mov	ax, 5320h
push	ax
mov	ax, 4DC9h
jmp	short loc_1AD7F
;     ***************************************************************************
nop

loc_1AD5C:				; CODE XREF: game_start_new_game_display_scenario+80  j		 /* DOS offset ---> 1241:C */
mov	bl, [bp+var_2]
sub	bh, bh
mov	bl, [bx+4CF2h]
mov	al, byte_14CEE
sub	ah, ah
mov	cx, ax

loc_1AD6C:				; CODE XREF: dseg:2ACFE  j dseg:2AD12  j ...		 /* DOS offset ---> 1242:C */
shl	ax, 1
add	ax, cx
shl	ax, 1

loc_1AD72:				; CODE XREF: game_advice_advisor_output+BC  j		 /* DOS offset ---> 1243:2 */
shl	ax, 1
add	bx, ax
shl	bx, 1

loc_1AD78:				; CODE XREF: dseg:2AD74  j		 /* DOS offset ---> 1243:8 */
push	word ptr [bx+4CF0h]

loc_1AD7C:				; CODE XREF: dseg:2AD6B  j		 /* DOS offset ---> 1243:C */
mov	ax, 4DD2h

loc_1AD7F:				; CODE XREF: game_start_new_game_display_scenario+89  j		 /* DOS offset ---> 1243:F */
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4

loc_1AD88:				; CODE XREF: dseg:2B5A1  p		 /* DOS offset ---> 1244:8 */
inc	[bp+var_2]
mov	al, byte_14CEF

loc_1AD8E:				; CODE XREF: game_advice_advisor_output+27  j		 /* DOS offset ---> 1244:E */
cmp	[bp+var_2], al
jnb	short loc_1AD96
jmp	loc_1AD11
;     ***************************************************************************

loc_1AD96:				; CODE XREF: game_start_new_game_display_scenario+3E  j		 /* DOS offset ---> 1245:6 */
; game_start_new_game_display_scenario+C1  j
pop	si
mov	sp, bp
pop	bp
retf
game_start_new_game_display_scenario endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_draw_rulers_sub proc far
; CODE XREF: game_start_new_game_draw_rulers+8C  p

var_8		= word ptr -8
var_6		= word ptr -6
arg_0		= byte ptr  6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Ah
db  57h	; W
db  56h	; V
db  8Ah	;   *
db  46h	; F
db    6
db 0B1h	;   *
db    3
db  2Ah	; *
db 0E4h	;   *
db 0F6h	;   *
db 0F1h	;   *
db  8Ah	;   *
db 0C4h	;   *
db  8Bh	;   *
db 0D0h	;   *
db 0B3h	;   *
db  60h	; `
db  8Ah	;   *
db 0C2h	;   *
db 0F6h	;   *
db 0E3h	;   *
db    5
db  50h	; P
db    1
db  89h	;   *
db  46h	; F
db 0FAh	;   *
db  8Ah	;   *
db  46h	; F
db    6
db  2Ah	; *
db 0E4h	;   *
db 0F6h	;   *
db 0F1h	;   *
db  25h	; %
db    1
db    0
db 0B1h	;   *
unk_1ADC8	db    6			; CODE XREF: dseg:2ADC1  j
db 0D3h	;   *
unk_1ADCA	db 0E0h	;   *		; CODE XREF: dseg:2ADC5  j
db    5
db  3Ch	; <
db    0
db  89h	;   *
db  46h	; F
unk_1ADD0	db 0F8h	;   *		; CODE XREF: game_advice_advisor_output+F  j
; game_advice_advisor_output+93  j
db  83h	;   *
db  3Eh	; >
db 0A2h	;   *
db 0CEh	;   *
db    0
;     ***************************************************************************

loc_1ADD6:				; CODE XREF: game_advice_advisor_output+1B1  p		 /* DOS offset ---> 1249:6 */
jz	short loc_1ADF4
mov	ax, 7
push	ax
mov	ax, [bp+var_8]
add	ax, 0Fh
push	ax
mov	ax, [bp+var_6]
add	ax, 10h

loc_1ADE9:				; CODE XREF: game_advice_advisor_output+10F  j		 /* DOS offset ---> 124A:9 */
push	ax
mov	ax, [bp+var_8]
add	ax, 8
push	ax
jmp	short loc_1AE06
;     ***************************************************************************
nop

loc_1ADF4:				; CODE XREF: game_start_new_game_draw_rulers_sub:loc_1ADD6  j		 /* DOS offset ---> 124B:4 */
mov	ax, 7
push	ax
add	ax, [bp+var_8]
push	ax
mov	ax, [bp+var_6]
add	ax, 10h
push	ax

loc_1AE03:				; CODE XREF: game_advice_advisor_output+103  j		 /* DOS offset ---> 124C:3 */
push	[bp+var_8]

loc_1AE06:				; CODE XREF: game_start_new_game_draw_rulers_sub+55  j		 /* DOS offset ---> 124C:6 */
push	[bp+var_6]
call	far ptr	57Ch:0
add	sp, 0Ah
test	byte ptr word_1CEA2, 1

loc_1AE16:				; CODE XREF: game_advice_advisor_output+E2  j		 /* DOS offset ---> 124D:6 */
; game_advice_advisor_output+EF  j
jz	short loc_1AE5E
mov	bl, byte_14CEE
sub	bh, bh
mov	al, [bx+4CE7h]
sub	ah, ah
mov	cl, [bp+arg_0]

loc_1AE27:				; CODE XREF: game_advice_advisor_output+F7  j		 /* DOS offset ---> 124E:7 */
sub	ch, ch
sub	ax, cx
dec	ax
jnz	short loc_1AE34

loc_1AE2E:				; CODE XREF: game_advice_advisor_output+D5  j		 /* DOS offset ---> 124E:E */
mov	bx, 0Fh
jmp	short loc_1AE39
;     ***************************************************************************
nop

loc_1AE34:				; CODE XREF: game_start_new_game_draw_rulers_sub+90  j		 /* DOS offset ---> 124F:4 */
mov	bl, [bp+arg_0]
sub	bh, bh

loc_1AE39:				; CODE XREF: game_start_new_game_draw_rulers_sub+95  j		 /* DOS offset ---> 124F:9 */
mov	al, [bx+48h]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 3B30h
sub	cx, cx
push	cx
push	ax

loc_1AE4E:				; CODE XREF: game_advice_advisor_output+139  j		 /* DOS offset ---> 1250:E */
mov	ax, 2
push	ax
mov	ax, 7
push	ax
mov	ax, [bp+var_8]
add	ax, 0Ch
jmp	short loc_1AEA2
;     ***************************************************************************

loc_1AE5E:				; CODE XREF: game_start_new_game_draw_rulers_sub:loc_1AE16  j		 /* DOS offset ---> 1251:E */
mov	bl, byte_14CEE
sub	bh, bh

loc_1AE64:				; CODE XREF: game_advice_advisor_output+14B  j		 /* DOS offset ---> 1252:4 */
mov	al, [bx+4CE7h]
sub	ah, ah
mov	cl, [bp+arg_0]
sub	ch, ch
sub	ax, cx

loc_1AE71:				; CODE XREF: game_advice_advisor_output+14F  j		 /* DOS offset ---> 1253:1 */
dec	ax
jnz	short loc_1AE7A
mov	bx, 0Fh
jmp	short loc_1AE7F
;     ***************************************************************************
nop

loc_1AE7A:				; CODE XREF: game_start_new_game_draw_rulers_sub+D6  j		 /* DOS offset ---> 1253:A */
mov	bl, [bp+arg_0]
sub	bh, bh

loc_1AE7F:				; CODE XREF: game_start_new_game_draw_rulers_sub+DB  j		 /* DOS offset ---> 1253:F */
mov	al, [bx+48h]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 3AD0h
sub	cx, cx
push	cx
push	ax
mov	ax, 2
push	ax
mov	ax, 7
push	ax
mov	ax, [bp+var_8]
add	ax, 4

loc_1AEA2:				; CODE XREF: game_start_new_game_draw_rulers_sub+C0  j		 /* DOS offset ---> 1256:2 */
shl	ax, 1
push	ax
mov	ax, [bp+var_6]
add	ax, 8
push	ax
call	far ptr	0:5E6h
add	sp, 0Ch
push	[bp+var_8]
mov	ax, [bp+var_6]
cwd
xor	ax, dx
sub	ax, dx
mov	cx, 3
sar	ax, cl
xor	ax, dx
sub	ax, dx
push	ax
call	far ptr	3EFh:434h
add	sp, 4
test	byte ptr word_1CEA2, 1
jz	short loc_1AEE4
mov	al, [bp+arg_0]
sub	ah, ah
inc	ax
push	ax
mov	ax, 4DDBh
jmp	short loc_1AEEE
;     ***************************************************************************

loc_1AEE4:				; CODE XREF: game_start_new_game_draw_rulers_sub+13A  j		 /* DOS offset ---> 125A:4 */
mov	al, [bp+arg_0]
sub	ah, ah
inc	ax
push	ax
mov	ax, 4DE7h

loc_1AEEE:				; CODE XREF: game_start_new_game_draw_rulers_sub+146  j		 /* DOS offset ---> 125A:E */
push	ax
call	far ptr	3EFh:6E8h

loc_1AEF4:				; CODE XREF: dseg:3AEF3  p		 /* DOS offset ---> 125B:4 */
add	sp, 4
cmp	word_1CEA2, 0
jnz	short loc_1AF01
jmp	loc_1AFA2
;     ***************************************************************************

loc_1AF01:				; CODE XREF: game_start_new_game_draw_rulers_sub+160  j		 /* DOS offset ---> 125C:1 */
mov	bl, [bp+arg_0]
sub	bh, bh
cmp	byte ptr [bx+4CFEh], 1
jz	short loc_1AF10
jmp	loc_1AFA2
;     ***************************************************************************

loc_1AF10:				; CODE XREF: game_start_new_game_draw_rulers_sub+16F  j		 /* DOS offset ---> 125D:0 */
push	[bp+var_8]
mov	al, bl
mov	cl, 3
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx

loc_1AF25:				; CODE XREF: game_advice_advisor_output+13B  j		 /* DOS offset ---> 125E:5 */
; game_advice_advisor_output+196  j
shl	ax, 1
shl	ax, 1
add	ax, 2Dh	; '-'
push	ax
mov	si, ax
call	far ptr	3EFh:434h
add	sp, 4

loc_1AF37:				; CODE XREF: game_advice_advisor_output+256  j		 /* DOS offset ---> 125F:7 */
mov	bl, byte_14CEE
sub	bh, bh
mov	ax, bx
shl	bx, 1
add	bx, ax
shl	bx, 1

loc_1AF45:				; CODE XREF: dseg:3AEE4  j		 /* DOS offset ---> 1260:5 */
shl	bx, 1
mov	al, [bp+arg_0]
sub	ah, ah

loc_1AF4C:				; CODE XREF: dseg:3AEEA  j		 /* DOS offset ---> 1260:C */
add	bx, ax
shl	bx, 1
push	word ptr [bx+4CF2h]
mov	di, ax

loc_1AF56:				; CODE XREF: dseg:3AEF6  j		 /* DOS offset ---> 1261:6 */
call	far ptr	60Dh:652h

loc_1AF5B:				; CODE XREF: dseg:3AF0F  j		 /* DOS offset ---> 1261:B */
add	sp, 2
push	ax
mov	ax, 4DF6h
push	ax

loc_1AF63:				; CODE XREF: game_advice_advisor_output+23E  j		 /* DOS offset ---> 1262:3 */
call	far ptr	3EFh:6E8h

loc_1AF68:				; CODE XREF: game_advice_advisor_output+250  j		 /* DOS offset ---> 1262:8 */
add	sp, 4
mov	ax, [bp+var_8]
add	ax, 8
push	ax

loc_1AF72:				; CODE XREF: game_advice_advisor_output+231  j		 /* DOS offset ---> 1263:2 */
push	si

loc_1AF73:				; CODE XREF: dseg:3AF15  j		 /* DOS offset ---> 1263:3 */
call	far ptr	3EFh:434h
add	sp, 4
mov	al, byte_14CEE

loc_1AF7E:				; CODE XREF: dseg:3AF33  j		 /* DOS offset ---> 1263:E */
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
shl	ax, 1
add	di, ax
shl	di, 1

loc_1AF8E:				; CODE XREF: dseg:3AF2D  j		 /* DOS offset ---> 1264:E */
push	word ptr [di+4CF2h]

loc_1AF92:				; CODE XREF: game_advice_advisor_output+2B8  j		 /* DOS offset ---> 1265:2 */
call	far ptr	60Dh:68Ch
add	sp, 2
push	ax
mov	ax, 4E00h
jmp	loc_1B043
;     ***************************************************************************
nop

loc_1AFA2:				; CODE XREF: game_start_new_game_draw_rulers_sub+162  j		 /* DOS offset ---> 1266:2 */
; game_start_new_game_draw_rulers_sub+171  j
mov	bl, [bp+arg_0]
sub	bh, bh
mov	al, [bx+4CFEh]
sub	ah, ah
push	ax
mov	si, bx

loc_1AFB0:				; CODE XREF: dseg:3AFB8  j		 /* DOS offset ---> 1267:0 */
call	far ptr	3EFh:458h
add	sp, 2
push	[bp+var_8]
mov	al, [bp+arg_0]
mov	cl, 3
sub	ah, ah
div	cl
mov	al, ah

loc_1AFC6:				; CODE XREF: game_advice_advisor_output+297  j		 /* DOS offset ---> 1268:6 */
sub	ah, ah

loc_1AFC8:		 /* DOS offset ---> 1268:8 */
mov	cx, ax
shl	ax, 1

loc_1AFCC:				; CODE XREF: game_advice_advisor_output+2B2  j		 /* DOS offset ---> 1268:C */
; dseg:3AF75  j
add	ax, cx
shl	ax, 1

loc_1AFD0:				; CODE XREF: dseg:3AF87  j		 /* DOS offset ---> 1269:0 */
shl	ax, 1

loc_1AFD2:				; CODE XREF: game_advice_advisor_output+28A  j		 /* DOS offset ---> 1269:2 */
add	ax, 2Dh	; '-'
push	ax
mov	di, ax
call	far ptr	3EFh:434h
add	sp, 4
mov	al, byte_14CEE
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
shl	ax, 1
mov	cx, si

loc_1AFF1:				; CODE XREF: dseg:3AFB5  j		 /* DOS offset ---> 126B:1 */
add	si, ax

loc_1AFF3:				; CODE XREF: game_advice_advisor_output+311  j		 /* DOS offset ---> 126B:3 */
shl	si, 1

loc_1AFF5:				; CODE XREF: dseg:3AFD7  j		 /* DOS offset ---> 126B:5 */
push	word ptr [si+4CF2h]
mov	si, cx
call	far ptr	60Dh:652h
add	sp, 2
push	ax
mov	ax, 4E11h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, [bp+var_8]
add	ax, 8
push	ax
push	di
call	far ptr	3EFh:434h

loc_1B01D:				; CODE XREF: game_advice_advisor_output+2F9  j		 /* DOS offset ---> 126D:D */
add	sp, 4
mov	al, byte_14CEE
sub	ah, ah

loc_1B025:				; CODE XREF: game_advice_advisor_output+30B  j		 /* DOS offset ---> 126E:5 */
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1

loc_1B02D:				; CODE XREF: game_advice_advisor_output+2EC  j		 /* DOS offset ---> 126E:D */
shl	ax, 1
add	si, ax
shl	si, 1
push	word ptr [si+4CF2h]

loc_1B037:				; CODE XREF: dseg:3AFBA  j		 /* DOS offset ---> 126F:7 */
call	far ptr	60Dh:68Ch
add	sp, 2

loc_1B03F:				; CODE XREF: game_advice_advisor_output+371  j		 /* DOS offset ---> 126F:F */
push	ax
mov	ax, 4E1Bh

loc_1B043:				; CODE XREF: game_start_new_game_draw_rulers_sub+202  j		 /* DOS offset ---> 1270:3 */
push	ax

loc_1B044:				; CODE XREF: dseg:2B5E0  p		 /* DOS offset ---> 1270:4 */
call	far ptr	3EFh:6E8h
;     ***************************************************************************
db  83h	;   *
db 0C4h	;   *
db    4
db  5Eh	; ^
db  5Fh	; _
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_start_new_game_draw_rulers_sub endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_draw_rulers	proc far
; CODE XREF: game_start_new_game_player_select:loc_1B415  p

var_6		= word ptr -6
var_4		= byte ptr -4
var_2		= word ptr -2
arg_2		= byte ptr  8

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    6
db  9Ah	;   *
db  44h	; D
db    2
db 0B5h	;   *
db    4
db  8Ah	;   *
db  46h	; F
db    6
db 0FEh	;   *
db 0C8h	;   *
db  88h	;   *
db  46h	; F
db 0FCh	;   *
;     ***************************************************************************

loc_1B065:				; CODE XREF: game_start_new_game_draw_rulers+AA  j		 /* DOS offset ---> 1272:5 */
mov	al, [bp+var_4]
mov	cl, 3
sub	ah, ah
div	cl
and	ax, 1
mov	cl, 6

loc_1B073:				; CODE XREF: dseg:2B5FF  p		 /* DOS offset ---> 1273:3 */
shl	ax, cl
add	ax, 8
mov	[bp+var_6], ax
push	ax

loc_1B07C:				; CODE XREF: dseg:3AF83  p		 /* DOS offset ---> 1273:C */
mov	al, [bp+var_4]

loc_1B07F:				; CODE XREF: game_advice_advisor_output+344  j		 /* DOS offset ---> 1273:F */
; game_advice_advisor_output+366  j
mov	cl, 3
sub	ah, ah
div	cl

loc_1B085:				; CODE XREF: game_advice_advisor_output+364  j		 /* DOS offset ---> 1274:5 */
; game_advice_advisor_output+36B  j
mov	al, ah
sub	ah, ah
mov	cx, ax

loc_1B08B:				; CODE XREF: game_advice_advisor_output+337  j		 /* DOS offset ---> 1274:B */
shl	ax, 1
add	ax, cx
shl	ax, 1
shl	ax, 1
add	ax, 29h	; ')'
mov	[bp+var_2], ax
push	ax

loc_1B09A:				; CODE XREF: Flash_AI_Unit+3C  j		 /* DOS offset ---> 1275:A */
call	far ptr	0C49h:576h
add	sp, 4
mov	bl, byte_14CEE
sub	bh, bh
mov	al, [bx+4CE7h]
sub	ah, ah
dec	ax
mov	cl, [bp+var_4]

loc_1B0B2:				; CODE XREF: Flash_AI_Unit+21  j		 /* DOS offset ---> 1277:2 */
sub	ch, ch
cmp	ax, cx
jle	short loc_1B0D9
mov	al, 29h	; ')'
mul	cl
mov	bx, ax

loc_1B0BE:				; CODE XREF: game_advice_advisor_output+3A8  j		 /* DOS offset ---> 1277:E */
; game_advice_advisor_output+3CB  j
mov	bx, [bx+2B34h]

loc_1B0C2:				; CODE XREF: dseg:3B0A2  j		 /* DOS offset ---> 1278:2 */
push	word ptr [bx+1Ah]
mov	ax, [bp+var_6]
add	ax, 8

loc_1B0CB:				; CODE XREF: dseg:3B0A9  j		 /* DOS offset ---> 1278:B */
push	ax
mov	ax, [bp+var_2]
inc	ax
push	ax
call	far ptr	4B5h:6A4h
add	sp, 6

loc_1B0D9:				; CODE XREF: game_start_new_game_draw_rulers+64  j		 /* DOS offset ---> 1279:9 */
mov	al, [bp+var_4]
push	ax
push	cs
call	near ptr game_start_new_game_draw_rulers_sub

loc_1B0E1:				; CODE XREF: game_advice_advisor_output+3C0  j		 /* DOS offset ---> 127A:1 */
; dseg:2B170  j
add	sp, 2
inc	[bp+var_4]
mov	al, [bp+arg_2]
cmp	[bp+var_4], al
jnb	short loc_1B0FF
mov	al, [bp+var_4]
mov	cl, 6
sub	ah, ah
div	cl
or	ah, ah
jz	short loc_1B0FF
jmp	loc_1B065
;     ***************************************************************************

loc_1B0FF:				; CODE XREF: game_start_new_game_draw_rulers+9B  j		 /* DOS offset ---> 127B:F */
; game_start_new_game_draw_rulers+A8  j
mov	al, [bp+var_4]
mov	sp, bp

loc_1B104:				; CODE XREF: game_advice_advisor_output+3E5  j		 /* DOS offset ---> 127C:4 */
; game_advice_advisor_output+3EB  j
pop	bp
retf
game_start_new_game_draw_rulers	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_display_options proc far
; CODE XREF: game_start_new_game_player_select+11B  p

var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db 0FFh
db  4Eh	; N
db    6
db  8Bh	;   *
db  46h	; F
db    6
db 0B9h	;   *
db    3
db    0
db  2Bh	; +
db 0D2h	;   *
db 0F7h	;   *
unk_1B118	db 0F1h	;   *		; CODE XREF: game_advice_advisor_output+3F9  j
; game_advice_advisor_output+3FF  j
db 0BAh	;   *
db    2
unk_1B11B	db    0			; CODE XREF: game_advice_advisor_output+3F0  j
; game_advice_advisor_output+404  j
db  8Bh	;   *
db 0DAh	;   *
db  99h	;   *
db 0F7h	;   *
db 0FBh	;   *
db 0B1h	;   *
db    6
db 0D3h	;   *
db 0E2h	;   *
db  83h	;   *
db 0C2h	;   *
db  3Ch	; <
db  89h	;   *
db  56h	; V
db 0FEh	;   *
db  52h	; R
db  8Bh	;   *
db  46h	; F
db    6
db 0B9h	;   *
db    3
db    0
db  2Bh	; +
db 0D2h	;   *
db 0F7h	;   *
db 0F1h	;   *
db  8Bh	;   *
db 0C2h	;   *
db 0D1h	;   *
db 0E2h	;   *
db    3
db 0D0h	;   *
db 0D1h	;   *
db 0E2h	;   *
db 0D1h	;   *
db 0E2h	;   *
db  83h	;   *
db 0C2h	;   *
db  2Dh	; -
db  52h	; R
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db  83h	;   *
db  3Eh	; >
db 0A2h	;   *
db 0CEh	;   *
db    0
db  74h	; t
db  27h	; '
db  8Ah	;   *
db  1Eh
db 0EEh	;   *
db  4Ch	; L
db  2Ah	; *
db 0FFh
db  8Bh	;   *
db 0C3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db    3
db 0D8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db    3
db  5Eh	; ^
db    6
db 0D1h	;   *
unk_1B167	db 0E3h	;   *		; CODE XREF: dseg:2B11B  j dseg:2B133  j
db 0FFh
db 0B7h	;   *
db 0F2h	;   *
db  4Ch	; L
db  9Ah	;   *
db  52h	; R
db    6
db  0Dh
unk_1B170	db    6			; CODE XREF: game_advice_advisor_output+3AA  j
; game_advice_advisor_output+3CD  j
db  83h	;   *
db 0C4h	;   *
unk_1B173	db    2			; CODE XREF: dseg:2B16E  j
db  50h	; P
db 0B8h	;   *
unk_1B176	db  29h	; )		; CODE XREF: dseg:2B154  j dseg:2B165  j
db  4Eh	; N
db 0EBh	;   *
db  25h	; %
db  8Ah	;   *
db  1Eh
db 0EEh	;   *
db  4Ch	; L
db  2Ah	; *
db 0FFh
db  8Bh	;   *
db 0C3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db    3
db 0D8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0D1h	;   *
db 0E3h	;   *
;     ***************************************************************************

loc_1B18A:				; CODE XREF: dseg:2B286  p		 /* DOS offset ---> 1284:A */
add	bx, [bp+arg_0]

loc_1B18D:				; CODE XREF: game_advice_advisor+12  j		 /* DOS offset ---> 1284:D */
shl	bx, 1
push	word ptr [bx+4CF2h]
call	far ptr	60Dh:652h
add	sp, 2
push	ax
mov	ax, 4E33h
push	ax

loc_1B1A0:				; CODE XREF: game_advice_advisor+26  j		 /* DOS offset ---> 1286:0 */
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, [bp+var_2]
add	ax, 8
push	ax

loc_1B1AF:				; CODE XREF: dseg:2B1A9  j		 /* DOS offset ---> 1286:F */
mov	ax, [bp+arg_0]

loc_1B1B2:				; CODE XREF: dseg:2B1AD  j		 /* DOS offset ---> 1287:2 */
mov	cx, 3
sub	dx, dx
div	cx
mov	ax, dx
shl	dx, 1
add	dx, ax

loc_1B1BF:				; CODE XREF: dseg:3B147  j		 /* DOS offset ---> 1287:F */
shl	dx, 1
shl	dx, 1

loc_1B1C3:				; CODE XREF: dseg:3B15A  j		 /* DOS offset ---> 1288:3 */
add	dx, 2Dh	; '-'
push	dx
call	far ptr	3EFh:434h
add	sp, 4
mov	bl, byte_14CEE

loc_1B1D3:				; CODE XREF: dseg:3B15D  j		 /* DOS offset ---> 1289:3 */
sub	bh, bh

loc_1B1D5:				; CODE XREF: game_advice_advisor+8A  j		 /* DOS offset ---> 1289:5 */
mov	ax, bx
shl	bx, 1
add	bx, ax
shl	bx, 1
shl	bx, 1
add	bx, [bp+arg_0]
shl	bx, 1
push	word ptr [bx+4CF2h]
call	far ptr	60Dh:68Ch
add	sp, 2
push	ax
mov	ax, 4E3Ah
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
game_start_new_game_display_options endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_return_where proc far ; CODE XREF: game_start_new_game+16  p

var_2		= word ptr -2

push	bp
mov	bp, sp

loc_1B201:				; CODE XREF: game_advice_advisor+33  j		 /* DOS offset ---> 128C:1 */
; game_advice_advisor+46  j ...
sub	sp, 2

loc_1B204:				; CODE XREF: game_start_new_game_return_where+2D  j		 /* DOS offset ---> 128C:4 */
call	far ptr	0BF5h:0A0h
or	ax, ax
jnz	short loc_1B230
call	far ptr	4B5h:290h
mov	ax, 5
push	ax
sub	ax, ax
push	ax
mov	ax, 4E44h	; 0x347F6
; Text:	'Return where '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short loc_1B204
jmp	short loc_1B236
;     ***************************************************************************
nop

loc_1B230:				; CODE XREF: game_start_new_game_return_where+D  j		 /* DOS offset ---> 128F:0 */
; game_advice_advisor+7F  j
mov	al, 0FFh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1B236:				; CODE XREF: game_start_new_game_return_where+2F  j		 /* DOS offset ---> 128F:6 */
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp

locret_1B23C:				; CODE XREF: game_advice_advisor+14  j
; game_advice_advisor+28  j
retf
game_start_new_game_return_where endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_num_of_players proc	far
; CODE XREF: game_start_new_game_player_select+7  p

var_4		= byte ptr -4
var_2		= word ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  2Ah	; *
db 0C0h	;   *
db  50h	; P
db  9Ah	;   *
db  0Eh
db    0
db 0F5h	;   *
db  0Bh
db  83h	;   *
db 0C4h	;   *
db    2
db  9Ah	;   *
db  90h	;   *
db    2
db 0B5h	;   *
db    4
db  83h	;   *
db  3Eh	; >
db 0F0h	;   *
db  4Ch	; L
db    0
db  74h	; t
db  26h	; &
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db 0B8h	;   *
db  90h	;   *
db  3Bh	; ;
db  50h	; P
db 0B8h	;   *
db    2
db    0
db  50h	; P
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db  8Bh	;   *
unk_1B26A	db  1Eh			; CODE XREF: game_advice_check_advisor+9  j
; game_advice_check_advisor+1A  j
db 0F0h	;   *
db  4Ch	; L
db 0FFh
db  77h	; w
db  1Eh
;     ***************************************************************************

loc_1B270:				; CODE XREF: dseg:2B623  p		 /* DOS offset ---> 1293:0 */
push	word ptr [bx+1Ch]
;     ***************************************************************************
db  9Ah	;   *
db 0E6h	;   *
db    5
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ch
db 0C7h	;   *
unk_1B27C	db    6			; CODE XREF: game_advice_func_sub2+7  j
db 0F0h	;   *
db  4Ch	; L
db    0
db    0
db 0C6h	;   *
db  46h	; F
db 0FCh	;   *
db    0
;     ***************************************************************************

loc_1B285:				; CODE XREF: game_start_new_game_num_of_players+5C  j		 /* DOS offset ---> 1294:5 */
mov	bl, [bp+var_4]
sub	bh, bh

loc_1B28A:				; CODE XREF: game_advice_check_doctor+6  j		 /* DOS offset ---> 1294:A */
mov	byte ptr [bx+4CFEh], 7
mov	[bx+4CF2h], bh
inc	[bp+var_4]
cmp	[bp+var_4], 0Ch
jb	short loc_1B285

loc_1B29C:				; CODE XREF: game_start_new_game_num_of_players+85  j		 /* DOS offset ---> 1295:C */
call	far ptr	4B5h:290h
mov	bl, byte_14CEE
sub	bh, bh
mov	al, [bx+4CE7h]
sub	ah, ah
push	ax
sub	ax, ax
push	ax
mov	ax, 4E51h	; 0x34803
; Text:	'How many players '
push	ax
call	far ptr	3EFh:9B2h ; Q_B23E

loc_1B2BA:				; CODE XREF: dseg:2B28E  j		 /* DOS offset ---> 1297:A */
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short loc_1B29C
mov	al, byte ptr [bp+var_2]
mov	byte_14CEF, al
mov	sp, bp
pop	bp
retf
game_start_new_game_num_of_players endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_player_select proc far

var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= byte ptr -0Eh
var_C		= byte ptr -0Ch
var_A		= byte ptr -0Ah
var_8		= byte ptr -8
var_6		= byte ptr -6
var_4		= byte ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 14h
push	cs
call	near ptr game_start_new_game_num_of_players
cmp	byte_14CEF, 0
jnz	short loc_1B2E4
jmp	loc_1B46A
;     ***************************************************************************

loc_1B2E4:				; CODE XREF: game_start_new_game_player_select+F  j		 /* DOS offset ---> 129A:4 */
mov	bl, byte_14CEE
sub	bh, bh
mov	al, [bx+4CE7h]

loc_1B2EE:				; CODE XREF: game_advice_func+4D  j		 /* DOS offset ---> 129A:E */
mov	[bp+var_4], al
cmp	al, 6
jbe	short loc_1B2FA

loc_1B2F5:				; CODE XREF: game_advice_func+50  j		 /* DOS offset ---> 129B:5 */
sub	al, al
jmp	short loc_1B2FC
;     ***************************************************************************
nop

loc_1B2FA:				; CODE XREF: game_start_new_game_player_select+23  j		 /* DOS offset ---> 129B:A */
mov	al, 1

loc_1B2FC:				; CODE XREF: game_start_new_game_player_select+27  j		 /* DOS offset ---> 129B:C */
mov	[bp+var_C], al
mov	al, [bp+var_4]
push	ax
mov	al, 1
push	ax

loc_1B306:				; CODE XREF: dseg:2B67A  p		 /* DOS offset ---> 129C:6 */
push	cs
;     ***************************************************************************
db 0E8h	;   *
db  48h	; H
db 0FDh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  88h	;   *
db  46h	; F
db 0F2h	;   *
db 0B0h	;   *
db    1
;     ***************************************************************************

loc_1B312:				; CODE XREF: game_advice_func+56  j		 /* DOS offset ---> 129D:2 */
mov	[bp+var_8], al
mov	[bp+var_A], al

loc_1B318:				; CODE XREF: game_start_new_game_player_select:loc_1B3F4  j		 /* DOS offset ---> 129D:8 */
mov	al, [bp+var_8]

loc_1B31B:		 /* DOS offset ---> 129D:B */
cmp	byte_14CEF, al
jnb	short loc_1B324
jmp	loc_1B422
;     ***************************************************************************

loc_1B324:				; CODE XREF: game_start_new_game_player_select+4F  j		 /* DOS offset ---> 129E:4 */
; game_start_new_game_player_select+B7  j ...
call	far ptr	4B5h:290h
mov	al, [bp+var_4]
sub	ah, ah
push	ax
mov	al, [bp+var_C]
push	ax
mov	al, [bp+var_8]
push	ax
mov	ax, 4E62h	; 0x34814
; Text:	'Player %d, play whom ''
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
cmp	[bp+var_C], 0
jnz	short loc_1B36D
mov	ax, word_13432
mov	[bp+var_10], ax
mov	ax, word_13434
mov	[bp+var_14], ax

loc_1B355:				; CODE XREF: dseg:2B350  j		 /* DOS offset ---> 12A1:5 */
mov	ax, 4E81h	; 0x34833
; Text:	'(0: View next page) '
push	ax

loc_1B359:				; CODE XREF: game_options_quit_game+45  j		 /* DOS offset ---> 12A1:9 */
call	far ptr	3EFh:6E8h
add	sp, 2
mov	ax, [bp+var_10]
mov	word_13432, ax

loc_1B367:				; CODE XREF: game_options_quit_game+1B  j		 /* DOS offset ---> 12A2:7 */
mov	ax, [bp+var_14]

loc_1B36A:		 /* DOS offset ---> 12A2:A */
mov	word_13434, ax

loc_1B36D:				; CODE XREF: game_start_new_game_player_select+77  j		 /* DOS offset ---> 12A2:D */
mov	al, [bp+var_4]
sub	ah, ah
push	ax
mov	al, [bp+var_C]
push	ax
call	far ptr	3EFh:998h ; game_input_query_func
add	sp, 4
mov	[bp+var_12], ax
or	ax, ax
jz	short loc_1B3F8
inc	ax
jz	short loc_1B324
mov	[bp+var_6], 1

loc_1B38D:				; CODE XREF: game_options_quit_player+1E  j		 /* DOS offset ---> 12A4:D */
mov	[bp+var_2], 0
cmp	[bp+var_8], 1
jbe	short loc_1B3B9

loc_1B398:				; CODE XREF: game_start_new_game_player_select+DF  j		 /* DOS offset ---> 12A5:8 */
mov	bl, [bp+var_6]
sub	bh, bh
mov	al, byte ptr [bp+var_12]
cmp	[bx+4CF1h], al
jz	short loc_1B3B4
inc	[bp+var_6]
mov	al, [bp+var_8]
cmp	[bp+var_6], al
jb	short loc_1B398
jmp	short loc_1B3B9
;     ***************************************************************************
nop

loc_1B3B4:				; CODE XREF: game_start_new_game_player_select+D4  j		 /* DOS offset ---> 12A7:4 */
mov	[bp+var_2], 1

loc_1B3B9:				; CODE XREF: game_start_new_game_player_select+C6  j		 /* DOS offset ---> 12A7:9 */
; game_start_new_game_player_select+E1  j
cmp	[bp+var_2], 0
jz	short loc_1B3C2
jmp	loc_1B324
;     ***************************************************************************

loc_1B3C2:				; CODE XREF: game_start_new_game_player_select+ED  j		 /* DOS offset ---> 12A8:2 */
mov	al, byte ptr [bp+var_12]
mov	bl, [bp+var_8]
sub	bh, bh
mov	[bx+4CF1h], al
mov	bx, [bp+var_12]
mov	byte ptr [bx+4CFDh], 1
mov	al, [bp+var_E]
sub	ah, ah
cmp	ax, bx
jb	short loc_1B3F1
mov	al, [bp+var_A]

loc_1B3E2:				; CODE XREF: game_options_quit_player+7D  j		 /* DOS offset ---> 12AA:2 */
cmp	ax, [bp+var_12]
ja	short loc_1B3F1
push	[bp+var_12]
push	cs
call	near ptr game_start_new_game_display_options

loc_1B3EE:				; CODE XREF: game_options_quit_player+53  j		 /* DOS offset ---> 12AA:E */
add	sp, 2

loc_1B3F1:				; CODE XREF: game_start_new_game_player_select+10D  j		 /* DOS offset ---> 12AB:1 */
; game_start_new_game_player_select+115  j
inc	[bp+var_8]

loc_1B3F4:				; CODE XREF: game_options_quit_player+3E  j		 /* DOS offset ---> 12AB:4 */
jmp	loc_1B318
;     ***************************************************************************
nop

loc_1B3F8:				; CODE XREF: game_start_new_game_player_select+B4  j		 /* DOS offset ---> 12AB:8 */
mov	al, [bp+var_E]
cmp	[bp+var_4], al
jnz	short loc_1B404
mov	al, 1
jmp	short loc_1B409
;     ***************************************************************************

loc_1B404:				; CODE XREF: game_start_new_game_player_select+12E  j		 /* DOS offset ---> 12AC:4 */
mov	al, [bp+var_E]
inc	al

loc_1B409:				; CODE XREF: game_start_new_game_player_select+132  j		 /* DOS offset ---> 12AC:9 */
mov	[bp+var_A], al
mov	al, [bp+var_4]
push	ax
mov	al, [bp+var_A]
push	ax
push	cs

loc_1B415:				; CODE XREF: game_options_quit_player+20  j		 /* DOS offset ---> 12AD:5 */
call	near ptr game_start_new_game_draw_rulers
add	sp, 4

loc_1B41B:		 /* DOS offset ---> 12AD:B */
mov	[bp+var_E], al
jmp	loc_1B324
;     ***************************************************************************
nop

loc_1B422:				; CODE XREF: game_start_new_game_player_select+51  j		 /* DOS offset ---> 12AE:2 */
mov	[bp+var_6], 0
cmp	byte_14CEF, 0

loc_1B42B:				; CODE XREF: game_options_sound_effects+A  j		 /* DOS offset ---> 12AE:B */
jz	short loc_1B466

loc_1B42D:				; CODE XREF: game_start_new_game_player_select+194  j		 /* DOS offset ---> 12AE:D */
mov	bl, [bp+var_6]
sub	bh, bh
mov	al, [bx+4CF2h]

loc_1B436:				; CODE XREF: game_options_sound_effects+14  j		 /* DOS offset ---> 12AF:6 */
; game_options_sound_effects+E  j ...
mov	bl, byte_14CEE
cmp	al, [bx+4CE7h]
jnz	short loc_1B45B
mov	al, 1
push	ax

loc_1B443:				; CODE XREF: game_options_sound_effects+23  j		 /* DOS offset ---> 12B0:3 */
call	far ptr	0BF5h:0Eh

loc_1B448:				; CODE XREF: game_options_sound_effects+28  j		 /* DOS offset ---> 12B0:8 */
add	sp, 2
call	far ptr	0B89h:664h
sub	al, al
push	ax
call	far ptr	0BF5h:0Eh
add	sp, 2

loc_1B45B:				; CODE XREF: game_start_new_game_player_select+16E  j		 /* DOS offset ---> 12B1:B */
inc	[bp+var_6]
mov	al, byte_14CEF
cmp	[bp+var_6], al
jb	short loc_1B42D

loc_1B466:				; CODE XREF: game_start_new_game_player_select:loc_1B42B  j		 /* DOS offset ---> 12B2:6 */
; dseg:2B352  j
push	cs
call	near ptr game_start_new_game_display_scenario

loc_1B46A:				; CODE XREF: game_start_new_game_player_select+11  j		 /* DOS offset ---> 12B2:A */
mov	sp, bp
pop	bp
retf
game_start_new_game_player_select endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_scenario_text_display proc far
; CODE XREF: game_start_new_game_which_scenario+17  p
; game_start_new_game_which_scenario+4C  p

arg_0		= byte ptr  6
arg_2		= byte ptr  8

push	bp
mov	bp, sp
mov	cl, 4
mov	al, [bp+arg_0]
sub	ah, ah
shl	ax, cl
add	ax, 31h	; '1'
push	ax

loc_1B47E:				; CODE XREF: game_options_sound_effects+5A  j		 /* DOS offset ---> 12B3:E */
mov	ax, 16h
push	ax
call	far ptr	3EFh:434h

loc_1B487:				; CODE XREF: game_options_sound_effects+5D  j		 /* DOS offset ---> 12B4:7 */
mov	sp, bp
cmp	word_1CEA2, 0
jz	short loc_1B4B2

loc_1B490:				; CODE XREF: game_options_sound_effects+5F  j		 /* DOS offset ---> 12B5:0 */
; game_options_sound_effects+69  j
cmp	[bp+arg_2], 6
jnz	short loc_1B4B2
mov	bl, [bp+arg_0]
sub	bh, bh
mov	ax, bx
mov	cl, [bx+4ECEh]
sub	ch, ch
push	cx
shl	bx, 1
push	word ptr [bx+4CDCh]
inc	ax
push	ax
mov	ax, 4E96h	; 0x34848
; Text:	'%d. %s %d A.D. '
jmp	short loc_1B4D9
;     ***************************************************************************
nop

loc_1B4B2:				; CODE XREF: game_start_new_game_scenario_text_display+20  j		 /* DOS offset ---> 12B7:2 */
; game_start_new_game_scenario_text_display+26  j
mov	al, [bp+arg_2]

loc_1B4B5:				; CODE XREF: game_options_sound_effects+80  j		 /* DOS offset ---> 12B7:5 */
sub	ah, ah
push	ax
call	far ptr	3EFh:458h

loc_1B4BD:				; CODE XREF: game_options_sound_effects+79  j		 /* DOS offset ---> 12B7:D */
add	sp, 2

loc_1B4C0:		 /* DOS offset ---> 12B8:0 */
mov	bl, [bp+arg_0]
sub	bh, bh
mov	ax, bx
mov	cl, [bx+4ECEh]
sub	ch, ch
push	cx
shl	bx, 1
push	word ptr [bx+4CDCh]
inc	ax
push	ax
mov	ax, 4EB7h	; 0x34869
; Text:	'%d. %s %d A.D. '

loc_1B4D9:				; CODE XREF: game_start_new_game_scenario_text_display+41  j		 /* DOS offset ---> 12B9:9 */
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
game_start_new_game_scenario_text_display endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_which_scenario proc	far ; CODE XREF: game_start_new_game+9B  p

var_4		= byte ptr -4
var_2		= word ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
;     ***************************************************************************

loc_1B4EA:				; CODE XREF: game_start_new_game_which_scenario+5F  j		 /* DOS offset ---> 12BA:A */
; game_options_wait_messenger_speed+4F  j
call	far ptr	0BF5h:4F0h
mov	[bp+var_4], 0

loc_1B4F3:				; CODE XREF: game_start_new_game_which_scenario+24  j		 /* DOS offset ---> 12BB:3 */
mov	al, 7
push	ax
mov	al, [bp+var_4]
push	ax
push	cs
call	near ptr game_start_new_game_scenario_text_display
add	sp, 4

loc_1B501:		 /* DOS offset ---> 12BC:1 */
inc	[bp+var_4]
cmp	[bp+var_4], 6
jb	short loc_1B4F3
mov	ax, 6
push	ax
mov	ax, 1
push	ax
mov	ax, 4ED4h	; 0x34886
; Text:	'Which scenario '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax

loc_1B521:		 /* DOS offset ---> 12BE:1 */
cmp	ax, 0FFFFh
jz	short loc_1B548
mov	al, 6
push	ax
mov	al, byte ptr [bp+var_2]
dec	al
push	ax
push	cs
call	near ptr game_start_new_game_scenario_text_display
add	sp, 4
mov	al, byte ptr [bp+var_2]

loc_1B539:				; CODE XREF: game_options_wait_messenger_speed+6B  j		 /* DOS offset ---> 12BF:9 */
mov	byte_14CEE, al

loc_1B53C:		 /* DOS offset ---> 12BF:C */
call	far ptr	0CA5h:2Ah
or	ax, ax
jz	short loc_1B4EA
jmp	short loc_1B54E
;     ***************************************************************************
nop

loc_1B548:				; CODE XREF: game_start_new_game_which_scenario+40  j		 /* DOS offset ---> 12C0:8 */
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1B54E:				; CODE XREF: game_start_new_game_which_scenario+61  j		 /* DOS offset ---> 12C0:E */
mov	word_14CF0, 0
mov	ax, 1
mov	sp, bp
pop	bp

locret_1B55A:				; CODE XREF: dseg:2B664  p
retf
game_start_new_game_which_scenario endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_init_func proc far	; CODE XREF: game_start_new_game+E7  p

var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= byte ptr -6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Ch
db  56h	; V
db 0B8h	;   *
db    6
db    0
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db 0B8h	;   *
db 0F0h	;   *
db  35h	; 5
db  50h	; P
db  9Ah	;   *
db    6
db    0
db 0A3h	;   *
db    6
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
unk_1B578	db  46h	; F		; CODE XREF: game_options_wait_message_speed+32  j
db 0F6h	;   *
db  50h	; P
db  9Ah	;   *
db  5Eh	; ^
db    2
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db    6
db 0C7h	;   *
db    6
db 0BAh	;   *
db  33h	; 3
db    0
db    0
db 0C6h	;   *
db  46h	; F
db 0F8h	;   *
db    0
db 0A0h	;   *
db 0EEh	;   *
db  4Ch	; L
;     ***************************************************************************

loc_1B590:				; CODE XREF: dseg:2B569  j dseg:2B572  j		 /* DOS offset ---> 12C5:0 */
sub	ah, ah
dec	ax
or	ax, ax

loc_1B595:				; CODE XREF: dseg:2B60D  p		 /* DOS offset ---> 12C5:5 */
jle	short loc_1B5BB
mov	al, byte_14CEE
sub	ah, ah
dec	ax
mov	[bp+var_C], ax

loc_1B5A0:				; CODE XREF: game_start_new_game_init_func+5D  j		 /* DOS offset ---> 12C6:0 */
mov	si, [bp+var_8]
and	si, 0FFh
mov	al, [bp+si+var_6]
sub	ah, ah
add	word_133BA, ax

loc_1B5B0:				; CODE XREF: game_options_wait+2B  j		 /* DOS offset ---> 12C7:0 */
inc	byte ptr [bp+var_8]
mov	al, byte ptr [bp+var_8]

loc_1B5B6:				; CODE XREF: game_options_wait+2E  j		 /* DOS offset ---> 12C7:6 */
cmp	[bp+var_C], ax
jg	short loc_1B5A0

loc_1B5BB:				; CODE XREF: game_start_new_game_init_func:loc_1B595  j		 /* DOS offset ---> 12C7:B */
mov	si, [bp+var_8]

loc_1B5BE:		 /* DOS offset ---> 12C7:E */
and	si, 0FFh
mov	al, [bp+si+var_6]
sub	ah, ah
add	ax, word_133BA
mov	word_133B8, ax
sub	ax, ax
push	ax
mov	ax, 2Eh	; '.'

loc_1B5D4:				; CODE XREF: dseg:2B6F2  p		 /* DOS offset ---> 12C9:4 */
mul	word_133BA
add	ax, 6
sub	dx, dx
push	dx
push	ax
push	[bp+var_A]
call	far ptr	0:2CCh
add	sp, 8
mov	ax, 2Eh	; '.'
push	ax
mov	ax, 33BCh
push	ax
push	[bp+var_A]
call	far ptr	0:25Eh
add	sp, 6
push	[bp+var_A]
call	far ptr	0:248h
add	sp, 2
inc	word_133BA
pop	si
mov	sp, bp
pop	bp
retf
game_start_new_game_init_func endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game_clear_header proc far ; CODE XREF: game_start_new_game+EB  p

var_8		= word ptr -8
var_6		= word ptr -6
var_2		= word ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    8
;     ***************************************************************************

loc_1B618:				; CODE XREF: game_options_HEX+4D  j		 /* DOS offset ---> 12CD:8 */
mov	[bp+var_2], 2B02h
cmp	byte_12B1B, 0

loc_1B622:				; CODE XREF: game_options_HEX+12  j		 /* DOS offset ---> 12CE:2 */
jnz	short loc_1B630
mov	ax, word_12B2E
mov	bx, [bp+var_2]

loc_1B62A:				; CODE XREF: game_options_HEX+48  j		 /* DOS offset ---> 12CE:A */
mov	[bx], ax
mov	word_12B2E, bx

loc_1B630:				; CODE XREF: game_start_new_game_clear_header:loc_1B622  j		 /* DOS offset ---> 12CF:0 */
mov	[bp+var_2], 2AD7h
cmp	byte_12AF0, 0
jnz	short loc_1B648
mov	ax, word_12B2E
mov	bx, [bp+var_2]
mov	[bx], ax

loc_1B644:				; CODE XREF: game_options_func+E  j		 /* DOS offset ---> 12D0:4 */
; game_options_func+12  j
mov	word_12B2E, bx

loc_1B648:				; CODE XREF: game_start_new_game_clear_header+28  j		 /* DOS offset ---> 12D0:8 */
; game_options_func+7C  j ...
mov	[bp+var_6], 2DC4h
mov	[bp+var_8], 29h	; ')'

loc_1B652:				; CODE XREF: game_start_new_game_clear_header:loc_1B66F  j		 /* DOS offset ---> 12D1:2 */
mov	al, 46h	; 'F'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax

loc_1B65F:				; CODE XREF: dseg:2B631  j dseg:2B638  j ...		 /* DOS offset ---> 12D1:F */
jz	short loc_1B668
mov	bx, [bp+var_6]
or	byte ptr [bx+13h], 2

loc_1B668:				; CODE XREF: game_start_new_game_clear_header:loc_1B65F  j		 /* DOS offset ---> 12D2:8 */
add	[bp+var_6], 23h	; '#'
dec	[bp+var_8]

loc_1B66F:				; CODE XREF: game_options_func+31  j		 /* DOS offset ---> 12D2:F */
jnz	short loc_1B652
cmp	byte_14CEE, 1
jz	short loc_1B67D
mov	byte_133ED, 5

loc_1B67D:				; CODE XREF: game_start_new_game_clear_header+64  j		 /* DOS offset ---> 12D3:D */
mov	ax, 8Dh	; '  *'
push	ax
mov	ax, 3
push	ax

loc_1B685:		 /* DOS offset ---> 12D4:5 */
call	far ptr	4B5h:226h
add	sp, 4

loc_1B68D:				; CODE XREF: game_options_func+3E  j		 /* DOS offset ---> 12D4:D */
mov	ax, 3Dh	; '='
push	ax

loc_1B691:				; CODE XREF: dseg:2B615  j dseg:2B62B  j ...		 /* DOS offset ---> 12D5:1 */
call	far ptr	4B5h:33Eh
add	sp, 2
mov	ax, 90h	; '  *'
push	ax
call	far ptr	4B5h:33Eh
add	sp, 2
call	far ptr	4B5h:266h
call	far ptr	4B5h:290h
mov	sp, bp
pop	bp
retf
game_start_new_game_clear_header endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_game proc far		; CODE XREF: game_start_func+1C  p

var_4		= byte ptr -4
var_2		= byte ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  9Ah	;   *
db 0F0h	;   *
db    4
db 0F5h	;   *
db  0Bh
db 0C6h	;   *
db  46h	; F
db 0FEh	;   *
db    0
;     ***************************************************************************

loc_1B6C3:				; CODE XREF: game_start_new_game+AB  j		 /* DOS offset ---> 12D8:3 */
; game_options_func+76  j
cmp	[bp+var_2], 5
jnz	short loc_1B72C
push	cs
call	near ptr game_start_new_game_return_where

loc_1B6CD:				; CODE XREF: game_options_func+B3  j		 /* DOS offset ---> 12D8:D */
; dseg:2B70E  j
mov	[bp+var_4], al
sub	ah, ah
or	ax, ax
jnz	short loc_1B6D9

loc_1B6D6:				; CODE XREF: game_options_func+C3  j		 /* DOS offset ---> 12D9:6 */
jmp	loc_1B776
;     ***************************************************************************

loc_1B6D9:				; CODE XREF: game_start_new_game+20  j		 /* DOS offset ---> 12D9:9 */
dec	ax
jz	short loc_1B712
sub	ax, 0FEh ; '  *'
jnz	short loc_1B6E4
jmp	loc_1B766
;     ***************************************************************************

loc_1B6E4:				; CODE XREF: game_start_new_game+2B  j		 /* DOS offset ---> 12DA:4 */
mov	bl, [bp+var_4]
sub	bh, bh
shl	bx, 1
shl	bx, 1
call	dword ptr [bx+4EE0h]
cmp	byte_14CEF, 0
jnz	short loc_1B6FB
jmp	loc_1B790
;     ***************************************************************************

loc_1B6FB:				; CODE XREF: game_start_new_game+42  j		 /* DOS offset ---> 12DB:B */
cmp	[bp+var_4], 2
jnz	short loc_1B759
call	far ptr	0BF5h:100h

loc_1B706:				; CODE XREF: game_options_func+EA  j		 /* DOS offset ---> 12DC:6 */
call	far ptr	0BF5h:172h
call	far ptr	0BF5h:1C6h

loc_1B710:				; CODE XREF: game_options_func+DC  j		 /* DOS offset ---> 12DD:0 */
jmp	short loc_1B759
;     ***************************************************************************

loc_1B712:				; CODE XREF: game_start_new_game+26  j		 /* DOS offset ---> 12DD:2 */
; dseg:2B6FF  j
call	far ptr	0BF5h:50Ch

loc_1B717:				; CODE XREF: dseg:2B6BA  j dseg:2B6CC  j ...		 /* DOS offset ---> 12DD:7 */
call	far ptr	677h:0B2h

loc_1B71C:				; CODE XREF: game_options_func+74  j		 /* DOS offset ---> 12DD:C */
; Q_1BFA6+9  p ...
call	far ptr	0:2Fh
call	far ptr	677h:0E4h
mov	[bp+var_2], 0
jmp	short loc_1B759
;     ***************************************************************************

loc_1B72C:				; CODE XREF: game_start_new_game+13  j		 /* DOS offset ---> 12DE:C */
cmp	[bp+var_2], 0
jz	short loc_1B74E
mov	bl, [bp+var_2]
sub	bh, bh
shl	bx, 1

loc_1B739:				; CODE XREF: func_1B720+1D1  j		 /* DOS offset ---> 12DF:9 */
; func_1B720:loc_2B8FA  j ...
shl	bx, 1

loc_1B73B:				; CODE XREF: dseg:2B72E  j dseg:2B734  j		 /* DOS offset ---> 12DF:B */
call	dword ptr [bx+4EE4h]
cmp	[bp+var_2], 1
jnz	short loc_1B756

loc_1B745:		 /* DOS offset ---> 12E0:5 */
cmp	byte_14CEF, 0
jnz	short loc_1B756
jmp	short loc_1B790
;     ***************************************************************************

loc_1B74E:				; CODE XREF: game_start_new_game+7C  j		 /* DOS offset ---> 12E0:E */
push	cs
call	near ptr game_start_new_game_which_scenario
or	ax, ax
jz	short loc_1B78A

loc_1B756:				; CODE XREF: game_start_new_game+8F  j		 /* DOS offset ---> 12E1:6 */
; game_start_new_game+96  j
inc	[bp+var_2]

loc_1B759:				; CODE XREF: game_start_new_game+4B  j		 /* DOS offset ---> 12E1:9 */
; game_start_new_game:loc_1B710  j ...
cmp	[bp+var_2], 5
ja	short loc_1B762
jmp	loc_1B6C3
;     ***************************************************************************

loc_1B762:				; CODE XREF: game_start_new_game+A9  j		 /* DOS offset ---> 12E2:2 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1B766:				; CODE XREF: game_start_new_game+2D  j		 /* DOS offset ---> 12E2:6 */
push	cs

loc_1B767:				; CODE XREF: func_1B720+3D  j		 /* DOS offset ---> 12E2:7 */
call	near ptr game_start_new_game_sub
push	cs
call	near ptr game_start_new_game_sub_3
call	far ptr	0BF5h:240h /* loc_1C197, looks like set video mode*/  ;JUQIANG /* DOS offset ---> 1361:240 */ loc_1C197
jmp	short loc_1B795
;     ***************************************************************************
nop

loc_1B776:				; CODE XREF: game_start_new_game:loc_1B6D6  j		 /* DOS offset ---> 12E3:6 */
call	far ptr	0BF5h:50Ch
call	far ptr	677h:0B2h
call	far ptr	0:2Fh
call	far ptr	677h:0E4h

loc_1B78A:				; CODE XREF: game_start_new_game+A0  j		 /* DOS offset ---> 12E4:A */
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1B790:				; CODE XREF: game_start_new_game+44  j		 /* DOS offset ---> 12E5:0 */
; game_start_new_game+98  j
call	far ptr	0BF5h:4B0h

loc_1B795:				; CODE XREF: game_start_new_game+BF  j		 /* DOS offset ---> 12E5:5 */
; func_1B720+4D  j
call	far ptr	0BF5h:3A6h
push	cs
call	near ptr game_start_new_game_init_func
push	cs
call	near ptr game_start_new_game_clear_header

loc_1B7A2:				; CODE XREF: dseg:2B778  j dseg:2B799  j		 /* DOS offset ---> 12E6:2 */
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_start_new_game endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_main_menu proc far		; CODE XREF: game_start_func+13  p

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2

loc_1B7B0:				; CODE XREF: dseg:2B816  j		 /* DOS offset ---> 12E7:0 */
call	far ptr	0BF5h:4F0h
mov	ax, 4EF8h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2

loc_1B7C1:				; CODE XREF: game_start_main_menu+31  j		 /* DOS offset ---> 12E8:1 */
mov	ax, 3
push	ax
mov	ax, 1
push	ax
mov	ax, 4F2Dh	; 0x348DF
; Text:	'Select which '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short loc_1B7C1
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
game_start_main_menu endp


;     *************** S U B	R O U T	I N E     ***************************************


game_start_func	proc far
call	far ptr	677h:170h
call	far ptr	0BF5h:50Ch
jmp	short loc_1B7F6
;     ***************************************************************************

loc_1B7F0:				; CODE XREF: game_start_func+19  j		 /* DOS offset ---> 12EB:0 */
dec	ax
jz	short loc_1B80A
dec	ax
jz	short near ptr game_start_quit_game

loc_1B7F6:				; CODE XREF: game_start_func+A  j		 /* DOS offset ---> 12EB:6 */
; game_start_func+21  j ...
push	cs
call	near ptr game_start_main_menu
sub	ah, ah

loc_1B7FC:				; CODE XREF: func_1B720+B5  j		 /* DOS offset ---> 12EB:C */
dec	ax
jnz	short loc_1B7F0
push	cs
call	near ptr game_start_new_game
or	ax, ax
jz	short loc_1B7F6
jmp	short loc_1B84B
;     ***************************************************************************
nop

loc_1B80A:				; CODE XREF: game_start_func+D  j		 /* DOS offset ---> 12EC:A */
call	far ptr	0CA5h:198h ; s_CBE8

loc_1B80F:				; CODE XREF: dseg:2B7D4  j dseg:2B7E8  j		 /* DOS offset ---> 12EC:F */
or	ax, ax
jz	short loc_1B7F6
jmp	short near ptr game_start_continue_game
game_start_func	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_start_quit_game proc far		; CODE XREF: game_start_func+10  j
mov	ax, 4F3Eh	; 0x348F0
; Text:	'Are you sure '
push	ax

loc_1B81A:				; CODE XREF: dseg:2B80D  j		 /* DOS offset ---> 12ED:A */
call	far ptr	3EFh:6C0h ; system_execute_function

loc_1B81F:				; CODE XREF: func_1B720+DA  j		 /* DOS offset ---> 12ED:F */
add	sp, 2

loc_1B822:				; CODE XREF: dseg:2B818  j		 /* DOS offset ---> 12EE:2 */
call	far ptr	3EFh:9D6h ; game_input_query_display_OK
or	ax, ax
jz	short loc_1B7F6
mov	al, 30h	; '0'
push	ax
call	far ptr	6EBh:3Ah ; game_audio_fade_music
add	sp, 2

loc_1B836:				; CODE XREF: game_start_quit_game:loc_1B83D  j		 /* DOS offset ---> 12EF:6 */
call	far ptr	6EBh:64h ; game_audio_fade_music_check
or	ax, ax

loc_1B83D:				; CODE XREF: dseg:2B8E8  j		 /* DOS offset ---> 12EF:D */
jnz	short loc_1B836
push	cs
call	near ptr game_quit_execute
jmp	short loc_1B7F6
game_start_quit_game endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_start_continue_game proc far	; CODE XREF: game_start_func+2F  j
call	far ptr	4B5h:364h ; s_4EB4

loc_1B84B:				; CODE XREF: game_start_func+23  j		 /* DOS offset ---> 12F0:B */
; dseg:2B8C3  j
mov	al, 48
push	ax
call	far ptr	6EBh:3Ah ; game_audio_fade_music
add	sp, 2
call	far ptr	4B5h:358h ; game_gfx_blk_bkgrnd_shape_3
mov	ax, 61
push	ax
call	far ptr	4B5h:33Eh ; game_gfx_province_division_lines_display
add	sp, 2
mov	ax, 144
push	ax
call	far ptr	4B5h:33Eh ; game_gfx_province_division_lines_display
add	sp, 2
mov	ax, 4F4Fh	; 0x34901
; Text:	'On with the game '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2

loc_1B87F:				; CODE XREF: game_start_continue_game+40  j		 /* DOS offset ---> 12F3:F */
call	far ptr	6EBh:64h ; game_audio_fade_music_check
or	ax, ax
jnz	short loc_1B87F
mov	al, 2
push	ax
call	far ptr	6EBh:96h ; s_6F46
add	sp, 2
retf
game_start_continue_game endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_ruler_month_born	proc far        ;/* DOS offset ---> 12F5:4 */
; CODE XREF: game_start_new_ruler_birthday_info:loc_1BDE9  p

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2

loc_1B89A:				; CODE XREF: game_start_new_ruler_month_born+25  j		 /* DOS offset ---> 12F5:A */
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 0Ch
push	ax
mov	ax, 1
push	ax
mov	ax, 4F86h	; 0x34938
; Text:	'Enter month born '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short loc_1B89A

loc_1B8BB:				; CODE XREF: dseg:2B876  j dseg:2B891  j ...		 /* DOS offset ---> 12F7:B */
mov	al, byte ptr [bp+var_2] ; JUQIANG: [bp-2] -> month value
mov	byte_1CB1D/* ruler birthday month */, al  ; JUQIANG: [CB1d] = month
push	ax

loc_1B8C2:				; DATA XREF: dseg:24BE6  r dseg:24C03  r ...		 /* DOS offset ---> 12F8:2 */
call	far ptr	0C49h:406h ; JUQIANG: display value which contains in AX

loc_1B8C7:				; DATA XREF: dseg:24BF1  r dseg:24C15  r ...		 /* DOS offset ---> 12F8:7 */
mov	sp, bp
pop	bp

locret_1B8CA:				; DATA XREF: dseg:26B7B  r dseg:26DA6  r
retf
game_start_new_ruler_month_born	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_ruler_day_born proc far	; CODE XREF: game_start_new_ruler_birthday_info+5  p        ;/* DOS offset ---> 12F5:4 */
; DATA XREF: dseg:293D4  r ...

var_2		= word ptr -2

push	bp
;     ***************************************************************************
byte_1B8CD	db 8Bh			; DATA XREF: dseg:293CE  r dseg:29425  r ...
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
byte_1B8D1	db 2			; CODE XREF: func_1B720+36  j
; DATA XREF: dseg:2A82C  r
;     ***************************************************************************

loc_1B8D2:				; CODE XREF: game_start_new_ruler_day_born+25  j		 /* DOS offset ---> 12F9:2 */
; DATA XREF: dseg:227F1  r ...
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window

loc_1B8D7:				; DATA XREF: dseg:2296D  r dseg:22E00  r ...		 /* DOS offset ---> 12F9:7 */
mov	ax, 1Fh

loc_1B8DA:				; DATA XREF: dseg:26E56  r dseg:26ED0  r ...		 /* DOS offset ---> 12F9:A */
push	ax

loc_1B8DB:				; DATA XREF: dseg:26E53  w dseg:27C2D  w ...		 /* DOS offset ---> 12F9:B */
mov	ax, 1

loc_1B8DE:				; DATA XREF: dseg:24CCA  r dseg:2609A  w ...		 /* DOS offset ---> 12F9:E */
push	ax
;     ***************************************************************************
byte_1B8DF	db 0B8h			; DATA XREF: dseg:226E0  w dseg:23CCB  r ...
word_1B8E0	dw 4FB4h		; DATA XREF: dseg:226E8  w dseg:23CC7  r ...
byte_1B8E2	db 50h			; DATA XREF: dseg:2269A  w dseg:22730  r ...
;     ***************************************************************************

loc_1B8E3:				; DATA XREF: dseg:2376A  r dseg:26813  w ...		 /* DOS offset ---> 12FA:3 */
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query

loc_1B8E8:				; DATA XREF: dseg:226C9  w dseg:22740  r ...		 /* DOS offset ---> 12FA:8 */
add	sp, 6

loc_1B8EB:				; CODE XREF: dseg:2B8C9  j dseg:2B8E6  j		 /* DOS offset ---> 12FA:B */
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short loc_1B8D2

loc_1B8F3:				; CODE XREF: func_1B720+1CF  j		 /* DOS offset ---> 12FB:3 */
mov	al, byte ptr [bp+var_2]

loc_1B8F6:				; DATA XREF: dseg:28B80  r dseg:293B6  r		 /* DOS offset ---> 12FB:6 */
mov	byte_1CAEA/* ruler birthday day */, al ; JUQIANG: [CAEA] = AL, birth day
push	ax

loc_1B8FA:				; CODE XREF: dseg:2B9FC  p		 /* DOS offset ---> 12FB:A */
; func_1B720+1D8  j
; DATA XREF: ...
call	far ptr	0C49h:43Ch  ; JUQIANG: display value which contains in AX
mov	sp, bp
pop	bp
retf
game_start_new_ruler_day_born endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_ruler_enter_age proc far	; CODE XREF: game_start_new_ruler_add_follower+51  p  /*DOS offset ---> 12FC:4 */
; game_start_new_ruler_birthday_info+9  p

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2

loc_1B90A:				; CODE XREF: game_start_new_ruler_enter_age:loc_1B929  j		 /* DOS offset ---> 12FC:A */
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window

loc_1B90F:		 /* DOS offset ---> 12FC:F */
mov	ax, 99
push	ax
mov	ax, 1
push	ax
mov	ax, 4FC3h	; 0x34975
; Text:	'Enter age '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax

loc_1B926:				; CODE XREF: func_1B720+1F4  j		 /* DOS offset ---> 12FE:6 */
; func_1B720+1FA  j
cmp	ax, 0FFFFh

loc_1B929:				; CODE XREF: dseg:2B95F  j		 /* DOS offset ---> 12FE:9 */
jz	short loc_1B90A
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
game_start_new_ruler_enter_age endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_ruler_enter_sex proc far	; CODE XREF: game_start_new_ruler_add_follower+67  p
; game_start_new_ruler_func+1F  p

var_2		= word ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
;     ***************************************************************************

loc_1B938:				; CODE XREF: game_start_new_ruler_enter_sex+39  j		 /* DOS offset ---> 12FF:8 */
; func_1B720+20A  j
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	word_14F9A
push	word_14F98

loc_1B945:				; CODE XREF: func_1B720+21A  j		 /* DOS offset ---> 1300:5 */
mov	ax, 4FCDh	; 0x3497F
;
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text

loc_1B94E:				; CODE XREF: Q_1BFA6+1B  p		 /* DOS offset ---> 1300:E */
add	sp, 6
mov	ax, 2
push	ax
mov	ax, 1

loc_1B958:				; CODE XREF: dseg:2B938  j		 /* DOS offset ---> 1301:8 */
push	ax
mov	ax, 4FE2h	; 0x34994
; Text:	'Enter sex '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax

loc_1B968:				; CODE XREF: dseg:2BDCE  p dseg:2BDE7  p		 /* DOS offset ---> 1302:8 */
cmp	ax, 0FFFFh
jz	short loc_1B938
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
game_start_new_ruler_enter_sex endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_ruler_set_abilities_draw	proc far
; CODE XREF: game_start_new_ruler_set_abilities+63  p
; game_start_new_ruler_set_abilities:loc_1BC94  p
push	bp
;     ***************************************************************************
aLWvgV		db '    **WV  *>    **',0
db  74h	; t
db  5Eh	; ^
db  80h	;   *
db  7Eh	; ~
db    8
db    5
db  75h	; u
db  58h	; X
db 0B8h	;   *
db  50h	; P
db    0
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    6
db  2Ah	; *
db 0E4h	;   *
db  8Bh	;   *
db 0C8h	;   *
db 0D1h	;   *
db 0E0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    3
db 0C1h	;   *
db    5
db  33h	; 3
db    0
db  50h	; P
db  8Bh	;   *
unk_1B99C	db 0F0h	;   *		; CODE XREF: dseg:2B9D4  j
db  8Bh	;   *
db 0F9h	;   *
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0B8h	;   *
db 0ECh	;   *
db  4Fh	; O
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
unk_1B9B1	db 0C4h	;   *		; CODE XREF: dseg:1B968  j
db    2
db  8Bh	;   *
db 0C7h	;   *
db 0D1h	;   *
db 0E7h	;   *
db 0FFh
db 0B5h	;   *
db  9Ch	;   *
db  4Fh	; O
db  8Bh	;   *
db 0F8h	;   *
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
;     ***************************************************************************

loc_1B9C2:				; CODE XREF: Q_1BFA6+15  p		 /* DOS offset ---> 1308:2 */
add	sp, 2
mov	ax, 58h	; 'X'
push	ax
push	si

loc_1B9CA:				; CODE XREF: dseg:2B9AA  j		 /* DOS offset ---> 1308:A */
call	far ptr	3EFh:434h ; game_display_generals_list_x_y

loc_1B9CF:				; CODE XREF: dseg:1BA30  j		 /* DOS offset ---> 1308:F */
add	sp, 4
mov	al, [di-34E6h]
sub	ah, ah
push	ax
mov	ax, 4FF4h	; 0x349A6
; Text:	'%3d '
jmp	short loc_1BA36
;     ***************************************************************************
db  8Ah	;   *
db  46h	; F
db    8
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db  9Ah	;   *
db  58h	; X
db    4
unk_1B9E7	db 0EFh	;   *		; CODE XREF: dseg:1BA23  j
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db 0B8h	;   *
db  50h	; P
db    0
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    6
db  2Ah	; *
db 0E4h	;   *
db  8Bh	;   *
db 0C8h	;   *
db 0D1h	;   *
db 0E0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    3
db 0C1h	;   *
db    5
db  33h	; 3
db    0
db  50h	; P
db  8Bh	;   *
db 0F0h	;   *
db  8Bh	;   *
db 0F9h	;   *
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db 0C7h	;   *
db 0D1h	;   *
db 0E7h	;   *
db 0FFh
db 0B5h	;   *
db  9Ch	;   *
db  4Fh	; O
db  8Bh	;   *
db 0F8h	;   *
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db 0B8h	;   *
db  58h	; X
db    0
db  50h	; P
db  56h	; V
db  9Ah	;   *
unk_1BA25	db  34h	; 4		; CODE XREF: dseg:1B9DC  j
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db  8Ah	;   *
db  85h	;   *
db  1Ah
db 0CBh	;   *
db  2Ah	; *
db 0E4h	;   *
;     ***************************************************************************

loc_1BA32:				; CODE XREF: dseg:1BA17  j dseg:2BA2C  j		 /* DOS offset ---> 130F:2 */
push	ax

loc_1BA33:				; CODE XREF: dseg:2BA30  j		 /* DOS offset ---> 130F:3 */
mov	ax, 4FFFh

loc_1BA36:				; CODE XREF: game_start_new_ruler_set_abilities_draw+68  j		 /* DOS offset ---> 130F:6 */
; Q_1BFA6+3  p
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
pop	si
pop	di
mov	sp, bp
pop	bp
retf
game_start_new_ruler_set_abilities_draw	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_ruler_set_abilities_change proc far
; CODE XREF: game_start_new_ruler_set_abilities+F5  p
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db 0B0h	;   *
db    7
db  50h	; P
db  8Ah	;   *
db  46h	; F
unk_1BA4E	db    8			; CODE XREF: dseg:1BA5D  j
db  50h	; P
db  0Eh
db 0E8h	;   *
unk_1BA52	db  20h			; CODE XREF: dseg:1BA4C  j dseg:1BC73  j
db 0FFh
db  8Bh	;   *
db 0E5h	;   *
db 0B0h	;   *
db    5
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    6
db  50h	; P
db  0Eh
db 0E8h	;   *
db  13h
db 0FFh
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_start_new_ruler_set_abilities_change endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_ruler_set_abilities_inc proc far
; CODE XREF: game_start_new_ruler_set_abilities+12D  p
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  80h	;   *
db  7Eh	; ~
db    6
db  64h	; d
db  73h	; s
db    3
db 0FEh	;   *
db  46h	; F
db    6
db  8Ah	;   *
db  46h	; F
db    6
db  5Dh	; ]
db 0CBh	;   *
game_start_new_ruler_set_abilities_inc endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_ruler_set_abilities_dec proc far
; CODE XREF: game_start_new_ruler_set_abilities+16A  p

arg_0		= byte ptr  6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  8Ah	;   *
db  46h	; F
db    6
db  38h	; 8
db  46h	; F
db    8
;     ***************************************************************************

loc_1BA81:				; CODE XREF: dseg:1BA63  j		 /* DOS offset ---> 1314:1 */
jnb	short loc_1BA86
dec	[bp+arg_0]

loc_1BA86:				; CODE XREF: game_start_new_ruler_set_abilities_dec:loc_1BA81  j		 /* DOS offset ---> 1314:6 */
mov	al, [bp+arg_0]
pop	bp
retf
game_start_new_ruler_set_abilities_dec endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_ruler_set_abilities proc	far
; CODE XREF: game_start_new_ruler_change_what_sub:loc_1BE03  p
; game_start_new_ruler_func+2F  p

var_8		= word ptr -8
var_4		= byte ptr -4
var_2		= byte ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Ah
db  56h	; V
db 0A0h	;   *
db  1Eh
db 0CBh	;   *
db  50h	; P
db 0A0h	;   *
db 0A0h	;   *
db 0CAh	;   *
db  50h	; P
db  9Ah	;   *
db 0DEh	;   *
db    2
db  49h	; I
db  0Ch
db  83h	;   *
db 0C4h	;   *
db    4
db 0A2h	;   *
db 0EEh	;   *
db 0CAh	;   *
db 0C7h	;   *
db  46h	; F
db 0F8h	;   *
db    0
db    0
db 0C6h	;   *
db  46h	; F
db 0FEh	;   *
db  32h	; 2
db  9Ah	;   *
db  90h	;   *
db    2
db 0B5h	;   *
db    4
db 0B8h	;   *
db    7
db  50h	; P
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db 0C6h	;   *
db  46h	; F
db 0FCh	;   *
unk_1BAC3	db    0			; CODE XREF: dseg:1BABE  j
;     ***************************************************************************

loc_1BAC4:				; CODE XREF: game_start_new_ruler_set_abilities+70  j		 /* DOS offset ---> 1318:4 */
mov	si, word_1CAEE
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
mov	bl, [bp+var_4]
sub	bh, bh
mov	al, [bx+si+4FA2h]
mov	[bx-34E6h], al
cmp	[bp+var_4], 1
sbb	al, al
and	al, 0FEh
add	al, 7
push	ax
mov	al, [bp+var_4]
push	ax
push	cs
call	near ptr game_start_new_ruler_set_abilities_draw
add	sp, 4
inc	[bp+var_4]
cmp	[bp+var_4], 3
jb	short loc_1BAC4
mov	ax, 504Eh	; 0x34A00
; Text:	'Bonus '

loc_1BB01:				; CODE XREF: game_start_new_ruler_set_abilities+1FD  j		 /* DOS offset ---> 131C:1 */
push	ax

loc_1BB02:				; CODE XREF: dseg:2BAED  j dseg:2BAFB  j		 /* DOS offset ---> 131C:2 */
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2

loc_1BB0A:				; CODE XREF: game_start_new_ruler_set_abilities:loc_1BB29  j		 /* DOS offset ---> 131C:A */
; game_start_new_ruler_set_abilities+B8  j ...
mov	ax, 151
push	ax
mov	ax, 59
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
call	far ptr	3EFh:79Ah ; game_query_user_input_main
sub	ah, ah
cmp	ax, 56
jnz	short loc_1BB29
jmp	loc_1BBB0
;     ***************************************************************************

loc_1BB29:				; CODE XREF: game_start_new_ruler_set_abilities+98  j		 /* DOS offset ---> 131E:9 */
ja	short loc_1BB0A
cmp	al, 1Fh
jnz	short loc_1BB32
jmp	loc_1BBDA
;     ***************************************************************************

loc_1BB32:				; CODE XREF: game_start_new_ruler_set_abilities+A1  j		 /* DOS offset ---> 131F:2 */
jg	short loc_1BB46
sub	al, 0Dh
jz	short loc_1BB62
sub	al, 0Fh
jz	short loc_1BB6C
dec	al
jz	short loc_1BB96
dec	al
jz	short loc_1BBB0
jmp	short loc_1BB0A
;     ***************************************************************************

loc_1BB46:				; CODE XREF: game_start_new_ruler_set_abilities:loc_1BB32  j		 /* DOS offset ---> 1320:6 */
sub	al, 43
jz	short loc_1BBB0
sub	al, 2
jnz	short loc_1BB51

loc_1BB4E:				; CODE XREF: dseg:1BAC0  j		 /* DOS offset ---> 1320:E */
jmp	loc_1BBDA
;     ***************************************************************************

loc_1BB51:				; CODE XREF: game_start_new_ruler_set_abilities+C0  j		 /* DOS offset ---> 1321:1 */
sub	al, 5
jnz	short loc_1BB58
jmp	loc_1BBDA
;     ***************************************************************************

loc_1BB58:				; CODE XREF: game_start_new_ruler_set_abilities+C7  j		 /* DOS offset ---> 1321:8 */
; dseg:2BB52  j
sub	al, 2
jz	short loc_1BB96
sub	al, 2
jz	short loc_1BB6C
jmp	short loc_1BB0A
;     ***************************************************************************

loc_1BB62:				; CODE XREF: game_start_new_ruler_set_abilities+AA  j		 /* DOS offset ---> 1322:2 */
cmp	[bp+var_2], 0
jnz	short loc_1BB0A
jmp	loc_1BC0F
;     ***************************************************************************
nop

loc_1BB6C:				; CODE XREF: game_start_new_ruler_set_abilities+AE  j		 /* DOS offset ---> 1322:C */
; game_start_new_ruler_set_abilities+D2  j
inc	[bp+var_8]
cmp	[bp+var_8], 3
jnz	short loc_1BB8A
mov	[bp+var_8], 0
mov	al, 2
push	ax
sub	al, al

loc_1BB7F:				; CODE XREF: game_start_new_ruler_set_abilities+107  j		 /* DOS offset ---> 1323:F */
; game_start_new_ruler_set_abilities+119  j
push	ax
push	cs
call	near ptr game_start_new_ruler_set_abilities_change
add	sp, 4
jmp	short loc_1BB0A
;     ***************************************************************************
nop

loc_1BB8A:				; CODE XREF: game_start_new_ruler_set_abilities+E7  j		 /* DOS offset ---> 1324:A */
mov	al, byte ptr [bp+var_8]
dec	al

loc_1BB8F:				; CODE XREF: game_start_new_ruler_set_abilities+121  j		 /* DOS offset ---> 1324:F */
push	ax

loc_1BB90:				; CODE XREF: dseg:2BB8D  j		 /* DOS offset ---> 1325:0 */
mov	al, byte ptr [bp+var_8]
jmp	short loc_1BB7F
;     ***************************************************************************
nop

loc_1BB96:				; CODE XREF: game_start_new_ruler_set_abilities+B2  j		 /* DOS offset ---> 1325:6 */
; game_start_new_ruler_set_abilities+CE  j
dec	[bp+var_8]
jns	short loc_1BBA8
mov	[bp+var_8], 2
sub	al, al
push	ax

loc_1BBA3:		 /* DOS offset ---> 1326:3 */
mov	al, 2
jmp	short loc_1BB7F
;     ***************************************************************************
nop

loc_1BBA8:				; CODE XREF: game_start_new_ruler_set_abilities+10D  j		 /* DOS offset ---> 1326:8 */
mov	al, byte ptr [bp+var_8]
inc	al
jmp	short loc_1BB8F
;     ***************************************************************************
nop

loc_1BBB0:				; CODE XREF: game_start_new_ruler_set_abilities+9A  j		 /* DOS offset ---> 1327:0 */
; game_start_new_ruler_set_abilities+B6  j ...
mov	bx, [bp+var_8]
mov	al, [bx-34E6h]
push	ax
push	cs
call	near ptr game_start_new_ruler_set_abilities_inc
add	sp, 2
mov	[bp+var_4], al
mov	bx, [bp+var_8]

loc_1BBC5:		 /* DOS offset ---> 1328:5 */
cmp	[bx-34E6h], al
jz	short loc_1BC0F
cmp	[bp+var_2], 0
jz	short loc_1BC0F

loc_1BBD1:		 /* DOS offset ---> 1329:1 */
mov	[bx-34E6h], al
dec	[bp+var_2]
jmp	short loc_1BC0F
;     ***************************************************************************

loc_1BBDA:				; CODE XREF: game_start_new_ruler_set_abilities+A3  j		 /* DOS offset ---> 1329:A */
; game_start_new_ruler_set_abilities:loc_1BB4E  j ...
mov	si, word_1CAEE
and	si, 0FFh
mov	ax, si

loc_1BBE4:		 /* DOS offset ---> 132A:4 */
shl	si, 1
add	si, ax
mov	bx, [bp+var_8]
mov	al, [bx+si+4FA2h]
push	ax
mov	al, [bx-34E6h]
push	ax
push	cs
call	near ptr game_start_new_ruler_set_abilities_dec
add	sp, 4
mov	[bp+var_4], al

loc_1BBFF:		 /* DOS offset ---> 132B:F */
mov	bx, [bp+var_8]
cmp	[bx-34E6h], al
jz	short loc_1BC0F
mov	[bx-34E6h], al
inc	[bp+var_2]

loc_1BC0F:				; CODE XREF: game_start_new_ruler_set_abilities+DC  j		 /* DOS offset ---> 132C:F */
; game_start_new_ruler_set_abilities+13D  j ...
mov	ax, 88
push	ax
mov	ax, [bp+var_8]
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
add	ax, 51
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
cmp	word_1CEA2, 0
jz	short loc_1BC44
mov	al, [bp+var_2]
sub	ah, ah
push	ax
mov	bx, [bp+var_8]
mov	al, [bx-34E6h]
push	ax
mov	ax, 505Eh
jmp	short loc_1BC55
;     ***************************************************************************

loc_1BC44:				; CODE XREF: game_start_new_ruler_set_abilities+1A3  j		 /* DOS offset ---> 1330:4 */
mov	al, [bp+var_2]
sub	ah, ah
push	ax
mov	bx, [bp+var_8]

loc_1BC4D:				; CODE XREF: dseg:2BB8F  j		 /* DOS offset ---> 1330:D */
mov	al, [bx-34E6h]
push	ax
mov	ax, 5077h	; 0x34A29
; Text:	'%3d +g%2d '

loc_1BC55:				; CODE XREF: game_start_new_ruler_set_abilities+1B6  j		 /* DOS offset ---> 1331:5 */
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
cmp	[bp+var_2], 0
jz	short loc_1BC67
jmp	loc_1BB0A
;     ***************************************************************************

loc_1BC67:				; CODE XREF: game_start_new_ruler_set_abilities+1D6  j		 /* DOS offset ---> 1332:7 */
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window

loc_1BC6C:				; CODE XREF: dseg:2BCC9  j		 /* DOS offset ---> 1332:C */
mov	ax, 508Ah	; 0x34A3C
; Text:	'Is this '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function

loc_1BC75:		 /* DOS offset ---> 1333:5 */
add	sp, 2
call	far ptr	3EFh:0A24h ; game_input_query_display_OK
or	ax, ax
jnz	short loc_1BC8C
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 5093h	; 0x34A45
; Text:	'Reset abilities. '
jmp	loc_1BB01
;     ***************************************************************************

loc_1BC8C:				; CODE XREF: game_start_new_ruler_set_abilities+1F3  j		 /* DOS offset ---> 1334:C */
mov	al, 7
push	ax
mov	al, byte ptr [bp+var_8]

loc_1BC92:				; CODE XREF: Q_1BFA6+F  p		 /* DOS offset ---> 1335:2 */
push	ax
push	cs

loc_1BC94:				; CODE XREF: dseg:2BCC0  j		 /* DOS offset ---> 1335:4 */
call	near ptr game_start_new_ruler_set_abilities_draw
add	sp, 4
sub	ax, ax
push	ax
mov	ax, 10h
push	ax

loc_1BCA1:				; CODE XREF: dseg:1BCD9  j		 /* DOS offset ---> 1336:1 */
mov	ax, 8
push	ax
mov	ax, 80
push	ax
mov	ax, 67
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
pop	si
mov	sp, bp
pop	bp
retf
game_start_new_ruler_set_abilities endp


;     *************** S U B	R O U T	I N E     ***************************************


game_start_new_ruler_add_follower proc far ; CODE XREF:	game_start_new_ruler_change_what+6D  p
; game_start_new_ruler_func+61  p
mov	byte ptr loc_1532E, 0
;     ***************************************************************************
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
;     ***************************************************************************

loc_1BCC2:				; CODE XREF: dseg:2BC7C  j dseg:2BC93  j		 /* DOS offset ---> 1338:2 */
mov	cx, 16
push	cx
mov	cx, 21
push	cx
mov	cx, 120
push	cx

loc_1BCCE:				; CODE XREF: dseg:2BCB4  j		 /* DOS offset ---> 1338:E */
mov	cx, 51
push	cx

loc_1BCD2:				; CODE XREF: dseg:1BCC4  j dseg:2BCCB  j		 /* DOS offset ---> 1339:2 */
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 50D5h	; 0x34A87
; Text:	'Add follower '
push	ax

loc_1BCE3:				; CODE XREF: dseg:1BDCA  p dseg:1BF06  p		 /* DOS offset ---> 133A:3 */
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jz	short loc_1BD46
mov	al, 1
push	ax
call	far ptr	0C49h:262h ; s_C6F2
add	sp, 2
mov	al, 1
push	ax
call	far ptr	0C49h:39Ch ; s_C82C
add	sp, 2
push	cs
call	near ptr game_start_new_ruler_enter_age
mov	byte_1CE95, al
sub	ah, ah
push	ax
mov	ax, 50E2h	; 0x34A94
; Text:	'Age '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
push	cs
call	near ptr game_start_new_ruler_enter_sex
mov	byte ptr loc_1CE93+1, al
mov	ax, 128

loc_1BD2A:				; CODE XREF: dseg:2BCF6  j dseg:2BD11  j		 /* DOS offset ---> 133E:A */
push	ax

loc_1BD2B:				; CODE XREF: dseg:1BD7A  j		 /* DOS offset ---> 133E:B */
mov	ax, 59
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
mov	bl, byte ptr loc_1CE93+1
sub	bh, bh
shl	bx, 1
push	word ptr [bx+4F96h]
jmp	short loc_1BD4A
;     ***************************************************************************
nop

loc_1BD46:				; CODE XREF: game_start_new_ruler_add_follower+38  j		 /* DOS offset ---> 1340:6 */
mov	ax, 50EFh
push	ax

loc_1BD4A:				; CODE XREF: game_start_new_ruler_add_follower+89  j		 /* DOS offset ---> 1340:A */
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
retf
game_start_new_ruler_add_follower endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_start_new_ruler_rule_which_province proc far
; CODE XREF: game_start_new_ruler_change_what+67  p
; game_start_new_ruler_func+5D  p

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2

loc_1BD5A:				; CODE XREF: game_start_new_ruler_rule_which_province+25  j		 /* DOS offset ---> 1341:A */
; game_start_new_ruler_rule_which_province+43  j
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 41
push	ax
mov	ax, 1
push	ax
mov	ax, 50F9h	; 0x34AAB
; Text:	'Rule which province '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short loc_1BD5A

loc_1BD7B:				; CODE XREF: dseg:1BD31  j		 /* DOS offset ---> 1343:B */
mov	al, byte ptr [bp+var_2]
dec	al

loc_1BD80:				; CODE XREF: dseg:1BDEA  p		 /* DOS offset ---> 1344:0 */
mov	byte_1CB1F, al
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
push	ax
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short loc_1BD5A
mov	al, byte_1CB1F
inc	al
push	ax
call	far ptr	0C49h:4D2h
mov	sp, bp
pop	bp
retf
game_start_new_ruler_rule_which_province endp


;     *************** S U B	R O U T	I N E     ***************************************


game_start_new_ruler_change_what_sub_2 proc far
; CODE XREF: game_start_new_ruler_change_what_sub+5  p
; game_start_new_ruler_func+33  p
mov	al, byte_1CB1A
;     ***************************************************************************
db  38h	; 8
db    6
db  1Bh
db 0CBh	;   *
db  73h	; s
db    5
db 0A0h	;   *
db 0EEh	;   *
db 0CAh	;   *
db 0EBh	;   *
db  28h	; (
db 0A0h	;   *
db  1Ah
db 0CBh	;   *
db  38h	; 8
db    6
db  1Bh
db 0CBh	;   *
db  76h	; v
db    7
db 0A0h	;   *
db 0EEh	;   *
db 0CAh	;   *
db    4
db    6
db 0EBh	;   *
db  18h
db 0B8h	;   *
db    2
db    0
db  50h	; P
db  9Ah	;   *
db  78h	; x
db    1
db  9Ch	;   *
unk_1BDCE	db    4			; CODE XREF: Q_1BF1E+1E  p
db  83h	;   *
db 0C4h	;   *
db    2
db  3Dh	; =
db    1
db    0
db 0F5h	;   *
db  1Ah
db 0C0h	;   *
db  24h	; $
db    6
db    2
db    6
db 0EEh	;   *
db 0CAh	;   *
db 0A2h	;   *
db  70h	; p
db 0CBh	;   *
db  80h	;   *
db  2Eh	; .
db  70h	; p
db 0CBh	;   *
db  40h	; @
db 0CBh	;   *
game_start_new_ruler_change_what_sub_2 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_start_new_ruler_birthday_info proc	far
; CODE XREF: game_start_new_ruler_func:loc_1BF0F  p
push	cs

loc_1BDE9:				; CODE XREF: dseg:1BDE4  j		 /* DOS offset ---> 134A:9 */
call	near ptr game_start_new_ruler_month_born
push	cs
call	near ptr game_start_new_ruler_day_born
push	cs
call	near ptr game_start_new_ruler_enter_age
mov	byte_1CAA0, al
push	ax

loc_1BDF8:				; CODE XREF: dseg:2BDF2  j		 /* DOS offset ---> 134B:8 */
call	far ptr	0C49h:46Ch
add	sp, 2

locret_1BE00:				; CODE XREF: dseg:2BDF0  j dseg:2BDF7  j
retf
game_start_new_ruler_birthday_info endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_start_new_ruler_change_what_sub proc far
push	cs

loc_1BE03:				; DATA XREF: dseg:28928  r dseg:289F3  w ...		 /* DOS offset ---> 134C:3 */
call	near ptr game_start_new_ruler_set_abilities
push	cs
call	near ptr game_start_new_ruler_change_what_sub_2
mov	al, byte_1CB70
sub	ah, ah
push	ax
mov	ax, 32
push	ax
mov	ax, 68
push	ax

loc_1BE18:				; CODE XREF: dseg:1BEDB  j dseg:1BF09  j		 /* DOS offset ---> 134D:8 */
call	far ptr	4B5h:6A4h ; s_51F4
add	sp, 6
mov	al, byte_1CB1F
inc	al
push	ax
call	far ptr	0C49h:4D2h ; s_C962
add	sp, 2
retf
game_start_new_ruler_change_what_sub endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_start_new_ruler_everything_ok_redirect proc far
; CODE XREF: game_start_new_ruler_func+65  p
jmp	short game_start_new_ruler_everything_ok
game_start_new_ruler_everything_ok_redirect endp


;     *************** S U B	R O U T	I N E     ***************************************


game_start_new_ruler_change_what proc far ; CODE XREF: game_start_new_ruler_change_what+8A  j
; dseg:2BE2C  j
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 6
push	ax
mov	ax, 1
push	ax
mov	ax, 511Eh	; 0x34AD0
; Text:	'Change what '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
dec	ax
cmp	ax, 5
ja	short game_start_new_ruler_everything_ok
shl	ax, 1
xchg	ax, bx
jmp	word ptr cs:[bx+5CAh]
;     ***************************************************************************
nop
setalc
add	ax, 5EEh
repne add ax, 602h
or	byte ptr loc_1060E, al
sub	al, al
push	ax
call	far ptr	0C49h:262h ; s_C6F2
add	sp, 2
sub	al, al
push	ax
call	far ptr	0C49h:39Ch ; s_C82C
add	sp, 2
jmp	short game_start_new_ruler_everything_ok
;     ***************************************************************************

loc_1BE7E:				; CODE XREF: dseg:2BEC2  p		 /* DOS offset ---> 1353:E */
push	cs
;     ***************************************************************************
db 0E8h	;   *
db  66h	; f
db 0FFh
db  0Eh
db 0E8h	;   *
db 0ACh	;   *
db 0FAh	;   *
db 0A2h	;   *
db  1Eh
db 0CBh	;   *
db  50h	; P
db  9Ah	;   *
db  9Ch	;   *
db    4
db  49h	; I
db  0Ch
db  83h	;   *
db 0C4h	;   *
db    2
db  0Eh
db 0E8h	;   *
db  6Ch	; l
db 0FFh
db 0EBh	;   *
db  0Ah
;     ***************************************************************************
push	cs
call	near ptr game_start_new_ruler_rule_which_province
jmp	short game_start_new_ruler_everything_ok
;     ***************************************************************************
push	cs
call	near ptr game_start_new_ruler_add_follower

game_start_new_ruler_everything_ok:	; CODE XREF: game_start_new_ruler_everything_ok_redirect  j
; game_start_new_ruler_change_what+1D  j	...
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 510Dh	; 0x34ABF
; Text:	'Is everything OK '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jnz	short loc_1BEBF
jmp	near ptr game_start_new_ruler_change_what
;     ***************************************************************************

loc_1BEBF:				; CODE XREF: game_start_new_ruler_change_what+88  j		 /* DOS offset ---> 1357:F */
call	far ptr	4B5h:244h ; s_4D94
retf
game_start_new_ruler_change_what endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_start_new_ruler_display proc far	; CODE XREF: game_start_new_ruler_func+1  p
call	far ptr	4B5h:244h ; s_4D94
mov	ax, 512Ah	; 0x34ADC
; Text:	'<New Ruler Data> '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	ax, 32
push	ax
mov	ax, 39

loc_1BEDE:				; CODE XREF: dseg:1BED9  j		 /* DOS offset ---> 1359:E */
push	ax

loc_1BEDF:				; CODE XREF: dseg:1BEC9  j dseg:2BED9  j		 /* DOS offset ---> 1359:F */
call	far ptr	3EFh:434h ; game_display_generals_list_x_y

loc_1BEE4:				; CODE XREF: dseg:1BEDE  j		 /* DOS offset ---> 135A:4 */
add	sp, 4
mov	ax, 5143h	; 0x34AF5
; Text:	'1. General: 2.Birthday: 3.Sex: 4.Ability: 5.Home: 6.Follower: '

loc_1BEEA:				; CODE XREF: dseg:2BEDD  j		 /* DOS offset ---> 135A:A */
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
retf
game_start_new_ruler_display endp


;     *************** S U B	R O U T	I N E     ***************************************


game_start_new_ruler_func proc far
push	cs
call	near ptr game_start_new_ruler_display
sub	al, al
push	ax
call	far ptr	0C49h:262h
add	sp, 2
sub	al, al
push	ax
call	far ptr	0C49h:39Ch ; s_C82C

loc_1BF0B:				; CODE XREF: dseg:1BEEE  j		 /* DOS offset ---> 135C:B */
add	sp, 2
push	cs

loc_1BF0F:				; CODE XREF: dseg:1BF03  j		 /* DOS offset ---> 135C:F */
call	near ptr game_start_new_ruler_birthday_info
push	cs
call	near ptr game_start_new_ruler_enter_sex
mov	byte_1CB1E, al

loc_1BF19:				; CODE XREF: dseg:1BDE6  j		 /* DOS offset ---> 135D:9 */
push	ax
call	far ptr	0C49h:49Ch ; s_C92C
add	sp, 2
push	cs
call	near ptr game_start_new_ruler_set_abilities
push	cs
call	near ptr game_start_new_ruler_change_what_sub_2

loc_1BF2A:				; CODE XREF: Q_1BF1E+48  j		 /* DOS offset ---> 135E:A */
mov	ax, 18h
push	ax
mov	ax, 67
push	ax
call	far ptr	0C49h:576h
add	sp, 4
mov	al, byte_1CB70
sub	ah, ah
push	ax
mov	ax, 32
push	ax

loc_1BF44:				; CODE XREF: dseg:2BECA  j		 /* DOS offset ---> 1360:4 */
mov	ax, 68

loc_1BF47:				; CODE XREF: Q_1BF1E+B  j		 /* DOS offset ---> 1360:7 */
push	ax
call	far ptr	4B5h:6A4h ; s_51F4
add	sp, 6
push	cs
call	near ptr game_start_new_ruler_rule_which_province
push	cs
call	near ptr game_start_new_ruler_add_follower
push	cs
call	near ptr game_start_new_ruler_everything_ok_redirect
retf
game_start_new_ruler_func endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

setup_game_start_display proc far

arg_0		= byte ptr  6

push	bp
mov	bp, sp
mov	ax, 7
push	ax
mov	ax, 10h
push	ax
mov	ax, 0Ch
push	ax
mov	ax, 4
push	ax
mov	ax, 2
push	ax

loc_1BF75:				; CODE XREF: dseg:2BF72  j		 /* DOS offset ---> 1363:5 */
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd

loc_1BF7A:				; CODE XREF: dseg:2BF76  j		 /* DOS offset ---> 1363:A */
mov	sp, bp
cmp	[bp+arg_0], 0

loc_1BF80:				; CODE XREF: Q_1BF1E+4E  j		 /* DOS offset ---> 1364:0 */
jnz	short loc_1BFAE
mov	ax, 4
push	ax

loc_1BF86:				; CODE XREF: Q_1BFA6+3A  j		 /* DOS offset ---> 1364:6 */
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
mov	sp, bp
mov	ax, 51D1h	; 0x34B83
; Text:	'Scenario Setup '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
mov	sp, bp
mov	ax, 0Ch
push	ax
mov	ax, 6
push	ax

loc_1BFA1:				; CODE XREF: dseg:1BF86  j		 /* DOS offset ---> 1366:1 */
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
mov	sp, bp
mov	ax, 51E2h	; 0x34B94
; Text:	'Setup '
jmp	short loc_1BFDA
;     ***************************************************************************
nop

loc_1BFAE:				; CODE XREF: setup_game_start_display:loc_1BF80  j		 /* DOS offset ---> 1366:E */
mov	ax, 4
push	ax
mov	ax, 5
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
mov	sp, bp
mov	ax, 51E8h	; 0x34B9A
; Text:	'Making '
push	ax

loc_1BFC1:				; CODE XREF: dseg:1BF84  j dseg:1BF8C  j ...		 /* DOS offset ---> 1368:1 */
call	far ptr	3EFh:6C0h ; system_execute_function
mov	sp, bp
mov	ax, 0Ch
push	ax
mov	ax, 6
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
mov	sp, bp
mov	ax, 51F7h	; 0x34BA9
; Text:	'Ruler '

loc_1BFDA:				; CODE XREF: setup_game_start_display+4D  j		 /* DOS offset ---> 1369:A */
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
mov	sp, bp

loc_1BFE2:				; 0x34BB7		 /* DOS offset ---> 136A:2 */
mov	ax, 5205h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
mov	sp, bp

loc_1BFED:				; CODE XREF: game_give_population_sub2+21  j		 /* DOS offset ---> 136A:D */
pop	bp
retf
setup_game_start_display endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


setup_game_start_query proc far
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 5220h	; 0x34BD2
; Text:	'Everything '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:0A24h ; game_input_query_display_OK
retf
setup_game_start_query endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

setup_game_clear_top_right_side_viewports proc far
push	bp
;     ***************************************************************************
db  8Bh	;   *
unk_1C00A	db 0ECh	;   *		; CODE XREF: game_give_population_sub2+15  j
db  83h	;   *
db 0ECh	;   *
db    2
db  2Bh	; +
db 0C0h	;   *
;     ***************************************************************************

loc_1C010:				; CODE XREF: game_give_population_sub2+7  j		 /* DOS offset ---> 136D:0 */
; game_give_population_sub2+23  j
push	ax
mov	ax, 16

loc_1C014:				; CODE XREF: dseg:1CA5A  P dseg:1CD02  P ...		 /* DOS offset ---> 136D:4 */
push	ax
;     ***************************************************************************
db 0B8h	;   *
db  18h
db    0
db  50h	; P
db 0A0h	;   *
db 0EFh	;   *
db  4Ch	; L
db  2Ah	; *
db 0E4h	;   *
db  48h	; H
db  99h	;   *
db  2Bh	; +
db 0C2h	;   *
db 0D1h	;   *
db 0F8h	;   *
db 0B1h	;   *
db    3
db 0D3h	;   *
db 0E0h	;   *
db  8Ah	;   *
db  4Eh	; N
db    6
db  2Ah	; *
unk_1C02C	db 0EDh	;   *		; CODE XREF: game_give_population_sub+E  j
db    3
db 0C1h	;   *
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db 0B8h	;   *
db  37h	; 7
db    0
db  50h	; P
db  9Ah	;   *
db  78h	; x
db    3
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ah
db 0FFh
db  76h	; v
db 0FEh	;   *
db 0B8h	;   *
db  27h	; '
db    0
db  50h	; P
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
;     ***************************************************************************

locret_1C04E:				; CODE XREF: dseg:2C099  j
retf
setup_game_clear_top_right_side_viewports endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


setup_game_difficulty_level_summary_view proc far
; CODE XREF: setup_game_difficulty_level_query+46  p
mov	al, 30h	; '0'
;     ***************************************************************************
db  50h	; P
db  0Eh
db 0E8h	;   *
db 0B1h	;   *
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db  8Ah	;   *
db  1Eh
db 0B3h	;   *
db  33h	; 3
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db 0FFh
db 0B7h	;   *
db  14h
db  52h	; R
db 0B8h	;   *
db  2Ch	; ,
db  52h	; R
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
unk_1C06C	db    6			; CODE XREF: dseg:1C120  p dseg:1C19B  p ...
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0CBh	;   *
setup_game_difficulty_level_summary_view endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

setup_game_difficulty_level_query proc far

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2

reselect_difficulty:			; CODE XREF: setup_game_difficulty_level_query+3D  j
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	word_1521A	; Hard

loc_1C083:				; CODE XREF: s_1C06C+C  j		 /* DOS offset ---> 1374:3 */
push	word_15218	; Medium
push	word_15216	; Beginner

loc_1C08B:				; CODE XREF: dseg:loc_1FB4C  P		 /* DOS offset ---> 1374:B */
mov	ax, 5245h	; 0x38B72
; Text:	'1. %s 2. %s 3. %s'
push	ax

loc_1C08F:				; CODE XREF: dseg:1C37D  p dseg:2C070  j		 /* DOS offset ---> 1374:F */
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 8
mov	ax, 3
push	ax
mov	ax, 1

loc_1C09E:				; CODE XREF: dseg:2C090  j		 /* DOS offset ---> 1375:E */
push	ax
mov	ax, 525Dh	; 0x34C0F
; Text:	'Select game level '
push	ax

loc_1C0A3:				; CODE XREF: dseg:2C09B  j		 /* DOS offset ---> 1376:3 */
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short reselect_difficulty
mov	al, byte ptr [bp+var_2]
mov	game_difficulty, al ; setup_game_difficulty_level
push	cs
call	near ptr setup_game_difficulty_level_summary_view
mov	sp, bp
pop	bp
retf
setup_game_difficulty_level_query endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


setup_game_view_other_wars_sub proc far	; CODE XREF: setup_game_view_other_wars+28  p
; dseg:1C0BD  j
mov	al, 64
;     ***************************************************************************
db  50h	; P
db  0Eh
db 0E8h	;   *
db  3Fh	; ?
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db 0A0h	;   *
db 0B4h	;   *
db  33h	; 3
db  24h	; $
db    8
db  3Ch	; <
unk_1C0D2	db    1			; CODE XREF: dseg:1C0BB  j dseg:1C0C1  j ...
db  1Bh
db 0DBh	;   *
db 0F7h	;   *
db 0DBh	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0FFh
db 0B7h	;   *
db  12h
db  52h	; R
db 0B8h	;   *
db  6Fh	; o
db  52h	; R
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0CBh	;   *
setup_game_view_other_wars_sub endp


;     *************** S U B	R O U T	I N E     ***************************************


setup_game_view_other_wars proc	far	; CODE XREF: dseg:1C0DF  j
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
;     ***************************************************************************
db 0B8h	;   *
db  93h	;   *
db  52h	; R
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db  9Ah	;   *
db 0D6h	;   *
db    9
db 0EFh	;   *
db    3
db  0Bh
db 0C0h	;   *
db  74h	; t
db    8
db  80h	;   *
db  0Eh
db 0B4h	;   *
db  33h	; 3
db    8
db 0EBh	;   *
db    6
;     ***************************************************************************
nop
and	options_value, 0F7h
push	cs
call	near ptr setup_game_view_other_wars_sub
retf
setup_game_view_other_wars endp


;     *************** S U B	R O U T	I N E     ***************************************


setup_game_select_game_mode_sub	proc far ; CODE	XREF: setup_game_select_game_mode+4A  p
mov	al, 80
;     ***************************************************************************
db  50h	; P
db  0Eh
db 0E8h	;   *
db 0EBh	;   *
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
unk_1C11F	db    2			; CODE XREF: dseg:1C10E  j
db 0A0h	;   *
db 0B4h	;   *
db  33h	; 3
db  24h	; $
db  10h
db  3Ch	; <
db    1
;     ***************************************************************************

loc_1C127:				; CODE XREF: dseg:1C15E  j		 /* DOS offset ---> 137E:7 */
sbb	bx, bx
inc	bx
shl	bx, 1

loc_1C12C:				; CODE XREF: dseg:1C125  j		 /* DOS offset ---> 137E:C */
push	word ptr [bx+521Ch]
mov	ax, 52AEh	; 0x34C60
; Text:	'5. Game mode: '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
retf
setup_game_select_game_mode_sub	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

setup_game_select_game_mode proc far
push	bp
mov	bp, sp
sub	sp, 2

loc_1C144:				; CODE XREF: setup_game_select_game_mode+36  j		 /* DOS offset ---> 1380:4 */
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	word ptr loc_1521E

loc_1C14D:				; CODE XREF: dseg:1C169  j		 /* DOS offset ---> 1380:D */
push	word_1521C
mov	ax, 52C6h	; 0x34C78
; Text:	'1. %s 2. %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
mov	ax, 2
push	ax
mov	ax, 1
push	ax
mov	ax, 52D9h	; 0x34C8B
; Text:	'Select game mode '
push	ax

loc_1C169:				; CODE XREF: dseg:1C14C  j		 /* DOS offset ---> 1382:9 */
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
cmp	ax, 0FFFFh
jz	short loc_1C144
cmp	ax, 1
jnz	short loc_1C182
and	options_value, 0EFh
jmp	short loc_1C187
;     ***************************************************************************

loc_1C182:				; CODE XREF: setup_game_select_game_mode+3B  j		 /* DOS offset ---> 1384:2 */
or	options_value, 10h

loc_1C187:				; CODE XREF: setup_game_select_game_mode+42  j		 /* DOS offset ---> 1384:7 */
push	cs
call	near ptr setup_game_select_game_mode_sub
mov	sp, bp
pop	bp
retf
setup_game_select_game_mode endp

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Eh
push	si

loc_1C197:				; CODE XREF: dseg:1C189  j		 /* DOS offset ---> 1385:7 */
test	options_value, 10h
jnz	short loc_1C1A1

loc_1C19E:				; CODE XREF: dseg:2C19A  j		 /* DOS offset ---> 1385:E */
jmp	loc_1C24D
;     ***************************************************************************

loc_1C1A1:				; CODE XREF: dseg:C19C  j dseg:1C1D8  j ...		 /* DOS offset ---> 1386:1 */
mov	word ptr [bp-2], 58h ; 'X'

loc_1C1A6:				; CODE XREF: dseg:1C1A0  j		 /* DOS offset ---> 1386:6 */
mov	word ptr [bp-0Ch], 0FDh	; '  *'

loc_1C1AB:				; CODE XREF: dseg:C205  j		 /* DOS offset ---> 1386:B */
mov	bx, [bp-2]
cmp	byte ptr [bx+19h], 0
jz	short loc_1C1FE
mov	al, 65h	; 'e'
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bx, [bp-2]
mov	[bx+0Fh], al
mov	al, 5Bh	; '['
push	ax

loc_1C1C8:				; CODE XREF: dseg:1C1E3  j		 /* DOS offset ---> 1388:8 */
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 0Ah
mov	bx, [bp-2]
mov	[bx+7],	al
mov	al, 5Bh	; '['
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 0Ah

loc_1C1E5:				; CODE XREF: dseg:1C1C6  j		 /* DOS offset ---> 138A:5 */
mov	bx, [bp-2]
mov	[bx+8],	al
mov	al, 47h	; 'G'
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 1Eh
mov	bx, [bp-2]
mov	[bx+9],	al

loc_1C1FE:				; CODE XREF: dseg:C1B2  j		 /* DOS offset ---> 138B:E */
add	word ptr [bp-2], 2Bh ; '+'
dec	word ptr [bp-0Ch]
jnz	short loc_1C1AB
mov	word ptr [bp-4], 2B34h
mov	word ptr [bp-0Eh], 10h

loc_1C211:				; CODE XREF: dseg:C24B  j		 /* DOS offset ---> 138D:1 */
mov	bx, [bp-4]

loc_1C214:				; CODE XREF: dseg:1C203  j		 /* DOS offset ---> 138D:4 */
cmp	word ptr [bx], 0
jz	short loc_1C244

loc_1C219:				; CODE XREF: dseg:1C259  j		 /* DOS offset ---> 138D:9 */
mov	byte ptr [bp-6], 0

loc_1C21D:				; CODE XREF: dseg:C242  j		 /* DOS offset ---> 138D:D */
mov	al, 3Dh	; '='
push	ax

loc_1C220:				; CODE XREF: dseg:1C21A  j		 /* DOS offset ---> 138E:0 */
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 14h
mov	si, [bp-6]
and	si, 0FFh
mov	bx, [bp-4]
mov	[bx+si+0Eh], al
mov	byte ptr [bx+9], 0FFh
inc	byte ptr [bp-6]

loc_1C23E:				; CODE XREF: dseg:1C264  j		 /* DOS offset ---> 138F:E */
cmp	byte ptr [bp-6], 10h
jb	short loc_1C21D

loc_1C244:				; CODE XREF: dseg:C217  j		 /* DOS offset ---> 1390:4 */
add	word ptr [bp-4], 29h ; ')'
dec	word ptr [bp-0Eh]
jnz	short loc_1C211

loc_1C24D:				; CODE XREF: dseg:loc_1C19E  j		 /* DOS offset ---> 1390:D */
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1C252:				; CODE XREF: dseg:C3E6  p		 /* DOS offset ---> 1391:2 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  47h	; G
db    2
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  68h	; h
;     ***************************************************************************

loc_1C265:				; CODE XREF: dseg:C2CB  j dseg:1C23E  j		 /* DOS offset ---> 1392:5 */
mov	bx, ax
add	word ptr [bx+8], 2000

loc_1C26C:				; CODE XREF: dseg:1C2AD  p		 /* DOS offset ---> 1392:C */
add	word ptr [bx+0Ah], 20000
adc	word ptr [bx+0Ch], 0
mov	al, 21
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 65
mov	bx, [bp-4]
mov	[bx+17h], al
mov	al, 15h

loc_1C28A:				; CODE XREF: dseg:1C279  j		 /* DOS offset ---> 1394:A */
push	ax

loc_1C28B:				; CODE XREF: dseg:1C354  p		 /* DOS offset ---> 1394:B */
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 65
mov	bx, [bp-4]
mov	[bx+16h], al
mov	al, 15h
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 65
mov	bx, [bp-4]

loc_1C2AB:				; CODE XREF: dseg:1C29C  j dseg:1C2A7  j		 /* DOS offset ---> 1396:B */
mov	[bx+18h], al
mov	ax, [bx+2]

loc_1C2B1:				; CODE XREF: dseg:1C3BE  p		 /* DOS offset ---> 1397:1 */
or	ax, ax
jz	short loc_1C2C1

loc_1C2B5:				; CODE XREF: dseg:C2BF  j		 /* DOS offset ---> 1397:5 */
mov	bx, ax
mov	byte ptr [bx+16h], 80
mov	ax, [bx]
or	ax, ax
jnz	short loc_1C2B5

loc_1C2C1:				; CODE XREF: dseg:C2B3  j dseg:1C2DA  j		 /* DOS offset ---> 1398:1 */
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jnz	short loc_1C265
mov	sp, bp

loc_1C2CF:				; CODE XREF: dseg:1C2C7  j		 /* DOS offset ---> 1398:F */
pop	bp
retf
;     ***************************************************************************
nop

loc_1C2D2:				; CODE XREF: dseg:C2FF  p		 /* DOS offset ---> 1399:2 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    6
db 0C7h	;   *
db  46h	; F
db 0FCh	;   *
db 0C4h	;   *
db  2Dh	; -
db 0C7h	;   *
unk_1C2DE	db  46h	; F		; CODE XREF: dseg:1C2CD  j
db 0FAh	;   *
db  29h	; )
db    0
;     ***************************************************************************

loc_1C2E2:				; CODE XREF: dseg:C2F0  j		 /* DOS offset ---> 139A:2 */
mov	bx, [bp-4]

loc_1C2E5:				; CODE XREF: dseg:1C2DC  j		 /* DOS offset ---> 139A:5 */
or	byte ptr [bx+13h], 30h

loc_1C2E9:				; CODE XREF: s_1FC80:loc_1FE06  P		 /* DOS offset ---> 139A:9 */
add	word ptr [bp-4], 23h ; '#'
dec	word ptr [bp-6]
jnz	short loc_1C2E2
mov	sp, bp

loc_1C2F4:				; CODE XREF: dseg:2C38E  p		 /* DOS offset ---> 139B:4 */
pop	bp
;     ***************************************************************************
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 22h
push	di
push	si
push	cs
call	loc_1C2D2
mov	al, game_difficulty
shl	al, 1
dec	al
mov	[bp-10h], al
test	options_value, 10h
jnz	short loc_1C316
jmp	loc_1C39C
;     ***************************************************************************

loc_1C316:				; CODE XREF: dseg:C311  j		 /* DOS offset ---> 139D:6 */
mov	byte ptr [bp-0Ch], 0

loc_1C31A:				; CODE XREF: dseg:1C2F9  j dseg:1C300  j		 /* DOS offset ---> 139D:A */
cmp	byte_10047, 0
jz	short loc_1C336

loc_1C321:				; CODE XREF: dseg:loc_1C334  j		 /* DOS offset ---> 139E:1 */
mov	al, [bp-0Ch]
sub	ah, ah
mov	si, ax

loc_1C328:				; CODE XREF: dseg:1C324  j		 /* DOS offset ---> 139E:8 */
mov	[bp+si-22h], al
inc	byte ptr [bp-0Ch]
mov	al, byte_10047
cmp	[bp-0Ch], al

loc_1C334:				; CODE XREF: dseg:1C330  j		 /* DOS offset ---> 139F:4 */
jb	short loc_1C321

loc_1C336:				; CODE XREF: dseg:C31F  j		 /* DOS offset ---> 139F:6 */
mov	byte ptr [bp-0Ch], 0
cmp	byte_10047, 0
jz	short loc_1C38A

loc_1C341:				; CODE XREF: dseg:C388  j		 /* DOS offset ---> 13A0:1 */
mov	al, byte_10047
push	ax

loc_1C345:				; CODE XREF: dseg:2C31E  j dseg:2C332  j		 /* DOS offset ---> 13A0:5 */
call	far ptr	57Ch:0FAh/* game_math_get_random_number */

loc_1C34A:				; CODE XREF: dseg:2C346  j		 /* DOS offset ---> 13A0:A */
add	sp, 2

loc_1C34D:				; CODE XREF: dseg:1C33F  j dseg:1C348  j		 /* DOS offset ---> 13A0:D */
mov	[bp-6],	al
mov	al, byte_10047
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */

loc_1C359:				; CODE XREF: dseg:2C39F  j		 /* DOS offset ---> 13A1:9 */
add	sp, 2
mov	[bp-8],	al
mov	si, [bp-6]

loc_1C362:				; CODE XREF: dseg:1C426  j		 /* DOS offset ---> 13A2:2 */
and	si, 0FFh
mov	al, [bp+si-22h]
mov	[bp-4],	al

loc_1C36C:				; CODE XREF: dseg:1C367  j		 /* DOS offset ---> 13A2:C */
mov	di, [bp-8]
and	di, 0FFh
mov	al, [bp+di-22h]
mov	[bp+si-22h], al
mov	al, [bp-4]
mov	[bp+di-22h], al
inc	byte ptr [bp-0Ch]
mov	al, byte_10047
cmp	[bp-0Ch], al
jb	short loc_1C341

loc_1C38A:				; CODE XREF: dseg:C33F  j dseg:1C370  j ...		 /* DOS offset ---> 13A4:A */
mov	si, word ptr byte_10047
and	si, 0FFh
mov	byte ptr [bp+si-22h], 0FFh

loc_1C396:				; CODE XREF: dseg:2C37C  j		 /* DOS offset ---> 13A5:6 */
lea	ax, [bp-22h]
jmp	short loc_1C3AE
;     ***************************************************************************
nop

loc_1C39C:				; CODE XREF: dseg:C313  j		 /* DOS offset ---> 13A5:C */
mov	al, byte_14CEE
sub	ah, ah
mov	cx, ax

loc_1C3A3:				; CODE XREF: dseg:2C396  j		 /* DOS offset ---> 13A6:3 */
shl	ax, 1
shl	ax, 1
shl	ax, 1

loc_1C3A9:				; CODE XREF: dseg:2C3A1  j		 /* DOS offset ---> 13A6:9 */
add	ax, cx

loc_1C3AB:				; CODE XREF: dseg:1C388  j		 /* DOS offset ---> 13A6:B */
add	ax, 52E1h

loc_1C3AE:				; CODE XREF: dseg:C399  j		 /* DOS offset ---> 13A6:E */
mov	[bp-2],	ax
mov	byte ptr [bp-0Eh], 0
cmp	byte ptr [bp-10h], 0
jz	short loc_1C3FA

loc_1C3BB:				; CODE XREF: dseg:C3F8  j		 /* DOS offset ---> 13A7:B */
mov	bx, [bp-2]
cmp	byte ptr [bx], 0FFh
jz	short loc_1C3FA
mov	al, 29h	; ')'
mul	byte ptr [bx]
mov	bx, ax
add	bx, 2B34h
mov	[bp-0Ah], bx
cmp	word ptr [bx], 0
jz	short loc_1C3EF
push	bx

loc_1C3D6:				; CODE XREF: dseg:1C3C3  j dseg:1C3CA  j		 /* DOS offset ---> 13A9:6 */
call	far ptr	542h:0BAh

loc_1C3DB:				; CODE XREF: dseg:1C3D6  j		 /* DOS offset ---> 13A9:B */
add	sp, 2
or	ax, ax
jnz	short loc_1C3EF
push	word ptr [bp-0Ah]
push	cs
call	loc_1C252
add	sp, 2

loc_1C3EC:				; CODE XREF: dseg:loc_2C3B1  j		 /* DOS offset ---> 13AA:C */
inc	byte ptr [bp-0Eh]

loc_1C3EF:				; CODE XREF: dseg:C3D3  j dseg:C3E0  j		 /* DOS offset ---> 13AA:F */
inc	word ptr [bp-2]
mov	al, [bp-0Eh]
cmp	[bp-10h], al
ja	short loc_1C3BB

loc_1C3FA:				; CODE XREF: dseg:C3B9  j dseg:C3C1  j		 /* DOS offset ---> 13AB:A */
pop	si
pop	di
mov	sp, bp

loc_1C3FE:				; CODE XREF: dseg:2C441  j		 /* DOS offset ---> 13AB:E */
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_C400		proc far		 /* DOS offset ---> 13AC:0 */

var_2		= byte ptr -2

push	bp
mov	bp, sp
sub	sp, 2
mov	[bp+var_2], 0

loc_1C40A:				; CODE XREF: s_C400+20  j		 /* DOS offset ---> 13AC:A */
sub	al, al
mov	bl, [bp+var_2]
sub	bh, bh
mov	[bx+3360h], al
mov	[bx+4CF2h], al
inc	[bp+var_2]
cmp	[bp+var_2], 0Ch
jb	short loc_1C40A
mov	byte_14CEF, al
mov	al, 3
push	ax

loc_1C428:				; CODE XREF: dseg:1C332  j dseg:1C34A  j ...		 /* DOS offset ---> 13AE:8 */
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
inc	al
mov	game_difficulty, al

loc_1C432:				; CODE XREF: dseg:1C326  j dseg:1DB36  P ...		 /* DOS offset ---> 13AF:2 */
or	options_value, 8

loc_1C437:				; CODE XREF: dseg:2C420  j		 /* DOS offset ---> 13AF:7 */
and	options_value, 0EFh
mov	sp, bp
pop	bp
retf
s_C400		endp		 /* DOS offset ---> 13AC:0 */

;     ***************************************************************************
sub	ax, ax
push	ax
mov	ax, 0A0h ; '  *'

loc_1C446:				; CODE XREF: dseg:2C438  j		 /* DOS offset ---> 13B0:6 */
push	ax
mov	ax, 28h	; '('
push	ax
mov	ax, 10h

loc_1C44E:				; CODE XREF: dseg:2C443  j		 /* DOS offset ---> 13B0:E */
push	ax
mov	ax, 14h
push	ax

loc_1C453:				; CODE XREF: dseg:1C448  j		 /* DOS offset ---> 13B1:3 */
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
retf
;     ***************************************************************************
call	far ptr	0:15B3h

loc_1C461:				; CODE XREF: dseg:1D77B  P dseg:1DC9B  P		 /* DOS offset ---> 13B2:1 */
sub	ax, ax
push	ax
call	far ptr	4B5h:0E6h
add	sp, 2

loc_1C46C:				; CODE XREF: dseg:2C45C  j		 /* DOS offset ---> 13B2:C */
mov	ax, 2
push	ax
sub	ax, ax
push	ax
push	ax
push	ax
call	far ptr	4B5h:1CEh
add	sp, 8
mov	ax, 1

loc_1C480:				; CODE XREF: dseg:1C4C1  j		 /* DOS offset ---> 13B4:0 */
push	ax
call	far ptr	4B5h:0E6h
add	sp, 2

loc_1C489:				; CODE XREF: dseg:2C7D2  p		 /* DOS offset ---> 13B4:9 */
mov	al, 1
push	ax
call	far ptr	6EBh:96h
add	sp, 2
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


s_C496		proc far		; CODE XREF: s_C6F2+5F  p		 /* DOS offset ---> 13B5:6 */
sub	ax, ax
push	ax
mov	ax, 8
push	ax
mov	ax, 1Ch
push	ax
mov	ax, 0A8h ; '  *'
push	ax
mov	ax, 33h	; '3'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
retf
s_C496		endp		 /* DOS offset ---> 13B5:6 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_C4B2		proc far		; CODE XREF: s_C6F2+58  p		 /* DOS offset ---> 13B7:2 */

arg_0		= byte ptr  6

push	bp

loc_1C4B3:				; CODE XREF: dseg:1C48B  j		 /* DOS offset ---> 13B7:3 */
mov	bp, sp

loc_1C4B5:				; CODE XREF: dseg:1C47D  j		 /* DOS offset ---> 13B7:5 */
sub	sp, 2
push	si

loc_1C4B9:				; CODE XREF: dseg:2C511  j		 /* DOS offset ---> 13B7:9 */
sub	ax, ax
push	ax
mov	ax, 10h
push	ax
mov	ax, 28h	; '('
push	ax
mov	cl, 3
mov	al, [bp+arg_0]

loc_1C4C9:				; CODE XREF: dseg:1CAB5  p dseg:1CC78  p ...		 /* DOS offset ---> 13B8:9 */
sub	ah, ah
add	ax, 13h
shl	ax, cl
push	ax
mov	cx, 26h	; '&'
push	cx
mov	si, ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
push	si
mov	ax, 26h	; '&'
push	ax

loc_1C4E4:				; CODE XREF: dseg:1C51F  j		 /* DOS offset ---> 13BA:4 */
call	far ptr	3EFh:434h
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
s_C4B2		endp		 /* DOS offset ---> 13B7:2 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_C4F2		proc far		; CODE XREF: s_C51A+16  p s_C51A+6F  p ...		 /* DOS offset ---> 13BB:2 */

arg_4		= word ptr  0Ah

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db 0FFh
db  76h	; v
db    8
db 0FFh
db  76h	; v
unk_1C4FA	db    6			; CODE XREF: dseg:1C4F1  j
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  8Bh	;   *
db 0E5h	;   *
db  83h	;   *
db  7Eh	; ~
unk_1C504	db  0Ah			; CODE XREF: dseg:2C4C6  j
db    0
db  74h	; t
db  10h
;     ***************************************************************************

loc_1C508:				; CODE XREF: s_C4F2+24  j		 /* DOS offset ---> 13BC:8 */
mov	ax, 533Ch
push	ax
call	far ptr	3EFh:6C0h

loc_1C511:				; CODE XREF: dseg:1C4F7  j dseg:1C50B  j		 /* DOS offset ---> 13BD:1 */
mov	sp, bp

loc_1C513:				; CODE XREF: dseg:2C4B8  j dseg:1C4E4  j		 /* DOS offset ---> 13BD:3 */
dec	[bp+arg_4]
jnz	short loc_1C508

loc_1C518:				; CODE XREF: dseg:2C60A  p		 /* DOS offset ---> 13BD:8 */
pop	bp
;     ***************************************************************************
db 0CBh	;   *
s_C4F2		endp		 /* DOS offset ---> 13BB:2 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_C51A		proc far		 /* DOS offset ---> 13BD:A */

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp
mov	bp, sp
sub	sp, 6
mov	ax, [bp+arg_0]
mov	[bp+var_6], ax

loc_1C526:				; CODE XREF: dseg:1C494  p dseg:1C73B  p ...		 /* DOS offset ---> 13BE:6 */
push	[bp+arg_6]
push	[bp+arg_4]
push	[bp+arg_2]
push	cs
call	near ptr s_C4F2
add	sp, 6
mov	[bp+var_4], 0
cmp	[bp+arg_6], 0
jnz	short loc_1C544
jmp	loc_1C600
;     ***************************************************************************

loc_1C544:				; CODE XREF: s_C51A+25  j s_C51A+DB  j		 /* DOS offset ---> 13C0:4 */
push	[bp+arg_4]

loc_1C547:				; CODE XREF: dseg:2C535  j		 /* DOS offset ---> 13C0:7 */
mov	ax, [bp+var_4]
add	ax, [bp+arg_2]
push	ax
call	far ptr	3EFh:434h

loc_1C553:				; CODE XREF: dseg:2C526  j		 /* DOS offset ---> 13C1:3 */
add	sp, 4
call	far ptr	3EFh:79Ah
mov	[bp+var_2], al

loc_1C55E:				; CODE XREF: dseg:1C5B5  j		 /* DOS offset ---> 13C1:E */
cmp	al, 0Dh
jnz	short loc_1C56E
cmp	[bp+var_4], 0
jnz	short loc_1C56B
jmp	loc_1C5ED
;     ***************************************************************************

loc_1C56B:				; CODE XREF: s_C51A+4C  j		 /* DOS offset ---> 13C2:B */
jmp	loc_1C600
;     ***************************************************************************

loc_1C56E:				; CODE XREF: s_C51A+46  j		 /* DOS offset ---> 13C2:E */
cmp	[bp+var_2], 7Fh	; ''
jnz	short loc_1C592

loc_1C574:				; CODE XREF: dseg:1C56A  j		 /* DOS offset ---> 13C3:4 */
mov	[bp+var_4], 0
mov	ax, [bp+var_6]
mov	[bp+arg_0], ax
push	[bp+arg_6]
push	[bp+arg_4]
push	[bp+arg_2]
push	cs
call	near ptr s_C4F2
add	sp, 6
jmp	short loc_1C5ED
;     ***************************************************************************
nop

loc_1C592:				; CODE XREF: s_C51A+58  j dseg:1C564  j ...		 /* DOS offset ---> 13C5:2 */
cmp	[bp+var_2], 8
jnz	short loc_1C5CA
cmp	[bp+var_4], 0
jz	short loc_1C5ED
mov	bx, [bp+arg_0]

loc_1C5A1:				; CODE XREF: dseg:2C5F9  j		 /* DOS offset ---> 13C6:1 */
dec	[bp+arg_0]
mov	byte ptr [bx], 0
push	[bp+arg_4]

loc_1C5AA:				; CODE XREF: dseg:1C592  j		 /* DOS offset ---> 13C6:A */
dec	[bp+var_4]
mov	ax, [bp+var_4]
add	ax, [bp+arg_2]
push	ax

loc_1C5B4:				; CODE XREF: dseg:1C55C  j		 /* DOS offset ---> 13C7:4 */
call	far ptr	3EFh:434h
add	sp, 4

loc_1C5BC:				; CODE XREF: dseg:1C6C5  p dseg:1D41E  P		 /* DOS offset ---> 13C7:C */
mov	ax, 533Eh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
jmp	short loc_1C5ED
;     ***************************************************************************

loc_1C5CA:				; CODE XREF: s_C51A+7C  j		 /* DOS offset ---> 13C8:A */
cmp	[bp+var_2], 1Bh
jz	short loc_1C5FA
mov	al, [bp+var_2]
mov	bx, [bp+arg_0]
inc	[bp+arg_0]
mov	[bx], al
sub	ah, ah
push	ax
mov	ax, 5340h
push	ax
call	far ptr	3EFh:6E8h

loc_1C5E7:				; CODE XREF: dseg:1C5E4  j dseg:1C660  j		 /* DOS offset ---> 13CA:7 */
add	sp, 4
inc	[bp+var_4]

loc_1C5ED:				; CODE XREF: s_C51A+4E  j s_C51A+75  j ...		 /* DOS offset ---> 13CA:D */
mov	ax, [bp+arg_6]
cmp	[bp+var_4], ax
jnb	short loc_1C5F8
jmp	loc_1C544
;     ***************************************************************************

loc_1C5F8:				; CODE XREF: s_C51A+D9  j		 /* DOS offset ---> 13CB:8 */
jmp	short loc_1C600
;     ***************************************************************************

loc_1C5FA:				; CODE XREF: s_C51A+B4  j dseg:2C596  j ...		 /* DOS offset ---> 13CB:A */
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1C600:				; CODE XREF: s_C51A+27  j		 /* DOS offset ---> 13CC:0 */
; s_C51A:loc_1C56B  j ...
mov	bx, [bp+arg_0]
mov	byte ptr [bx], 0
mov	sp, bp
pop	bp
retf
s_C51A		endp		 /* DOS offset ---> 13BD:A */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_C60A		proc far		; CODE XREF: s_C6F2+4E  p		 /* DOS offset ---> 13CC:A */

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp
mov	bp, sp
sub	sp, 6
mov	ax, [bp+arg_0]
mov	[bp+var_6], ax
push	[bp+arg_6]
push	[bp+arg_4]

loc_1C61C:				; CODE XREF: dseg:2C615  j dseg:2C619  j		 /* DOS offset ---> 13CD:C */
push	[bp+arg_2]
push	cs
call	near ptr s_C4F2
add	sp, 6
mov	[bp+var_4], 0
cmp	[bp+arg_6], 0
jnz	short loc_1C634
jmp	loc_1C6E8
;     ***************************************************************************

loc_1C634:				; CODE XREF: s_C60A+25  j		 /* DOS offset ---> 13CF:4 */
; s_C60A:loc_1C6E5  j
push	[bp+arg_4]
mov	ax, [bp+arg_2]
add	ax, [bp+var_4]
push	ax
call	far ptr	3EFh:434h
add	sp, 4
call	far ptr	3EFh:79Ah
mov	[bp+var_2], al
cmp	al, 0Dh
jnz	short loc_1C65E
cmp	[bp+var_4], 0

loc_1C656:				; CODE XREF: dseg:1C5F4  j dseg:1C602  j ...		 /* DOS offset ---> 13D1:6 */
jnz	short loc_1C65B
jmp	loc_1C6DD
;     ***************************************************************************

loc_1C65B:				; CODE XREF: s_C60A:loc_1C656  j		 /* DOS offset ---> 13D1:B */
jmp	loc_1C6E8
;     ***************************************************************************

loc_1C65E:				; CODE XREF: s_C60A+46  j		 /* DOS offset ---> 13D1:E */
cmp	[bp+var_2], 7Fh	; ''
jnz	short loc_1C682

loc_1C664:				; CODE XREF: dseg:1C633  j dseg:1C654  j		 /* DOS offset ---> 13D2:4 */
mov	[bp+var_4], 0
mov	ax, [bp+var_6]

loc_1C66C:				; CODE XREF: dseg:1C5E6  j dseg:1C662  j		 /* DOS offset ---> 13D2:C */
mov	[bp+arg_0], ax
push	[bp+arg_6]

loc_1C672:				; CODE XREF: dseg:1D08A  P		 /* DOS offset ---> 13D3:2 */
push	[bp+arg_4]
push	[bp+arg_2]
push	cs
call	near ptr s_C4F2
add	sp, 6
jmp	short loc_1C6DD
;     ***************************************************************************
nop

loc_1C682:				; CODE XREF: s_C60A+58  j		 /* DOS offset ---> 13D4:2 */
cmp	[bp+var_2], 8
jnz	short loc_1C6BA
cmp	[bp+var_4], 0
jz	short loc_1C6DD
mov	bx, [bp+arg_0]
dec	[bp+arg_0]
mov	byte ptr [bx], 0

loc_1C697:				; CODE XREF: dseg:1C6E2  j		 /* DOS offset ---> 13D5:7 */
push	[bp+arg_4]
dec	[bp+var_4]
mov	ax, [bp+var_4]
add	ax, [bp+arg_2]
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 534Bh
push	ax

loc_1C6B0:				; DATA XREF: game_messenger_travel_results:loc_1371A  r		 /* DOS offset ---> 13D7:0 */
call	far ptr	3EFh:6C0h

loc_1C6B5:				; CODE XREF: dseg:1C6D7  j		 /* DOS offset ---> 13D7:5 */
add	sp, 2
jmp	short loc_1C6DD
;     ***************************************************************************

loc_1C6BA:				; CODE XREF: s_C60A+7C  j		 /* DOS offset ---> 13D7:A */
cmp	[bp+var_2], 1Bh
jz	short loc_1C6DD

loc_1C6C0:		 /* DOS offset ---> 13D8:0 */
mov	al, [bp+var_2]
mov	bx, [bp+arg_0]

loc_1C6C6:				; DATA XREF: dseg:3A06  r dseg:3A35  r ...		 /* DOS offset ---> 13D8:6 */
inc	[bp+arg_0]

loc_1C6C9:				; DATA XREF: dseg:loc_139FC  w		 /* DOS offset ---> 13D8:9 */
mov	[bx], al

loc_1C6CB:				; CODE XREF: dseg:1C6C2  j		 /* DOS offset ---> 13D8:B */
sub	ah, ah

loc_1C6CD:				; DATA XREF: dseg:loc_13C8A  w		 /* DOS offset ---> 13D8:D */
push	ax
mov	ax, 534Dh
push	ax
call	far ptr	3EFh:6E8h

loc_1C6D7:				; CODE XREF: dseg:1C6B5  j		 /* DOS offset ---> 13D9:7 */
add	sp, 4
inc	[bp+var_4]

loc_1C6DD:				; CODE XREF: s_C60A+4E  j s_C60A+75  j ...		 /* DOS offset ---> 13D9:D */
mov	ax, [bp+var_4]
cmp	[bp+arg_6], ax

loc_1C6E3:				; CODE XREF: dseg:1C68A  j dseg:1C695  j		 /* DOS offset ---> 13DA:3 */
jbe	short loc_1C6E8

loc_1C6E5:				; CODE XREF: dseg:1C6CA  j		 /* DOS offset ---> 13DA:5 */
jmp	loc_1C634
;     ***************************************************************************

loc_1C6E8:				; CODE XREF: s_C60A+27  j		 /* DOS offset ---> 13DA:8 */
; s_C60A:loc_1C65B  j ...
mov	bx, [bp+arg_0]

loc_1C6EB:				; DATA XREF: dseg:loc_13A22  w		 /* DOS offset ---> 13DA:B */
; dseg:3A0F  w
mov	byte ptr [bx], 0
mov	sp, bp
pop	bp
retf
s_C60A		endp		 /* DOS offset ---> 13CC:A */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_C6F2		proc far		 /* DOS offset ---> 13DB:2 */

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  6

push	bp
mov	bp, sp
sub	sp, 4
cmp	[bp+arg_0], 0

loc_1C6FC:				; DATA XREF: dseg:39F0  w		 /* DOS offset ---> 13DB:C */
jnz	short loc_1C704

loc_1C6FE:				; DATA XREF: dseg:39F4  w		 /* DOS offset ---> 13DB:E */
mov	ax, 5358h
jmp	short loc_1C707
;     ***************************************************************************
nop

loc_1C704:				; CODE XREF: s_C6F2:loc_1C6FC  j		 /* DOS offset ---> 13DC:4 */
mov	ax, 5360h

loc_1C707:				; CODE XREF: s_C6F2+F  j		 /* DOS offset ---> 13DC:7 */
mov	[bp+var_2], ax
cmp	[bp+arg_0], 0

loc_1C70E:				; CODE XREF: dseg:1C78F  j		 /* DOS offset ---> 13DC:E */
jnz	short loc_1C716
mov	ax, 5320h

loc_1C713:		 /* DOS offset ---> 13DD:3 */
jmp	short loc_1C719
;     ***************************************************************************
nop

loc_1C716:				; CODE XREF: s_C6F2:loc_1C70E  j		 /* DOS offset ---> 13DD:6 */
; DATA XREF: game_spy_rival_tigers_select_rulers:loc_13C4A  r
mov	ax, 532Eh

loc_1C719:				; CODE XREF: s_C6F2:loc_1C713  j		 /* DOS offset ---> 13DD:9 */
; DATA XREF: game_spy_rival_tigers_select_rulers-FF9E  r
mov	[bp+var_4], ax

loc_1C71C:				; CODE XREF: s_C6F2+75  j		 /* DOS offset ---> 13DD:C */
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	[bp+var_2]
mov	ax, 5369h
push	ax

loc_1C728:				; system_output_display_text		 /* DOS offset ---> 13DE:8 */
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, 0Ch
push	ax

loc_1C734:		 /* DOS offset ---> 13DF:4 */
mov	ax, 0B0h ; '  *'
push	ax
mov	ax, 2Eh	; '.'
push	ax
push	[bp+var_4]
push	cs
call	near ptr s_C60A
add	sp, 8
sub	al, al
push	ax
push	cs
call	near ptr s_C4B2
add	sp, 2
push	cs
call	near ptr s_C496
mov	ax, 5379h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:0A24h
or	ax, ax
jz	short loc_1C71C
mov	sp, bp
pop	bp
retf
s_C6F2		endp		 /* DOS offset ---> 13DB:2 */

;     ***************************************************************************
nop

loc_1C76E:				; CODE XREF: dseg:1C75A  j		 /* DOS offset ---> 13E2:E */
push	bp
mov	bp, sp
cmp	byte ptr [bp+6], 14h
ja	short loc_1C78A
cmp	byte ptr [bp+8], 1
jnz	short loc_1C784
sub	al, al

loc_1C77F:				; CODE XREF: dseg:1C719  j dseg:1C735  j ...		 /* DOS offset ---> 13E3:F */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1C783:				; CODE XREF: dseg:1C70B  j		 /* DOS offset ---> 13E4:3 */
nop

loc_1C784:				; CODE XREF: dseg:C77B  j		 /* DOS offset ---> 13E4:4 */
mov	al, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1C78A:				; CODE XREF: dseg:C775  j		 /* DOS offset ---> 13E4:A */
cmp	byte ptr [bp+6], 14h
jbe	short loc_1C7A8

loc_1C790:				; CODE XREF: dseg:1C78D  j		 /* DOS offset ---> 13E5:0 */
cmp	byte ptr [bp+6], 28h ; '('
ja	short loc_1C7A8
cmp	byte ptr [bp+8], 1
jnz	short loc_1C7A2
mov	al, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1C7A2:				; CODE XREF: dseg:C79A  j		 /* DOS offset ---> 13E6:2 */
mov	al, 3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1C7A8:				; CODE XREF: dseg:C78E  j dseg:C794  j ...		 /* DOS offset ---> 13E6:8 */
cmp	byte ptr [bp+8], 1
jnz	short loc_1C7B4
mov	al, 4
mov	sp, bp

loc_1C7B2:				; CODE XREF: dseg:1D65A  P		 /* DOS offset ---> 13E7:2 */
pop	bp
retf
;     ***************************************************************************

loc_1C7B4:				; CODE XREF: dseg:C7AC  j		 /* DOS offset ---> 13E7:4 */
mov	al, 5
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	ax, ax
push	ax
mov	ax, 10h
push	ax
mov	ax, 5
push	ax

loc_1C7C8:				; CODE XREF: dseg:1C85D  j		 /* DOS offset ---> 13E8:8 */
mov	ax, 50h	; 'P'
push	ax
mov	ax, 42h	; 'B'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
mov	sp, bp

loc_1C7D7:				; CODE XREF: dseg:1C7D3  j		 /* DOS offset ---> 13E9:7 */
mov	al, [bp+6]

loc_1C7DA:				; CODE XREF: dseg:2C7CF  j		 /* DOS offset ---> 13E9:A */
sub	ah, ah
push	ax
mov	ax, 5382h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
push	ax
mov	ax, 30h	; '0'
push	ax
mov	ax, 0Dh
push	ax
mov	ax, 0B0h ; '  *'
push	ax
mov	ax, 33h	; '3'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	al, byte ptr unk_1CB1C
sub	ah, ah
push	ax
mov	al, byte_1CB1B
push	ax
mov	al, byte_1CB1A
push	ax
push	word ptr loc_14F9E+2
push	word ptr loc_14F9E

loc_1C81B:				; CODE XREF: dseg:2C834  j		 /* DOS offset ---> 13ED:B */
push	word ptr unk_14F9C
mov	ax, 5393h
push	ax
call	far ptr	3EFh:6E8h
;     ***************************************************************************
db 83h
db 0C4h	;   *
word_1C82A	dw 0CB0Eh		; DATA XREF: Q_CD98+16  w
byte_1C82C	db 55h			; DATA XREF: game_mil_hire_reassign_troops_query+65  r
; game_mil_hire_reassign_troops_query+A5  w ...
db 8Bh
word_1C82E	dw 2BECh		; DATA XREF: game_mil_hire_reassign_troops_query+51  r
; game_mil_hire_reassign_troops_query+5F  r ...
word_1C830	dw 50C0h		; DATA XREF: game_mil_hire_reassign_troops_query+55  r
; game_mil_hire_reassign_troops_query+5B  r ...
;     ***************************************************************************
mov	ax, 10h
push	ax

loc_1C836:				; CODE XREF: dseg:2C828  j		 /* DOS offset ---> 13EF:6 */
mov	ax, 6
push	ax
cmp	byte ptr [bp+6], 1
sbb	ax, ax

loc_1C840:				; CODE XREF: dseg:2C81B  j dseg:2C836  j		 /* DOS offset ---> 13F0:0 */
and	al, 0A8h

loc_1C842:				; CODE XREF: dseg:1C83F  j		 /* DOS offset ---> 13F0:2 */
add	ax, 78h	; 'x'
push	ax

loc_1C846:				; CODE XREF: dseg:2C957  p		 /* DOS offset ---> 13F0:6 */
mov	ax, 33h	; '3'
;     ***************************************************************************
db  50h	; P
db  9Ah	;   *
db  78h	; x
db    3
db    0
db    0
db  8Bh	;   *
db 0E5h	;   *
db  80h	;   *
db  7Eh	; ~
db    6
db    0
db  75h	; u
db  15h
db 0B8h	;   *
db  20h
unk_1C859	db    0			; CODE XREF: dseg:1C7E3  j dseg:1C7F5  j
db  50h	; P
db 0B8h	;   *
db  33h	; 3
db    0
db  50h	; P
db  9Ah	;   *
db  34h	; 4
db    4
unk_1C862	db 0EFh	;   *		; CODE XREF: dseg:1C814  j dseg:1C857  j
db    3
db  8Bh	;   *
db 0E5h	;   *
db 0B8h	;   *
db  20h
db  53h	; S
db 0EBh	;   *
unk_1C86A	db  20h			; CODE XREF: dseg:1C7D5  j
;     ***************************************************************************
nop
mov	ax, 78h	; 'x'
push	ax

loc_1C870:				; CODE XREF: dseg:1D864  P		 /* DOS offset ---> 13F3:0 */
mov	ax, 33h	; '3'
push	ax
call	far ptr	3EFh:434h
mov	sp, bp
cmp	byte ptr loc_1532E, 0
jnz	short loc_1C888
mov	ax, 53AFh
jmp	short loc_1C88B
;     ***************************************************************************
nop

loc_1C888:				; CODE XREF: dseg:C880  j		 /* DOS offset ---> 13F4:8 */
mov	ax, 532Eh

loc_1C88B:				; CODE XREF: dseg:C885  j		 /* DOS offset ---> 13F4:B */
push	ax
call	far ptr	3EFh:6C0h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1C896:				; CODE XREF: dseg:1C940  j		 /* DOS offset ---> 13F5:6 */
push	bp
mov	bp, sp
sub	ax, ax
push	ax
mov	ax, 10h
push	ax
mov	ax, 2
push	ax
mov	ax, 30h	; '0'
push	ax
mov	ax, 33h	; '3'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
mov	sp, bp
mov	bl, [bp+6]
sub	bh, bh
shl	bx, 1
push	word ptr [bx+361Ah]
mov	ax, 53B4h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	ax, ax
push	ax
mov	ax, 10h
push	ax
mov	ax, 2
push	ax
mov	ax, 30h	; '0'
push	ax
mov	ax, 37h	; '7'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
mov	sp, bp

loc_1C8E9:				; CODE XREF: dseg:1C8D6  j		 /* DOS offset ---> 13FA:9 */
mov	al, [bp+6]
sub	ah, ah
push	ax
mov	ax, 53BBh
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp

loc_1C8FD:				; CODE XREF: dseg:1C8BC  j dseg:1C8C6  j		 /* DOS offset ---> 13FB:D */
mov	bp, sp
sub	ax, ax
push	ax

loc_1C902:				; CODE XREF: dseg:2C8FB  j		 /* DOS offset ---> 13FC:2 */
mov	ax, 10h

loc_1C905:				; CODE XREF: dseg:2C900  j		 /* DOS offset ---> 13FC:5 */
push	ax
mov	ax, 2
push	ax
mov	ax, 30h	; '0'
push	ax

loc_1C90E:				; CODE XREF: dseg:2C8C0  j		 /* DOS offset ---> 13FC:E */
mov	ax, 3Dh	; '='
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
mov	sp, bp
mov	al, [bp+6]
sub	ah, ah
push	ax
mov	ax, 53C2h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_C92C		proc far		 /* DOS offset ---> 13FE:C */

arg_0		= byte ptr  6

push	bp
mov	bp, sp

loc_1C92F:				; CODE XREF: dseg:1C90E  j dseg:1C922  j		 /* DOS offset ---> 13FE:F */
sub	ax, ax
push	ax

loc_1C932:				; CODE XREF: dseg:1C892  j		 /* DOS offset ---> 13FF:2 */
mov	ax, 10h
push	ax
mov	ax, 6
push	ax
mov	ax, 40h	; '@'
push	ax
mov	ax, 33h	; '3'
push	ax

loc_1C942:				; CODE XREF: dseg:1C93E  j		 /* DOS offset ---> 1400:2 */
call	far ptr	juqiang_draw_shape_to_video_buffer

loc_1C947:				; CODE XREF: dseg:1CF47  p		 /* DOS offset ---> 1400:7 */
mov	sp, bp
mov	bl, [bp+arg_0]
sub	bh, bh

loc_1C94E:				; CODE XREF: dseg:2C979  j		 /* DOS offset ---> 1400:E */
shl	bx, 1
push	word ptr [bx+4F96h]
mov	ax, 53CEh
push	ax
call	far ptr	3EFh:6E8h

loc_1C95D:				; CODE XREF: dseg:1C958  j		 /* DOS offset ---> 1401:D */
mov	sp, bp
pop	bp
retf
s_C92C		endp		 /* DOS offset ---> 13FE:C */

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
cmp	word_14CF0, 0
jz	short loc_1C995

loc_1C96F:				; CODE XREF: dseg:1C96A  j		 /* DOS offset ---> 1402:F */
sub	ax, ax
push	ax
mov	ax, 3B90h
push	ax
mov	ax, 2
push	ax
;     ***************************************************************************
db 2Bh
unk_1C97B	db 0C0h	;   *		; CODE XREF: dseg:2C96C  j
db 50h
db 8Bh
db  1Eh
db 0F0h	;   *
unk_1C980	db  4Ch	; L		; DATA XREF: s_12858  w dseg:1EB68  r ...
db 0FFh
db  77h	; w
db  1Eh
db 0FFh
db  77h	; w
db  1Ch
;     ***************************************************************************
call	far ptr	0:5E6h
add	sp, 0Ch

loc_1C98F:				; CODE XREF: dseg:1C9E9  j dseg:2C98C  j ...		 /* DOS offset ---> 1404:F */
mov	word_14CF0, 0

loc_1C995:				; CODE XREF: dseg:C96D  j		 /* DOS offset ---> 1405:5 */
sub	ax, ax
push	ax
mov	ax, 10h
push	ax
mov	ax, 2
push	ax
mov	ax, 68h	; 'h'
push	ax
mov	ax, 35h	; '5'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	al, [bp+6]
sub	ah, ah
push	ax
mov	ax, 53D5h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	al, [bp+6]
dec	al
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	[bp-2],	ax
sub	ax, ax
push	ax
mov	al, byte ptr loc_10056+1
sub	ah, ah

loc_1C9DB:				; CODE XREF: dseg:1C99F  j dseg:1C9AE  j ...		 /* DOS offset ---> 1409:B */
mov	cx, ax
shl	ax, 1

loc_1C9DF:				; CODE XREF: dseg:1C98E  j		 /* DOS offset ---> 1409:F */
add	ax, cx
shl	ax, 1
add	ax, 3AD0h
push	ax
mov	ax, 2
push	ax

loc_1C9EB:				; CODE XREF: dseg:1C9D9  j		 /* DOS offset ---> 140A:B */
sub	ax, ax
push	ax
mov	bx, [bp-2]
push	word ptr [bx+1Eh]
push	word ptr [bx+1Ch]
call	far ptr	0:5E6h
;     ***************************************************************************
word_1C9FC	dw 468Bh		; DATA XREF: s_4F44:loc_14FC9  r
; game_personal_func-FEB5  w ...
db 0FEh	;   *
;     ***************************************************************************
mov	word_14CF0, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	cl, 3
mov	ax, [bp+6]
shl	ax, cl
add	ax, 6
mov	[bp+6],	ax
add	word ptr [bp+8], 7
mov	ax, 3
push	ax
mov	cx, [bp+8]
add	cx, 2Ah	; '*'
push	cx
mov	cx, [bp+6]
add	cx, 44h	; 'D'
push	cx
push	word ptr [bp+8]
push	word ptr [bp+6]
call	far ptr	57Ch:0
mov	sp, bp
mov	ax, 3
push	ax
mov	ax, [bp+8]
add	ax, 29h	; ')'
push	ax
mov	ax, [bp+6]
add	ax, 42h	; 'B'
push	ax
mov	ax, [bp+8]
inc	ax
push	ax
mov	ax, [bp+6]
inc	ax
push	ax
call	far ptr	57Ch:0

loc_1CA5A:				; CODE XREF: dseg:1CA50  j		 /* DOS offset ---> 1411:A */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax

loc_1CA60:				; DATA XREF: game_personal_func-FEEE  w		 /* DOS offset ---> 1412:0 */
; game_personal_func:loc_169BD  r ...
push	ax
mov	ax, 20h	; ' '

loc_1CA64:				; CODE XREF: dseg:1C95A  j dseg:1C96C  j ...		 /* DOS offset ---> 1412:4 */
push	ax
mov	ax, 28h	; '('
push	ax
mov	ax, 90h	; '  *'

loc_1CA6C:				; CODE XREF: dseg:1CF4F  p		 /* DOS offset ---> 1412:C */
push	ax
mov	ax, 14h

loc_1CA70:				; DATA XREF: dseg:1E04F  r dseg:1E06C  r ...		 /* DOS offset ---> 1413:0 */
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	ax, 35E0h
push	ax
;     ***************************************************************************
db 9Ah
db    6
byte_1CA86	db 0			; DATA XREF: s_11BC8+6  w s_11C24+14  w ...
db 0A3h	;   *
word_1CA88	dw 8306h		; DATA XREF: s_11172+C  r s_1118E+19  r ...
word_1CA8A	dw 2C4h			; DATA XREF: s_11172+F  r s_1118E+1C  r ...
word_1CA8C	dw 4689h		; DATA XREF: game_events_new_month_check+38  w
; s_D4C8+1F  r ...
db 0FEh	;   *
;     ***************************************************************************
sub	ax, ax
push	ax
;     ***************************************************************************
db 0A0h
db 0EEh	;   *
word_1CA94	dw 2A4Ch		; DATA XREF: game_give_population_sub+6  r
; game_give_population_sub+25  w	...
word_1CA96	dw 48E4h		; DATA XREF: dseg:109FF  r dseg:10A25  r ...
word_1CA98	dw 0AFB9h		; DATA XREF: dseg:20BDD  r dseg:20D12  w ...
word_1CA9A	dw 0F733h		; CODE XREF: dseg:1CA7A  j dseg:1CA82  j
; DATA XREF: ...
unk_1CA9C	db 0E9h	;   *		; DATA XREF: dseg:loc_2C34D  w
; dseg:1F255  w ...
;     ***************************************************************************
push	dx
;     ***************************************************************************
word_1CA9E	dw 0FF50h		; CODE XREF: dseg:1CCA5  p
; DATA XREF: game_events_new_month_check+3B  w ...
byte_1CAA0	db 76h			; DATA XREF: game_start_new_game_sub_2+AA  r
; game_start_new_ruler_birthday_info+C  w
unk_1CAA1	db 0FEh	;   *		; DATA XREF: dseg:loc_190A7  r
; game_send_how_much_gold_food+38  r ...
;     ***************************************************************************

loc_1CAA2:				; DATA XREF: dseg:90A4  r dseg:1EBE1  w ...		 /* DOS offset ---> 1416:2 */
call	far ptr	0:2CCh
;     ***************************************************************************
word_1CAA7	dw 0C483h		; DATA XREF: dseg:loc_190CD  r
; game_send_how_much_gold_food+62  r ...
word_1CAA9	dw 0B808h		; DATA XREF: dseg:loc_190C2  r
; game_send_result+BC  w	...
word_1CAAB	dw 33F0h		; DATA XREF: dseg:90C5  r
; game_send_result+C0  w	...
;     ***************************************************************************

loc_1CAAD:				; DATA XREF: dseg:1EC29  w dseg:228EF  r ...		 /* DOS offset ---> 1416:D */
sub	ax, 42h	; 'B'

loc_1CAB0:				; CODE XREF: dseg:1CAAB  j dseg:2CAA9  j		 /* DOS offset ---> 1417:0 */
push	ax

loc_1CAB1:				; CODE XREF: dseg:2CAAE  j		 /* DOS offset ---> 1417:1 */
; DATA XREF: dseg:1F69F  w ...
mov	ax, 42h	; 'B'

loc_1CAB4:				; DATA XREF: dseg:25FCA  w		 /* DOS offset ---> 1417:4 */
push	ax
push	word ptr [bp-2]
call	far ptr	0:25Eh
add	sp, 6
push	word ptr [bp-2]
call	far ptr	0:248h
add	sp, 2

loc_1CACB:				; CODE XREF: dseg:1CABD  j dseg:1CAC8  j		 /* DOS offset ---> 1418:B */
call	far ptr	4B5h:364h
mov	ax, word_1D47C
mov	word ptr dword_1CB9A+2,	ax
mov	word ptr dword_1CB9A, 0
sub	ax, ax
push	ax
push	ax
push	ax
push	word ptr loc_1CB9E
;     ***************************************************************************
word_1CAE5	dw 0CC9Ah		; DATA XREF: dseg:loc_19D5C  r
; s_11B3C+12  w ...
byte_1CAE7	db 2			; DATA XREF: game_spy_infiltrate-FFCE  w
; game_view_func-FF35  r	...
word_1CAE8	dw 0			; DATA XREF: game_messenger_travel_s_11B56+C  r
; game_messenger_travel+21  w ...
byte_1CAEA/* ruler birthday day */	db 83h			; DATA XREF: game_start_new_game_sub_2:loc_1ABDC  r
; game_start_new_game_sub_2+C0  r ...
db 0C4h	;   *
word_1CAEC	dw 0B808h		; DATA XREF: game_messenger_travel+98  w
word_1CAEE	dw 18FCh		; DATA XREF: game_start_new_ruler_set_abilities:loc_1BAC4  r
; game_start_new_ruler_set_abilities:loc_1BBDA  r
word_1CAF0	dw 2B50h		; CODE XREF: dseg:2CAEC  j
; DATA XREF: dseg:108A3  r ...
byte_1CAF2	db 0C0h			; DATA XREF: game_war_who_will_command+58  w
; game_war_who_will_command+66  r ...
;     ***************************************************************************
push	ax
;     ***************************************************************************
word_1CAF4	dw 36FFh		; DATA XREF: game_gfx_area_division_lines_display+3  r
; game_spy_betrayal_letter_query:loc_17716  r ...
word_1CAF6	dw 0D47Ch		; DATA XREF: game_events_check_add_followers_file  r
; game_events_check_add_followers_file:loc_1DBF7  r ...
;     ***************************************************************************
push	word ptr loc_1CB9E
call	far ptr	0:277h
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1CB08:				; CODE XREF: dseg:loc_1CBCD  p		 /* DOS offset ---> 141C:8 */
call	far ptr	0:2Fh
mov	ax, 35D0h
push	ax
call	far ptr	0:2E8h
add	sp, 2
;     ***************************************************************************
db 0Bh
byte_1CB1A	db 0C0h			; DATA XREF: game_start_new_ruler_change_what_sub_2  r
; dseg:C80F  r
byte_1CB1B	db 74h			; DATA XREF: dseg:C80B  r
unk_1CB1C	db  15h			; DATA XREF: dseg:C805  r
byte_1CB1D/* ruler birthday month */	db 0B8h			; DATA XREF: game_start_new_game_sub_2+61  r
; game_start_new_game_sub_2+C3  r ...
byte_1CB1E	db 0F0h			; DATA XREF: game_start_new_ruler_func+22  w
byte_1CB1F	db 35h			; DATA XREF: game_start_new_ruler_rule_which_province:loc_1BD80  w
; game_start_new_ruler_rule_which_province+45  r	...
;     ***************************************************************************
push	ax
call	far ptr	0:2E8h
add	sp, 2
or	ax, ax
jz	short loc_1CB32
mov	ax, 1
retf
;     ***************************************************************************
nop

loc_1CB32:				; CODE XREF: dseg:CB2B  j		 /* DOS offset ---> 141F:2 */
sub	ax, ax
retf
;     ***************************************************************************
nop

loc_1CB36:				; CODE XREF: s_CBE8+5E  p		 /* DOS offset ---> 141F:6 */
; dseg:loc_1CD72  p
push	bp
mov	bp, sp
sub	sp, 2
cmp	word_13784, 0
jz	short loc_1CB46
jmp	loc_1CBE3
;     ***************************************************************************

loc_1CB46:				; CODE XREF: dseg:CB41  j		 /* DOS offset ---> 1420:6 */
mov	word ptr [bp-2], 1
call	far ptr	0BF5h:4F0h

loc_1CB50:				; CODE XREF: dseg:1CAAD  j dseg:1CACA  j ...		 /* DOS offset ---> 1421:0 */
mov	ax, 53DEh
push	ax

loc_1CB54:				; CODE XREF: dseg:1CCB3  p		 /* DOS offset ---> 1421:4 */
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 540Fh
push	ax
call	far ptr	3EFh:6C0h

loc_1CB65:				; DATA XREF: game_merchants_warning_checks:loc_19370  r		 /* DOS offset ---> 1422:5 */
; game_merchants_warning_checks:loc_1937C  w ...
add	sp, 2
;     ***************************************************************************
word_1CB68	dw 9A9Ah		; DATA XREF: dseg:loc_181C1  r
; game_spy_func-FF11  r ...
byte_1CB6A	db 7			; DATA XREF: game_war_who_will_command+F  w
; dseg:1DE82  w ...
word_1CB6B	dw 3EFh			; DATA XREF: game_messenger_travel+68  w
; game_messenger_travel+120  w ...
unk_1CB6D	db  83h	;   *		; CODE XREF: dseg:CBD5  j
word_1CB6E	dw 0FE7Eh		; DATA XREF: dseg:51D3  r
; game_send_func:loc_151E6  r ...
byte_1CB70	db 0			; DATA XREF: game_advice_rumors_output-FB4B  r
; game_start_new_game_sub_2+B8  r ...
;     ***************************************************************************

loc_1CB71:				; DATA XREF: dseg:1F922  r dseg:1F938  w ...		 /* DOS offset ---> 1423:1 */
jnz	short near ptr byte_1CBCC
;     ***************************************************************************
db 0B8h
word_1CB74	dw 78h			; DATA XREF: dseg:1EC04  w dseg:20A6D  r ...
;     ***************************************************************************

loc_1CB76:				; DATA XREF: game_spy_rival_tigers_ruler_2_result-FF5A  r		 /* DOS offset ---> 1423:6 */
; game_view_other_province_sub+82  r ...
push	ax
mov	ax, 23h	; '#'

loc_1CB7A:				; DATA XREF: s_1EE7C+158  w s_1F79E+78  r	...		 /* DOS offset ---> 1423:A */
push	ax
;     ***************************************************************************
db 9Ah
word_1CB7C	dw 434h			; DATA XREF: s_D606+58  r
word_1CB7E	dw 3EFh			; DATA XREF: dseg:9D56  r s_11B3C+15  w ...
;     ***************************************************************************
add	sp, 4
;     ***************************************************************************
db 0F6h
db    6
db 0A2h	;   *
word_1CB86	dw 1CEh			; DATA XREF: game_reward_gift_horse:loc_18BDD  r
; s_125F2+CC  r ...
;     ***************************************************************************

loc_1CB88:				; DATA XREF: dseg:1EBDB  w dseg:2705B  r ...		 /* DOS offset ---> 1424:8 */
jz	short near ptr word_1CB90

loc_1CB8A:				; DATA XREF: game_spy_rival_tigers_ruler_2_result-FF23  r		 /* DOS offset ---> 1424:A */
; dseg:1ECDB  w ...
mov	ax, 5429h

loc_1CB8D:				; DATA XREF: s_1EE7C+12B  w		 /* DOS offset ---> 1424:D */
jmp	short loc_1CB93
;     ***************************************************************************
nop
;     ***************************************************************************
word_1CB90	dw 37B8h		; CODE XREF: dseg:loc_1CB88  j
; DATA XREF: s_D606+60  r ...
db  54h	; T
;     ***************************************************************************

loc_1CB93:				; CODE XREF: dseg:loc_1CB8D  j		 /* DOS offset ---> 1425:3 */
push	ax
call	far ptr	3EFh:6C0h
;     ***************************************************************************
db 83h
dword_1CB9A	dd 0C02B02C4h		; DATA XREF: dseg:4CAD  w dseg:4CC6  r ...
;     ***************************************************************************

loc_1CB9E:				; DATA XREF: dseg:loc_16822  r		 /* DOS offset ---> 1425:E */
; game_personal_recruit:loc_16860  w ...
push	ax
;     ***************************************************************************
db 0B8h
word_1CBA0	dw 8			; DATA XREF: s_12858+1C  w
; game_war_who_will_command+16  r ...
;     ***************************************************************************

loc_1CBA2:				; DATA XREF: s_11BC8+2C  r		 /* DOS offset ---> 1426:2 */
; game_personal_recruit_func+7E  w ...
push	ax

loc_1CBA3:				; CODE XREF: dseg:1CB9E  j		 /* DOS offset ---> 1426:3 */
mov	ax, 0Ah

loc_1CBA6:				; CODE XREF: dseg:1CB7A  j dseg:1CB8E  j		 /* DOS offset ---> 1426:6 */
push	ax
mov	ax, 78h	; 'x'
push	ax
mov	cx, 23h	; '#'

loc_1CBAE:				; DATA XREF: game_merchants_func:loc_19451  r		 /* DOS offset ---> 1426:E */
push	cx

loc_1CBAF:				; CODE XREF: dseg:1CB5E  j		 /* DOS offset ---> 1426:F */
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 78h	; 'x'
push	ax
mov	ax, 23h	; '#'
push	ax

loc_1CBBF:				; CODE XREF: dseg:1CBBE  j dseg:1CC9E  j		 /* DOS offset ---> 1427:F */
; DATA XREF: ...
call	far ptr	3EFh:434h
add	sp, 4
call	far ptr	3EFh:79Ah
;     ***************************************************************************
byte_1CBCC	db 0Eh			; CODE XREF: dseg:loc_1CB71  j
; DATA XREF: game_war_send_whom+26  w ...
;     ***************************************************************************

loc_1CBCD:				; CODE XREF: dseg:1CBCA  j		 /* DOS offset ---> 1428:D */
call	loc_1CB08
mov	[bp-2],	ax
or	ax, ax
jz	short near ptr unk_1CB6D
mov	ax, 35D0h
push	ax
call	far ptr	6A3h:6
mov	word_1CC6C, ax

loc_1CBE3:				; CODE XREF: dseg:CB43  j		 /* DOS offset ---> 142A:3 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_CBE8		proc far		 /* DOS offset ---> 142A:8 */

var_22		= word ptr -22h

; FUNCTION CHUNK AT CC50 SIZE 00000019 BYTES

push	bp
mov	bp, sp

loc_1CBEB:				; CODE XREF: dseg:1CBE7  j		 /* DOS offset ---> 142A:B */
sub	sp, 2Ah
push	si
call	far ptr	0BF5h:4F0h
cmp	word_13784, 0
jnz	short loc_1CC1D
mov	ax, 544Dh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 5482h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:79Ah

loc_1CC18:		 /* DOS offset ---> 142D:8 */
call	far ptr	0BF5h:4F0h

loc_1CC1D:				; CODE XREF: s_CBE8+11  j		 /* DOS offset ---> 142D:D */
mov	ax, 54A1h
push	ax

loc_1CC21:				; CODE XREF: dseg:1CC1B  j		 /* DOS offset ---> 142E:1 */
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 1Eh

loc_1CC2C:				; CODE XREF: dseg:1CBDD  j		 /* DOS offset ---> 142E:C */
push	ax
mov	ax, 70h	; 'p'
push	ax
mov	ax, 19h
push	ax
mov	ax, 3542h
push	ax
call	far ptr	0C49h:8Ah
add	sp, 8
or	ax, ax
jnz	short loc_1CC50

loc_1CC45:				; CODE XREF: dseg:loc_1CCAC  j		 /* DOS offset ---> 1430:5 */
; dseg:loc_1CD08  j
push	cs
call	loc_1CB36
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
s_CBE8		endp		 /* DOS offset ---> 142A:8 */

;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR s_CBE8

loc_1CC50:				; CODE XREF: s_CBE8+5B  j		 /* DOS offset ---> 1431:0 */
call	far ptr	0BF5h:4F0h
mov	ax, 3542h
push	ax
lea	ax, [bp+var_22]
push	ax
call	far ptr	561h:0E6h
add	sp, 4
lea	ax, [bp+var_22]
push	ax
; END OF FUNCTION CHUNK	FOR s_CBE8
;     ***************************************************************************
db 9Ah
word_1CC6A	dw 6			; DATA XREF: game_messenger_travel+F  w
; game_advisor_display_sub_3  r ...
word_1CC6C	dw 6A3h			; DATA XREF: dseg:4CB3  r s_4CD2+C  r ...
byte_1CC6E	db 83h			; DATA XREF: dseg:6DB7  w
; dseg:loc_16DDE  r ...
db 0C4h	;   *
word_1CC70	dw 8902h		; DATA XREF: s_111D6+80  r
; game_war_who_will_command+1D  r
db  46h	; F
unk_1CC73	db 0DCh	;   *		; CODE XREF: dseg:1CC46  j dseg:1CC6D  j
;     ***************************************************************************
inc	ax
jnz	short loc_1CCAE

loc_1CC77:				; CODE XREF: dseg:2CAEE  j		 /* DOS offset ---> 1433:7 */
mov	ax, 58h	; 'X'
push	ax
mov	ax, 3542h
push	ax
call	far ptr	561h:11Eh
add	sp, 2
sub	ax, 50h	; 'P'
neg	ax
shr	ax, 1
push	ax

loc_1CC8F:				; CODE XREF: dseg:1CBCC  j dseg:1CBE9  j ...		 /* DOS offset ---> 1434:F */
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 3542h
push	ax
mov	ax, 54D3h
push	ax

loc_1CC9F:				; CODE XREF: dseg:1CC9C  j		 /* DOS offset ---> 1435:F */
call	far ptr	3EFh:6E8h

loc_1CCA4:				; CODE XREF: dseg:1CBA0  j dseg:1CC80  j ...		 /* DOS offset ---> 1436:4 */
add	sp, 4
call	far ptr	3EFh:79Ah

loc_1CCAC:				; CODE XREF: dseg:1CBA3  j dseg:1CBAE  j ...		 /* DOS offset ---> 1436:C */
jmp	short loc_1CC45
;     ***************************************************************************

loc_1CCAE:				; CODE XREF: dseg:CC75  j dseg:2CC97  j ...		 /* DOS offset ---> 1436:E */
mov	ax, 0Ah
push	ax

loc_1CCB2:				; CODE XREF: dseg:1CF3F  p		 /* DOS offset ---> 1437:2 */
mov	ax, 3560h
push	ax
push	word ptr [bp-24h]
call	far ptr	0:25Eh
add	sp, 6
mov	word ptr [bp-2], 3538h
mov	word ptr [bp-4], 3560h
mov	byte ptr [bp-26h], 0

loc_1CCCF:				; CODE XREF: dseg:CCE8  j		 /* DOS offset ---> 1438:F */
mov	bx, [bp-4]
inc	word ptr [bp-4]
mov	si, [bp-2]
inc	word ptr [bp-2]
mov	al, [si]

loc_1CCDD:				; CODE XREF: dseg:2CCAC  j		 /* DOS offset ---> 1439:D */
cmp	[bx], al
jnz	short loc_1CCEC
inc	byte ptr [bp-26h]
cmp	byte ptr [bp-26h], 0Ah
jb	short loc_1CCCF
jmp	short loc_1CD0C
;     ***************************************************************************

loc_1CCEC:				; CODE XREF: dseg:CCDF  j		 /* DOS offset ---> 143A:C */
mov	ax, 54F7h
push	ax
call	far ptr	3EFh:6C0h

loc_1CCF5:				; CODE XREF: dseg:1CCE7  j		 /* DOS offset ---> 143B:5 */
add	sp, 2
call	far ptr	3EFh:79Ah
push	word ptr [bp-24h]

loc_1CD00:				; CODE XREF: dseg:1CCFC  j		 /* DOS offset ---> 143C:0 */
call	far ptr	0:248h
add	sp, 2

loc_1CD08:				; CODE XREF: dseg:1CCB8  j		 /* DOS offset ---> 143C:8 */
jmp	loc_1CC45
;     ***************************************************************************
nop

loc_1CD0C:				; CODE XREF: dseg:CCEA  j dseg:1CF1F  p		 /* DOS offset ---> 143C:C */
mov	ax, 33F0h
sub	ax, 41h	; 'A'
push	ax
mov	ax, 42h	; 'B'
push	ax
push	word ptr [bp-24h]
call	far ptr	0:25Eh
add	sp, 6
mov	ax, word_1D47C

loc_1CD25:				; CODE XREF: dseg:1CD7E  j		 /* DOS offset ---> 143E:5 */
mov	word ptr dword_1CB9A+2,	ax
mov	cx, 18FCh
push	cx
sub	cx, cx
mov	word ptr dword_1CB9A, cx
push	cx
push	ax
push	word ptr [bp-24h]
call	far ptr	0:277h
add	sp, 8
mov	ax, word_1D47E
mov	word ptr dword_1CB9A+2,	ax
mov	cx, 2AC3h
push	cx
sub	cx, cx
mov	word ptr dword_1CB9A, cx

loc_1CD4F:				; CODE XREF: dseg:1CD6E  j		 /* DOS offset ---> 1440:F */
push	cx
push	ax
push	word ptr [bp-24h]

loc_1CD54:				; CODE XREF: dseg:1CD44  j		 /* DOS offset ---> 1441:4 */
call	far ptr	0:277h
add	sp, 8
push	word ptr [bp-24h]
call	far ptr	0:248h
add	sp, 2
or	options_value, 20h

loc_1CD6C:				; CODE XREF: dseg:1CD31  j dseg:1CD4D  j ...		 /* DOS offset ---> 1442:C */
mov	byte_14CEF, 1
push	cs

loc_1CD72:				; CODE XREF: dseg:1CD23  j		 /* DOS offset ---> 1443:2 */
call	loc_1CB36

loc_1CD75:				; CODE XREF: dseg:2CD6F  j		 /* DOS offset ---> 1443:5 */
mov	ax, 1

loc_1CD78:				; CODE XREF: dseg:2CD74  j		 /* DOS offset ---> 1443:8 */
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


s_CD7E		proc far		; CODE XREF: Q_CD98+1D  p		 /* DOS offset ---> 1443:E */
call	far ptr	0:5Bh
;     ***************************************************************************
aTU		db 0Bh,'  *t',0Dh,'  *u',0  ; CODE XREF: dseg:1CF37  p
align 4
db  3Ch	; <
db  1Bh
db  75h	; u
db    4
db 0B8h	;   *
db    1
db    0
db 0CBh	;   *
db  2Bh	; +
db 0C0h	;   *
;     ***************************************************************************

locret_1CD96:				; CODE XREF: dseg:1CD91  j
retf
s_CD7E		endp		 /* DOS offset ---> 1443:E */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Q_CD98		proc far		; CODE XREF: game_events_new_month_check+B  p
; game_events_new_month_check+CF  p

var_A		= word ptr -0Ah
var_8		= byte ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 0Ch

loc_1CD9E:				; CODE XREF: dseg:2CD5D  j		 /* DOS offset ---> 1445:E */
test	byte_1339C, 80h
jnz	short loc_1CDA8
jmp	loc_1CE62
;     ***************************************************************************

loc_1CDA8:				; CODE XREF: Q_CD98+B  j		 /* DOS offset ---> 1446:8 */
mov	[bp+var_8], 0
sub	ax, ax
mov	word_1C82A, ax
mov	[bp+var_4], ax

loc_1CDB4:				; CODE XREF: Q_CD98+2B  j		 /* DOS offset ---> 1447:4 */
push	cs
call	near ptr s_CD7E	; *
or	ax, ax
jnz	short loc_1CDC8

loc_1CDBC:				; CODE XREF: dseg:2CDD8  j		 /* DOS offset ---> 1447:C */
inc	[bp+var_8]
cmp	[bp+var_8], 0FFh
jb	short loc_1CDB4
jmp	short loc_1CDCD
;     ***************************************************************************
nop

loc_1CDC8:				; CODE XREF: Q_CD98+22  j		 /* DOS offset ---> 1448:8 */
mov	[bp+var_4], 1

loc_1CDCD:				; CODE XREF: Q_CD98+2D  j		 /* DOS offset ---> 1448:D */
cmp	[bp+var_4], 0
jnz	short loc_1CDD6
jmp	loc_1CE62
;     ***************************************************************************

loc_1CDD6:				; CODE XREF: Q_CD98+39  j Q_CD98+7B  j ...		 /* DOS offset ---> 1449:6 */
call	far ptr	4B5h:290h

loc_1CDDB:				; CODE XREF: dseg:2CDCC  j		 /* DOS offset ---> 1449:B */
mov	ax, 41
push	ax
mov	ax, 1

loc_1CDE2:				; CODE XREF: dseg:1CDDD  j dseg:2CDBB  j ...		 /* DOS offset ---> 144A:2 */
push	ax
mov	ax, 5518h	; 0x34ECA
; Text:	'< Needed Text >'
push	ax
call	far ptr	3EFh:9B2h ; Q_CD98
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short loc_1CE62
mov	al, byte ptr [bp+var_2]
dec	al
push	ax

loc_1CDFD:				; CODE XREF: dseg:2CDFA  j		 /* DOS offset ---> 144B:D */
call	far ptr	525h:76h
add	sp, 2
mov	[bp+var_A], ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_1CDD6
push	[bp+var_A]
call	far ptr	525h:4Ah
add	sp, 2
mov	[bp+var_6], ax
push	ax
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short loc_1CDD6
push	[bp+var_6]
call	far ptr	525h:6
add	sp, 2
mov	bl, al
sub	bh, bh
mov	byte ptr [bx+3360h], 1
mov	bx, [bp+var_6]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 5529h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
call	far ptr	57Ch:15Eh
jmp	loc_1CDD6
;     ***************************************************************************
nop

loc_1CE62:				; CODE XREF: Q_CD98+D  j	Q_CD98+3B  j ...		 /* DOS offset ---> 1452:2 */
mov	sp, bp
pop	bp
retf
Q_CD98		endp

;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	word ptr [bp-2], 58h ; 'X'
mov	byte ptr [bp-4], 0

loc_1CE75:				; CODE XREF: dseg:loc_1CE93  j		 /* DOS offset ---> 1453:5 */
; dseg:1CD93  j ...
mov	bx, [bp-2]
cmp	byte ptr [bx+19h], 0

loc_1CE7C:				; CODE XREF: dseg:1CF0F  p		 /* DOS offset ---> 1453:C */
jz	short loc_1CE88
mov	al, [bp+6]
sub	ah, ah
cmp	[bx+1Ah], ax
jz	short near ptr word_1CE98

loc_1CE88:				; CODE XREF: dseg:loc_1CE7C  j		 /* DOS offset ---> 1454:8 */
add	word ptr [bp-2], 2Bh ; '+'
inc	byte ptr [bp-4]

loc_1CE8F:				; DATA XREF: game_war_send_whom_display_info+10  w		 /* DOS offset ---> 1454:F */
; game_war_send_whom_display_info+38  w ...
cmp	byte ptr [bp-4], 0FFh

loc_1CE93:				; CODE XREF: dseg:2CDFC  j		 /* DOS offset ---> 1455:3 */
; DATA XREF: game_start_new_ruler_add_follower+6A  w ...
jb	short loc_1CE75
;     ***************************************************************************
byte_1CE95	db 0EBh			; DATA XREF: dseg:AB4F  r
; game_start_new_ruler_add_follower+54  w
word_1CE96	dw 9007h		; DATA XREF: s_11E5E+D  r
; game_messenger_travel_s_11E74+24  r ...
word_1CE98	dw 0C38Bh		; CODE XREF: dseg:CE86  j
; DATA XREF: game_personal_func-FF3C  w ...
word_1CE9A	dw 0E58Bh		; DATA XREF: dseg:10825  r dseg:10844  r ...
byte_1CE9C	db 5Dh			; DATA XREF: unkfunc_11302  r
; unkfunc_11302+7  r ...
db 0CBh
word_1CE9E	dw 0C02Bh		; DATA XREF: dseg:10A21  r s_11448+6  r ...
byte_1CEA0	db 8Bh			; DATA XREF: dseg:11784  w dseg:117B7  r ...
db 0E5h	;   *
word_1CEA2	dw 0CB5Dh		; DATA XREF: system_video_interrupt:loc_10157  r
; system_graphics_top_right_white_bckgnd+3B  r ...
word_1CEA4	dw 8B55h		; DATA XREF: dseg:10890  r
; unkfunc_11302+E  r ...
word_1CEA6	dw 83ECh		; DATA XREF: game_give_population_sub+9  w
; game_give_population_sub+18  r	...
word_1CEA8	dw 12ECh		; CODE XREF: dseg:1CED0  j dseg:1CEDB  j ...
word_1CEAA	dw 46C7h		; DATA XREF: game_messenger_travel+89  w
; game_messenger_travel_results_2+27  r ...
word_1CEAC	dw 0F0h			; DATA XREF: dseg:10B5D  r dseg:10B70  r ...
word_1CEAE	dw 2A00h		; DATA XREF: game_war_who_will_command+12B  w
; dseg:1E1AF  w ...
word_1CEB0	dw 88C0h		; CODE XREF: dseg:1CEA6  j
; DATA XREF: game_war_who_will_command+12E  w ...
word_1CEB2	dw 0FA46h		; DATA XREF: dseg:5A82  w
; dseg:loc_17ED4  r ...
;     ***************************************************************************
mov	[bp-12h], al

loc_1CEB7:				; CODE XREF: dseg:CF4A  j		 /* DOS offset ---> 1457:7 */
mov	bx, [bp+6]
mov	al, [bx+20h]
mov	[bp-0Ah], al
mov	al, [bx+21h]
mov	[bp-0Ch], al
mov	al, [bp-12h]
push	ax
lea	ax, [bp-0Ch]
push	ax
;     ***************************************************************************
db 8Dh
db  46h	; F
db 0F6h	;   *
;     ***************************************************************************
push	ax
call	far ptr	59Dh:2A8h

loc_1CED7:				; CODE XREF: dseg:1CF05  j		 /* DOS offset ---> 1459:7 */
add	sp, 6
mov	[bp-8],	al

loc_1CEDD:				; CODE XREF: dseg:1CEC1  j		 /* DOS offset ---> 1459:D */
cmp	al, 0FFh
jz	short loc_1CF41
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	[bp-0Eh], ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short loc_1CEFE
mov	al, 14h
jmp	short loc_1CF0E
;     ***************************************************************************

loc_1CEFE:				; CODE XREF: dseg:CEF8  j dseg:2CEE2  j		 /* DOS offset ---> 145B:E */
push	word ptr [bp-0Eh]
call	far ptr	525h:4Ah

loc_1CF06:				; CODE XREF: dseg:1CE8A  j dseg:1CED9  j ...		 /* DOS offset ---> 145C:6 */
add	sp, 2
mov	bx, ax
mov	al, [bx+6]

loc_1CF0E:				; CODE XREF: dseg:CEFC  j dseg:1C329  P		 /* DOS offset ---> 145C:E */
mov	[bp-2],	al
mov	bx, [bp-0Eh]
mov	al, [bx+17h]
shr	al, 1
add	al, [bp-2]
inc	al

loc_1CF1E:				; CODE XREF: dseg:1CF14  j		 /* DOS offset ---> 145D:E */
mov	[bp-4],	al
cmp	al, [bp-6]
jbe	short loc_1CF41
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1CF41

loc_1CF35:				; CODE XREF: dseg:1CF24  j		 /* DOS offset ---> 145F:5 */
mov	al, [bp-4]
mov	[bp-6],	al
mov	ax, [bp-0Eh]
mov	[bp-10h], ax

loc_1CF41:				; CODE XREF: dseg:CEDF  j dseg:CF24  j ...		 /* DOS offset ---> 1460:1 */
inc	byte ptr [bp-12h]
cmp	byte ptr [bp-12h], 6
jnb	short loc_1CF4D
jmp	loc_1CEB7
;     ***************************************************************************

loc_1CF4D:				; CODE XREF: dseg:CF48  j		 /* DOS offset ---> 1460:D */
mov	ax, [bp-10h]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+8]
mov	ax, [bx]
mov	[bp-2],	ax
push	bx
mov	bx, [bp+6]
push	word ptr [bx+6]
call	far ptr	59Dh:7Eh
add	sp, 4
mov	[bp-4],	ax
or	ax, ax
jnz	short loc_1CF86
mov	ax, [bp-2]
mov	bx, [bp+6]
mov	[bx+6],	ax

loc_1CF81:				; CODE XREF: dseg:1CF60  j dseg:1CF73  j		 /* DOS offset ---> 1464:1 */
mov	sp, bp
pop	bp

locret_1CF84:				; CODE XREF: dseg:1CF3C  j dseg:1CF44  j ...
retf
;     ***************************************************************************
nop

loc_1CF86:				; CODE XREF: dseg:CF76  j dseg:1CFF3  p		 /* DOS offset ---> 1464:6 */
mov	ax, [bp-2]
mov	bx, [bp-4]
mov	[bx], ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+8]
mov	ax, [bx]
mov	[bp-2],	ax
push	bx
mov	bx, [bp+6]
push	word ptr [bx+4]

loc_1CFA7:				; CODE XREF: dseg:1CFC2  j		 /* DOS offset ---> 1466:7 */
call	far ptr	59Dh:7Eh
add	sp, 4
mov	[bp-4],	ax
or	ax, ax
jnz	short loc_1CFC4
mov	ax, [bp-2]
mov	bx, [bp+6]

loc_1CFBC:				; CODE XREF: dseg:1CFAE  j dseg:1CFB6  j		 /* DOS offset ---> 1467:C */
mov	[bx+4],	ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1CFC4:				; CODE XREF: dseg:CFB4  j dseg:1CFBC  j		 /* DOS offset ---> 1468:4 */
mov	ax, [bp-2]
mov	bx, [bp-4]
mov	[bx], ax

loc_1CFCC:				; CODE XREF: dseg:1CFA6  j dseg:1CFC4  j		 /* DOS offset ---> 1468:C */
mov	sp, bp

loc_1CFCE:				; CODE XREF: dseg:2CFC8  j		 /* DOS offset ---> 1468:E */
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************


game_events_january proc far		; CODE XREF: game_events_new_month_check+79  p
call	far ptr	0D1Dh:0Eh ; game_events_population_increase

loc_1CFD5:				; CODE XREF: dseg:2CFCC  j		 /* DOS offset ---> 1469:5 */
call	far ptr	0D1Dh:0A48h ; game_events_check_add_followers
call	far ptr	0D1Dh:730h ; game_events_check_generals_die_off_start
retf
game_events_january endp


;     *************** S U B	R O U T	I N E     ***************************************


s_CFE0		proc far		; CODE XREF: s_D008+1E  p		 /* DOS offset ---> 146A:0 */
mov	al, 0FFh

loc_1CFE2:				; CODE XREF: dseg:1D009  j		 /* DOS offset ---> 146A:2 */
push	ax
mov	ax, 9
push	ax
mov	ax, 33AAh
push	ax
call	far ptr	561h:0A0h ; s_56B0
add	sp, 6
retf
s_CFE0		endp		 /* DOS offset ---> 146A:0 */


;     *************** S U B	R O U T	I N E     ***************************************


s_CFF4		proc far		; CODE XREF: s_D008+22  p		 /* DOS offset ---> 146B:4 */
mov	al, 0FFh
;     ***************************************************************************
db  50h	; P
db 0B8h	;   *
db    9
db    0
db  50h	; P
db 0B8h	;   *
db 0A0h	;   *
a3pA		db '3P    **',0             ; CODE XREF: dseg:1CFF0  j
db  61h	; a
db    5
db  83h	;   *
db 0C4h	;   *
db    6
db 0CBh	;   *
s_CFF4		endp		 /* DOS offset ---> 146B:4 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_D008		proc far		; CODE XREF: game_events_new_month_check+90  p		 /* DOS offset ---> 146C:8 */

arg_0		= byte ptr  6

push	bp
mov	bp, sp

loc_1D00B:				; CODE XREF: dseg:1CFFB  j		 /* DOS offset ---> 146C:B */
mov	al, [bp+arg_0]
sub	ah, ah
or	ax, ax
jz	short loc_1D020
dec	ax
jz	short loc_1D030
dec	ax

loc_1D018:				; CODE XREF: dseg:1D010  j		 /* DOS offset ---> 146D:8 */
jz	short loc_1D048
dec	ax
jz	short loc_1D052
jmp	short loc_1D057
;     ***************************************************************************
nop

loc_1D020:				; CODE XREF: s_D008+A  j		 /* DOS offset ---> 146E:0 */
call	far ptr	0EA7h:0EE0h ; s_F950
push	cs
call	near ptr s_CFE0	; *
push	cs
call	near ptr s_CFF4	; *
jmp	short loc_1D057
;     ***************************************************************************
nop

loc_1D030:				; CODE XREF: s_D008+D  j		 /* DOS offset ---> 146F:0 */
cmp	byte ptr word_133AA, 0FFh
jz	short loc_1D03E
call	far ptr	0EA7h:814h ; s_F284
jmp	short loc_1D057
;     ***************************************************************************

loc_1D03E:				; CODE XREF: s_D008+2D  j		 /* DOS offset ---> 146F:E */
cmp	byte ptr word_133A0, 0FFh
jz	short loc_1D057
jmp	short loc_1D052
;     ***************************************************************************
nop

loc_1D048:				; CODE XREF: s_D008:loc_1D018  j		 /* DOS offset ---> 1470:8 */
; dseg:1D02B  j ...
call	far ptr	0EA7h:0DBAh ; s_F82A

loc_1D04D:				; CODE XREF: dseg:1D047  j		 /* DOS offset ---> 1470:D */
call	far ptr	0EA7h:814h ; s_F284

loc_1D052:				; CODE XREF: s_D008+13  j s_D008+3D  j		 /* DOS offset ---> 1471:2 */
call	far ptr	0EA7h:800h ; s_F270

loc_1D057:				; CODE XREF: s_D008+15  j s_D008+25  j ...		 /* DOS offset ---> 1471:7 */
mov	al, [bp+arg_0]
push	ax
call	far ptr	0EA7h:0AC0h ; s_F530
mov	sp, bp
test	[bp+arg_0], 1
jnz	short loc_1D06D

loc_1D068:				; CODE XREF: dseg:1D059  j dseg:1D060  j		 /* DOS offset ---> 1472:8 */
call	far ptr	0EA7h:1CAh ; s_EC3A

loc_1D06D:				; CODE XREF: s_D008+5E  j		 /* DOS offset ---> 1472:D */
call	far ptr	0EA7h:0B5Ah ; s_F5CA
mov	sp, bp
pop	bp
retf
s_D008		endp		 /* DOS offset ---> 146C:8 */


;     *************** S U B	R O U T	I N E     ***************************************


s_D076		proc far		; CODE XREF: game_events_new_month_check+C6  p		 /* DOS offset ---> 1473:6 */
; dseg:1D071  j
call	far ptr	0DC8h:0CB4h
call	far ptr	0DC8h:668h
call	far ptr	0DC8h:3B6h
retf
s_D076		endp		 /* DOS offset ---> 1473:6 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_D086		proc far		; CODE XREF: game_events_new_month_check+3F  p		 /* DOS offset ---> 1474:6 */

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= byte ptr -4
var_2		= byte ptr -2

push	bp
mov	bp, sp
sub	sp, 8
mov	[bp+var_6], 0
mov	[bp+var_8], 2DC4h

loc_1D096:				; CODE XREF: dseg:1D159  j		 /* DOS offset ---> 1475:6 */
sub	al, al
mov	[bp+var_2], al

loc_1D09B:				; CODE XREF: dseg:1D094  j		 /* DOS offset ---> 1475:B */
mov	[bp+var_4], al

loc_1D09E:				; CODE XREF: s_D086:loc_1D0E8  j		 /* DOS offset ---> 1475:E */
push	[bp+var_8]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_1D0F8
push	[bp+var_8]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_1D0F8
push	[bp+var_8]
call	far ptr	525h:4Ah

loc_1D0C4:				; CODE XREF: dseg:1D0AA  j dseg:1D0BE  j		 /* DOS offset ---> 1478:4 */
add	sp, 2
cmp	ax, [bp+var_6]
jz	short loc_1D0DD
push	[bp+var_8]
call	far ptr	525h:4Ah
add	sp, 2
mov	[bp+var_6], ax
inc	[bp+var_2]

loc_1D0DD:				; CODE XREF: s_D086+44  j		 /* DOS offset ---> 1479:D */
add	[bp+var_8], 35
inc	[bp+var_4]

loc_1D0E4:				; CODE XREF: dseg:2D0DF  j		 /* DOS offset ---> 147A:4 */
cmp	[bp+var_4], 41

loc_1D0E8:				; CODE XREF: dseg:2D0E3  j		 /* DOS offset ---> 147A:8 */
jb	short loc_1D09E

loc_1D0EA:				; CODE XREF: dseg:loc_2D0CE  j		 /* DOS offset ---> 147A:A */
; dseg:1D0E2  j
cmp	[bp+var_2], 1
jnz	short loc_1D0F8
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1D0F8:				; CODE XREF: s_D086+25  j s_D086+34  j ...		 /* DOS offset ---> 147B:8 */
sub	ax, ax
mov	sp, bp
pop	bp
retf
s_D086		endp		 /* DOS offset ---> 1474:6 */


;     *************** S U B	R O U T	I N E     ***************************************


game_events_new_month_check proc far
test	options_value, 32
jz	short loc_1D108
jmp	locret_1D1DC
;     ***************************************************************************

loc_1D108:				; CODE XREF: game_events_new_month_check+5  j		 /* DOS offset ---> 147C:8 */
push	cs
call	near ptr Q_CD98
mov	ax, 61
push	ax
call	far ptr	4B5h:33Eh
add	sp, 2

loc_1D118:				; CODE XREF: dseg:1D0F3  j dseg:1D102  j		 /* DOS offset ---> 147D:8 */
mov	ax, 144
push	ax

loc_1D11C:				; CODE XREF: dseg:1D0C4  j dseg:1D0E8  j ...		 /* DOS offset ---> 147D:C */
call	far ptr	4B5h:33Eh
add	sp, 2
call	far ptr	4B5h:282h
call	far ptr	4B5h:290h
mov	word_13574, 0
sub	ax, ax
mov	word_1CA8C, ax
mov	word_1CA9E, ax
push	cs
call	near ptr s_D086	; *
or	ax, ax
jz	short loc_1D156
mov	al, 96
push	ax
call	far ptr	6EBh:3Ah
add	sp, 2
or	byte_1339C, 2
retf
;     ***************************************************************************
nop

loc_1D156:				; CODE XREF: game_events_new_month_check+44  j		 /* DOS offset ---> 1481:6 */
inc	month_value

loc_1D15A:				; CODE XREF: dseg:1D144  j dseg:1D148  j ...		 /* DOS offset ---> 1481:A */
cmp	month_value, 12
jnz	short loc_1D16A
inc	year_value
mov	month_value, 0

loc_1D16A:				; CODE XREF: game_events_new_month_check+61  j		 /* DOS offset ---> 1482:A */
call	far ptr	4B5h:398h ; game_gfx_display_month
cmp	month_value, 0	; check	if month = January
jnz	short loc_1D17A
push	cs
call	near ptr game_events_january

loc_1D17A:				; CODE XREF: game_events_new_month_check+76  j		 /* DOS offset ---> 1483:A */
mov	al, month_value
mov	cl, 3
sub	ah, ah
div	cl
or	ah, ah
jnz	short loc_1D194
mov	al, month_value
div	cl
push	ax
push	cs
call	near ptr s_D008	; *
add	sp, 2

loc_1D194:				; CODE XREF: game_events_new_month_check+87  j		 /* DOS offset ---> 1485:4 */
cmp	word_1CA9E, 0
jz	short loc_1D1C3
mov	ax, 4
push	ax
mov	ax, 37AEh

loc_1D1A2:				; CODE XREF: dseg:1D19D  j		 /* DOS offset ---> 1486:2 */
push	ax
sub	ax, ax
push	ax
push	ax
call	far ptr	4B5h:1CEh ; game_gfx_area_division_lines_display
add	sp, 8
call	far ptr	4B5h:244h ; s_4D94
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window

loc_1D1B9:				; CODE XREF: dseg:1D1AE  j		 /* DOS offset ---> 1487:9 */
call	far ptr	4B5h:398h ; game_gfx_display_month
call	far ptr	4B5h:4E8h ; s_5038

loc_1D1C3:				; CODE XREF: game_events_new_month_check+9B  j		 /* DOS offset ---> 1488:3 */
push	cs
call	near ptr s_D076	; *

loc_1D1C7:				; CODE XREF: dseg:1D1A7  j dseg:1D1B7  j ...		 /* DOS offset ---> 1488:7 */
call	far ptr	0DC8h:15Ch ; s_DDDC
push	cs
call	near ptr Q_CD98
test	options_value, 40h
jz	short locret_1D1DC
and	options_value, 0BFh

locret_1D1DC:				; CODE XREF: game_events_new_month_check+7  j
; game_events_new_month_check+D7  j
retf
game_events_new_month_check endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_events_population_increase	proc far

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 0Ah
push	si
test	options_value, 40h
jz	short loc_1D1EF
jmp	loc_1D299
;     ***************************************************************************

loc_1D1EF:				; CODE XREF: game_events_population_increase+C  j		 /* DOS offset ---> 148A:F */
mov	[bp+var_8], 2DC4h
mov	[bp+var_A], 41

loc_1D1F9:				; CODE XREF: game_events_population_increase+B8  j		 /* DOS offset ---> 148B:9 */
mov	cl, 4
mov	bx, [bp+var_8]
mov	al, [bx+13h]
and	al, 30h
shr	al, cl
mov	byte ptr [bp+var_4], al
mov	al, 1
push	ax
lea	ax, [bp+var_4]
push	ax
call	far ptr	49Ch:6Ch ; math_subtract_x1_from_y1
add	sp, 4
mov	cl, 4
mov	al, byte ptr [bp+var_4]
shl	al, cl
mov	bx, [bp+var_8]
or	[bx+13h], al
mov	ax, 7530h
push	ax

loc_1D228:				; CODE XREF: dseg:1D21E  j		 /* DOS offset ---> 148E:8 */
mov	ax, 20		; population increase =	3 * sqrt(pop) +	50 + rand(20)
push	ax

loc_1D22C:				; CODE XREF: dseg:1D19F  j dseg:1D1CE  j ...		 /* DOS offset ---> 148E:C */
call	far ptr	49Ch:178h ; math_random_number_generator
add	sp, 2
mov	bx, [bp+var_8]
push	word ptr [bx+0Eh]
mov	si, ax

loc_1D23C:				; CODE XREF: dseg:1D234  j		 /* DOS offset ---> 148F:C */
call	far ptr	0:1B0h	; math_square_root_func
add	sp, 2
mov	cx, ax
shl	ax, 1

loc_1D248:				; CODE XREF: dseg:1D694  p dseg:1D74A  p		 /* DOS offset ---> 1490:8 */
add	ax, cx
add	si, ax
add	si, 50
push	si
mov	ax, [bp+var_8]
add	ax, 14
push	ax
call	far ptr	49Ch:8Ch ; game_data_set_generals_soldiers
add	sp, 6
mov	bx, [bp+var_8]
mov	ax, [bx+2]
mov	[bp+var_2], ax
or	ax, ax

loc_1D26A:				; CODE XREF: dseg:1D27F  j dseg:1D2AA  j		 /* DOS offset ---> 1492:A */
jz	short loc_1D28D

loc_1D26C:				; CODE XREF: game_events_population_increase+AD  j		 /* DOS offset ---> 1492:C */
mov	al, 0FFh
push	ax
mov	al, 1
push	ax

loc_1D272:				; CODE XREF: dseg:1D260  j		 /* DOS offset ---> 1493:2 */
mov	ax, [bp+var_2]
add	ax, 0Ch
push	ax
call	far ptr	49Ch:48h ; game_data_prov_move_next_free_general_pointer

loc_1D27E:				; CODE XREF: dseg:2D264  j dseg:2D26D  j ...		 /* DOS offset ---> 1493:E */
add	sp, 6
mov	bx, [bp+var_2]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_1D26C

loc_1D28D:				; CODE XREF: game_events_population_increase:loc_1D26A  j		 /* DOS offset ---> 1494:D */
add	[bp+var_8], 35
dec	[bp+var_A]
jz	short loc_1D299
jmp	loc_1D1F9
;     ***************************************************************************

loc_1D299:				; CODE XREF: game_events_population_increase+E  j		 /* DOS offset ---> 1495:9 */
; game_events_population_increase+B6  j
pop	si
mov	sp, bp
pop	bp
retf
game_events_population_increase	endp

;     ***************************************************************************

loc_1D29E:				; CODE XREF: s_D738+48  p		 /* DOS offset ---> 1495:E */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db 0FFh
db  76h	; v
db    8
db  9Ah	;   *
db  30h	; 0
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  9Ah	;   *
db 0BAh	;   *
db    0
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  55h	; U
db  9Ah	;   *
db  90h	;   *
db    2
db 0B5h	;   *
db    4
db  8Bh	;   *
db  46h	; F
db    8
db    5
db  1Ch
db    0
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  46h	; F
db    8
db  39h	; 9
db  47h	; G
db    2
db  75h	; u
db    6
db 0B8h	;   *
db  3Ch	; <
db  55h	; U
db 0EBh	;   *
db    4
;     ***************************************************************************
nop
mov	ax, 5545h
push	ax
mov	bx, [bp-2]
mov	ax, [bx]
add	ax, 1Ch
push	ax
push	word ptr [bp+6]
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax

loc_1D2F8:				; CODE XREF: dseg:1D2B0  j dseg:1D2B6  j ...		 /* DOS offset ---> 149B:8 */
mov	ax, 554Dh
push	ax
call	far ptr	3EFh:6E8h

loc_1D301:		 /* DOS offset ---> 149C:1 */
add	sp, 0Ah
call	far ptr	57Ch:126h
mov	al, 0Ah
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
push	word ptr [bp+8]
call	far ptr	525h:84h
add	sp, 2
dec	al
jnz	short loc_1D328
mov	ax, 1
jmp	short loc_1D32A
;     ***************************************************************************

loc_1D328:				; CODE XREF: dseg:D321  j		 /* DOS offset ---> 149E:8 */
sub	ax, ax

loc_1D32A:				; CODE XREF: dseg:D326  j		 /* DOS offset ---> 149E:A */
mov	[bp-4],	ax
mov	bx, [bp-2]
mov	ax, [bp+8]
cmp	[bx+4],	ax
jnz	short loc_1D33D
mov	word ptr [bx+4], 0

loc_1D33D:				; CODE XREF: dseg:D336  j		 /* DOS offset ---> 149F:D */
push	word ptr [bp+8]
push	word ptr [bp+6]
call	far ptr	59Dh:6A8h
add	sp, 4
push	word ptr [bp+8]
call	far ptr	59Dh:692h
add	sp, 2
cmp	word ptr [bp-4], 0

loc_1D35A:				; CODE XREF: dseg:1D2FC  j dseg:1D307  j ...		 /* DOS offset ---> 14A1:A */
jz	short loc_1D3C0
mov	bx, [bp+6]
cmp	word ptr [bx+2], 0
jnz	short loc_1D3BA
push	bx
call	far ptr	59Dh:50Eh

loc_1D36B:				; CODE XREF: dseg:1D2F5  j		 /* DOS offset ---> 14A2:B */
add	sp, 2
push	word ptr [bp+6]
call	far ptr	4B5h:3F4h
add	sp, 2
push	word ptr [bp-2]
call	far ptr	542h:0BAh

loc_1D381:				; CODE XREF: dseg:1D357  j		 /* DOS offset ---> 14A4:1 */
add	sp, 2
or	ax, ax
jz	short loc_1D3C0
call	far ptr	4B5h:290h
push	word ptr [bp+6]
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, 557Fh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
call	far ptr	57Ch:126h
mov	al, 0Ah
push	ax
call	far ptr	57Ch:7Ch
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1D3BA:				; CODE XREF: dseg:D363  j		 /* DOS offset ---> 14A7:A */
push	bx
call	far ptr	60Dh:54Ch

loc_1D3C0:				; CODE XREF: dseg:loc_1D35A  j		 /* DOS offset ---> 14A8:0 */
; dseg:D386  j
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_events_check_generals_die_off_end proc far	; CODE XREF: s_D4C8+5F  p

var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah

push	bp
mov	bp, sp
sub	sp, 16h
push	di

loc_1D3CB:				; CODE XREF: dseg:1D3AD  j dseg:1D3B4  j ...		 /* DOS offset ---> 14A8:B */
push	si
mov	ax, 7
push	ax
mov	cx, 68

loc_1D3D3:				; CODE XREF: dseg:1D3A6  j dseg:1D3BB  j ...		 /* DOS offset ---> 14A9:3 */
mov	[bp+var_E], cx
push	cx
mov	cx, 300
mov	[bp+var_C], cx
push	cx
call	far ptr	0:2BF8h
add	sp, 6

loc_1D3E6:				; CODE XREF: dseg:1D3DC  j		 /* DOS offset ---> 14AA:6 */
mov	ax, 7
push	ax
mov	ax, 68
push	ax

loc_1D3EE:				; CODE XREF: dseg:1D5B2  p dseg:1D720  p		 /* DOS offset ---> 14AA:E */
mov	ax, 301
push	ax
call	far ptr	0:2BF8h
add	sp, 6
mov	[bp+var_A], 1

loc_1D3FF:				; CODE XREF: game_events_check_generals_die_off_end+C3  j		 /* DOS offset ---> 14AB:F */
mov	ax, 7
push	ax

loc_1D403:				; CODE XREF: dseg:1D428  j dseg:1D468  j		 /* DOS offset ---> 14AC:3 */
mov	ax, [bp+var_A]
dec	ax
mov	cx, 0Ah
sub	dx, dx

loc_1D40C:				; CODE XREF: dseg:1D403  j		 /* DOS offset ---> 14AC:C */
div	cx
add	ax, [bp+var_E]
push	ax
mov	dx, [bp+var_C]
add	dx, [bp+var_A]
mov	bx, dx
dec	dx
push	dx
mov	si, ax
mov	di, bx
call	far ptr	0:2BF8h
add	sp, 6
mov	ax, 7
push	ax
push	si
push	di
call	far ptr	0:2BF8h
add	sp, 6
mov	ax, 7
push	ax
mov	ax, [bp+var_A]

loc_1D43D:				; CODE XREF: dseg:2D4E5  j		 /* DOS offset ---> 14AF:D */
mov	cx, 0Ah
sub	dx, dx
div	cx
add	ax, [bp+var_E]
push	ax

loc_1D448:				; CODE XREF: dseg:1D437  j		 /* DOS offset ---> 14B0:8 */
push	di
mov	si, ax
call	far ptr	0:2BF8h
add	sp, 6
mov	ax, 7
push	ax
push	si
lea	ax, [di+1]
push	ax
call	far ptr	0:2BF8h
add	sp, 6
mov	ax, [bp+var_A]
mov	cx, 1Ch

loc_1D46A:				; CODE XREF: dseg:1D459  j		 /* DOS offset ---> 14B2:A */
sub	dx, dx
div	cx
or	dx, dx
jnz	short near ptr word_1D47C+1
;     ***************************************************************************
word_1D472	dw 4B0h			; DATA XREF: s_11366+13  r s_113F2+7  r ...
temp_fort_x_location dw	9A50h		; DATA XREF: game_build_fort_s_19704+10  r
; game_build_fort_s_19704+2A  r ...
word_1D476	dw 4F0h			; DATA XREF: game_war_who_will_command+C0  w
; dseg:1E16B  w ...
word_1D478	dw 6EBh			; DATA XREF: dseg:10A03  r dseg:10A3B  r ...
temp_fort_y_location dw	0C483h		; DATA XREF: game_build_fort_s_19704+21  r
; game_build_fort_map_fort_placement_new_location+C  w ...
word_1D47C	dw 0FF02h		; CODE XREF: game_events_check_generals_die_off_end+AC  j
; DATA XREF: game_personal_func-FF80  w ...
word_1D47E	dw 0F646h		; DATA XREF: dseg:68EC  w
; dseg:loc_176B6  r ...
;     ***************************************************************************

loc_1D480:				; DATA XREF: dseg:5187  r		 /* DOS offset ---> 14B4:0 */
; game_personal_recruit-FF22  r ...
cmp	[bp+var_A], 118h
jnb	short loc_1D48A
jmp	loc_1D3FF
;     ***************************************************************************

loc_1D48A:				; CODE XREF: game_events_check_generals_die_off_end+C1  j		 /* DOS offset ---> 14B4:A */
mov	ax, 7
push	ax

loc_1D48E:				; CODE XREF: dseg:1D477  j		 /* DOS offset ---> 14B4:E */
mov	ax, [bp+var_A]
dec	ax
mov	cx, 0Ah
sub	dx, dx
div	cx
add	ax, [bp+var_E]
push	ax
mov	cx, [bp+var_C]
add	cx, [bp+var_A]
mov	dx, cx
dec	cx
push	cx
mov	si, ax
mov	di, dx
call	far ptr	0:2BF8h
add	sp, 6
mov	ax, 7
push	ax
push	si
push	di

loc_1D4B9:				; CODE XREF: dseg:1D4A1  j		 /* DOS offset ---> 14B7:9 */
call	far ptr	0:2BF8h
add	sp, 6
pop	si
pop	di
mov	sp, bp
pop	bp
retf
game_events_check_generals_die_off_end endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_D4C8		proc far		; CODE XREF: game_events_check_age_of_generals:loc_1D59A  p		 /* DOS offset ---> 14B8:8 */
; game_events_check_age_of_generals+89  p

arg_0		= word ptr  6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0D8h	;   *
db    1
db  42h	; B
db    5
db  8Bh	;   *
db 0E5h	;   *
db  0Bh
unk_1D4D6	db 0C0h	;   *		; CODE XREF: dseg:1D48E  j dseg:1D4B8  j
db  75h	; u
db  0Eh
db 0FFh
db  76h	; v
db    6
;     ***************************************************************************

loc_1D4DC:				; CODE XREF: dseg:2D45F  j dseg:2D476  j ...		 /* DOS offset ---> 14B9:C */
call	far ptr	60Dh:416h ; s_64E6
mov	sp, bp
cmp	al, 90
jb	short loc_1D55D
cmp	word_1CA8C, 0	; CODE XREF: dseg:2D4E3  j
jnz	short loc_1D505

loc_1D4EE:				; CODE XREF: dseg:2D4DA  j		 /* DOS offset ---> 14BA:E */
mov	word_1CA8C, 1
mov	ax, 5
push	ax
mov	ax, 5A48h
cwd
push	dx
push	ax
call	far ptr	4B5h:1F8h ; s_4D48
mov	sp, bp

loc_1D505:				; CODE XREF: s_D4C8+24  j		 /* DOS offset ---> 14BC:5 */
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 559Ch
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
mov	sp, bp

loc_1D515:				; CODE XREF: dseg:1D50E  j		 /* DOS offset ---> 14BD:5 */
cmp	word_1CEA2, 0
jnz	short loc_1D52A
mov	al, 10
push	ax
call	far ptr	57Ch:7Ch
mov	sp, bp
push	cs
call	near ptr game_events_check_generals_die_off_end	; *

loc_1D52A:				; CODE XREF: s_D4C8+52  j		 /* DOS offset ---> 14BE:A */
mov	al, 5
push	ax
call	far ptr	57Ch:7Ch
mov	sp, bp

loc_1D534:				; CODE XREF: dseg:1D530  j		 /* DOS offset ---> 14BF:4 */
mov	ax, [bp+arg_0]
add	ax, 1Ch
push	ax
mov	ax, 55BFh
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
mov	ax, 55EAh

loc_1D549:				; CODE XREF: dseg:1D5AA  j		 /* DOS offset ---> 14C0:9 */
push	ax
mov	ax, 55E4h
push	ax
call	far ptr	6EBh:182h
mov	sp, bp
mov	al, 4
push	ax
call	far ptr	6EBh:4F0h

loc_1D55D:				; CODE XREF: s_D4C8+1D  j		 /* DOS offset ---> 14C1:D */
mov	sp, bp
pop	bp
retf
s_D4C8		endp		 /* DOS offset ---> 14B8:8 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_events_check_age_of_generals proc far ; CODE XREF:	s_D68C+A0  p s_D738+56  p	...

var_4		= byte ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  56h	; V
db 0A0h	;   *
unk_1D56A	db  44h	; D		; CODE XREF: dseg:1D598  j
db    0
db  8Bh	;   *
db  5Eh	; ^
db    6
db  2Ah	; *
db  47h	; G
db  19h
db 0FEh	;   *
db 0C0h	;   *
db  3Ch	; <
db  41h	; A
db  76h	; v
db  28h	; (
db    4
db  3Fh	; ?
db 0D0h	;   *
db 0E0h	;   *
db  50h	; P
db  9Ah	;   *
db 0DCh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  17h
db  8Bh	;   *
unk_1D58A	db  5Eh	; ^		; CODE XREF: dseg:1D575  j
db    6
db  80h	;   *
db  4Fh	; O
unk_1D58E	db    2			; CODE XREF: dseg:1D566  j
db  10h
db  83h	;   *
db  7Eh	; ~
db    8
db    0
db  74h	; t
db  0Ah
db 0FFh
db  76h	; v
db    6
db  0Eh
;     ***************************************************************************

loc_1D59A:				; CODE XREF: dseg:1D588  j		 /* DOS offset ---> 14C5:A */
call	near ptr s_D4C8
add	sp, 2

loc_1D5A0:				; CODE XREF: dseg:1D554  j		 /* DOS offset ---> 14C6:0 */
test	options_value, 16 ; tests historical or	fiction
jnz	short loc_1D601
mov	[bp+var_4], 0

loc_1D5AB:				; CODE XREF: game_events_check_age_of_generals+9D  j		 /* DOS offset ---> 14C6:B */
mov	bl, [bp+var_4]

loc_1D5AE:				; CODE XREF: dseg:1D59E  j		 /* DOS offset ---> 14C6:E */
sub	bh, bh
shl	bx, 1
shl	bx, 1
mov	si, [bp+arg_0]
mov	ax, [si+1Ah]

loc_1D5BA:				; CODE XREF: dseg:1D532  j dseg:1D547  j ...		 /* DOS offset ---> 14C7:A */
cmp	[bx+55FAh], ax
jnz	short loc_1D5F8
mov	bl, [bp+var_4]
sub	bh, bh
shl	bx, 1
shl	bx, 1
mov	ax, year_value
cmp	[bx+55F8h], ax
ja	short loc_1D5F8
mov	al, 35
push	ax
call	far ptr	57Ch:0DCh ; s_589C

loc_1D5DA:				; CODE XREF: dseg:1D5D5  j		 /* DOS offset ---> 14C9:A */
add	sp, 2
or	ax, ax
jz	short loc_1D5F8

loc_1D5E1:				; CODE XREF: dseg:1D63A  j		 /* DOS offset ---> 14CA:1 */
cmp	[bp+arg_2], 0
jz	short loc_1D5F1
push	[bp+arg_0]
push	cs
call	near ptr s_D4C8	; *
add	sp, 2

loc_1D5F1:				; CODE XREF: game_events_check_age_of_generals+83  j		 /* DOS offset ---> 14CB:1 */
mov	bx, [bp+arg_0]
or	byte ptr [bx+2], 10h

loc_1D5F8:				; CODE XREF: game_events_check_age_of_generals+5C  j		 /* DOS offset ---> 14CB:8 */
; game_events_check_age_of_generals+6E  j ...
inc	[bp+var_4]
cmp	[bp+var_4], 9
jb	short loc_1D5AB

loc_1D601:				; CODE XREF: game_events_check_age_of_generals+43  j		 /* DOS offset ---> 14CC:1 */
pop	si
mov	sp, bp
pop	bp
retf
game_events_check_age_of_generals endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_D606		proc far		 /* DOS offset ---> 14CC:6 */

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
unk_1D60A	db 0ECh	;   *		; CODE XREF: dseg:2D5C2  j
db    6
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  30h	; 0
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db 0C6h	;   *
db  46h	; F
db 0FEh	;   *
db    0
db 0C7h	;   *
db  46h	; F
db 0FAh	;   *
db 0C4h	;   *
db  2Dh	; -
;     ***************************************************************************

loc_1D623:				; CODE XREF: s_D606+73  j		 /* DOS offset ---> 14CE:3 */
push	[bp+var_6]

loc_1D626:				; CODE XREF: dseg:1D614  j		 /* DOS offset ---> 14CE:6 */
call	far ptr	542h:92h
add	sp, 2
or	ax, ax

loc_1D630:				; CODE XREF: dseg:1D5EF  j dseg:1D5F8  j		 /* DOS offset ---> 14CF:0 */
jz	short loc_1D66E
push	[bp+var_6]
call	far ptr	525h:4Ah

loc_1D63A:				; CODE XREF: dseg:1D5E2  j dseg:1D627  j ...		 /* DOS offset ---> 14CF:A */
add	sp, 2
cmp	ax, [bp+var_4]
jz	short loc_1D66E
push	[bp+var_4]

loc_1D645:				; CODE XREF: dseg:1D640  j		 /* DOS offset ---> 14D0:5 */
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp+var_6]
cmp	al, [bx+11h]
jz	short loc_1D66E
push	bx

loc_1D656:				; CODE XREF: dseg:1D652  j		 /* DOS offset ---> 14D1:6 */
call	far ptr	59Dh:6
add	sp, 2
mov	ax, word_1CB7C
cmp	[bp+var_4], ax
jz	short loc_1D67E
mov	ax, word_1CB90
cmp	[bp+var_4], ax

loc_1D66C:				; CODE XREF: dseg:1D667  j		 /* DOS offset ---> 14D2:C */
jz	short loc_1D67E

loc_1D66E:				; CODE XREF: s_D606:loc_1D630  j		 /* DOS offset ---> 14D2:E */
; s_D606+3A  j ...
add	[bp+var_6], 35
inc	[bp+var_2]
cmp	[bp+var_2], 41
jb	short loc_1D623
jmp	short loc_1D686
;     ***************************************************************************
nop

loc_1D67E:				; CODE XREF: s_D606+5E  j		 /* DOS offset ---> 14D3:E */
; s_D606:loc_1D66C  j ...
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1D686:				; CODE XREF: s_D606+75  j		 /* DOS offset ---> 14D4:6 */
sub	ax, ax
mov	sp, bp
pop	bp
retf
s_D606		endp		 /* DOS offset ---> 14CC:6 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_D68C		proc far		; CODE XREF: s_D8C0+21  p s_D8C0+38  p		 /* DOS offset ---> 14D4:C */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  56h	; V
db  8Bh	;   *
db  5Eh	; ^
db    8
db 0F6h	;   *
db  47h	; G
db    2
db  10h
db  75h	; u
db    3
db 0E9h	;   *
db  87h	;   *
db    0
db  80h	;   *
db  67h	; g
db    2
db 0EFh	;   *
db  53h	; S
db  9Ah	;   *
db 0D8h	;   *
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  10h
db 0FFh
db  76h	; v
db    8
db  9Ah	;   *
db 0ACh	;   *
db    0
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0BAh	;   *
db    0
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  31h	; 1
db  9Ah	;   *
db  90h	;   *
db    2
db 0B5h	;   *
db    4
db  8Bh	;   *
db  46h	; F
db    8
db    5
db  1Ch
db    0
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db    7
db    5
db  1Ch
db    0
db  50h	; P
db 0B8h	;   *
db  1Ch
db  56h	; V
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    6
db  9Ah	;   *
db  26h	; &
db    1
db  7Ch	; |
db    5
db 0B0h	;   *
db  0Ah
db  50h	; P
db  9Ah	;   *
db  7Ch	; |
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db 0FFh
db  76h	; v
db    8
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0FFh
db  37h	; 7
db  9Ah	;   *
db  7Eh	; ~
unk_1D70A	db    0			; CODE XREF: dseg:1D68B  j dseg:1D69C  j
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  89h	;   *
db  46h	; F
unk_1D712	db 0FEh	;   *		; CODE XREF: dseg:1D708  j
db  8Bh	;   *
db  5Eh	; ^
db    8
db  8Bh	;   *
db    7
db  8Bh	;   *
db  76h	; v
db 0FEh	;   *
db  89h	;   *
unk_1D71C	db    4			; CODE XREF: dseg:1D669  j dseg:1D67B  j
db  53h	; S
db  9Ah	;   *
db  92h	;   *
db    6
db  9Dh	;   *
db    5
db 0EBh	;   *
db  93h	;   *
;     ***************************************************************************
nop

loc_1D726:				; CODE XREF: dseg:2D721  j		 /* DOS offset ---> 14DE:6 */
mov	ax, 1
push	ax

loc_1D72A:				; CODE XREF: dseg:1D5D7  j dseg:1D642  j ...		 /* DOS offset ---> 14DE:A */
push	bx
push	cs
call	near ptr game_events_check_age_of_generals
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
s_D68C		endp		 /* DOS offset ---> 14D4:C */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_D738		proc far		; CODE XREF: s_D84C:loc_1D890  p		 /* DOS offset ---> 14DF:8 */
; s_D84C+5C  p

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  8Bh	;   *
db  5Eh	; ^
db    8
db 0F6h	;   *
db  47h	; G
db    2
db  10h
db  74h	; t
db  44h	; D
db  53h	; S
db  9Ah	;   *
db 0D8h	;   *
db    1
db  42h	; B
db    5
db  8Bh	;   *
db 0E5h	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  24h	; $
db 0FFh
db  76h	; v
unk_1D752	db    8			; CODE XREF: dseg:1D73A  j
db  0Eh
db 0E8h	;   *
db 0AFh	;   *
unk_1D756	db 0FEh	;   *		; CODE XREF: dseg:1D886  p
db  8Bh	;   *
db 0E5h	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db  34h	; 4
db  8Bh	;   *
db  5Eh	; ^
db    8
db  80h	;   *
db  67h	; g
db    2
aQsM		db '  *S    **',0             ; CODE XREF: dseg:1D75E  j
db  9Dh	;   *
db    5
db  8Bh	;   *
db 0E5h	;   *
;     ***************************************************************************

loc_1D76C:				; CODE XREF: dseg:1D767  j		 /* DOS offset ---> 14E2:C */
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, [bp+arg_2]
and	byte ptr [bx+2], 0EFh
push	bx
push	[bp+arg_0]
push	cs
call	loc_1D29E
mov	sp, bp
jmp	short loc_1D791
;     ***************************************************************************
nop
mov	ax, 1
push	ax
push	bx
push	cs
call	near ptr game_events_check_age_of_generals

loc_1D791:				; CODE XREF: s_D738+4D  j dseg:1D78C  j		 /* DOS offset ---> 14E5:1 */
sub	ax, ax
mov	sp, bp
pop	bp
retf
s_D738		endp		 /* DOS offset ---> 14DF:8 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_D798		proc far		; CODE XREF: game_events_check_generals_die_off_start+42  p		 /* DOS offset ---> 14E5:8 */

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_4		= word ptr -4
var_2		= word ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Ah
;     ***************************************************************************

loc_1D79E:				; CODE XREF: dseg:1D799  j		 /* DOS offset ---> 14E5:E */
mov	[bp+var_8], 2DC4h
mov	[bp+var_A], 29h	; ')'

loc_1D7A8:				; CODE XREF: s_D798+AC  j dseg:1D7A5  j		 /* DOS offset ---> 14E6:8 */
mov	bx, [bp+var_8]
mov	ax, [bx+4]
mov	[bp+var_4], ax
or	ax, ax
jz	short loc_1D7F1

loc_1D7B5:				; CODE XREF: s_D798+57  j		 /* DOS offset ---> 14E7:5 */
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_2], ax
test	byte ptr [bx+2], 10h
jz	short loc_1D7DC
push	bx
push	[bp+var_8]

loc_1D7C7:				; CODE XREF: dseg:2D723  j		 /* DOS offset ---> 14E8:7 */
call	far ptr	0CD7h:222h
add	sp, 4
push	[bp+var_4]
call	far ptr	59Dh:692h
add	sp, 2
jmp	short loc_1D7E7
;     ***************************************************************************

loc_1D7DC:				; CODE XREF: s_D798+29  j		 /* DOS offset ---> 14E9:C */
sub	ax, ax
push	ax
push	bx
push	cs
call	near ptr game_events_check_age_of_generals

loc_1D7E4:				; CODE XREF: dseg:2DA0C  p		 /* DOS offset ---> 14EA:4 */
add	sp, 4

loc_1D7E7:				; CODE XREF: s_D798+42  j		 /* DOS offset ---> 14EA:7 */
mov	ax, [bp+var_2]
mov	[bp+var_4], ax
or	ax, ax
jnz	short loc_1D7B5

loc_1D7F1:				; CODE XREF: s_D798+1B  j dseg:2D840  j		 /* DOS offset ---> 14EB:1 */
mov	bx, [bp+var_8]
mov	ax, [bx+6]
mov	[bp+var_4], ax
or	ax, ax
jz	short loc_1D83B

loc_1D7FE:				; CODE XREF: s_D798+A1  j		 /* DOS offset ---> 14EB:E */
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_2], ax

loc_1D806:				; CODE XREF: dseg:2D837  j		 /* DOS offset ---> 14EC:6 */
test	byte ptr [bx+2], 10h
jz	short loc_1D826
push	bx
push	[bp+var_8]
call	far ptr	0CD7h:1E4h
add	sp, 4
push	[bp+var_4]
call	far ptr	59Dh:692h
add	sp, 2
jmp	short loc_1D831
;     ***************************************************************************
nop

loc_1D826:				; CODE XREF: s_D798+72  j		 /* DOS offset ---> 14EE:6 */
sub	ax, ax
push	ax
push	bx
push	cs
call	near ptr game_events_check_age_of_generals

loc_1D82E:				; CODE XREF: dseg:2D816  j		 /* DOS offset ---> 14EE:E */
add	sp, 4

loc_1D831:				; CODE XREF: s_D798+8B  j		 /* DOS offset ---> 14EF:1 */
mov	ax, [bp+var_2]
mov	[bp+var_4], ax
or	ax, ax
jnz	short loc_1D7FE

loc_1D83B:				; CODE XREF: s_D798+64  j		 /* DOS offset ---> 14EF:B */
add	[bp+var_8], 35
dec	[bp+var_A]
jz	short loc_1D847
jmp	loc_1D7A8
;     ***************************************************************************

loc_1D847:				; CODE XREF: s_D798+AA  j		 /* DOS offset ---> 14F0:7 */
mov	sp, bp
pop	bp
retf
s_D798		endp		 /* DOS offset ---> 14E5:8 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_D84C		proc far		; CODE XREF: game_events_check_generals_die_off_start+32  p		 /* DOS offset ---> 14F0:C */

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    8
;     ***************************************************************************

loc_1D852:				; CODE XREF: dseg:2D899  j		 /* DOS offset ---> 14F1:2 */
mov	bx, [bp+arg_0]
mov	ax, [bx+2]

loc_1D858:				; CODE XREF: dseg:1D760  j dseg:1D769  j ...		 /* DOS offset ---> 14F1:8 */
mov	[bp+var_8], ax
or	ax, ax

loc_1D85D:				; CODE XREF: dseg:1C341  P		 /* DOS offset ---> 14F1:D */
jz	short loc_1D8BC

loc_1D85F:				; CODE XREF: s_D84C+6E  j		 /* DOS offset ---> 14F1:F */
mov	bx, [bp+var_8]
mov	ax, [bx]
mov	[bp+var_6], ax
push	bx
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_1D8B2
mov	bx, [bp+var_8]
mov	bx, [bx+2]
mov	ax, [bx]
mov	[bp+var_4], ax
or	ax, ax
jz	short loc_1D8A0

loc_1D883:				; CODE XREF: s_D84C:loc_1D89E  j		 /* DOS offset ---> 14F4:3 */
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_2], ax
push	bx

loc_1D88C:				; CODE XREF: dseg:1D8FD  j		 /* DOS offset ---> 14F4:C */
push	[bp+var_8]
push	cs

loc_1D890:				; CODE XREF: dseg:2D874  j		 /* DOS offset ---> 14F5:0 */
call	near ptr s_D738	; *

loc_1D893:				; CODE XREF: dseg:1D88B  j		 /* DOS offset ---> 14F5:3 */
add	sp, 4
mov	ax, [bp+var_2]

loc_1D899:				; CODE XREF: dseg:1D883  j		 /* DOS offset ---> 14F5:9 */
mov	[bp+var_4], ax
or	ax, ax

loc_1D89E:				; CODE XREF: dseg:2D890  j		 /* DOS offset ---> 14F5:E */
jnz	short loc_1D883

loc_1D8A0:				; CODE XREF: s_D84C+35  j		 /* DOS offset ---> 14F6:0 */
mov	bx, [bp+var_8]
push	word ptr [bx+2]

loc_1D8A6:				; CODE XREF: dseg:2D89B  j		 /* DOS offset ---> 14F6:6 */
push	bx
push	cs
call	near ptr s_D738	; *
add	sp, 4
or	ax, ax
jnz	short loc_1D8BC

loc_1D8B2:				; CODE XREF: s_D84C+26  j		 /* DOS offset ---> 14F7:2 */
mov	ax, [bp+var_6]
mov	[bp+var_8], ax
or	ax, ax
jnz	short loc_1D85F

loc_1D8BC:				; CODE XREF: s_D84C:loc_1D85D  j		 /* DOS offset ---> 14F7:C */
; s_D84C+64  j
mov	sp, bp
pop	bp
retf
s_D84C		endp		 /* DOS offset ---> 14F0:C */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_D8C0		proc far		; CODE XREF: game_events_check_generals_die_off_start:loc_1D929  p		 /* DOS offset ---> 14F8:0 */

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  1Fh
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  1Dh
;     ***************************************************************************

loc_1D8D4:				; CODE XREF: s_D8C0+2F  j		 /* DOS offset ---> 14F9:4 */
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_2], ax
push	bx

loc_1D8DD:				; CODE XREF: dseg:1D90B  j		 /* DOS offset ---> 14F9:D */
push	[bp+arg_0]
push	cs
call	near ptr s_D68C	; *
add	sp, 4
mov	ax, [bp+var_2]
mov	[bp+var_4], ax
or	ax, ax
jnz	short loc_1D8D4
mov	bx, [bp+arg_0]	; CODE XREF: dseg:2D8EC  j
push	word ptr [bx]
push	bx
push	cs
call	near ptr s_D68C	; *

loc_1D8FB:				; CODE XREF: dseg:2D8F6  j		 /* DOS offset ---> 14FB:B */
mov	sp, bp
pop	bp
retf
s_D8C0		endp		 /* DOS offset ---> 14F8:0 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_events_check_generals_die_off_start proc far

var_6		= word ptr -6
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 6
mov	[bp+var_2], 2B34h

loc_1D90B:				; CODE XREF: dseg:1D8DC  j dseg:1D8E2  j		 /* DOS offset ---> 14FC:B */
mov	[bp+var_6], 16

loc_1D910:				; CODE XREF: game_events_check_generals_die_off_start:loc_1D93F  j		 /* DOS offset ---> 14FD:0 */
mov	bx, [bp+var_2]

loc_1D913:				; CODE XREF: dseg:1DBF9  p		 /* DOS offset ---> 14FD:3 */
cmp	word ptr [bx], 0
jz	short loc_1D938
push	bx
call	far ptr	542h:42h ; s_5462
add	sp, 2
or	ax, ax
jz	short loc_1D92E
push	[bp+var_2]
push	cs

loc_1D929:				; CODE XREF: dseg:1D949  j		 /* DOS offset ---> 14FE:9 */
call	near ptr s_D8C0	; *
jmp	short loc_1D935
;     ***************************************************************************

loc_1D92E:				; CODE XREF: game_events_check_generals_die_off_start+23  j		 /* DOS offset ---> 14FE:E */
push	[bp+var_2]
push	cs
call	near ptr s_D84C	; *

loc_1D935:				; CODE XREF: game_events_check_generals_die_off_start+2C  j		 /* DOS offset ---> 14FF:5 */
add	sp, 2

loc_1D938:				; CODE XREF: game_events_check_generals_die_off_start+16  j		 /* DOS offset ---> 14FF:8 */
add	[bp+var_2], 41
dec	[bp+var_6]

loc_1D93F:				; CODE XREF: dseg:1D934  j		 /* DOS offset ---> 14FF:F */
jnz	short loc_1D910
push	cs
call	near ptr s_D798	; *
mov	sp, bp
pop	bp
retf
game_events_check_generals_die_off_start endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_events_check_add_followers_display_sub1 proc far
; CODE XREF: game_events_check_add_followers_display+1D0  p

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp

loc_1D94B:				; CODE XREF: dseg:1D927  j dseg:1D93D  j		 /* DOS offset ---> 1500:B */
mov	bp, sp
sub	sp, 4

loc_1D950:				; CODE XREF: dseg:1D94D  j		 /* DOS offset ---> 1501:0 */
mov	bx, [bp+arg_0]
mov	ax, [bx+6]
or	ax, ax
jnz	short loc_1D962
mov	ax, [bp+arg_2]
mov	[bx+6],	ax
jmp	short loc_1D96F
;     ***************************************************************************

loc_1D962:				; CODE XREF: game_events_check_add_followers_display_sub1+E  j		 /* DOS offset ---> 1502:2 */
push	ax
call	far ptr	59Dh:62h
mov	bx, ax
mov	ax, [bp+arg_2]
mov	[bx], ax

loc_1D96F:				; CODE XREF: game_events_check_add_followers_display_sub1+16  j		 /* DOS offset ---> 1502:F */
mov	bx, [bp+arg_2]
mov	word ptr [bx], 0
mov	sp, bp
pop	bp
retf
game_events_check_add_followers_display_sub1 endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_events_check_add_followers_display_sub2 proc far

var_6		= word ptr -6
var_4		= byte ptr -4
arg_0		= word ptr  6

push	bp

loc_1D97B:				; CODE XREF: dseg:1D9CD  j		 /* DOS offset ---> 1503:B */
mov	bp, sp
sub	sp, 6
mov	[bp+var_4], 0
mov	[bp+var_6], 2DC4h

loc_1D989:				; CODE XREF: game_events_check_add_followers_display_sub2+5F  j		 /* DOS offset ---> 1504:9 */
mov	bx, [bp+var_6]
mov	ax, [bx+2]
or	ax, ax
jz	short loc_1D9A0

loc_1D993:				; CODE XREF: game_events_check_add_followers_display_sub2+24  j		 /* DOS offset ---> 1505:3 */
cmp	[bp+arg_0], ax
jz	short loc_1D9DE
mov	bx, ax
mov	ax, [bx]
or	ax, ax
jnz	short loc_1D993

loc_1D9A0:				; CODE XREF: game_events_check_add_followers_display_sub2+17  j		 /* DOS offset ---> 1506:0 */
mov	bx, [bp+var_6]
mov	ax, [bx+4]
or	ax, ax
jz	short loc_1D9B7

loc_1D9AA:				; CODE XREF: game_events_check_add_followers_display_sub2+3B  j		 /* DOS offset ---> 1506:A */
cmp	[bp+arg_0], ax
jz	short loc_1D9DE
mov	bx, ax
mov	ax, [bx]
or	ax, ax
jnz	short loc_1D9AA

loc_1D9B7:				; CODE XREF: game_events_check_add_followers_display_sub2+2E  j		 /* DOS offset ---> 1507:7 */
mov	bx, [bp+var_6]
mov	ax, [bx+6]
or	ax, ax
jz	short loc_1D9CE

loc_1D9C1:				; CODE XREF: game_events_check_add_followers_display_sub2+52  j		 /* DOS offset ---> 1508:1 */
; dseg:1D986  j ...
cmp	[bp+arg_0], ax
jz	short loc_1D9DE
mov	bx, ax
mov	ax, [bx]
or	ax, ax
jnz	short loc_1D9C1

loc_1D9CE:				; CODE XREF: game_events_check_add_followers_display_sub2+45  j		 /* DOS offset ---> 1508:E */
; dseg:1D979  j
add	[bp+var_6], 23h	; '#'
inc	[bp+var_4]

loc_1D9D5:				; CODE XREF: dseg:1D9D3  j		 /* DOS offset ---> 1509:5 */
cmp	[bp+var_4], 29h	; ')'
jb	short loc_1D989
jmp	short loc_1D9E6
;     ***************************************************************************
nop

loc_1D9DE:				; CODE XREF: game_events_check_add_followers_display_sub2+1C  j		 /* DOS offset ---> 1509:E */
; game_events_check_add_followers_display_sub2+33  j ...
mov	ax, [bp+var_6]
mov	sp, bp
pop	bp

locret_1D9E4:				; CODE XREF: dseg:2D8F8  j
retf
;     ***************************************************************************
nop

loc_1D9E6:				; CODE XREF: game_events_check_add_followers_display_sub2+61  j		 /* DOS offset ---> 150A:6 */
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_events_check_add_followers_display_sub2 endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_events_check_add_followers_display	proc far
; CODE XREF: game_events_check_add_followers+35  p

var_8		= word ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    8
db  56h	; V
db 0A0h	;   *
db 0BDh	;   *
db  33h	; 3
db  2Ah	; *
db 0E4h	;   *
db  89h	;   *
db  46h	; F
db 0FAh	;   *
db  3Dh	; =
db 0FFh
db    0
db  75h	; u
db    3
db 0E9h	;   *
db  25h	; %
db    1
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  9Ah	;   *
db 0F6h	;   *
db    0
db 0D7h	;   *
db  0Ch
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db  0Fh
db    1
db  50h	; P
db  0Eh
db 0E8h	;   *
db  5Ch	; \
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
db  46h	; F
db 0F8h	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db 0E1h	;   *
db    0
db  50h	; P
db  9Ah	;   *
db  92h	;   *
db    0
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db 0D1h	;   *
db    0
db 0B8h	;   *
db  2Bh	; +
db    0
db  50h	; P
db 0FFh
db  76h	; v
db    6
db 0B8h	;   *
db 0BFh	;   *
db  33h	; 3
db  50h	; P
db  9Ah	;   *
db    8
db    0
db  61h	; a
db    5
db  83h	;   *
db 0C4h	;   *
db    6
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0C6h	;   *
db  47h	; G
db  16h
db  64h	; d
db 0FFh
db  76h	; v
db 0FEh	;   *
db  9Ah	;   *
db  84h	;   *
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  3Ch	; <
db    4
db  75h	; u
db  18h
db 0FFh
db  76h	; v
db    6
db 0FFh
db  76h	; v
db 0F8h	;   *
db  0Eh
db 0E8h	;   *
db 0DCh	;   *
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0C6h	;   *
db  47h	; G
db  0Ah
db 0FFh
db 0E9h	;   *
db  47h	; G
db    1
;     ***************************************************************************
nop
push	[bp+arg_0]
push	[bp+var_8]
call	far ptr	59Dh:5CEh ; s_5F9E
add	sp, 4
mov	bx, [bp+var_2]
mov	al, [bx+0Ah]

loc_1DA90:		 /* DOS offset ---> 1515:0 */
mov	si, [bp+arg_0]
mov	[si+0Ah], al
mov	byte ptr [si+0Ch], 1
mov	al, 6
push	ax

loc_1DA9D:				; CODE XREF: dseg:1D9D5  j dseg:1D94F  j		 /* DOS offset ---> 1515:D */
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2

loc_1DAA5:				; CODE XREF: dseg:1DBF2  p dseg:2DAA1  j		 /* DOS offset ---> 1516:5 */
add	al, 5Fh	; '_'
mov	[si+0Bh], al
push	[bp+var_2]
call	far ptr	525h:30h ; s_5280
add	sp, 2
mov	[bp+var_4], ax
push	ax

loc_1DAB9:				; CODE XREF: dseg:1DB20  j		 /* DOS offset ---> 1517:9 */
call	far ptr	542h:0BAh ; s_54DA
add	sp, 2
or	ax, ax
jnz	short loc_1DAC8
jmp	loc_1DBC2
;     ***************************************************************************

loc_1DAC8:				; CODE XREF: game_events_check_add_followers_display+D7  j		 /* DOS offset ---> 1518:8 */
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	[bp+var_8]
call	far ptr	525h:64h ; game_data_get_province_number
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, [bp+arg_0]
add	ax, 1Ch
push	ax
mov	bx, [bp+var_4]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 563Bh	; 0x34FD0
; Text:	'%s, %s has joined your followers in Province %2d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 8
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	al, 0Ah
push	ax
call	far ptr	57Ch:7Ch ; system_sound_delay_2
add	sp, 2
jmp	loc_1DBC2
;     ***************************************************************************
nop
mov	al, byte_133BC
sub	ah, ah
mov	cx, year_value
sub	cx, 3
cmp	ax, cx
jnb	short loc_1DB21

loc_1DB1C:				; CODE XREF: dseg:1DAE7  j dseg:1DAF6  j ...		 /* DOS offset ---> 151D:C */
mov	byte_133BD, 0FFh

loc_1DB21:				; CODE XREF: game_events_check_add_followers_display+12E  j		 /* DOS offset ---> 151E:1 */
; dseg:1DAD4  j ...
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db 0B8h	;   *
db  2Bh	; +
unk_1DB2A	db    0			; CODE XREF: dseg:1DAC7  j
db  50h	; P
db 0FFh
db  76h	; v
db    6
db 0B8h	;   *
a3p		db '  *3P  *',8,0           ; CODE XREF: dseg:1C0E1  P
db  61h	; a
db    5
db  83h	;   *
db 0C4h	;   *
db    6
db 0F6h	;   *
db    6
db 0B4h	;   *
db  33h	; 3
db  10h
db  74h	; t
db  64h	; d
;     ***************************************************************************

loc_1DB42:				; CODE XREF: dseg:1DB3D  j		 /* DOS offset ---> 1520:2 */
mov	ax, 41
push	ax
call	far ptr	49Ch:178h ; math_random_number_generator
add	sp, 2

loc_1DB4E:				; CODE XREF: dseg:2DAA3  j		 /* DOS offset ---> 1520:E */
mov	cx, 35
mul	cx
add	ax, 2DC4h
mov	[bp+var_8], ax
mov	al, 101
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2
mov	bx, [bp+arg_0]
mov	[bx+0Fh], al
mov	al, 91
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number

loc_1DB72:				; CODE XREF: dseg:1DB62  j dseg:1DB68  j		 /* DOS offset ---> 1523:2 */
add	sp, 2
add	al, 0Ah

loc_1DB77:				; CODE XREF: dseg:1DB6F  j		 /* DOS offset ---> 1523:7 */
mov	bx, [bp+arg_0]
mov	[bx+7],	al
mov	al, 91
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2
add	al, 0Ah
mov	bx, [bp+arg_0]
mov	[bx+8],	al
mov	al, 71
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2
add	al, 1Eh
mov	bx, [bp+arg_0]
mov	[bx+9],	al
jmp	short loc_1DBB5
;     ***************************************************************************
nop
mov	al, byte_133BE
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	[bp+var_8], ax

loc_1DBB5:				; CODE XREF: game_events_check_add_followers_display+1B7  j		 /* DOS offset ---> 1527:5 */
; dseg:1DBB1  j
push	[bp+arg_0]
push	[bp+var_8]
push	cs
call	near ptr game_events_check_add_followers_display_sub1
add	sp, 4

loc_1DBC2:				; CODE XREF: game_events_check_add_followers_display+D9  j		 /* DOS offset ---> 1528:2 */
; game_events_check_add_followers_display+11C  j
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
game_events_check_add_followers_display	endp


;     *************** S U B	R O U T	I N E     ***************************************


game_events_check_add_followers_file proc far
; CODE XREF: game_events_check_add_followers+49  p
cmp	word_1CAF6, 0FFFFh
;     ***************************************************************************
db  75h	; u
db  0Fh
db 0B8h	;   *
db 0F0h	;   *
db  35h	; 5
db  50h	; P
db  9Ah	;   *
db    6
db    0
db 0A3h	;   *
db    6
db  83h	;   *
db 0C4h	;   *
db    2
db 0A3h	;   *
db 0F6h	;   *
db 0CAh	;   *
db  2Bh	; +
db 0C0h	;   *
;     ***************************************************************************

loc_1DBE2:				; CODE XREF: dseg:1DBDD  j		 /* DOS offset ---> 152A:2 */
push	ax
mov	ax, word_133BA
inc	word_133BA
mov	cx, 46
mul	cx
add	ax, 6
adc	dx, 0
push	dx
push	ax

loc_1DBF7:				; CODE XREF: dseg:1DBEF  j		 /* DOS offset ---> 152B:7 */
push	word_1CAF6

loc_1DBFB:				; CODE XREF: dseg:1DBF5  j		 /* DOS offset ---> 152B:B */
call	far ptr	0:2CCh	; system_file_pointer
add	sp, 8
mov	ax, 46

loc_1DC06:				; CODE XREF: dseg:1DC01  j		 /* DOS offset ---> 152C:6 */
push	ax
mov	ax, 33BCh
push	ax
push	word_1CAF6
call	far ptr	0:25Eh	; system_file_read_with_handle
add	sp, 6
retf
game_events_check_add_followers_file endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_events_check_add_followers	proc far

var_2		= word ptr -2

push	bp
mov	bp, sp

loc_1DC1B:				; CODE XREF: dseg:1DC16  j		 /* DOS offset ---> 152D:B */
sub	sp, 2
mov	word_1CAF6, 0FFFFh
mov	ax, word_133B8
cmp	word_133BA, ax
ja	short loc_1DC84
cmp	word_12B2E, 0
jz	short loc_1DC74

loc_1DC34:				; CODE XREF: game_events_check_add_followers+51  j		 /* DOS offset ---> 152F:4 */
mov	al, byte_133BC
sub	ah, ah
cmp	ax, year_value
ja	short loc_1DC74

loc_1DC3F:				; CODE XREF: dseg:1DC7E  j		 /* DOS offset ---> 152F:F */
mov	bx, word_12B2E
mov	[bp+var_2], bx
mov	ax, [bx]
mov	word_12B2E, ax
push	bx
push	cs
call	near ptr game_events_check_add_followers_display
add	sp, 2
or	ax, ax
jz	short loc_1DC6E
mov	ax, word_133B8
cmp	word_133BA, ax
ja	short loc_1DC74
push	cs
call	near ptr game_events_check_add_followers_file
cmp	word_12B2E, 0
jnz	short loc_1DC34
jmp	short loc_1DC74
;     ***************************************************************************
nop

loc_1DC6E:				; CODE XREF: game_events_check_add_followers+3D  j		 /* DOS offset ---> 1532:E */
mov	ax, [bp+var_2]
mov	word_12B2E, ax

loc_1DC74:				; CODE XREF: game_events_check_add_followers+1A  j		 /* DOS offset ---> 1533:4 */
; game_events_check_add_followers+25  j ...
cmp	word_1CAF6, 0FFFFh
jz	short loc_1DC84
push	word_1CAF6

loc_1DC7F:				; CODE XREF: dseg:1DC30  j dseg:1DC66  j		 /* DOS offset ---> 1533:F */
call	far ptr	0:248h	; system_file_close_with_handle

loc_1DC84:				; CODE XREF: game_events_check_add_followers+13  j		 /* DOS offset ---> 1534:4 */
; game_events_check_add_followers+61  j
mov	sp, bp
pop	bp
retf
game_events_check_add_followers	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_DC88		proc far		; CODE XREF: s_DDDC+31  p		 /* DOS offset ---> 1534:8 */

var_6A		= byte ptr -6Ah
var_68		= byte ptr -68h
var_66		= word ptr -66h
var_64		= byte ptr -64h
var_62		= byte ptr -62h
var_60		= word ptr -60h
var_5E		= byte ptr -5Eh
var_5C		= byte ptr -5Ch
var_5A		= word ptr -5Ah
var_58		= byte ptr -58h
var_56		= word ptr -56h
var_54		= word ptr -54h
var_52		= word ptr -52h
arg_0		= word ptr  6

push	bp

loc_1DC89:				; CODE XREF: dseg:1DC84  j		 /* DOS offset ---> 1534:9 */
mov	bp, sp
sub	sp, 6Ah
push	si
lea	ax, [bp+var_54]
mov	[bp+var_56], ax
mov	[bp+var_58], 0
mov	bx, [bp+arg_0]
mov	ax, [bx+2]
mov	[bp+var_66], ax
or	ax, ax
jz	short loc_1DCBD

loc_1DCA6:				; CODE XREF: s_DC88+33  j		 /* DOS offset ---> 1536:6 */
mov	bx, [bp+var_56]

loc_1DCA9:				; CODE XREF: dseg:1DC96  j		 /* DOS offset ---> 1536:9 */
add	[bp+var_56], 2
mov	[bx], ax
inc	[bp+var_58]
mov	bx, ax
mov	ax, [bx]
mov	[bp+var_66], ax
or	ax, ax
jnz	short loc_1DCA6

loc_1DCBD:				; CODE XREF: s_DC88+1C  j		 /* DOS offset ---> 1537:D */
mov	bx, [bp+var_56]
mov	word ptr [bx], 0
cmp	[bp+var_58], 2
jnb	short loc_1DCCD
jmp	loc_1DDD7
;     ***************************************************************************

loc_1DCCD:				; CODE XREF: s_DC88+40  j		 /* DOS offset ---> 1538:D */
lea	bx, [bp+var_54]
mov	[bp+var_56], bx
push	word ptr [bx]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_1DCE4
jmp	loc_1DDD7
;     ***************************************************************************

loc_1DCE4:				; CODE XREF: s_DC88+57  j		 /* DOS offset ---> 153A:4 */
mov	bx, [bp+var_54]
push	word ptr [bx+2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jnz	short loc_1DCF9
jmp	loc_1DDD7
;     ***************************************************************************

loc_1DCF9:				; CODE XREF: s_DC88+6C  j		 /* DOS offset ---> 153B:9 */
add	[bp+var_56], 2
dec	[bp+var_58]
cmp	[bp+var_58], 2
jnb	short loc_1DD09
jmp	loc_1DDD7
;     ***************************************************************************

loc_1DD09:				; CODE XREF: s_DC88+7C  j dseg:1DCFA  j		 /* DOS offset ---> 153C:9 */
mov	[bp+var_5E], 0
mov	al, [bp+var_58]
dec	al
mov	[bp+var_5C], al
or	al, al
jnz	short loc_1DD1C
jmp	loc_1DDAC
;     ***************************************************************************

loc_1DD1C:				; CODE XREF: s_DC88+8F  j s_DC88+121  j		 /* DOS offset ---> 153D:C */
mov	bx, [bp+var_56]
mov	si, [bx]
push	word ptr [si+2]

loc_1DD24:				; CODE XREF: dseg:1DB3F  j dseg:1DBB3  j ...		 /* DOS offset ---> 153E:4 */
call	far ptr	60Dh:44Ah

loc_1DD29:				; CODE XREF: dseg:1E255  p		 /* DOS offset ---> 153E:9 */
add	sp, 2
mov	[bp+var_64], al
mov	ax, [bp+var_56]
inc	ax
inc	ax
mov	[bp+var_5A], ax
mov	al, [bp+var_5E]
inc	al
mov	[bp+var_62], al
cmp	al, [bp+var_58]
jnb	short loc_1DD9A
mov	al, [bp+var_58]
sub	al, [bp+var_62]
mov	[bp+var_6A], al

loc_1DD4D:				; CODE XREF: s_DC88+110  j		 /* DOS offset ---> 1540:D */
mov	bx, [bp+var_5A]

loc_1DD50:				; CODE XREF: dseg:1DE2F  j		 /* DOS offset ---> 1541:0 */
mov	ax, [bx]
mov	[bp+var_66], ax
push	ax

loc_1DD56:				; CODE XREF: dseg:1DD42  j dseg:1DD4F  j		 /* DOS offset ---> 1541:6 */
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_1DD66
sub	al, al
jmp	short loc_1DD74
;     ***************************************************************************

loc_1DD66:				; CODE XREF: s_DC88+D8  j		 /* DOS offset ---> 1542:6 */
mov	bx, [bp+var_66]
push	word ptr [bx+2]
call	far ptr	60Dh:44Ah
add	sp, 2

loc_1DD74:				; CODE XREF: s_DC88+DC  j dseg:1DDCF  j		 /* DOS offset ---> 1543:4 */
mov	[bp+var_68], al
cmp	al, [bp+var_64]
jbe	short loc_1DD91
mov	bx, [bp+var_56]
mov	ax, [bx]
mov	si, [bp+var_5A]
mov	[si], ax
mov	ax, [bp+var_66]
mov	[bx], ax
mov	al, [bp+var_68]
mov	[bp+var_64], al

loc_1DD91:				; CODE XREF: s_DC88+F2  j		 /* DOS offset ---> 1545:1 */
add	[bp+var_5A], 2
dec	[bp+var_6A]
jnz	short loc_1DD4D

loc_1DD9A:				; CODE XREF: s_DC88+BA  j		 /* DOS offset ---> 1545:A */
add	[bp+var_56], 2
inc	[bp+var_5E]
mov	al, [bp+var_5C]
cmp	[bp+var_5E], al
jnb	short loc_1DDAC
jmp	loc_1DD1C
;     ***************************************************************************

loc_1DDAC:				; CODE XREF: s_DC88+91  j s_DC88+11F  j		 /* DOS offset ---> 1546:C */
mov	ax, [bp+var_54]
mov	[bp+var_66], ax

loc_1DDB2:				; CODE XREF: dseg:1DDAD  j		 /* DOS offset ---> 1547:2 */
lea	ax, [bp+var_52]
mov	[bp+var_56], ax
jmp	short loc_1DDC6
;     ***************************************************************************

loc_1DDBA:				; CODE XREF: s_DC88+148  j		 /* DOS offset ---> 1547:A */
mov	bx, [bp+var_66]
mov	[bx], ax
mov	[bp+var_66], ax
add	[bp+var_56], 2

loc_1DDC6:				; CODE XREF: s_DC88+130  j		 /* DOS offset ---> 1548:6 */
mov	bx, [bp+var_56]
mov	ax, [bx]

loc_1DDCB:				; CODE XREF: dseg:1DD8B  j dseg:1DDC0  j		 /* DOS offset ---> 1548:B */
mov	[bp+var_60], ax
or	ax, ax
jnz	short loc_1DDBA

loc_1DDD2:				; CODE XREF: dseg:1DDAB  j dseg:1DDB2  j		 /* DOS offset ---> 1549:2 */
mov	bx, [bp+var_66]
mov	[bx], ax

loc_1DDD7:				; CODE XREF: s_DC88+42  j s_DC88+59  j ...		 /* DOS offset ---> 1549:7 */
pop	si
mov	sp, bp
pop	bp
retf
s_DC88		endp		 /* DOS offset ---> 1534:8 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_DDDC		proc far		 /* DOS offset ---> 1549:C */

var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 0Eh
push	si
mov	[bp+var_4], 2B34h
mov	[bp+var_A], 3370h
mov	[bp+var_E], 10h

loc_1DDF2:				; CODE XREF: s_DDDC+3E  j		 /* DOS offset ---> 154B:2 */
mov	bx, [bp+var_4]
cmp	word ptr [bx], 0
jz	short loc_1DE13
cmp	word ptr [bx+2], 0
jz	short loc_1DE13
mov	ax, bx
mov	bx, [bp+var_A]
add	[bp+var_A], 2
mov	[bx], ax
push	ax
push	cs
call	near ptr s_DC88	; *
add	sp, 2

loc_1DE13:				; CODE XREF: s_DDDC+1C  j s_DDDC+22  j		 /* DOS offset ---> 154D:3 */
add	[bp+var_4], 41
dec	[bp+var_E]
jnz	short loc_1DDF2
mov	bx, [bp+var_A]
mov	word ptr [bx], 0
mov	[bp+var_A], 3370h

loc_1DE28:				; CODE XREF: dseg:1DE14  j		 /* DOS offset ---> 154E:8 */
jmp	short loc_1DE9A
;     ***************************************************************************

loc_1DE2A:				; CODE XREF: s_DDDC+C8  j		 /* DOS offset ---> 154E:A */
mov	[bp+var_2], 0
mov	bx, ax

loc_1DE31:				; CODE XREF: dseg:1DE2D  j		 /* DOS offset ---> 154F:1 */
mov	ax, [bx+2]
mov	[bp+var_8], ax
or	ax, ax
jz	short loc_1DE8D

loc_1DE3B:				; CODE XREF: s_DDDC+AF  j		 /* DOS offset ---> 154F:B */
push	ax
call	far ptr	542h:92h
add	sp, 2

loc_1DE44:				; CODE XREF: dseg:1DE27  j		 /* DOS offset ---> 1550:4 */
or	ax, ax
jnz	short loc_1DE81
mov	ax, 100
cwd
push	dx
push	ax
push	[bp+var_8]
call	far ptr	525h:122h
add	sp, 2
push	dx

loc_1DE5A:				; CODE XREF: dseg:1DDDC  j dseg:1DE52  j		 /* DOS offset ---> 1551:A */
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	bx, [bp+var_8]
push	word ptr [bx+2]
mov	si, ax

loc_1DE68:				; CODE XREF: dseg:1E289  p		 /* DOS offset ---> 1552:8 */
call	far ptr	525h:158h
add	sp, 2
sub	ah, ah
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, si
add	[bp+var_2], ax

loc_1DE81:				; CODE XREF: s_DDDC+6A  j		 /* DOS offset ---> 1554:1 */
mov	bx, [bp+var_8]
mov	ax, [bx]
mov	[bp+var_8], ax
or	ax, ax
jnz	short loc_1DE3B

loc_1DE8D:				; CODE XREF: s_DDDC+5D  j		 /* DOS offset ---> 1554:D */
mov	ax, [bp+var_2]
mov	bx, [bp+var_4]
mov	[bx+0Ch], ax
add	[bp+var_A], 2

loc_1DE9A:				; CODE XREF: s_DDDC:loc_1DE28  j		 /* DOS offset ---> 1555:A */
mov	bx, [bp+var_A]
mov	ax, [bx]
mov	[bp+var_4], ax

loc_1DEA2:				; CODE XREF: dseg:1DE8A  j dseg:1DE99  j		 /* DOS offset ---> 1556:2 */
or	ax, ax
jnz	short loc_1DE2A

loc_1DEA6:				; CODE XREF: dseg:1DEA0  j		 /* DOS offset ---> 1556:6 */
mov	bx, 3370h
mov	[bp+var_A], bx
cmp	[bx], ax
jz	short loc_1DEF8

loc_1DEB0:				; CODE XREF: s_DDDC+11A  j		 /* DOS offset ---> 1557:0 */
inc	bx
inc	bx
mov	[bp+var_C], bx
cmp	word ptr [bx], 0
jz	short loc_1DEEC

loc_1DEBA:				; CODE XREF: s_DDDC+10E  j		 /* DOS offset ---> 1557:A */
mov	bx, [bp+var_A]
mov	bx, [bx]
mov	si, [bp+var_C]
mov	si, [si]
mov	ax, [si+0Ch]
cmp	[bx+0Ch], ax
jbe	short loc_1DEE0
mov	bx, [bp+var_A]
mov	ax, [bx]
mov	[bp+var_4], ax
mov	si, [bp+var_C]
mov	ax, [si]
mov	[bx], ax
mov	ax, [bp+var_4]
mov	[si], ax

loc_1DEE0:				; CODE XREF: s_DDDC+EE  j		 /* DOS offset ---> 155A:0 */
add	[bp+var_C], 2
mov	bx, [bp+var_C]
cmp	word ptr [bx], 0
jnz	short loc_1DEBA

loc_1DEEC:				; CODE XREF: s_DDDC+DC  j		 /* DOS offset ---> 155A:C */
add	[bp+var_A], 2
mov	bx, [bp+var_A]
cmp	word ptr [bx], 0
jnz	short loc_1DEB0

loc_1DEF8:				; CODE XREF: s_DDDC+D2  j		 /* DOS offset ---> 155B:8 */
pop	si

loc_1DEF9:				; CODE XREF: dseg:1DEEF  j		 /* DOS offset ---> 155B:9 */
mov	sp, bp
pop	bp
retf
s_DDDC		endp		 /* DOS offset ---> 1549:C */

;     ***************************************************************************
nop

loc_1DEFE:				; CODE XREF: dseg:DFD3  p		 /* DOS offset ---> 155B:E */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  56h	; V
db 0C6h	;   *
unk_1DF06	db  46h	; F		; CODE XREF: dseg:1DEF8  j
db 0FCh	;   *
db    0
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  47h	; G
db    2
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  50h	; P
;     ***************************************************************************

loc_1DF16:				; CODE XREF: dseg:DF64  j dseg:1DF11  j ...		 /* DOS offset ---> 155D:6 */
push	ax
call	far ptr	542h:92h
add	sp, 2
or	ax, ax

loc_1DF21:				; CODE XREF: dseg:1DF1C  j		 /* DOS offset ---> 155E:1 */
jnz	short loc_1DF74
push	word ptr [bp-2]
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
cmp	ax, 21h	; '!'
jz	short loc_1DF57
ja	short loc_1DF5A
sub	al, 0Ah
jz	short loc_1DF74
sub	al, 2
jz	short loc_1DF4A
sub	al, 5
jz	short loc_1DF57
sub	al, 7

loc_1DF46:				; CODE XREF: dseg:1DF3F  j		 /* DOS offset ---> 1560:6 */
jz	short loc_1DF57

loc_1DF48:				; CODE XREF: dseg:1DF44  j		 /* DOS offset ---> 1560:8 */
jmp	short loc_1DF5A
;     ***************************************************************************

loc_1DF4A:				; CODE XREF: dseg:DF3E  j		 /* DOS offset ---> 1560:A */
mov	bx, [bp-2]
mov	si, [bp+6]
mov	ax, [si]
cmp	[bx+2],	ax
jnz	short loc_1DF74

loc_1DF57:				; CODE XREF: dseg:DF34  j dseg:DF42  j ...		 /* DOS offset ---> 1561:7 */
inc	byte ptr [bp-4]

loc_1DF5A:				; CODE XREF: dseg:DF36  j		 /* DOS offset ---> 1561:A */
; dseg:loc_1DF48  j
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_1DF16
cmp	byte ptr [bp-4], 4
jnz	short loc_1DF74
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1DF74:				; CODE XREF: dseg:loc_1DF21  j		 /* DOS offset ---> 1563:4 */
; dseg:DF3A  j ...
sub	ax, ax
pop	si

loc_1DF77:				; CODE XREF: dseg:1DF6D  j		 /* DOS offset ---> 1563:7 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ch
cmp	word ptr unk_133EE, 0
jz	short loc_1DF8C
jmp	loc_1E032
;     ***************************************************************************

loc_1DF8C:				; CODE XREF: dseg:DF87  j		 /* DOS offset ---> 1564:C */
cmp	byte_133ED, 5
jnz	short loc_1DF96
jmp	loc_1E032
;     ***************************************************************************

loc_1DF96:				; CODE XREF: dseg:DF91  j		 /* DOS offset ---> 1565:6 */
mov	ax, 1
push	ax
call	far ptr	59Dh:320h
add	sp, 2
mov	word ptr [bp-8], 0CAF8h

loc_1DFA7:				; CODE XREF: dseg:DFE1  j		 /* DOS offset ---> 1566:7 */
mov	bx, [bp-8]
mov	ax, [bx]
mov	[bp-6],	ax

loc_1DFAF:				; CODE XREF: dseg:1DF4F  j dseg:1DF5E  j ...		 /* DOS offset ---> 1566:F */
or	ax, ax
jz	short loc_1E032
push	ax
call	far ptr	542h:0BAh
add	sp, 2

loc_1DFBC:				; CODE XREF: dseg:1DF13  j dseg:1DF1E  j ...		 /* DOS offset ---> 1567:C */
or	ax, ax
jz	short loc_1DFDD
push	word ptr [bp-6]
call	far ptr	542h:42h
add	sp, 2
or	ax, ax
jnz	short loc_1DFDD
push	word ptr [bp-6]

loc_1DFD2:				; CODE XREF: dseg:1DFC9  j		 /* DOS offset ---> 1569:2 */
push	cs
call	loc_1DEFE

loc_1DFD6:				; CODE XREF: dseg:1E046  p dseg:1E063  p		 /* DOS offset ---> 1569:6 */
add	sp, 2
or	ax, ax
jnz	short loc_1DFE4

loc_1DFDD:				; CODE XREF: dseg:DFBE  j dseg:DFCD  j		 /* DOS offset ---> 1569:D */
add	word ptr [bp-8], 2
jmp	short loc_1DFA7
;     ***************************************************************************
nop

loc_1DFE4:				; CODE XREF: dseg:DFDB  j		 /* DOS offset ---> 156A:4 */
call	far ptr	4B5h:290h
mov	bx, [bp-6]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 567Ch
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
call	far ptr	57Ch:15Eh
mov	al, 14h
push	ax

loc_1E006:				; CODE XREF: dseg:1E294  p		 /* DOS offset ---> 156C:6 */
call	far ptr	57Ch:7Ch
add	sp, 2
mov	ax, 56BFh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	57Ch:15Eh
mov	al, 14h
push	ax

loc_1E022:				; CODE XREF: dseg:1E01E  j		 /* DOS offset ---> 156E:2 */
call	far ptr	57Ch:7Ch
mov	ax, [bp-6]
mov	word ptr unk_133EE, ax
mov	byte_133ED, 0

loc_1E032:				; CODE XREF: dseg:DF89  j dseg:DF93  j ...		 /* DOS offset ---> 156F:2 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	byte ptr [bp-4], 0

loc_1E040:				; CODE XREF: dseg:E0B9  j		 /* DOS offset ---> 1570:0 */
mov	bl, [bp-4]
sub	bh, bh
mov	al, [bx+2B30h]
push	ax
call	far ptr	525h:76h
add	sp, 2
push	ax
call	far ptr	0CD7h:134h
add	sp, 2
mov	[bp-0Ah], ax
or	ax, ax
jz	short loc_1E0B2
mov	word ptr [bp-2], 1
mov	byte ptr [bp-6], 0

loc_1E06B:				; CODE XREF: dseg:E096  j		 /* DOS offset ---> 1572:B */
mov	al, [bp-4]
cmp	[bp-6],	al
jz	short loc_1E08F
mov	bl, [bp-6]
sub	bh, bh
mov	al, [bx+2B30h]
push	ax
call	far ptr	525h:76h
add	sp, 2
cmp	ax, [bp-0Ah]
jnz	short loc_1E08F

loc_1E08A:				; CODE XREF: dseg:1E07A  j		 /* DOS offset ---> 1574:A */
mov	word ptr [bp-2], 0

loc_1E08F:				; CODE XREF: dseg:E071  j dseg:E088  j		 /* DOS offset ---> 1574:F */
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 3
jb	short loc_1E06B
cmp	word ptr [bp-2], 0
jz	short loc_1E0B2
push	word ptr [bp-0Ah]
call	far ptr	525h:64h

loc_1E0A6:				; CODE XREF: dseg:1E09D  j		 /* DOS offset ---> 1576:6 */
add	sp, 2
mov	bl, [bp-4]
sub	bh, bh
mov	[bx+2B30h], al

loc_1E0B2:				; CODE XREF: dseg:E060  j dseg:E09C  j		 /* DOS offset ---> 1577:2 */
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 3
jb	short loc_1E040
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1E0C0:				; CODE XREF: Q_1E45B-10083  p		 /* DOS offset ---> 1578:0 */
; Q_1E8C2-FF15  p
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  83h	;   *
db  7Eh	; ~
db    8
db    0
db  74h	; t
db    7
db  8Bh	;   *
db  5Eh	; ^
db    6
db  80h	;   *
db  67h	; g
db    3
db 0F0h	;   *
db  8Bh	;   *
db  5Eh	; ^
db    6
db  80h	;   *
db  67h	; g
db    2
db 0FEh	;   *
db  8Ah	;   *
unk_1E0DB	db  47h	; G		; CODE XREF: dseg:1E0CA  j
db    3
db  24h	; $
db  0Fh
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db 0B0h	;   *
unk_1E0E3	db    1			; CODE XREF: dseg:1E0AF  j dseg:1E0C4  j ...
db  50h	; P
db  8Dh	;   *
db  4Eh	; N
db 0FCh	;   *
db  51h	; Q
db  9Ah	;   *
db  6Ch	; l
db    0
db  9Ch	;   *
db    4
db  83h	;   *
db 0C4h	;   *
db    4
db 0B1h	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Ah	;   *
db  47h	; G
db    3
db 0D2h	;   *
db 0E8h	;   *
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db 0B0h	;   *
db    1
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  9Ah	;   *
db  6Ch	; l
db    0
db  9Ch	;   *
db    4
db 0B1h	;   *
db    4
db 0D2h	;   *
db  66h	; f
db 0FEh	;   *
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  0Ah
db  46h	; F
db 0FCh	;   *
db  8Bh	;   *
db  5Eh	; ^
db    6
db  88h	;   *
db  47h	; G
db    3
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop

loc_1E120:				; CODE XREF: Q_1E45B-FFAA  p		 /* DOS offset ---> 157E:0 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db 0FFh
db  76h	; v
db    8
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0A8h	;   *
db    6
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db 0FFh
aV0		db 'v',8,'  *0',0         ; CODE XREF: dseg:1E10D  j dseg:1E120  j
db  25h	; %
db    5
;     ***************************************************************************

loc_1E13C:				; CODE XREF: dseg:1E020  j dseg:1E0E9  j ...		 /* DOS offset ---> 157F:C */
add	sp, 2
mov	[bp-2],	ax
push	ax
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_1E18F
call	far ptr	4B5h:290h
mov	ax, [bp+8]
add	ax, 1Ch
push	ax
push	word ptr [bp+6]
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	bx, [bp-2]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 56F0h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
call	far ptr	57Ch:126h
mov	al, 0Ah
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2

loc_1E18F:				; CODE XREF: dseg:E14D  j		 /* DOS offset ---> 1584:F */
push	word ptr [bp+8]
push	word ptr [bp+6]
call	far ptr	59Dh:428h
add	sp, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bl, al
sub	bh, bh
shl	bx, 1
push	word ptr [bx-359Eh]
call	far ptr	59Dh:190h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1E1BA:				; CODE XREF: Q_1E45B-10124  p		 /* DOS offset ---> 1587:A */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  8Bh	;   *
db  5Eh	; ^
db    6
db  80h	;   *
db  7Fh	; 
db  1Eh
db 0FFh
db  74h	; t
db  14h
db 0F6h	;   *
db  47h	; G
db    7
db    8
db  74h	; t
db  0Ah
db 0C6h	;   *
db  47h	; G
db  1Eh
db 0FFh
db  80h	;   *
db  67h	; g
db    7
db 0F7h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  80h	;   *
db  4Fh	; O
db    7
db    8
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************

loc_1E1DC:				; CODE XREF: Q_1E45B-100B6  p		 /* DOS offset ---> 1589:C */
push	bp
;     ***************************************************************************
aLP		db '    **P',0
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Ah	;   *
db  47h	; G
db  1Bh
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db  9Ah	;   *
db  32h	; 2
db    0
db  9Ch	;   *
db    4
db  8Bh	;   *
db 0E5h	;   *
db  50h	; P
db 0B0h	;   *
db    5
db  50h	; P
db  9Ah	;   *
db 0FAh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  2Ah	; *
db 0E4h	;   *
db    5
db  0Ah
db    0
db  50h	; P
db  9Ah	;   *
db  9Ch	;   *
db    1
db  61h	; a
db    5
db  8Bh	;   *
db  5Eh	; ^
unk_1E20C	db    6			; CODE XREF: dseg:1E1C5  j
db  88h	;   *
db  47h	; G
db  1Bh
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************

loc_1E214:				; CODE XREF: Q_1E45B-100A6  p		 /* DOS offset ---> 158D:4 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
unk_1E216	db 0ECh	;   *		; CODE XREF: dseg:1C0C3  P
db  56h	; V
db 0B0h	;   *
db    4
db  50h	; P
db  9Ah	;   *
db 0DCh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  0Fh
db 0B0h	;   *
db  51h	; Q
db  50h	; P
db  9Ah	;   *
db 0FAh	;   *
db    0
db  7Ch	; |
db    5
;     ***************************************************************************

loc_1E22F:				; CODE XREF: dseg:1E224  j		 /* DOS offset ---> 158E:F */
add	sp, 2
add	al, 0Ah
jmp	short loc_1E29F
;     ***************************************************************************
db 0B8h	;   *
db    2
db    0
db  50h	; P
db  9Ah	;   *
db  78h	; x
db    1
db  9Ch	;   *
db    4
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  2Ah	; *
db 0B0h	;   *
db  64h	; d
;     ***************************************************************************

loc_1E248:				; CODE XREF: dseg:1E25A  j		 /* DOS offset ---> 1590:8 */
push	ax
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2

loc_1E254:				; CODE XREF: dseg:1E237  j		 /* DOS offset ---> 1591:4 */
push	ax
mov	ax, [bp+8]
add	ax, 1Bh
push	ax
mov	si, ax

loc_1E25E:				; CODE XREF: dseg:1E250  j		 /* DOS offset ---> 1591:E */
call	far ptr	49Ch:48h
add	sp, 6
cmp	byte ptr [si], 46h ; 'F'
ja	short loc_1E292
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db 0B0h	;   *
db  0Ah
db  50h	; P
db  9Ah	;   *
db 0FAh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  50h	; P
db  8Bh	;   *
db  46h	; F
db    8
db    5
db  1Bh
db    0
db  50h	; P
db  8Bh	;   *
db 0F0h	;   *
db  9Ah	;   *
db  6Ch	; l
db    0
db  9Ch	;   *
db    4
db  83h	;   *
db 0C4h	;   *
db    4
db  80h	;   *
db  3Ch	; <
db  14h
db  73h	; s
db  13h
;     ***************************************************************************

loc_1E292:				; CODE XREF: dseg:E269  j		 /* DOS offset ---> 1595:2 */
mov	al, 1Fh
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */

loc_1E29A:				; CODE XREF: dseg:1E22D  j dseg:1E252  j ...		 /* DOS offset ---> 1595:A */
add	sp, 2
add	al, 1Eh

loc_1E29F:				; CODE XREF: dseg:E234  j		 /* DOS offset ---> 1595:F */
mov	bx, [bp+8]

loc_1E2A2:				; CODE XREF: dseg:1E548  p Q_1E590+D  p ...		 /* DOS offset ---> 1596:2 */
mov	[bx+1Bh], al
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1E2AA:				; CODE XREF: Q_1E45B-10070  p		 /* DOS offset ---> 1596:A */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  47h	; G
db    2
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  27h	; '
;     ***************************************************************************

loc_1E2BD:				; CODE XREF: dseg:E2E2  j		 /* DOS offset ---> 1597:D */
mov	al, 3
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
push	ax
mov	ax, [bp-2]
add	ax, 0Bh
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_1E2BD
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 14h

loc_1E2EE:				; CODE XREF: dseg:1E3BC  p		 /* DOS offset ---> 159A:E */
push	si
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2

loc_1E2FA:				; CODE XREF: dseg:1E3C1  p		 /* DOS offset ---> 159B:A */
mov	cl, game_difficulty
add	cl, 2
mov	dx, cx
shl	cl, 1
shl	cl, 1
add	cl, dl
add	cl, al
mov	[bp-0Ah], cl
mov	ax, 1
push	ax
call	far ptr	59Dh:320h
add	sp, 2
mov	word ptr [bp-0Eh], 0CAF8h
jmp	loc_1E4D7
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR Q_1E45B

loc_1E322:				; CODE XREF: Q_1E45B-FF78  j		 /* DOS offset ---> 159E:2 */
mov	bx, ax
mov	al, [bx+7]
and	al, 40h

loc_1E329:				; CODE XREF: dseg:1E3C7  p		 /* DOS offset ---> 159E:9 */
cmp	al, 1
sbb	ax, ax
inc	ax
mov	[bp+var_2], ax
and	byte ptr [bx+7], 0DEh
push	bx
push	cs
call	loc_1E1BA
add	sp, 2
mov	bx, [bp+var_C]
mov	ax, [bx]
mov	[bp+var_14], ax
mov	ax, 64h	; 'd'
mov	cl, [bx+6]
sub	ch, ch
sub	ax, cx
mov	cx, 0Ah
cwd
idiv	cx
add	al, 2
mov	[bp+var_8], al
push	bx
call	far ptr	525h:6
add	sp, 2
dec	al
jnz	short loc_1E36A
shr	[bp+var_8], 1

loc_1E36A:				; CODE XREF: Q_1E45B-100F6  j		 /* DOS offset ---> 15A2:A */
mov	bx, [bp+var_C]
mov	ax, [bx+2]
mov	[bp+var_12], ax
or	ax, ax
jnz	short loc_1E37A
jmp	loc_1E4D3
;     ***************************************************************************

loc_1E37A:				; CODE XREF: Q_1E45B-100E6  j		 /* DOS offset ---> 15A3:A */
; Q_1E45B-FF8B  j
mov	bx, ax
push	word ptr [bx+2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_1E392
mov	bx, [bp+var_12]
and	byte ptr [bx+12h], 0FBh

loc_1E392:				; CODE XREF: Q_1E45B-100D2  j		 /* DOS offset ---> 15A5:2 */
push	[bp+var_12]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_1E3AE
push	[bp+var_12]
push	cs
call	loc_1E1DC
add	sp, 2
jmp	loc_1E4C4
;     ***************************************************************************

loc_1E3AE:				; CODE XREF: Q_1E45B-100BC  j		 /* DOS offset ---> 15A6:E */
push	[bp+var_12]
push	[bp+var_C]
push	cs
call	loc_1E214
add	sp, 4
mov	bx, [bp+var_12]

loc_1E3BE:				; CODE XREF: dseg:1E3B6  j		 /* DOS offset ---> 15A7:E */
mov	ax, [bx+2]
mov	[bp+var_6], ax
or	ax, ax

loc_1E3C6:				; CODE XREF: dseg:1E3B9  j		 /* DOS offset ---> 15A8:6 */
jnz	short loc_1E3CB
jmp	loc_1E4C4
;     ***************************************************************************

loc_1E3CB:				; CODE XREF: Q_1E45B:loc_1E3C6  j		 /* DOS offset ---> 15A8:B */
; Q_1E45B-FF9A  j ...
mov	bx, [bp+var_6]
mov	ax, [bx]
mov	[bp+var_4], ax
push	[bp+var_2]
push	bx
push	cs
call	loc_1E0C0
add	sp, 4
mov	bx, [bp+var_6]
test	byte ptr [bx+2], 2
jz	short loc_1E439
push	[bp+var_12]
push	cs
call	loc_1E2AA
add	sp, 2
mov	bx, [bp+var_6]
mov	al, 29h	; ')'
mul	byte ptr [bx+0Dh]
mov	si, ax

loc_1E3FB:				; CODE XREF: dseg:1E3EF  j dseg:1E3F6  j		 /* DOS offset ---> 15AB:B */
mov	si, [si+2B34h]
mov	ax, [bx+10h]

loc_1E402:				; CODE XREF: dseg:1E3FB  j		 /* DOS offset ---> 15AC:2 */
test	[si+10h], ax
jnz	short loc_1E439
mov	al, [bx+0Eh]
sub	ah, ah
add	ax, 3
mov	cl, [bx+0Ch]
sub	ch, ch
cmp	ax, cx
jge	short loc_1E439
mov	al, [bx+7]
shr	al, 1
sub	al, 33h	; '3'
neg	al
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1E439
push	[bp+var_6]
call	far ptr	59Dh:0BEh
add	sp, 2

loc_1E439:				; CODE XREF: Q_1E45B-10076  j		 /* DOS offset ---> 15AF:9 */
; Q_1E45B-10056  j ...
mov	bx, [bp+var_14]
mov	si, [bp+var_6]
mov	ax, [si+10h]
test	[bx+10h], ax

loc_1E445:				; CODE XREF: dseg:1E437  j		 /* DOS offset ---> 15B0:5 */
jnz	short loc_1E4B7
push	si
push	bx
call	far ptr	60Dh:630h

loc_1E44E:				; CODE XREF: dseg:1E443  j		 /* DOS offset ---> 15B0:E */
add	sp, 4
sub	al, 64h	; 'd'
neg	al
push	ax

loc_1E456:				; CODE XREF: dseg:118AC  P		 /* DOS offset ---> 15B1:6 */
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short loc_1E4B7
mov	al, [bp+var_8]
mov	byte ptr [bp+var_10], al
mov	bx, [bp+var_6]
mov	al, [bx+0Ch]
push	ax

loc_1E46F:				; CODE XREF: Q_1E45B+48  j Q_1E45B+6B  j ...		 /* DOS offset ---> 15B2:F */
lea	ax, [bp+var_10]
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	al, byte ptr [bp+var_10]
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
push	ax
mov	ax, [bp+var_6]
add	ax, 0Bh
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	bx, [bp+var_12]
mov	ax, [bp+var_6]
cmp	[bx+2],	ax
jz	short loc_1E4B7
mov	bx, ax
mov	al, [bp+var_A]

loc_1E4A7:				; CODE XREF: Q_1E45B+33  j		 /* DOS offset ---> 15B6:7 */
cmp	[bx+0Bh], al
jnb	short loc_1E4B7
push	bx
push	[bp+var_12]
push	cs
call	loc_1E120
add	sp, 4

loc_1E4B7:				; CODE XREF: Q_1E45B:loc_1E445  j		 /* DOS offset ---> 15B7:7 */
; Q_1E45B-FFFB  j ...
mov	ax, [bp+var_4]
mov	[bp+var_6], ax
or	ax, ax
jz	short loc_1E4C4
jmp	loc_1E3CB
;     ***************************************************************************

loc_1E4C4:				; CODE XREF: Q_1E45B-100B0  j		 /* DOS offset ---> 15B8:4 */
; Q_1E45B-10093  j ...
mov	bx, [bp+var_12]
mov	ax, [bx]
mov	[bp+var_12], ax
or	ax, ax
jz	short loc_1E4D3
jmp	loc_1E37A
;     ***************************************************************************

loc_1E4D3:				; CODE XREF: Q_1E45B-100E4  j		 /* DOS offset ---> 15B9:3 */
; Q_1E45B-FF8D  j
add	[bp+var_E], 2

loc_1E4D7:				; CODE XREF: dseg:E31F  j		 /* DOS offset ---> 15B9:7 */
mov	bx, [bp+var_E]
mov	ax, [bx]
mov	[bp+var_C], ax
or	ax, ax
jz	short loc_1E4E6
jmp	loc_1E322
;     ***************************************************************************

loc_1E4E6:				; CODE XREF: Q_1E45B-FF7A  j		 /* DOS offset ---> 15BA:6 */
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR Q_1E45B
;     ***************************************************************************
nop

loc_1E4EC:				; CODE XREF: dseg:E663  p		 /* DOS offset ---> 15BA:C */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
unk_1E4F1	db    4			; CODE XREF: Q_1E45B+4A  j
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  28h	; (
db    4
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db 0C7h	;   *
db  46h	; F
db 0FEh	;   *
db  62h	; b
db 0CAh	;   *
;     ***************************************************************************

loc_1E502:				; CODE XREF: dseg:E54A  j		 /* DOS offset ---> 15BC:2 */
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jz	short loc_1E562
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2

loc_1E517:				; CODE XREF: Q_1E45B+9A  j		 /* DOS offset ---> 15BD:7 */
or	ax, ax
jnz	short loc_1E546
push	word ptr [bp-4]
call	far ptr	525h:4Ah

loc_1E523:				; CODE XREF: dseg:115A0  P		 /* DOS offset ---> 15BE:3 */
add	sp, 2
push	ax
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp+8]
cmp	al, [bx+0Ah]
jnz	short loc_1E546
push	word ptr [bp-4]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_1E54C

loc_1E546:				; CODE XREF: dseg:E519  j dseg:E535  j ...		 /* DOS offset ---> 15C0:6 */
add	word ptr [bp-2], 2
jmp	short loc_1E502
;     ***************************************************************************

loc_1E54C:				; CODE XREF: dseg:E544  j		 /* DOS offset ---> 15C0:C */
push	word ptr [bp+8]
push	word ptr [bp-4]
call	far ptr	59Dh:5CEh
add	sp, 4
mov	ax, 1
mov	sp, bp
pop	bp

locret_1E560:				; CODE XREF: dseg:1E559  j
retf
;     ***************************************************************************
nop

loc_1E562:				; CODE XREF: dseg:E50C  j dseg:1E55E  j		 /* DOS offset ---> 15C2:2 */
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1E568:				; CODE XREF: dseg:E63B  p		 /* DOS offset ---> 15C2:8 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  56h	; V
db  8Bh	;   *
db  5Eh	; ^
db    8
db  8Ah	;   *
db  47h	; G
db    7
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db 0F6h	;   *
db  47h	; G
db    2
db    2
db  74h	; t
db  3Ch	; <
db  53h	; S
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0FFh
db  37h	; 7
db  9Ah	;   *
db  30h	; 0
db    6
db  0Dh
db    6
db  83h	;   *
db 0C4h	;   *
db    4
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db 0FFh
unk_1E590	db  76h	; v		; CODE XREF: dseg:1E785  p
db    8
db  8Bh	;   *
db  5Eh	; ^
db    8
db 0B0h	;   *
db  29h	; )
db 0F6h	;   *
db  67h	; g
db  0Dh
db  8Bh	;   *
db 0D8h	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR Q_1E590

loc_1E59C:				; CODE XREF: Q_1E590+2A  j Q_1E590+57  j		 /* DOS offset ---> 15C5:C */
push	word ptr [bx+2B34h]
call	far ptr	60Dh:630h
add	sp, 4
add	al, byte ptr [bp+var_2]
push	ax
lea	ax, [bp+var_4]
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
jmp	short loc_1E60E
; END OF FUNCTION CHUNK	FOR Q_1E590
;     ***************************************************************************
db  53h	; S
db  9Ah	;   *
db  30h	; 0
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db 0D8h	;   *
db  8Bh	;   *
db  1Fh
db  8Bh	;   *
db  76h	; v
db    8
db  8Bh	;   *
db  44h	; D
db  10h
db  85h	;   *
db  47h	; G
db  10h
db  74h	; t
db    4
db  2Ah	; *
db 0C0h	;   *
db 0EBh	;   *
db  35h	; 5
db  56h	; V
db  9Ah	;   *
db  30h	; 0
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db 0D8h	;   *
db 0FFh
db  37h	; 7
db 0FFh
db  76h	; v
db    8
db  9Ah	;   *
db  30h	; 0
db    6
db  0Dh
unk_1E5EA	db    6			; CODE XREF: Q_1E590+31  j Q_1E590+3A  j ...
db  83h	;   *
db 0C4h	;   *
db    4
db  2Ah	; *
db 0E4h	;   *
db  8Ah	;   *
db  4Eh	; N
db 0FEh	;   *
db  2Ah	; *
db 0EDh	;   *
db    3
db 0C1h	;   *
db  99h	;   *
db  33h	; 3
db 0C2h	;   *
db  2Bh	; +
db 0C2h	;   *
db 0B9h	;   *
db    2
db    0
db 0D3h	;   *
db 0F8h	;   *
db  33h	; 3
db 0C2h	;   *
db  2Bh	; +
db 0C2h	;   *
db  8Bh	;   *
db 0C8h	;   *
db 0B0h	;   *
db  64h	; d
db  2Ah	; *
db 0C1h	;   *
db  88h	;   *
db  46h	; F
db 0FCh	;   *
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR Q_1E590

loc_1E60E:				; CODE XREF: Q_1E590-FFD8  j		 /* DOS offset ---> 15CC:E */
mov	al, byte ptr [bp+var_4]
pop	si
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR Q_1E590
;     ***************************************************************************
db  55h	; U
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    6
db  8Bh	;   *
db  5Eh	; ^
db    8
db  8Bh	;   *
db  5Fh	; _
db    2
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db  89h	;   *
db    0
;     ***************************************************************************

loc_1E62E:				; CODE XREF: dseg:E6B4  j		 /* DOS offset ---> 15CE:E */
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-2],	ax
push	bx
push	word ptr [bp+6]
push	cs
call	loc_1E568
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short loc_1E67E
push	word ptr [bp-4]
push	word ptr [bp+8]
call	far ptr	59Dh:6A8h
add	sp, 4
push	word ptr [bp-4]
push	word ptr [bp+8]
push	cs
call	loc_1E4EC
add	sp, 4
or	ax, ax
jnz	short loc_1E6AA
push	word ptr [bp-4]
push	word ptr [bp+8]

loc_1E673:				; CODE XREF: Q_1E590+65  j Q_1E590+6B  j		 /* DOS offset ---> 15D3:3 */
call	far ptr	59Dh:190h
add	sp, 4
jmp	short loc_1E6AA
;     ***************************************************************************
nop

loc_1E67E:				; CODE XREF: dseg:E64C  j		 /* DOS offset ---> 15D3:E */
; game_messenger_travel_s_11B56+3A  P ...
push	word ptr [bp+6]
;     ***************************************************************************
db 0FFh
db  76h	; v
db 0FCh	;   *
db  9Ah	;   *
db  2Eh	; .
db    2
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db 0B0h	;   *
db  64h	; d
db  50h	; P
db 0B0h	;   *
db  14h
db  50h	; P
db  9Ah	;   *
db 0FAh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  50h	; P
db  8Bh	;   *
unk_1E69C	db  46h	; F		; CODE XREF: dseg:1E68F  j
db 0FCh	;   *
db    5
db  0Bh
db    0
db  50h	; P
db  9Ah	;   *
db  48h	; H
db    0
db  9Ch	;   *
db    4
db  83h	;   *
db 0C4h	;   *
db    6
;     ***************************************************************************

loc_1E6AA:				; CODE XREF: dseg:E66B  j dseg:E67B  j		 /* DOS offset ---> 15D6:A */
mov	ax, [bp-2]
mov	[bp-4],	ax
or	ax, ax
jz	short loc_1E6B7
jmp	loc_1E62E
;     ***************************************************************************

loc_1E6B7:				; CODE XREF: dseg:E6B2  j		 /* DOS offset ---> 15D7:7 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Ah
db  56h	; V
db 0B0h	;   *
db  32h	; 2
db  50h	; P
db 0B8h	;   *
db  10h
db    0
db  50h	; P
db  8Bh	;   *
db  4Eh	; N
db    6
db  83h	;   *
db 0C1h	;   *
db  0Eh
db  51h	; Q
db  9Ah	;   *
db 0A0h	;   *
db    0
db  61h	; a
db    5
db  83h	;   *
db 0C4h	;   *
db    6
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db    6
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Ah	;   *
db 0C8h	;   *
db  88h	;   *
db  4Eh	; N
db 0FEh	;   *
db 0B8h	;   *
db    1
db    0
db 0D3h	;   *
db 0E0h	;   *
db 0F7h	;   *
db 0D0h	;   *
db  89h	;   *
db  46h	; F
db 0FAh	;   *
db 0C7h	;   *
db  46h	; F
db 0FCh	;   *
db  34h	; 4
db  2Bh	; +
db 0C7h	;   *
db  46h	; F
db 0F6h	;   *
db  10h
db    0
;     ***************************************************************************

loc_1E6FD:				; CODE XREF: dseg:E736  j		 /* DOS offset ---> 15DB:D */
mov	ax, [bp-6]
mov	bx, [bp-4]
and	[bx+0Ah], ax
cmp	word ptr [bx], 0
jz	short loc_1E72F
mov	ax, [bp+6]
cmp	[bp-4],	ax
jz	short loc_1E72F
mov	ax, [bp+8]
cmp	[bp-4],	ax
jnz	short loc_1E720
mov	al, 64h	; 'd'
jmp	short loc_1E722
;     ***************************************************************************
nop

loc_1E720:				; CODE XREF: dseg:E719  j		 /* DOS offset ---> 15DE:0 */
mov	al, 32h	; '2'

loc_1E722:				; CODE XREF: dseg:E71D  j		 /* DOS offset ---> 15DE:2 */
mov	si, [bp-2]
and	si, 0FFh
mov	bx, [bp-4]
mov	[bx+si+0Eh], al

loc_1E72F:				; CODE XREF: dseg:E709  j dseg:E711  j		 /* DOS offset ---> 15DE:F */
add	word ptr [bp-4], 29h ; ')'
dec	word ptr [bp-0Ah]
jnz	short loc_1E6FD
pop	si

loc_1E739:				; CODE XREF: dseg:1E719  j		 /* DOS offset ---> 15DF:9 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db    6
db    0
db  25h	; %
db    5
db  8Bh	;   *
db  5Eh	; ^
db    8
db  88h	;   *
db  47h	; G
db  10h
db 0B0h	;   *
db 0FFh
db  88h	;   *
db  47h	; G
db  14h
db  88h	;   *
db  47h	; G
db  15h
db  80h	;   *
db  67h	; g
db  12h
db 0FBh	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  8Bh	;   *
db  46h	; F
db    8
;     ***************************************************************************

loc_1E766:				; CODE XREF: dseg:1E75D  j		 /* DOS offset ---> 15E2:6 */
mov	bx, [bp+6]
mov	[bx], ax
mov	word ptr [bx+4], 0
mov	byte ptr [bx+6], 32h ; '2'
mov	byte ptr [bx+7], 0
mov	al, 0FFh
mov	[bx+8],	al
mov	[bx+9],	al

loc_1E780:				; CODE XREF: dseg:1E745  j		 /* DOS offset ---> 15E4:0 */
mov	word ptr [bx+0Ah], 0
mov	[bx+1Eh], al
mov	[bx+1Fh], al

loc_1E78B:				; CODE XREF: dseg:1E764  j dseg:1E770  j ...		 /* DOS offset ---> 15E4:B */
mov	[bx+20h], al
mov	[bx+21h], al
mov	[bx+22h], al
mov	word ptr [bx+23h], 0
sub	ax, ax
mov	[bx+27h], ax
mov	[bx+25h], ax
pop	bp
retf
;     ***************************************************************************
nop
push	bp

loc_1E7A5:				; CODE XREF: dseg:1E7AC  j		 /* DOS offset ---> 15E6:5 */
mov	bp, sp
sub	sp, 4
mov	byte ptr [bp-4], 0
mov	word ptr [bp-2], 2B34h

loc_1E7B3:				; CODE XREF: dseg:E7C6  j		 /* DOS offset ---> 15E7:3 */
mov	bx, [bp-2]

loc_1E7B6:				; CODE XREF: dseg:1E798  j		 /* DOS offset ---> 15E7:6 */
cmp	word ptr [bx], 0
jz	short loc_1E7CC

loc_1E7BB:				; CODE XREF: game_messenger_travel_s_11C82+16  P		 /* DOS offset ---> 15E7:B */
; game_messenger_travel_s_11C82+5B  P
add	word ptr [bp-2], 29h ; ')'
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 10h
jb	short loc_1E7B3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1E7CC:				; CODE XREF: dseg:E7B9  j		 /* DOS offset ---> 15E8:C */
mov	ax, bx
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1E7D2:				; CODE XREF: Q_1E8C2-FE6E  p		 /* DOS offset ---> 15E9:2 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    8
db  8Bh	;   *
db  5Eh	; ^
db    8
db  8Ah	;   *
db  47h	; G
db    2
db  24h	; $
db    8
db  3Ch	; <
db    1
db  1Bh
db 0C0h	;   *
db  40h	; @
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  4Ah	; J
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  0Eh
db 0E8h	;   *
db 0AAh	;   *
db 0FFh
db  89h	;   *
db  46h	; F
db 0FAh	;   *
db 0FFh
db  76h	; v
db    6
db 0FFh
db  76h	; v
db 0FCh	;   *
db  9Ah	;   *
db  2Eh	; .
db    5
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db 0FFh
db  76h	; v
db 0FAh	;   *
db  9Ah	;   *
db    6
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db    8
db  88h	;   *
db  47h	; G
db  0Ah
db  53h	; S
db  9Ah	;   *
db 0BEh	;   *
db    0
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db 0FAh	;   *
db 0C7h	;   *
db  47h	; G
db    2
db    0
db    0
db 0FFh
db  76h	; v
db    6
db  53h	; S
db  9Ah	;   *
db  9Ch	;   *
db    4
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db 0FFh
db  76h	; v
db    8
db 0FFh
db  76h	; v
db 0FAh	;   *
db  0Eh
db 0E8h	;   *
db  1Dh
db 0FFh
db  83h	;   *
unk_1E844	db 0C4h	;   *		; CODE XREF: Q_1E7BE+68  j
db    4
db 0FFh
db  76h	; v
db    6
db 0FFh
db  76h	; v
db 0FAh	;   *
db  0Eh
db 0E8h	;   *
db 0EEh	;   *
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db 0FFh
db  76h	; v
db    6
db 0FFh
unk_1E857	db  76h	; v		; CODE XREF: Q_1E7BE+84  j
db 0FAh	;   *
db  0Eh
db 0E8h	;   *
db 0B9h	;   *
db 0FDh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db 0FFh
db  76h	; v
db 0FCh	;   *
db 0FFh
db  76h	; v
db 0FAh	;   *
db  0Eh
db 0E8h	;   *
db  52h	; R
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db 0FFh
db  76h	; v
db 0FAh	;   *
db  9Ah	;   *
db    6
db    0
db  25h	; %
db    5
db  83h	;   *
unk_1E876	db 0C4h	;   *		; CODE XREF: Q_1E7BE+A0  j
db    2
db  8Ah	;   *
db 0D8h	;   *
db  2Ah	; *
db 0FFh
db  88h	;   *
db 0BFh	;   *
db  60h	; `
db  33h	; 3
db  83h	;   *
db  7Eh	; ~
db  0Ah
db    0
db  75h	; u
db  12h
db 0B8h	;   *
db    4
db    0
db  50h	; P
db 0B8h	;   *
db  62h	; b
db  68h	; h
db  99h	;   *
db  52h	; R
db  50h	; P
db  9Ah	;   *
db 0F8h	;   *
db    1
db 0B5h	;   *
db    4
db  83h	;   *
unk_1E896	db 0C4h	;   *		; CODE XREF: Q_1E7BE+CB  j
db    6
db 0FFh
db  76h	; v
unk_1E89A	db    6			; CODE XREF: Q_1E7BE+FB  j
db  9Ah	;   *
db 0F4h	;   *
db    3
db 0B5h	;   *
db    4
db  83h	;   *
db 0C4h	;   *
db    2
db  9Ah	;   *
db  90h	;   *
db    2
db 0B5h	;   *
db    4
db  83h	;   *
db  7Eh	; ~
db 0FEh	;   *
db    0
db  74h	; t
db  30h	; 0
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db  8Bh	;   *
db    7
db    5
db  1Ch
db    0
db  50h	; P
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  64h	; d
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
;     ***************************************************************************

loc_1E8C2:				; CODE XREF: game_messenger_travel_s_11DBE+3A  P		 /* DOS offset ---> 15F8:2 */
; game_messenger_travel_s_11DBE+69  P
sub	ah, ah
;     ***************************************************************************
db  40h	; @
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db 0FAh	;   *
db  8Bh	;   *
db    7
db    5
db  1Ch
db    0
db  50h	; P
db 0B8h	;   *
db  3Bh	; ;
db  57h	; W
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    8
db 0EBh	;   *
db  25h	; %
;     ***************************************************************************
nop
push	word ptr [bp+6]
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	bx, [bp-6]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 5786h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
mov	al, 5
push	ax
call	far ptr	6EBh:4F0h
add	sp, 2
mov	bx, [bp+6]
mov	ax, [bx+2]
add	ax, 1Ch
push	ax
mov	ax, 57BBh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
call	far ptr	57Ch:15Eh
mov	al, 0Ah
push	ax
call	far ptr	57Ch:7Ch
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Eh
mov	al, 6
sub	al, game_difficulty
mov	cx, ax
shl	al, 1
shl	al, 1
add	al, cl
shl	al, 1
mov	[bp-4],	al
mov	word ptr [bp-8], 0
mov	word ptr [bp-0Ch], 2DC4h
mov	word ptr [bp-0Eh], 29h ; ')'
; START	OF FUNCTION CHUNK FOR Q_1E8C2

loc_1E95C:				; CODE XREF: Q_1E8C2-FE56  j Q_1E8C2+6F  j		 /* DOS offset ---> 1601:C */
mov	bx, [bp+var_C]
and	byte ptr [bx+12h], 77h
and	byte ptr [bx+13h], 0BBh
push	bx
call	far ptr	525h:4Ah
add	sp, 2
mov	bx, ax
mov	al, [bx+6]
shr	al, 1
shr	al, 1

loc_1E979:				; CODE XREF: Q_1E8C2+97  j		 /* DOS offset ---> 1603:9 */
add	al, [bp+var_4]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1E992
mov	bx, [bp+var_C]
or	byte ptr [bx+13h], 2
jmp	short loc_1E999
;     ***************************************************************************

loc_1E992:				; CODE XREF: Q_1E8C2-FF3B  j		 /* DOS offset ---> 1605:2 */
mov	bx, [bp+var_C]

loc_1E995:				; CODE XREF: Q_1E8C2+C0  j Q_1E8C2+F3  j		 /* DOS offset ---> 1605:5 */
and	byte ptr [bx+13h], 0FDh

loc_1E999:				; CODE XREF: Q_1E8C2-FF32  j		 /* DOS offset ---> 1605:9 */
mov	bx, [bp+var_C]
mov	ax, [bx+4]
mov	[bp+var_2], ax
or	ax, ax
jz	short loc_1E9BF

loc_1E9A6:				; CODE XREF: Q_1E8C2:loc_1E9BD  j		 /* DOS offset ---> 1606:6 */
sub	ax, ax
push	ax
push	[bp+var_2]
push	cs
call	loc_1E0C0
add	sp, 4
mov	bx, [bp+var_2]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax

loc_1E9BD:		 /* DOS offset ---> 1607:D */
jnz	short loc_1E9A6

loc_1E9BF:				; CODE XREF: Q_1E8C2-FF1E  j		 /* DOS offset ---> 1607:F */
cmp	byte_10047, 10h
jb	short loc_1E9C9
jmp	loc_1EA63
;     ***************************************************************************

loc_1E9C9:				; CODE XREF: Q_1E8C2-FEFE  j		 /* DOS offset ---> 1608:9 */
push	[bp+var_C]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short loc_1E9DB
jmp	loc_1EA63
;     ***************************************************************************

loc_1E9DB:				; CODE XREF: Q_1E8C2-FEEC  j		 /* DOS offset ---> 1609:B */
push	[bp+var_C]
call	far ptr	542h:92h

loc_1E9E3:				; CODE XREF: s_1E9BE+20  j		 /* DOS offset ---> 160A:3 */
add	sp, 2
or	ax, ax
jnz	short loc_1EA63
mov	bx, [bp+var_C]
mov	ax, [bx+2]
mov	[bp+var_2], ax
push	ax

loc_1E9F4:				; CODE XREF: s_1E9BE+33  j		 /* DOS offset ---> 160B:4 */
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jnz	short loc_1EA63
mov	bx, [bp+var_2]
test	byte ptr [bx+2], 2
jnz	short loc_1EA63
mov	al, game_difficulty
mov	cx, ax
shl	al, 1
shl	al, 1
add	al, cl
shl	al, 1
add	al, [bx+9]
add	al, 5
mov	byte ptr [bp+var_A], al
mov	al, [bx+7]
add	al, [bx+0Bh]
push	ax
lea	ax, [bp+var_A]
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	bx, [bp+var_2]
test	byte ptr [bx+2], 8

loc_1EA38:				; CODE XREF: s_1E9BE+73  j		 /* DOS offset ---> 160F:8 */
jnz	short loc_1EA4A

loc_1EA3A:				; CODE XREF: s_1E9BE+78  j		 /* DOS offset ---> 160F:A */
mov	al, byte ptr [bp+var_A]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1EA63

loc_1EA4A:				; CODE XREF: Q_1E8C2:loc_1EA38  j		 /* DOS offset ---> 1610:A */
push	[bp+var_8]
push	[bp+var_2]
push	[bp+var_C]
push	cs
call	loc_1E7D2
add	sp, 6
mov	[bp+var_8], 1
inc	byte_10047

loc_1EA63:				; CODE XREF: Q_1E8C2-FEFC  j		 /* DOS offset ---> 1612:3 */
; Q_1E8C2-FEEA  j ...
add	[bp+var_C], 23h	; '#'
dec	[bp+var_E]
jz	short loc_1EA6F
jmp	loc_1E95C
;     ***************************************************************************

loc_1EA6F:				; CODE XREF: Q_1E8C2-FE58  j		 /* DOS offset ---> 1612:F */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR Q_1E8C2
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


s_EA74		proc far		; CODE XREF: s_EC3A+EA  p s_F1A0+69  p ...		 /* DOS offset ---> 1613:4 */
cmp	word_1CA9E, 0
;     ***************************************************************************
db  75h	; u
db  1Fh
db 0B8h	;   *
db    4
db    0
;     ***************************************************************************

loc_1EA7E:				; CODE XREF: s_1E9BE+22  j s_1E9BE+35  j		 /* DOS offset ---> 1613:E */
push	ax
mov	ax, 37AEh
push	ax
sub	ax, ax
push	ax
push	ax
call	far ptr	4B5h:1CEh
add	sp, 8
mov	word_1CA9E, 1
call	far ptr	4B5h:398h
retf
s_EA74		endp		 /* DOS offset ---> 1613:4 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_EA9C		proc far		; CODE XREF: s_EC3A:loc_1ED89  p		 /* DOS offset ---> 1615:C */
; s_F1A0:loc_1F269  p ...
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  8Ah	;   *
db  46h	; F
db    6
db  50h	; P
db  9Ah	;   *
db 0F0h	;   *
db    4
db 0EBh	;   *
db    6
db  8Bh	;   *
db 0E5h	;   *
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  9Ah	;   *
db  96h	;   *
db    0
db  7Ch	; |
db    5
db  8Bh	;   *
db 0E5h	;   *
db 0B8h	;   *
unk_1EAB6	db    7			; CODE XREF: s_1E9BE+B6  j s_1E9BE+DC  j
db    0
db  50h	; P
db  9Ah	;   *
db  58h	; X
db    4
unk_1EABC	db 0EFh	;   *		; CODE XREF: s_1EE7C+113  p
db    3
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
s_EA9C		endp		 /* DOS offset ---> 1615:C */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_events_riots_possibly proc	far	; CODE XREF: s_EC3A+108  p

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 4
push	di
push	si
mov	ax, 15h
push	ax
call	far ptr	49Ch:178h
add	sp, 2

loc_1EAD6:				; CODE XREF: s_1EABC+7  j		 /* DOS offset ---> 1619:6 */
add	ax, 0Ah
push	ax
mov	bx, [bp+arg_0]
mov	al, [bx+17h]
sub	ah, ah
push	ax

loc_1EAE3:				; CODE XREF: dseg:1EC3B  p		 /* DOS offset ---> 161A:3 */
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+arg_0]
mov	[bx+17h], al
mov	ax, 21
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 50
push	ax
mov	bx, [bp+arg_0]
mov	al, [bx+16h]
sub	ah, ah
push	ax
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+arg_0]
mov	[bx+16h], al
mov	ax, 15h
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 50
push	ax
mov	bx, [bp+arg_0]
push	word ptr [bx+8]
call	far ptr	49Ch:32h
add	sp, 4

loc_1EB36:				; CODE XREF: s_1EE7C+E1  p		 /* DOS offset ---> 161F:6 */
mov	bx, [bp+arg_0]
mov	[bx+8],	ax
mov	ax, 2
cwd
push	dx
push	ax
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	cx, 100
sub	bx, bx
push	bx
push	cx
mov	bx, [bp+arg_0]
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
mov	si, ax
mov	di, dx
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
push	dx
push	ax
mov	ax, 15h
push	ax
call	far ptr	49Ch:178h
add	sp, 2
sub	dx, dx
push	dx
push	ax
call	far ptr	0:38B2h
add	si, ax
adc	di, dx
mov	bx, [bp+arg_0]
mov	[bx+0Ah], si
mov	[bx+0Ch], di
mov	ax, [bx+2]
mov	[bp+var_2], ax
or	ax, ax
jz	short loc_1EBCF

loc_1EB94:				; CODE XREF: game_events_riots_possibly+10B  j		 /* DOS offset ---> 1625:4 */
mov	ax, 15h
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 3Ch	; '<'
push	ax
mov	bx, [bp+var_2]
push	word ptr [bx+12h]
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+var_2]
mov	[bx+12h], ax
or	ax, ax
jnz	short loc_1EBC3

loc_1EBBC:				; CODE XREF: dseg:1EBB7  j		 /* DOS offset ---> 1627:C */
mov	bx, [bp+var_2]
mov	byte ptr [bx+16h], 64h ; 'd'

loc_1EBC3:				; CODE XREF: game_events_riots_possibly+F8  j		 /* DOS offset ---> 1628:3 */
; dseg:1EBBC  j
mov	bx, [bp+var_2]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_1EB94

loc_1EBCF:				; CODE XREF: game_events_riots_possibly+D0  j		 /* DOS offset ---> 1628:F */
mov	bx, [bp+arg_0]

loc_1EBD2:				; CODE XREF: dseg:1EB5E  j		 /* DOS offset ---> 1629:2 */
mov	ax, [bx+0Eh]
mov	[bp+var_4], ax
mov	cx, 15h
push	cx
mov	si, ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 3Ch	; '<'
push	ax
push	si
call	far ptr	49Ch:32h
add	sp, 4
inc	ax
mov	bx, [bp+arg_0]
mov	[bx+0Eh], ax
mov	ax, 7530h
push	ax
mov	ax, [bp+var_4]
sub	ax, [bx+0Eh]
push	ax
push	bx
call	far ptr	59Dh:428h
add	sp, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bl, al
sub	bh, bh
shl	bx, 1
mov	ax, [bx-359Eh]
add	ax, 0Eh
push	ax
call	far ptr	49Ch:8Ch
add	sp, 6
mov	bx, [bp+arg_0]
or	byte ptr [bx+13h], 30h
pop	si
pop	di
mov	sp, bp
pop	bp
retf
game_events_riots_possibly endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_EC3A		proc far		 /* DOS offset ---> 162F:A */

var_8		= word ptr -8
var_6		= byte ptr -6
var_4		= byte ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp

loc_1EC3D:				; CODE XREF: dseg:1EBB9  j dseg:1EBC2  j		 /* DOS offset ---> 162F:D */
sub	sp, 8
push	si

loc_1EC41:				; CODE XREF: s_1EE7C+31  p		 /* DOS offset ---> 1630:1 */
sub	al, al
push	ax
mov	cx, 52h	; 'R'
push	cx
mov	cx, 5992h
push	cx
call	far ptr	561h:0A0h
add	sp, 6
mov	al, game_difficulty
add	al, 9
mov	cx, ax
shl	al, 1
shl	al, 1
add	al, cl
mov	[bp+var_4], al
mov	[bp+var_2], 0
mov	[bp+var_6], 0
mov	[bp+var_8], 2DC4h

loc_1EC72:				; CODE XREF: s_EC3A+CE  j		 /* DOS offset ---> 1633:2 */
push	[bp+var_8]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_1ECFB
push	[bp+var_8]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_1ECFB
mov	bx, [bp+var_8]
test	byte ptr [bx+13h], 30h
jnz	short loc_1ECFB
mov	al, 19h

loc_1EC9B:				; CODE XREF: dseg:1ECD6  j		 /* DOS offset ---> 1635:B */
push	ax

loc_1EC9C:				; CODE XREF: dseg:1EC96  j		 /* DOS offset ---> 1635:C */
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
sub	ah, ah
push	[bp+var_8]
mov	si, ax
call	far ptr	525h:4Ah
add	sp, 2
mov	bx, [bp+var_8]
mov	cx, ax
mov	al, [bx+17h]
mov	bl, 3
sub	ah, ah
div	bl
sub	ah, ah
mov	dl, [bp+var_4]
sub	dh, dh
sub	dx, ax
mov	bx, cx
mov	al, [bx+6]

loc_1ECCF:				; CODE XREF: dseg:1ECBA  j		 /* DOS offset ---> 1638:F */
mov	bx, [bp+var_8]
mov	bx, [bx+2]
mov	cl, [bx+6]

loc_1ECD8:				; CODE XREF: dseg:1EC75  j		 /* DOS offset ---> 1639:8 */
sub	ch, ch
add	ax, cx

loc_1ECDC:				; CODE XREF: dseg:1EC9D  j dseg:1ECCE  j		 /* DOS offset ---> 1639:C */
mov	cx, 3
mov	bx, dx
cwd
idiv	cx
add	ax, si
cmp	ax, bx
jge	short loc_1ECFB
mov	ax, 1

loc_1ECED:				; CODE XREF: dseg:1ED2C  j		 /* DOS offset ---> 163A:D */
mov	bl, [bp+var_6]
sub	bh, bh
shl	bx, 1
mov	[bx+5992h], ax
mov	[bp+var_2], ax

loc_1ECFB:				; CODE XREF: s_EC3A+45  j s_EC3A+54  j ...		 /* DOS offset ---> 163B:B */
add	[bp+var_8], 23h	; '#'
inc	[bp+var_6]
cmp	[bp+var_6], 29h	; ')'
jnb	short loc_1ED0B
jmp	loc_1EC72
;     ***************************************************************************

loc_1ED0B:				; CODE XREF: s_EC3A+CC  j		 /* DOS offset ---> 163C:B */
cmp	[bp+var_2], 0
jz	short loc_1ED8F
mov	ax, 4
push	ax
mov	ax, 470Fh
cwd
push	dx
push	ax

loc_1ED1B:				; CODE XREF: dseg:1ECF3  j		 /* DOS offset ---> 163D:B */
call	far ptr	4B5h:1F8h
add	sp, 6
push	cs
call	near ptr s_EA74	; *
mov	[bp+var_6], 0

loc_1ED2B:				; CODE XREF: dseg:1ECEB  j		 /* DOS offset ---> 163E:B */
mov	[bp+var_8], 2DC4h

loc_1ED30:				; CODE XREF: s_EC3A+138  j		 /* DOS offset ---> 163F:0 */
mov	bl, [bp+var_6]
sub	bh, bh
shl	bx, 1

loc_1ED37:				; CODE XREF: s_1EE7C+29  p		 /* DOS offset ---> 163F:7 */
cmp	word ptr [bx+5992h], 1
jnz	short loc_1ED67
push	[bp+var_8]
push	cs
call	near ptr game_events_riots_possibly
add	sp, 2
sub	ax, ax
push	ax
mov	ax, 5820h
push	ax
mov	ax, 2
push	ax

loc_1ED53:				; CODE XREF: dseg:1ED83  j		 /* DOS offset ---> 1641:3 */
sub	ax, ax
push	ax
mov	bx, [bp+var_8]
push	word ptr [bx+1Eh]
push	word ptr [bx+1Ch]
call	far ptr	0:5E6h
add	sp, 0Ch

loc_1ED67:				; CODE XREF: s_EC3A+102  j		 /* DOS offset ---> 1642:7 */
add	[bp+var_8], 35
inc	[bp+var_6]
cmp	[bp+var_6], 41
jb	short loc_1ED30
call	far ptr	4B5h:290h
mov	ax, 5804h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	al, 3
push	ax
push	cs

loc_1ED89:				; CODE XREF: dseg:1ED7A  j		 /* DOS offset ---> 1644:9 */
call	near ptr s_EA9C
add	sp, 2

loc_1ED8F:				; CODE XREF: s_EC3A+D5  j		 /* DOS offset ---> 1644:F */
pop	si
mov	sp, bp

loc_1ED92:				; CODE XREF: s_1EE7C+122  p		 /* DOS offset ---> 1645:2 */
pop	bp
retf
s_EC3A		endp		 /* DOS offset ---> 162F:A */

;     ***************************************************************************

loc_1ED94:				; CODE XREF: game_events_locusts+139  p		 /* DOS offset ---> 1645:4 */
; game_events_locusts+156  p
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  92h	;   *
db    0
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  6Dh	; m
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  47h	; G
db    2
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  60h	; `
;     ***************************************************************************

loc_1EDB6:				; CODE XREF: dseg:EE14  j		 /* DOS offset ---> 1647:6 */
mov	ax, 6
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	cl, [bp+0Ah]
sub	ch, ch
add	ax, cx
add	ax, 46h	; 'F'
push	ax
mov	bx, [bp-2]
push	word ptr [bx+12h]
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp-2]
mov	[bx+12h], ax

loc_1EDE1:				; CODE XREF: dseg:1EDD7  j		 /* DOS offset ---> 164A:1 */
or	ax, ax
jnz	short loc_1EDEC
mov	bx, [bp-2]
mov	byte ptr [bx+16h], 64h ; 'd'

loc_1EDEC:				; CODE XREF: dseg:EDE3  j		 /* DOS offset ---> 164A:C */
cmp	word ptr [bp+8], 0
jz	short loc_1EE0A
mov	bx, [bp-2]
and	byte ptr [bx+3], 0Fh
mov	al, 4
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */

loc_1EE01:				; CODE XREF: dseg:1EDC3  j dseg:1EDF3  j		 /* DOS offset ---> 164C:1 */
add	sp, 2
mov	bx, [bp-2]
or	[bx+3],	al

loc_1EE0A:				; CODE XREF: dseg:EDF0  j		 /* DOS offset ---> 164C:A */
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_1EDB6
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_events_locusts proc far		; CODE XREF: s_F1A0+90  p
; dseg:loc_1F321  p ...

var_2		= word ptr -2
arg_0		= byte ptr  6
arg_2		= byte ptr  8

push	bp
mov	bp, sp
sub	sp, 2
push	di
push	si
mov	al, [bp+arg_2]
push	ax
call	far ptr	525h:76h
add	sp, 2

loc_1EE2E:				; CODE XREF: dseg:1EE12  j		 /* DOS offset ---> 164E:E */
mov	[bp+var_2], ax
mov	al, [bp+arg_0]
sub	ah, ah
or	ax, ax
jz	short loc_1EE52
dec	ax
jnz	short loc_1EE40
jmp	loc_1EEFE
;     ***************************************************************************

loc_1EE40:				; CODE XREF: game_events_locusts+21  j		 /* DOS offset ---> 1650:0 */
dec	ax
jnz	short loc_1EE46
jmp	loc_1EF60
;     ***************************************************************************

loc_1EE46:				; CODE XREF: game_events_locusts+27  j		 /* DOS offset ---> 1650:6 */
dec	ax
jnz	short loc_1EE4C
jmp	loc_1F03E
;     ***************************************************************************

loc_1EE4C:				; CODE XREF: game_events_locusts+2D  j		 /* DOS offset ---> 1650:C */
pop	si
pop	di
mov	sp, bp

loc_1EE50:				; CODE XREF: s_1EE7C+1F  p s_1EE7C+155  p		 /* DOS offset ---> 1651:0 */
pop	bp
retf
;     ***************************************************************************

loc_1EE52:				; CODE XREF: game_events_locusts+1E  j		 /* DOS offset ---> 1651:2 */
mov	ax, 15h
push	ax

loc_1EE56:		 /* DOS offset ---> 1651:6 */
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 46h	; 'F'
push	ax
mov	bx, [bp+var_2]
mov	al, [bx+17h]
sub	ah, ah
push	ax
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+var_2]

loc_1EE76:				; CODE XREF: dseg:1EE67  j		 /* DOS offset ---> 1653:6 */
mov	[bx+17h], al

loc_1EE79:				; CODE XREF: dseg:1EE75  j		 /* DOS offset ---> 1653:9 */
mov	ax, 15h

loc_1EE7C:				; CODE XREF: dseg:1E1BB  P		 /* DOS offset ---> 1653:C */
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 32h	; '2'
push	ax
mov	bx, [bp+var_2]
mov	al, [bx+16h]
sub	ah, ah
push	ax

loc_1EE92:				; CODE XREF: s_1EE7C+10  j s_1EE7C+15  j		 /* DOS offset ---> 1655:2 */
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+var_2]
mov	[bx+16h], al
mov	ax, 2
cwd
push	dx
push	ax
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	cx, 64h	; 'd'
sub	bx, bx
push	bx
push	cx
mov	bx, [bp+var_2]
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
mov	si, ax
mov	di, dx
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
push	dx
push	ax
mov	ax, 15h
push	ax
call	far ptr	49Ch:178h
add	sp, 2
sub	dx, dx
push	dx
push	ax
call	far ptr	0:38B2h
add	si, ax
adc	di, dx
mov	bx, [bp+var_2]
mov	[bx+0Ah], si
mov	[bx+0Ch], di

loc_1EEEE:				; CODE XREF: game_events_locusts+221  j		 /* DOS offset ---> 165A:E */
push	bx
call	far ptr	0DC8h:55Ch
add	sp, 2
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1EEFE:				; CODE XREF: game_events_locusts+23  j		 /* DOS offset ---> 165B:E */
mov	ax, 15h
push	ax
call	far ptr	49Ch:178h

loc_1EF07:				; CODE XREF: s_1EE7C+6B  j		 /* DOS offset ---> 165C:7 */
add	sp, 2
add	ax, 32h	; '2'
push	ax
mov	bx, [bp+var_2]
mov	al, [bx+17h]
sub	ah, ah
push	ax

loc_1EF17:		 /* DOS offset ---> 165D:7 */
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+var_2]
mov	[bx+17h], al
mov	ax, 10h
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 4Bh	; 'K'
push	ax
mov	bx, [bp+var_2]

loc_1EF38:				; CODE XREF: s_1EE7C+AA  j		 /* DOS offset ---> 165F:8 */
push	word ptr [bx+0Eh]
call	far ptr	49Ch:32h
add	sp, 4
inc	ax

loc_1EF44:				; CODE XREF: s_1EE7C+A4  j		 /* DOS offset ---> 1660:4 */
mov	bx, [bp+var_2]
mov	[bx+0Eh], ax
mov	al, 0Ah
push	ax
mov	ax, 1
push	ax
push	bx
push	cs
call	loc_1ED94

loc_1EF56:				; CODE XREF: s_1EE7C+91  j		 /* DOS offset ---> 1661:6 */
add	sp, 6
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

loc_1EF60:				; CODE XREF: game_events_locusts+29  j		 /* DOS offset ---> 1662:0 */
mov	bx, [bp+var_2]
mov	al, [bx+18h]
shr	al, 1
shr	al, 1
push	ax
sub	ax, ax
push	ax
push	bx
push	cs
call	loc_1ED94
add	sp, 6
mov	ax, 6
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, [bp+var_2]
mov	cx, ax
mov	al, [bx+18h]

loc_1EF8A:				; CODE XREF: s_1EE7C+FE  j		 /* DOS offset ---> 1664:A */
mov	bl, 5
sub	ah, ah
div	bl
sub	ah, ah
add	cx, ax
add	cx, 4Bh	; 'K'
push	cx
mov	bx, [bp+var_2]

loc_1EF9B:				; CODE XREF: s_1EE7C+F8  j		 /* DOS offset ---> 1665:B */
push	word ptr [bx+0Eh]
call	far ptr	49Ch:32h
add	sp, 4
inc	ax
mov	bx, [bp+var_2]
mov	[bx+0Eh], ax
mov	ax, 8
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, [bp+var_2]
mov	cx, ax
mov	al, [bx+18h]
mov	bl, 3
sub	ah, ah
div	bl
sub	ah, ah
add	cx, ax
add	cx, 3Ch	; '<'
push	cx
mov	bx, [bp+var_2]
mov	al, [bx+17h]
push	ax
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+var_2]
mov	[bx+17h], al
mov	ax, 6
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, [bp+var_2]
mov	cl, [bx+18h]
shr	cl, 1
sub	ch, ch

loc_1EFFA:				; CODE XREF: s_1EFDE+5C  j		 /* DOS offset ---> 166B:A */
add	ax, cx
add	ax, 2Dh	; '-'
push	ax
mov	al, [bx+16h]
sub	ah, ah
push	ax
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+var_2]
mov	[bx+16h], al
mov	ax, 10h
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 4Bh	; 'K'
push	ax
mov	bx, [bp+var_2]

loc_1F027:				; CODE XREF: s_1EFDE+53  j		 /* DOS offset ---> 166E:7 */
mov	al, [bx+18h]
sub	ah, ah
push	ax
call	far ptr	49Ch:32h

loc_1F032:				; CODE XREF: s_1EFDE+2B  j s_1EFDE+48  j		 /* DOS offset ---> 166F:2 */
add	sp, 4
mov	bx, [bp+var_2]
mov	[bx+18h], al
jmp	loc_1EEEE
;     ***************************************************************************

loc_1F03E:				; CODE XREF: game_events_locusts+2F  j		 /* DOS offset ---> 166F:E */
mov	ax, 0Ah
push	ax

loc_1F042:		 /* DOS offset ---> 1670:2 */
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 5Ah	; 'Z'
push	ax
mov	bx, [bp+var_2]
mov	al, [bx+17h]
sub	ah, ah
push	ax
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+var_2]
mov	[bx+17h], al
mov	ax, 8
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, [bp+var_2]
mov	cx, ax
mov	al, [bx+18h]
mov	bl, 3
sub	ah, ah
div	bl

loc_1F07F:				; CODE XREF: s_1F044+28  j		 /* DOS offset ---> 1673:F */
sub	ah, ah
add	cx, ax
add	cx, 3Ch	; '<'
push	cx

loc_1F087:				; CODE XREF: s_1F044+39  j		 /* DOS offset ---> 1674:7 */
mov	bx, [bp+var_2]
mov	al, [bx+16h]
push	ax
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+var_2]
mov	[bx+16h], al
mov	ax, 15h
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 3Ch	; '<'
push	ax
mov	bx, [bp+var_2]

loc_1F0AF:				; CODE XREF: s_1F044+63  j		 /* DOS offset ---> 1676:F */
mov	al, [bx+18h]
sub	ah, ah
push	ax
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+var_2]
mov	[bx+18h], al
pop	si
pop	di
mov	sp, bp
pop	bp
retf
game_events_locusts endp

;     ***************************************************************************
nop

loc_1F0CA:				; CODE XREF: s_F1A0+7F  p dseg:F313  p ...		 /* DOS offset ---> 1678:A */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  8Ah	;   *
db  46h	; F
db    6
db  50h	; P
db  9Ah	;   *
db  76h	; v
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  2Ah	; *
db 0E4h	;   *
db  8Bh	;   *
db 0C8h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    3
db 0C1h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    5
db  26h	; &
db  58h	; X
db  50h	; P
db 0B8h	;   *
db    2
db    0
db  50h	; P
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
db 0FFh
db  77h	; w
db  1Eh
db 0FFh
db  77h	; w
db  1Ch
db  9Ah	;   *
db 0E6h	;   *
db    5
db    0
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************

loc_1F10C:				; CODE XREF: dseg:F191  p		 /* DOS offset ---> 167C:C */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  8Bh	;   *
db  5Eh	; ^
db    6
db  80h	;   *
db  3Fh	; ?
db 0FFh
db  74h	; t
db  12h
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR s_1F0CA

loc_1F117:				; CODE XREF: s_1F0CA-FFA3  j		 /* DOS offset ---> 167D:7 */
mov	al, [bp+arg_2]
cmp	[bx], al
jz	short loc_1F12E
inc	[bp+arg_0]
mov	bx, [bp+arg_0]

loc_1F124:				; CODE XREF: s_1F0CA+50  j		 /* DOS offset ---> 167E:4 */
cmp	byte ptr [bx], 0FFh
jnz	short loc_1F117
mov	al, [bp+arg_2]
mov	[bx], al

loc_1F12E:				; CODE XREF: s_1F0CA-FFAE  j		 /* DOS offset ---> 167E:E */
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR s_1F0CA
;     ***************************************************************************

loc_1F132:				; CODE XREF: s_F1A0+3A  p		 /* DOS offset ---> 167F:2 */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  8Ah	;   *
db  46h	; F
db    6
db  50h	; P
db  9Ah	;   *
db  76h	; v
db    0
unk_1F13F	db  25h	; %		; CODE XREF: s_1F0CA+3D  j s_1F0CA+6B  j
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db 0C6h	;   *
db  46h	; F
db 0FCh	;   *
db    0
;     ***************************************************************************

loc_1F14B:				; CODE XREF: dseg:F19A  j		 /* DOS offset ---> 1680:B */
cmp	byte ptr [bp-4], 0
jz	short loc_1F160
mov	al, 14h
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short loc_1F19C

loc_1F160:				; CODE XREF: dseg:F14F  j		 /* DOS offset ---> 1682:0 */
cmp	byte ptr [bp-4], 2
jnb	short loc_1F19C
push	word ptr [bp-2]

loc_1F169:				; CODE XREF: s_1F0CA+85  j		 /* DOS offset ---> 1682:9 */
call	far ptr	59Dh:428h
add	sp, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bl, al
sub	bh, bh
shl	bx, 1
push	word ptr [bx-359Eh]
call	far ptr	525h:64h

loc_1F189:				; CODE XREF: dseg:1F281  p dseg:1F35F  p		 /* DOS offset ---> 1684:9 */
add	sp, 2
push	ax
push	word ptr [bp+8]
push	cs
call	loc_1F10C
add	sp, 4
inc	byte ptr [bp-4]
jmp	short loc_1F14B
;     ***************************************************************************

loc_1F19C:				; CODE XREF: dseg:F15E  j dseg:F164  j		 /* DOS offset ---> 1685:C */
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_F1A0		proc far		; CODE XREF: s_F270+C  p	s_F284+C  p		 /* DOS offset ---> 1686:0 */

var_C		= word ptr -0Ch
var_2		= word ptr -2
arg_0		= byte ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  10h
db  8Bh	;   *
db  5Eh	; ^
db    8
db  80h	;   *
db  3Fh	; ?
db 0FFh
db  75h	; u
db    3
db 0E9h	;   *
db 0BBh	;   *
db    0
db 0B0h	;   *
db 0FFh
db  50h	; P
db 0B9h	;   *
db    9
db    0
db  51h	; Q
db  8Dh	;   *
db  4Eh	; N
db 0F4h	;   *
db  51h	; Q
db  9Ah	;   *
db 0A0h	;   *
db    0
db  61h	; a
db    5
db  83h	;   *
db 0C4h	;   *
db    6
db  8Bh	;   *
db  5Eh	; ^
db    8
db  89h	;   *
db  5Eh	; ^
db 0FEh	;   *
db  80h	;   *
db  3Fh	; ?
db 0FFh
db  74h	; t
db  1Ch
;     ***************************************************************************

loc_1F1CF:				; CODE XREF: s_F1A0+49  j		 /* DOS offset ---> 1688:F */
lea	ax, [bp+var_C]
push	ax
mov	bx, [bp+var_2]
mov	al, [bx]
push	ax
push	cs
call	loc_1F132
add	sp, 4
inc	[bp+var_2]
mov	bx, [bp+var_2]
cmp	byte ptr [bx], 0FFh
jnz	short loc_1F1CF

loc_1F1EB:				; CODE XREF: dseg:1F24A  j		 /* DOS offset ---> 168A:B */
mov	ax, 2
push	ax
cmp	[bp+arg_0], 1
jnz	short loc_1F1FA
mov	ax, 4
jmp	short loc_1F1FC
;     ***************************************************************************

loc_1F1FA:				; CODE XREF: s_F1A0+53  j		 /* DOS offset ---> 168B:A */
sub	ax, ax

loc_1F1FC:				; CODE XREF: s_F1A0+58  j		 /* DOS offset ---> 168B:C */
sub	dx, dx
push	dx
push	ax
call	far ptr	4B5h:1F8h
add	sp, 6
push	cs
call	near ptr s_EA74
lea	bx, [bp+var_C]
mov	[bp+var_2], bx
cmp	byte ptr [bx], 0FFh
jz	short loc_1F241

loc_1F217:				; CODE XREF: s_F1A0+9F  j		 /* DOS offset ---> 168D:7 */
mov	al, [bp+arg_0]
push	ax
mov	cl, [bx]
push	cx
push	cs
call	loc_1F0CA
add	sp, 4
mov	bx, [bp+var_2]
mov	al, [bx]
push	ax
mov	al, [bp+arg_0]
push	ax
push	cs
call	near ptr game_events_locusts
add	sp, 4
inc	[bp+var_2]

loc_1F239:				; CODE XREF: dseg:1F213  j		 /* DOS offset ---> 168F:9 */
mov	bx, [bp+var_2]
cmp	byte ptr [bx], 0FFh
jnz	short loc_1F217

loc_1F241:				; CODE XREF: s_F1A0+75  j dseg:1F206  j		 /* DOS offset ---> 1690:1 */
call	far ptr	4B5h:290h
mov	ax, 9
push	ax

loc_1F24A:				; CODE XREF: dseg:1F1E9  j dseg:1F1F1  j ...		 /* DOS offset ---> 1690:A */
push	[bp+arg_2]
lea	ax, [bp+var_C]
push	ax
call	far ptr	561h:8

loc_1F256:				; CODE XREF: dseg:1F250  j		 /* DOS offset ---> 1691:6 */
add	sp, 6
push	[bp+arg_4]

loc_1F25C:				; CODE XREF: dseg:118B8  P		 /* DOS offset ---> 1691:C */
call	far ptr	3EFh:6C0h
add	sp, 2
mov	al, [bp+arg_0]
push	ax
push	cs

loc_1F269:				; CODE XREF: dseg:1F292  j		 /* DOS offset ---> 1692:9 */
call	near ptr s_EA9C
mov	sp, bp
pop	bp
retf
s_F1A0		endp		 /* DOS offset ---> 1686:0 */


;     *************** S U B	R O U T	I N E     ***************************************


s_F270		proc far		 /* DOS offset ---> 1693:0 */
mov	ax, 583Eh
push	ax
mov	ax, 33A0h
push	ax
mov	al, 1

loc_1F27A:				; CODE XREF: dseg:1F275  j		 /* DOS offset ---> 1693:A */
push	ax
push	cs
call	near ptr s_F1A0
add	sp, 6
retf
s_F270		endp		 /* DOS offset ---> 1693:0 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


s_F284		proc far		 /* DOS offset ---> 1694:4 */
mov	ax, 5859h
push	ax
mov	ax, 33AAh
push	ax
sub	al, al
push	ax
push	cs
call	near ptr s_F1A0

loc_1F293:				; CODE XREF: dseg:1F28C  j		 /* DOS offset ---> 1695:3 */
add	sp, 6
retf
s_F284		endp		 /* DOS offset ---> 1694:4 */

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
sub	al, al
push	ax
mov	cx, 52h	; 'R'
push	cx
mov	cx, 5992h
push	cx
call	far ptr	561h:0A0h
add	sp, 6
mov	byte ptr [bp-2], 0
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
inc	al
jz	short loc_1F2E3
mov	[bp-8],	al

loc_1F2C7:				; CODE XREF: dseg:F2E1  j		 /* DOS offset ---> 1698:7 */
mov	al, 29h	; ')'
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bl, al
sub	bh, bh
shl	bx, 1

loc_1F2D8:				; CODE XREF: dseg:1F2A2  j dseg:1F2B2  j		 /* DOS offset ---> 1699:8 */
mov	word ptr [bx+5992h], 1
dec	byte ptr [bp-8]
jnz	short loc_1F2C7

loc_1F2E3:				; CODE XREF: dseg:F2C2  j		 /* DOS offset ---> 169A:3 */
mov	ax, 4
push	ax
mov	ax, 3654h
cwd
push	dx
push	ax
call	far ptr	4B5h:1F8h
add	sp, 6
push	cs
call	near ptr s_EA74

loc_1F2F9:				; CODE XREF: dseg:1F277  j		 /* DOS offset ---> 169B:9 */
mov	byte ptr [bp-2], 0

loc_1F2FD:				; CODE XREF: dseg:F32E  j		 /* DOS offset ---> 169B:D */
mov	bl, [bp-2]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx+5992h], 1
jnz	short loc_1F327
mov	al, 3
push	ax
mov	cl, [bp-2]
push	cx
push	cs
call	loc_1F0CA
add	sp, 4
mov	al, [bp-2]
push	ax
mov	al, 3
push	ax
push	cs

loc_1F321:				; CODE XREF: s_1F482+D6  p		 /* DOS offset ---> 169E:1 */
call	near ptr game_events_locusts
add	sp, 4

loc_1F327:				; CODE XREF: dseg:F309  j		 /* DOS offset ---> 169E:7 */
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 29h ; ')'
jb	short loc_1F2FD
call	far ptr	4B5h:290h
mov	ax, 5885h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	al, 2
push	ax

loc_1F344:				; CODE XREF: dseg:1F33F  j		 /* DOS offset ---> 16A0:4 */
push	cs
call	near ptr s_EA9C

loc_1F348:				; CODE XREF: dseg:1F370  j		 /* DOS offset ---> 16A0:8 */
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
sub	al, al
push	ax
mov	cx, 52h	; 'R'

loc_1F358:				; CODE XREF: dseg:1F353  j		 /* DOS offset ---> 16A1:8 */
push	cx
mov	cx, 5992h
push	cx
call	far ptr	561h:0A0h
add	sp, 6
mov	byte ptr [bp-2], 0
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */

loc_1F371:				; CODE XREF: dseg:1F36A  j		 /* DOS offset ---> 16A3:1 */
add	sp, 2
inc	al
jz	short loc_1F39B
mov	[bp-8],	al

loc_1F37B:				; CODE XREF: dseg:F399  j		 /* DOS offset ---> 16A3:B */
mov	al, 10h
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bl, al
sub	bh, bh
mov	bl, [bx+58F8h]
shl	bx, 1
mov	word ptr [bx+5992h], 1
dec	byte ptr [bp-8]
jnz	short loc_1F37B

loc_1F39B:				; CODE XREF: dseg:F376  j		 /* DOS offset ---> 16A5:B */
mov	ax, 4
push	ax
mov	ax, 24C6h
cwd
push	dx
push	ax
call	far ptr	4B5h:1F8h
add	sp, 6
push	cs
call	near ptr s_EA74
mov	byte ptr [bp-2], 0

loc_1F3B5:				; CODE XREF: dseg:loc_1F3E6  j		 /* DOS offset ---> 16A7:5 */
mov	bl, [bp-2]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx+5992h], 1

loc_1F3C1:				; CODE XREF: dseg:1F380  j dseg:1F38F  j		 /* DOS offset ---> 16A8:1 */
jnz	short loc_1F3DF
mov	al, 2
push	ax
mov	cl, [bp-2]
push	cx
push	cs
call	loc_1F0CA
add	sp, 4
mov	al, [bp-2]
push	ax
mov	al, 2
push	ax
push	cs
call	near ptr game_events_locusts
add	sp, 4

loc_1F3DF:				; CODE XREF: dseg:loc_1F3C1  j		 /* DOS offset ---> 16A9:F */
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 29h ; ')'

loc_1F3E6:				; CODE XREF: dseg:1F341  j dseg:1F355  j		 /* DOS offset ---> 16AA:6 */
jb	short loc_1F3B5

loc_1F3E8:				; CODE XREF: s_1F482+C7  p		 /* DOS offset ---> 16AA:8 */
call	far ptr	4B5h:290h
mov	ax, 58B1h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	al, 2
; START	OF FUNCTION CHUNK FOR Q_1F3EC

loc_1F3FB:				; CODE XREF: Q_1F3EC+4D  j Q_1F3EC+5F  j ...		 /* DOS offset ---> 16AB:B */
push	ax
push	cs
call	near ptr s_EA9C
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR Q_1F3EC
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 34h
mov	al, 29h	; ')'
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	byte ptr word_133AA, al
mov	cx, 2
push	cx
sub	cx, cx
push	cx
push	cx
mov	[bp-34h], ax
call	far ptr	4B5h:1F8h
add	sp, 6
push	cs
call	near ptr s_EA74
sub	al, al
push	ax
mov	cl, [bp-34h]
push	cx
push	cs
call	loc_1F0CA
add	sp, 4
mov	al, [bp-34h]
push	ax
sub	cl, cl
push	cx
push	cs
call	near ptr game_events_locusts
add	sp, 4
call	far ptr	4B5h:290h
mov	al, [bp-34h]
sub	ah, ah
inc	ax
push	ax
mov	ax, 5908h
push	ax
call	far ptr	3EFh:6E8h

loc_1F460:				; CODE XREF: Q_1F3EC+2E  j		 /* DOS offset ---> 16B2:0 */
add	sp, 4
sub	al, al
push	ax
push	cs
call	near ptr s_EA9C
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_1F46E:				; CODE XREF: Q_1F3EC+73  j		 /* DOS offset ---> 16B2:E */
push	bp
mov	bp, sp
sub	sp, 34h
push	si
sub	al, al
mov	[bp-2Eh], al
mov	[bp-2],	al
mov	word ptr [bp-30h], 2DC4h
mov	bx, [bp-30h]
;     ***************************************************************************
db  81h	;   *
db  7Fh	; 
db  0Eh
db  20h
db  4Eh	; N
db  72h	; r
db  10h
db  8Ah	;   *
db  46h	; F
db 0D2h	;   *
db  8Bh	;   *
db  76h	; v
db 0FEh	;   *
db  81h	;   *
db 0E6h	;   *
db 0FFh
db    0
db  88h	;   *
db  42h	; B
db 0D4h	;   *
db 0FEh	;   *
db  46h	; F
db 0FEh	;   *
db  83h	;   *
db  46h	; F
db 0D0h	;   *
db  23h	; #
db 0FEh	;   *
db  46h	; F
db 0D2h	;   *
db  80h	;   *
db  7Eh	; ~
db 0D2h	;   *
db  29h	; )
db  72h	; r
db 0D9h	;   *
db  80h	;   *
db  7Eh	; ~
db 0FEh	;   *
db    0
db  74h	; t
db  15h
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  9Ah	;   *
db 0FAh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  2Ah	; *
db 0E4h	;   *
db  8Bh	;   *
db 0F0h	;   *
db  8Ah	;   *
db  42h	; B
db 0D4h	;   *
db 0EBh	;   *
db  0Bh
db 0B0h	;   *
db  29h	; )
db  50h	; P
db  9Ah	;   *
db 0FAh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  88h	;   *
db  46h	; F
db 0CEh	;   *
db 0A2h	;   *
db 0A0h	;   *
db  33h	; 3
db 0B9h	;   *
db    4
db    0
db  51h	; Q
db 0B9h	;   *
db  8Bh	;   *
db  15h
db  2Bh	; +
db 0D2h	;   *
db  52h	; R
db  51h	; Q
db  9Ah	;   *
db 0F8h	;   *
db    1
db 0B5h	;   *
db    4
db  83h	;   *
db 0C4h	;   *
db    6
db  0Eh
db 0E8h	;   *
db  88h	;   *
db 0F5h	;   *
db 0B0h	;   *
db    1
db  50h	; P
db  8Ah	;   *
db  4Eh	; N
db 0CEh	;   *
db  51h	; Q
db  0Eh
db 0E8h	;   *
unk_1F4F5	db 0D3h	;   *		; CODE XREF: s_1F482+2E  j
db 0FBh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  8Ah	;   *
db  46h	; F
db 0CEh	;   *
db  50h	; P
db 0B1h	;   *
db    1
db  51h	; Q
db  0Eh
db 0E8h	;   *
db  15h
db 0F9h	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  9Ah	;   *
db  90h	;   *
db    2
db 0B5h	;   *
db    4
db  8Ah	;   *
db  46h	; F
db 0CEh	;   *
db  2Ah	; *
db 0E4h	;   *
db  40h	; @
db  50h	; P
db 0B8h	;   *
db  3Ah	; :
db  59h	; Y
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0B0h	;   *
db    1
db  50h	; P
db  0Eh
db 0E8h	;   *
db  75h	; u
db 0F5h	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_F530		proc far		 /* DOS offset ---> 16BF:0 */

arg_0		= byte ptr  6

push	bp
mov	bp, sp
sub	sp, 2
mov	al, game_difficulty
add	al, 4
mov	cx, ax
shl	al, 1
shl	al, 1
add	al, cl
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2

loc_1F54C:				; CODE XREF: s_1F482+D9  j		 /* DOS offset ---> 16C0:C */
or	ax, ax
jz	short loc_1F5C6
cmp	[bp+arg_0], 0

loc_1F554:				; CODE XREF: s_1F482+A6  j		 /* DOS offset ---> 16C1:4 */
jz	short loc_1F5AF
cmp	[bp+arg_0], 1
jnz	short loc_1F5C6

loc_1F55C:				; CODE XREF: s_1F482+85  j s_1F482+97  j		 /* DOS offset ---> 16C1:C */
cmp	byte ptr word_133AA, 0FFh
jz	short loc_1F586
mov	al, 80
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1F582

loc_1F572:				; CODE XREF: s_F530+6A  j s_F530+7D  j		 /* DOS offset ---> 16C3:2 */
mov	al, 2
push	ax

loc_1F575:				; CODE XREF: s_1F482+C1  j s_1F482+D0  j ...		 /* DOS offset ---> 16C3:5 */
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 2
jmp	short loc_1F5BA
;     ***************************************************************************
nop

loc_1F582:				; CODE XREF: s_F530+40  j		 /* DOS offset ---> 16C4:2 */
mov	al, 1
jmp	short loc_1F5BA
;     ***************************************************************************

loc_1F586:				; CODE XREF: s_F530+31  j		 /* DOS offset ---> 16C4:6 */
cmp	byte ptr word_133A0, 0FFh
jz	short loc_1F5A0
mov	al, 50h	; 'P'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short loc_1F572
sub	al, al

loc_1F59E:				; CODE XREF: s_1F482+FB  j		 /* DOS offset ---> 16C5:E */
jmp	short loc_1F5BA
;     ***************************************************************************

loc_1F5A0:				; CODE XREF: s_F530+5B  j		 /* DOS offset ---> 16C6:0 */
mov	al, 46h	; 'F'
push	ax

loc_1F5A3:				; CODE XREF: dseg:1F84D  p		 /* DOS offset ---> 16C6:3 */
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short loc_1F572

loc_1F5AF:				; CODE XREF: s_F530:loc_1F554  j		 /* DOS offset ---> 16C6:F */
mov	al, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2

loc_1F5BA:				; CODE XREF: s_F530+4F  j s_F530+54  j ...		 /* DOS offset ---> 16C7:A */
mov	bl, al

loc_1F5BC:				; CODE XREF: dseg:1F619  j		 /* DOS offset ---> 16C7:C */
sub	bh, bh
shl	bx, 1
shl	bx, 1
call	dword ptr [bx+5982h]

loc_1F5C6:				; CODE XREF: s_F530+1E  j s_F530+2A  j		 /* DOS offset ---> 16C8:6 */
mov	sp, bp
pop	bp
retf
s_F530		endp		 /* DOS offset ---> 16BF:0 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_F5CA		proc far		 /* DOS offset ---> 16C8:A */

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_2		= word ptr -2

push	bp

loc_1F5CB:				; CODE XREF: dseg:1F5C6  j		 /* DOS offset ---> 16C8:B */
mov	bp, sp
sub	sp, 0Ah
mov	[bp+var_6], 2DC4h
mov	[bp+var_A], 29h	; ')'

loc_1F5DA:				; CODE XREF: s_F5CA+B0  j		 /* DOS offset ---> 16C9:A */
mov	bx, [bp+var_6]
mov	ax, [bx+4]
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_1F5EA
jmp	loc_1F671
;     ***************************************************************************

loc_1F5EA:				; CODE XREF: s_F5CA+1B  j s_F5CA+A4  j		 /* DOS offset ---> 16CA:A */
push	ax
call	far ptr	542h:58h
add	sp, 2
or	ax, ax
jz	short loc_1F662
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short loc_1F662
mov	bx, [bp+var_2]
test	byte ptr [bx+2], 2
jz	short loc_1F629
mov	bl, [bx+0Dh]
sub	bh, bh

loc_1F614:				; CODE XREF: dseg:1F5DA  j dseg:1F5E2  j ...		 /* DOS offset ---> 16CD:4 */
cmp	[bx+3360h], bh
jnz	short loc_1F662
mov	al, 46h	; 'F'

loc_1F61C:				; CODE XREF: dseg:1F613  j		 /* DOS offset ---> 16CD:C */
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short loc_1F662

loc_1F629:				; CODE XREF: s_F5CA+43  j		 /* DOS offset ---> 16CE:9 */
push	[bp+var_6]
call	far ptr	0CD7h:134h
add	sp, 2
mov	[bp+var_8], ax
or	ax, ax
jz	short loc_1F662
push	[bp+var_2]
push	[bp+var_6]
call	far ptr	0CD7h:222h
add	sp, 4
push	[bp+var_2]
push	[bp+var_8]

loc_1F64F:				; CODE XREF: dseg:1F62E  j		 /* DOS offset ---> 16D0:F */
call	far ptr	59Dh:58Eh
add	sp, 4
push	[bp+var_2]
call	far ptr	59Dh:700h
add	sp, 2

loc_1F662:				; CODE XREF: s_F5CA+2B  j s_F5CA+3A  j ...		 /* DOS offset ---> 16D2:2 */
mov	bx, [bp+var_2]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jz	short loc_1F671
jmp	loc_1F5EA
;     ***************************************************************************

loc_1F671:				; CODE XREF: s_F5CA+1D  j s_F5CA+A2  j		 /* DOS offset ---> 16D3:1 */
add	[bp+var_6], 23h	; '#'
dec	[bp+var_A]
jz	short loc_1F67D
jmp	loc_1F5DA
;     ***************************************************************************

loc_1F67D:				; CODE XREF: s_F5CA+AE  j		 /* DOS offset ---> 16D3:D */
mov	sp, bp
pop	bp
retf
s_F5CA		endp		 /* DOS offset ---> 16C8:A */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_F682		proc far		; CODE XREF: s_F82A+D2  p s_F950+C1  p		 /* DOS offset ---> 16D4:2 */

var_2		= word ptr -2
arg_2		= byte ptr  8

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  80h	;   *
db  7Eh	; ~
db    8
db  1Eh
db  76h	; v
db    4
db 0C6h	;   *
db  46h	; F
db    8
db  1Eh
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  47h	; G
db    2
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  63h	; c
;     ***************************************************************************

loc_1F69F:				; CODE XREF: s_F682+7E  j		 /* DOS offset ---> 16D5:F */
mov	al, 5
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2

loc_1F6AA:				; CODE XREF: dseg:1F5C8  j		 /* DOS offset ---> 16D6:A */
add	al, [bp+arg_2]
push	ax
mov	ax, [bp+var_2]

loc_1F6B1:				; CODE XREF: dseg:1F83B  p		 /* DOS offset ---> 16D7:1 */
add	ax, 0Bh
push	ax

loc_1F6B5:				; CODE XREF: dseg:1F6E4  j dseg:1F6F2  j ...		 /* DOS offset ---> 16D7:5 */
call	far ptr	49Ch:6Ch
add	sp, 4
mov	al, 5
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
sub	ah, ah
sub	ax, 100
neg	ax
mov	cl, [bp+arg_2]
sub	ch, ch
sub	ax, cx
push	ax
mov	bx, [bp+var_2]
push	word ptr [bx+12h]
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+var_2]
mov	[bx+12h], ax

loc_1F6EB:				; CODE XREF: dseg:1F6CF  j		 /* DOS offset ---> 16DA:B */
or	ax, ax
jnz	short loc_1F6F6
mov	bx, [bp+var_2]
mov	byte ptr [bx+16h], 100

loc_1F6F6:				; CODE XREF: s_F682+6B  j		 /* DOS offset ---> 16DB:6 */
mov	bx, [bp+var_2]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_1F69F
mov	sp, bp
pop	bp
retf
s_F682		endp		 /* DOS offset ---> 16D4:2 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_F706		proc far		; CODE XREF: s_F82A+38  p		 /* DOS offset ---> 16DC:6 */

arg_0		= word ptr  6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    2
db  56h	; V
db 0B8h	;   *
db  0Ah
db    0
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db    6
;     ***************************************************************************

loc_1F714:				; CODE XREF: dseg:1F704  j		 /* DOS offset ---> 16DD:4 */
push	word ptr [bx+0Eh]
call	far ptr	0:1B0h
add	sp, 2
mov	cx, 14h
push	cx
mov	bx, [bp+arg_0]
push	word ptr [bx+2]
mov	si, ax
call	far ptr	525h:158h
add	sp, 2
sub	ah, ah
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
mov	cx, ax

loc_1F748:				; CODE XREF: dseg:1F743  j		 /* DOS offset ---> 16E0:8 */
mov	ax, si
cwd
sub	ax, dx
sar	ax, 1
add	cx, ax
push	cx
mov	bx, [bp+arg_0]
mov	al, [bx+18h]
shr	al, 1
sub	ah, ah
mov	cl, [bx+16h]
sub	ch, ch
add	ax, cx
add	ax, 0Fh
push	ax
call	far ptr	49Ch:0Ah

loc_1F76C:		 /* DOS offset ---> 16E2:C */
add	sp, 6
sub	dx, dx
push	dx
push	ax
mov	bx, [bp+arg_0]
mov	si, [bx+2]
mov	al, [si+6]
sub	ah, ah
mov	cl, [bx+17h]
sub	ch, ch
add	ax, cx
add	ax, 5
cwd
push	dx
push	ax
call	far ptr	0:38B2h
pop	si
mov	sp, bp
pop	bp
retf
s_F706		endp		 /* DOS offset ---> 16DC:6 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_F796		proc far		; CODE XREF: s_F950+51  p		 /* DOS offset ---> 16E5:6 */

var_4		= word ptr -4
arg_0		= word ptr  6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  4Ah	; J
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db 0B8h	;   *
db  0Ah
db    0
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0FFh
db  77h	; w
db  0Eh
db  9Ah	;   *
db 0B0h	;   *
db    1
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db    2
db  99h	;   *
db  2Bh	; +
db 0C2h	;   *
db 0D1h	;   *
db 0F8h	;   *
db    5
db  0Fh
db    0
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Ah	;   *
unk_1F7C9	db  47h	; G		; CODE XREF: s_1F79E+1A  j
db  16h
db  2Ah	; *
db 0E4h	;   *
db    5
db  0Ah
db    0
db  50h	; P
db  9Ah	;   *
db  0Ah
db    0
db  9Ch	;   *
db    4
db  83h	;   *
db 0C4h	;   *
db    6
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db 0FFh
db  76h	; v
db 0FEh	;   *
db  9Ah	;   *
db    6
db    0
db  25h	; %
unk_1F7E3	db    5			; CODE XREF: s_1F79E+70  j
db  83h	;   *
db 0C4h	;   *
db    2
db  3Ch	; <
db    2
db  77h	; w
db  12h
db 0B8h	;   *
db  7Dh	; }
db    0
db  50h	; P
db 0FFh
db  76h	; v
db 0FCh	;   *
db  9Ah	;   *
db  32h	; 2
db    0
db  9Ch	;   *
db    4
db  83h	;   *
db 0C4h	;   *
db    4
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db 0B8h	;   *
db  0Ch
db    0
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
;     ***************************************************************************

loc_1F804:				; CODE XREF: s_1F79E+50  j s_1F79E+5B  j		 /* DOS offset ---> 16EC:4 */
mov	al, [bx+6]
shr	al, 1
shr	al, 1
sub	ah, ah
mov	bx, [bp+arg_0]

loc_1F810:				; CODE XREF: s_1F79E+43  j		 /* DOS offset ---> 16ED:0 */
mov	cl, [bx+17h]
shr	cl, 1
sub	ch, ch
add	ax, cx
add	ax, 0Ah
push	ax
push	[bp+var_4]
call	far ptr	49Ch:0Ah
mov	sp, bp
pop	bp
retf
s_F796		endp		 /* DOS offset ---> 16E5:6 */

;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR s_1F79E

loc_1F829:				; CODE XREF: s_1F79E+7D  j		 /* DOS offset ---> 16EE:9 */
nop
; END OF FUNCTION CHUNK	FOR s_1F79E

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_F82A		proc far		 /* DOS offset ---> 16EE:A */

var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 10h

loc_1F830:				; CODE XREF: s_1F79E+76  j		 /* DOS offset ---> 16EF:0 */
mov	[bp+var_E], 2DC4h
mov	[bp+var_10], 29h ; ')'

loc_1F83A:				; CODE XREF: s_F82A+11F  j		 /* DOS offset ---> 16EF:A */
push	[bp+var_E]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2

loc_1F845:				; CODE XREF: dseg:1F835  j		 /* DOS offset ---> 16F0:5 */
or	ax, ax
jz	short loc_1F84C
jmp	loc_1F940
;     ***************************************************************************

loc_1F84C:				; CODE XREF: s_F82A+1D  j		 /* DOS offset ---> 16F0:C */
push	[bp+var_E]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_1F85E
jmp	loc_1F940
;     ***************************************************************************

loc_1F85E:				; CODE XREF: s_F82A+2F  j		 /* DOS offset ---> 16F1:E */
push	[bp+var_E]
push	cs
call	near ptr s_F706	; *

loc_1F865:				; CODE XREF: dseg:1F861  j		 /* DOS offset ---> 16F2:5 */
add	sp, 2
mov	[bp+var_C], ax
mov	[bp+var_A], dx
mov	al, 0Ah
push	ax

loc_1F871:				; CODE XREF: dseg:1F86E  j		 /* DOS offset ---> 16F3:1 */
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
push	ax
mov	ax, [bp+var_E]

loc_1F87D:				; CODE XREF: dseg:1F8E7  j		 /* DOS offset ---> 16F3:D */
add	ax, 17h
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	ax, [bp+var_C]
mov	dx, [bp+var_A]
mov	bx, [bp+var_E]
add	[bx+0Ah], ax
adc	[bx+0Ch], dx
mov	ax, 100
cwd
push	dx
push	ax
push	bx
call	far ptr	525h:122h
add	sp, 2
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	[bp+var_2], ax
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	cx, [bp+var_2]
shr	cx, 1
add	ax, cx
mov	[bp+var_2], ax
mov	cx, 100
mul	cx
mov	[bp+var_8], ax
mov	[bp+var_6], dx
mov	bx, [bp+var_E]
cmp	dx, [bx+0Ch]

loc_1F8D5:				; CODE XREF: dseg:1F8A7  j		 /* DOS offset ---> 16F9:5 */
jl	short loc_1F91E
jg	short loc_1F8DE
cmp	ax, [bx+0Ah]
jbe	short loc_1F91E

loc_1F8DE:				; CODE XREF: s_F82A+AD  j dseg:1F88C  j		 /* DOS offset ---> 16F9:E */
mov	ax, 3E8h
cwd
push	dx
push	ax
mov	ax, [bp+var_8]

loc_1F8E7:		 /* DOS offset ---> 16FA:7 */
mov	dx, [bp+var_6]

loc_1F8EA:				; CODE XREF: dseg:1F8DC  j		 /* DOS offset ---> 16FA:A */
sub	ax, [bx+0Ah]
sbb	dx, [bx+0Ch]
push	dx
push	ax

loc_1F8F2:				; CODE XREF: dseg:1F863  j dseg:1F870  j ...		 /* DOS offset ---> 16FB:2 */
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
push	ax

loc_1F8F8:				; CODE XREF: dseg:1F994  p		 /* DOS offset ---> 16FB:8 */
push	[bp+var_E]
push	cs
call	near ptr s_F682
add	sp, 4
push	[bp+var_2]
call	far ptr	49Ch:178h
add	sp, 2

loc_1F90D:				; CODE XREF: dseg:1F955  j		 /* DOS offset ---> 16FC:D */
mov	cx, 50h	; 'P'
mul	cx
mov	bx, [bp+var_E]
mov	[bx+0Ah], ax
mov	[bx+0Ch], dx
jmp	short loc_1F940
;     ***************************************************************************
nop

loc_1F91E:				; CODE XREF: s_F82A:loc_1F8D5  j		 /* DOS offset ---> 16FD:E */
; s_F82A+B2  j
sub	[bx+0Ah], ax
sbb	[bx+0Ch], dx
cmp	word ptr [bx+0Ch], 2Dh ; '-'
jl	short loc_1F940
jg	short loc_1F933
cmp	word ptr [bx+0Ah], 0C6C0h
jbe	short loc_1F940

loc_1F933:				; CODE XREF: s_F82A+100  j		 /* DOS offset ---> 16FF:3 */
mov	bx, [bp+var_E]
mov	word ptr [bx+0Ah], 0C6C0h
mov	word ptr [bx+0Ch], 2Dh ; '-'

loc_1F940:				; CODE XREF: s_F82A+1F  j s_F82A+31  j ...		 /* DOS offset ---> 1700:0 */
add	[bp+var_E], 23h	; '#'
dec	[bp+var_10]
jz	short loc_1F94C
jmp	loc_1F83A
;     ***************************************************************************

loc_1F94C:				; CODE XREF: s_F82A+11D  j		 /* DOS offset ---> 1700:C */
mov	sp, bp
pop	bp
retf
s_F82A		endp		 /* DOS offset ---> 16EE:A */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_F950		proc far		 /* DOS offset ---> 1701:0 */

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 0Ah
push	si

loc_1F957:				; CODE XREF: dseg:1F90C  j		 /* DOS offset ---> 1701:7 */
test	options_value, 40h
jz	short loc_1F961
jmp	loc_1FA48
;     ***************************************************************************

loc_1F961:				; CODE XREF: s_F950+C  j		 /* DOS offset ---> 1702:1 */
mov	[bp+var_8], 2DC4h

loc_1F966:				; CODE XREF: dseg:1F95C  j		 /* DOS offset ---> 1702:6 */
mov	[bp+var_A], 29h	; ')'

loc_1F96B:				; CODE XREF: s_F950:loc_1FA45  j		 /* DOS offset ---> 1702:B */
; dseg:1FB1C  p
push	[bp+var_8]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short loc_1F97D
jmp	loc_1FA3C
;     ***************************************************************************

loc_1F97D:				; CODE XREF: s_F950+28  j		 /* DOS offset ---> 1703:D */
push	[bp+var_8]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_1F98F

loc_1F98C:				; CODE XREF: dseg:1F986  j		 /* DOS offset ---> 1704:C */
jmp	loc_1FA3C
;     ***************************************************************************

loc_1F98F:				; CODE XREF: s_F950+3A  j		 /* DOS offset ---> 1704:F */
mov	ax, 100
push	ax

loc_1F993:				; CODE XREF: dseg:1F977  j		 /* DOS offset ---> 1705:3 */
call	far ptr	49Ch:178h
add	sp, 2
push	[bp+var_8]
mov	si, ax
push	cs
call	near ptr s_F796
add	sp, 2
add	si, ax
mov	[bp+var_2], si
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
push	ax
mov	ax, [bp+var_8]
add	ax, 17h
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	ax, [bp+var_2]
mov	bx, [bp+var_8]
add	[bx+8],	ax
mov	ax, 100
cwd
push	dx
push	ax

loc_1F9D6:				; CODE XREF: dseg:1FA44  j		 /* DOS offset ---> 1709:6 */
push	bx
call	far ptr	525h:122h
add	sp, 2
push	dx
push	ax

loc_1F9E1:				; CODE XREF: dseg:1F9DF  j		 /* DOS offset ---> 170A:1 */
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	[bp+var_6], ax
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	cx, [bp+var_6]
shr	cx, 1
add	ax, cx
mov	[bp+var_6], ax
mov	bx, [bp+var_8]
cmp	[bx+8],	ax
jnb	short loc_1FA2A
sub	ax, [bx+8]
mov	cx, 14h
sub	dx, dx
div	cx
push	ax
push	bx
push	cs
call	near ptr s_F682
add	sp, 4
push	[bp+var_6]
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, [bp+var_8]
mov	[bx+8],	ax
jmp	short loc_1FA3C
;     ***************************************************************************

loc_1FA2A:				; CODE XREF: s_F950+B2  j		 /* DOS offset ---> 170E:A */
sub	[bx+8],	ax
cmp	word ptr [bx+8], 7530h
jbe	short loc_1FA3C
mov	bx, [bp+var_8]

loc_1FA37:				; CODE XREF: dseg:1FA23  j		 /* DOS offset ---> 170F:7 */
mov	word ptr [bx+8], 7530h

loc_1FA3C:				; CODE XREF: s_F950+2A  j		 /* DOS offset ---> 170F:C */
; s_F950:loc_1F98C  j ...
add	[bp+var_8], 23h	; '#'
dec	[bp+var_A]
jz	short loc_1FA48

loc_1FA45:				; CODE XREF: dseg:1F9D4  j dseg:1F9D8  j		 /* DOS offset ---> 1710:5 */
jmp	loc_1F96B
;     ***************************************************************************

loc_1FA48:				; CODE XREF: s_F950+E  j	s_F950+F3  j		 /* DOS offset ---> 1710:8 */
pop	si
mov	sp, bp
pop	bp
retf
s_F950		endp		 /* DOS offset ---> 1701:0 */

;     ***************************************************************************
nop

loc_1FA4E:				; CODE XREF: dseg:FA66  p s_1FC0E-FF6B  p		 /* DOS offset ---> 1710:E */
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  8Ah	;   *
db  5Eh	; ^
db    6
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0FFh
db  9Fh	;   *
db 0ECh	;   *
db  59h	; Y
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
mov	al, 13h
push	ax
push	cs
call	loc_1FA4E
add	sp, 2
retf
;     ***************************************************************************
nop

loc_1FA6E:				; CODE XREF: dseg:FB47  p		 /* DOS offset ---> 1712:E */
mov	ax, current_province
;     ***************************************************************************
db 0A3h	;   *
db  34h	; 4
db  35h	; 5
db  9Ah	;   *
db  9Ch	;   *
db  0Ah
db  43h	; C
db  21h	; !
db 0C7h	;   *
db    6
db  34h	; 4
db  35h	; 5
db    0
db    0
db 0CBh	;   *

;     *************** S U B	R O U T	I N E     ***************************************


s_FA80		proc far		; CODE XREF: dseg:FB08  p s_1FC80-FF1D  p		 /* DOS offset ---> 1714:0 */
call	far ptr	4B5h:290h
retf
s_FA80		endp		 /* DOS offset ---> 1714:0 */

;     ***************************************************************************

loc_1FA86:				; CODE XREF: dseg:FE97  p		 /* DOS offset ---> 1714:6 */
mov	word_13576, 0
mov	current_ruler, 2B34h

loc_1FA92:				; CODE XREF: dseg:1FA91  j		 /* DOS offset ---> 1715:2 */
test	options_value, 80h
jz	short loc_1FAAA
mov	al, 29h	; ')'
mul	byte_13393
add	current_ruler, ax
and	options_value, 5Fh
jmp	short loc_1FAAF
;     ***************************************************************************

loc_1FAAA:				; CODE XREF: dseg:FA97  j		 /* DOS offset ---> 1716:A */
mov	byte_13393, 0

loc_1FAAF:				; CODE XREF: dseg:FAA8  j		 /* DOS offset ---> 1716:F */
cmp	byte_13393, 10h
jb	short loc_1FAB9
jmp	locret_1FB64
;     ***************************************************************************

loc_1FAB9:				; CODE XREF: dseg:FAB4  j dseg:FB61  j		 /* DOS offset ---> 1717:9 */
mov	bx, current_ruler
cmp	word ptr [bx], 0
jnz	short loc_1FAC5
jmp	loc_1FB51
;     ***************************************************************************

loc_1FAC5:				; CODE XREF: dseg:FAC0  j		 /* DOS offset ---> 1718:5 */
cmp	word ptr [bx+2], 0
jz	short loc_1FACE
jmp	loc_1FB51
;     ***************************************************************************

loc_1FACE:				; CODE XREF: dseg:FAC9  j dseg:1FAB2  j		 /* DOS offset ---> 1718:E */
cmp	byte ptr [bx+22h], 0FFh
jz	short loc_1FB51
test	byte ptr [bx+7], 4
jz	short loc_1FAE2
and	byte ptr [bx+7], 0FBh
jmp	short loc_1FB51
;     ***************************************************************************
nop
nop

loc_1FAE2:				; CODE XREF: dseg:FAD8  j		 /* DOS offset ---> 171A:2 */
mov	al, [bx+22h]
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	current_province, ax
push	ax
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_1FB51
mov	bx, current_ruler
mov	ax, [bx]
mov	word_13396, ax
push	cs
call	near ptr s_FA80	; *
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 5A40h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, 1
push	ax

loc_1FB22:				; CODE XREF: dseg:1FA93  j dseg:1FACC  j ...		 /* DOS offset ---> 171E:2 */
call	far ptr	57Ch:96h
add	sp, 2
push	current_ruler
call	far ptr	542h:0BAh

loc_1FB33:				; CODE XREF: game_ai_training+3B  j		 /* DOS offset ---> 171F:3 */
add	sp, 2
or	ax, ax
jz	short loc_1FB4C
push	current_province
call	far ptr	57Ch:1CAh
add	sp, 2
push	cs
call	loc_1FA6E
jmp	short loc_1FB51
;     ***************************************************************************

loc_1FB4C:				; CODE XREF: dseg:FB38  j		 /* DOS offset ---> 1720:C */
call	loc_1C08B+1

loc_1FB51:				; CODE XREF: dseg:FAC2  j dseg:FACB  j ...		 /* DOS offset ---> 1721:1 */
add	current_ruler, 29h ; ')'
inc	byte_13393
cmp	byte_13393, 10h
jnb	short locret_1FB64
jmp	loc_1FAB9
;     ***************************************************************************

locret_1FB64:				; CODE XREF: dseg:FAB6  j dseg:FB5F  j
retf
;     ***************************************************************************
nop

loc_1FB66:				; CODE XREF: s_1FC0E:loc_1FCAD  p		 /* DOS offset ---> 1722:6 */
mov	ax, 5A6Bh
;     ***************************************************************************
db  50h	; P
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR game_ai_training

loc_1FB6A:				; CODE XREF: game_ai_training+30  j		 /* DOS offset ---> 1722:A */
call	far ptr	3EFh:6C0h
add	sp, 2

loc_1FB72:				; CODE XREF: game_ai_training+3D  j		 /* DOS offset ---> 1723:2 */
call	far ptr	3EFh:9D6h
retf
; END OF FUNCTION CHUNK	FOR game_ai_training
;     ***************************************************************************

loc_1FB78:				; CODE XREF: s_1FC0E-FF4D  p dseg:1FBF0  p		 /* DOS offset ---> 1723:8 */
cmp	word_1356E, 0
;     ***************************************************************************
db  74h	; t
db    7
db  9Ah	;   *
db  32h	; 2
db    2
db 0F9h	;   *
db  12h
db 0CBh	;   *
;     ***************************************************************************
nop
push	current_province
call	loc_1377C
add	sp, 2

locret_1FB92:				; CODE XREF: dseg:1FBA7  j
retf
;     ***************************************************************************
nop
sub	ax, ax
;     ***************************************************************************
db 0A3h	;   *
db 0E4h	;   *
db  59h	; Y
db 0A3h	;   *
db 0E6h	;   *
db  59h	; Y
db 0A3h	;   *
db 0E8h	;   *
db  59h	; Y
db 0A3h	;   *
db 0EAh	;   *
db  59h	; Y
db 0A3h	;   *
db 0ECh	;   *
db  59h	; Y
db 0A3h	;   *
db 0EEh	;   *
db  59h	; Y
db 0CBh	;   *
;     ***************************************************************************
nop

loc_1FBAA:				; CODE XREF: s_1FC80-FE7F  p		 /* DOS offset ---> 1726:A */
push	bp
;     ***************************************************************************
db  8Bh	;   *
unk_1FBAC	db 0ECh	;   *		; CODE XREF: dseg:1FBA1  j
db  83h	;   *
db 0ECh	;   *
db    4
db 0FFh
db  36h	; 6
unk_1FBB2	db  9Ah	;   *		; CODE XREF: dseg:1FB90  j dseg:1FBA9  j
db  33h	; 3
db  9Ah	;   *
db 0CAh	;   *
db    1
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db 0B8h	;   *
db    1
db    0
db  50h	; P
db 0FFh
db  36h	; 6
db  9Ah	;   *
db  33h	; 3
db  9Ah	;   *
db  36h	; 6
db  0Ah
db 0F9h	;   *
db  12h
db  83h	;   *
db 0C4h	;   *
db    4
db  0Eh
db 0E8h	;   *
db 0C4h	;   *
db 0FFh
db 0A0h	;   *
db  9Ch	;   *
db  33h	; 3
db  24h	; $
db  80h	;   *
db  3Ch	; <
db    1
db  1Bh
db 0C0h	;   *
db    5
db  14h
db    0
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db 0FFh
db  36h	; 6
db  9Ah	;   *
db  33h	; 3
db  9Ah	;   *
db  48h	; H
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db  2Fh	; /
db    1
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR s_1FC0E

loc_1FBF2:				; CODE XREF: s_1FC0E-FEF0  j		 /* DOS offset ---> 172B:2 */
push	current_province
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short loc_1FC05
jmp	loc_1FD21
;     ***************************************************************************

loc_1FC05:				; CODE XREF: s_1FC0E-1000E  j		 /* DOS offset ---> 172C:5 */
; dseg:1FBCB  j ...
call	far ptr	loc_10524
or	ax, ax
jz	short loc_1FC11
jmp	loc_1FD21
;     ***************************************************************************

loc_1FC11:				; CODE XREF: s_1FC0E-10002  j		 /* DOS offset ---> 172D:1 */
push	current_province
call	far ptr	525h:4Ah
add	sp, 2
cmp	ax, current_ruler
jz	short loc_1FC26
jmp	loc_1FD21
;     ***************************************************************************

loc_1FC26:				; CODE XREF: s_1FC0E-FFED  j		 /* DOS offset ---> 172E:6 */
mov	ax, 1Ch
push	ax
mov	cx, 30h	; '0'
push	cx
call	far ptr	3EFh:434h

loc_1FC33:				; CODE XREF: s_1FC0E+1B  j		 /* DOS offset ---> 172F:3 */
add	sp, 4

loc_1FC36:				; CODE XREF: s_1FC0E+60  j		 /* DOS offset ---> 172F:6 */
mov	bx, current_ruler
mov	al, [bx+6]
sub	ah, ah
push	ax
mov	ax, 5A89h
push	ax

loc_1FC44:		 /* DOS offset ---> 1730:4 */
call	far ptr	3EFh:6E8h
add	sp, 4
call	far ptr	4B5h:290h
mov	ax, 90h	; '  *'
push	ax
call	far ptr	4B5h:33Eh
add	sp, 2
push	[bp+var_4]
sub	ax, ax
push	ax

loc_1FC63:				; CODE XREF: s_1FC0E+32  j		 /* DOS offset ---> 1732:3 */
push	current_province
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax

loc_1FC72:				; CODE XREF: s_1FC0E+3F  j s_1FC0E+54  j		 /* DOS offset ---> 1733:2 */
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax

loc_1FC7A:				; CODE XREF: s_1FC0E+29  j s_1FC0E+62  j		 /* DOS offset ---> 1733:A */
mov	ax, 5AA0h
push	ax

loc_1FC7E:		 /* DOS offset ---> 1733:E */
call	far ptr	3EFh:6E8h
add	sp, 0Ah
push	[bp+var_4]
sub	ax, ax
push	ax
call	far ptr	3EFh:998h
add	sp, 4
mov	[bp+var_2], ax
or	ax, ax

loc_1FC99:				; CODE XREF: s_1FC80+CC  j		 /* DOS offset ---> 1735:9 */
jz	short loc_1FCAC
inc	ax
jz	short loc_1FCC0

loc_1FC9E:				; CODE XREF: s_1FC80+17  j		 /* DOS offset ---> 1735:E */
mov	al, byte ptr [bp+var_2]
push	ax
push	cs
call	loc_1FA4E

loc_1FCA6:				; CODE XREF: s_1FC0E:loc_1FCBD  j		 /* DOS offset ---> 1736:6 */
add	sp, 2
jmp	short loc_1FCC4
; END OF FUNCTION CHUNK	FOR s_1FC0E
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR s_1FC0E

loc_1FCAC:				; CODE XREF: s_1FC0E:loc_1FC99  j		 /* DOS offset ---> 1736:C */
push	cs

loc_1FCAD:				; CODE XREF: s_1FC80+29  j		 /* DOS offset ---> 1736:D */
call	loc_1FB66
or	ax, ax
jz	short loc_1FCC4
push	current_province
call	loc_103AF+1

loc_1FCBD:				; CODE XREF: s_1FC80+C9  j		 /* DOS offset ---> 1737:D */
jmp	short loc_1FCA6
; END OF FUNCTION CHUNK	FOR s_1FC0E
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR s_1FC0E

loc_1FCC0:				; CODE XREF: s_1FC0E-FF72  j		 /* DOS offset ---> 1738:0 */
push	cs
call	loc_1FB78

loc_1FCC4:				; CODE XREF: s_1FC0E-FF65  j		 /* DOS offset ---> 1738:4 */
; s_1FC0E-FF5C  j
test	byte_1339C, 1
jz	short loc_1FD0E
call	far ptr	57Ch:1E4h
call	far ptr	loc_12803+1
call	far ptr	6A3h:52h
push	current_province
call	far ptr	542h:148h
add	sp, 2
or	ax, ax
jnz	short loc_1FCFA
mov	ax, 1
push	ax
push	current_province
call	far ptr	loc_139C6
add	sp, 4

loc_1FCFA:				; CODE XREF: s_1FC0E-FF26  j		 /* DOS offset ---> 173B:A */
and	byte_1339C, 0FEh
mov	ax, current_province
mov	word_13534, ax
push	ax
call	far ptr	57Ch:1CAh
add	sp, 2

loc_1FD0E:				; CODE XREF: s_1FC0E-FF45  j		 /* DOS offset ---> 173C:E */
push	current_province

loc_1FD12:				; CODE XREF: s_1FC80+36  j		 /* DOS offset ---> 173D:2 */
call	far ptr	542h:148h
add	sp, 2
or	ax, ax
jnz	short loc_1FD21
jmp	loc_1FBF2
;     ***************************************************************************

loc_1FD21:				; CODE XREF: s_1FC0E-1000C  j		 /* DOS offset ---> 173E:1 */
; s_1FC0E-10000  j ...
mov	sp, bp
pop	bp
retf
; END OF FUNCTION CHUNK	FOR s_1FC0E
;     ***************************************************************************
nop

loc_1FD26:				; CODE XREF: dseg:FE89  p		 /* DOS offset ---> 173E:6 */
push	bp
mov	bp, sp
sub	sp, 2
mov	word ptr [bp-2], 3370h
mov	word_13576, 0
test	options_value, 20h
jz	short loc_1FD50
mov	al, byte ptr loc_13390+2
sub	ah, ah
shl	ax, 1
add	[bp-2],	ax

loc_1FD48:				; CODE XREF: s_1FC80+C7  j		 /* DOS offset ---> 1740:8 */
and	options_value, 0DFh
jmp	loc_1FE68
;     ***************************************************************************
; START	OF FUNCTION CHUNK FOR s_1FC80

loc_1FD50:				; CODE XREF: dseg:FD3C  j s_1FC80+86  j		 /* DOS offset ---> 1741:0 */
mov	byte ptr loc_13390+2, 0
jmp	loc_1FE68
;     ***************************************************************************

loc_1FD58:				; CODE XREF: s_1FC80-FE0C  j		 /* DOS offset ---> 1741:8 */
mov	bx, ax

loc_1FD5A:				; CODE XREF: s_1FC80+2B  j s_1FC80+8F  j		 /* DOS offset ---> 1741:A */
cmp	word ptr [bx], 0
jnz	short loc_1FD62
jmp	loc_1FE60
;     ***************************************************************************

loc_1FD62:				; CODE XREF: s_1FC80-FF23  j		 /* DOS offset ---> 1742:2 */
push	cs
call	near ptr s_FA80
call	far ptr	loc_10524
or	ax, ax
jz	short loc_1FD77
mov	bx, current_ruler
and	byte ptr [bx+7], 0FEh

loc_1FD77:				; CODE XREF: s_1FC80-FF13  j dseg:1FD72  j		 /* DOS offset ---> 1743:7 */
mov	bx, current_ruler
mov	ax, [bx]
mov	word_13396, ax
add	ax, 1Ch
push	ax
mov	ax, 5ACAh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	bx, current_ruler
mov	ax, [bx+2]
mov	current_province, ax
or	ax, ax
jnz	short loc_1FDA1
jmp	loc_1FE60
;     ***************************************************************************

loc_1FDA1:				; CODE XREF: s_1FC80-FEE4  j		 /* DOS offset ---> 1746:1 */
; s_1FC80-FE3F  j
push	ax
call	far ptr	525h:4Ah
add	sp, 2
cmp	ax, current_ruler
jz	short loc_1FDB3
jmp	loc_1FE60
;     ***************************************************************************

loc_1FDB3:				; CODE XREF: s_1FC80-FED2  j		 /* DOS offset ---> 1747:3 */
mov	bx, ax
mov	ax, [bx]
mov	word_13396, ax
push	current_province
call	far ptr	542h:148h
add	sp, 2
or	ax, ax
jnz	short loc_1FE34
push	current_province
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_1FE34
mov	ax, current_province

loc_1FDDD:				; CODE XREF: dseg:1FDCF  j		 /* DOS offset ---> 1749:D */
mov	word_13534, ax
push	current_ruler

loc_1FDE4:				; CODE XREF: dseg:1FDDB  j		 /* DOS offset ---> 174A:4 */
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_1FE06
push	current_province

loc_1FDF4:				; CODE XREF: dseg:1FD9E  j		 /* DOS offset ---> 174B:4 */
call	far ptr	542h:0A8h
add	sp, 2
or	ax, ax

loc_1FDFE:				; CODE XREF: dseg:1FD74  j		 /* DOS offset ---> 174B:E */
jnz	short loc_1FE06
push	cs
call	loc_1FBAA
jmp	short loc_1FE0B
;     ***************************************************************************

loc_1FE06:				; CODE XREF: s_1FC80-FE92  j		 /* DOS offset ---> 174C:6 */
; s_1FC80:loc_1FDFE  j
call	far ptr	loc_1C2E9+3

loc_1FE0B:				; CODE XREF: s_1FC80-FE7C  j		 /* DOS offset ---> 174C:B */
mov	word_13534, 0
call	far ptr	loc_10524
or	ax, ax
jnz	short loc_1FE58
push	current_province
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_1FE46
mov	bx, current_ruler
test	byte ptr [bx+7], 10h
jnz	short loc_1FE46

loc_1FE34:				; CODE XREF: s_1FC80-FEB8  j		 /* DOS offset ---> 174F:4 */
; s_1FC80-FEA8  j
mov	bx, current_province
mov	ax, [bx]

loc_1FE3A:				; CODE XREF: s_1FC80-FE2B  j		 /* DOS offset ---> 174F:A */
mov	current_province, ax
or	ax, ax
jz	short loc_1FE44
jmp	loc_1FDA1
;     ***************************************************************************

loc_1FE44:				; CODE XREF: s_1FC80-FE41  j		 /* DOS offset ---> 1750:4 */
jmp	short loc_1FE60
;     ***************************************************************************

loc_1FE46:				; CODE XREF: s_1FC80-FE58  j		 /* DOS offset ---> 1750:6 */
; s_1FC80-FE4E  j
mov	bx, current_ruler
and	byte ptr [bx+7], 0EFh
mov	bx, current_ruler
mov	ax, [bx+2]
jmp	short loc_1FE3A
; END OF FUNCTION CHUNK	FOR s_1FC80
;     ***************************************************************************
nop
; START	OF FUNCTION CHUNK FOR s_1FC80

loc_1FE58:				; CODE XREF: s_1FC80-FE68  j dseg:1FE43  j		 /* DOS offset ---> 1751:8 */
mov	bx, current_ruler
and	byte ptr [bx+7], 0FEh

loc_1FE60:				; CODE XREF: s_1FC80-FF21  j		 /* DOS offset ---> 1752:0 */
; s_1FC80-FEE2  j ...
add	word ptr [bp-2], 2
inc	byte ptr loc_13390+2

loc_1FE68:				; CODE XREF: dseg:FD4D  j s_1FC80-FF2B  j		 /* DOS offset ---> 1752:8 */
mov	bx, [bp-2]
mov	ax, [bx]
mov	current_ruler, ax
or	ax, ax
jz	short loc_1FE77
jmp	loc_1FD58
;     ***************************************************************************

loc_1FE77:				; CODE XREF: s_1FC80-FE0E  j		 /* DOS offset ---> 1753:7 */
mov	sp, bp
pop	bp

locret_1FE7A:				; CODE XREF: dseg:1FE75  j
retf
; END OF FUNCTION CHUNK	FOR s_1FC80
;     ***************************************************************************
nop
call	far ptr	4B5h:398h
test	options_value, 80h
jnz	short loc_1FE8E
push	cs
call	loc_1FD26
jmp	short loc_1FE96
;     ***************************************************************************

loc_1FE8E:				; CODE XREF: dseg:FE86  j		 /* DOS offset ---> 1754:E */
mov	al, 0FFh
mov	byte_13399, al
mov	byte_13398, al

loc_1FE96:				; CODE XREF: dseg:FE8C  j		 /* DOS offset ---> 1755:6 */
push	cs
call	loc_1FA86
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_ruler_hos_tru_table_query_sub proc	far ; CODE XREF: game_ruler_hos_tru_table_query+42  p

var_E		= word ptr -0Eh
var_C		= byte ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= byte ptr  6
arg_2		= byte ptr  8
arg_4		= word ptr  0Ah

push	bp
mov	bp, sp
sub	sp, 0Eh
push	si
call	far ptr	4B5h:266h
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	byte ptr [bp+var_E], al
mov	al, [bp+arg_0]
dec	al
mov	[bp+var_2], al
sub	ah, ah
shl	ax, 1
add	ax, 0CAF8h
mov	[bp+var_4], ax
mov	[bp+var_8], 178h

loc_1FECE:				; CODE XREF: game_ruler_hos_tru_table_query_sub+1FD  j		 /* DOS offset ---> 1758:E */
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_6], ax
test	[bp+var_2], 7
jnz	short loc_1FEF4
test	byte ptr word_1CEA2, 1
jz	short loc_1FEE8
mov	ax, 5AE4h
jmp	short loc_1FEEB
;     ***************************************************************************

loc_1FEE8:				; CODE XREF: game_ruler_hos_tru_table_query_sub+45  j		 /* DOS offset ---> 175A:8 */
mov	ax, 5B07h

loc_1FEEB:				; CODE XREF: game_ruler_hos_tru_table_query_sub+4A  j		 /* DOS offset ---> 175A:B */
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2

loc_1FEF4:				; CODE XREF: game_ruler_hos_tru_table_query_sub+3E  j		 /* DOS offset ---> 175B:4 */
mov	al, [bp+var_2]
and	ax, 7
mov	cx, ax
add	ax, 8
mov	dx, ax
shl	ax, 1
shl	ax, 1

loc_1FF05:				; CODE XREF: dseg:1FE77  j dseg:1FE94  j ...		 /* DOS offset ---> 175C:5 */
shl	ax, 1
add	ax, dx
mov	[bp+var_A], ax
mov	ax, 7
push	ax
add	cx, 8
mov	dx, cx
shl	cx, 1
shl	cx, 1
shl	cx, 1
add	cx, dx
add	ax, cx
push	ax

loc_1FF20:				; CODE XREF: dseg:1FF1B  j		 /* DOS offset ---> 175E:0 */
mov	ax, 188h
push	ax
push	cx
mov	ax, 178h
push	ax
call	far ptr	57Ch:0
add	sp, 0Ah
test	byte ptr word_1CEA2, 1
jz	short loc_1FF5E
sub	ax, ax
push	ax
push	[bp+var_6]
call	far ptr	525h:6
add	sp, 2
mov	bl, al
sub	bh, bh

loc_1FF4A:				; CODE XREF: dseg:1FF47  j		 /* DOS offset ---> 1760:A */
mov	al, [bx+48h]
sub	ah, ah
mov	cx, ax
shl	ax, 1

loc_1FF54:				; CODE XREF: dseg:1FF4C  j dseg:1FF50  j		 /* DOS offset ---> 1761:4 */
add	ax, cx
shl	ax, 1
add	ax, 3B30h
jmp	short loc_1FF81
;     ***************************************************************************
nop

loc_1FF5E:				; CODE XREF: game_ruler_hos_tru_table_query_sub+9A  j		 /* DOS offset ---> 1761:E */
sub	ax, ax
push	ax
push	[bp+var_6]
call	far ptr	525h:6
add	sp, 2
mov	bl, al
sub	bh, bh
mov	al, [bx+48h]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 3AD0h

loc_1FF81:				; CODE XREF: game_ruler_hos_tru_table_query_sub+BF  j		 /* DOS offset ---> 1764:1 */
push	ax
mov	ax, 2
push	ax
mov	ax, 7
push	ax
mov	ax, [bp+var_A]

loc_1FF8D:				; CODE XREF: dseg:1FF89  j		 /* DOS offset ---> 1764:D */
add	ax, 4
shl	ax, 1
push	ax

loc_1FF93:				; CODE XREF: dseg:1FF87  j dseg:1FF8D  j		 /* DOS offset ---> 1765:3 */
mov	ax, [bp+var_8]
add	ax, 8
push	ax

loc_1FF9A:		 /* DOS offset ---> 1765:A */
call	far ptr	0:5E6h
add	sp, 0Ch

loc_1FFA2:				; CODE XREF: dseg:1FF9B  j		 /* DOS offset ---> 1766:2 */
push	[bp+var_6]
call	far ptr	542h:0DAh
add	sp, 2
or	ax, ax
jnz	short loc_1FFB6
mov	al, 2
jmp	short loc_1FFEE
;     ***************************************************************************
nop

loc_1FFB6:				; CODE XREF: game_ruler_hos_tru_table_query_sub+113  j		 /* DOS offset ---> 1767:6 */
cmp	[bp+arg_4], 0
jz	short loc_1FFD6
push	[bp+var_6]
push	current_ruler
push	cs
call	s_104F4		; *
add	sp, 4
cmp	ax, 1
sbb	al, al
and	al, 2
add	al, 5
jmp	short loc_1FFEE
;     ***************************************************************************
nop

loc_1FFD6:				; CODE XREF: game_ruler_hos_tru_table_query_sub+11E  j		 /* DOS offset ---> 1769:6 */
push	[bp+var_6]
push	current_ruler
call	far ptr	542h:114h
add	sp, 4
cmp	ax, 1
sbb	al, al

loc_1FFEA:				; CODE XREF: dseg:1FF1D  j dseg:1FF49  j ...		 /* DOS offset ---> 176A:A */
and	al, 3
add	al, 4

loc_1FFEE:				; CODE XREF: game_ruler_hos_tru_table_query_sub+117  j		 /* DOS offset ---> 176A:E */
; game_ruler_hos_tru_table_query_sub+137  j
mov	[bp+var_C], al

loc_1FFF1:		 /* DOS offset ---> 176B:1 */
test	byte ptr word_1CEA2, 1

loc_1FFF6:		 /* DOS offset ---> 176B:6 */
jz	short near ptr loc_1001C+2
push	[bp+var_A]

loc_1FFFB:		 /* DOS offset ---> 176B:B */
mov	cl, 3

loc_1FFFD:		 /* DOS offset ---> 176B:D */
mov	ax, [bp+var_8]
sar	ax, cl
sub	ax, 3
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	al, [bp+var_C]
sub	ah, ah
push	ax
mov	al, [bp+var_2]
inc	ax
push	ax
mov	ax, 5B28h
jmp	short loc_1003F
;     ***************************************************************************
push	[bp+var_A]
mov	cl, 3
mov	ax, [bp+var_8]
sar	ax, cl
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	al, [bp+var_C]
sub	ah, ah
push	ax
mov	al, [bp+var_2]
inc	ax
push	ax
mov	ax, 5B38h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
push	[bp+var_A]
mov	cl, 3
mov	ax, [bp+var_8]
sar	ax, cl
add	ax, 4
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	bx, [bp+var_6]
mov	al, [bx+6]
sub	ah, ah
push	ax
mov	si, [bp+var_E]
and	si, 0FFh
mov	al, [bx+si+0Eh]
push	ax
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 5B4Bh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
inc	[bp+var_2]
mov	al, [bp+arg_2]
cmp	[bp+var_2], al
jnb	short near ptr KB_Key_Comp_3+1
test	[bp+var_2], 7
jz	short near ptr KB_Key_Comp_3+1
add	[bp+var_4], 2
jmp	loc_1FECE
;     ***************************************************************************
mov	al, [bp+var_2]
pop	si
mov	sp, bp
pop	bp
retf
game_ruler_hos_tru_table_query_sub endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_ruler_hos_tru_table_query proc far	; DATA XREF: game_diplomacy_threaten+22  t
; game_diplomacy_cancel_alliance+10  t ...

var_C		= byte ptr -0Ch
var_A		= byte ptr -0Ah
var_8		= byte ptr -8
var_6		= word ptr -6
var_4		= byte ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= byte ptr  8
arg_4		= word ptr  0Ah

; FUNCTION CHUNK AT 0106 SIZE 00000003 BYTES
; FUNCTION CHUNK AT 0190 SIZE 00000009 BYTES

push	bp
mov	bp, sp
sub	sp, 0Eh
sub	ax, ax
push	ax
call	far ptr	59Dh:320h
add	sp, 2
mov	[bp+var_4], al
or	al, al
jnz	short wait_entry_001
mov	ax, 5B5Ch
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
jmp	loc_10190
;     ***************************************************************************
nop
cmp	[bp+var_4], 8
jbe	short wait_entry_002
sub	al, al
jmp	short wait_entry_003
;     ***************************************************************************
mov	al, 1
mov	[bp+var_8], al
push	[bp+arg_4]
mov	al, [bp+var_4]
push	ax
mov	al, 1
push	ax
push	cs
call	near ptr game_ruler_hos_tru_table_query_sub
add	sp, 6
mov	[bp+var_C], al
call	far ptr	4B5h:290h
cmp	[bp+var_8], 0
jnz	short loc_10106
mov	ax, 5B74h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 2
mov	al, [bp+var_4]
sub	ah, ah
push	ax
mov	al, [bp+var_8]
push	ax
push	[bp+arg_0]
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
or	ax, ax
jz	short near ptr loc_1016A+4
inc	ax
jz	short loc_10190
mov	bx, [bp+var_2]
shl	bx, 1
mov	ax, [bx-350Ah]
mov	[bp+var_6], ax
push	ax
call	far ptr	542h:0DAh
add	sp, 2
or	ax, ax
jz	short near ptr loc_100EE+1
push	[bp+var_6]
push	current_ruler
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jz	short near ptr loc_10157+1
mov	al, [bp+arg_2]
and	al, 1
jmp	short near ptr loc_1015B+2
;     ***************************************************************************
mov	al, [bp+arg_2]
and	al, 2
cmp	al, 1
sbb	ax, ax
neg	ax
or	ax, ax
jnz	short near ptr loc_100EE+1
mov	ax, [bp+var_6]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, [bp+var_C]
cmp	[bp+var_4], al
jnz	short near ptr loc_10179+1
mov	al, 1
jmp	short locret_1017F
;     ***************************************************************************
mov	al, [bp+var_C]
inc	al
mov	[bp+var_A], al
push	[bp+arg_4]
mov	al, [bp+var_4]
push	ax
mov	al, [bp+var_A]
jmp	wait_entry_005
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_ruler_hos_tru_table_query endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_war_move_send_whom_query proc far	; DATA XREF: s_1273E+2B  t
; game_move_send_whom+2C  t ...

var_C		= byte ptr -0Ch
var_A		= byte ptr -0Ah
var_8		= word ptr -8
var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= byte ptr  6
arg_2		= word ptr  8
arg_4		= byte ptr  0Ah

push	bp
mov	bp, sp
sub	sp, 0Ch
cmp	[bp+arg_0], 7
jbe	short loc_101A6
sub	al, al
jmp	short loc_101A8
;     ***************************************************************************
mov	al, 1
mov	[bp+var_6], al
call	far ptr	60Dh:2E2h
mov	al, byte_1339C
and	al, 1
cmp	al, 1
sbb	al, al
and	al, 1
add	al, 2
mov	byte_1357A, al
mov	[bp+var_2], 0
mov	ax, 1
push	ax
mov	al, 4
push	ax
mov	al, 1
push	ax
call	far ptr	60Dh:260h
add	sp, 6
mov	[bp+var_A], al
mov	[bp+var_C], 1
call	far ptr	4B5h:290h
cmp	[bp+var_6], 0
jnz	short near ptr loc_101F3+1
mov	ax, 5B90h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 2
mov	al, [bp+arg_0]
sub	ah, ah
push	ax
mov	al, [bp+var_6]
push	ax
push	[bp+arg_2]
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_8], ax
or	ax, ax
jnz	short near ptr system_file_delete
jmp	near ptr loc_102AF+1
;     ***************************************************************************
inc	ax
jnz	short loc_10219

loc_20216:				; CODE XREF: dseg:1D439  P		 /* DOS offset ---> 178D:6 */
jmp	loc_102E2
;     ***************************************************************************
dec	[bp+var_8]
mov	bx, [bp+var_8]
shl	bx, 1
mov	ax, [bx-314Eh]
mov	[bp+var_4], ax
push	ax
call	far ptr	542h:7Eh
add	sp, 2
or	ax, ax
jz	short loc_101DD
test	byte_1339C, 1
jnz	short loc_1024B
push	[bp+var_4]
call	far ptr	542h:136h
add	sp, 2
or	ax, ax
jnz	short loc_101DD
mov	bx, [bp+var_8]
shl	bx, 1
cmp	word ptr [bx-3390h], 0
jz	short near ptr loc_10267+1
dec	[bp+var_2]
mov	bx, [bp+var_8]
shl	bx, 1
mov	word ptr [bx-3390h], 0
jmp	short loc_10281
;     ***************************************************************************
nop
mov	al, [bp+arg_4]
cmp	[bp+var_2], al
jnz	short near ptr loc_10272+1
jmp	loc_101DD
;     ***************************************************************************
inc	[bp+var_2]
mov	bx, [bp+var_8]
shl	bx, 1
mov	word ptr [bx-3390h], 1
mov	al, [bp+var_A]
sub	ah, ah
cmp	ax, [bp+var_8]
ja	short loc_1028E
jmp	loc_101DD
;     ***************************************************************************
mov	al, [bp+var_C]
dec	ax
cmp	ax, [bp+var_8]
jbe	short near ptr loc_10298+2
jmp	loc_101DD
;     ***************************************************************************
mov	ax, 1
push	ax
mov	al, 4
push	ax
mov	al, byte ptr [bp+var_8]
push	ax
call	far ptr	60Dh:0C0h
add	sp, 6
jmp	loc_101DD
;     ***************************************************************************
mov	ax, 1
push	ax
mov	al, 4
push	ax
mov	bl, [bp+var_A]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-314Eh], 0
jnz	short loc_102CA
mov	al, 1
jmp	short loc_102CF
;     ***************************************************************************
nop
mov	al, [bp+var_A]
inc	al
mov	[bp+var_C], al
push	ax
call	far ptr	60Dh:260h
add	sp, 6
mov	[bp+var_A], al
jmp	loc_101DD
;     ***************************************************************************
nop
mov	al, [bp+var_2]
mov	sp, bp
pop	bp
retf
game_war_move_send_whom_query endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advisor_display proc far		; DATA XREF: game_mil_train_soldiers+6A  t
; game_personal_search_query+62  t ...

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

; FUNCTION CHUNK AT 034C SIZE 0000000C BYTES

push	bp
mov	bp, sp
sub	sp, 2
push	si
push	current_province
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
mov	bx, ax
mov	ax, [bx+4]
mov	[bp+var_2], ax
or	ax, ax
jnz	short near ptr loc_1030A+2
jmp	near ptr loc_103A7+1
;     ***************************************************************************
push	current_province
push	ax
call	far ptr	542h:15Ah ; game_data_check_advisor_in_province
add	sp, 4
or	ax, ax
jnz	short near ptr loc_1031F+1
jmp	near ptr loc_103A7+1
;     ***************************************************************************
mov	al, 0E4h ; '  *'
mov	bx, [bp+var_2]
sub	al, [bx+4]
shl	al, 1
push	ax
call	far ptr	57Ch:0DCh ; game_math_get_random_number_100
add	sp, 2
or	ax, ax
jz	short locret_10357
cmp	[bp+arg_6], 0
jz	short loc_1034C
mov	al, 1Eh
push	ax
call	far ptr	57Ch:0DCh ; game_math_get_random_number_100
add	sp, 2
or	ax, ax
jz	short locret_10357
cmp	[bp+arg_0], 1
sbb	ax, ax
neg	ax
mov	[bp+arg_0], ax
cmp	[bp+arg_0], 1
sbb	bx, bx
inc	bx
shl	bx, 1
mov	si, [bp+arg_2]
push	word ptr [bx+si]
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	ax, [bp+var_2]
add	ax, 42
push	ax
mov	ax, [bp+var_2]
add	ax, 1Ch
push	ax
mov	bx, [bp+var_2]
push	word ptr [bx+1Ah]
call	game_advisor_display_sub
add	sp, 6
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	[bp+arg_4]
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
game_advisor_display endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_end_turn_func proc	far		; DATA XREF: game_exile_func+9F  t
; game_options_quit_player+A0  t

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
or	byte ptr [bx+12h], 80h
pop	bp
retf
game_end_turn_func endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_103BC		proc far		; DATA XREF: s_10CCE+23  t		 /* DOS offset ---> 17A7:C */
; game_spy_infiltrate_withdraw_output+75  t

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+arg_2]
mov	ax, [bx]
mov	[bp+var_2], ax
push	bx
mov	bx, [bp+arg_0]
push	word ptr [bx+4]
call	far ptr	59Dh:7Eh ; s_5A4E
add	sp, 4
mov	[bp+var_4], ax
or	ax, ax
jnz	short near ptr loc_103ED+1
mov	ax, [bp+var_2]
mov	bx, [bp+arg_0]
mov	[bx+4],	ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, [bp+var_2]
mov	bx, [bp+var_4]
mov	[bx], ax
mov	sp, bp
pop	bp
retf
s_103BC		endp		 /* DOS offset ---> 17A7:C */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_data_order_set proc far	; DATA XREF: game_view_data_order+2E  t
; s_1F79E+23  t

var_14		= byte ptr -14h
var_12		= byte ptr -12h
var_10		= byte ptr -10h
var_E		= byte ptr -0Eh
var_C		= word ptr -0Ch
var_A		= byte ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= word ptr  6
arg_4		= word ptr  0Ah
arg_8		= word ptr  0Ch
arg_A		= word ptr  10h

; FUNCTION CHUNK AT 042A SIZE 00000024 BYTES
; FUNCTION CHUNK AT 0466 SIZE 000000BD BYTES

push	bp
mov	bp, sp
sub	sp, 14h
push	si
mov	al, 1
push	ax
push	[bp+arg_2]
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
mov	[bp+var_10], al
cmp	al, 2
ja	short near ptr loc_10418+1
jmp	loc_104EE
;     ***************************************************************************
dec	[bp+var_10]
mov	al, [bp+var_10]
dec	al
mov	[bp+var_12], al
mov	[bp+var_6], 0CEB4h
mov	[bp+var_A], 0
or	al, al
jnz	short loc_10434
jmp	loc_104BB
;     ***************************************************************************
mov	al, [bp+8]
push	ax
mov	bx, [bp+var_6]
push	word ptr [bx]
call	far ptr	60Dh:68h ; s_6138
add	sp, 4
mov	[bp+var_C], ax
mov	ax, [bp+var_6]
inc	ax
inc	ax
mov	[bp+var_8], ax
mov	al, [bp+var_A]
inc	al
mov	[bp+var_E], al
cmp	al, [bp+var_10]
jnb	short loc_104A9
mov	al, [bp+var_10]
sub	al, [bp+var_E]
mov	[bp+var_14], al
mov	al, [bp+8]
push	ax
mov	bx, [bp+var_8]
push	word ptr [bx]
call	far ptr	60Dh:68h ; s_6138
add	sp, 4
cmp	ax, [bp+var_C]
jbe	short near ptr loc_1049F+1
mov	bx, [bp+var_8]
mov	ax, [bx]
mov	[bp+var_4], ax
mov	si, [bp+var_6]
mov	ax, [si]
mov	[bx], ax
mov	ax, [bp+var_4]
mov	[si], ax
mov	cl, [bp+8]
push	cx
push	ax
call	far ptr	60Dh:68h ; s_6138
add	sp, 4
mov	[bp+var_C], ax
add	[bp+var_8], 2
dec	[bp+var_14]
jnz	short loc_10466
add	[bp+var_6], 2
inc	[bp+var_A]
mov	al, [bp+var_12]
cmp	[bp+var_A], al
jnb	short loc_104BB
jmp	loc_10434
;     ***************************************************************************
mov	ax, word_1CEB2
mov	[bp+var_4], ax
mov	[bp+var_6], 0CEB4h
jmp	short loc_104DB
;     ***************************************************************************
mov	bx, [bp+var_4]
mov	[bx], ax
or	ax, ax
jz	short loc_104E7
mov	ax, [bp+var_2]
mov	[bp+var_4], ax
add	[bp+var_6], 2
mov	bx, [bp+var_6]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jnz	short near ptr loc_104C7+1
mov	bx, [bp+var_4]
mov	word ptr [bx], 0
pop	si
mov	sp, bp
pop	bp
retf
game_view_data_order_set endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_104F4		proc far		 /* DOS offset ---> 17BB:4 */

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
push	[bp+arg_2]
call	far ptr	525h:6
mov	sp, bp

loc_20501:				; CODE XREF: dseg:1D894  P		 /* DOS offset ---> 17BC:1 */
mov	bx, [bp+arg_0]
cmp	al, [bx+21h]
jz	short loc_1051E
push	bx
call	far ptr	525h:6
mov	sp, bp
mov	bx, [bp+arg_2]
cmp	al, [bx+21h]
jz	short loc_1051E
sub	ax, ax
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 1
pop	bp
retf
s_104F4		endp		 /* DOS offset ---> 17BB:4 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


s_10524		proc far		; DATA XREF: s_105CA+1  t		 /* DOS offset ---> 17BE:4 */
; game_spy_rival_tigers+B5  t
mov	bx, current_ruler
mov	al, [bx+7]
and	al, 1
cmp	al, 1
sbb	ax, ax
inc	ax
retf
s_10524		endp		 /* DOS offset ---> 17BE:4 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_check_province_is_neighbor	proc far ; DATA	XREF: s_1251A+30  t
; game_move_func+56  t ...

var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= word ptr  6
arg_4		= byte ptr  8
arg_8		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h

; FUNCTION CHUNK AT 0572 SIZE 00000070 BYTES

push	bp
mov	bp, sp
sub	sp, 6
mov	[bp+var_6], 0
mov	bx, [bp+arg_2]  ;JUQIANG: province addr
mov	al, [bx+20h]    ;x
mov	byte ptr [bp+var_2], al
mov	al, [bx+21h]    ;y
mov	byte ptr [bp+var_4], al
mov	al, [bp+var_6]
push	ax
lea	ax, [bp+var_4]
push	ax
lea	ax, [bp+var_2]
push	ax
call	far ptr	game_data_get_surrounding_provinces
add	sp, 6
cmp	al, [bp+arg_4]
jz	short loc_10572
inc	[bp+var_6]

loc_20569:				; CODE XREF: game_advice_func+80  P		 /* DOS offset ---> 17C2:9 */
cmp	[bp+var_6], 6

loc_2056D:				; CODE XREF: dseg:11890  P		 /* DOS offset ---> 17C2:D */
jb	short near ptr loc_1053D+1
jmp	short loc_1057A
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_check_province_is_neighbor	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_10580		proc far		; DATA XREF: game_spy_betrayal_letter_query+38  t		 /* DOS offset ---> 17C4:0 */
; game_spy_tiger_and_wolf+5B  t ...

arg_0		= word ptr  6

push	bp
mov	bp, sp
push	[bp+arg_0]
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
mov	sp, bp
or	ax, ax
jnz	short near ptr loc_105B5+1
push	current_province
push	[bp+arg_0]
call	far ptr	542h:192h ; game_data_get_province_ruler
mov	sp, bp
or	ax, ax
jnz	short near ptr loc_105B5+1
push	[bp+arg_0]
call	far ptr	542h:92h ; game_data_check_province_in_war
mov	sp, bp
or	ax, ax
jnz	short near ptr loc_105B5+1
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	bp
retf
s_10580		endp		 /* DOS offset ---> 17C4:0 */


;     *************** S U B	R O U T	I N E     ***************************************


game_merchants_check_for_merchants proc	far ; DATA XREF: game_merchants_func+18  t
; game_merchants_func+1F  t
mov	bx, current_province
mov	al, [bx+13h]
and	al, 3
cmp	al, 1
sbb	ax, ax
inc	ax
retf
game_merchants_check_for_merchants endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


s_105CA		proc far		; DATA XREF: game_send_pre_result+6A  t		 /* DOS offset ---> 17C8:A */
; game_personal_recruit+10E  t ...
push	cs
call	s_10524		; *
or	ax, ax
jnz	short near ptr unk_105E2
push	current_province
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short near ptr unk_105E5
mov	ax, 1
retf
s_105CA		endp		 /* DOS offset ---> 17C8:A */


;     *************** S U B	R O U T	I N E     ***************************************


s_105E6		proc far		; DATA XREF: game_war_who_will_command:loc_254AA  t		 /* DOS offset ---> 17CA:6 */
; game_diplomacy_joint_invasion+1A  t
mov	bx, current_ruler
cmp	byte ptr [bx+1Eh], 0FFh
jz	short near ptr unk_10623
mov	al, [bx+1Fh]
push	ax
call	far ptr	525h:76h
add	sp, 2
push	ax
call	far ptr	525h:4Ah
add	sp, 2
push	ax
call	far ptr	525h:6
add	sp, 2
mov	bx, current_ruler
cmp	al, [bx+20h]
jz	short near ptr unk_10623
mov	byte ptr [bx+1Eh], 0FFh
mov	bx, current_ruler
and	byte ptr [bx+7], 0F7h
retf
s_105E6		endp		 /* DOS offset ---> 17CA:6 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_check_provinces_in_war proc far	; DATA XREF: game_diplomacy_threaten_check+40  t
; game_options_HEX+B  t

var_4		= word ptr -4
var_2		= byte ptr -2
arg_6		= word ptr  0Ah

; FUNCTION CHUNK AT 0633 SIZE 00000070 BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_2], 0
mov	[bp+var_4], 2DC4h
push	[bp+var_4]
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1064F+3
add	[bp+var_4], 35
inc	[bp+var_2]

loc_20649:				; CODE XREF: dseg:21A43  P		 /* DOS offset ---> 17D0:9 */
cmp	[bp+var_2], 41
jb	short loc_10633
jmp	short near ptr loc_10657+1
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_check_provinces_in_war endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_merchants_buy_food_calc proc far	; DATA XREF: game_mil_hire_reassign_troops_query+DE  t
; game_merchants_buy_food+90  t

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 2
mov	bx, current_province
mov	al, [bx+1Bh]
sub	ah, ah
mov	cx, ax
sub	dx, dx
push	dx
push	ax
dec	ax
cwd
add	ax, [bp+arg_0]
adc	dx, [bp+arg_2]
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/	; math_divide_2_16bit_values
mov	bx, current_province
sub	[bx+8],	ax
mov	ax, [bp+arg_0]
mov	dx, [bp+arg_2]
mov	bx, current_province
add	[bx+0Ah], ax
adc	[bx+0Ch], dx
mov	sp, bp
pop	bp
retf
game_merchants_buy_food_calc endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_give_population_calc proc far	; DATA XREF: game_give_population_func+B1  t /* DOS offset ---> 17d6:0 */
; game_give_population+84  t

var_4		= byte ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

; FUNCTION CHUNK AT 06B6 SIZE 00000002 BYTES

push	bp		; loyalty gain = ((general's charm + governor's charm) *
; sqrt((food * 100) / sqrt(population) * (difficulty + 6)
;
mov	bp, sp
sub	sp, 4
mov	bx, current_province ; JUQIANG: offset 339a, start of current province
cmp	byte ptr [bx+17h], 100 ; population loyalty
jb	short loc_106B6
sub	al, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, [bx+2] ; governor's offset
mov	al, [bx+6]	; governor's charm
sub	ah, ah
mov	bx, [bp+arg_0] ; general's offset
mov	cl, [bx+6]	; general's charm
sub	ch, ch
add	ax, cx
cwd
sub	ax, dx ; DX is 0 , any other values?
sar	ax, 1		; add charm together and divide	by 2
mov	[bp+var_4], al
push	[bp+arg_2]	; how much food	was given
call	far ptr	0:1B0h	; math_square_root_func
add	sp, 2
mov	[bp+var_2], ax
mov	bx, current_province
push	word ptr [bx+0Eh] ;JUQIANG: populations
call	far ptr	0:1B0h	; math_square_root_func
add	sp, 2
mov	cx, ax
mov	al, game_difficulty ;JUQIANG offset 33b3
sub	ah, ah
add	ax, 6 ;JUQIANG, 0b in assembly code
mul	cx      ; JUQIANG, (11+game diff)*sql(populcations)
push	ax
push	[bp+var_2]
mov	al, [bp+var_4]
sub	ah, ah
push	ax
call	far ptr	49Ch:0Ah ; math_value_x2_from_x1_y1_y2
mov	sp, bp
pop	bp
retf
game_give_population_calc endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_reward_func_calc proc far		; DATA XREF: game_reward_gift_horse+3D  t
; game_reward_gift_gold+71  t ...

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
cmp	byte ptr [bx+0Bh], 100
jnz	short near ptr loc_1071D+1
sub	al, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
cmp	[bp+arg_2], 0
jnz	short near ptr unk_10729
mov	[bp+arg_2], 100
mov	al, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
mov	bx, current_province
mov	bx, [bx+2]
mov	cx, ax
mov	al, [bx+6]	; charm	* variable amount / 400
sub	ah, ah
mul	[bp+arg_2]
mov	bx, 400
sub	dx, dx
div	bx
add	al, cl
mov	sp, bp
pop	bp
retf
game_reward_func_calc endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_development_land_flood_calc proc far ; DATA XREF: game_development_flood_func+1F  t    /* DOS offset ---> 17E1:0 */
; game_development_land_func+1F  t

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= byte ptr  0Ah

push	bp		; land increase	= sqrt[((100 - land / 2) * gold	/ 100) * (gen int + gen	chr / 2)]
mov	bp, sp
sub	sp, 2
mov	bx, [bp+arg_0]  ; general offset
mov	al, [bx+6]	; haozhao
shr	al, 1   ;haozhao/2  3d->1e
add	al, [bx+4]  ; zhili +0x45 ---> 0x63
mov	byte ptr [bp+var_2], al
mov	al, [bp+arg_4]	; original land 0x52
shr	al, 1   ;original land / 2 0x29
sub	ah, ah
sub	ax, 100
neg	ax  ;   100 - original land /2 --->3b
push	ax
push	[bp+arg_2]
call	far ptr	49Ch:32h ; math_value_x2_from_x1_y1_y2_2 0x3b*0x1d(gold)->6af->/0x64 -> 0x11
add	sp, 4
mov	[bp+arg_2], ax  ;0x3b
mov	al, byte ptr [bp+var_2] ;0x11
sub	ah, ah
imul	[bp+arg_2]  ;0x63
push	ax  ; 0x11*0x63->0x693
call	far ptr	0:1B0h	; math_square_root_func -> 0x29
add	sp, 2
mov	cx, ax
mov	al, game_difficulty ; game_land_flood_development_calc
sub	ah, ah
inc	ax  ;diff+1 -> 2
cwd
sub	ax, dx  ;dx=0
sar	ax, 1   ;ax/=2
mov	bx, ax  ;current bx = ax
mov	ax, cx
sub	dx, dx
div	bx  ; 0x29/(current bx)
push	ax
call	far ptr	0:1B0h	; math_square_root_func 0x29->6
add	sp, 2
mov	byte ptr [bp+var_2], al ;0x63
mov	al, game_difficulty ; game_land_flood_development_calc
push	ax
lea	ax, [bp+var_2]  ; 6
push	ax
call	far ptr	49Ch:6Ch ; math_subtract_x1_from_y1
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
game_development_land_flood_calc endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_development_flood_func proc far	; DATA XREF: game_development_flood_query+7B  t/* DOS offset ---> 17E1:76 */

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
mov	bx, current_province
cmp	byte ptr [bx+18h], 100
jb	short near ptr loc_107D8+2
sub	al, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bx+18h]
push	ax
push	[bp+arg_2]
push	[bp+arg_0]
push	cs
call	game_development_land_flood_calc
mov	sp, bp
pop	bp
retf
game_development_flood_func endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_development_land_func proc	far	; DATA XREF: game_development_land_query+7B  t /* DOS offset ---> 17ea:c */

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
mov	bx, current_province
cmp	byte ptr [bx+16h], 100
jb	short near ptr loc_107FE+2
sub	al, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bx+16h]    ;current land value
push	ax
push	[bp+arg_2]  ; gold
push	[bp+arg_0]  ; 12FD
push	cs
call	game_development_land_flood_calc
mov	sp, bp
pop	bp
retf
game_development_land_func endp

;     ***************************************************************************
call	loc_130BD+1
mov	al, 8
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 3
push	ax
mov	ax, word_1CE9A
add	ax, 0Bh
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
retf
;     ***************************************************************************
nop
mov	al, 8
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 3
push	ax
mov	ax, word_1CE9A
add	ax, 0Bh
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	bx, word_1CE9A
and	byte ptr [bx+3], 0Fh
mov	bx, word_1CE9A
or	byte ptr [bx+3], 40h
retf
;     ***************************************************************************
mov	al, 10h
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 5
push	ax
mov	ax, word_1CE9A
add	ax, 0Bh
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	bx, word_1CE9A
or	byte ptr [bx+2], 8
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	word_1CEA4
call	far ptr	525h:4Ah
add	sp, 2
mov	[bp-2],	ax
mov	ax, 50
push	ax
push	word_1CAF0
push	word ptr [bp-2]
call	far ptr	loc_128EB+1
add	sp, 6
push	word_1CAF0
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp-2]
mov	[bx+9],	al
mov	ax, [bx+2]
or	ax, ax
jz	short loc_108D7
mov	bx, ax
mov	byte ptr [bx+15h], 255
mov	ax, [bx]
or	ax, ax
jnz	short loc_108CB
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_108DC		proc far		; DATA XREF: game_exile_func+69  t		 /* DOS offset ---> 17F9:C */

var_4		= word ptr -4
arg_2		= byte ptr  6

; FUNCTION CHUNK AT 0902 SIZE 00000013 BYTES

push	bp
mov	bp, sp
sub	sp, 4
sub	ax, ax
push	ax
call	far ptr	59Dh:320h ; game_data_get_rulers_in_game
add	sp, 2
mov	[bp+var_4], 0CAF8h
jmp	short loc_10906
;     ***************************************************************************
mov	bx, ax
mov	al, [bp+arg_2]
cmp	[bx+1Eh], al
jnz	short loc_10902
mov	byte ptr [bx+1Eh], 255
add	[bp+var_4], 2
mov	bx, [bp+var_4]
mov	ax, [bx]
or	ax, ax
jnz	short locret_108F4
mov	sp, bp
pop	bp
retf
s_108DC		endp		 /* DOS offset ---> 17F9:C */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_cancel_alliance_sub proc	far ; DATA XREF: game_diplomacy_cancel_alliance+43  t

var_2		= byte ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

; FUNCTION CHUNK AT 095F SIZE 0000001F BYTES

push	bp
mov	bp, sp
sub	sp, 4
push	si
push	[bp+arg_2]
call	far ptr	525h:6	; game_data_get_rulers_data
add	sp, 2
mov	[bp+var_2], al
push	[bp+arg_0]
call	far ptr	525h:6	; game_data_get_rulers_data
add	sp, 2
mov	cl, al
mov	dx, 1
shl	dx, cl
not	dx
mov	bx, [bp+arg_2]
and	[bx+0Ah], dx
mov	cl, [bp+var_2]
mov	dx, 1
shl	dx, cl
not	dx
mov	si, [bp+arg_0]
and	[si+0Ah], dx
cmp	al, [bx+1Eh]
jnz	short loc_1095F
mov	bx, [bp+arg_2]
mov	byte ptr [bx+1Eh], 0FFh
mov	bx, [bp+arg_0]
mov	al, [bp+var_2]
cmp	[bx+1Eh], al
jnz	short loc_1096E
mov	byte ptr [bx+1Eh], 0FFh
mov	ax, 20
push	ax
push	[bp+arg_0]
push	[bp+arg_2]
call	game_data_set_hostility_of_ruler
add	sp, 6
mov	ax, 20
push	ax
push	[bp+arg_2]
push	[bp+arg_0]
call	game_data_set_hostility_of_ruler
add	sp, 6
cmp	[bp+arg_4], 0
jz	short near ptr unk_109CF
push	[bp+arg_2]
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short near ptr unk_109CF
call	far ptr	4B5h:290h
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	bx, [bp+arg_2]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 5BACh	; 0x35444
; Text:	'*Hos  Tru  %2d   %d'
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
call	far ptr	57Ch:126h
pop	si
mov	sp, bp
pop	bp
retf
game_diplomacy_cancel_alliance_sub endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

func_109D4	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
mov	ax, 10000
push	ax
mov	bx, [bp+arg_2]
mov	al, [bx+6]
sub	ah, ah
add	ax, 50
push	ax
push	[bp+arg_0]
call	far ptr	49Ch:0Ah
mov	sp, bp
pop	bp
retf
func_109D4	endp

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	ax, 30000
push	ax
push	word_1CA96
mov	bx, word_1D478
mov	ax, [bx+2]
add	ax, 8
push	ax
call	far ptr	49Ch:8Ch
add	sp, 6
mov	al, 3
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
push	word_1CE9E
push	word_1CA96
mov	[bp-4],	ax
push	cs
call	near ptr unk_109D4
add	sp, 4
add	al, [bp-4]
sub	ah, ah
neg	ax
push	ax
push	word_1D478
push	current_ruler
mov	si, ax
call	far ptr	loc_128EB+1
add	sp, 6
push	si
push	current_ruler
push	word_1D478
call	far ptr	loc_128EB+1
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, [bp+6]
mov	byte ptr [bx+9], 0FFh
mov	ax, [bx+2]
mov	[bp-2],	ax
or	ax, ax
jz	short loc_10AB0
mov	bx, ax
cmp	byte ptr [bx+15h], 0FFh
jz	short loc_10AA4
mov	al, [bx+15h]
push	ax
call	far ptr	525h:76h
add	sp, 2
push	ax
call	far ptr	525h:4Ah
add	sp, 2
cmp	ax, [bp+8]
jnz	short loc_10AA4
mov	bx, [bp-2]
mov	byte ptr [bx+15h], 0FFh
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_10A79+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	si
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	[bp-4],	al
push	word_1D478
call	far ptr	525h:6
add	sp, 2
mov	bx, current_ruler
mov	[bx+21h], al
mov	cx, 0Ah
push	cx
sub	ah, ah
mov	si, ax
mov	bx, current_ruler
mov	al, [bx+si+0Eh]
push	ax
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, current_ruler
mov	[bx+si+0Eh], al
mov	al, [bp-4]
sub	ah, ah
add	ax, word_1D478
add	ax, 0Eh
mov	cx, 0Ah
push	cx
mov	bx, ax
mov	cl, [bx]
sub	ch, ch
push	cx
mov	si, ax
call	far ptr	49Ch:32h
add	sp, 4
mov	[si], al
push	word_1D478
push	current_ruler
push	cs
call	near ptr loc_10A62+2
add	sp, 4
push	current_ruler
push	word_1D478
push	cs
call	near ptr loc_10A62+2
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_1D478
call	far ptr	525h:6
add	sp, 2
mov	bx, current_ruler
mov	[bx+1Eh], al
mov	bx, current_ruler
and	byte ptr [bx+7], 0F7h
push	word_1CEAC
call	far ptr	525h:64h
add	sp, 2
mov	bx, current_ruler
mov	[bx+1Fh], al
push	word_1CEAC
call	far ptr	525h:4Ah
add	sp, 2
push	ax
call	far ptr	525h:6
add	sp, 2
mov	bx, current_ruler
mov	[bx+20h], al
retf
;     ***************************************************************************
nop
push	word_1D478
call	far ptr	525h:6
add	sp, 2
mov	cl, al
mov	ax, 1
shl	ax, cl
mov	bx, current_ruler
or	[bx+0Ah], ax
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	cl, al
mov	ax, 1
shl	ax, cl
mov	bx, word_1D478
or	[bx+0Ah], ax
mov	ax, 0FFECh
push	ax
push	word_1D478
push	current_ruler
call	far ptr	loc_128EB+1
add	sp, 6
mov	ax, 0FFECh
push	ax
push	current_ruler
push	word_1D478
call	far ptr	loc_128EB+1
add	sp, 6
push	word_1D478
push	current_ruler
push	cs
call	near ptr loc_10A62+2
add	sp, 4
push	current_ruler
push	word_1D478
push	cs
call	near ptr loc_10A62+2
add	sp, 4
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_10C0A		proc far		 /* DOS offset ---> 182C:A */

var_A		= byte ptr -0Ah
var_8		= word ptr -8
var_4		= byte ptr -4
arg_0		= word ptr  6

; FUNCTION CHUNK AT 0C49 SIZE 00000002 BYTES

push	bp
mov	bp, sp
sub	sp, 0Ah
push	[bp+arg_0]
call	s_12D86		; *
add	sp, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	[bp+var_4], al
mov	bx, [bp+arg_0]
mov	ax, [bx+6]
mov	[bp+var_8], ax
cmp	[bp+var_4], 0
jz	short loc_10C49
mov	al, [bp+var_4]
mov	[bp+var_A], al
mov	bx, [bp+var_8]
mov	ax, [bx]
mov	[bp+var_8], ax
dec	[bp+var_A]
jnz	short near ptr loc_10C3A+2
mov	sp, bp
pop	bp
retf
s_10C0A		endp		 /* DOS offset ---> 182C:A */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_10C4E		proc far		; DATA XREF: f_10DF2+40  t		 /* DOS offset ---> 1830:E */

var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= word ptr  6

; FUNCTION CHUNK AT 0C64 SIZE 00000052 BYTES
; FUNCTION CHUNK AT 0CC8 SIZE 00000005 BYTES

push	bp
mov	bp, sp
sub	sp, 4
push	[bp+arg_2]
call	far ptr	59Dh:428h
add	sp, 2
mov	[bp+var_2], 0CA62h
mov	bx, [bp+var_2]
mov	ax, [bx]
mov	[bp+var_4], ax
or	ax, ax
jz	short loc_10CC8
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_10C9E
push	[bp+var_4]
push	[bp+arg_2]
call	far ptr	542h:192h
add	sp, 4
or	ax, ax
jz	short loc_10C9E
push	[bp+var_4]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_10CA4
add	[bp+var_2], 2
jmp	short loc_10C64
;     ***************************************************************************
push	word ptr [bp+8]
push	[bp+arg_2]
call	far ptr	59Dh:6A8h
add	sp, 4
push	word ptr [bp+8]
push	[bp+var_4]
call	far ptr	59Dh:5CEh
add	sp, 4
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
s_10C4E		endp		 /* DOS offset ---> 1830:E */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_10CCE		proc far		 /* DOS offset ---> 1838:E */

var_A		= word ptr -0Ah
var_8		= byte ptr -8
var_6		= word ptr -6
arg_4		= word ptr  8
arg_8		= word ptr  0Ch

; FUNCTION CHUNK AT 0D4A SIZE 00000005 BYTES
; FUNCTION CHUNK AT 0D98 SIZE 00000016 BYTES
; FUNCTION CHUNK AT 0DCD SIZE 00000035 BYTES
; FUNCTION CHUNK AT 0E08 SIZE 0000005E BYTES

push	bp
mov	bp, sp
sub	sp, 0Ah
push	si
push	[bp+arg_4]
call	far ptr	525h:84h
add	sp, 2
mov	[bp+var_8], al
cmp	al, 4
jz	short near ptr loc_10CE9+1
jmp	loc_10DF2
;     ***************************************************************************
push	[bp+arg_4]
push	current_province
call	s_103BC		; *
add	sp, 4
mov	bx, [bp+0Ah]
mov	al, [bx+0Ah]
mov	si, [bp+arg_4]
mov	[si+0Ah], al
mov	byte ptr [si+0Bh], 40
push	bx
call	far ptr	525h:30h
add	sp, 2
push	ax
push	si
call	far ptr	59Dh:1E8h
add	sp, 4
test	byte ptr [si+2], 2
jnz	short near ptr loc_10D24+1
jmp	loc_10DCD
;     ***************************************************************************
mov	bx, [bp+arg_4]
mov	al, 41
mul	byte ptr [bx+0Dh]
add	ax, 2B34h
mov	[bp+var_6], ax
cmp	ax, current_ruler
jnz	short loc_10D4A
mov	byte ptr [bx+0Bh], 100
push	bx
call	far ptr	59Dh:0BEh
add	sp, 2
jmp	loc_10DCD
;     ***************************************************************************
nop
mov	si, word_13396
mov	ax, [si+10h]
test	[bx+10h], ax
jnz	short near ptr loc_10DC5+1
push	bx
mov	bx, [bp+var_6]
push	word ptr [bx]
call	far ptr	60Dh:630h
add	sp, 4
push	[bp+arg_4]
push	word_13396
mov	[bp+var_A], ax
call	far ptr	60Dh:630h
add	sp, 4
cmp	al, byte ptr [bp+var_A]
jnb	short loc_10D98
mov	bx, [bp+arg_4]
mov	al, [bx+7]
mov	cl, 3
sub	ah, ah
div	cl
sub	al, 33
neg	al
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_10DC5+1
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
sub	al, 95
neg	al
push	ax
mov	al, 14h
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
push	ax
mov	ax, [bp+arg_4]
add	ax, 0Bh
push	ax
call	far ptr	49Ch:48h
add	sp, 6
jmp	short loc_10DCD
;     ***************************************************************************
nop
mov	bx, [bp+arg_4]
and	byte ptr [bx+2], 0FDh
mov	bx, [bp+arg_4]
mov	byte ptr [bx+0Ch], 1
push	bx
call	far ptr	59Dh:700h
add	sp, 2
push	[bp+arg_4]
push	current_province
call	far ptr	59Dh:5CEh
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
s_10CCE		endp		 /* DOS offset ---> 1838:E */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


f_10DF2		proc far

; FUNCTION CHUNK AT 0E07 SIZE 00000001 BYTES
; FUNCTION CHUNK AT 0E9A SIZE 00000010 BYTES

cmp	byte ptr [bp-8], 1
jz	short near ptr loc_10DF9+2
jmp	loc_10E9A
;     ***************************************************************************
mov	bx, [bp+8]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jz	short locret_10E71
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-2],	ax
mov	al, 3
push	ax
push	word ptr [bp+0Ah]
push	bx
call	far ptr	unk_12EA8
add	sp, 6
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_10E57+1
push	word ptr [bp-4]
push	word ptr [bp+6]
push	cs
call	s_10C4E		; *
add	sp, 4
or	ax, ax
jnz	short loc_10E67
push	word ptr [bp-4]
push	word ptr [bp+6]
call	far ptr	59Dh:6A8h
add	sp, 4
push	word ptr [bp-4]
push	word ptr [bp+6]
call	far ptr	59Dh:190h
jmp	short near ptr loc_10E63+1
;     ***************************************************************************
nop
push	current_ruler
push	word ptr [bp-4]
call	far ptr	59Dh:22Eh
add	sp, 4
mov	ax, [bp-2]
mov	[bp-4],	ax
or	ax, ax
jnz	short loc_10E07
push	word ptr [bp+6]
push	word ptr [bp+6]
call	far ptr	525h:4Ah
add	sp, 2
push	ax
call	far ptr	59Dh:52Eh
add	sp, 4
push	word ptr [bp+6]
push	current_ruler
call	far ptr	59Dh:49Ch
add	sp, 4
jmp	short locret_10EC2
;     ***************************************************************************
nop
push	word ptr [bp+8]
push	word ptr [bp+6]
call	far ptr	59Dh:6A8h
add	sp, 4
push	word ptr [bp+8]
push	current_province
call	far ptr	59Dh:5CEh
add	sp, 4
push	word ptr [bp+8]
call	far ptr	59Dh:700h
add	sp, 2
push	current_ruler
push	word ptr [bp+8]
call	far ptr	59Dh:22Eh
add	sp, 4
cmp	byte ptr [bp-8], 1
jnz	short loc_10EF1
push	word ptr [bp+6]
call	far ptr	4B5h:3F4h
add	sp, 2
mov	bx, [bp+6]
and	byte ptr [bx+12h], 0FBh
mov	al, 0FFh
mov	[bx+14h], al
mov	[bx+15h], al
pop	si
mov	sp, bp
pop	bp
retf
f_10DF2		endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_mil_hire_soldiers_total_required proc far
; DATA XREF: game_mil_hire_soldiers_check_sub+72  t
; game_mil_hire_soldiers_main+C4  t

var_6		= word ptr -6
var_4		= word ptr -4
arg_2		= word ptr  8
arg_6		= word ptr  0Ch
arg_A48		= dword	ptr  0A4Eh

; FUNCTION CHUNK AT 0F26 SIZE 00000005 BYTES
; FUNCTION CHUNK AT 0F2C SIZE 0000002D BYTES

push	bp		; function to calculation all troops in	province
mov	bp, sp
sub	sp, 6
sub	ax, ax
mov	[bp+var_4], ax
mov	[bp+var_6], ax
mov	bx, current_province
mov	ax, [bx+2]	; gets governor	as first general
or	ax, ax
jz	short loc_10F2C
mov	bx, ax		; moves	general	into bx
cmp	word ptr [bx+12h], 10000 ; checks if has max troops
jnb	short loc_10F26	; jump if general has max troops, otherwise calculates difference
mov	ax, 10000
sub	ax, [bx+12h]
sub	dx, dx
add	[bp+var_6], ax
adc	[bp+var_4], dx
mov	ax, [bx]
or	ax, ax
jnz	short loc_10F0F
mov	ax, 100
cwd
push	dx
push	ax
mov	ax, [bp+var_6]
mov	dx, [bp+var_4]
add	ax, 99
adc	dx, 0
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/	; math_divide_2_16bit_values
; divides total	troops by 100 to determine required units to purchase
mov	sp, bp
pop	bp
retf
game_mil_hire_soldiers_total_required endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_mil_hire_soldiers_check_sub proc far ; DATA XREF: game_mil_hire_soldiers_check+2E  t

var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 4
push	current_province
call	game_data_get_province_total_soldiers
add	sp, 2
mov	[bp+var_4], ax
mov	bx, current_province
cmp	word ptr [bx+0Eh], 500 ; minimum population to hire soldiers
jbe	short j_10FD8
cmp	[bx+0Eh], ax
jbe	short j_10FD8
mov	ax, [bx+0Eh]
mov	cx, ax
add	ax, [bp+var_4]
shr	ax, 1
sub	ax, [bp+var_4]
push	ax
sub	cx, 500
push	cx
call	far ptr	561h:18Ah ; math_divide_2_16bit_values
; check	population as limiting input range
add	sp, 4
mov	[bp+var_2], ax
mov	ax, 100
cwd
push	dx
push	ax
mov	bx, current_province
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/	; math_divide_2_16bit_values
; divides food by 100
push	ax
mov	bx, current_province
mov	ax, [bx+8]	; move province	gold into ax
mov	cx, 10		; move soldier cost and	divide to make sure there's enough gold
sub	dx, dx
div	cx
push	ax
call	far ptr	561h:18Ah ; math_divide_2_16bit_values
; math,	calculates division range for input
add	sp, 4
push	ax
push	cs
call	game_mil_hire_soldiers_total_required ;	calculates difference between current troops in	province and max
push	ax
call	far ptr	561h:18Ah ; math_divide_2_16bit_values
; math again, nop messes up input range	for input
add	sp, 4
push	ax
push	[bp+var_2]
call	far ptr	561h:18Ah ; math_divide_2_16bit_values
; math,	they're all connected - checks smallest range out of input values
add	sp, 4
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

j_10FD8:				; DATA XREF: game_mil_hire_soldiers_check_sub+1E  t
; game_mil_hire_soldiers_check_sub+23  t
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_mil_hire_soldiers_check_sub endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_mil_train_soldiers_calc proc far	; DATA XREF: game_mil_train_soldiers_train_func+10  t
; /* DOS offset --->  1869:E */
; game_mil_train_soldiers+42  t

var_4		= word ptr -4
arg_0		= word ptr  6

; FUNCTION CHUNK AT 0FF4 SIZE 00000004 BYTES
; FUNCTION CHUNK AT 1009 SIZE 00000009 BYTES

push	bp
mov	bp, sp		; training level increase = (2*war ability) / sqrt(soldiers / 100))
sub	sp, 4
mov	[bp+var_4], 0
mov	bx, current_province
mov	ax, [bx+2]
or	ax, ax
jz	short near ptr loc_1100D+2
mov	bx, ax
cmp	byte ptr [bx+16h], 100 ; training
jz	short loc_11009
mov	ax, [bx+12h]	; soldiers
mov	cx, 100
sub	dx, dx
div	cx
add	[bp+var_4], ax	; get soldier numbers in 100s
mov	ax, [bx]    ; loc_11009
or	ax, ax
jnz	short loc_10FF4	; repeat for all generals in the province for total soldiers
mov	ax, [bp+var_4]
inc	ax
push	ax
call	far ptr	0:1B0h	; math_square_root_func
mov	cx, ax
mov	bx, [bp+arg_0]	; get general's war ability
mov	al, [bx+5]
sub	ah, ah
shl	ax, 1		; multiple it by 2 and divide by the square root of the	troops to train
sub	dx, dx
div	cx
mov	sp, bp
pop	bp
retf
game_mil_train_soldiers_calc endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_mil_train_soldiers_train_func proc	far ; DATA XREF: game_mil_train_soldiers+84  t

var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6
arg_6		= word ptr  0Ch

; FUNCTION CHUNK AT 1046 SIZE 00000030 BYTES
; FUNCTION CHUNK AT 108A SIZE 00000040 BYTES

push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	[bp+var_4], 0
push	[bp+arg_0]
push	cs
call	game_mil_train_soldiers_calc
add	sp, 2
mov	[bp+var_6], al
mov	bx, current_province
mov	ax, [bx+2]
mov	[bp+arg_0], ax
or	ax, ax
jz	short loc_1108A
mov	bx, ax
mov	al, [bx+16h]
mov	[bp+var_2], al
mov	al, 100
push	ax
mov	al, [bp+var_6]
push	ax
lea	ax, [bx+16h]
push	ax
mov	si, ax
call	far ptr	49Ch:48h ; game_data_prov_move_next_free_general_pointer
add	sp, 6
mov	al, [bp+var_2]
cmp	[si], al
jbe	short near ptr loc_1107C+2
mov	[bp+var_4], 1
mov	bx, [bp+arg_0]
mov	ax, [bx]
mov	[bp+arg_0], ax
or	ax, ax
jnz	short loc_11055
mov	ax, [bp+var_4]
pop	si
mov	sp, bp
pop	bp
retf
game_mil_train_soldiers_train_func endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_mil_hire_soldiers_calc proc far	; DATA XREF: game_mil_hire_soldiers_main+6C  t

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, current_province
push	word ptr [bx+0Eh] ; population
mov	ax, [bx+0Eh]
sub	ax, [bp+arg_0]	; requested number of soldiers
push	ax
mov	al, [bx+17h]	; loyalty
sub	ah, ah
push	ax
call	far ptr	49Ch:0Ah ; math_value_x2_from_x1_y1_y2
; math,	get percentage % difference of population decrease
; multiply it by loyalty to determine loyalty percentage drop
mov	sp, bp
mov	bx, current_province
mov	[bx+17h], al
mov	ax, [bp+arg_0]
mov	cx, 50
sub	dx, dx
div	cx
push	ax
call	far ptr	49Ch:178h ; s_4B38
; nop, results in 0 loyalty
mov	sp, bp
push	ax
mov	ax, current_province
add	ax, 23
push	ax
call	far ptr	49Ch:6Ch ; s_4A2C
; nop, unknown
mov	sp, bp
mov	ax, [bp+arg_0]	; requested number of soldiers
mov	cx, ax
shl	ax, 1		; cost = ((request * 2 * 2) + request) * 2
; 500 =	((50 * 2 * 2) +	50) * 2
; 500 =	(200 + 50) * 2
; 500 =	500, only works	if cost	of soldiers is 10 though
shl	ax, 1
add	ax, cx
shl	ax, 1
mov	bx, current_province
sub	[bx+8],	ax	; subtracts soldier cost from province gold
mov	ax, 0FF9Ch
cwd
push	dx
push	ax
mov	ax, [bp+arg_0]
sub	dx, dx
push	dx
push	ax
call	far ptr	0:38B2h	; math_multiply_2_16bit_values
; nop, unknown
mov	bx, current_province
add	[bx+0Ah], ax	; subtracts from food
adc	[bx+0Ch], dx
mov	ax, [bp+arg_0]
mov	bx, current_province
sub	[bx+0Eh], ax	; subtracts from population
mov	sp, bp
pop	bp
retf
game_mil_hire_soldiers_calc endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_gold_max_difference proc far ; DATA XREF:	game_move_send_whom+41  t
; game_send_how_much_gold_food+81  t

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	ax, 30000
mov	bx, [bp+arg_0]
sub	ax, [bx+8]
push	ax
mov	bx, current_province
push	word ptr [bx+8]
call	far ptr	561h:18Ah ; math_truncate_decimal_value
mov	sp, bp
pop	bp
retf
game_data_get_gold_max_difference endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_food_max_difference proc far ; DATA XREF:	game_move_send_whom+67  t
; game_send_how_much_gold_food+8F  t

arg_0		= word ptr  6

; FUNCTION CHUNK AT 1167 SIZE 0000000B BYTES

push	bp
mov	bp, sp
sub	sp, 8
push	di
push	si
mov	bx, current_province
mov	ax, [bx+0Ah]
mov	dx, [bx+0Ch]
mov	cx, 0C6C0h
mov	bx, 2Dh	; '-'
mov	si, [bp+arg_0]
sub	cx, [si+0Ah]
sbb	bx, [si+0Ch]
mov	si, ax
mov	di, dx
mov	ax, cx
mov	dx, bx
cmp	dx, di
jl	short near ptr loc_1116A+1
jg	short loc_11167
cmp	ax, si
jbe	short near ptr loc_1116A+1
mov	dx, di
mov	ax, si
pop	si
pop	di
mov	sp, bp
pop	bp
retf
game_data_get_food_max_difference endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_11172		proc far		; DATA XREF: s_111D6+70  t		 /* DOS offset ---> 1883:2 */

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	ax, word_1CA96
mov	bx, [bp+arg_0]
sub	[bx+8],	ax
mov	ax, word_1CA88
mov	dx, word_1CA8A
sub	[bx+0Ah], ax
sbb	[bx+0Ch], dx
pop	bp
retf
s_11172		endp		 /* DOS offset ---> 1883:2 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1118E		proc far		; DATA XREF: s_111D6+7A  t		 /* DOS offset ---> 1884:E */
; game_send_result+142  t

arg_0		= word ptr  6

; FUNCTION CHUNK AT 11D3 SIZE 00000002 BYTES

push	bp
mov	bp, sp
mov	ax, 30000
push	ax
push	word_1CA96
mov	ax, [bp+arg_0]
add	ax, 8
push	ax
call	far ptr	49Ch:8Ch ; game_data_set_generals_soldiers
mov	sp, bp
mov	ax, word_1CA88
mov	dx, word_1CA8A
mov	bx, [bp+arg_0]
add	[bx+0Ah], ax
adc	[bx+0Ch], dx
cmp	word ptr [bx+0Ch], 45
jl	short loc_111D3
jg	short near ptr loc_111C5+1
cmp	word ptr [bx+0Ah], 0C6C0h
jbe	short loc_111D3
mov	bx, [bp+arg_0]
mov	word ptr [bx+0Ah], 0C6C0h
mov	word ptr [bx+0Ch], 45
pop	bp
retf
s_1118E		endp		 /* DOS offset ---> 1884:E */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_111D6		proc far		; DATA XREF: game_move_send_whom+EC  t		 /* DOS offset ---> 1889:6 */

var_A		= byte ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= byte ptr  8

; FUNCTION CHUNK AT 12D5 SIZE 0000004F BYTES

push	bp
mov	bp, sp
sub	sp, 0Ah
push	[bp+arg_0]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
mov	[bp+var_6], ax
mov	[bp+var_A], 0
cmp	[bp+arg_2], 0
jz	short near ptr loc_1123F+2
mov	bl, [bp+var_A]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-3390h], 0
jz	short loc_11236
mov	bl, [bp+var_A]
sub	bh, bh
shl	bx, 1
mov	ax, [bx-314Eh]
mov	[bp+var_2], ax
push	ax
push	current_province
call	far ptr	59Dh:6A8h
add	sp, 4
push	[bp+var_2]
push	[bp+arg_0]
call	far ptr	59Dh:5CEh
add	sp, 4
push	[bp+var_2]
call	far ptr	59Dh:700h
add	sp, 2
inc	[bp+var_A]
mov	al, [bp+arg_2]
cmp	[bp+var_A], al
jb	short near ptr loc_111F3+1
push	current_province
push	cs
call	s_11172
add	sp, 2
push	[bp+arg_0]
push	cs
call	s_1118E
add	sp, 2
mov	ax, word_1CC70
mov	[bp+var_8], ax
mov	ax, word_1CEB2
mov	[bp+var_4], ax
cmp	[bp+var_6], 0
jz	short near ptr loc_112A4+1
push	[bp+arg_0]
call	loc_103AF+1
add	sp, 2
mov	bx, [bp+arg_0]
or	byte ptr [bx+13h], 30h
push	bx
call	far ptr	4B5h:3F4h
add	sp, 2
push	current_province
call	far ptr	542h:0A8h
add	sp, 2
or	ax, ax
jz	short loc_1129A
mov	bx, [bp+arg_0]
or	byte ptr [bx+12h], 4
push	[bp+arg_0]
call	far ptr	60Dh:54Ch
add	sp, 2
cmp	[bp+var_8], 0
jz	short loc_112FD
push	current_province
call	far ptr	60Dh:54Ch
add	sp, 2
mov	bx, current_ruler
or	byte ptr [bx+7], 10h
push	[bp+var_4]
call	far ptr	525h:84h
add	sp, 2
or	al, al
jnz	short loc_112D5
mov	bx, [bp+arg_0]
and	byte ptr [bx+12h], 0FBh
mov	bx, current_province
cmp	word ptr [bx+2], 0
jnz	short near ptr loc_112F3+1
push	bx
call	far ptr	59Dh:50Eh
add	sp, 2
push	current_province
call	far ptr	4B5h:3F4h
add	sp, 2
push	current_province
call	loc_103AF+1
mov	sp, bp
pop	bp
retf
s_111D6		endp		 /* DOS offset ---> 1889:6 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


unkfunc_11302	proc far

; FUNCTION CHUNK AT 1359 SIZE 00000004 BYTES
; FUNCTION CHUNK AT 1362 SIZE 000000A3 BYTES

cmp	byte_1CE9C, 7
jb	short loc_11322
cmp	byte_1CE9C, 0Bh
ja	short loc_11322
push	word_1CEA4
call	far ptr	525h:4Ah
add	sp, 2
cmp	ax, word_1D478
jz	short near ptr loc_1133A+1
cmp	byte_1CE9C, 1
jnz	short loc_11362
push	word_1CEAC
call	far ptr	525h:4Ah
add	sp, 2
cmp	ax, word_1D478
jnz	short loc_11362
mov	ax, 3
push	ax
push	current_ruler
push	word_1D478
call	game_data_set_hostility_of_ruler ; *
add	sp, 6
cmp	byte_1CE9C, 8
jnz	short near ptr loc_1135D+1
mov	bx, word_1CE9A
or	byte ptr [bx+2], 20h
mov	ax, 1
retf
;     ***************************************************************************
sub	ax, ax
retf
unkfunc_11302	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_11366		proc far		; DATA XREF: game_messenger_travel_s_11DBE+51  t		 /* DOS offset ---> 18A2:6 */

var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	bx, word_1D478
mov	ax, [bx]
add	ax, 7
mov	[bp+var_2], ax
cmp	word_1D472, 0
jz	short loc_113AE
mov	bx, ax
mov	al, [bx]
mov	byte ptr [bp+var_4], al
mov	al, game_difficulty
mov	cx, ax
shl	al, 1
add	al, cl
sub	al, 64h	; 'd'
neg	al
push	ax
mov	al, [bx+1]
mov	cl, 3
sub	ah, ah
div	cl
push	ax
lea	ax, [bp+var_4]
push	ax
call	far ptr	49Ch:48h
add	sp, 6
jmp	short near ptr loc_113DF+1
;     ***************************************************************************
nop
mov	bx, ax
mov	al, [bx+1]
shr	al, 1
add	al, 32h	; '2'
mov	byte ptr [bp+var_4], al
push	current_ruler
call	far ptr	525h:6
add	sp, 2
sub	ah, ah
mov	si, ax
mov	bx, word_1D478
mov	al, [bx+si+0Eh]
shr	al, 1
push	ax
lea	ax, [bp+var_4]
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	al, byte ptr [bp+var_4]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
s_11366		endp		 /* DOS offset ---> 18A2:6 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_113F2		proc far		; DATA XREF: game_messenger_travel_s_11DBE+45  t		 /* DOS offset ---> 18AB:2 */

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2
push	si
cmp	word_1D472, 1
sbb	al, al
and	al, 0D8h
add	al, 78h	; 'x'
mov	bx, word_1D478
mov	si, [bx]
add	al, [si+8]
mov	byte ptr [bp+var_2], al
push	current_ruler

loc_21414:				; CODE XREF: dseg:1C3CC  P		 /* DOS offset ---> 18AD:4 */
call	far ptr	525h:6
add	sp, 2
sub	ah, ah
mov	si, ax
mov	bx, word_1D478
mov	al, [bx+si+0Eh]
add	al, [bx+6]
push	ax
lea	ax, [bp+var_2]
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	al, byte ptr [bp+var_2]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
s_113F2		endp		 /* DOS offset ---> 18AB:2 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_11448		proc far		; DATA XREF: game_messenger_travel_s_11DBE+8F  t		 /* DOS offset ---> 18B0:8 */

; FUNCTION CHUNK AT 1411 SIZE 00000004 BYTES
; FUNCTION CHUNK AT 1438 SIZE 00000015 BYTES
; FUNCTION CHUNK AT 1460 SIZE 00000005 BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	bx, word_1CE9E
test	byte ptr [bx+3], 40h
jz	short loc_11460
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, bx
add	ax, 4
mov	cl, game_difficulty
sub	ch, ch
sub	cx, 64h	; 'd'
neg	cx
push	cx
mov	bx, ax
mov	cl, [bx]
mov	dl, [bx+1]
shr	dl, 1
sub	dh, dh
shr	cl, 1
shr	cl, 1
sub	ch, ch
add	dx, cx
add	dx, 28h	; '('
push	dx
call	far ptr	561h:18Ah
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh
mov	sp, bp
pop	bp
retf
s_11448		endp		 /* DOS offset ---> 18B0:8 */


;     *************** S U B	R O U T	I N E     ***************************************


unkfunc_1149A	proc far
mov	bx, current_province
cmp	word ptr [bx+2], 0
jnz	short near ptr loc_114B8+2
push	bx
call	far ptr	59Dh:50Eh
add	sp, 2
push	current_province
call	far ptr	4B5h:3F4h
add	sp, 2
retf
;     ***************************************************************************
push	bx
call	far ptr	60Dh:54Ch
add	sp, 2
retf
unkfunc_1149A	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

unkfunc_114C4	proc far

var_2		= byte ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_6		= word ptr  0Ch
arg_8		= word ptr  0Eh

; FUNCTION CHUNK AT 150D SIZE 0000002E BYTES
; FUNCTION CHUNK AT 1551 SIZE 00000006 BYTES
; FUNCTION CHUNK AT 1562 SIZE 0000004D BYTES

push	bp
mov	bp, sp
sub	sp, 2
cmp	byte_1CE9C, 5
jnz	short loc_114D6
mov	al, 3
jmp	short loc_114E2
;     ***************************************************************************
nop
push	word_1CE9E
call	far ptr	525h:84h
add	sp, 2
mov	[bp+var_2], al
mov	bx, current_ruler
mov	ax, word_1CE9E
cmp	[bx+4],	ax
jnz	short loc_114F6
mov	word ptr [bx+4], 0
cmp	byte_1CE9C, 5
jz	short loc_1150D
push	word_1CE9E
push	current_province
call	far ptr	59Dh:6A8h
add	sp, 4
push	word_1CE9E
call	far ptr	59Dh:692h
add	sp, 2
cmp	[bp+var_2], 1
jnz	short loc_11523
push	cs
call	near ptr loc_11498+2
mov	sp, bp
pop	bp
retf
unkfunc_114C4	endp

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
cmp	byte_1CE9C, 5
jnz	short loc_1153C
mov	byte ptr [bp-2], 3
jmp	short loc_1155B
;     ***************************************************************************
nop
push	word_1CE9E
call	far ptr	525h:84h
add	sp, 2
mov	[bp-2],	al
push	word_1CE9E
push	current_province
call	far ptr	59Dh:6A8h
add	sp, 4
push	word_1D478
push	word_1CE9E
call	far ptr	59Dh:22Eh
add	sp, 4
push	word_1CE9E
push	word_1CB6B+1
call	far ptr	59Dh:5CEh
add	sp, 4
cmp	byte ptr [bp-2], 1
jnz	short loc_11585
push	cs
call	near ptr loc_11498+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
push	word_1D478
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_115AA
call	far ptr	loc_1E523+1
mov	[bp-2],	al
jmp	short near ptr loc_115EF+1
;     ***************************************************************************
push	word_1CE9E
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jnz	short near ptr loc_115EB+1
push	word_1CE9E
call	far ptr	60Dh:416h
add	sp, 2
mov	cl, 0Fh
push	cx
mov	[bp-4],	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 23h	; '#'
cmp	al, [bp-4]
jbe	short loc_115E6
mov	bx, word_1CE9E
cmp	word ptr [bx+12h], 3E8h
jb	short near ptr loc_115EB+1
mov	byte ptr [bp-2], 1
jmp	short near ptr loc_115EF+1
;     ***************************************************************************
mov	byte ptr [bp-2], 2
push	word_1CE9E
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_1161A
cmp	byte ptr [bp-2], 1
jnz	short near ptr off_1160B+1
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_1CE9E
call	far ptr	59Dh:0ACh
add	sp, 2
jmp	short loc_1162A
;     ***************************************************************************
cmp	byte ptr [bp-2], 1
jnz	short locret_11626
push	cs
call	loc_11528
jmp	short loc_11606
;     ***************************************************************************
push	cs
call	near ptr loc_114C3+1
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
cmp	word_1D472, 0
jz	short near ptr loc_11655+2
push	cs
call	near ptr loc_11300+2
or	ax, ax
jnz	short near ptr loc_11655+2
mov	ax, 0FFFBh
push	ax
push	word_1D478
call	far ptr	loc_128D6
add	sp, 4
cmp	word_1D472, 1
sbb	ax, ax
and	ax, 2
add	ax, 8
push	ax
push	word_1D478
push	current_ruler
call	far ptr	loc_128EB+1
add	sp, 6
push	word_1CE9E
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_11696+2
sub	ax, ax
push	ax
push	current_ruler
push	word_1D478
call	loc_10914
add	sp, 6
push	cs
call	near ptr loc_11447+1
or	ax, ax
jz	short loc_116C2
push	word_1D478
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short near ptr loc_116BB+1
mov	ax, 5BDCh
push	ax
call	loc_1309B+1
add	sp, 2
sub	al, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_1D478
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_116F7+2
call	far ptr	4B5h:290h
mov	bx, word_1D478
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, word_1CE9E
add	ax, 1Ch
push	ax
mov	ax, 5BE8h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
call	far ptr	57Ch:126h
push	word_1CE9E
call	far ptr	542h:1D8h
add	sp, 2
mov	[bp-2],	ax
push	cs
call	loc_1158A
or	ax, ax
jz	short loc_11764
cmp	word ptr [bp-2], 0
jz	short near ptr loc_1173C+1
mov	ax, 64h	; 'd'
push	ax
push	word_1D478
push	current_ruler
call	far ptr	loc_128EB+1
add	sp, 6
push	word_1D478
call	far ptr	525h:6
add	sp, 2
mov	bx, current_ruler
mov	[bx+9],	al
cmp	word_1D472, 0
jz	short near ptr loc_1175C+1
cmp	word ptr [bp-2], 1
sbb	ax, ax
and	ax, 14h
add	ax, 0FFE7h
push	ax
push	word_1D478
call	far ptr	loc_128D6
add	sp, 4
mov	al, 3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word_1CE9E
call	far ptr	542h:1D8h
add	sp, 2
cmp	ax, 1
sbb	al, al
and	al, 1
add	al, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	cs
call	near ptr loc_11631+1
add	al, 3
mov	byte_1CEA0, al
cmp	al, 3
jb	short loc_117B7
cmp	word_1D472, 0
jnz	short loc_117B7
cmp	byte_1CE9C, 0
jz	short near ptr loc_117A6+1
cmp	byte_1CE9C, 2
jz	short near ptr loc_117A6+1
cmp	byte_1CE9C, 3
jnz	short loc_117B7
mov	ax, 0FFFDh
push	ax
push	word_1D478
call	far ptr	loc_128D6
add	sp, 4
cmp	byte_1CEA0, 5
jb	short loc_117E2
mov	al, byte_1CE9C
sub	ah, ah
dec	ax
dec	ax
jz	short near ptr loc_117CA+2
dec	ax
jz	short near ptr loc_117D5+1
retf
;     ***************************************************************************
nop
mov	bx, current_ruler
or	byte ptr [bx+7], 2
retf
;     ***************************************************************************
nop
push	word_1CEA4
call	unk_1118E
add	sp, 2
retf
;     ***************************************************************************
nop
mov	al, byte_1CE9C
sub	ah, ah
dec	ax
dec	ax
jz	short loc_1182E
dec	ax
dec	ax
jz	short loc_117FE
dec	ax
jz	short loc_11804
dec	ax
jz	short near ptr loc_11815+1
mov	byte_1CEA0, 1
retf
;     ***************************************************************************
nop
mov	ax, 0Ah
jmp	short loc_11822
;     ***************************************************************************
nop
mov	ax, 0FFFBh
push	ax
push	word_1D478
call	far ptr	loc_128D6
add	sp, 4
jmp	short loc_1182E
;     ***************************************************************************
cmp	word_1D472, 1
sbb	ax, ax
and	al, 0FBh
add	ax, 0Ah
push	ax
push	current_ruler
push	word_1D478
jmp	short near ptr loc_11839+1
;     ***************************************************************************
nop
mov	ax, 5
push	ax
push	word_1D478
push	current_ruler
call	far ptr	loc_128EB+1
add	sp, 6
mov	byte_1CEA0, 1
retf
;     ***************************************************************************
mov	al, byte_1CE9C
sub	ah, ah
cmp	ax, 6
ja	short loc_118C9
shl	ax, 1
xchg	ax, bx
jmp	word ptr cs:[bx+55Ah]
;     ***************************************************************************
push	7005h
add	ax, 578h
test	[di], al
nop
add	ax, 59Ch
les	ax, [di]
call	far ptr	loc_10B8C+2
jmp	short loc_118C9
;     ***************************************************************************
nop
call	far ptr	loc_10B40+2
jmp	short loc_118C9
;     ***************************************************************************
nop
call	far ptr	loc_10AB4
mov	byte_1CEA0, 0
retf
;     ***************************************************************************
nop
call	far ptr	loc_109F3+1
mov	byte_1CEA0, 0
retf
;     ***************************************************************************
nop
call	loc_2056D+1
mov	byte_1CEA0, 0
retf
;     ***************************************************************************
nop
push	word_1D478
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short near ptr loc_118B7+1
call	loc_1E456+4
mov	byte_1CEA0, 0
retf
;     ***************************************************************************
nop
call	loc_1F25C+4
mov	byte_1CEA0, 0
retf
;     ***************************************************************************
nop
call	far ptr	loc_10889+1
mov	byte_1CEA0, 0
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


s_118D0		proc far		; DATA XREF: game_messenger_travel_s_11B56+45  t		 /* DOS offset ---> 18F9:0 */

; FUNCTION CHUNK AT 18B2 SIZE 00000008 BYTES
; FUNCTION CHUNK AT 18C5 SIZE 0000002D BYTES

cmp	byte_1CEA0, 0
jnz	short loc_118DA
mov	al, 1
retf
s_118D0		endp		 /* DOS offset ---> 18F9:0 */

;     ***************************************************************************
mov	al, byte_1CE9C
sub	ah, ah
or	ax, ax
jl	short near ptr loc_11912+1
sub	ax, 5
jle	short near ptr loc_118EB+1
dec	ax
jz	short loc_118FA
retf
;     ***************************************************************************
push	cs
call	loc_11366
cmp	ax, 1
sbb	al, al
and	al, 1
add	al, 2
retf
;     ***************************************************************************
cmp	word_1D472, 0
jz	short near ptr loc_1190E+3
mov	ax, 0FFFDh
push	ax
push	current_ruler
call	far ptr	loc_128D6
add	sp, 4
mov	al, 2
retf
;     ***************************************************************************
cmp	word_1D472, 0
jz	short near ptr loc_1192A+1
mov	ax, 0FFFDh
push	ax
push	current_ruler
call	far ptr	loc_128D6
add	sp, 4
cmp	word_1D472, 1
sbb	ax, ax
and	al, 0FBh
add	ax, 0Ah
push	ax
push	current_ruler
push	word_1D478
call	far ptr	loc_128EB+1
add	sp, 6
retf
;     ***************************************************************************
nop
cmp	byte_1CE9C, 0Bh
jz	short near ptr loc_11988+3
mov	al, 14h
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bx, word_1CE9E
mov	cx, ax
mov	al, [bx+4]
sub	ah, ah
mov	dl, [bx+5]
sub	dh, dh
add	ax, dx
mov	bx, 0FFFDh
cwd
idiv	bx
add	cl, al
add	cl, 64h	; 'd'
push	cx
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_11988+3
call	loc_130BD+1
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1198C		proc far		 /* DOS offset ---> 1904:C */

var_2		= word ptr -2
arg_6		= word ptr  0Ch
arg_A		= word ptr  0Eh
arg_C		= word ptr  10h

; FUNCTION CHUNK AT 19D4 SIZE 000000BD BYTES

push	bp
mov	bp, sp
sub	sp, 2
mov	[bp+var_2], 1
mov	al, byte_1CE9C
sub	ah, ah
sub	ax, 7
cmp	ax, 5
ja	short near ptr loc_119B6+2
shl	ax, 1
xchg	ax, bx
jmp	word ptr cs:[bx+6ACh]
;     ***************************************************************************
rol	byte ptr loc_106DB+1, 2
pop	es
push	ss
pop	es
db	66h
pop	es
scasb
pop	es
mov	[bp+var_2], 0
jmp	near ptr loc_11B33+2
;     ***************************************************************************
push	cs
call	loc_1194A
cmp	byte_1CEA0, 0
jnz	short loc_119D4
call	far ptr	loc_10864
jmp	near ptr loc_11B33+2
;     ***************************************************************************
nop
push	cs
call	loc_11914
jmp	near ptr loc_11B33+2
;     ***************************************************************************
nop
cmp	byte_1CEA0, 0
jnz	short loc_119F2
push	cs
call	loc_1194A
mov	bx, word_1CE9A
or	byte ptr [bx+2], 4
jmp	near ptr loc_11B33+2
;     ***************************************************************************
push	cs
call	loc_11914
mov	bx, word_1CE9A
mov	byte ptr [bx+0Dh], 0FFh
jmp	near ptr loc_11B33+2
;     ***************************************************************************
nop
push	cs
call	loc_1194A
cmp	byte_1CEA0, 0
jnz	short loc_119D4
call	far ptr	loc_10834+2
jmp	near ptr loc_11B33+2
;     ***************************************************************************
nop
push	cs
call	loc_1194A
cmp	byte_1CEA0, 0
jz	short loc_11A24
jmp	near ptr loc_11B33+2
;     ***************************************************************************
push	word_1CE9A
call	far ptr	525h:84h
add	sp, 2
dec	al
jnz	short near ptr loc_11A39+1
mov	ax, 0Ah
jmp	short near ptr loc_11A3B+2
;     ***************************************************************************
nop
mov	ax, 5
push	ax
push	current_ruler
push	word_1D478
call	far ptr	loc_128EB+1
add	sp, 6
push	word_1CE9E
push	word_1CE9A
push	word_1CEA4
call	far ptr	loc_10CCE
add	sp, 6
jmp	near ptr loc_11B33+2
;     ***************************************************************************
nop
cmp	byte_1CEA0, 0
jnz	short near ptr loc_11A75+1
call	far ptr	loc_10810+2
jmp	near ptr loc_11B33+2
;     ***************************************************************************
nop
push	cs
call	loc_11914
push	word_1D478
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short loc_11A8D
jmp	near ptr loc_11B33+2
;     ***************************************************************************
call	far ptr	4B5h:290h
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 5C67h
push	ax
call	far ptr	3EFh:6E8h

loc_21AA2:		 /* DOS offset ---> 1916:2 */
add	sp, 4
call	far ptr	57Ch:15Eh
jmp	near ptr loc_11B33+2
;     ***************************************************************************
nop
push	word_1CEA4
call	far ptr	525h:4Ah
add	sp, 2
push	ax
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short near ptr loc_11B26+1
push	current_province
call	far ptr	542h:0A8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_11B26+1
push	word_1CEA4
call	far ptr	542h:0A8h
add	sp, 2
or	ax, ax
jnz	short near ptr loc_11B26+1
call	far ptr	4B5h:290h
push	word_1CA8A
push	word_1CA88
push	word_1CA96
push	current_province
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, word_1CE9E
add	ax, 1Ch
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 5C0Fh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Eh
call	far ptr	57Ch:15Eh
push	word_1CEA4
call	unk_1118E
mov	byte_1CEA0, 0
mov	ax, [bp+var_2]
mov	sp, bp
pop	bp
retf
s_1198C		endp		 /* DOS offset ---> 1904:C */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_11B3C		proc far		; DATA XREF: game_messenger_travel_s_11B56+6B  t		 /* DOS offset ---> 191F:C */

arg_0		= byte ptr  6
arg_6		= word ptr  0Ch

; FUNCTION CHUNK AT 1AFF SIZE 00000054 BYTES
; FUNCTION CHUNK AT 1B54 SIZE 00000019 BYTES

push	bp
mov	bp, sp
cmp	byte_1CE9C, 5
jnz	short loc_11B54
cmp	[bp+arg_0], 5
jb	short loc_11B54
sub	ax, ax
mov	word_1CAE5, ax
mov	word_1CB7E, ax
pop	bp
retf
s_11B3C		endp		 /* DOS offset ---> 191F:C */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_messenger_travel_s_11B56 proc far	; DATA XREF: game_messenger_travel+E5  t

var_2		= byte ptr -2
arg_8		= word ptr  0Ch

; FUNCTION CHUNK AT 1B6D SIZE 0000007A BYTES

push	bp
mov	bp, sp
sub	sp, 2
mov	ax, word_1CEA4
mov	word_1CB6B+1, ax
mov	ax, word_1CAE8
mov	word_1D478, ax
push	ax
push	current_ruler
call	far ptr	542h:114h
add	sp, 4
mov	word_1D472, ax
push	cs
call	s_1198C		; *
or	ax, ax
jnz	short loc_11BC4
push	word_1D478
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short near ptr loc_11B99+1
call	far ptr	loc_1E67E
mov	[bp+var_2], al
jmp	short loc_11BAF
;     ***************************************************************************
push	cs
call	s_118D0		; *
mov	[bp+var_2], al
call	far ptr	542h:2
or	ax, ax
jz	short loc_11BAF
call	far ptr	loc_1E67E
mov	bl, [bp+var_2]
sub	bh, bh
shl	bx, 1
shl	bx, 1
call	dword ptr [bx+5C92h]
mov	al, byte_1CEA0
push	ax
push	cs
call	s_11B3C		; *
mov	sp, bp
pop	bp
retf
game_messenger_travel_s_11B56 endp


;     *************** S U B	R O U T	I N E     ***************************************


s_11BC8		proc far		 /* DOS offset ---> 1928:8 */

; FUNCTION CHUNK AT 1BE7 SIZE 00000025 BYTES
; FUNCTION CHUNK AT 1C17 SIZE 00000035 BYTES

push	cs
call	near ptr loc_11631+1
add	al, 3
mov	byte_1CA86, al
cmp	al, 5
jb	short loc_11C22
mov	al, byte_1CE9C
sub	ah, ah
cmp	ax, 0Ah
jz	short near ptr loc_11BF2+2
ja	short loc_11C22
sub	al, 2
jz	short near ptr loc_11BE9+1
dec	al
jz	short near ptr loc_11C14+2
retf
;     ***************************************************************************
mov	bx, current_ruler
or	byte ptr [bx+7], 2
retf
;     ***************************************************************************
nop
mov	al, byte ptr loc_1CBA2
sub	ah, ah
dec	ax
jz	short near ptr loc_11BFF+1
dec	ax
jmp	short loc_11BE7
;     ***************************************************************************
nop
mov	al, 64h	; 'd'
push	ax
mov	al, 1
push	ax
mov	ax, word_1CB6B+1
add	ax, 19h
push	ax
call	far ptr	49Ch:48h
add	sp, 6
retf
;     ***************************************************************************
push	word_1CB6B+1
call	unk_1118E
add	sp, 2
retf
s_11BC8		endp		 /* DOS offset ---> 1928:8 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_11C24		proc far		 /* DOS offset ---> 192E:4 */

arg_2		= byte ptr  6
arg_8		= word ptr  0Ch

; FUNCTION CHUNK AT 1C57 SIZE 0000002F BYTES

push	bp
mov	bp, sp
mov	al, [bp+arg_2]
sub	ah, ah
dec	ax
jz	short near ptr loc_11C37+1
dec	ax
jz	short near ptr loc_11C3F+1
push	cs
call	near ptr loc_11BC6+2
jmp	short near ptr loc_11C74+2
;     ***************************************************************************
mov	byte_1CA86, 1
jmp	short near ptr loc_11C74+2
;     ***************************************************************************
nop
cmp	word_1D472, 0
jz	short loc_11C5E
push	cs
call	near ptr loc_11300+2
or	ax, ax
jnz	short loc_11C5E
mov	ax, 0FFFDh
push	ax
push	word_1D478
call	far ptr	loc_128D6
mov	sp, bp
mov	ax, 5
push	ax
push	word_1D478
push	current_ruler
call	far ptr	loc_128EB+1
mov	sp, bp
mov	byte_1CA86, 2
mov	al, byte_1CA86
push	ax
push	cs
call	loc_11B3C
mov	sp, bp
pop	bp
retf
s_11C24		endp		 /* DOS offset ---> 192E:4 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_messenger_travel_s_11C82 proc far	; DATA XREF: game_messenger_travel+BD  t

var_2		= byte ptr -2
arg_8		= word ptr  0Ch

; FUNCTION CHUNK AT 1C91 SIZE 0000002F BYTES
; FUNCTION CHUNK AT 1CCB SIZE 00000030 BYTES
; FUNCTION CHUNK AT 1D06 SIZE 00000035 BYTES

push	bp
mov	bp, sp
sub	sp, 2
push	word_1D478
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_11CA2
call	far ptr	loc_1E7BB+3
mov	[bp+var_2], al
jmp	short loc_11CE2
;     ***************************************************************************
push	cs
call	loc_113F2
or	ax, ax
jz	short near ptr loc_11CAE+2
mov	[bp+var_2], 0FFh
jmp	short near ptr loc_11CD3+1
;     ***************************************************************************
push	cs
call	near ptr loc_11300+2
or	ax, ax
jnz	short near ptr loc_11CC3+1
cmp	word_1D472, ax
jz	short near ptr loc_11CC3+1
mov	[bp+var_2], 1
jmp	short near ptr loc_11CD3+1
;     ***************************************************************************
push	cs
call	loc_11366
cmp	ax, 1
sbb	al, al
and	al, 1
add	al, 2
mov	[bp+var_2], al
call	far ptr	542h:2
or	ax, ax
jz	short loc_11CE2
call	far ptr	loc_1E7BB+3
cmp	[bp+var_2], 0FFh
jnz	short near ptr loc_11D03+1
cmp	word_1D472, 0
jz	short loc_11D0C
mov	ax, 3
push	ax
push	word_1D478
call	s_128D6		; *
add	sp, 4
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bp+var_2]
push	ax
push	cs
call	s_11C24		; *
mov	sp, bp
pop	bp
retf
game_messenger_travel_s_11C82 endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_11D10		proc far		; DATA XREF: game_messenger_travel_s_11DBE+73  t		 /* DOS offset ---> 193D:0 */

arg_2		= byte ptr  6
arg_8		= word ptr  0Ch

; FUNCTION CHUNK AT 1D3E SIZE 00000018 BYTES
; FUNCTION CHUNK AT 1D7F SIZE 00000033 BYTES
; FUNCTION CHUNK AT 1DBA SIZE 0000001B BYTES

push	bp
mov	bp, sp
mov	al, [bp+arg_2]
sub	ah, ah
dec	ax
jz	short loc_11D3E
dec	ax
jz	short loc_11D8E
push	cs
call	near ptr loc_11631+1
add	al, 3
mov	byte_1CA86, al
cmp	al, 5
jnb	short near ptr loc_11D2D+1
jmp	loc_11DBA
;     ***************************************************************************
push	word_1CB6B+1
call	unk_1118E
mov	sp, bp
mov	sp, bp
pop	bp
retf
s_11D10		endp		 /* DOS offset ---> 193D:0 */

;     ***************************************************************************
nop
push	word_1CB6B+1
call	unk_1118E
mov	sp, bp
cmp	word_1D472, 0
jz	short loc_11D72
mov	ax, 0Ah
push	ax
push	word_1D478
push	current_ruler
call	far ptr	loc_128EB+1
mov	sp, bp
mov	ax, 0FFFDh
push	ax
push	word_1D478
call	far ptr	loc_128D6
jmp	short loc_11D83
;     ***************************************************************************
mov	ax, 5
push	ax
push	word_1D478
push	current_ruler
call	far ptr	loc_128EB+1
mov	sp, bp
mov	byte_1CA86, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
cmp	word_1D472, 0
jz	short near ptr loc_11DA3+1
mov	ax, 3
push	ax
push	word_1D478
call	far ptr	loc_128D6
mov	sp, bp
mov	ax, 0FFFDh
push	ax
push	word_1D478
push	current_ruler
call	far ptr	loc_128EB+1
mov	byte_1CA86, 0
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_messenger_travel_s_11DBE proc far	; DATA XREF: game_messenger_travel+B6  t

var_2		= byte ptr -2
arg_8		= word ptr  0Ch

; FUNCTION CHUNK AT 1E02 SIZE 0000006F BYTES
; FUNCTION CHUNK AT 1EA4 SIZE 00000008 BYTES

push	bp
mov	bp, sp
sub	sp, 2
push	word_1CB6B+1
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_11E3C
push	current_province
push	word_1CB6B+1
call	far ptr	542h:192h
add	sp, 4
or	ax, ax
jnz	short loc_11E3C
push	word_1D478
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_11E02
call	far ptr	loc_1E8C2
mov	[bp+var_2], al
jmp	short loc_11E2C
;     ***************************************************************************
push	cs
call	s_113F2		; *
or	ax, ax
jz	short loc_11E0E
mov	al, 2
jmp	short loc_11E1B
;     ***************************************************************************
push	cs
call	s_11366		; *
cmp	ax, 1
sbb	al, al
and	al, 2
add	al, 1
mov	[bp+var_2], al
call	far ptr	542h:2
or	ax, ax
jz	short loc_11E2C
call	far ptr	loc_1E8C2
mov	al, [bp+var_2]
push	ax
push	cs
call	s_11D10		; *
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word_1CB6B+1
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_11E54
push	cs
call	s_11448		; *
or	ax, ax
jnz	short loc_11E59
mov	byte_1CA86, 2
mov	sp, bp
pop	bp
retf
game_messenger_travel_s_11DBE endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_11E5E		proc far		; DATA XREF: game_messenger_travel_s_11E74+58  t		 /* DOS offset ---> 1951:E */

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

push	bp
mov	bp, sp
mov	ax, [bp+arg_2]
sub	ax, [bp+arg_0]
imul	[bp+arg_4]
cwd
idiv	word_1CE96
add	ax, [bp+arg_0]
pop	bp
retf
s_11E5E		endp		 /* DOS offset ---> 1951:E */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_messenger_travel_s_11E74 proc near	; DATA XREF: game_messenger_travel+72  t
; game_messenger_travel+12A  t ...

var_8		= word ptr -8
var_4		= word ptr -4
var_2		= byte ptr -2
arg_2		= word ptr  6
arg_4		= word ptr  8

; FUNCTION CHUNK AT 1EEC SIZE 00000005 BYTES

push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	bx, [bp+arg_4]
mov	si, [bp+arg_2]
mov	ax, [si+1Ch]
cmp	[bx+1Ch], ax
jnb	short near ptr unk_11E8E
sub	al, al
jmp	short near ptr unk_11E90
;     ***************************************************************************
nop
mov	al, 1
mov	[bp+var_2], al
mov	[bp+var_8], 0
cmp	word_1CE96, 0
jle	short loc_11EEC
push	[bp+var_8]
mov	bx, [bp+arg_4]
push	word ptr [bx+1Ch]
mov	si, [bp+arg_2]
push	word ptr [si+1Ch]
push	cs
call	s_11E5E		; *
add	sp, 6
sub	ax, 4
mov	[bp+var_4], ax
mov	al, [bp+var_2]
push	ax
push	[bp+var_8]
mov	bx, [bp+arg_4]
push	word ptr [bx+1Eh]
push	word ptr [si+1Eh]
push	cs
call	s_11E5E		; *
;     ***************************************************************************
db  83h	;   *
db 0C4h	;   *
db    6
db  48h	; H
db 0D1h	;   *
db 0F8h	;   *
db  50h	; P
db 0FFh
db  76h	; v
db 0FCh	;   *
db  9Ah	;   *
db    2
db    0
db 0F9h	;   *
db  12h
db  83h	;   *
db 0C4h	;   *
db    6
db 0FFh
db  46h	; F
db 0F8h	;   *
db 0A1h	;   *
db  96h	;   *
db 0CEh	;   *
db  39h	; 9
db  46h	; F
db 0F8h	;   *
db  7Ch	; |
db 0B3h	;   *
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_messenger_travel_s_11E74 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_11EF2		proc far		; DATA XREF: s_11F6A+51  t		 /* DOS offset ---> 195B:2 */

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  6

push	bp
mov	bp, sp
sub	sp, 4
mov	ax, 1F4h
cwd
push	dx
push	ax
push	word_1CA8A
push	word_1CA88
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
push	ax
call	far ptr	0:1B0h
add	sp, 2
push	word_1CA96
mov	[bp+var_4], ax
call	far ptr	0:1B0h
add	sp, 2
add	al, byte ptr [bp+var_4]
mov	cl, game_difficulty
mov	dx, cx
shl	cl, 1
shl	cl, 1
add	cl, dl
shl	cl, 1
add	al, cl
mov	byte ptr [bp+var_2], al
mov	bx, word_1CE9E
mov	al, [bx+4]
sub	ah, ah
mov	cl, [bp+arg_0]
sub	ch, ch
add	ax, cx
cwd
sub	ax, dx
sar	ax, 1
push	ax
lea	ax, [bp+var_2]
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	al, 5
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
s_11EF2		endp		 /* DOS offset ---> 195B:2 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_11F6A		proc far		; DATA XREF: game_messenger_travel_s_1203E+DF  t		 /* DOS offset ---> 1962:A */

var_4		= word ptr -4
var_2		= byte ptr -2
arg_2		= word ptr  6
arg_6		= byte ptr  0Ah

; FUNCTION CHUNK AT 1F8A SIZE 00000014 BYTES
; FUNCTION CHUNK AT 1FC4 SIZE 00000003 BYTES

push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	ax, [bp+arg_2]
cmp	word_1CEA4, ax
jnz	short loc_11F8A
mov	bx, word_1CE9E
mov	al, [bx+4]
shr	al, 1
sub	al, 50
neg	al
jmp	short near ptr unk_11FC1
;     ***************************************************************************
nop
push	current_ruler
call	far ptr	525h:6
add	sp, 2
sub	ah, ah
mov	si, ax
push	[bp+arg_2]
call	far ptr	525h:4Ah
add	sp, 2
mov	bx, ax
mov	al, [bx+si+0Eh]
mov	[bp+var_2], al
cmp	byte_1CE9C, 0Ch
jnz	short loc_11FC4
mov	al, 105
sub	al, [bp+var_2]
push	ax
push	cs
call	s_11EF2		; *
add	sp, 2
push	ax
jmp	short near ptr loc_12014+3
;     ***************************************************************************
mov	al, game_difficulty
mov	cx, ax
shl	al, 1
add	al, cl
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bx, [bp+arg_2]
mov	cl, [bx+1Ah]
sub	ch, ch
push	cx
mov	cx, 0Ch
push	cx
mov	[bp+var_4], ax
call	far ptr	561h:18Ah
add	sp, 4
add	al, 0Ah
mov	cx, ax
shl	al, 1
add	al, cl
mov	cx, ax
mov	al, [bp+var_2]
sub	ah, ah
mov	bx, word_1CE9E
mov	dl, [bx+4]
sub	dh, dh
sub	ax, dx
sub	ax, 100
mov	bx, 5
cwd
idiv	bx
add	cl, al
add	cl, byte ptr [bp+var_4]
push	cx
call	far ptr	57Ch:0DCh
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
s_11F6A		endp		 /* DOS offset ---> 1962:A */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_12024		proc far		; DATA XREF: game_messenger_travel_s_1203E+F7  t		 /* DOS offset ---> 196E:4 */

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
mov	al, [bx+17h]
push	ax
push	cs
call	s_11EF2		; *
mov	sp, bp
push	ax
call	far ptr	57Ch:0DCh
mov	sp, bp
pop	bp
retf
s_12024		endp		 /* DOS offset ---> 196E:4 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_messenger_travel_s_1203E proc far	; DATA XREF: game_messenger_travel+7C  t

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_8		= word ptr  0Ch

; FUNCTION CHUNK AT 2011 SIZE 0000024B BYTES

push	bp
mov	bp, sp
sub	sp, 2
mov	bx, word_1CE9E
test	byte ptr [bx+3], 40h
jz	short loc_12051
jmp	loc_1213C
;     ***************************************************************************
push	[bp+arg_0]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_120B6
mov	ax, word_1CEA4
cmp	[bp+arg_0], ax
jz	short loc_1206B
jmp	loc_1213C
;     ***************************************************************************
push	current_ruler
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1207C+2
jmp	loc_1213C
;     ***************************************************************************
mov	bx, word_1CE9E
mov	al, [bx+5]
shr	al, 1
sub	al, 50h	; 'P'
neg	al
mov	byte ptr [bp+var_2], al
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
push	ax
lea	ax, [bp+var_2]
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	al, byte ptr [bp+var_2]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	[bp+arg_0]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_12122
push	current_province
push	[bp+arg_0]
call	far ptr	542h:192h
add	sp, 4
or	ax, ax
jnz	short loc_12122
push	word_1CEA4
push	[bp+arg_0]
call	far ptr	542h:192h
add	sp, 4
or	ax, ax
jz	short loc_120F2
cmp	byte_1CE9C, 6
jbe	short loc_1213C
mov	ax, word_1CEA4
cmp	[bp+arg_0], ax
jnz	short near ptr loc_12118+1
cmp	byte_1CE9C, 7
jnb	short near ptr loc_12107+1
cmp	byte_1CE9C, 0Ah
ja	short loc_1213C
mov	bx, ax
push	word ptr [bx+2]
call	far ptr	525h:158h
add	sp, 2
dec	al
jz	short loc_1213C
push	[bp+arg_0]
push	cs
call	s_11F6A		; *
jmp	short loc_120AF
;     ***************************************************************************
cmp	byte_1CE9C, 0Ch
jnz	short loc_1213C
mov	ax, word_1CEA4
cmp	[bp+arg_0], ax
jz	short loc_1213C
push	[bp+arg_0]
push	cs
call	s_12024		; *
jmp	loc_120AF
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_messenger_travel_s_1203E endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_12142		proc far		; DATA XREF: game_messenger_travel_s_122B2+14  t		 /* DOS offset ---> 1980:2 */

var_68		= word ptr -68h
var_65		= word ptr -65h
var_1E		= word ptr -1Eh
var_1C		= byte ptr -1Ch
var_1A		= byte ptr -1Ah
var_18		= word ptr -18h
var_16		= byte ptr -16h
var_14		= byte ptr -14h
var_12		= byte ptr -12h
var_E		= byte ptr -0Eh
var_C		= word ptr -0Ch
var_A		= byte ptr -0Ah
var_8		= word ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

; FUNCTION CHUNK AT 227B SIZE 00000039 BYTES

push	bp
mov	bp, sp
sub	sp, 68h
push	si
mov	al, 0FAh ; '  *'
push	ax
mov	cx, 9Ch	; '  *'
push	cx
mov	cx, 0CBCEh
push	cx
call	far ptr	561h:0A0h
add	sp, 6
mov	bx, [bp+arg_0]
mov	al, [bx+20h]
mov	[bp+var_A], al
mov	cl, [bx+21h]
mov	[bp+var_E], cl
mov	bl, al
sub	bh, bh
sub	ch, ch
mov	si, cx
mov	cl, 3
shl	si, cl
mov	byte ptr [bx+si-3432h],	0FAh ; '  *'
lea	ax, [bp+var_65]
mov	[bp+var_C], ax
mov	bx, [bp+arg_2]
mov	bl, [bx+21h]
shl	bl, cl
mov	si, [bp+arg_2]
add	bl, [si+20h]
lea	si, [bp-66h]
mov	[bp+var_68], si
mov	[si], bl
sub	bh, bh
mov	[bx-3432h], bh
mov	bx, [bp+var_68]
mov	al, [bx]
mov	cx, ax
and	al, 7
mov	[bp+var_12], al
mov	al, 3
mov	dx, cx
xchg	cl, al
shr	al, cl
mov	[bp+var_14], al
mov	bl, dl
sub	bh, bh
mov	al, [bx-3432h]
mov	[bp+var_1C], al
mov	[bp+var_16], bh
mov	al, [bp+var_12]
mov	byte ptr [bp+var_18], al
mov	al, [bp+var_14]
mov	byte ptr [bp+var_1E], al
mov	al, [bp+var_16]
push	ax
lea	ax, [bp+var_1E]
push	ax
lea	ax, [bp+var_18]
push	ax
call	far ptr	59Dh:2A8h
add	sp, 6
cmp	al, 0FFh
jnz	short near ptr loc_121E9+1
jmp	loc_1227B
;     ***************************************************************************
cmp	[bp+arg_4], 0
jz	short loc_12203
mov	al, [bp+var_A]
cmp	byte ptr [bp+var_18], al
jnz	short loc_12203
mov	al, [bp+var_E]
cmp	byte ptr [bp+var_1E], al
jnz	short loc_12203
jmp	loc_122A8
;     ***************************************************************************
mov	cl, 3
mov	al, byte ptr [bp+var_1E]
shl	al, cl
add	al, byte ptr [bp+var_18]
mov	[bp+var_1A], al
sub	ah, ah
add	ax, 0CBCEh
mov	[bp+var_2], ax
mov	bx, ax
cmp	byte ptr [bx], 0FAh ; '  *'
jnz	short loc_1227B
mov	al, [bp+var_1C]
inc	al
mov	[bx], al
mov	ax, [bp+var_C]
mov	[bp+var_8], ax
dec	ax
mov	[bp+var_4], ax
lea	ax, [bp-66h]
cmp	[bp+var_4], ax
jnb	short loc_1223E
lea	ax, [bp-1Fh]
mov	[bp+var_4], ax
mov	bx, [bp+var_4]
mov	al, [bx]
mov	si, [bp+var_8]
mov	[si], al
mov	bl, [bx]
sub	bh, bh
mov	si, [bp+var_2]
mov	al, [si]
cmp	[bx-3432h], al
jbe	short near ptr loc_1225F+3
mov	ax, [bp+var_4]
dec	[bp+var_4]
mov	[bp+var_8], ax
jmp	short loc_12230
;     ***************************************************************************
mov	al, [bp+var_1A]
mov	bx, [bp+var_8]
mov	[bx], al
inc	[bp+var_C]
lea	ax, [bp+var_1E]
cmp	[bp+var_C], ax
jb	short loc_1227B
lea	ax, [bp-66h]
mov	[bp+var_C], ax
inc	[bp+var_16]
cmp	[bp+var_16], 6
jnb	short loc_12287
jmp	loc_121C3
;     ***************************************************************************
inc	[bp+var_68]
lea	ax, [bp+var_1E]
cmp	[bp+var_68], ax
jb	short near ptr loc_12293+5
lea	ax, [bp-66h]
mov	[bp+var_68], ax
mov	ax, [bp+var_68]
cmp	[bp+var_C], ax
jz	short near ptr loc_122A1+2
jmp	near ptr loc_1219C+2
;     ***************************************************************************
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	far ptr	60Dh:2E2h
pop	si
mov	sp, bp
pop	bp
retf
s_12142		endp		 /* DOS offset ---> 1980:2 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_messenger_travel_s_122B2 proc far	; DATA XREF: game_messenger_travel+2E  t

var_10		= byte ptr -10h
var_E		= byte ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= byte ptr -8
var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= word ptr  6

; FUNCTION CHUNK AT 22E9 SIZE 000000B2 BYTES

push	bp
mov	bp, sp
sub	sp, 10h
push	si
mov	ax, 1
push	ax
push	word_1CEA4
push	current_province
push	cs
call	s_12142		; *
add	sp, 6
mov	bx, current_province
mov	al, [bx+20h]
mov	byte ptr [bp+var_2], al
mov	al, [bx+21h]
mov	byte ptr [bp+var_4], al
mov	si, [bp+arg_2]
add	[bp+arg_2], 2
mov	[si], bx
mov	[bp+var_E], 0FAh ; '  *'
call	far ptr	525h:17Eh
mov	[bp+var_10], 0
mov	al, byte ptr [bp+var_2]
mov	byte ptr [bp+var_A], al
mov	al, byte ptr [bp+var_4]
mov	byte ptr [bp+var_C], al
mov	bl, [bp+var_10]
sub	bh, bh
mov	al, [bx-3572h]
push	ax
lea	ax, [bp+var_C]
push	ax
lea	ax, [bp+var_A]
push	ax
call	far ptr	59Dh:2A8h
add	sp, 6
cmp	al, 0FFh
jz	short near ptr loc_12344+1
mov	cl, 3
mov	si, [bp+var_C]
and	si, 0FFh
shl	si, cl
mov	bl, byte ptr [bp+var_A]
sub	bh, bh
mov	al, [bx+si-3432h]
mov	[bp+var_6], al
cmp	al, [bp+var_E]
jnb	short near ptr loc_12344+1
mov	[bp+var_E], al
mov	bl, [bp+var_10]
mov	al, [bx-3572h]
mov	[bp+var_8], al
inc	[bp+var_10]
cmp	[bp+var_10], 6
jb	short near ptr loc_122F0+2
mov	al, [bp+var_8]
push	ax
lea	ax, [bp+var_4]
push	ax
lea	cx, [bp+var_2]
push	cx
call	far ptr	59Dh:2A8h
add	sp, 6
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	bx, [bp+arg_2]
add	[bp+arg_2], 2
mov	[bx], ax
mov	cl, 3
mov	si, [bp+var_4]

loc_22379:				; CODE XREF: dseg:1C08C  P		 /* DOS offset ---> 19A3:9 */
and	si, 0FFh
shl	si, cl
mov	bl, byte ptr [bp+var_2]
sub	bh, bh
mov	al, [bx+si-3432h]
mov	[bp+var_E], al
or	al, al
jz	short near ptr loc_12391+1
jmp	loc_122E9
;     ***************************************************************************
pop	si
mov	sp, bp
pop	bp
retf
game_messenger_travel_s_122B2 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_messenger_travel proc far		; DATA XREF: s_127A6+43  t
; game_send_pre_result+61  t ...

var_5A		= word ptr -5Ah
var_58		= word ptr -58h
var_56		= word ptr -56h
var_54		= word ptr -54h
var_52		= word ptr -52h
var_50		= word ptr -50h
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_6		= word ptr  0Ch

; FUNCTION CHUNK AT 226D SIZE 0000000E BYTES
; FUNCTION CHUNK AT 23D9 SIZE 000000DF BYTES

push	bp
mov	bp, sp
sub	sp, 5Ah
push	si
mov	al, byte ptr messenger_speed_value
sub	ah, ah
mov	word_1CE96, ax
mov	word_1CC6A, 0
push	word_1CEA4
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
mov	word_1CAE8, ax
mov	byte_1CA86, 0
lea	ax, [bp+var_52]
push	ax
push	cs
call	game_messenger_travel_s_122B2 ;	*
add	sp, 2
cmp	byte_1CE9C, 5
jnz	short loc_123D9
mov	ax, [bp+var_50]
mov	word_1CB7E, ax
lea	ax, [bp+var_52]
mov	[bp+var_54], ax
mov	bx, [bp+var_54]
add	[bp+var_54], 2
mov	ax, [bx]
mov	[bp+var_56], ax
mov	bx, [bp+var_54]
mov	ax, [bx]
mov	[bp+var_58], ax
cmp	byte_1CA86, 1
jb	short near ptr loc_123FD+1
mov	al, 1
jmp	short loc_12400
;     ***************************************************************************
sub	al, al
mov	byte ptr word_1CB6B, al
push	[bp+var_58]
push	[bp+var_56]
push	cs
call	game_messenger_travel_s_11E74 ;	*
add	sp, 4
push	[bp+var_58]
push	cs
call	game_messenger_travel_s_1203E ;	*
add	sp, 2
or	ax, ax
jz	short loc_12469
mov	ax, [bp+var_58]
mov	word_1CEAA, ax
mov	word_1CB6B+1, ax
push	ax
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
mov	word_1CAEC, ax
mov	word_1D478, ax
push	ax
push	current_ruler
call	far ptr	542h:114h
add	sp, 4
mov	word_1D472, ax
cmp	byte_1CE9C, 0Ch
jnz	short loc_12454
push	cs
call	game_messenger_travel_s_11DBE ;	*
jmp	short loc_12458
;     ***************************************************************************
nop
push	cs
call	game_messenger_travel_s_11C82 ;	*
cmp	byte_1CA86, 5
jb	short loc_12462
jmp	near ptr loc_12511+4
;     ***************************************************************************
cmp	byte_1CA86, 2
jnb	short loc_12475
mov	ax, [bp+var_58]
cmp	word_1CEA4, ax
jz	short loc_12475
jmp	near ptr loc_123DE+1
;     ***************************************************************************
cmp	byte_1CA86, 1
ja	short near ptr loc_12487+3
push	cs
call	game_messenger_travel_s_11B56 ;	*
cmp	byte_1CEA0, 4
jbe	short near ptr loc_12487+3
jmp	near ptr loc_12511+4
;     ***************************************************************************
cmp	byte_1CE9C, 5
jnz	short near ptr loc_12492+2
jmp	near ptr loc_12511+4
;     ***************************************************************************
mov	bx, [bp+var_54]
sub	[bp+var_54], 2
mov	ax, [bx]
mov	[bp+var_56], ax
mov	bx, [bp+var_54]
mov	ax, [bx]
mov	[bp+var_58], ax
cmp	byte_1CA86, 1
jb	short loc_124B6
mov	al, 1
jmp	short near ptr off_124B8
;     ***************************************************************************
nop
nop
nop
sub	al, al
mov	byte ptr word_1CB6B, al
push	[bp+var_58]
push	[bp+var_56]
push	cs
call	game_messenger_travel_s_11E74 ;	*
add	sp, 4
mov	ax, current_province
cmp	[bp+var_58], ax
jnz	short near ptr loc_12492+2
cmp	word_1CE96, 0
jle	short near ptr loc_12511+4
cmp	byte_1CA86, 1
jb	short near ptr loc_124E1+1
mov	al, 1
jmp	short near ptr loc_124E3+1
;     ***************************************************************************
sub	al, al
mov	byte ptr word_1CB6B, al
mov	bx, [bp+var_56]
mov	si, [bp+var_58]
mov	ax, [si+1Ch]
mov	[bp+var_5A], ax
cmp	[bx+1Ch], ax
jbe	short near ptr loc_124F9+3
sub	al, al
jmp	short near ptr loc_124F9+5
;     ***************************************************************************
mov	al, 1
push	ax
mov	bx, si
mov	ax, [bx+1Eh]
cwd
sub	ax, dx
sar	ax, 1
push	ax
push	[bp+var_5A]
call	s_12F92		; *
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
game_messenger_travel endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1251A		proc far		; DATA XREF: s_1259E+21  t Q_1F3EC+55  t		 /* DOS offset ---> 19BD:A */

var_2		= word ptr -2
arg_2		= word ptr  6
arg_4		= word ptr  8

; FUNCTION CHUNK AT 2507 SIZE 00000139 BYTES

push	bp
mov	bp, sp
sub	sp, 4
push	[bp+arg_2]
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
push	[bp+arg_2]
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jnz	short near ptr loc_12596+2
push	[bp+arg_2]
call	far ptr	525h:64h ; game_data_get_province_number
add	sp, 2
push	ax
push	word_1CA9A
call	game_check_province_is_neighbor
add	sp, 4
or	ax, ax
jz	short near ptr loc_12596+2
mov	bx, [bp+arg_2]
mov	bx, [bx+2]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jz	short near ptr loc_12596+2
cmp	[bp+arg_4], 0
jz	short near ptr loc_12572+2
mov	bx, ax
cmp	word ptr [bx+12h], 0BB8h
jb	short loc_12581

loc_22574:				; CODE XREF: dseg:23CD2  P dseg:26CC0  P		 /* DOS offset ---> 19C3:4 */
push	ax
;     ***************************************************************************
db  9Ah	;   *
db  7Eh	; ~
db    0
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  0Fh
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0D8h	;   *
db 0EBh	;   *
db    9
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
s_1251A		endp		 /* DOS offset ---> 19BD:A */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1259E		proc near		 /* DOS offset ---> 19C5:E */

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_2		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 6
mov	[bp+var_4], 0CA62h
mov	[bp+var_2], 0
mov	bx, [bp+arg_2]
mov	ax, [bx+2]
mov	[bp+var_6], ax
or	ax, ax

loc_225B8:				; CODE XREF: dseg:23CF4  P dseg:25A21  P ...		 /* DOS offset ---> 19C7:8 */
jz	short near ptr loc_125E3+1
;     ***************************************************************************
db 0FFh
db  76h	; v
db    8
db  50h	; P
db  0Eh
db 0E8h	;   *
db  58h	; X
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  0Fh
db  8Bh	;   *
db  46h	; F
db 0FAh	;   *
db  8Bh	;   *
db  5Eh	; ^
unk_225CE	db 0FCh	;   *		; CODE XREF: dseg:26B60  P dseg:26CE4  P ...
db  83h	;   *
db  46h	; F
db 0FCh	;   *
db    2
db  89h	;   *
db    7
db 0FEh	;   *
db  46h	; F
db 0FEh	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0FAh	;   *
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FAh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0D6h	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db 0C7h	;   *
db    7
db    0
db    0
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
s_1259E		endp		 /* DOS offset ---> 19C5:E */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_125F2		proc far		; DATA XREF: s_1273E+54  t		 /* DOS offset ---> 19CB:2 */

var_C		= byte ptr -0Ch
var_A		= byte ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= byte ptr  0Ah
arg_8		= word ptr  0Ch

; FUNCTION CHUNK AT 2651 SIZE 000000A3 BYTES
; FUNCTION CHUNK AT 2716 SIZE 00000079 BYTES

push	bp
mov	bp, sp
sub	sp, 0Ch
push	[bp+arg_2]
call	far ptr	525h:4Ah
add	sp, 2
mov	[bp+var_8], ax
mov	al, 14h
mul	byte ptr [bp+arg_4]
add	ax, 0CB7Ch
mov	[bp+var_6], ax
mov	bx, ax
mov	cx, [bp+arg_2]
mov	[bx+2],	cx
mov	cx, [bp+var_8]
mov	[bx], cx
mov	al, [bp+arg_6]
sub	ah, ah
push	ax
push	cx
call	s_128D6		; *

loc_2262A:				; CODE XREF: dseg:2B68F  P		 /* DOS offset ---> 19CE:A */
add	sp, 4
;     ***************************************************************************
db  2Ah	; *
db 0C0h	;   *
db  88h	;   *
db  46h	; F
db 0F6h	;   *
db  88h	;   *
db  46h	; F
db 0F4h	;   *
db  38h	; 8
db  46h	; F
db  0Ah
db  74h	; t
db  6Ah	; j
db  8Ah	;   *
db  5Eh	; ^
db 0F4h	;   *
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db  83h	;   *
db 0BFh	;   *
db  70h	; p
db 0CCh	;   *
db    0
db  74h	; t
db  51h	; Q
db  8Ah	;   *
db  5Eh	; ^
db 0F4h	;   *
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db  87h	;   *
db 0B2h	;   *
db 0CEh	;   *
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db 0FEh	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  9Ah	;   *
db    0
db    7
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db 0FFh
db  76h	; v
db 0FEh	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0A8h	;   *
db    6
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  8Ah	;   *
db  5Eh	; ^
db    8
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db  83h	;   *
db 0BFh	;   *
db 0AFh	;   *
db 0CAh	;   *
db    0
db  75h	; u
db  10h
db  8Bh	;   *
db  46h	; F
db 0FEh	;   *
db  8Ah	;   *
db  5Eh	; ^
db    8
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db  89h	;   *
db  87h	;   *
db 0AFh	;   *
db 0CAh	;   *
db 0EBh	;   *
db    8
;     ***************************************************************************
mov	ax, [bp+var_2]
mov	bx, [bp+var_4]
mov	[bx], ax
mov	[bp+var_4], ax
inc	[bp+var_C]
mov	al, [bp+arg_6]
cmp	[bp+var_A], al
jb	short near ptr loc_12639+1
mov	bx, [bp+var_2]
mov	word ptr [bx], 0
cmp	byte ptr [bp+arg_4], 0
jnz	short near ptr loc_126CB+1
mov	ax, word_1CE9E
mov	[bp+var_2], ax
mov	ax, 5
push	ax
push	[bp+var_8]
push	word_1CB86
call	game_data_set_hostility_of_ruler
add	sp, 6
jmp	short near ptr loc_126D0+2
;     ***************************************************************************
mov	ax, word_13396
mov	[bp+var_2], ax
mov	ax, 0FFF6h
push	ax
push	[bp+var_8]
mov	bx, [bp+var_6]
push	word ptr [bx-0Ah]
call	game_data_set_hostility_of_ruler
add	sp, 6
push	[bp+var_8]
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short near ptr unk_1270E
push	[bp+arg_2]
call	far ptr	542h:0A8h
add	sp, 2
or	ax, ax
jnz	short near ptr unk_1270E
mov	bx, [bp+var_6]
mov	[bx+8],	ax
jmp	short loc_12716
;     ***************************************************************************
nop
mov	bx, [bp+var_6]
mov	word ptr [bx+8], 1
mov	bx, current_ruler
mov	al, [bx+6]
sub	ah, ah
mov	bx, [bp+var_2]
mov	cl, [bx+6]
sub	ch, ch
add	ax, cx
mov	cx, 0FFCEh
cwd
idiv	cx
add	al, 6
mov	bl, byte ptr [bp+arg_4]
sub	bh, bh
mov	[bx-354Dh], al
mov	sp, bp
pop	bp
retf
s_125F2		endp		 /* DOS offset ---> 19CB:2 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1273E		proc far		; DATA XREF: Q_1F3EC+67  t		 /* DOS offset ---> 19DF:E */

var_4		= byte ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6
arg_2		= byte ptr  8

push	bp
mov	bp, sp
sub	sp, 4
mov	al, 9
push	ax
push	[bp+arg_0]
call	far ptr	59Dh:382h
add	sp, 4
mov	[bp+var_4], al
mov	bl, [bp+arg_2]
sub	bh, bh
mov	al, [bx+5CE6h]
push	ax
shl	bx, 1
push	word ptr [bx+5CE2h]
mov	al, [bp+var_4]
push	ax
call	game_war_move_send_whom_query
add	sp, 6
mov	[bp+var_2], al
or	al, al
jz	short near ptr loc_1279E+2

loc_22778:				; CODE XREF: dseg:2742D  P dseg:27753  P ...		 /* DOS offset ---> 19E3:8 */
call	far ptr	4B5h:290h
call	far ptr	3EFh:0A24h
or	ax, ax
jz	short near ptr loc_1279E+2
mov	al, [bp+var_2]
push	ax
mov	al, [bp+arg_2]
push	ax
push	[bp+arg_0]
push	cs
call	s_125F2		; *
add	sp, 6
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
s_1273E		endp		 /* DOS offset ---> 19DF:E */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_127A6		proc far		; DATA XREF: unkfunc_12804+34  t		 /* DOS offset ---> 19E6:6 */

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 8
push	word_1CA9A
call	far ptr	525h:4Ah
add	sp, 2
mov	[bp+var_6], ax
mov	ax, current_ruler
mov	[bp+var_8], ax
mov	ax, current_province
mov	[bp+var_4], ax
mov	ax, word_13396
mov	[bp+var_2], ax
mov	ax, [bp+var_6]
mov	current_ruler, ax
mov	bx, ax
mov	ax, [bx]
mov	word_13396, ax
mov	ax, word_1CA9A
mov	current_province, ax
call	s_1F79E		; *
or	ax, ax
jz	short near ptr loc_127EB+3
call	game_messenger_travel
mov	ax, [bp+var_8]
mov	current_ruler, ax
mov	ax, [bp+var_2]
mov	word_13396, ax
mov	ax, [bp+var_4]
mov	current_province, ax
mov	sp, bp
pop	bp
retf
s_127A6		endp		 /* DOS offset ---> 19E6:6 */


;     *************** S U B	R O U T	I N E     ***************************************


unkfunc_12804	proc far
mov	bx, current_ruler
cmp	byte ptr [bx+1Eh], 0FFh
jz	short near ptr loc_12823+5
push	word_1CA9A
call	far ptr	525h:64h
add	sp, 2
mov	bx, current_ruler

loc_2281E:				; CODE XREF: dseg:26E83  P dseg:29A17  P ...		 /* DOS offset ---> 19ED:E */
cmp	al, [bx+1Fh]
jnz	short near ptr loc_12823+5
call	s_1F482		; *
mov	ax, word_1CA9A
mov	word_13534, ax
call	s_1E9BE		; *
or	ax, ax
jz	short near ptr loc_12838+3
push	cs
call	s_127A6		; *
mov	word_13534, 0
mov	bx, word_1CA9A
mov	word ptr [bx+8], 0
mov	bx, word_1CA9A
sub	ax, ax
mov	[bx+0Ch], ax
mov	[bx+0Ah], ax
retf
unkfunc_12804	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


s_12858		proc far		; DATA XREF: game_war_neighboring_provinces_query+A1  t		 /* DOS offset ---> 19F1:8 */
mov	word ptr unk_1C980, 1
push	word_1CA9A
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short near ptr loc_12872+2
call	s_1F044		; *
retf
;     ***************************************************************************
mov	word_1CBA0, 0
sub	al, al
push	ax
mov	cx, 40
push	cx
mov	cx, 0CB72h
push	cx
call	far ptr	561h:0A0h ; s_56B0
;
add	sp, 6
sub	al, al
push	ax

loc_22890:				; CODE XREF: dseg:6A82  P		 /* DOS offset ---> 19F5:0 */
; game_diplomacy_threaten-FFC3  P
mov	ax, 71
push	ax
mov	ax, 0CAA1h
push	ax
call	far ptr	561h:0A0h ; s_56B0
add	sp, 6
mov	al, 5
retf
s_12858		endp		 /* DOS offset ---> 19F1:8 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_128A4		proc far		; DATA XREF: s_128D6+E  t		 /* DOS offset ---> 19F6:4 */
; game_data_set_hostility_of_ruler+1B  t

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
cmp	[bp+arg_2], 0
jge	short near ptr loc_128C1+1
mov	al, byte ptr [bp+arg_2]
neg	al
push	ax
push	[bp+arg_0]
call	far ptr	49Ch:6Ch
mov	sp, bp
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, 100
push	ax
mov	al, byte ptr [bp+arg_2]
push	ax
push	[bp+arg_0]
call	far ptr	49Ch:48h
mov	sp, bp
pop	bp
retf
s_128A4		endp		 /* DOS offset ---> 19F6:4 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_128D6		proc far		 /* DOS offset ---> 19F9:6 */

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
push	[bp+arg_2]
mov	ax, [bp+arg_0]
add	ax, 6
push	ax
push	cs
call	s_128A4		; *
mov	sp, bp
pop	bp
retf
s_128D6		endp		 /* DOS offset ---> 19F9:6 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_set_hostility_of_ruler proc far
; DATA XREF: game_diplomacy_cancel_alliance_sub+64  t
; game_diplomacy_cancel_alliance_sub+76  t ...

arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

push	bp
mov	bp, sp
push	[bp+arg_4]
push	[bp+arg_2]
call	far ptr	525h:6
add	sp, 2
sub	ah, ah
add	ax, [bp+arg_0]
add	ax, 14
push	ax
push	cs
call	s_128A4		; *
mov	sp, bp
pop	bp
retf
game_data_set_hostility_of_ruler endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_province_total_soldiers proc far
; DATA XREF: game_mil_hire_soldiers_check_sub+A  t
; game_diplomacy_threaten_calc+50  t ...

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	ax, 100
cwd
push	dx
push	ax
push	[bp+arg_0]
call	far ptr	525h:122h ; math_return_total_province_troops
add	sp, 2
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/	; math_divide_2_16bit_values
mov	sp, bp
pop	bp
retf
game_data_get_province_total_soldiers endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_generals_actions proc far	; DATA XREF: game_display_draw_province_menu+4D  t
; game_display_draw_province_menu+132  t	...

var_4		= byte ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

; FUNCTION CHUNK AT 2946 SIZE 0000001B BYTES
; FUNCTION CHUNK AT 2962 SIZE 0000000B BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_4], 0
mov	bx, current_province
mov	ax, [bx+2]
mov	[bp+var_2], ax
or	ax, ax
jz	short loc_12962
push	ax
call	far ptr	542h:58h ; game_data_get_general_action
add	sp, 2
or	ax, ax
jz	short loc_12956
inc	[bp+var_4]
mov	bx, [bp+var_2]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_12946
mov	al, [bp+var_4]
mov	sp, bp
pop	bp
retf
game_data_get_generals_actions endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_data_get_ruler_or_advisor_intellect proc far
; DATA XREF: game_spy_forged_letter_calc+19  t
; game_spy_forged_letter_calc+49  t ...

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
cmp	word ptr [bx+4], 0
jnz	short near ptr loc_1298A+2
mov	ax, 80		; use 80/100 of	ruler intellect	if no advisor
push	ax
mov	bx, [bx]

loc_2297C:				; CODE XREF: dseg:22737  P dseg:2B6F8  P		 /* DOS offset ---> 1A03:C */
mov	al, [bx+4]
;     ***************************************************************************
aFp2		db '  **P  *2',0
db  9Ch	;   *
db    4
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
mov	bx, [bx+4]
mov	al, [bx+4]
pop	bp
retf
game_data_get_ruler_or_advisor_intellect endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_forged_letter_calc proc far	; DATA XREF: game_spy_forged_letter_result+1B  t

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

push	bp		; Success = (trust / 2 + gen int / 2 + int result) / 2 + rand(20) -
; (difficulty *	3) - (tr trust / 2 + loyalty / 2 + officer int / 2
; + tr int result) / 3
;
mov	bp, sp
sub	sp, 4
mov	al, 20
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2
push	current_ruler
mov	[bp+var_4], ax
push	cs
call	game_data_get_ruler_or_advisor_intellect
add	sp, 2
sub	ah, ah
mov	bx, current_ruler
mov	cx, ax
mov	al, [bx+6]
shr	al, 1
mov	bx, [bp+arg_4]
mov	dl, [bx+4]
shr	dl, 1
sub	dh, dh
add	ax, dx
add	ax, cx
cwd
sub	ax, dx
sar	ax, 1
add	al, byte ptr [bp+var_4]
mov	byte ptr [bp+var_2], al
push	[bp+arg_0]
push	cs
call	game_data_get_ruler_or_advisor_intellect
add	sp, 2
sub	ah, ah
mov	bx, word_1CE9A
mov	cx, ax
mov	al, [bx+4]
shr	al, 1
mov	bx, [bp+arg_0]
mov	dl, [bx+6]
shr	dl, 1
sub	dh, dh
add	ax, dx
add	ax, cx
mov	bx, [bp+arg_2]
mov	cl, [bx+0Bh]
shr	cl, 1
sub	ch, ch
add	ax, cx
mov	cx, 3
cwd
idiv	cx
mov	cl, game_difficulty ; game_spy_forged_letter_calc
mov	dx, cx
shl	cl, 1
add	cl, dl
add	al, cl
push	ax
lea	ax, [bp+var_2]
push	ax
call	far ptr	49Ch:6Ch ; math_subtract_x1_from_y1
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
game_spy_forged_letter_calc endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_betrayal_calc proc far

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

push	bp		; Success = (2 * abs(compat - tr_compat) + trust + gen chr + int result) / 4
; - rand(20) - (difficulty * 3)	- ((integrity /	2) + loyalty + tr trust) / 3
mov	bp, sp
sub	sp, 6
push	si
mov	al, 20		; rand(20)
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2
push	current_ruler
mov	[bp+var_4], ax
push	cs
call	game_data_get_ruler_or_advisor_intellect
add	sp, 2
push	[bp+arg_2]
mov	[bp+var_6], ax
call	far ptr	525h:30h ; s_5280
add	sp, 2
mov	bx, ax
push	word ptr [bx]
push	[bp+arg_2]
call	far ptr	60Dh:630h ; game_data_get_ruler_general_compatibility
add	sp, 4
sub	ah, ah
shl	ax, 1		; 2 * compatibility difference
mov	cl, byte ptr [bp+var_6]	; int
sub	ch, ch
add	ax, cx
mov	bx, [bp+arg_4]
mov	cl, [bx+6]	; charm
add	ax, cx
mov	bx, current_ruler
mov	cl, [bx+6]	; performing ruler trust
add	ax, cx
shr	ax, 1
shr	ax, 1
add	al, byte ptr [bp+var_4]
mov	byte ptr [bp+var_2], al
mov	bx, [bp+arg_2]
mov	al, [bx+7]	; integrity
shr	al, 1
sub	ah, ah
mov	si, [bp+arg_0]
mov	cl, [si+6]	; current ruler	trust
add	ax, cx
mov	cl, [bx+0Bh]	; loyalty
add	ax, cx
mov	cx, 3
cwd
idiv	cx
mov	cl, game_difficulty ; game_spy_betrayal
mov	dx, cx
shl	cl, 1
add	cl, dl
add	al, cl
push	ax
lea	ax, [bp+var_2]
push	ax
call	far ptr	49Ch:6Ch ; math_subtract_x1_from_y1
add	sp, 4
mov	al, byte ptr [bp+var_2]
pop	si
mov	sp, bp
pop	bp
retf
game_spy_betrayal_calc endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_tiger_and_wolf_calc proc far	; DATA XREF: game_spy_tiger_and_wolf_result+1B  t

var_2		= word ptr -2
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

; FUNCTION CHUNK AT 2B1E SIZE 0000000F BYTES

push	bp		; Success = (ambition +	100 + (gen charm / 5)) - (difficulty * 5)
; + (loyalty + duty)
mov	bp, sp
sub	sp, 2
cmp	byte_10047, 10h
jnb	short loc_12B1E
mov	bx, [bp+arg_4]
test	byte ptr [bx+2], 2
jnz	short loc_12B1E
mov	bx, [bp+arg_6]
mov	al, [bx+6]	; gen charm
mov	cl, 5
sub	ah, ah
div	cl		; / 5
mov	bx, [bp+arg_4]
add	al, [bx+9]	; + officer ambition
add	al, 100		; + 100
mov	byte ptr [bp+var_2], al
mov	al, game_difficulty ; game_spy_tiger_and_wolf
mov	dx, ax
shl	al, 1
shl	al, 1
add	al, dl		; game difficulty * 5
add	al, [bx+7]	; + officer duty
add	al, [bx+0Bh]	; + officer loyalty
push	ax
lea	ax, [bp+var_2]
push	ax
call	far ptr	49Ch:6Ch ; math_subtract_x1_from_y1
add	sp, 4
jmp	short loc_12B22
;     ***************************************************************************
nop
mov	byte ptr [bp+var_2], 0
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
game_spy_tiger_and_wolf_calc endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_rival_tigers_calc proc	far	; DATA XREF: game_spy_rival_tigers+F  t
; game_spy_rival_tigers+29  t

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp		; Success = (PR_Trust +	gen int) / 2 + PR_INT +	rand(30) + 25
; - (difficulty	* 3) - (2 * TR Int)
sub	sp, 4
push	current_ruler
push	cs
call	game_data_get_ruler_or_advisor_intellect
add	sp, 2
mov	cl, 30		; rand(30)
push	cx
mov	[bp+var_4], ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2
mov	bx, current_ruler
mov	cx, ax
mov	al, [bx+6]	; ruler's trust
sub	ah, ah
mov	bx, [bp+arg_2]
mov	dl, [bx+4]	; + gen	int
sub	dh, dh
add	ax, dx
cwd
sub	ax, dx
sar	ax, 1		; / 2
add	cl, al
add	cl, byte ptr [bp+var_4]
add	cl, 25		; + 25
mov	byte ptr [bp+var_2], cl
push	[bp+arg_0]
push	cs
call	game_data_get_ruler_or_advisor_intellect
add	sp, 2
shl	al, 1		; 2 * TR intellect
mov	cl, game_difficulty ; game_spy_rival_tigers
mov	dx, cx
shl	cl, 1		; double
add	cl, dl		; add again
add	al, cl
push	ax
lea	ax, [bp+var_2]
push	ax
call	far ptr	49Ch:6Ch ; math_subtract_x1_from_y1
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
game_spy_rival_tigers_calc endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_marriage_calc proc far	; DATA XREF: game_diplomacy_marriage_result+36  t

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 2
push	si
mov	bx, [bp+arg_0]
push	word ptr [bx]
push	word_13396
call	far ptr	60Dh:630h ; game_data_get_ruler_general_compatibility
add	sp, 4
shr	al, 1
mov	bx, word_13396
mov	cx, ax
mov	al, [bx+6]
sub	ah, ah
mov	bx, current_ruler
mov	dl, [bx+6]
sub	dh, dh
add	ax, dx
cwd
sub	ax, dx
sar	ax, 1
sub	al, cl
mov	bx, [bp+arg_2]
mov	cx, ax
mov	al, [bx+6]
mov	bl, 3
sub	ah, ah
div	bl
add	cl, al
add	cl, 50
mov	byte ptr [bp+var_2], cl
push	current_ruler
call	far ptr	525h:6	; game_data_get_rulers_data
add	sp, 2
sub	ah, ah
mov	si, ax
mov	bx, [bp+arg_0]
mov	al, game_difficulty ; game_diplomacy_marriage_calc
mov	cx, ax
shl	al, 1
shl	al, 1
add	al, cl
add	al, [bx+si+0Eh]
push	ax
lea	ax, [bp+var_2]
push	ax
call	far ptr	49Ch:6Ch ; math_subtract_x1_from_y1
add	sp, 4
mov	al, byte ptr [bp+var_2]
pop	si
mov	sp, bp
pop	bp
retf
game_diplomacy_marriage_calc endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_joint_invasion_calc proc	far
; DATA XREF: game_diplomacy_joint_invasion_precalc+19  t
; game_diplomacy_joint_invasion_precalc_2+22  t

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah
arg_6		= word ptr  0Ch

push	bp
mov	bp, sp
sub	sp, 2
push	si
mov	ax, 1
push	ax
push	[bp+arg_0]
call	s_1259E		; *
add	sp, 4
or	al, al
jz	short near ptr unk_12CAC
push	[bp+arg_6]
call	far ptr	525h:6	; game_data_get_rulers_name
add	sp, 2
sub	ah, ah
mov	si, ax
mov	bx, [bp+arg_0]
mov	al, [bx+si+0Eh]
shl	ax, 1
mov	si, [bp+arg_4]
and	si, 0FFh
mov	bx, [bx]
mov	cl, [bx+si+7]
sub	ch, ch
add	ax, cx
mov	bx, current_ruler
mov	cl, [bx+6]
add	ax, cx
mov	bx, [bp+arg_2]
mov	cl, [bx+6]
add	ax, cx
mov	cx, 3
sub	dx, dx
div	cx
mov	cl, 4
sub	cl, game_difficulty ; game_diplomacy_joint_invasion_calc
mov	dx, cx
shl	cl, 1
add	cl, dl
add	al, cl
mov	byte ptr [bp+var_2], al
push	current_ruler
call	far ptr	525h:6	; game_data_get_rulers_data
add	sp, 2
sub	ah, ah
mov	si, ax
mov	bx, [bp+arg_0]
mov	al, [bx+si+0Eh]
push	ax
lea	ax, [bp+var_2]
push	ax
call	far ptr	49Ch:6Ch ; math_subtract_x1_from_y1
add	sp, 4
mov	al, byte ptr [bp+var_2]
pop	si
mov	sp, bp
pop	bp
retf
game_diplomacy_joint_invasion_calc endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_joint_invasion_precalc proc far
; DATA XREF: game_diplomacy_joint_invasion_result+24  t

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
push	word_1CA9A
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
mov	sp, bp
push	ax
mov	al, 2
push	ax
push	[bp+arg_2]
push	[bp+arg_0]
push	cs
call	game_diplomacy_joint_invasion_calc
mov	sp, bp
pop	bp
retf
game_diplomacy_joint_invasion_precalc endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_joint_invasion_precalc_2	proc far

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 2
mov	ax, word_1CB90
cmp	[bp+arg_0], ax
jnz	short near ptr loc_12CE5+1
sub	al, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_1CB86
mov	al, 1
push	ax
push	[bp+arg_2]

loc_22CF0:				; CODE XREF: dseg:24763  P		 /* DOS offset ---> 1A3B:0 */
push	[bp+arg_0]
;     ***************************************************************************
db  0Eh
db 0E8h	;   *
db  25h	; %
db 0FFh
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_diplomacy_joint_invasion_precalc_2	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_alliance_calc proc far	; DATA XREF: game_diplomacy_alliance_result+24  t

var_4		= byte ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp		; Success = (trust + tr	trust) / 2
mov	bp, sp
sub	sp, 4
push	si
push	current_ruler
call	far ptr	525h:6	; game_data_get_rulers_data
add	sp, 2
mov	byte ptr [bp+var_2], al
mov	bx, [bp+arg_2]
mov	al, [bx+6]
sub	ah, ah
mov	bx, current_ruler
mov	cl, [bx+6]
sub	ch, ch
add	ax, cx
cwd
sub	ax, dx
sar	ax, 1
mov	[bp+var_4], al
mov	si, [bp+var_2]
and	si, 0FFh
mov	bx, [bp+arg_0]
mov	al, [bx+si+0Eh]
mov	cl, 3
sub	ah, ah
div	cl
mov	cl, game_difficulty ; game_diplomacy_alliance_calc
mov	dx, cx
shl	cl, 1
shl	cl, 1
add	cl, dl

loc_22D4C:				; CODE XREF: dseg:2975E  P		 /* DOS offset ---> 1A40:C */
add	al, cl
;     ***************************************************************************
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db  6Ch	; l
db    0
db  9Ch	;   *
db    4
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  38h	; 8
db  47h	; G
db    8
db  75h	; u
db    3
db 0D0h	;   *
db  66h	; f
db 0FCh	;   *
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  38h	; 8
db  47h	; G
db    9
db  75h	; u
db  0Ch
db 0B1h	;   *
db    3
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  2Ah	; *
db 0E4h	;   *
db 0F6h	;   *
db 0F1h	;   *
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_diplomacy_alliance_calc endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

unkfunc_12D86	proc far

var_4		= byte ptr -4
arg_0		= word ptr  6

; FUNCTION CHUNK AT 2DA1 SIZE 0000001F BYTES
; FUNCTION CHUNK AT 2DC5 SIZE 00000035 BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_4], 0
mov	bx, [bp+arg_0]
mov	ax, [bx+6]
or	ax, ax
jz	short loc_12DA5
inc	[bp+var_4]
mov	bx, ax
mov	ax, [bx]
or	ax, ax
jnz	short near ptr unk_12D9A
mov	al, [bp+var_4]
mov	sp, bp
pop	bp
retf
unkfunc_12D86	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_search_calc proc far	; DATA XREF: game_personal_search_query+4D  t

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 2
mov	bx, [bp+arg_2]
mov	al, [bx+4]
mov	cl, 3
sub	ah, ah
div	cl
mov	cl, [bx+6]
shr	cl, 1
add	al, cl
mov	byte ptr [bp+var_2], al
mov	al, 14h
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
push	ax
lea	ax, [bp+var_2]
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	bx, [bp+arg_0]
cmp	word ptr [bx+6], 0
jnz	short near ptr loc_12DEF+1
sub	al, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
game_personal_search_calc endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_recruit_calc proc	far	; DATA XREF: game_personal_recruit_sub+5B  t
; game_personal_recruit_ruler+38  t

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= word ptr  6
arg_6		= byte ptr  0Ah

; FUNCTION CHUNK AT 2E40 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 2E73 SIZE 00000002 BYTES

push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	ax, [bp+arg_2]
add	ax, 4
mov	[bp+var_6], ax
mov	ax, [bp+arg_2]
add	ax, 7
mov	[bp+var_2], ax
mov	al, [bp+arg_6]
sub	ah, ah
or	ax, ax
jz	short near ptr loc_12E32+2
dec	ax
jz	short loc_12E40
dec	ax
jz	short near ptr unk_12E58
mov	bx, current_ruler
mov	al, [bx+6]
sub	ah, ah
shl	ax, 1
mov	bx, [bp+8]
mov	cl, [bx+6]
jmp	short loc_12E73
;     ***************************************************************************
nop
mov	bx, [bp+var_6]
mov	al, [bx+2]
sub	ah, ah
mov	cl, [bx]
jmp	short loc_12E73
;     ***************************************************************************
mov	bx, [bp+var_6]
mov	al, [bx+1]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
mov	cl, [bx+2]
sub	ch, ch
sub	ax, cx
jmp	short near ptr unk_12E77
;     ***************************************************************************
nop
mov	bx, [bp+var_2]
mov	al, [bx]
sub	ah, ah
sub	ax, 100
neg	ax
shl	ax, 1
mov	si, [bp+var_6]
mov	cl, [si+2]
sub	ch, ch
sub	ax, cx
mov	cl, [bx+2]
sub	ch, ch
add	ax, cx
mov	[bp+var_4], ax
mov	al, game_difficulty ; game_personal_recruit_calc
sub	ah, ah
add	ax, 3
mov	cx, 50
mul	cx
push	ax
mov	bx, current_ruler
mov	al, [bx+6]
sub	ah, ah
add	ax, [bp+var_4]
push	ax
mov	al, [bp+0Ch]
sub	ah, ah
push	ax
call	far ptr	49Ch:0Ah
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
game_personal_recruit_calc endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_recruit_sub proc far	; DATA XREF: game_personal_recruit_func+FA  t

var_2		= byte ptr -2
arg_2		= word ptr  6
arg_4		= byte ptr  0Ah

; FUNCTION CHUNK AT 2ED0 SIZE 0000001F BYTES
; FUNCTION CHUNK AT 2F0E SIZE 00000033 BYTES
; FUNCTION CHUNK AT 2FA2 SIZE 0000007B BYTES
; FUNCTION CHUNK AT 303A SIZE 000000C0 BYTES
; FUNCTION CHUNK AT 31FF SIZE 00000020 BYTES

push	bp
mov	bp, sp
sub	sp, 2
push	si
mov	bx, [bp+arg_2]
test	byte ptr [bx+2], 2
jz	short loc_12ED4
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp+arg_2]
cmp	al, [bx+0Dh]
jnz	short loc_12ED0
mov	al, 100
jmp	short near ptr loc_12F32+1
;     ***************************************************************************
sub	al, al
jmp	short near ptr loc_12F32+1
;     ***************************************************************************
push	bx
call	far ptr	525h:30h
add	sp, 2
mov	bx, ax
mov	bx, [bx]
mov	si, [bp+arg_2]
mov	ax, [si+10h]
test	[bx+10h], ax
jnz	short loc_12F0E
mov	bx, si
cmp	byte ptr [bx+0Bh], 100
jz	short loc_12F0E
mov	al, 100
sub	al, [bx+0Bh]
push	ax
mov	al, [bp+arg_4]
push	ax
push	word ptr [bp+8]
push	bx
push	cs
call	game_personal_recruit_calc ; *
add	sp, 8
mov	[bp+var_2], al
jmp	short near ptr loc_12F11+1
;     ***************************************************************************
mov	[bp+var_2], 0
push	word ptr [bp+8]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_12F35+1
mov	ax, 110
push	ax
mov	al, [bp+var_2]
sub	ah, ah
push	ax
call	far ptr	49Ch:32h
add	sp, 4
mov	[bp+var_2], al
mov	al, [bp+var_2]
pop	si
mov	sp, bp
pop	bp
retf
game_personal_recruit_sub endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_recruit_ruler proc far	; DATA XREF: game_personal_recruit_func+E7  t

var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= byte ptr  0Ah

; FUNCTION CHUNK AT 2F8B SIZE 00000017 BYTES

push	bp		; 120 -	(compatibility difference) / 2 - rand(10)
mov	bp, sp
sub	sp, 4
mov	al, 10
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2
push	word_13396
push	[bp+arg_0]
mov	[bp+var_4], ax
call	far ptr	60Dh:630h ; game_data_get_ruler_general_compatibility
add	sp, 4
shr	al, 1
sub	al, 120
neg	al
sub	al, byte ptr [bp+var_4]
push	ax
mov	al, [bp+arg_4]
push	ax
push	[bp+arg_2]
push	[bp+arg_0]
push	cs
call	game_personal_recruit_calc
add	sp, 8
mov	[bp+var_2], al
mov	bx, [bp+arg_0]
test	byte ptr [bx+2], 2
jz	short loc_12F8B
shl	[bp+var_2], 1
mov	al, [bp+var_2]
mov	sp, bp
pop	bp
retf
game_personal_recruit_ruler endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_12F92		proc far		; DATA XREF: game_messenger_travel_s_11E74+65  t		 /* DOS offset ---> 1A65:2 */
; game_messenger_travel+175  t

var_6		= word ptr -6
var_4		= byte ptr -4
var_2		= byte ptr -2
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= byte ptr  0Ah

push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	ax, 40Ah
push	ax
mov	ax, 5DE4h
push	ax
push	[bp+arg_4]
mov	ax, [bp+arg_2]
cwd
xor	ax, dx
sub	ax, dx
mov	cx, 3
sar	ax, cl
xor	ax, dx
sub	ax, dx
push	ax
call	far ptr	0:0FFCh
add	sp, 8

loc_22FBE:				; CODE XREF: dseg:228C7  P		 /* DOS offset ---> 1A67:E */
mov	al, [bp+arg_6]
sub	ah, ah
mov	cx, 1Eh
mov	bx, ax
imul	cx
add	ax, 5D9Ch
push	ax
mov	ax, 400h
push	ax
mov	ax, 0Ah
push	ax
mov	ax, 18h
push	ax
push	[bp+arg_4]
push	[bp+arg_2]
mov	si, bx
call	far ptr	0:452h
add	sp, 0Ch
mov	[bp+var_2], 0
mov	[bp+var_4], 1
mov	ax, si
shl	si, 1
add	si, ax
mov	[bp+var_6], si
mov	si, word_1CB6B
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
mov	bl, [bp+var_2]
sub	bh, bh
mov	al, [bx+si+5DD8h]
sub	ah, ah
add	ax, [bp+var_6]
mov	cx, 1Eh
imul	cx
add	ax, 5CE8h
push	ax
mov	al, [bp+var_4]
mov	ah, 3
push	ax
mov	ax, 0Ah
push	ax
mov	ax, 18h
push	ax
push	[bp+arg_4]
push	[bp+arg_2]
call	far ptr	0:452h
add	sp, 0Ch
shl	[bp+var_4], 1
inc	[bp+var_2]
cmp	[bp+var_2], 3
jb	short loc_12FFB
mov	al, options_value
and	al, byte ptr word_1352C
test	al, 1
jz	short loc_1305E
mov	al, 0Bh
push	ax
call	far ptr	6EBh:4F0h
jmp	short loc_13067
;     ***************************************************************************
nop
mov	ax, 2
push	ax
call	far ptr	57Ch:5Eh
add	sp, 2
mov	ax, 5DE4h
push	ax
sub	ax, ax
push	ax
mov	ax, 0Ah
push	ax
mov	ax, 4
push	ax
push	[bp+arg_4]
mov	ax, [bp+arg_2]
cwd
xor	ax, dx
sub	ax, dx
mov	cx, 3
sar	ax, cl
xor	ax, dx
sub	ax, dx
push	ax
call	far ptr	0:1627h
add	sp, 0Ch
pop	si
mov	sp, bp
pop	bp
retf
s_12F92		endp		 /* DOS offset ---> 1A65:2 */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_warning_display_text_and_sound proc far ; DATA XREF: game_ruler_hos_tru_table_query+1C  t
; game_warning_not_home_province+5  t ...

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	ax, 5E5Ch	; purple text
push	ax
call	far ptr	3EFh:6C0h ; set	display	color
mov	sp, bp
push	[bp+arg_0]
call	far ptr	3EFh:6C0h ; set	display	text from previous call	function
mov	sp, bp
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	sp, bp
pop	bp
retf
game_warning_display_text_and_sound endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_warning_unkfunc_130BE proc	far

; FUNCTION CHUNK AT 3102 SIZE 0000000F BYTES

push	word_1CAE8
call	far ptr	542h:0BAh ; s_54DA
add	sp, 2
or	ax, ax
jz	short loc_13102
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	ax, 2
push	ax
call	far ptr	49Ch:178h ; math_random_number_generator
add	sp, 2
mov	bx, ax
shl	bx, 1
push	word ptr [bx+5EDAh]
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
retf
game_warning_unkfunc_130BE endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_warning_not_home_province proc far	; DATA XREF: game_personal_dismiss_func+14  t
; game_personal_appoint_func+1A  t ...
mov	ax, 5EDEh	; 0x3577D
; Text:	'Not home province '
push	ax
push	cs
call	game_warning_display_text_and_sound
add	sp, 2
retf
game_warning_not_home_province endp


;     *************** S U B	R O U T	I N E     ***************************************


game_warning_no_one_can_do_that_now proc far
; DATA XREF: game_view_other_province_who_will_spy+F  t
; game_move_func+F  t ...
mov	ax, 5EF0h	; 0x3578F
; Text:	'No one can do that now '
push	ax
push	cs
call	game_warning_display_text_and_sound
add	sp, 2
retf
game_warning_no_one_can_do_that_now endp


;     *************** S U B	R O U T	I N E     ***************************************


game_warning_not_enough_gold proc far	; DATA XREF: game_mil_hire_soldiers_check+10  t
; game_personal_recruit_query+6E  t ...
mov	ax, 5F07h	; 0x357A6
; Text:	'Not enough gold '
push	ax
push	cs
call	game_warning_display_text_and_sound
add	sp, 2
retf
game_warning_not_enough_gold endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_display_draw_province_menu_sub proc far
; DATA XREF: game_display_draw_province_menu+1D1  t

arg_2		= word ptr  6
arg_4		= word ptr  8

; FUNCTION CHUNK AT 3136 SIZE 00000041 BYTES
; FUNCTION CHUNK AT 319A SIZE 0000002B BYTES

push	bp
mov	bp, sp
cmp	[bp+arg_2], 13
jnz	short loc_13136
mov	ax, 1
jmp	short loc_13138
;     ***************************************************************************
sub	ax, ax
test	word_159E4, ax
jnz	short near ptr loc_131AD+1
cmp	[bp+arg_2], 14
jnz	short loc_1314A
mov	ax, 1
jmp	short loc_1314C
;     ***************************************************************************
nop
sub	ax, ax
test	special_tax_unavailable, ax
jnz	short near ptr loc_131AD+1
cmp	[bp+arg_2], 3
jnz	short near ptr loc_1315D+1
mov	ax, 1
jmp	short near ptr loc_1315F+1
;     ***************************************************************************
nop
sub	ax, ax
test	word_159E8, ax
jnz	short near ptr loc_131AD+1
cmp	[bp+arg_2], 16
jnz	short loc_13172
mov	ax, 1
jmp	short loc_13174
;     ***************************************************************************
nop
sub	ax, ax

loc_23174:				; CODE XREF: dseg:2A001  P		 /* DOS offset ---> 1A83:4 */
test	word_159EC, ax
;     ***************************************************************************
db  75h	; u
db  34h	; 4
db  83h	;   *
db  7Eh	; ~
db    6
db    2
db  75h	; u
db    6
db 0B8h	;   *
db    1
db    0
db 0EBh	;   *
db    3
;     ***************************************************************************
nop
sub	ax, ax
test	word_159EA, ax
jnz	short near ptr loc_131AD+1
cmp	[bp+arg_2], 11
jnz	short loc_1319A
mov	ax, 1
jmp	short near ptr loc_1319B+1
;     ***************************************************************************
nop
sub	ax, ax
test	word_159EE, ax
jnz	short near ptr loc_131AD+1
push	[bp+arg_4]
push	[bp+arg_2]
mov	ax, 5F2Eh	; 0x357CC
jmp	short loc_131B7
;     ***************************************************************************
nop
push	[bp+arg_4]
push	[bp+arg_2]
mov	ax, 5F1Fh	; 0x357BD
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
mov	sp, bp
pop	bp
retf
game_display_draw_province_menu_sub endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_display_draw_province_menu	proc far ; DATA	XREF: game_send_func+5E  t
; game_war_neighboring_provinces_query+E4  t ...

var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
arg_0		= word ptr  6
arg_4		= word ptr  8
arg_6		= dword	ptr  0Ah

; FUNCTION CHUNK AT 3119 SIZE 00000005 BYTES
; FUNCTION CHUNK AT 31E1 SIZE 0000001E BYTES
; FUNCTION CHUNK AT 3226 SIZE 00000148 BYTES
; FUNCTION CHUNK AT 3370 SIZE 00000023 BYTES
; FUNCTION CHUNK AT 346B SIZE 00000001 BYTES
; FUNCTION CHUNK AT 3497 SIZE 00000004 BYTES

push	bp
mov	bp, sp
sub	sp, 18h
call	far ptr	4B5h:282h ; game_gfx_blk_bkgrnd_shape_4
mov	[bp+var_E], 0
mov	[bp+var_10], 38
mov	[bp+var_8], 0
mov	[bp+var_C], 83
push	[bp+var_C]
push	[bp+var_10]

loc_231E7:				; CODE XREF: dseg:2279C  P		 /* DOS offset ---> 1A8A:7 */
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
mov	ax, [bp+var_8]
add	ax, [bp+var_E]
mov	[bp+var_A], ax
mov	bx, current_province
mov	ax, [bx+2]
push	ax
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short loc_1320F
jmp	near ptr loc_132F3+1
;     ***************************************************************************
call	game_data_get_generals_actions
or	al, al
jnz	short loc_13288
cmp	[bp+var_A], 8
jge	short near ptr loc_13222+2
mov	ax, 1
jmp	short loc_13226
;     ***************************************************************************
nop
sub	ax, ax
mov	[bp+var_12], ax
cmp	[bp+var_A], 0
jle	short near ptr loc_13233+1
mov	ax, 1
jmp	short loc_13236
;     ***************************************************************************
sub	ax, ax
test	[bp+var_12], ax
jnz	short near ptr loc_1326B+1
cmp	[bp+var_A], 0Fh
jge	short loc_13246
mov	ax, 1
jmp	short loc_13248
;     ***************************************************************************
sub	ax, ax
mov	[bp+var_14], ax
cmp	[bp+var_A], 8
jle	short loc_13256
mov	ax, 1
jmp	short near ptr loc_13256+2
;     ***************************************************************************
sub	ax, ax
test	[bp+var_14], ax
jnz	short near ptr loc_1326B+1
cmp	[bp+var_A], 10h
jz	short near ptr loc_1326B+1
cmp	[bp+var_A], 11h
jz	short near ptr loc_1326B+1
jmp	loc_13386
;     ***************************************************************************
mov	bx, [bp+var_A]
shl	bx, 1
push	word ptr [bx+5FF8h]
push	[bp+var_A]

loc_23278:				; CODE XREF: dseg:227F8  P		 /* DOS offset ---> 1A93:8 */
mov	ax, 5FADh	; 0x357DB
; Text:	'Rest Move Send War Milit Person Diplom Spy
; View Cultiv Flood Reward Give	Merch Tax Map Deleg
; Exile	Advice Other '
;
; Only redraws options that require general action
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
jmp	near ptr byte_13399
;     ***************************************************************************
nop
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	542h:58h ; game_data_get_general_action
add	sp, 2
or	ax, ax
jnz	short near ptr loc_132CD+1
cmp	[bp+var_A], 0Bh
jz	short loc_132BC
cmp	[bp+var_A], 0Eh
jz	short loc_132BC
cmp	[bp+var_A], 7
jz	short loc_132BC
cmp	[bp+var_A], 10h
jz	short loc_132BC
cmp	[bp+var_A], 11h
jz	short loc_132BC
jmp	loc_13386
;     ***************************************************************************
mov	bx, [bp+var_A]
shl	bx, 1
push	word ptr [bx+5FF8h]
push	[bp+var_A]
mov	ax, 5FBCh	; 0x35848
; Text:	'%2d. %s %2d. %s %2d. %s, etc '
jmp	short near ptr loc_13279+2
;     ***************************************************************************
nop
cmp	[bp+var_A], 7
jz	short near ptr loc_132E2+1
cmp	[bp+var_A], 10h
jz	short near ptr loc_132E2+1
cmp	[bp+var_A], 11h
jz	short near ptr loc_132E2+1
jmp	loc_13386
;     ***************************************************************************
mov	bx, [bp+var_A]
shl	bx, 1
push	word ptr [bx+5FF8h]
push	[bp+var_A]
mov	ax, 5FCBh
jmp	short near ptr loc_13279+2
;     ***************************************************************************
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr loc_13353+1
cmp	[bp+var_A], 0
jle	short loc_13308
mov	ax, 1
jmp	short loc_1330A
;     ***************************************************************************
sub	ax, ax
mov	[bp+var_16], ax
cmp	[bp+var_A], 5
jge	short near ptr loc_13316+2
mov	ax, 1
jmp	short near ptr loc_13319+1
;     ***************************************************************************
sub	ax, ax
test	[bp+var_16], ax
jnz	short near ptr loc_13340+1
cmp	[bp+var_A], 0Fh
jge	short near ptr loc_13329+1
mov	ax, 1
jmp	short near ptr loc_1332B+1
;     ***************************************************************************
sub	ax, ax
mov	[bp+var_18], ax
cmp	[bp+var_A], 8
jle	short near ptr loc_13339+1
mov	ax, 1
jmp	short near ptr loc_1333B+1
;     ***************************************************************************
sub	ax, ax

loc_2333C:				; CODE XREF: dseg:25F74  P		 /* DOS offset ---> 1A9F:C */
test	[bp+var_18], ax
jz	short loc_13386
mov	bx, [bp+var_A]
shl	bx, 1
push	word ptr [bx+5FF8h]
push	[bp+var_A]
mov	ax, 5FDAh
jmp	near ptr loc_13279+2
;     ***************************************************************************
nop
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	542h:58h ; game_data_get_general_action
add	sp, 2
or	ax, ax
jnz	short loc_13386
cmp	[bp+var_A], 0Bh
jz	short loc_13373
cmp	[bp+var_A], 0Eh
jnz	short loc_13386
mov	bx, [bp+var_A]
shl	bx, 1
push	word ptr [bx+5FF8h]
push	[bp+var_A]
mov	ax, 5FE9h
jmp	near ptr loc_13279+2
;     ***************************************************************************
nop
mov	bx, [bp+var_A]
shl	bx, 1
push	word ptr [bx+5FF8h]
push	[bp+var_A]
push	cs
call	game_display_draw_province_menu_sub
add	sp, 4
add	[bp+var_C], 9
inc	[bp+var_8]
cmp	[bp+var_8], 5
jge	short near ptr word_133A8+1

loc_233A6:				; CODE XREF: dseg:273F0  P dseg:2859A  P		 /* DOS offset ---> 1AA6:6 */
jmp	loc_131E1
;     ***************************************************************************
add	[bp+var_E], 5
add	[bp+var_10], 10
cmp	[bp+var_10], 78
jge	short near ptr word_133BA
jmp	near ptr unk_131D7
;     ***************************************************************************
mov	word_1356E, 0
mov	sp, bp
pop	bp
retf
game_display_draw_province_menu	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advisor_display_sub2_2 proc far	; DATA XREF: game_advisor_display_sub2+D  t

var_6		= byte ptr -6
var_4		= byte ptr -4
var_2		= byte ptr -2
arg_2		= word ptr  6

; FUNCTION CHUNK AT 33D6 SIZE 00000017 BYTES
; FUNCTION CHUNK AT 3400 SIZE 00000003 BYTES
; FUNCTION CHUNK AT 3404 SIZE 00000004 BYTES
; FUNCTION CHUNK AT 3409 SIZE 00000004 BYTES
; FUNCTION CHUNK AT 340E SIZE 00000006 BYTES
; FUNCTION CHUNK AT 341E SIZE 00000014 BYTES
; FUNCTION CHUNK AT 3449 SIZE 00000022 BYTES

push	bp
mov	bp, sp
sub	sp, 6
mov	[bp+var_2], 0
mov	bx, [bp+arg_2]
cmp	byte ptr [bx], 0Ah
jz	short near ptr loc_133E6+3
cmp	byte ptr [bx], 0
jz	short loc_1340E
inc	[bp+var_2]
inc	[bp+arg_2]
mov	bx, [bp+arg_2]
cmp	byte ptr [bx], 0Ah
jnz	short loc_133D6
mov	[bp+var_4], 0
inc	[bp+arg_2]
mov	bx, [bp+arg_2]

loc_233F3:				; CODE XREF: dseg:28A7C  P dseg:2A49E  P		 /* DOS offset ---> 1AAB:3 */
cmp	byte ptr [bx], 0Ah
jz	short loc_1341E
cmp	byte ptr [bx], 0
jz	short near ptr loc_13415+1
inc	[bp+var_4]

loc_23400:				; CODE XREF: dseg:2A4D2  P		 /* DOS offset ---> 1AAC:0 */
inc	[bp+arg_2]
mov	bx, [bp+arg_2]
cmp	byte ptr [bx], 0Ah
jnz	short near ptr unk_133F8
jmp	short loc_1341E
;     ***************************************************************************
nop
mov	al, [bp+var_2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bp+var_4]
sub	ah, ah
jmp	short near ptr loc_1344C+1
;     ***************************************************************************
nop
mov	[bp+var_6], 0
inc	[bp+arg_2]
mov	bx, [bp+arg_2]
cmp	byte ptr [bx], 0
jz	short near ptr unk_1343B
inc	[bp+var_6]
inc	[bp+arg_2]
mov	bx, [bp+arg_2]
cmp	byte ptr [bx], 0
jnz	short loc_1342D
mov	al, [bp+var_6]
sub	ah, ah
push	ax
mov	al, [bp+var_4]
push	ax
call	far ptr	561h:19Ch ; math_max_function_x1_y1
add	sp, 4
push	ax
mov	al, [bp+var_2]
sub	ah, ah
push	ax
call	far ptr	561h:19Ch ; math_max_function_x1_y1

loc_23459:				; CODE XREF: dseg:23116  P dseg:2A4F5  P		 /* DOS offset ---> 1AB1:9 */
mov	sp, bp
pop	bp
retf
game_advisor_display_sub2_2 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advisor_display_sub2 proc far	; DATA XREF: game_advisor_display_sub+50  t
; game_advisor_display_sub_3+4B  t

var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 4
push	di
push	si
mov	ax, 0C9FEh
push	ax
push	cs
call	game_advisor_display_sub2_2
add	sp, 2
mov	[bp+var_2], al
mov	ax, 3BD6h
push	ax
mov	ax, 407h
push	ax
mov	cx, 8
push	cx
mov	dx, 1
push	dx
mov	bx, [bp+arg_0]

loc_23487:				; CODE XREF: dseg:2264B  P dseg:24E75  P ...		 /* DOS offset ---> 1AB4:7 */
add	bx, cx
shl	bx, 1
mov	[bp+arg_0], bx
push	bx
mov	si, 31h	; '1'
push	si
mov	di, bx
call	far ptr	0:1469h	; s_1469
add	sp, 0Ch
mov	ax, 7
push	ax
mov	cx, 18h
push	cx
mov	dx, 1
push	dx
mov	bx, [bp+arg_0]
add	bx, 8
push	bx
push	si
mov	si, bx
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
mov	ax, 3BE6h
push	ax
mov	ax, 407h
push	ax
mov	cx, 8
push	cx
mov	dx, 1
push	dx
mov	bx, [bp+arg_0]
add	bx, 20h	; ' '
push	bx
mov	ax, 31h	; '1'
push	ax

loc_234D6:				; CODE XREF: dseg:25755  P		 /* DOS offset ---> 1AB9:6 */
mov	[bp+var_4], bx
;     ***************************************************************************
db  9Ah	;   *
db  69h	; i
db  14h
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ch
db 0B8h	;   *
db    7
db    0
db  50h	; P
db 0B9h	;   *
db  28h	; (
db    0
db  51h	; Q
db  8Ah	;   *
db  4Eh	; N
db 0FEh	;   *
db  2Ah	; *
db 0EDh	;   *
db  41h	; A
db  41h	; A
db  51h	; Q
db  57h	; W
db 0B9h	;   *
db  32h	; 2
db    0
db  51h	; Q
;     ***************************************************************************

loc_234F6:				; CODE XREF: dseg:2B64F  P		 /* DOS offset ---> 1ABB:6 */
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
;     ***************************************************************************
db  83h	;   *
db 0C4h	;   *
db  0Ah
db 0B8h	;   *
db 0DEh	;   *
db  3Bh	; ;
db  50h	; P
db 0B8h	;   *
db    7
db    4
db  50h	; P
db 0B9h	;   *
db    8
db    0
db  51h	; Q
db 0BAh	;   *
db    1
db    0
db  52h	; R
db  57h	; W
db  8Ah	;   *
db  5Eh	; ^
db 0FEh	;   *
db  80h	;   *
db 0C3h	;   *
db  34h	; 4
db  2Ah	; *
db 0FFh
db  53h	; S
db  8Bh	;   *
db 0FBh	;   *
db  9Ah	;   *
db  69h	; i
db  14h
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ch
db 0B8h	;   *
db    7
db    0
db  50h	; P
db 0B8h	;   *
db  18h
db    0
db  50h	; P
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  56h	; V
db  57h	; W
db  9Ah	;   *
db  78h	; x
unk_23532	db    3			; CODE XREF: dseg:255A5  P dseg:2AB7E  P ...
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ah
db 0B8h	;   *
db 0EEh	;   *
db  3Bh	; ;
db  50h	; P
db 0B8h	;   *
db    7
db    4
db  50h	; P
db 0B9h	;   *
db    8
db    0
db  51h	; Q
db 0BAh	;   *
db    1
db    0
db  52h	; R
db 0FFh
db  76h	; v
db 0FCh	;   *
db  57h	; W
db  9Ah	;   *
db  69h	; i
db  14h
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ch
db 0B8h	;   *
db 0C6h	;   *
db  3Bh	; ;
db  50h	; P
db 0B8h	;   *
db    7
db    4
db  50h	; P
db 0B8h	;   *
db    8
db    0
db  50h	; P
db 0B8h	;   *
db    2
db    0
db  50h	; P
db  8Bh	;   *
db  46h	; F
db    6
db    5
db  14h
db    0
db  50h	; P
db 0B8h	;   *
db  2Fh	; /
db    0
db  50h	; P
db  9Ah	;   *
db  69h	; i
db  14h
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ch
db  56h	; V
db 0B8h	;   *
db  33h	; 3
db    0
db  50h	; P
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0B8h	;   *
db  20h
db  60h	; `
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db 0B8h	;   *
db 0FEh	;   *
db 0C9h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db 0B8h	;   *
db  2Ch	; ,
db  60h	; `
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
;     ***************************************************************************

loc_235A8:				; CODE XREF: dseg:2479B  P dseg:248D0  P ...		 /* DOS offset ---> 1AC6:8 */
pop	si
;     ***************************************************************************
db  5Fh	; _
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_advisor_display_sub2 endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advisor_display_sub proc far	; DATA XREF: game_advisor_display+9B  t
; dseg:1A559  t ...

arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= byte ptr  0Ah

; FUNCTION CHUNK AT 35F0 SIZE 00000068 BYTES
; FUNCTION CHUNK AT 365A SIZE 0000002F BYTES

push	bp
mov	bp, sp
call	far ptr	4B5h:282h ; game_gfx_blk_bkgrnd_shape_1
push	[bp+arg_2]
mov	ax, 84
push	ax
mov	ax, 38
push	ax

loc_235C1:				; CODE XREF: dseg:247A7  P dseg:248DC  P ...		 /* DOS offset ---> 1AC8:1 */
call	far ptr	4B5h:6A4h ; s_51F4
mov	sp, bp
cmp	[bp+arg_6], 0
jz	short near ptr loc_135E7+3
cmp	[bp+arg_6], 1
jz	short near ptr loc_135E7+3
cmp	[bp+arg_6], 2
jnz	short near ptr loc_135E1+1
push	[bp+arg_4]
mov	ax, 6046h	; 0x358E4
; Text:	'Doctor: %s '

loc_235E0:				; CODE XREF: dseg:29748  P		 /* DOS offset ---> 1ACA:0 */
jmp	short loc_135F0
;     ***************************************************************************
push	[bp+arg_4]
mov	ax, 6055h	; 0x358F3
; Text:	'Advisor: %s '
jmp	short loc_135F0
;     ***************************************************************************
push	[bp+arg_4]
mov	ax, 6035h	; 0x358D3
; Text:	'Traveler: %s'
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	ax, 35
push	ax
push	cs
call	game_advisor_display_sub2 ; *
mov	sp, bp
pop	bp
retf
game_advisor_display_sub endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_advisor_display_sub_3 proc	far	; DATA XREF: game_advisor_display_results+23  t
; game_messenger_travel_results+AA  t
cmp	word_1CC6A, 0
jz	short near ptr loc_13629+1
sub	ax, ax
push	ax
mov	ax, 48
push	ax
mov	ax, 32
push	ax
mov	ax, 148
push	ax

loc_2361C:				; CODE XREF: Flash_AI_Unit+28  P		 /* DOS offset ---> 1ACD:C */
mov	ax, 46
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
jmp	short near ptr loc_1364B+1
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	bx, word_1CE9E
push	word ptr [bx+1Ah]
mov	ax, 152
push	ax
mov	ax, 38
push	ax
call	far ptr	4B5h:6A4h ; s_51F4
add	sp, 6
mov	word_1CC6A, 1
mov	ax, 68
push	ax
push	cs
call	game_advisor_display_sub2 ; *
add	sp, 2
retf
game_advisor_display_sub_3 endp


;     *************** S U B	R O U T	I N E     ***************************************


game_advisor_display_results proc far	; DATA XREF: game_messenger_travel_results+8E  t
; game_send_result+3C  t	...
push	word_1CE9E

loc_2365C:				; CODE XREF: dseg:22AB1  P dseg:24B50  P		 /* DOS offset ---> 1AD1:C */
call	far ptr	542h:1D8h ; game_data_check_if_home_province
;     ***************************************************************************
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  12h
db  9Ah	;   *
db  90h	;   *
db    2
db 0B5h	;   *
db    4
db 0B8h	;   *
db 0FEh	;   *
db 0C9h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db 0CBh	;   *
;     ***************************************************************************
push	cs
call	game_advisor_display_sub_3
retf
;     ***************************************************************************
nop
game_advisor_display_results endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_messenger_travel_results proc far	; DATA XREF: game_messenger_travel_results_1+9  t
; game_messenger_travel_results_2+30  t

arg_0		= word ptr  6
arg_2		= word ptr  8

; FUNCTION CHUNK AT 36D0 SIZE 0000003C BYTES
; FUNCTION CHUNK AT 371A SIZE 00000004 BYTES

push	bp
mov	bp, sp
push	[bp+arg_2]

loc_23686:				; CODE XREF: dseg:22ADC  P dseg:24B86  P		 /* DOS offset ---> 1AD4:6 */
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
mov	sp, bp
mov	bx, ax
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
mov	sp, bp
mov	al, byte ptr [bp+arg_0]
sub	ah, ah
dec	ax
jz	short near ptr loc_136B5+1
dec	ax
jz	short loc_136D0
dec	ax
jz	short near ptr loc_136E9+1
dec	ax
jz	short loc_1371A
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
mov	sp, bp
or	ax, ax
jz	short near ptr loc_136C9+1
mov	ax, 6065h	; 0x35903
; Text:	' read the letter but let it pass through. '
jmp	short loc_13701
;     ***************************************************************************
mov	ax, 608Fh	; 0x3592D
; Text:	' read the letter but let it pass through '
jmp	short loc_13701
;     ***************************************************************************
nop
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
mov	sp, bp
or	ax, ax
jz	short loc_136E4
mov	ax, 60B9h	; 0x35957
; Text:	' seized the secret letter and exposed our plot! '
jmp	short loc_13701
;     ***************************************************************************
mov	ax, 60E9h	; 0x35987
; Text:	' seized the secret letter! '
jmp	short loc_13701
;     ***************************************************************************
nop
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
mov	sp, bp
or	ax, ax
jz	short near ptr loc_136FD+1
mov	ax, 6104h	; 0x359A2
; Text:	' almost imprisoned our messenger! '
jmp	short loc_13701
;     ***************************************************************************
mov	ax, 6126h	; 0x359C4
; Text:	' almost imprisoned our messenger! '
push	ax

loc_23702:				; CODE XREF: dseg:24874  P dseg:24882  P ...		 /* DOS offset ---> 1ADC:2 */
mov	ax, 0C9FEh
;     ***************************************************************************
db  50h	; P
db  9Ah	;   *
db 0E6h	;   *
db    0
db  61h	; a
db    5
db  8Bh	;   *
db 0E5h	;   *
db  0Eh
db 0E8h	;   *
db  47h	; G
db 0FFh
db  9Ah	;   *
db  26h	; &
db    1
db  7Ch	; |
db    5
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
mov	ax, 6148h	; 0x359E6
; Text:	'The enemy almost captured our ruler! '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
mov	sp, bp
push	cs
call	game_advisor_display_sub_3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
game_messenger_travel_results endp


;     *************** S U B	R O U T	I N E     ***************************************


game_messenger_travel_results_1	proc far ; DATA	XREF: game_diplomacy_threaten_result+98  t
; game_diplomacy_gift_query_result+19A  t ...
push	word_1CEA4
mov	al, byte_1CEA0
push	ax
push	cs
call	game_messenger_travel_results
add	sp, 4
retf
game_messenger_travel_results_1	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_messenger_travel_results_2	proc far ; DATA	XREF: game_send_result+14A  t
; game_personal_recruit_func+1A8  t ...

var_C		= word ptr -0Ch
var_A		= byte ptr -0Ah
var_8		= byte ptr -8
var_7		= byte ptr -7
var_6		= byte ptr -6
var_2		= word ptr -2
arg_2		= word ptr  6

; FUNCTION CHUNK AT 375C SIZE 00000023 BYTES

push	bp
mov	bp, sp
sub	sp, 2
mov	[bp+var_2], 1
mov	al, byte_1CA86
sub	ah, ah
or	ax, ax
jz	short loc_1375C
dec	ax
jz	short loc_13764

loc_23759:				; CODE XREF: dseg:248AA  P dseg:24CB6  P ...		 /* DOS offset ---> 1AE1:9 */
jmp	short near ptr loc_13768+1
;     ***************************************************************************
nop
mov	[bp+var_2], 0
jmp	short near ptr loc_13774+1
;     ***************************************************************************
nop
mov	[bp+var_2], 0
push	word_1CEAA
mov	al, byte_1CA86
push	ax
push	cs
call	game_messenger_travel_results
mov	ax, [bp+var_2]
mov	sp, bp
pop	bp
retf
game_messenger_travel_results_2	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_display_draw_province_data	proc far
; DATA XREF: game_display_draw_province_info_and_data+13  t
; game_view_general_select_general+5B  t	...

arg_0		= word ptr  6

push	bp
;     ***************************************************************************
aLGR5		db '    **>r5',0
db  74h	; t
db    8
db  9Ah	;   *
db  58h	; X
db    3
db 0B5h	;   *
db    4
db 0EBh	;   *
db    6
;     ***************************************************************************
nop
call	far ptr	4B5h:282h ; game_gfx_blk_bkgrnd_shape_1
mov	ax, 80
push	ax
mov	ax, 39
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
mov	sp, bp
mov	bx, [bp+arg_0]	; display first	row data
; Population, Gold, Loyalty
mov	al, [bx+17h]
sub	ah, ah
push	ax
push	word ptr [bx+8]
push	word ptr [bx+0Eh]
mov	ax, 616Dh	; 0x35A0B
; Text:	'Pop %6d00 Gold %8u Loyl %6d'
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
mov	sp, bp
mov	ax, 94
push	ax
mov	ax, 39
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
mov	sp, bp
mov	bx, [bp+arg_0]	; display second row data
; Troops, Food,	Land
mov	al, [bx+16h]
sub	ah, ah
push	ax
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
push	bx
call	far ptr	525h:122h ; math_return_total_province_troops
add	sp, 2
push	dx
push	ax
mov	ax, 619Fh	; 0x35A3D
; Text:	'Men %81u Food %81u Land %5d'
push	ax

loc_237E9:				; CODE XREF: dseg:229D5  P dseg:22B52  P ...		 /* DOS offset ---> 1AEA:9 */
call	far ptr	3EFh:6E8h ; system_output_display_text
mov	sp, bp
mov	ax, 108
push	ax
mov	ax, 39
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
mov	sp, bp
mov	bx, [bp+arg_0]	; display third	row data
; Men, Rate, Flood
mov	al, [bx+18h]
sub	ah, ah
push	ax
mov	al, [bx+1Bh]
push	ax
push	word ptr [bx+2]
call	far ptr	525h:158h ; game_data_get_generals_or_free_in_province
add	sp, 2
sub	ah, ah
push	ax
mov	ax, 61D2h	; 0x35A70
; Text:	'Generals %3d Rate %7d Flood %4d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
mov	sp, bp
mov	ax, 122
push	ax
mov	ax, 39
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
mov	sp, bp

loc_23834:				; CODE XREF: dseg:22CF9  P dseg:244CB  P ...		 /* DOS offset ---> 1AEF:4 */
mov	bx, [bp+arg_0]	; display fourth row data
; Free Generals, Horses, Forts
;     ***************************************************************************
db  8Ah	;   *
db  47h	; G
db  1Ah
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db  8Ah	;   *
db  47h	; G
db  19h
db  50h	; P
db 0FFh
db  77h	; w
db    4
db  9Ah	;   *
db  58h	; X
db    1
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db 0B8h	;   *
db  0Ah
db  62h	; b
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db 0C7h	;   *
db    6
db  6Eh	; n
db  35h	; 5
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_display_draw_province_data	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_display_draw_province_header_data proc far
; DATA XREF: game_display_draw_province_info_and_data+A  t
; game_view_other_province_queries+19  t

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp

loc_23865:				; CODE XREF: dseg:25A0E  P dseg:25C4C  P ...		 /* DOS offset ---> 1AF2:5 */
sub	sp, 2
push	si
cmp	[bp+arg_2], 0
jnz	short loc_1387A
mov	ax, word_13574
cmp	[bp+arg_0], ax
jnz	short loc_1387A
jmp	near ptr unk_139C1
;     ***************************************************************************
mov	ax, [bp+arg_0]
mov	word_13574, ax
mov	cx, 7
push	cx
mov	cx, 58
push	cx
mov	cx, 42
push	cx
mov	cx, 3
push	cx
mov	cx, 37
push	cx
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
mov	ax, 61
push	ax
call	far ptr	4B5h:33Eh ; game_gfx_province_divion_lines_display
add	sp, 2
mov	ax, 0Ch
push	ax
mov	ax, 41
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
push	[bp+arg_0]

loc_238BB:				; CODE XREF: dseg:25CB2  P dseg:25D18  P ...		 /* DOS offset ---> 1AF7:B */
call	far ptr	525h:18h ; game_data_get_province_governor_name
add	sp, 2
push	ax
push	[bp+arg_0]
call	far ptr	525h:64h ; game_data_get_province_number
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, 6243h	; 0x35AE1
; Inverse black	white background text color as well
; Text:	'%2d. %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
push	[bp+arg_0]
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short near ptr unk_138FE
mov	ax, 6255h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2

loc_238FA:				; CODE XREF: dseg:2263B  P dseg:232DA  P ...		 /* DOS offset ---> 1AFB:A */
jmp	near ptr unk_139B5
;     ***************************************************************************
nop
mov	ax, 4
push	ax
mov	ax, 512
push	ax
call	far ptr	4B5h:6ECh ; system_output_display_text
add	sp, 4
mov	bx, [bp+arg_0]
mov	si, [bx+2]
push	word ptr [si+1Ah]
mov	ax, 0Ch
push	ax
mov	ax, 65
push	ax

loc_2391F:				; CODE XREF: dseg:227AE  P dseg:273C0  P ...		 /* DOS offset ---> 1AFD:F */
call	far ptr	4B5h:6A4h ; s_51F4
; overlaps with	variables?
add	sp, 6
push	[bp+arg_0]
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
mov	bx, ax

loc_23934:				; CODE XREF: dseg:22A85  P dseg:23E3E  P ...		 /* DOS offset ---> 1AFF:4 */
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 625Eh	; 0x35AFC
; Text:	'Ruler: %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
push	[bp+arg_0]
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
mov	bx, ax
mov	al, [bx+6]
sub	ah, ah
push	ax
mov	ax, 6272h	; 0x35B10
; Text:	'Trust: %3d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	bx, [bp+arg_0]

loc_23968:				; CODE XREF: dseg:22595  P dseg:22A6B  P ...		 /* DOS offset ---> 1B02:8 */
mov	ax, [bx+2]
add	ax, 1Ch
push	ax
mov	ax, 627Eh	; 0x35B1C
; Text:	'Governor: %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
push	[bp+arg_0]
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
mov	bx, ax
mov	ax, [bx+4]
mov	[bp+var_2], ax
or	ax, ax
jz	short near ptr unk_139B5

loc_23992:				; CODE XREF: dseg:22582  P		 /* DOS offset ---> 1B05:2 */
push	[bp+arg_0]
;     ***************************************************************************
db  50h	; P
db  9Ah	;   *
db  5Ah	; Z
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  13h
db  8Bh	;   *
db  46h	; F
db 0FEh	;   *
db    5
db  1Ch
db    0
db  50h	; P
db 0B8h	;   *
db  93h	;   *
db  62h	; b
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0B8h	;   *
db 0A8h	;   *
db  62h	; b
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_display_draw_province_header_data endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_display_draw_province_info_and_data proc far ; DATA XREF: game_view_territory_data+15B  t
; game_view_summary_data+1EC  t ...

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
push	[bp+arg_2]
push	[bp+arg_0]
push	cs
call	game_display_draw_province_header_data
mov	sp, bp

loc_239D5:				; CODE XREF: dseg:2498E  P dseg:25B74  P ...		 /* DOS offset ---> 1B09:5 */
push	[bp+arg_0]
push	cs
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf
game_display_draw_province_info_and_data endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_threaten_calc proc far

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 6
mov	[bp+var_2], 0
push	[bp+arg_2]
call	far ptr	59Dh:428h ; s_5DF8
add	sp, 2
mov	[bp+var_4], 0CA62h
jmp	short near ptr loc_13A3E+1
;     ***************************************************************************
nop
push	ax
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr loc_13A3A+1
push	current_province
push	[bp+var_6]
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jz	short near ptr loc_13A3A+1
push	[bp+var_6]
call	far ptr	542h:92h ; game_data_check_province_in_war

loc_23A26:				; CODE XREF: dseg:225A8  P dseg:2293D  P ...		 /* DOS offset ---> 1B0E:6 */
add	sp, 2
or	ax, ax
jnz	short near ptr loc_13A3A+1
push	[bp+var_6]
call	game_data_get_province_total_soldiers
add	sp, 2
add	[bp+var_2], ax
add	[bp+var_4], 2
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_6], ax
or	ax, ax
jnz	short near ptr loc_139FC+2
mov	ax, [bp+var_2]

loc_23A4E:				; CODE XREF: dseg:26626  P		 /* DOS offset ---> 1B10:E */
mov	cx, 6
sub	dx, dx
div	cx
push	ax
mov	ax, 4
mov	cl, game_difficulty ; game_diplomacy_threaten_calc
sub	ch, ch
sub	ax, cx
mov	cx, 1F4h
mul	cx
push	ax
call	far ptr	561h:18Ah ; math_truncate_decimal_value
mov	sp, bp
pop	bp
retf
game_diplomacy_threaten_calc endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_threaten_check proc far	; DATA XREF: game_diplomacy_threaten_result+25  t

var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= byte ptr -6
arg_0		= word ptr  6

; FUNCTION CHUNK AT 3A39 SIZE 00000089 BYTES
; FUNCTION CHUNK AT 3ADC SIZE 000000A6 BYTES

push	bp
mov	bp, sp
sub	sp, 0Ch
push	si
mov	bx, [bp+arg_0]
mov	bx, [bx]
mov	[bp+var_C], bx
mov	ax, [bx+1Ah]
test	options_value, 16
jz	short loc_13A96
cmp	byte ptr [bx+9], 5Fh ; '_'
jb	short near ptr loc_13AAF+1
sub	al, al
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	[bp+var_6], 0
mov	bl, [bp+var_6]
sub	bh, bh
shl	bx, 1
cmp	[bx+62C6h], ax
jz	short near ptr loc_13A8E+1
inc	[bp+var_6]
cmp	[bp+var_6], 7
jb	short near ptr loc_13A99+1
call	game_check_provinces_in_war
or	ax, ax
jz	short near ptr loc_13A8E+1
mov	bx, [bp+arg_0]
mov	bx, [bx+2]

loc_23ABF:				; CODE XREF: dseg:26872  P dseg:27C40  P ...		 /* DOS offset ---> 1B17:F */
mov	[bp+var_8], bx
cmp	word ptr [bx], 0
jnz	short near ptr loc_13A8E+1
mov	bx, [bp+arg_0]
push	word ptr [bx+2]
call	far ptr	59Dh:428h ; s_5DF8
add	sp, 2
mov	bx, 0CA62h
mov	[bp+var_A], bx
cmp	word ptr [bx], 0
jz	short near ptr loc_13AF8+1
push	word ptr [bx]
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr loc_13A8E+1
add	[bp+var_A], 2
mov	bx, [bp+var_A]
cmp	[bx], ax
jnz	short loc_13AE0
push	[bp+var_8]
push	cs
call	game_diplomacy_threaten_calc_sub
add	sp, 2
push	[bp+var_8]
mov	si, ax
call	game_data_get_province_total_soldiers
add	sp, 2
cmp	ax, si
jbe	short loc_13B17
jmp	near ptr loc_13A8E+1
;     ***************************************************************************
mov	bx, current_ruler
mov	al, [bx+6]
mov	cl, 3
sub	ah, ah
div	cl
mov	bx, [bp+var_C]
sub	al, [bx+9]
add	al, 100
pop	si
mov	sp, bp
pop	bp
retf
game_diplomacy_threaten_check endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_rival_tigers_select_rulers_sub	proc far
; DATA XREF: game_spy_rival_tigers_select_rulers_display+48  t
; game_spy_rival_tigers_select_rulers+F8  t

var_2		= word ptr -2
arg_0		= byte ptr  6

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_2], 46
mov	al, [bp+arg_0]
and	ax, 7
add	ax, 8
mov	cx, ax
shl	ax, 1
shl	ax, 1
shl	ax, 1
add	ax, cx
mov	bl, [bp+arg_0]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-3390h], 0
jz	short near ptr loc_13B8A+1
push	ax
push	[bp+var_2]
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
mov	ax, 4
push	ax
call	far ptr	3EFh:458h ; game_display_text_color
add	sp, 2
mov	ax, 62D4h
push	ax

loc_23B7A:				; CODE XREF: dseg:24A2E  P dseg:2790B  P ...		 /* DOS offset ---> 1B23:A */
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	ax, 7
push	ax
call	far ptr	3EFh:458h ; game_display_text_color
mov	sp, bp
pop	bp
retf
game_spy_rival_tigers_select_rulers_sub	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_rival_tigers_select_rulers_display proc far
; DATA XREF: game_spy_rival_tigers_select_rulers+49  t
; game_spy_rival_tigers_select_rulers+11F  t

var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  6
arg_2		= byte ptr  8

; FUNCTION CHUNK AT 3BD3 SIZE 0000002C BYTES

push	bp
mov	bp, sp
sub	sp, 6
sub	ax, ax
push	ax
mov	al, [bp+arg_2]
push	ax
mov	cl, [bp+arg_0]
push	cx
call	far ptr	0FE9h:0Ch ; game_ruler_hos_tru_table_query_sub
add	sp, 6
mov	[bp+var_6], al
mov	al, [bp+arg_0]
sub	ah, ah
mov	cx, ax
dec	ax
mov	[bp+var_4], ax
mov	dl, [bp+arg_2]
sub	dh, dh
push	dx
add	cx, 7
push	cx
call	far ptr	561h:18Ah ; math_truncate_decimal_value
add	sp, 4
sub	ah, ah
mov	[bp+var_2], ax
cmp	ax, [bp+var_4]
jbe	short loc_13BE9
mov	al, byte ptr [bp+var_4]
push	ax
push	cs
call	game_spy_rival_tigers_select_rulers_sub
add	sp, 2
inc	[bp+var_4]
mov	ax, [bp+var_2]
cmp	[bp+var_4], ax
jb	short loc_13BD3

loc_23BE9:				; CODE XREF: dseg:22A54  P dseg:23D50  P ...		 /* DOS offset ---> 1B2A:9 */
mov	al, [bp+var_6]
mov	sp, bp
pop	bp
retf
game_spy_rival_tigers_select_rulers_display endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_rival_tigers_select_rulers proc far ; DATA XREF: game_spy_rival_tigers+112  t

var_E		= byte ptr -0Eh
var_C		= byte ptr -0Ch
var_A		= byte ptr -0Ah
var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2

; FUNCTION CHUNK AT 3C46 SIZE 0000001B BYTES
; FUNCTION CHUNK AT 3C80 SIZE 00000004 BYTES
; FUNCTION CHUNK AT 3CC5 SIZE 00000047 BYTES
; FUNCTION CHUNK AT 3D2A SIZE 00000002 BYTES

push	bp
mov	bp, sp
sub	sp, 0Eh
sub	ax, ax
push	ax
call	far ptr	59Dh:320h ; game_data_get_rulers_in_game
add	sp, 2
mov	[bp+var_6], al
cmp	al, 2
jnb	short near ptr loc_13C17+1
mov	ax, 62DCh	; 0x35B7A
; Text 'No ruler can carry out this trick '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
jmp	loc_13D2A
;     ***************************************************************************
nop
call	far ptr	60Dh:2E2h ; s_63B2
cmp	[bp+var_6], 8
jbe	short locret_13C28
sub	al, al
jmp	short near ptr locret_13C28+2
;     ***************************************************************************
nop
mov	al, 1
mov	[bp+var_A], al
mov	[bp+var_2], 0
mov	al, [bp+var_6]
push	ax
mov	al, 1
push	ax
push	cs
call	game_spy_rival_tigers_select_rulers_display
add	sp, 4
mov	[bp+var_E], al
mov	[bp+var_C], 1
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
cmp	[bp+var_A], 0
jnz	short loc_13C5D
mov	ax, 62FEh	; 0x35B9C
; Text:	': View next page) '
push	ax

loc_23C55:				; CODE XREF: dseg:26EFB  P dseg:26F77  P ...		 /* DOS offset ---> 1B31:5 */
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 2
mov	al, [bp+var_6]
sub	ah, ah
push	ax
mov	al, [bp+var_A]
push	ax
mov	ax, 631Ah	; 0x35BB8
; Text:	'Do this to whom and whom '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query

loc_23C70:				; CODE XREF: dseg:26F5F  P dseg:29B36  P		 /* DOS offset ---> 1B33:0 */
add	sp, 6
mov	[bp+var_4], ax
or	ax, ax
jz	short loc_13CF2
inc	ax
jnz	short loc_13C80
jmp	near ptr unk_13D1C
;     ***************************************************************************
dec	[bp+var_4]
mov	bx, [bp+var_4]
shl	bx, 1
mov	ax, [bx-3508h]
push	ax
call	far ptr	542h:0DAh ; s_54FA
add	sp, 2
or	ax, ax
jz	short loc_13C46
mov	bx, [bp+var_4]
shl	bx, 1
cmp	word ptr [bx-3390h], 0
jz	short near ptr unk_13CB6
dec	[bp+var_2]
mov	bx, [bp+var_4]
shl	bx, 1
mov	word ptr [bx-3390h], 0
jmp	short loc_13CCA
;     ***************************************************************************
nop
cmp	[bp+var_2], 2
jz	short loc_13C46
inc	[bp+var_2]
mov	bx, [bp+var_4]
shl	bx, 1
mov	word ptr [bx-3390h], 1
mov	al, [bp+var_E]
sub	ah, ah
cmp	ax, [bp+var_4]
ja	short loc_13CD7
jmp	loc_13C46
;     ***************************************************************************
mov	al, [bp+var_C]
dec	ax
cmp	ax, [bp+var_4]
jbe	short near ptr loc_13CE2+1
jmp	loc_13C46
;     ***************************************************************************
mov	al, byte ptr [bp+var_4]
push	ax
push	cs
call	game_spy_rival_tigers_select_rulers_sub
add	sp, 2
jmp	loc_13C46
;     ***************************************************************************
nop
mov	al, [bp+var_E]
cmp	[bp+var_6], al
jnz	short loc_13CFE
mov	al, 1
jmp	short loc_13D03
;     ***************************************************************************

loc_23CFE:				; CODE XREF: dseg:26F22  P dseg:29AF9  P		 /* DOS offset ---> 1B3B:E */
mov	al, [bp+var_E]
inc	al
mov	[bp+var_C], al
mov	al, [bp+var_6]
push	ax
mov	al, [bp+var_C]
push	ax
push	cs
call	game_spy_rival_tigers_select_rulers_display
add	sp, 4
mov	[bp+var_E], al
jmp	loc_13C46
;     ***************************************************************************
nop
cmp	[bp+var_2], 2
jnz	short loc_13D2A
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_spy_rival_tigers_select_rulers endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_data_order proc far		; DATA XREF: game_view_other_province_queries+112  t
; game_view_func+B8  t

var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 5
push	ax
mov	ax, 1
push	ax
mov	ax, 6334h	; 0x35BD2
; Text:	'1. Intellect 4. Men
; 2. War ability 5. Loyalty
; 3. Charm
; List according to which data '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short near ptr loc_13D62+1
mov	al, byte ptr [bp+var_2]
push	ax
push	[bp+arg_0]
call	game_view_data_order_set
mov	sp, bp
pop	bp
retf
game_view_data_order endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_general_data proc far		; DATA XREF: game_view_general_select_general+23  t

var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= word ptr  6
arg_4		= word ptr  8

; FUNCTION CHUNK AT 3DFA SIZE 00000019 BYTES
; FUNCTION CHUNK AT 3E30 SIZE 00000005 BYTES
; FUNCTION CHUNK AT 3E39 SIZE 0000001E BYTES
; FUNCTION CHUNK AT 3F0A SIZE 00000033 BYTES

push	bp
mov	bp, sp
sub	sp, 8
call	far ptr	4B5h:266h ; game_gfx_blk_bkgrnd_shape_1
mov	ax, 61
push	ax
call	far ptr	4B5h:33Eh ; game_gfx_province_divion_lines_display
add	sp, 2
mov	ax, 144
push	ax
call	far ptr	4B5h:33Eh ; game_gfx_province_divion_lines_display
add	sp, 2
mov	bx, [bp+arg_4]
push	word ptr [bx+1Ah]
mov	ax, 80
push	ax
mov	ax, 38
push	ax
call	far ptr	4B5h:6A4h ; s_51F4
add	sp, 6
push	[bp+arg_2]
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
mov	[bp+var_2], ax
mov	ax, 63ADh
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
push	[bp+arg_4]
call	far ptr	525h:84h ; s_52D4
add	sp, 2
mov	byte ptr [bp+var_4], al
sub	ah, ah
or	ax, ax
jz	short near ptr unk_13DEC
sub	ax, 4
jz	short loc_13E30
mov	bx, [bp+var_2]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 63D5h	; 0x35C73
; Text:	'%s's cohort '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
jmp	short near ptr loc_13E3A+2
;     ***************************************************************************
nop
mov	bx, [bp+var_2]
cmp	byte ptr [bx+21h], 0FFh
jnz	short loc_13DFA
mov	ax, 63B6h

loc_23DF8:				; CODE XREF: dseg:27414  P dseg:29BB9  P		 /* DOS offset ---> 1B4B:8 */
jmp	short near ptr loc_13E06+2
;     ***************************************************************************
mov	al, 41
mul	byte ptr [bx+21h]
mov	bx, ax
mov	ax, [bx+2B34h]
add	ax, 1Ch
push	ax
mov	ax, 63BBh	; 0x35C59
; Text:	'(Marr: %s) '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	ax, 68
push	ax
mov	ax, 39
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
mov	ax, 63C6h	; 0x35C6A
; Text:	'Free '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
jmp	short loc_13E39
;     ***************************************************************************
mov	ax, 63CCh
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	ax, 128
push	ax
mov	ax, 38
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
mov	ax, [bp+arg_4]
add	ax, 1Ch
push	ax
mov	ax, 63E5h	; 0x35C83
; Text:	'%-12s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	bx, [bp+arg_4]
push	word ptr [bx+12h]
mov	al, [bx+16h]
sub	ah, ah
push	ax
push	bx
call	far ptr	525h:0EEh ; game_data_get_generals_weapons_and_arms
add	sp, 2
sub	ah, ah
push	ax
mov	ax, 63EFh	; 0x35C8D
; Text:	'Arm '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 8
cmp	byte ptr [bp+var_4], 0
jz	short near ptr loc_13EB1+1
cmp	byte ptr [bp+var_4], 4
jz	short near ptr loc_13EB1+1
mov	bx, [bp+arg_4]
mov	al, [bx+0Ch]
sub	ah, ah
push	ax
mov	bl, byte ptr [bp+var_4]
sub	bh, bh
shl	bx, 1
push	word ptr [bx+64A4h]
mov	ax, 644Eh	; 0x35CEC
; Text:	'%s %3d %4d '
push	ax

loc_23EA7:				; CODE XREF: dseg:27457  P dseg:2748B  P ...		 /* DOS offset ---> 1B56:7 */
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
jmp	short near ptr loc_13EBD+1
;     ***************************************************************************
nop
mov	ax, 6443h	; 0x35CE1
; Text:	' ---   --- '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	bx, [bp+arg_4]
mov	al, [bx+19h]
sub	ah, ah
sub	ax, year_value
neg	ax
inc	ax
push	ax
mov	ax, 6457h
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
cmp	byte ptr [bp+var_4], 0
jz	short near ptr unk_13EFE
cmp	byte ptr [bp+var_4], 4
jz	short near ptr unk_13EFE
mov	bx, [bp+arg_4]
mov	al, [bx+0Bh]
sub	ah, ah
push	ax
mov	ax, 6490h	; 0x35D2E
; Text:	'%4d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
jmp	short loc_13F0A
;     ***************************************************************************
nop
mov	ax, 648Bh
push	ax

loc_23F02:				; CODE XREF: dseg:26EF0  P dseg:29AC7  P		 /* DOS offset ---> 1B5C:2 */
call	far ptr	3EFh:6C0h ; system_execute_function
;     ***************************************************************************
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db    8
db  8Ah	;   *
db  47h	; G
db    6
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db  8Ah	;   *
db  47h	; G
db    5
db  50h	; P
db  8Ah	;   *
db  47h	; G
db    4
db  50h	; P
db 0B8h	;   *
db  94h	;   *
db  64h	; d
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_view_general_data endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_general_select_general proc far ; DATA XREF: game_view_other_province_queries+F2  t
; game_view_func+86  t

var_4		= byte ptr -4
arg_0		= word ptr  6

; FUNCTION CHUNK AT 3F5B SIZE 0000000E BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	al, 3
push	ax
push	[bp+arg_0]
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
mov	[bp+var_4], al
or	al, al
jz	short near ptr loc_13F87+1
jmp	short loc_13F5B
;     ***************************************************************************
nop
push	ax
push	[bp+arg_0]
push	cs
call	game_view_general_data
add	sp, 4
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
call	far ptr	57Ch:1FEh ; system_sound_6_dings
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 64AEh
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
sub	al, al
push	ax
mov	cl, [bp+var_4]
push	cx
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
or	ax, ax
jnz	short near ptr unk_13F46
push	[bp+arg_0]
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf
game_view_general_select_general endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_summary_gfx_table_lines proc far
; DATA XREF: game_view_summary_territory_gfx_table+8C  t
; game_view_territory_data+12F  t ...

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

; FUNCTION CHUNK AT 403C SIZE 0000002F BYTES

push	bp
mov	bp, sp
sub	sp, 4

loc_23F92:				; CODE XREF: dseg:2679D  P dseg:27BF6  P		 /* DOS offset ---> 1B65:2 */
mov	ax, 6
push	ax
mov	ax, 1Fh
push	ax
mov	cx, 277h
push	cx
push	ax
mov	ax, 128h
push	ax
call	far ptr	3EFh:70Ch ; s_45FC
add	sp, 0Ah
sub	ax, ax
push	ax
mov	ax, 159
push	ax
mov	ax, 42
push	ax
mov	ax, 32
push	ax
mov	ax, 37
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	al, byte ptr [bp+arg_0]
sub	ah, ah
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx

loc_23FD8:				; CODE XREF: dseg:22928  P		 /* DOS offset ---> 1B69:8 */
add	ax, 64B8h
mov	[bp+var_4], ax
cmp	byte ptr [bp+arg_0], 2
jb	short near ptr loc_13FE9+1
mov	ax, 13Fh
jmp	short near ptr loc_13FEC+1
;     ***************************************************************************
nop
mov	ax, 14Ah
mov	[bp+var_2], ax
cmp	ax, 258h
jnb	short loc_1403C
sub	ax, ax
push	ax

loc_23FF8:				; CODE XREF: dseg:2892F  P dseg:28D6E  P ...		 /* DOS offset ---> 1B6B:8 */
mov	ax, 1Fh
push	ax
push	[bp+var_2]
mov	ax, 8
push	ax
push	[bp+var_2]
call	far ptr	3EFh:70Ch ; s_45FC
add	sp, 0Ah
mov	ax, 6
push	ax
mov	ax, 143
push	ax
push	[bp+var_2]
mov	ax, 32
push	ax
push	[bp+var_2]

loc_24020:				; CODE XREF: dseg:2275E  P dseg:22D2A  P ...		 /* DOS offset ---> 1B6E:0 */
call	far ptr	3EFh:70Ch ; s_45FC
add	sp, 0Ah
mov	bx, [bp+var_4]
inc	[bp+var_4]
mov	al, [bx]
sub	ah, ah
add	[bp+var_2], ax
cmp	[bp+var_2], 258h
jb	short near ptr loc_13FF4+1
mov	ax, 144
push	ax
call	far ptr	4B5h:33Eh ; game_gfx_province_divion_lines_display
mov	sp, bp
pop	bp
retf
game_view_summary_gfx_table_lines endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_summary_territory_gfx_table proc far ; DATA XREF: game_view_territory_data+1B  t
; game_view_summary_data+21  t

var_34		= word ptr -34h
var_32		= word ptr -32h
var_26		= word ptr -26h
var_24		= word ptr -24h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= byte ptr  6
arg_2		= dword	ptr  8

; FUNCTION CHUNK AT 4088 SIZE 0000005F BYTES
; FUNCTION CHUNK AT 40E8 SIZE 00000077 BYTES
; FUNCTION CHUNK AT 4160 SIZE 0000000B BYTES
; FUNCTION CHUNK AT 416C SIZE 00000017 BYTES
; FUNCTION CHUNK AT 4184 SIZE 00000043 BYTES
; FUNCTION CHUNK AT 41C8 SIZE 0000000B BYTES
; FUNCTION CHUNK AT 41D4 SIZE 0000002D BYTES
; FUNCTION CHUNK AT 4202 SIZE 00000044 BYTES
; FUNCTION CHUNK AT 428C SIZE 00000020 BYTES

push	bp

loc_2404B:				; CODE XREF: dseg:231F1  P dseg:26FCA  P		 /* DOS offset ---> 1B70:B */
mov	bp, sp
sub	sp, 4
push	si
call	far ptr	4B5h:244h ; game_gfx_blk_bkgrnd_shape_3
mov	ax, 7
push	ax
mov	cx, 18h
push	cx
mov	cx, 42
push	cx
mov	cx, 8
push	cx
mov	cx, 37
push	cx
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
mov	ax, 6561h
push	ax

loc_24076:				; CODE XREF: dseg:23214  P		 /* DOS offset ---> 1B73:6 */
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	[bp+var_2], 0
mov	al, [bp+arg_0]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, cx
mov	[bp+var_4], ax
mov	ax, 10h
push	ax
mov	bl, [bp+var_2]
sub	bh, bh
add	bx, [bp+var_4]
shl	bx, 1
push	word ptr [bx+659Eh]
mov	si, bx
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
push	word ptr [si+6574h]
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
inc	[bp+var_2]
cmp	[bp+var_2], 7
jb	short loc_14094
mov	ax, 656Ah
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	al, [bp+arg_0]
push	ax
push	cs
call	game_view_summary_gfx_table_lines
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
game_view_summary_territory_gfx_table endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_territory_data proc far	; DATA XREF: game_view_func+AC  t

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 8
mov	bx, current_ruler
mov	ax, [bx+2]
mov	[bp+var_4], ax
or	ax, ax
jnz	short near ptr loc_140F8+1
jmp	near ptr loc_14241+1
;     ***************************************************************************
mov	al, 2
push	ax
push	cs
call	game_view_summary_territory_gfx_table
add	sp, 2
mov	ax, 3
push	ax
call	far ptr	3EFh:484h ; game_display_draw_table_lines
add	sp, 2
sub	ax, ax
mov	[bp+var_2], ax
mov	[bp+var_6], ax
mov	bx, [bp+var_4]
mov	al, [bx+12h]
and	al, 4
cmp	al, 1
sbb	ax, ax
and	ax, 2
add	ax, 5
mov	[bp+var_8], ax
mov	ax, [bp+var_6]
mov	cx, 7
cwd
idiv	cx
mov	cl, 4
shl	dx, cl
add	dx, 36
push	dx
mov	ax, 37
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
push	[bp+var_4]
call	far ptr	525h:64h ; game_data_get_province_number
add	sp, 2

loc_24154:				; CODE XREF: dseg:291D8  P		 /* DOS offset ---> 1B81:4 */
sub	ah, ah
inc	ax
push	ax
push	[bp+var_8]
mov	ax, 65C8h
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
push	[bp+var_4]
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jz	short loc_14184
mov	ax, 65D1h
push	ax

loc_2417A:				; CODE XREF: dseg:22E66  P dseg:23157  P ...		 /* DOS offset ---> 1B83:A */
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
jmp	short near ptr loc_141C5+1
;     ***************************************************************************
mov	bx, [bp+var_4]
push	word ptr [bx+2]
call	far ptr	525h:158h ; game_data_get_generals_or_free_in_province
add	sp, 2
sub	ah, ah
push	ax
mov	bx, [bp+var_4]
mov	al, [bx+17h]
push	ax
push	bx
call	far ptr	525h:122h ; math_return_total_province_troops
add	sp, 2
push	dx
push	ax
mov	bx, [bp+var_4]
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
push	word ptr [bx+8]
mov	ax, [bx+2]
add	ax, 1Ch
push	ax

loc_241BA:				; CODE XREF: dseg:22E6B  P dseg:2315C  P ...		 /* DOS offset ---> 1B87:A */
mov	ax, 6601h
;     ***************************************************************************
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db  12h
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  16h
db 0FFh
db  46h	; F
db 0FAh	;   *
db  8Bh	;   *
db  46h	; F
db 0FAh	;   *
db 0B9h	;   *
db    7
db    0
db  99h	;   *
db 0F7h	;   *
db 0F9h	;   *
db  0Bh
db 0D2h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db  32h	; 2
db 0FFh
;     ***************************************************************************
jmp	short near ptr loc_141EC+1
;     ***************************************************************************
nop
mov	[bp+var_2], 1
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
cmp	[bp+var_2], 0
jnz	short near ptr loc_14219+1
mov	ax, 661Eh
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jz	short loc_1421F

loc_2420D:				; CODE XREF: dseg:22DF0  P dseg:22ECE  P		 /* DOS offset ---> 1B8C:D */
mov	al, 2
push	ax
push	cs
call	game_view_summary_gfx_table_lines
add	sp, 2
jmp	loc_14117
;     ***************************************************************************
call	far ptr	57Ch:1FEh
sub	ax, ax
push	ax
call	far ptr	3EFh:484h ; game_display_draw_table_lines
add	sp, 2
call	far ptr	4B5h:244h ; game_gfx_blk_bkgrnd_shape_3
cmp	[bp+arg_0], 0
jz	short near ptr loc_14241+1
mov	ax, 1
push	ax

loc_24239:				; CODE XREF: dseg:22DEB  P dseg:2A558  P		 /* DOS offset ---> 1B8F:9 */
push	current_province
call	game_display_draw_province_info_and_data
mov	sp, bp
pop	bp
retf
game_view_territory_data endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_summary_data proc far		; DATA XREF: game_view_other_province_queries+106  t
; game_view_func+9E  t

var_E		= byte ptr -0Eh
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= byte ptr  0Ah

; FUNCTION CHUNK AT 4380 SIZE 00000004 BYTES

push	bp
mov	bp, sp
sub	sp, 10h
push	si
mov	al, 3
push	ax
push	[bp+arg_0]
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
or	al, al
jnz	short near ptr loc_14260+2
jmp	loc_1443A
;     ***************************************************************************

loc_24262:				; CODE XREF: dseg:226AC  P dseg:22757  P		 /* DOS offset ---> 1B92:2 */
mov	al, [bp+arg_4]
;     ***************************************************************************
db  50h	; P
db  0Eh
db 0E8h	;   *
db 0E0h	;   *
db 0FDh	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db 0B8h	;   *
db    3
db    0
db  50h	; P
db  9Ah	;   *
db  84h	;   *
db    4
unk_24274	db 0EFh	;   *		; CODE XREF: dseg:226EC  P
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  4Ah	; J
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db    4
db  8Bh	;   *
db 0D8h	;   *
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0F6h	;   *
db 0BBh	;   *
db 0B2h	;   *
db 0CEh	;   *
db  89h	;   *
db  5Eh	; ^
db 0FCh	;   *
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FAh	;   *
db 0C7h	;   *
db  46h	; F
db 0FEh	;   *
db    0
db    0
db 0C6h	;   *
db  46h	; F
db 0F2h	;   *
db    0
db  8Ah	;   *
db  46h	; F
db 0F2h	;   *
db 0B1h	;   *
db    7
db  2Ah	; *
db 0E4h	;   *
db 0F6h	;   *
db 0F1h	;   *
db  8Ah	;   *
db 0C4h	;   *
db  2Ah	; *
db 0E4h	;   *
db 0B1h	;   *
db    4
db 0D3h	;   *
db 0E0h	;   *
db    5
db  24h	; $
db    0
db  50h	; P
db 0B9h	;   *
db  25h	; %
db    0
db  51h	; Q
db  8Bh	;   *
db 0F0h	;   *
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0FFh
db  76h	; v
db 0FAh	;   *
db  9Ah	;   *
db  84h	;   *
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Ah	;   *
db 0D8h	;   *
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db 0FFh
db 0B7h	;   *
db  94h	;   *
db  66h	; f
db 0B8h	;   *
db  4Dh	; M
db  66h	; f
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db  56h	; V
db 0B8h	;   *
db  2Ah	; *
db    0
db  50h	; P
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
unk_242F0	db    3			; CODE XREF: dseg:29241  P
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db  46h	; F
db 0FAh	;   *
db    5
db  1Ch
db    0
db  50h	; P
db 0FFh
db  76h	; v
db 0FAh	;   *
db  9Ah	;   *
db  7Eh	; ~
db    0
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  3Dh	; =
db    1
db    0
db  1Bh
db 0C0h	;   *
db  24h	; $
db 0FCh	;   *
db    5
db    7
db    0
db  50h	; P
db 0B8h	;   *
db  52h	; R
db  66h	; f
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    6
db  8Bh	;   *
db  46h	; F
db 0FAh	;   *
db  39h	; 9
db  46h	; F
db 0F6h	;   *
db  74h	; t
db  33h	; 3
db  50h	; P
db  9Ah	;   *
db  84h	;   *
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  3Ch	; <
db    4
db  74h	; t
db  26h	; &
db  80h	;   *
db  7Eh	; ~
db  0Ah
db    0
db  75h	; u
db    8
db  8Bh	;   *
db  5Eh	; ^
db 0FAh	;   *
db  8Ah	;   *
db  47h	; G
db  0Bh
db 0EBh	;   *
db    6
;     ***************************************************************************
mov	bx, [bp+var_6]
mov	al, [bx+0Ch]
sub	ah, ah
push	ax
mov	ax, 6667h	; Loy
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
jmp	short near ptr loc_14363+1
;     ***************************************************************************
nop
mov	ax, 6662h	; Int
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
cmp	[bp+arg_4], 0
jnz	short loc_14380
mov	bx, [bp+var_6]
mov	al, [bx+6]
sub	ah, ah
push	ax
mov	al, [bx+5]
push	ax
mov	al, [bx+4]
push	ax
mov	ax, 666Ch	; War
jmp	short near ptr loc_1439A+2
;     ***************************************************************************
mov	bx, [bp+var_6]
push	word ptr [bx+14h]
push	bx
call	far ptr	525h:0EEh ; game_data_get_generals_weapons_and_arms

loc_2438C:				; CODE XREF: dseg:277E6  P dseg:29837  P ...		 /* DOS offset ---> 1BA4:C */
add	sp, 2
sub	ah, ah
push	ax
mov	bx, [bp+var_6]
mov	al, [bx+16h]
push	ax
mov	ax, 6679h	; Chr
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 8
mov	bx, [bp+var_6]
push	word ptr [bx+12h]
mov	ax, 6686h	; Men
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
add	[bp+var_4], 2
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_6], ax
or	ax, ax
jz	short loc_143DC
inc	[bp+var_E]
mov	al, [bp+var_E]
mov	cl, 7
sub	ah, ah
div	cl
or	ah, ah
jz	short near ptr loc_143D7+3
jmp	loc_142A3
;     ***************************************************************************
jmp	short near ptr s_43E0+1
;     ***************************************************************************
mov	[bp+var_2], 1
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
cmp	[bp+var_2], 0
jnz	short loc_14410
mov	ax, 668Ah	; View Next
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jz	short loc_14415
mov	al, [bp+arg_4]
push	ax
push	cs
call	game_view_summary_gfx_table_lines
add	sp, 2
jmp	loc_142A3
;     ***************************************************************************
nop
call	far ptr	57Ch:1FEh ; game_display_draw_table_lines
sub	ax, ax
push	ax
call	far ptr	3EFh:484h ; game_display_generals_list_x_y
add	sp, 2
call	far ptr	4B5h:244h ; game_gfx_blk_bkgrnd_shape_3
cmp	[bp+arg_2], 0
jz	short loc_1443A
mov	ax, 1
push	ax
push	[bp+arg_0]
call	game_display_draw_province_info_and_data
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
game_view_summary_data endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_other_province_sub_3_1 proc far ; DATA XREF: game_view_other_province_sub_3+88  t

var_6		= word ptr -6
var_4		= word ptr -4
arg_0		= byte ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 6
sub	ax, ax

loc_24448:				; CODE XREF: dseg:27B16  P dseg:2A1C9  P ...		 /* DOS offset ---> 1BB0:8 */
mov	[bp+var_4], ax
mov	[bp+var_6], ax
mov	bx, [bp+arg_2]
mov	ax, [bx+4]
or	ax, ax
jz	short near ptr loc_14469+2
mov	bx, ax
mov	ax, [bx+12h]
sub	dx, dx
add	[bp+var_6], ax
adc	[bp+var_4], dx

loc_24465:				; CODE XREF: dseg:22A12  P dseg:22B8F  P ...		 /* DOS offset ---> 1BB2:5 */
mov	ax, [bx]
or	ax, ax
jnz	short near ptr unk_14458
cmp	[bp+arg_0], 0
jnz	short loc_14491
mov	bx, [bp+arg_2]
mov	bx, [bx+2]
mov	ax, [bx+2]
or	ax, ax
jz	short loc_14491
mov	bx, ax
mov	ax, [bx+12h]
sub	dx, dx
add	[bp+var_6], ax
adc	[bp+var_4], dx
mov	ax, [bx]
or	ax, ax
jnz	short near ptr loc_1447C+2
mov	ax, [bp+var_6]
mov	dx, [bp+var_4]
mov	sp, bp
pop	bp
retf
game_view_other_province_sub_3_1 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_other_province_sub_3_2 proc far ; DATA XREF: game_view_other_province_sub_3+98  t

var_4		= byte ptr -4
arg_0		= byte ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_4], 0
mov	bx, [bp+arg_2]
mov	ax, [bx+4]
or	ax, ax
jz	short near ptr loc_144BA+1
inc	[bp+var_4]
mov	bx, ax
mov	ax, [bx]
or	ax, ax
jnz	short loc_144B0
cmp	[bp+arg_0], 0
jnz	short near ptr loc_144D6+3
mov	bx, [bp+arg_2]
mov	bx, [bx+2]
mov	ax, [bx+2]
or	ax, ax
jz	short near ptr loc_144D6+3
inc	[bp+var_4]
mov	bx, ax
mov	ax, [bx]
or	ax, ax
jnz	short near ptr loc_144CB+3
mov	al, [bp+var_4]
mov	sp, bp
pop	bp
retf
game_view_other_province_sub_3_2 endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_other_province_sub_3 proc far	; DATA XREF: game_view_other_province_view_another+1C  t

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2

push	bp
mov	bp, sp
sub	sp, 0Ah
push	si
mov	[bp+var_4], 0CB72h
mov	[bp+var_8], 0CAA1h
call	far ptr	4B5h:282h
mov	ax, 64
push	ax
mov	ax, 37
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 66BAh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 48h	; 'H'
push	ax
mov	ax, 2Dh	; '-'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 66C5h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	[bp+var_2], 0
mov	bl, [bp+var_2]
sub	bh, bh
shl	bx, 1
push	word ptr [bx+6736h]
mov	ax, 25h	; '%'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	bx, [bp+var_4]
cmp	word ptr [bx], 0
jnz	short near ptr loc_14554+2
mov	ax, 6724h
jmp	short near ptr loc_1455A+3
;     ***************************************************************************
mov	bx, [bx]
mov	ax, [bx]
add	ax, 1Ch
mov	[bp+var_A], ax
push	[bp+var_4]
mov	al, [bp+var_2]
push	ax
push	cs
call	game_view_other_province_sub_3_1 ; *
add	sp, 4
push	dx
push	ax
push	[bp+var_4]
mov	al, [bp+var_2]
push	ax
push	cs
call	game_view_other_province_sub_3_2 ; *
add	sp, 4
sub	ah, ah
push	ax
push	[bp+var_A]
mov	bl, [bp+var_2]
sub	bh, bh
shl	bx, 1
push	word ptr [bx+671Ch]
mov	ax, 66FAh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Ch
add	[bp+var_4], 0Ah
inc	[bp+var_2]
cmp	[bp+var_2], 4
jb	short near ptr loc_14530+2
mov	[bp+var_6], 0
mov	al, [bp+var_6]
sub	ah, ah
mov	cx, 18h
mov	bx, ax
imul	cx
add	ax, 88
push	ax
mov	ax, 65
push	ax
mov	si, bx
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, si
shl	si, 1
shl	si, 1
mov	bx, [bp+var_8]
push	word ptr [bx+si+6]
push	word ptr [bx+si+4]
mov	bx, ax

loc_245DB:				; CODE XREF: dseg:22F5C  P dseg:25EFD  P ...		 /* DOS offset ---> 1BC9:B */
shl	bx, 1
mov	si, [bp+var_8]
push	word ptr [bx+si]
mov	ax, 6712h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
inc	[bp+var_6]
cmp	[bp+var_6], 2
jb	short near ptr loc_145AB+1
pop	si
mov	sp, bp
pop	bp
retf
game_view_other_province_sub_3 endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_other_province_sub_2 proc far	; DATA XREF: game_view_other_province_sub+106  t

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 2
mov	bx, [bp+arg_2]
mov	bx, [bx+2]
mov	ax, [bx+2]
mov	[bp+var_2], ax
or	ax, ax
jz	short near ptr loc_14624+2
mov	ax, [bp+arg_0]
cmp	[bp+var_2], ax
jz	short loc_1464C

loc_2461A:				; CODE XREF: dseg:26BD4  P dseg:26BE6  P ...		 /* DOS offset ---> 1BCD:A */
mov	bx, [bp+var_2]
;     ***************************************************************************
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0ECh	;   *
db  8Bh	;   *
db  5Eh	; ^
db    8
db  8Bh	;   *
db  47h	; G
db    4
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  1Ch
db  8Bh	;   *
db  46h	; F
db    6
db  39h	; 9
db  46h	; F
db 0FEh	;   *
db  74h	; t
db  11h
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0ECh	;   *
db  8Bh	;   *
unk_24648	db 0E5h	;   *		; CODE XREF: dseg:22A01  P dseg:22B7E  P ...
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_view_other_province_sub_2 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_other_province_sub proc far	; DATA XREF: game_view_other_province_view_another+15  t

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 6
mov	ax, [bp+arg_0]
cmp	word_13574, ax
jnz	short near ptr loc_14663+3
jmp	near ptr loc_1477F+1
;     ***************************************************************************
mov	word_13574, ax
mov	[bp+var_4], 0CB72h
mov	cx, 7
push	cx
mov	cx, 58
push	cx
mov	cx, 42
push	cx
mov	cx, 3
push	cx
mov	cx, 37
push	cx
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
call	far ptr	4B5h:282h ; game_gfx_blk_bkgrnd_shape_4
mov	ax, 0Ch
push	ax
mov	ax, 41
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
push	[bp+arg_0]
call	far ptr	525h:18h ; game_data_get_province_governor_name
add	sp, 2
push	ax
push	[bp+arg_0]
call	far ptr	525h:64h ; game_data_get_province_number
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, 6742h	; 0x35FDD
; Text:	'^ '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
mov	ax, 4
push	ax
mov	ax, 200h
push	ax
call	far ptr	4B5h:6ECh ; s_523C
add	sp, 4
mov	bx, word ptr loc_1CB76
push	word ptr [bx+1Ah]
mov	ax, 0Ch
push	ax
mov	ax, 65
push	ax
call	far ptr	4B5h:6A4h ; s_51F4
add	sp, 6
push	[bp+arg_0]
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
mov	bx, ax
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 6754h	; 0x35FF1
; Text:	'Ruler: %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
push	[bp+arg_0]
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
mov	bx, ax
mov	al, [bx+6]
sub	ah, ah
push	ax
mov	ax, 6768h	; 0x36005
; Text:	'Trust %3d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	ax, word ptr loc_1CB76
add	ax, 1Ch
push	ax
mov	ax, 6778h	; 0x36015
; Text:	'Governor: %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
push	[bp+arg_0]
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
mov	bx, ax
mov	ax, [bx+4]
mov	[bp+var_2], ax

loc_24751:				; CODE XREF: dseg:22E5E  P dseg:25A44  P ...		 /* DOS offset ---> 1BE1:1 */
or	ax, ax
jz	short near ptr loc_14776+1
push	[bp+var_4]
push	ax
push	cs
call	game_view_other_province_sub_2
add	sp, 4
or	ax, ax
jz	short near ptr loc_14776+1
mov	ax, [bp+var_2]
add	ax, 1Ch
push	ax
mov	ax, 678Dh	; 0x3602A
; Text:	'Advisor %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	ax, 67A2h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
mov	sp, bp
pop	bp
retf
game_view_other_province_sub endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_other_province_view_another proc far ; DATA XREF: game_view_other_province+70  t

arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 2
push	[bp+arg_0]
call	far ptr	59Dh:6	; s_59D6
add	sp, 2
push	[bp+arg_0]
push	cs
call	game_view_other_province_sub
add	sp, 2
push	cs
call	game_view_other_province_sub_3 ; *
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 67AEh	; 0x3604B
; Text:	'View another province '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jz	short near ptr loc_147BF+1
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_view_other_province_view_another endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_other_province_queries proc far ; DATA XREF: game_view_other_province+7A  t

var_2		= word ptr -2
arg_2		= word ptr  6

push	bp

loc_247C5:				; CODE XREF: dseg:25CD4  P		 /* DOS offset ---> 1BE8:5 */
mov	bp, sp
sub	sp, 2
mov	ax, [bp+arg_2]
cmp	word_13574, ax
jnz	short near ptr loc_147D5+1
jmp	near ptr loc_1486B+2
;     ***************************************************************************
mov	ax, 1
push	ax
push	[bp+arg_2]
call	game_display_draw_province_header_data
add	sp, 4
push	[bp+arg_2]
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1486B+2
push	[bp+arg_2]
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
push	ax
call	far ptr	542h:0BAh ; s_54DA
add	sp, 2
or	ax, ax
jz	short near ptr loc_1486B+2
push	[bp+arg_2]
push	current_province
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jz	short near ptr loc_1486B+2
push	[bp+arg_2]
call	far ptr	542h:0A8h ; game_data_get_province_delegate_policy
add	sp, 2
or	ax, ax
jz	short near ptr loc_1486B+2
mov	ax, 90
push	ax
mov	ax, 38
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
mov	ax, 67DEh
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	bx, [bp+arg_2]
mov	bl, [bx+12h]
and	bx, 3
shl	bx, 1
push	word ptr [bx+6862h]
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	ax, 67F6h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
push	[bp+arg_2]
call	game_display_draw_province_data
add	sp, 2
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 5
push	ax
mov	ax, 1
push	ax
mov	ax, 67FFh
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short loc_148E4
ja	short loc_148B2
dec	ax
jz	short loc_148DC
dec	ax
jz	short loc_148B2
sub	ax, 1
jb	short near ptr loc_14877+1
sub	ax, 1
jbe	short near ptr loc_148BB+1
dec	ax
jz	short loc_148D2
jmp	short near ptr loc_14877+1
;     ***************************************************************************
nop
nop
push	[bp+arg_2]
push	cs
call	game_view_general_select_general
jmp	short near ptr loc_14874+1
;     ***************************************************************************
nop
mov	al, byte ptr [bp+var_2]
sub	al, 3
push	ax
mov	ax, 1
push	ax
push	[bp+arg_2]
push	cs
call	game_view_summary_data
add	sp, 6
jmp	short near ptr loc_14877+1
;     ***************************************************************************
push	[bp+arg_2]
push	cs
call	game_view_data_order
jmp	short near ptr loc_14874+1
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_view_other_province_queries endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_other_province_who_will_spy proc far ; DATA XREF: game_view_other_province+3A  t
push	bp
mov	bp, sp
sub	sp, 2
call	game_data_get_generals_actions
or	al, al
jnz	short loc_14904
call	game_warning_no_one_can_do_that_now
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 686Ah	; 0x36105
; Text:	'Who will spy '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 3
push	ax
mov	al, 1
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
sub	al, al
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
or	ax, ax
jz	short loc_148FE
push	ax

loc_24938:				; CODE XREF: dseg:25A83  P dseg:25CEF  P ...		 /* DOS offset ---> 1BFF:8 */
call	far ptr	59Dh:700h ; game_data_set_general_action_02
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_view_other_province_who_will_spy endp


;     *************** S U B	R O U T	I N E     ***************************************


game_view_other_province_which_province	proc far ; DATA	XREF: game_view_other_province+C  t
; game_view_other_province+90  t
mov	ax, 41
push	ax
mov	ax, 1
push	ax
mov	ax, 6877h	; 0x36112
; Text:	'Which province '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
retf
game_view_other_province_which_province	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_other_province proc far

var_6		= word ptr -6
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 6
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	cs
call	game_view_other_province_which_province
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jnz	short near ptr loc_14972+2
jmp	loc_14A1B
;     ***************************************************************************
dec	[bp+var_2]
mov	ax, [bp+var_2]
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	[bp+var_6], ax
mov	bx, [bp+var_2]
shl	bx, 1
cmp	word ptr [bx-7C22h], 0
jnz	short near ptr loc_149A8+1
push	ax
push	cs
call	game_view_other_province_who_will_spy
add	sp, 2
or	ax, ax
jz	short near ptr loc_14A0B+1
mov	bx, [bp+var_2]
shl	bx, 1
mov	word ptr [bx-7C22h], 1
mov	ax, current_province
cmp	[bp+var_6], ax
jz	short near ptr loc_149B5+2
mov	ax, [bp+var_6]
mov	word_13536, ax
push	[bp+var_6]
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jz	short near ptr loc_149CD+3
push	[bp+var_6]
push	cs
call	game_view_other_province_view_another
jmp	short near ptr loc_149D6+1
;     ***************************************************************************
nop
push	[bp+var_6]
push	cs
call	game_view_other_province_queries
add	sp, 2

loc_249DA:				; CODE XREF: dseg:238D8  P dseg:25DB3  P ...		 /* DOS offset ---> 1C09:A */
mov	word_13536, 0
or	ax, ax
jz	short near ptr loc_14A0B+1
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	cs
call	game_view_other_province_which_province
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short loc_149F8
jmp	near ptr loc_14972+2
;     ***************************************************************************
sub	ax, ax
push	ax
push	current_province
call	game_display_draw_province_info_and_data
add	sp, 4
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
push	ax
mov	ax, current_province
mov	word_13534, ax
push	ax
call	game_display_draw_province_info_and_data
mov	sp, bp
pop	bp
retf
game_view_other_province endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_options_save_game_sub proc	far	; DATA XREF: game_options_save_game+155  t

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

; FUNCTION CHUNK AT 4A6D SIZE 00000018 BYTES

push	bp
mov	bp, sp
sub	sp, 2
cmp	word_13784, 0
jz	short near ptr loc_14A2F+1
jmp	near ptr loc_14ABC+2
;     ***************************************************************************
mov	[bp+var_2], 1
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 6886h	; 0x36121
; Text:	'Please reinsert game disk A into drive '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	ax, 68B5h	; 0x36151
; Text:	' Hit any key to continue '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:79Ah ; game_query_user_input_main
cmp	[bp+var_2], 0
jnz	short loc_14AA6
test	byte ptr word_1CEA2, 1
jz	short loc_14A6A
mov	ax, 68D1h	; 0x3616C
; Text:	'Wrong Disk'
jmp	short loc_14A6D
;     ***************************************************************************
nop
mov	ax, 68DFh	; 0x3617A
; Text:	'Wrong Disk '
push	ax

loc_24A6E:				; CODE XREF: dseg:226CE  P dseg:25593  P ...		 /* DOS offset ---> 1C12:E */
call	far ptr	3EFh:6C0h ; system_execute_function
;     ***************************************************************************
db  83h	;   *
db 0C4h	;   *
db    2
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db 0B8h	;   *
db    8
db    0
db  50h	; P
db 0B8h	;   *
db  0Ah
db    0
db  50h	; P
db 0B8h	;   *
db 0B8h	;   *
db    0
db  50h	; P
db 0B9h	;   *
db  26h	; &
db    0
db  51h	; Q
db  9Ah	;   *
db  78h	; x
db    3
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ah
db 0B8h	;   *
db 0B8h	;   *
db    0
db  50h	; P
db 0B8h	;   *
db  26h	; &
db    0
db  50h	; P
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db  9Ah	;   *
db  9Ah	;   *
db    7
db 0EFh	;   *
db    3
;     ***************************************************************************

loc_24AA6:				; CODE XREF: dseg:269E6  P dseg:26A26  P ...		 /* DOS offset ---> 1C16:6 */
call	far ptr	0CA5h:0B8h
;     ***************************************************************************
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db 0A5h	;   *
db 0B8h	;   *
db 0D0h	;   *
db  35h	; 5
db  50h	; P
db  9Ah	;   *
db    6
db    0
db 0A3h	;   *
db    6
db 0A3h	;   *
db  6Ch	; l
db 0CCh	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_options_save_game_sub endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_options_save_game proc far		; DATA XREF: game_options_func+C6  t

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
cmp	word_13784, 0
jnz	short near ptr loc_14AF5+1
mov	ax, 68F5h	; 0x36190
; Text:	'Insert your save game disk into drive A '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	ax, 6923h	; 0x361BE
; Text:	' Hit any key to continue '
push	ax

loc_24AE4:				; CODE XREF: dseg:2A409  P		 /* DOS offset ---> 1C1A:4 */
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:79Ah ; game_query_user_input_main
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 693Ch	; 0x361D7
; Text:	'Please enter full pathname for save game data: '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	ax, 1Eh
push	ax
mov	ax, 168
push	ax
mov	ax, 38
push	ax
mov	ax, 3542h
push	ax
call	far ptr	0C49h:8Ah ; s_C51A
add	sp, 8
or	ax, ax
jnz	short near ptr unk_14B21
jmp	loc_14C16
;     ***************************************************************************
mov	ax, 3542h
push	ax
call	far ptr	0:2E8h	; s_02E8

loc_24B2A:				; CODE XREF: dseg:268F0  P dseg:27C9F  P		 /* DOS offset ---> 1C1E:A */
add	sp, 2
or	ax, ax
jz	short near ptr loc_14B63+1
sub	ax, ax
push	ax
mov	cx, 16
push	cx
mov	cx, 20
push	cx
mov	cx, 152
push	cx
mov	cx, 37
push	cx
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
mov	ax, 696Bh	; 0x36206
; Text:	'Replace existing file '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jnz	short near ptr loc_14B63+1
jmp	loc_14C16
;     ***************************************************************************
mov	ax, 3542h
push	ax
call	far ptr	0:32Eh	; system_file_create_with_handle
add	sp, 2
mov	[bp+var_2], ax
inc	ax
jnz	short near ptr loc_14B93+1
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 3542h
push	ax
mov	ax, 6985h	; 0x36220
; Text:	'Could not create %s! '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	3EFh:79Ah ; game_query_user_input_main
jmp	loc_14C16
;     ***************************************************************************
nop
mov	ax, 0Ah
push	ax
mov	ax, 3538h
push	ax
push	[bp+var_2]
call	far ptr	0:295h	; system_file_write_with_handle
add	sp, 6

loc_24BA7:				; CODE XREF: dseg:261A5  P dseg:26296  P ...		 /* DOS offset ---> 1C26:7 */
mov	bx, current_ruler
cmp	byte ptr [bx+22h], 0FFh
jz	short near ptr loc_14BB4+2
or	options_value, 80h
mov	ax, 33F0h
sub	ax, 65
push	ax
mov	ax, 66
push	ax
push	[bp+var_2]
call	far ptr	0:295h	; system_file_write_with_handle
add	sp, 6
mov	ax, word_1D47C
mov	word ptr dword_1CB9A+2,	ax
mov	cx, 18FCh
push	cx
sub	cx, cx
mov	word ptr dword_1CB9A, cx
push	cx
push	ax
push	[bp+var_2]
call	far ptr	0:2AEh	; system_file_write_with_handle_2
add	sp, 8
mov	ax, word_1D47E
mov	word ptr dword_1CB9A+2,	ax
mov	cx, 2AC3h
push	cx
sub	cx, cx
mov	word ptr dword_1CB9A, cx
push	cx
push	ax
push	[bp+var_2]
call	far ptr	0:2AEh	; system_file_write_with_handle_2
add	sp, 8
and	options_value, 7Fh
push	[bp+var_2]
call	far ptr	0:248h	; system_file_close_with_handle
add	sp, 2
push	cs
call	game_options_save_game_sub
mov	sp, bp
pop	bp
retf
game_options_save_game endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_move_send_whom proc far

var_8		= byte ptr -8
var_6		= byte ptr -6
arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 8
push	di
push	si
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	525h:158h ; game_data_get_generals_or_free_in_province
add	sp, 2
push	ax
mov	ax, 69A4h	; 0x3623F
; Text:	'Move whom '
push	ax
mov	al, 1
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
call	game_war_move_send_whom_query ;
;
add	sp, 6
mov	[bp+var_6], al
or	al, al

loc_24C57:				; CODE XREF: dseg:26193  P dseg:26287  P ...		 /* DOS offset ---> 1C31:7 */
jnz	short near ptr loc_14C58+4
jmp	loc_14D1A
;     ***************************************************************************
push	[bp+arg_0]
call	game_data_get_gold_max_difference
add	sp, 2
push	ax
sub	ax, ax
push	ax
mov	ax, 69AEh	; 0x36249
; Text:	'Take how much gold '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	word_1CA96, ax
cmp	ax, 0FFFFh
jnz	short near ptr loc_14C7E+4
jmp	loc_14D1A
;     ***************************************************************************
push	[bp+arg_0]
call	game_data_get_food_max_difference
add	sp, 2
push	dx
push	ax
mov	cx, 69C2h	; 0x3625D
; Text:	'Take how much food (0 - %u)? '
push	cx
mov	si, ax
mov	di, dx
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
push	di
push	si
sub	ax, ax
push	ax
push	ax
call	far ptr	3EFh:8E2h ; game_input_query_func_wait_for_input
add	sp, 8
mov	word_1CA88, ax
mov	word_1CA8A, dx
cmp	ax, 0FFFFh
jnz	short near ptr loc_14CBC+1
cmp	dx, ax
jz	short loc_14D1A
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	525h:158h ; game_data_get_generals_or_free_in_province
add	sp, 2
mov	[bp+var_8], al
cmp	al, [bp+var_6]
jnz	short loc_14CE9
mov	ax, 69E0h	; 0x3627B
; Text:	'Abandon this province '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jz	short loc_14D1A
mov	word_1CE96, 0Ch
mov	byte ptr word_1CB6B, 0
push	[bp+arg_0]
push	current_province
call	game_messenger_travel_s_11E74 ;	*
add	sp, 4
mov	al, [bp+var_8]
push	ax
push	[bp+arg_0]
call	s_111D6		; *
add	sp, 4
sub	ax, ax
mov	word_159EC, ax
mov	word_159EA, ax
pop	si
pop	di
mov	sp, bp
pop	bp
retf
game_move_send_whom endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_move_func	proc far

var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 4
call	game_data_get_generals_actions
or	al, al
jnz	short loc_14D38
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 41
push	ax
mov	ax, 1
push	ax
mov	ax, 69F7h	; 0x36292
; Text:	'Move where '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jnz	short loc_14D5C
jmp	loc_14E24
;     ***************************************************************************
dec	[bp+var_2]
mov	al, byte ptr [bp+var_2]
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	[bp+var_4], ax
mov	al, byte ptr [bp+var_2]
push	ax
push	current_province
call	game_check_province_is_neighbor	; *
add	sp, 4
or	ax, ax
jz	short loc_14D38
push	[bp+var_4]
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jnz	short loc_14D38
push	[bp+var_4]
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr loc_14DAF+4
push	[bp+var_4]
push	current_province
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jz	short loc_14D38
mov	ax, [bp+var_4]
mov	word_13536, ax
mov	al, byte ptr [bp+var_2]
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
push	ax
push	cs
call	game_move_send_whom
add	sp, 2
mov	word_13536, 0
push	current_province
call	far ptr	542h:148h ; s_5568
add	sp, 2

loc_24DDF:				; CODE XREF: dseg:268B6  P dseg:27C73  P ...		 /* DOS offset ---> 1C49:F */
or	ax, ax
jnz	short loc_14E24
mov	bx, current_ruler
cmp	[bx+4],	ax
jz	short loc_14E1B
push	current_province
push	word ptr [bx+4]
call	far ptr	542h:15Ah ; game_data_check_advisor_in_province
add	sp, 4
or	ax, ax
jnz	short loc_14E1B

loc_24DFF:				; CODE XREF: dseg:25A7A  P dseg:28110  P		 /* DOS offset ---> 1C4B:F */
mov	ax, 7
push	ax
mov	ax, 8
push	ax
mov	ax, 14h
push	ax
mov	ax, 44
push	ax
mov	ax, 41
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
push	current_province
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf
game_move_func	endp


;     *************** S U B	R O U T	I N E     ***************************************


game_send_result proc far		; DATA XREF: game_send_pre_result+67  t
mov	al, byte_1CA86
sub	ah, ah
or	ax, ax
jz	short near ptr unk_14E3E
dec	ax
dec	ax
jz	short near ptr loc_14E6F+1
dec	ax
jnz	short near ptr unk_14E3B
jmp	loc_14F66
;     ***************************************************************************
jmp	near ptr loc_14F70+2
;     ***************************************************************************
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short loc_14E54
mov	ax, 6A02h	; 0x3629D
; Text:	'The goods arrived safely '
jmp	short loc_14E57
;     ***************************************************************************
nop
mov	ax, 6A1Bh	; 0x362B6
; Text:	'The goods were delivered safely '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
call	game_advisor_display_results ; *

loc_24E69:				; CODE XREF: dseg:26885  P dseg:27C53  P ...		 /* DOS offset ---> 1C52:9 */
call	far ptr	57Ch:15Eh ; system_sound_6_dings
retf
;     ***************************************************************************
nop
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short loc_14E86
mov	ax, 6A3Bh	; 0x362D6
; Text:	'The goods were stolen by '
jmp	short near ptr loc_14E87+2
;     ***************************************************************************
nop
mov	ax, 6A55h	; 0x362F0
; Text:	'The good were stolen by '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
push	word_1CEAA
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short loc_14EAC
mov	ax, 6A6Fh	; 0x3630A
; Text:	' mountain bandits '
jmp	near ptr unk_14F4D
;     ***************************************************************************
push	word_1CEAA
push	current_province
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jz	short near ptr loc_14F29+1
mov	ax, word_1CEA4
cmp	word_1CEAA, ax
jnz	short loc_14F24
mov	ax, 7530h
push	ax
push	word_1CA96
mov	ax, 0CAA3h
push	ax
call	far ptr	49Ch:8Ch ; game_data_set_generals_soldiers
add	sp, 6
mov	ax, word_1CA88
mov	dx, word_1CA8A
add	word_1CAA9, ax
adc	word_1CAAB, dx
cmp	word_1CAAB, 2Dh	; '-'
jl	short near ptr loc_14F08+1
jg	short near ptr loc_14EFC+1
cmp	word_1CAA9, 0C6C0h
jbe	short near ptr loc_14F08+1
mov	word_1CAA9, 0C6C0h
mov	word_1CAAB, 2Dh	; '-'
mov	bx, word_1CB86
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
mov	ax, 6A80h	; 0x3631B
; Text:	''s goons '
jmp	short near ptr unk_14F4D
;     ***************************************************************************
mov	ax, 6A89h	; 0x36324
; Text:	'mountain bandits '
jmp	short near ptr unk_14F4D
;     ***************************************************************************
nop
push	word_1CEAA
call	far ptr	525h:4Ah
add	sp, 2
mov	bx, ax
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4

loc_24F4A:				; CODE XREF: dseg:266AB  P dseg:2694F  P ...		 /* DOS offset ---> 1C60:A */
mov	ax, 6A9Ah	; 0x36335
; Text:	''s goons '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
retf
;     ***************************************************************************
nop
push	current_province
call	s_1118E		; *
add	sp, 2
call	game_messenger_travel_results_2	; *
retf
game_send_result endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_send_how_much_gold_food proc far	; DATA XREF: game_send_pre_result+7  t

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 0Ah
push	si
mov	word_1CA96, 0
sub	ax, ax
mov	word_1CA8A, ax
mov	word_1CA88, ax
push	[bp+arg_0]
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jz	short near ptr unk_14FF6
push	[bp+arg_0]
call	far ptr	59Dh:6	; s_59D6
add	sp, 2
mov	ax, 7530h
mov	bx, [bp+arg_0]
sub	ax, [bx+8]
sub	ax, word ptr unk_1CAA1
push	ax
mov	si, current_province
push	word ptr [si+8]
call	far ptr	561h:18Ah ; math_truncate_decimal_value
add	sp, 4
mov	[bp+var_6], ax
mov	ax, 0C6C0h
mov	dx, 2Dh	; '-'
mov	bx, [bp+arg_0]
sub	ax, [bx+0Ah]
sbb	dx, [bx+0Ch]
sub	ax, word ptr loc_1CAA2+3
sbb	dx, word_1CAA7
mov	bx, current_province
cmp	dx, [bx+0Ch]
jl	short near ptr unk_1500F
jg	short near ptr unk_14FEE
cmp	ax, [bx+0Ah]
jbe	short near ptr unk_1500F
mov	dx, [bx+0Ch]
mov	ax, [bx+0Ah]
jmp	short near ptr unk_1500F
;     ***************************************************************************
push	[bp+arg_0]
call	game_data_get_gold_max_difference
add	sp, 2
mov	[bp+var_6], ax
push	[bp+arg_0]
call	game_data_get_food_max_difference
add	sp, 2
mov	[bp+var_4], ax
mov	[bp+var_2], dx
cmp	[bp+var_6], 0
jz	short near ptr loc_1503B+1
push	[bp+var_6]
sub	ax, ax
push	ax
mov	ax, 6AA3h	; 0x3633E
; Text:	'Send how much gold '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	word_1CA96, ax
cmp	ax, 0FFFFh
jnz	short near ptr loc_1503B+1
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
cmp	[bp+var_2], 0
jl	short near ptr unk_1507E
jg	short near ptr loc_15048+2
cmp	[bp+var_4], 0
jz	short near ptr unk_1507E
push	[bp+var_2]
push	[bp+var_4]
mov	ax, 6AB7h	; 0x36352
; Text:	'Send how much food? '
push	ax

loc_25054:				; CODE XREF: dseg:22D42  P		 /* DOS offset ---> 1C71:4 */
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
push	[bp+var_2]
push	[bp+var_4]
sub	ax, ax
push	ax
push	ax
call	far ptr	3EFh:8E2h ; game_input_query_func_wait_for_input
add	sp, 8
mov	word_1CA88, ax
mov	word_1CA8A, dx
cmp	ax, 0FFFFh
jnz	short near ptr unk_1507E
cmp	dx, ax
jz	short loc_15035
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
game_send_how_much_gold_food endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_send_pre_result proc far		; DATA XREF: game_send_who_will_supervise+A1  t

var_21E		= byte ptr -21Eh
var_21A		= byte ptr -21Ah
var_218		= word ptr -218h
var_216		= word ptr -216h
var_214		= word ptr -214h
var_212		= byte ptr -212h
arg_0		= word ptr  6
arg_2		= word ptr  8

; FUNCTION CHUNK AT 5100 SIZE 0000004B BYTES

push	bp
mov	bp, sp
push	[bp+arg_0]
push	cs
call	game_send_how_much_gold_food
mov	sp, bp
or	ax, ax
jz	short loc_15100
cmp	word_1CA96, 0
jnz	short near ptr unk_150AD
cmp	word_1CA8A, 0
jl	short loc_15100
jg	short near ptr unk_150AD
cmp	word_1CA88, 0
jz	short loc_15100
mov	ax, 6AD5h	; 0x36370
; Text:	'Send goods '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
mov	sp, bp
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jz	short loc_15100
push	[bp+arg_2]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
mov	sp, bp
mov	byte_1CE9C, 0Ch
mov	ax, [bp+arg_2]
mov	word_1CE9E, ax
mov	ax, [bp+arg_0]
mov	word_1CEA4, ax
push	current_province
call	s_1172
mov	sp, bp
call	game_messenger_travel
push	cs
call	game_send_result
call	s_105CA		; *
or	ax, ax

loc_250F7:				; CODE XREF: dseg:247DD  P dseg:26182  P ...		 /* DOS offset ---> 1C7B:7 */
jz	short loc_15100
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_send_pre_result endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_send_who_will_supervise proc far	; DATA XREF: game_send_func+2F  t

var_212		= byte ptr -212h
var_6		= word ptr -6
var_4		= word ptr -4

; FUNCTION CHUNK AT 51A0 SIZE 00000022 BYTES

push	bp
mov	bp, sp
sub	sp, 6
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 29h	; ')'
push	ax
mov	ax, 1
push	ax
mov	ax, 6AE1h
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_4], ax
cmp	ax, 0FFFFh
jz	short near ptr loc_15198+2
mov	al, byte ptr [bp+var_4]
dec	al
push	ax

loc_25135:				; CODE XREF: dseg:2299C  P dseg:22DE3  P ...		 /* DOS offset ---> 1C7F:5 */
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	[bp+var_6], ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2

loc_25149:				; CODE XREF: dseg:25511  P dseg:256B3  P ...		 /* DOS offset ---> 1C80:9 */
or	ax, ax
jnz	short loc_1510E
mov	ax, current_province
cmp	[bp+var_6], ax
jz	short loc_1510E
push	ax
push	[bp+var_6]
call	far ptr	542h:192h ; game_data_get_province_rulers_potrait
add	sp, 4
or	ax, ax
jz	short loc_1510E
mov	ax, 6AECh	; 0x36387
; Text:	'Who will supervise '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 3
push	ax
mov	al, 1
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
mov	al, 2
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
or	ax, ax
jnz	short loc_151A0
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	ax
mov	ax, [bp+var_6]
mov	word_13536, ax
push	ax
push	cs
call	game_send_pre_result
mov	sp, bp
pop	bp
retf
game_send_who_will_supervise endp


;     *************** S U B	R O U T	I N E     ***************************************


game_send_func	proc far

; FUNCTION CHUNK AT 51DE SIZE 00000015 BYTES
; FUNCTION CHUNK AT 51F5 SIZE 00000020 BYTES
; FUNCTION CHUNK AT 521E SIZE 0000001E BYTES

mov	bx, current_province
cmp	word ptr [bx+8], 0
jnz	short loc_151C2
mov	ax, [bx+0Ch]
or	ax, [bx+0Ah]
jz	short near ptr loc_151FA+2
mov	bx, current_ruler
mov	bx, [bx+2]
cmp	word ptr [bx], 0
jz	short near ptr loc_151FA+2
call	game_data_get_generals_actions
or	al, al
jnz	short loc_151DE
call	game_warning_no_one_can_do_that_now
retf
;     ***************************************************************************
nop
push	cs
call	game_send_who_will_supervise
or	ax, ax
jz	short loc_151F5
sub	ax, ax
push	ax
push	current_province
call	game_display_draw_province_info_and_data
add	sp, 4
mov	word_13536, 0
retf
;     ***************************************************************************
mov	ax, 6AFFh
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
mov	word_159EA, 1
call	game_display_draw_province_menu
retf
game_send_func	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_war_send_whom_display_info	proc far

var_8		= byte ptr -8
var_6		= word ptr -6
var_4		= byte ptr -4

push	bp
mov	bp, sp
sub	sp, 8
mov	[bp+var_6], 0CA70h
call	far ptr	4B5h:282h ; game_gfx_blk_bkgrnd_shape_4
mov	word ptr loc_1CE8F+3, 0
sub	al, al
mov	[bp+var_8], al
mov	[bp+var_4], al
jmp	short locret_1528F
;     ***************************************************************************
mov	bl, [bp+var_8]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-3390h], 0
jz	short loc_1528C
mov	bx, [bp+var_6]
mov	[bx], ax
mov	bx, ax
mov	cx, [bx+12h]
add	word ptr loc_1CE8F+3, cx

loc_25250:				; CODE XREF: dseg:25666  P dseg:2967D  P		 /* DOS offset ---> 1C91:0 */
mov	cl, 3
;     ***************************************************************************
db  8Ah	;   *
db  56h	; V
db 0FCh	;   *
db  2Ah	; *
db 0F6h	;   *
db  83h	;   *
db 0C2h	;   *
db  0Ah
db 0D3h	;   *
db 0E2h	;   *
db  52h	; R
db 0B9h	;   *
db  26h	; &
db    0
db  51h	; Q
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
db 0FFh
db  77h	; w
db  12h
db  8Dh	;   *
db  47h	; G
db  1Ch
db  50h	; P
db 0FEh	;   *
db  46h	; F
db 0FCh	;   *
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db 0B8h	;   *
db  10h
db  6Bh	; k
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    8
db  83h	;   *
db  46h	; F
db 0FAh	;   *
db    2
db 0FEh	;   *
db  46h	; F
db 0F8h	;   *
db  8Ah	;   *
db  5Eh	; ^
db 0F8h	;   *
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db  87h	;   *
db 0B2h	;   *
db 0CEh	;   *
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db  93h	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0FAh	;   *
db  89h	;   *
db    7
db 0FFh
db  36h	; 6
db  9Ah	;   *
db 0CAh	;   *
db  9Ah	;   *
db  64h	; d
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  2Ah	; *
db 0E4h	;   *
db  40h	; @
db  50h	; P
db 0B8h	;   *
db  1Dh
db  6Bh	; k
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0FFh
db  36h	; 6
db  9Ah	;   *
db 0CAh	;   *
db  9Ah	;   *
db  4Ah	; J
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db 0D8h	;   *
db  8Bh	;   *
db    7
db    5
db  1Ch
db    0
db  50h	; P
db 0B8h	;   *
db  35h	; 5
db  6Bh	; k
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0FFh
db  36h	; 6
db  92h	;   *
db 0CEh	;   *
db 0B8h	;   *
db  4Fh	; O
db  6Bh	; k
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_war_send_whom_display_info	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_war_send_whom proc	far		; DATA XREF: game_war_func+108  t

arg_0		= byte ptr  6

; FUNCTION CHUNK AT 5334 SIZE 00000004 BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	al, [bp+arg_0]
push	ax
mov	ax, 6B66h	; 0x36401
; Text:	'Send whom '
push	ax
mov	al, 1
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
call	game_war_move_send_whom_query
add	sp, 6
mov	byte_1CBCC, al
or	al, al
jnz	short loc_15334
push	current_province
call	game_display_draw_province_data
add	sp, 2

loc_2532D:				; CODE XREF: dseg:256BE  P		 /* DOS offset ---> 1C9E:D */
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_war_send_whom endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_war_who_will_command proc far

; FUNCTION CHUNK AT 5321 SIZE 00000011 BYTES
; FUNCTION CHUNK AT 5338 SIZE 00000006 BYTES

mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	525h:158h ; game_data_get_generals_or_free_in_province
add	sp, 2
mov	byte_1CB6A, al
push	cs
call	s_15214		; *
cmp	word_1CBA0, 0
jnz	short loc_1538C
cmp	word_1CC70, 0
jnz	short loc_1538C
cmp	byte_1CBCC, 1
jz	short loc_1538C
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window

loc_25364:				; CODE XREF: dseg:22D22  P dseg:248FF  P ...		 /* DOS offset ---> 1CA2:4 */
mov	al, byte_1CBCC
;     ***************************************************************************
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db 0B8h	;   *
db    1
db    0
db  50h	; P
db 0B8h	;   *
db  70h	; p
db  6Bh	; k
db  50h	; P
db  9Ah	;   *
db 0B2h	;   *
db    9
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    6
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  3Dh	; =
db 0FFh
db 0FFh
db  74h	; t
db  9Fh	;   *
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db 0FEh	;   *
db 0C8h	;   *
db 0A2h	;   *
db 0F2h	;   *
db 0CAh	;   *
db 0EBh	;   *
db    5
;     ***************************************************************************
mov	byte_1CAF2, 0
cmp	word_1CBA0, 0
jnz	short locret_153CD
mov	cl, 3
mov	al, byte_1CAF2
sub	ah, ah
add	ax, 0Ah
shl	ax, cl
push	ax
mov	ax, 40
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
mov	bl, byte_1CAF2
sub	bh, bh
shl	bx, 1
mov	ax, [bx-3590h]
add	ax, 1Ch
push	ax
mov	ax, 6B81h	; 0x3641C
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 6B8Fh	; 0x3642A
; Text:	'Bring how much gold '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	bx, current_province
push	word ptr [bx+8]
sub	ax, ax
push	ax
mov	ax, 6BA4h
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	word_1D476, ax
cmp	ax, 0FFFFh
jnz	short loc_153FF
jmp	loc_15321
;     ***************************************************************************
push	ax
mov	ax, 6BA5h	; 0x36440
; Text:	'Gold: '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	ax, 1
push	ax
mov	ax, word ptr loc_1CE8F+3
mov	cx, 1Eh
sub	dx, dx
div	cx
push	ax

loc_2541B:				; CODE XREF: dseg:24910  P dseg:25730  P		 /* DOS offset ---> 1CAD:B */
call	far ptr	561h:19Ch ; math_max_function_x1_y1
add	sp, 4
mov	cx, 1Eh
mul	cx
mov	[bp-2],	ax
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	word ptr [bp-2]
mov	bx, current_province
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
mov	ax, 6BBCh	; 0x36457
; Text:	'Bring how much food: '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text

loc_25446:				; CODE XREF: dseg:2314F  P dseg:2A530  P		 /* DOS offset ---> 1CB0:6 */
add	sp, 8
mov	bx, current_province
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
sub	ax, ax
push	ax
push	ax
call	far ptr	3EFh:8E2h ; game_input_query_func_wait_for_input
add	sp, 8
mov	word_1CEAE, ax
mov	word_1CEB0, dx
cmp	ax, 0FFFFh
jnz	short locret_15472
or	dx, dx
jnz	short locret_15472
jmp	loc_15321
;     ***************************************************************************
push	dx
push	ax
mov	ax, 6BF0h	; 0x3648B
; Text:	'Food: '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
cmp	word_1CBA0, 0
jz	short near ptr loc_15491+1
mov	ax, 6C08h	; 0x364A3
; Text:	'Send reinforcements '
jmp	short loc_15495
;     ***************************************************************************
nop
mov	ax, 6C1Ch	; 0x364B7
; Text:	'Invade '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jnz	short near ptr loc_154A9+1
jmp	loc_15321
;     ***************************************************************************

loc_254AA:				; CODE XREF: dseg:23108  P dseg:2A4E5  P		 /* DOS offset ---> 1CB6:A */
call	s_105E6		; *
cmp	word_1CBA0, 0
jnz	short near ptr loc_154EF+1
mov	bx, current_ruler
cmp	byte ptr [bx+1Eh], 0FFh
jz	short near ptr loc_154EF+1
push	word_1CA9A
call	far ptr	525h:64h ; game_data_get_province_number
add	sp, 2
mov	bx, current_ruler
cmp	al, [bx+1Fh]
jnz	short near ptr loc_154EF+1
mov	al, 41
mul	byte ptr [bx+1Eh]
mov	bx, ax
mov	ax, [bx+2B34h]
add	ax, 1Ch
push	ax
mov	ax, 6C23h	; 0x364BE
; Text:	'%s's army may invade with us '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	s_1EE7C		; *
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_war_who_will_command endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_war_neighboring_provinces_query proc far ;	DATA XREF: game_war_func+23  t

var_4		= byte ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

; FUNCTION CHUNK AT 5535 SIZE 00000021 BYTES

push	bp
mov	bp, sp
sub	sp, 6
mov	ax, 6C49h	; 0x364E4
; Text:	'Neighboring enemy provinces: '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 2
sub	al, al
mov	[bp+var_2], al
mov	[bp+var_4], al
mov	al, [bp+var_4]
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	word_1CA9A, ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short loc_15535
jmp	near ptr loc_155B9+3
;     ***************************************************************************
mov	al, [bp+var_4]
push	ax
push	current_province
call	game_check_province_is_neighbor	; *
add	sp, 4
or	ax, ax
jz	short near ptr loc_155B9+3
mov	bx, word_1CA9A
test	byte ptr [bx+13h], 40h
jnz	short near ptr loc_155B9+3
push	bx
push	current_province
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jz	short loc_15578
push	word_1CA9A
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jnz	short loc_1559D
jmp	short near ptr loc_155B9+3
;     ***************************************************************************
nop
nop
push	word_1CA9A
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jz	short loc_1559D
push	current_ruler
call	far ptr	525h:6	; game_data_get_rulers_data
add	sp, 2
mov	bx, word_1CA9A
cmp	al, [bx+11h]
jnz	short near ptr loc_155B9+3
call	s_12858		; *
or	al, al
jz	short near ptr loc_155B9+3
mov	al, [bp+var_4]
sub	ah, ah
inc	ax
push	ax
mov	ax, 6C6Ah	; 0x36505
; Text:	'%d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
inc	[bp+var_2]
inc	[bp+var_4]
cmp	[bp+var_4], 41
jnb	short near ptr loc_155C6+2
jmp	near ptr loc_15515+1
;     ***************************************************************************
cmp	[bp+var_2], 0
jnz	short near ptr loc_155E8+4
mov	ax, 6C71h	; 0x3650C
; Text:	'<None> '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
mov	word_159E8, 1
call	game_display_draw_province_menu
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_war_neighboring_provinces_query endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_war_func	proc far

var_4		= byte ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  6

; FUNCTION CHUNK AT 5779 SIZE 0000000C BYTES
; FUNCTION CHUNK AT 5786 SIZE 00000005 BYTES

push	bp
mov	bp, sp
sub	sp, 4
call	game_data_get_generals_actions
or	al, al
jnz	short loc_1560C
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	cs
call	game_war_neighboring_provinces_query
or	ax, ax
jnz	short loc_15621
jmp	loc_1577F
;     ***************************************************************************
mov	ax, 6C78h	; 0x36513
; Text:	'Invade which province? '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 2
mov	ax, 41
push	ax
mov	ax, 1
push	ax
call	far ptr	3EFh:998h ; game_input_query_func
add	sp, 4
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jnz	short loc_15648
jmp	loc_1577F
;     ***************************************************************************
mov	al, byte ptr [bp+var_2]
dec	al
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	word_1CA9A, ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_15611
mov	al, byte ptr [bp+var_2]
dec	al
push	ax
push	current_province

loc_25670:				; CODE XREF: dseg:27AD7  P dseg:27B6C  P		 /* DOS offset ---> 1CD3:0 */
call	game_check_province_is_neighbor	; *
;     ***************************************************************************
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  95h	;   *
db  8Bh	;   *
db  1Eh
db  9Ah	;   *
db 0CAh	;   *
db 0F6h	;   *
db  47h	; G
db  13h
db  40h	; @
db  74h	; t
db  10h
db 0B8h	;   *
db  95h	;   *
db  6Ch	; l
db  50h	; P
db  9Ah	;   *
db  0Ch
db    1
db 0F9h	;   *
db  12h
db  83h	;   *
db 0C4h	;   *
db    2
db 0E9h	;   *
db  7Ch	; |
db 0FFh
;     ***************************************************************************
nop
push	bx
push	current_province
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jz	short near ptr loc_156B9+1
push	word_1CA9A
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jnz	short loc_156E2
jmp	loc_15611
;     ***************************************************************************
push	word_1CA9A
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jz	short loc_156E2
push	current_ruler
call	far ptr	525h:6	; game_data_get_rulers_data
add	sp, 2
mov	bx, word_1CA9A
cmp	al, [bx+11h]
jz	short loc_156E2
jmp	loc_15611
;     ***************************************************************************
call	s_12858		; *
mov	[bp+var_4], al
or	al, al
jnz	short loc_156F1
jmp	loc_15611
;     ***************************************************************************
mov	ax, word_1CA9A
mov	word_13536, ax
mov	al, [bp+var_4]
push	ax
push	cs
call	game_war_send_whom ; *
add	sp, 2
or	ax, ax
jz	short loc_15779
cmp	word_1CBA0, 0
jz	short near ptr loc_15773+1
push	current_province
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_15779
push	current_province
call	far ptr	542h:148h ; s_5568
add	sp, 2
or	ax, ax
jnz	short loc_15779
mov	bx, current_ruler
cmp	[bx+4],	ax
jz	short near ptr loc_15763+2
push	current_province
push	word ptr [bx+4]
call	far ptr	542h:15Ah ; game_data_check_advisor_in_province
add	sp, 4
or	ax, ax
jnz	short near ptr loc_15763+2
mov	ax, 7

loc_2574C:				; CODE XREF: dseg:27B07  P		 /* DOS offset ---> 1CE0:C */
push	ax
;     ***************************************************************************
db 0B8h	;   *
db  30h	; 0
db    0
db  50h	; P
db 0B8h	;   *
db  0Ch
db    0
db  50h	; P
db 0B8h	;   *
db  40h	; @
db    0
db  50h	; P
db 0B8h	;   *
db  39h	; 9
db    0
db  50h	; P
db  9Ah	;   *
db  78h	; x
db    3
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ah
db 0FFh
db  36h	; 6
db  9Ah	;   *
db  33h	; 3
db  9Ah	;   *
db 0ECh	;   *
db    7
db 0F9h	;   *
db  12h
db  83h	;   *
db 0C4h	;   *
db    2
db 0EBh	;   *
db    6
;     ***************************************************************************
nop
or	byte_1339C, 1
mov	word_13536, 0
mov	sp, bp
pop	bp
retf
game_war_func	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_mil_train_soldiers_check_if_max proc far
; DATA XREF: game_mil_train_soldiers:loc_257E0  t

; FUNCTION CHUNK AT 578F SIZE 0000000A BYTES

mov	bx, current_province
mov	ax, [bx+2]
or	ax, ax
jz	short near ptr loc_157A3+1
mov	bx, ax
cmp	byte ptr [bx+16h], 100 ; compares training to 100
jnz	short loc_157A0
mov	ax, [bx]
or	ax, ax
jnz	short loc_1578F
jmp	short near ptr loc_157A3+1
;     ***************************************************************************
nop
sub	ax, ax
retf
;     ***************************************************************************
nop
mov	ax, 1
retf
game_mil_train_soldiers_check_if_max endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_mil_train_soldiers	proc far

var_4		= word ptr -4
var_2		= word ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db 0B8h	;   *
db    0
db  6Dh	; m
db  50h	; P
db 0B8h	;   *
db  0Ch
db    0
db 0BAh	;   *
db  0Dh
db    6
db  52h	; R
db  50h	; P
db 0B0h	;   *
db    3
db  50h	; P
db 0B0h	;   *
db    1
db  50h	; P
db 0FFh
db  36h	; 6
db  9Ah	;   *
db  33h	; 3
db  9Ah	;   *
db  82h	;   *
db    3
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  50h	; P
db 0B0h	;   *
db    2
db  50h	; P
db  9Ah	;   *
db 0F6h	;   *
db    2
db  0Dh
db    6
db  83h	;   *
db 0C4h	;   *
db  0Ch
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  7Eh	; ~
db  0Eh
;     ***************************************************************************

loc_257E0:				; CODE XREF: dseg:2763F  P dseg:283F0  P		 /* DOS offset ---> 1CEA:0 */
call	game_mil_train_soldiers_check_if_max
;     ***************************************************************************
db  0Bh
db 0C0h	;   *
db  75h	; u
db  17h
db 0FFh
db  76h	; v
db 0FEh	;   *
db  9Ah	;   *
db  7Eh	; ~
db    9
db  66h	; f
db  10h
db  83h	;   *
db 0C4h	;   *
db    2
db  0Ah
db 0C0h	;   *
db  74h	; t
db    8
db 0C7h	;   *
db  46h	; F
db 0FCh	;   *
db    0
db    0
db 0EBh	;   *
db    6
;     ***************************************************************************
nop
mov	[bp+var_4], 1
mov	ax, 1
push	ax
mov	ax, 6D17h	; 0x365B2
; Text:	'Start training '
push	ax
mov	ax, 6CFCh
push	ax

loc_2580F:				; CODE XREF: dseg:27A2D  P dseg:286C0  P ...		 /* DOS offset ---> 1CEC:F */
push	[bp+var_4]
call	game_advisor_display
add	sp, 8
or	ax, ax
jz	short near ptr loc_1585C+1
push	[bp+var_2]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
push	[bp+var_2]
call	game_mil_train_soldiers_train_func ; *
add	sp, 2
or	ax, ax
jz	short loc_1584C
mov	ax, 6D26h	; 0x365C1
; Text:	'Skill has improved. '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	57Ch:15Eh ; system_sound_6_dings
jmp	short near ptr loc_1585C+1
;     ***************************************************************************
nop
mov	ax, 6D3Fh	; 0x365DA
; Text:	'Skill did not improve. '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
push	current_province
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf
game_mil_train_soldiers	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_mil_hire_reassign_troops_query proc far ; DATA XREF: game_mil_hire_reassign_troops+7A  t

var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 0Ch
push	di
push	si
mov	bx, [bp+arg_0]
mov	ax, [bx+12h]
add	ax, [bp+arg_2]
push	ax
mov	ax, 10000
push	ax
call	far ptr	561h:18Ah ; math_truncate_decimal_value
; nop, results in number of troops to distribute being off
add	sp, 4
push	ax
sub	ax, ax
push	ax
mov	ax, 6D5Bh	; 0x365F7
; Text:	'Assign how many men '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
; nop, results in no # troop query and full distribution to general but	# is off
add	sp, 6
mov	[bp+var_4], ax
cmp	ax, 0FFFFh
jnz	short loc_158A3
jmp	near ptr unk_15965
;     ***************************************************************************
mov	bx, [bp+arg_0]
sub	ax, [bx+12h]
mov	[bp+var_2], ax
or	ax, ax
jge	short loc_1591C
neg	[bp+var_2]
mov	ax, [bp+var_2]
cwd
mov	cx, ax
mov	bx, dx
add	ax, word_1C82E
adc	dx, word_1C830
push	dx
push	ax
push	word_1C830
push	word_1C82E
mov	si, ax
mov	al, byte_1C82C
sub	ah, ah
mov	di, dx
sub	dx, dx
push	dx
push	ax
mov	[bp+var_8], cx
mov	[bp+var_6], bx
call	far ptr	0:38B2h	; math_multiply_2_16bit_values
push	[bp+var_6]
push	[bp+var_8]
mov	bx, [bp+arg_0]
mov	cl, [bx+16h]
sub	ch, ch
sub	bx, bx
push	bx
push	cx
mov	[bp+var_C], ax
mov	[bp+var_A], dx
call	far ptr	0:38B2h	; math_multiply_2_16bit_values
add	ax, [bp+var_C]
adc	dx, [bp+var_A]
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/	; math_divide_2_16bit_values
mov	byte_1C82C, al
mov	word_1C82E, si
mov	word_1C830, di
jmp	short near ptr loc_15940+4
;     ***************************************************************************
push	ax
mov	al, byte_1C82C
sub	ah, ah
push	ax
push	word ptr [bx+12h]
mov	al, [bx+16h]
push	ax
call	far ptr	49Ch:0C6h ; math_value_z1_z2_from_x1_x2_y1_y2
add	sp, 8
mov	bx, [bp+arg_0]
mov	[bx+16h], al
mov	ax, [bp+var_2]
cwd
sub	word_1C82E, ax
sbb	word_1C830, dx
cmp	[bp+var_4], 0
jnz	short near ptr loc_15950+1
;     ***************************************************************************
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0C6h	;   *
db  47h	; G
db  16h
db  64h	; d
db  8Bh	;   *
db  46h	; F
db 0FCh	;   *
db  8Bh	;   *
db  5Eh	; ^
db    6
db  89h	;   *
db  47h	; G
db  12h
db 0FFh
db  76h	; v
db  0Ah
db  9Ah	;   *
db    0
db    7
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  5Eh	; ^
db  5Fh	; _
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_mil_hire_reassign_troops_query endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_mil_hire_reassign_troops proc far	; DATA XREF: game_mil_reassign_troops_query+53  t
; game_mil_hire_soldiers_main+E9  t

var_A		= byte ptr -0Ah
var_8		= byte ptr -8
var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_2		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 0Ch
mov	byte_1C82C, 0
mov	al, 1
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
mov	[bp+var_8], al
cmp	al, 8
jbe	short near ptr loc_15990+2
sub	al, al
jmp	short near ptr loc_15993+1
;     ***************************************************************************
nop
mov	al, 1
mov	[bp+var_2], al
mov	byte_1357A, 0
sub	ax, ax
push	ax
mov	al, 4
push	ax
mov	al, 1
push	ax
call	far ptr	60Dh:260h ; game_display_generals_action_list_query_sub
add	sp, 6
mov	[bp+var_6], al
mov	[bp+var_A], 1
jmp	short near ptr unk_15A11
;     ***************************************************************************
inc	ax
jnz	short locret_159BC
jmp	near ptr loc_15A85+1
;     ***************************************************************************
dec	[bp+var_4]
push	[bp+arg_2]
cmp	word_1C830, 0
jl	short near ptr loc_159D7+1
jg	short near ptr loc_159CF+4
cmp	word_1C82E, 10000
jb	short near ptr loc_159D7+1
mov	ax, 10000
jmp	short loc_159DB
;     ***************************************************************************
mov	ax, word_1C82E
push	ax
mov	bx, [bp+var_4]
shl	bx, 1
push	word ptr [bx-314Eh]
push	cs
call	game_mil_hire_reassign_troops_query
add	sp, 6
mov	al, [bp+var_6]
sub	ah, ah
cmp	ax, [bp+var_4]
jbe	short near ptr unk_15A11
mov	al, [bp+var_A]
dec	ax
cmp	ax, [bp+var_4]
ja	short near ptr unk_15A11
sub	ax, ax
push	ax
mov	al, 4
push	ax
mov	al, byte ptr [bp+var_4]
push	ax
call	far ptr	60Dh:0C0h ; game_display_generals_action_list
add	sp, 6
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	word_1C830
push	word_1C82E
mov	ax, 6D70h	; 0x3660B
; Text:	'Remaining Men: '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
mov	al, [bp+var_8]
sub	ah, ah
push	ax
mov	al, [bp+var_2]
push	ax
mov	ax, 6D8Bh	; 0x36626
; Text:	'Change whom '
push	ax
call	game_input_query_display_and_query
add	sp, 6
mov	[bp+var_4], ax
mov	ax, 6D97h	; 0x36632
; Text:	'\n newline character'
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	ax, [bp+var_4]
or	ax, ax
jz	short near ptr loc_15A58+1
jmp	near ptr loc_159B4+2
;     ***************************************************************************
push	ax
mov	al, 4
push	ax
mov	bl, [bp+var_6]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-314Eh], 0
jnz	short loc_15A70
mov	al, 1
jmp	short locret_15A75
;     ***************************************************************************
nop
mov	al, [bp+var_6]
inc	al
mov	[bp+var_A], al
push	ax
call	far ptr	60Dh:260h ; game_display_generals_action_list_query_sub
; nop, unknown
add	sp, 6
mov	[bp+var_6], al
jmp	short near ptr unk_15A11
;     ***************************************************************************
mov	ax, word_1C830
or	ax, word_1C82E
jz	short loc_15AA3
push	word_1C830
push	word_1C82E
mov	ax, 6D99h	; 0x34ACD
; Text:	'OK '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
mov	ax, 6DB1h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
; nop, unknown
add	sp, 2
call	far ptr	3EFh:0A24h ; game_input_query_display_OK
or	ax, ax
jnz	short near ptr loc_15ABA+1
jmp	near ptr unk_15A11
;     ***************************************************************************
mov	ax, 30000
push	ax
mov	ax, 100
cwd
push	dx
push	ax
push	word_1C830
push	word_1C82E
call	far ptr	0:3818h /* math_divide_2_16bit_values*/	; math_divide_2_16bit_values
push	ax
mov	ax, current_province
add	ax, 14
push	ax
call	far ptr	49Ch:8Ch ; game_data_set_generals_soldiers
mov	sp, bp
pop	bp
retf
game_mil_hire_reassign_troops endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_mil_reassign_troops_query proc far

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2
push	current_province
call	far ptr	525h:122h ; math_return_total_province_troops
add	sp, 2
or	dx, ax
jz	short near ptr loc_15B42+4
mov	ax, 6DB6h	; 0x36651
; Text:	'Who will reassign '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 3
push	ax
mov	al, 1
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
sub	al, al
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	[bp+var_2], ax
or	ax, ax
jz	short near ptr loc_15B3A+3
sub	ax, ax
mov	word_1C830, ax
mov	word_1C82E, ax
push	[bp+var_2]
push	cs
call	game_mil_hire_reassign_troops
add	sp, 2
push	current_province
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf
game_mil_reassign_troops_query endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_mil_hire_soldiers_recalc_training_max_hire	proc far
; DATA XREF: game_mil_hire_soldiers_main+CF  t

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2
mov	bx, current_province
mov	ax, [bx+2]	; get governor of current province
mov	[bp+var_2], ax
or	ax, ax
jz	short j_15B90
mov	ax, 10000
mov	bx, [bp+var_2]
sub	ax, [bx+12h]	; 10000	- current troops = newly hired troops
push	ax
sub	ax, ax		; newly	hired troops have 0 training
push	ax
push	word ptr [bx+12h] ; current troops
mov	al, [bx+16h]	; current training
sub	ah, ah
push	ax
call	far ptr	49Ch:0C6h ; math_value_z1_z2_from_x1_x2_y1_y2
add	sp, 8
mov	bx, [bp+var_2]
mov	[bx+16h], al	; new training level = (current	troops * current training
; + new	troops * 0) / 10000
; because they're new, it's basically the ratio of the old troops as a percentage of total
mov	word ptr [bx+12h], 10000 ; troops now at 10000
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jnz	short locret_15B5E

j_15B90:				; DATA XREF: game_mil_hire_soldiers_recalc_training_max_hire+12  t
mov	sp, bp
pop	bp
retf
game_mil_hire_soldiers_recalc_training_max_hire	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_mil_hire_soldiers_main proc far	; DATA XREF: game_mil_hire_soldiers_check+46  t

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db  56h	; V
db  9Ah	;   *
db  90h	;   *
db    2
db 0B5h	;   *
db    4
db 0B8h	;   *
db 0C8h	;   *
db  6Dh	; m
db  50h	; P
db 0B8h	;   *
db  0Ch
db    0
db 0BAh	;   *
db  0Dh
db    6
db  52h	; R
db  50h	; P
db 0B0h	;   *
db    3
db  50h	; P
db 0B0h	;   *
db    1
db  50h	; P
db 0FFh
db  36h	; 6
db  9Ah	;   *
db  33h	; 3
db  9Ah	;   *
db  82h	;   *
db    3
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  50h	; P
db  2Ah	; *
db 0C0h	;   *
db  50h	; P
db  9Ah	;   *
db 0F6h	;   *
db    2
db  0Dh
db    6
db  83h	;   *
db 0C4h	;   *
db  0Ch
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db 0AFh	;   *
db    0
;     ***************************************************************************
push	[bp+arg_0]
mov	ax, 1
push	ax
mov	ax, 6DDAh	; 0x36676
; Text:	'Hire how many 100s of men (#-#)?'
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_4], ax
cmp	ax, 0FFFFh
jnz	short near ptr loc_15BF0+2
jmp	near ptr loc_15C82+1
;     ***************************************************************************
push	[bp+var_2]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
push	[bp+var_4]
call	game_mil_hire_soldiers_calc
add	sp, 2
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	525h:158h ; game_data_get_generals_or_free_in_province
add	sp, 2
dec	al
jnz	short near ptr loc_15C56+2
mov	ax, 100
mul	[bp+var_4]
push	ax
sub	cx, cx
push	cx
mov	bx, [bp+var_2]
push	word ptr [bx+12h]
mov	cl, [bx+16h]
sub	ch, ch
push	cx
mov	si, ax
call	far ptr	49Ch:0C6h ; math_value_z1_z2_from_x1_x2_y1_y2
add	sp, 8
mov	bx, [bp+var_2]
mov	[bx+16h], al	; enter	new training level based on troops
mov	ax, 10000
push	ax
push	si
lea	ax, [bx+12h]
push	ax
call	far ptr	49Ch:8Ch ; Game_data_set_generals_soldiers
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
call	game_mil_hire_soldiers_total_required
cmp	ax, [bp+var_4]
ja	short near ptr loc_15C6A+2
push	cs
call	game_mil_hire_soldiers_recalc_training_max_hire
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 100
mul	[bp+var_4]
mov	word_1C82E, ax
mov	word_1C830, dx
push	[bp+var_2]
push	cs
call	game_mil_hire_reassign_troops
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
game_mil_hire_soldiers_main endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_mil_hire_soldiers_check proc far
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, current_province
cmp	word ptr [bx+8], 10
jnb	short loc_15CA2
call	game_warning_not_enough_gold
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
cmp	word ptr [bx+0Ch], 0
jg	short near ptr loc_15CB4+2
jl	short near ptr loc_15CAF+1
cmp	word ptr [bx+0Ah], 100
jnb	short near ptr loc_15CB4+2
mov	ax, 6DF5h	; 0x36690
; Text:	'Not enough food '
jmp	short loc_15CC2
;     ***************************************************************************
nop
call	game_mil_hire_soldiers_check_sub
or	ax, ax
jnz	short loc_15CCC
mov	ax, 6E05h	; 0x366A0
; Text:	'Can't hire more men '
push	ax
call	game_warning_display_text_and_sound
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	ax
push	cs
call	game_mil_hire_soldiers_main
add	sp, 2
push	current_province
call	game_display_draw_province_data
mov	sp, bp
pop	bp
game_mil_hire_soldiers_check endp

retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_mil_hire_soldiers proc far
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr loc_15CF1+1
call	game_warning_no_one_can_do_that_now
retf
;     ***************************************************************************
nop
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 3
push	ax
mov	ax, 1
push	ax
mov	ax, 6E19h	; 0x366B4
; Text:	'1. Hire 2. Reassign 3.Train '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
cmp	ax, 0FFFFh
jz	short loc_15D1A
mov	bx, ax
shl	bx, 1
shl	bx, 1
call	dword ptr [bx+6E44h]
retf
game_mil_hire_soldiers endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_recruit_search_display proc far ;	DATA XREF: game_personal_search_query+E5  t
; game_personal_recruit_func+48  t

arg_0		= word ptr  6

push	bp
mov	bp, sp
call	far ptr	4B5h:282h ; game_gfx_blk_bkgrnd_shape_4
mov	bx, [bp+arg_0]
push	word ptr [bx+1Ah]
mov	ax, 84
push	ax
mov	ax, 38
push	ax
call	far ptr	4B5h:6A4h ; s_51F4
mov	sp, bp
mov	ax, [bp+arg_0]
add	ax, 42
push	ax
mov	ax, 6EBDh	; 0x36758
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
mov	sp, bp
mov	ax, [bp+arg_0]
add	ax, 1Ch
push	ax
mov	ax, 6EC8h	; 0x36763
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
mov	sp, bp
pop	bp
retf
game_personal_recruit_search_display endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_dismiss_which_general proc far ; DATA XREF: game_personal_dismiss_query+68  t

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 4
mov	ax, 6EDEh	; 0x36779
; Text:	'Dismiss whom '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
sub	al, al
push	ax
mov	al, 5
push	ax
push	[bp+arg_0]
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
mov	al, 5
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	[bp+var_2], ax
or	ax, ax
jnz	short near ptr loc_15D97+2
jmp	near ptr loc_15E81+2
;     ***************************************************************************
add	ax, 1Ch
push	ax
mov	ax, 6EEBh	; 0x36786
; Text:	'Dismiss %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jnz	short loc_15DB5
jmp	near ptr loc_15E81+2
;     ***************************************************************************
mov	bx, current_ruler
mov	ax, [bp+var_2]
cmp	[bx+4],	ax
jnz	short near ptr loc_15DC3+3
mov	word ptr [bx+4], 0
push	[bp+var_2]

loc_25DC9:				; CODE XREF: dseg:1EADD  P		 /* DOS offset ---> 1D48:9 */
call	far ptr	525h:84h ; s_52D4
add	sp, 2
dec	al
jnz	short near ptr loc_15DD8+2
mov	ax, 1
jmp	short loc_15DDC
;     ***************************************************************************
sub	ax, ax
mov	[bp+var_4], ax
push	[bp+var_2]
push	[bp+arg_0]
call	far ptr	59Dh:6A8h ; s_6078
add	sp, 4
mov	ax, [bp+var_2]
add	ax, 1Ch
push	ax
mov	ax, 6EFFh	; 0x3679A
; Text:	'%s has been dismissed '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	ax, 7530h
push	ax
mov	bx, [bp+var_2]
mov	ax, [bx+12h]
mov	cx, 100
sub	dx, dx
div	cx
push	ax
mov	ax, [bp+arg_0]
add	ax, 0Eh
push	ax
call	far ptr	49Ch:8Ch ; game_data_set_generals_soldiers
add	sp, 6
push	[bp+var_2]
push	[bp+arg_0]
call	far ptr	59Dh:428h ; s_5DF8
add	sp, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2
mov	bl, al

loc_25E3F:				; CODE XREF: s_59D6:loc_159DF  P		 /* DOS offset ---> 1D4F:F */
; dseg:27126  P
sub	bh, bh
shl	bx, 1
push	word ptr [bx-359Eh]
call	far ptr	59Dh:190h ; s_5B60
add	sp, 4
cmp	[bp+var_4], 0
jz	short loc_15E69
mov	bx, [bp+arg_0]
mov	ax, [bp+var_2]
cmp	[bx+2],	ax
jz	short loc_15E69
push	bx
call	far ptr	60Dh:54Ch ; s_661C
add	sp, 2
mov	bx, [bp+arg_0]
cmp	word ptr [bx+2], 0
jnz	short near ptr loc_15E81+2
push	bx
call	far ptr	59Dh:50Eh ; s_5EDE
add	sp, 2
push	[bp+arg_0]
call	far ptr	4B5h:3F4h ; s_4F44
mov	sp, bp
pop	bp
retf
game_personal_dismiss_which_general endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_personal_dismiss_advisor_clr_display proc far
; DATA XREF: game_personal_dismiss_advisor_query+67  t
; game_personal_appoint_which_province_query+D9  t
mov	ax, 7
push	ax
mov	ax, 8
push	ax
mov	ax, 14h
push	ax
mov	ax, 44
push	ax
mov	ax, 41
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
retf
game_personal_dismiss_advisor_clr_display endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_dismiss_advisor_query proc far

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2
mov	bx, current_ruler
mov	ax, [bx+4]
mov	[bp+var_2], ax
or	ax, ax
jnz	short near ptr loc_15EC9+1
mov	ax, 6F1Eh	; 0x367B9
; Text:	'No advisor '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, [bp+var_2]
add	ax, 1Ch
push	ax
mov	ax, 6F29h	; 0x367C4
; Text:	'Remove %s from advisor position '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jz	short loc_15F10
mov	bx, current_ruler
mov	word ptr [bx+4], 0
mov	ax, [bp+var_2]
add	ax, 1Ch
push	ax
mov	ax, 6F51h	; 0x367EC
; Text:	'%s is no longer advisor '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
push	cs
call	game_personal_dismiss_advisor_clr_display
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	[bp+var_2], 0
jmp	short loc_15F9B
game_personal_dismiss_advisor_query endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_personal_dismiss_query proc far
mov	al, [bp-4]
dec	al
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	[bp-6],	ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_15F9B
push	word ptr [bp-6]
push	current_province
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jz	short loc_15F9B
push	word ptr [bp-6]
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jnz	short loc_15F9B
mov	ax, [bp-6]
cmp	current_province, ax
jnz	short loc_15F7C
mov	bx, ax
push	word ptr [bx+2]
call	far ptr	525h:158h ; game_data_get_generals_or_free_in_province
add	sp, 2
dec	al
jz	short loc_15F9B
mov	ax, [bp-6]
cmp	current_province, ax
jz	short loc_15F88
mov	word_13536, ax
push	ax
push	cs
call	game_personal_dismiss_which_general
add	sp, 2
mov	word ptr [bp-2], 1
mov	word_13536, 0
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 41
push	ax
mov	ax, 1
push	ax
mov	ax, 6F6Ah	; 0x36805
; Text:	'Which province's generals '
push	ax

loc_25FAC:				; CODE XREF: dseg:228BA  P		 /* DOS offset ---> 1D66:C */
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp-4],	ax
cmp	ax, 0FFFFh
jz	short loc_15FBF
jmp	near ptr loc_15F20+2
;     ***************************************************************************
cmp	word ptr [bp-2], 0
jz	short loc_15FCE
push	current_province
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf
game_personal_dismiss_query endp


;     *************** S U B	R O U T	I N E     ***************************************


game_personal_dismiss_func proc	far
mov	bx, current_province
mov	ax, [bx+2]
push	ax
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jnz	short loc_15FEC
call	game_warning_not_home_province
retf
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 2
push	ax
mov	ax, 1
push	ax
mov	ax, 6F84h	; 0x3681F
; Text:	'1. General 2. Advisor
; Dismiss which	'
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
cmp	ax, 0FFFFh
jz	short loc_16014
mov	bx, ax
shl	bx, 1
shl	bx, 1
call	dword ptr [bx+6FACh]
retf
;     ***************************************************************************
nop
game_personal_dismiss_func endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_appoint_which_province_query proc	far
; DATA XREF: game_personal_appoint_func+16B  t

var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= byte ptr  8

; FUNCTION CHUNK AT 6063 SIZE 00000014 BYTES
; FUNCTION CHUNK AT 6125 SIZE 00000013 BYTES

push	bp
mov	bp, sp
sub	sp, 2
cmp	[bp+arg_2], 0
jnz	short loc_16028
mov	ax, 6FB8h
jmp	short loc_1602B
;     ***************************************************************************
nop
mov	ax, 6FCCh	; 0x36853
; Text:	'Appoint as governor '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
sub	al, al
push	ax
mov	al, 5
push	ax
push	[bp+arg_0]
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
cmp	[bp+arg_2], 1
sbb	al, al
and	al, 4
add	al, 1
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_16063
jmp	loc_16125
;     ***************************************************************************
cmp	[bp+arg_2], 1
jnz	short loc_160A6
mov	bx, ax
cmp	byte ptr [bx+4], 80
jnb	short near ptr loc_16081+1
mov	ax, 6FDFh	; 0x3687A
; Text:	'He can't become advisor '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, current_ruler
cmp	[bx+4],	ax
jnz	short loc_160A6
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 6FF7h	; 0x36892
; Text:	'He is already advisor '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
cmp	[bp+arg_2], 0
jnz	short near ptr loc_160B0+2
mov	ax, 7011h	; 0x368AC
; Text:	'governor '
jmp	short near ptr loc_160B3+2
;     ***************************************************************************
nop
mov	ax, 701Ah	; 0x368B5
; Text:	'advisor '
push	ax
mov	ax, [bp+var_2]
add	ax, 1Ch
push	ax
mov	ax, 7022h	; 0x368BD
; Text:	' %s is now %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
call	far ptr	57Ch:15Eh ; system_sound_6_dings
cmp	[bp+arg_2], 0
jnz	short near ptr loc_160E2+2
push	[bp+var_2]
push	[bp+arg_0]
call	far ptr	60Dh:510h ; s_65E0
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, [bp+var_2]
mov	bx, current_ruler
mov	[bx+4],	ax
push	cs
call	game_personal_dismiss_advisor_clr_display ; *
push	current_province
push	[bp+var_2]
call	far ptr	542h:15Ah ; game_data_check_advisor_in_province
add	sp, 4
or	ax, ax
jz	short loc_16125
mov	ax, 44
push	ax
mov	ax, 41
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
mov	ax, [bp+var_2]
add	ax, 1Ch
push	ax
mov	ax, 7038h	; 0x368D3
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
mov	sp, bp
pop	bp
retf
game_personal_appoint_which_province_query endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_appoint_func proc	far

var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_2		= byte ptr -2

push	bp
mov	bp, sp
sub	sp, 0Ch
mov	bx, current_province
mov	ax, [bx+2]
push	ax
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1614A+4
call	game_warning_not_home_province
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, current_province
cmp	word ptr [bx], 0
jnz	short loc_1616C
push	word ptr [bx+2]
call	far ptr	525h:158h ; game_data_get_generals_or_free_in_province
add	sp, 2
dec	al
jnz	short loc_1616C
mov	ax, 7057h
jmp	loc_162AF
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 2
push	ax
mov	ax, 1
push	ax
mov	ax, 7066h	; 0x36901
; Text:	'1. Governor 2.Advisor
; Appoint which	'
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_6], ax
cmp	ax, 0FFFFh
jnz	short near ptr game_display_generals_action_list
jmp	near ptr loc_162C8+1
;     ***************************************************************************
mov	[bp+var_8], 0
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
cmp	[bp+var_6], 1
jnz	short loc_161BA
mov	bx, current_province
cmp	word ptr [bx], 0
jnz	short loc_161AC
jmp	loc_162AC
;     ***************************************************************************
mov	ax, 41
push	ax
mov	ax, 1
push	ax
mov	ax, 70A6h	; 0x36941
; Text:	'Which province '
jmp	short loc_161F1
;     ***************************************************************************
nop
mov	bx, current_ruler
cmp	word ptr [bx+4], 0
jz	short near ptr loc_161D8+2
mov	ax, [bx+4]
add	ax, 1Ch
push	ax
mov	ax, 70B5h	; 0x36950
; Text:	'Now %s is advisor '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
jmp	short loc_161E6
;     ***************************************************************************
nop
mov	ax, 70D0h	; 0x3696B
; Text:	'Advisor position now empty '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	ax, 41
push	ax
mov	ax, 1
push	ax
mov	ax, 70ECh	; 0x36987
; Text:	'Which province's generals '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_A], ax
cmp	ax, 0FFFFh
jnz	short near ptr loc_16201+4
jmp	loc_162BA
;     ***************************************************************************
mov	al, byte ptr [bp+var_A]
dec	al
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	[bp+var_C], ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short near ptr loc_16223+3
jmp	near ptr loc_16193+2
;     ***************************************************************************
push	current_province
push	[bp+var_C]
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jnz	short near ptr loc_1623B+1
jmp	near ptr loc_16193+2
;     ***************************************************************************
push	[bp+var_C]
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jz	short loc_1624E
jmp	near ptr loc_16193+2
;     ***************************************************************************
mov	bx, [bp+var_C]
push	word ptr [bx+2]
call	far ptr	525h:158h ; game_data_get_generals_or_free_in_province
add	sp, 2
mov	[bp+var_2], al
cmp	[bp+var_6], 1
jnz	short loc_1627A
mov	ax, current_province
cmp	[bp+var_C], ax
jnz	short loc_16270
jmp	near ptr loc_16193+2
;     ***************************************************************************
cmp	[bp+var_2], 1
jnz	short near ptr loc_1628A+1
jmp	near ptr loc_16193+2
;     ***************************************************************************
nop
mov	ax, current_province
cmp	[bp+var_C], ax
jnz	short near ptr loc_1628A+1
cmp	[bp+var_2], 1
jnz	short near ptr loc_1628A+1
jmp	near ptr loc_16193+2
;     ***************************************************************************
mov	al, byte ptr [bp+var_6]
dec	al
push	ax
push	[bp+var_C]
push	cs
call	game_personal_appoint_which_province_query
add	sp, 4
mov	[bp+var_8], 1
cmp	[bp+var_6], 2
jz	short near ptr loc_162A8+1
jmp	near ptr loc_16193+2
;     ***************************************************************************
jmp	short loc_162BA
;     ***************************************************************************
nop
mov	ax, 7093h	; 0x3692E
; Text:	'No other provinces '
push	ax
call	game_warning_display_text_and_sound
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
cmp	[bp+var_8], 0
jz	short near ptr loc_162C8+1
push	current_province
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf
game_personal_appoint_func endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_recruit_func_result proc far ; DATA XREF:	game_personal_recruit_func+1D9  t

arg_2		= word ptr  6

push	bp
mov	bp, sp
cmp	[bp+arg_2], 0
jz	short near ptr loc_16326+4
mov	ax, 7106h	; 0x369A1
; Text:	'Success! '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
mov	sp, bp
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
mov	sp, bp
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
mov	sp, bp
or	ax, ax
jz	short near ptr loc_1630A+2
mov	ax, 7110h	; 0x369AB
; Text:	' has joined our followers '
jmp	short loc_1630F
;     ***************************************************************************
mov	ax, 712Ah	; 0x369C5
; Text:	' has joined our followers '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
mov	sp, bp
call	game_advisor_display_results ; *
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
mov	sp, bp
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
mov	sp, bp
or	ax, ax
jz	short loc_16350
mov	ax, 7144h	; 0x369DF
; Text:	' does not care to join us '
jmp	short loc_16353
;     ***************************************************************************
mov	ax, 715Eh	; 0x369F9
; Text:	' does not care to join us '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
mov	sp, bp
call	game_advisor_display_results ; *
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	sp, bp
pop	bp
retf
game_personal_recruit_func_result endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_search_query proc	far	; DATA XREF: game_personal_search+11  t

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 8
mov	ax, 7178h	; 0x36A13
; Text:	'Who will search '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 3
push	ax
mov	cl, 1
push	cx
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
mov	al, 3
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	word_1CE9E, ax
or	ax, ax
jnz	short near ptr loc_163A7+1
jmp	near ptr loc_164DA+2
;     ***************************************************************************
sub	ax, ax
push	ax
mov	cx, 7188h	; 0x36A23
; Text:	'Search '
push	cx
mov	cx, 6ED6h
push	cx
push	word_1CE9E
push	current_province
call	game_personal_search_calc
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh ; s_589C
add	sp, 2
mov	[bp+var_6], ax
push	ax
call	game_advisor_display
add	sp, 8
or	ax, ax
jnz	short loc_163DF
jmp	near ptr loc_164DA+2
;     ***************************************************************************
push	word_1CE9E
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	word_1CC6A, 0
cmp	[bp+var_6], 0
jnz	short loc_163FA
jmp	locret_164AC
;     ***************************************************************************
push	word_1CE9E
push	current_province
call	s_10C0A		; *
add	sp, 4
mov	bx, ax
mov	[bp+var_8], bx
mov	ax, [bx]
mov	[bp+var_2], ax
push	bx
mov	bx, current_province
push	word ptr [bx+6]
call	far ptr	59Dh:7Eh ; s_5A4E
add	sp, 4
mov	[bp+var_4], ax
or	ax, ax
jnz	short near ptr loc_16434+4
mov	ax, [bp+var_2]
mov	bx, current_province
mov	[bx+6],	ax
jmp	short near ptr loc_1643F+1
;     ***************************************************************************
nop
mov	ax, [bp+var_2]
mov	bx, [bp+var_4]
mov	[bx], ax
push	[bp+var_8]
push	current_province
call	far ptr	59Dh:190h ; s_5B60
add	sp, 4
push	[bp+var_8]
push	cs
call	game_personal_recruit_search_display ; *
add	sp, 2
mov	ax, 1
push	ax
call	far ptr	57Ch:96h ; system_sound_delay_1
add	sp, 2
mov	ax, [bp+var_8]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short loc_1648E
mov	ax, 718Fh	; 0x36A2A
; Text:	' is nearby '
jmp	short loc_16491
;     ***************************************************************************
nop
mov	ax, 719Ah	; 0x36A35
; Text:	' is nearby '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short loc_164C2
mov	ax, 71A5h	; 0x36A40
; Text:	'We found no prospects '
jmp	short near ptr loc_164C4+1
;     ***************************************************************************
nop
mov	ax, 71BBh	; 0x36A56
; Text:	'We found no prospects '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	sp, bp
pop	bp
retf
game_personal_search_query endp


;     *************** S U B	R O U T	I N E     ***************************************


game_personal_search proc far
call	game_data_get_generals_actions
or	al, al
jnz	short loc_164F0
call	game_warning_no_one_can_do_that_now
retf
;     ***************************************************************************
nop
push	cs
call	game_personal_search_query
push	current_province
call	game_display_draw_province_data
add	sp, 2
retf
game_personal_search endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_recruit_query proc far

var_C		= byte ptr -0Ch
var_A		= word ptr -0Ah
var_8		= byte ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= byte ptr  8

; FUNCTION CHUNK AT 6534 SIZE 0000000D BYTES
; FUNCTION CHUNK AT 6566 SIZE 00000069 BYTES
; FUNCTION CHUNK AT 65D0 SIZE 00000007 BYTES
; FUNCTION CHUNK AT 65D8 SIZE 00000008 BYTES

push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 4
push	ax
mov	ax, 1
push	ax
mov	ax, 71D1h	; 0x36A6C
; Text:	'1. Special Visit 3. Gold
; 2. Horse 4. Letter
; Which	method '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
dec	ax
jz	short loc_16534
dec	ax
jz	short near ptr unk_1654E
dec	ax
jz	short loc_16566
sub	ax, 0FFFCh
jz	short loc_16578
jmp	short loc_1657E
;     ***************************************************************************
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	542h:58h ; game_data_get_general_action
add	sp, 2
or	ax, ax
jnz	short loc_1657E
call	game_warning_no_one_can_do_that_now
jmp	short loc_16508
;     ***************************************************************************
mov	bx, current_province
cmp	byte ptr [bx+19h], 0
jnz	short loc_1657E
mov	ax, 7218h	; 0x36AB0
; Text:	'No horses '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
jmp	short loc_16508
;     ***************************************************************************
mov	bx, current_province
cmp	word ptr [bx+8], 100
jnb	short loc_1657E
call	game_warning_not_enough_gold
jmp	short loc_16508
;     ***************************************************************************
nop
mov	al, 0FFh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, byte ptr [bp+var_2]
dec	al
mov	sp, bp
pop	bp
retf
game_personal_recruit_query endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_recruit_func proc	far	; DATA XREF: game_personal_recruit+102  t

var_2		= word ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 6728 SIZE 00000034 BYTES
; FUNCTION CHUNK AT 675D SIZE 0000001C BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	ax, 7222h	; 0x36ABA
; Text:	'Recruit '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
sub	al, al
push	ax
mov	cx, current_province
cmp	[bp+arg_0], cx
jnz	short near ptr loc_165A9+1
mov	al, 2
jmp	short near ptr loc_165AB+1
;     ***************************************************************************
mov	al, 5
push	ax
push	[bp+arg_0]
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
sub	al, al
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	word_1CE9A, ax
or	ax, ax
jnz	short near ptr loc_165CD+1
jmp	near ptr loc_16762+2
;     ***************************************************************************
push	ax
push	cs
call	game_personal_recruit_search_display
add	sp, 2
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	ax, 722Ah
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:0A24h ; game_input_query_display_OK
or	ax, ax
jnz	short near ptr loc_16601+1
jmp	near ptr loc_16762+2
;     ***************************************************************************
push	cs
call	near ptr loc_164FF+3
mov	byte ptr loc_1CBA2, al
cmp	al, 0FFh
jnz	short near ptr loc_1660E+2
jmp	near ptr loc_16762+2
;     ***************************************************************************
or	al, al
jnz	short near ptr loc_1661D+1
mov	bx, current_province
mov	ax, [bx+2]
jmp	short near ptr loc_16646+2
;     ***************************************************************************
nop
mov	ax, 722Ch	; 0x36AC4
; Text:	'Send whom as messenger '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 3
push	ax
mov	al, 1
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
mov	al, 3
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	word_1CE9E, ax
or	ax, ax
jnz	short loc_16652
jmp	near ptr loc_16762+2
;     ***************************************************************************
push	ax
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	ax, current_province
cmp	[bp+arg_0], ax
jnz	short near ptr loc_16672+4
mov	al, byte ptr loc_1CBA2
push	ax
push	word_1CE9E
push	word_1CE9A
call	game_personal_recruit_ruler
jmp	short near ptr loc_16686+1
;     ***************************************************************************
mov	al, byte ptr loc_1CBA2
push	ax
push	word_1CE9E
push	word_1CE9A
call	game_personal_recruit_sub
add	sp, 6
push	ax
call	far ptr	57Ch:0DCh ; s_589C
add	sp, 2
mov	[bp+var_2], ax
sub	ax, ax
push	ax
push	word_162C4
mov	cx, 6EDAh
push	cx
push	[bp+var_2]
call	game_advisor_display
add	sp, 8
or	ax, ax
jnz	short near ptr loc_166B1+2
jmp	near ptr loc_16762+2
;     ***************************************************************************
mov	al, byte ptr loc_1CBA2
sub	ah, ah
dec	ax
jz	short near ptr loc_166BE+2
dec	ax
jz	short loc_166CA
jmp	short loc_166E0
;     ***************************************************************************
mov	bx, current_province
dec	byte ptr [bx+19h]
jmp	short loc_166E0
;     ***************************************************************************
nop
mov	bx, current_province
sub	word ptr [bx+8], 100
mov	word_1CA96, 100
sub	ax, ax
mov	word_1CA8A, ax
mov	word_1CA88, ax
mov	ax, current_province
cmp	[bp+arg_0], ax
jz	short near ptr loc_1673D+1
mov	byte_1CE9C, 0Ah
mov	ax, [bp+arg_0]
mov	word_1CEA4, ax
cmp	[bp+var_2], 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
call	game_messenger_travel
cmp	byte_1CA86, 2
jz	short loc_16711
cmp	byte_1CA86, 3
jnz	short loc_16730
mov	al, byte ptr loc_1CBA2
sub	ah, ah
dec	ax
jz	short near ptr loc_1671D+1
dec	ax
jz	short loc_16728
jmp	short loc_16730
;     ***************************************************************************
mov	bx, current_province
inc	byte ptr [bx+19h]
jmp	short loc_16730
;     ***************************************************************************
nop
mov	bx, current_province
add	word ptr [bx+8], 100
call	game_messenger_travel_results_2	; *
or	ax, ax
jz	short loc_1675D
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
cmp	[bp+var_2], 0
jz	short near ptr loc_16755+2
push	word_1CE9E
push	word_1CE9A
push	[bp+arg_0]
call	s_10CCE		; *
add	sp, 6
mov	word_1CC6A, 0
push	[bp+var_2]
push	cs
call	game_personal_recruit_func_result
mov	sp, bp
pop	bp
retf
game_personal_recruit_func endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_recruit proc far

var_1C		= word ptr -1Ch
var_1A		= word ptr -1Ah
var_16		= word ptr -16h
var_14		= word ptr -14h
var_4		= word ptr -4
var_2		= word ptr -2

; FUNCTION CHUNK AT 6780 SIZE 00000089 BYTES
; FUNCTION CHUNK AT 681D SIZE 00000004 BYTES
; FUNCTION CHUNK AT 6832 SIZE 00000021 BYTES
; FUNCTION CHUNK AT 6860 SIZE 00000031 BYTES

push	bp
mov	bp, sp
sub	sp, 4
call	game_data_get_generals_actions
or	al, al
jnz	short loc_16780
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jnz	short loc_1679C
mov	ax, current_province
mov	[bp+var_4], ax
jmp	short near ptr loc_16804+3
;     ***************************************************************************
nop
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 41
push	ax
mov	ax, 1
push	ax
mov	ax, 7243h	; 0x36ADB
; Text:	'Which province's generals '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jnz	short loc_167C0
jmp	near ptr loc_16885+4
;     ***************************************************************************
mov	al, byte ptr [bp+var_2]
dec	al
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	[bp+var_4], ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_1679C
push	[bp+var_4]
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jnz	short loc_1679C
mov	ax, [bp+var_4]
cmp	current_province, ax
jz	short near ptr loc_16804+3
push	current_province
push	ax
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jnz	short loc_1679C
mov	ax, [bp+var_4]
cmp	current_province, ax
jnz	short loc_16832
mov	bx, ax
push	word ptr [bx+4]
call	far ptr	525h:158h ; game_data_get_generals_or_free_in_province
add	sp, 2
or	al, al
jnz	short loc_16866
mov	ax, 725Dh	; 0x36AF5
; Text:	'No free generals '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, ax
push	word ptr [bx+2]
call	far ptr	525h:30h ; s_5280
add	sp, 2
mov	bx, ax
mov	ax, [bp+var_4]
cmp	[bx+2],	ax
jnz	short loc_16860
mov	bx, ax
push	word ptr [bx+2]
call	far ptr	525h:158h ; game_data_get_generals_or_free_in_province
add	sp, 2
dec	al
jnz	short loc_16860
mov	ax, 726Eh
jmp	short near ptr loc_16822+2
;     ***************************************************************************
nop
mov	ax, [bp+var_4]
mov	word_13536, ax
push	[bp+var_4]
push	cs
call	game_personal_recruit_func
add	sp, 2
mov	word_13536, 0
call	s_105CA		; *
or	ax, ax
jnz	short near ptr loc_16885+4
push	ax
push	current_province
call	game_display_draw_province_info_and_data
mov	sp, bp
pop	bp
retf
game_personal_recruit endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_personal_func proc	far

var_6		= word ptr -6

; FUNCTION CHUNK AT 68FC SIZE 000000F4 BYTES

push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	bx, current_province
mov	ax, [bx+2]
mov	si, ax
call	game_data_get_generals_actions
push	si
mov	[bp+var_6], ax
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
cmp	ax, 1
sbb	ax, ax
neg	ax
cmp	byte ptr [bp+var_6], 1
sbb	cx, cx
neg	cx
test	ax, cx
jz	short near ptr loc_168CA+2
call	game_warning_no_one_can_do_that_now
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	bx, current_province
mov	ax, [bx+2]
push	ax
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jnz	short near ptr loc_16906+4
call	game_data_get_generals_actions
or	al, al
jnz	short loc_168FC
mov	ax, 4
push	ax
mov	ax, 1
push	ax
mov	ax, 7285h	; 0x36B1D
; Text:	'1. Recruit 3. Appoint
; 2. Search 4. Dismiss '
jmp	short near ptr loc_16928+3
;     ***************************************************************************
nop
mov	ax, 4
push	ax
mov	ax, 1
push	ax
mov	ax, 72C6h	; 0x36B5E
; Text:	'1. Recruit 3. Appoint
; 2. Recruit 4.	Dismiss	'
jmp	short near ptr loc_16928+3
;     ***************************************************************************
nop
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr loc_1691E+2
mov	ax, 4
push	ax
mov	ax, 1
push	ax
mov	ax, 7310h	; 0x36BA8
; Text:	'1. Recruit 3. Appoint
; 2. Recruit 4.	Dismiss	'
jmp	short near ptr loc_16928+3
;     ***************************************************************************
mov	ax, 4
push	ax
mov	ax, 1
push	ax
mov	ax, 735Ah	; 0x36BF2
; Text:	'1. Recruit 3. Appoint
; 2. Recruit 4.	Dismiss	'
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
cmp	ax, 0FFFFh
jz	short loc_16943
mov	bx, ax
shl	bx, 1
shl	bx, 1
call	dword ptr [bx+7398h]
pop	si
mov	sp, bp
pop	bp
retf
game_personal_func endp


;     *************** S U B	R O U T	I N E     ***************************************


game_diplomacy_send_whom proc far	; DATA XREF: game_diplomacy_threaten_result+C  t
; game_diplomacy_gift_query_result+C  t ...
mov	ax, 74BBh	; 0x36D53
; Text:	'Send whom as messenger '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 3
push	ax
mov	cl, 1
push	cx
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
mov	al, 3
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
retf
game_diplomacy_send_whom endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_threaten_result proc far	; DATA XREF: game_diplomacy_threaten+62  t

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 6A00 SIZE 00000036 BYTES

push	bp
mov	bp, sp
sub	sp, 4
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	cs
call	game_diplomacy_send_whom
mov	word_1CE9E, ax
or	ax, ax
jnz	short near ptr loc_1698C+1
jmp	near ptr loc_16AA7+1
;     ***************************************************************************
push	ax
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
push	[bp+arg_0]
call	game_diplomacy_threaten_check
add	sp, 2
push	ax
call	far ptr	57Ch:0DCh ; s_589C
add	sp, 2
mov	[bp+var_2], ax
sub	ax, ax
push	ax
push	word_162C4
mov	cx, 74D2h
push	cx
push	[bp+var_2]
call	game_advisor_display
add	sp, 8
or	ax, ax
jnz	short loc_169CA
jmp	near ptr loc_16AA7+1
;     ***************************************************************************
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
mov	[bp+var_4], ax
mov	byte_1CE9C, 4
mov	word_1CAF0, bx
mov	ax, [bx+2]
mov	word_1CEA4, ax
cmp	[bp+var_2], 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
call	game_messenger_travel
call	game_messenger_travel_results_2
or	ax, ax
jz	short loc_16A00
jmp	near ptr loc_16AA7+1
;     ***************************************************************************
mov	al, byte_1CEA0
sub	ah, ah
or	ax, ax
jz	short loc_16A16
dec	ax
jz	short near ptr loc_16A69+1
call	game_messenger_travel_results_1	; *
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short near ptr loc_16A2A+2
mov	ax, 74E2h	; 0x36D7A
; Text:	'Well done! '
jmp	short near ptr loc_16A2E+1
;     ***************************************************************************
nop
mov	ax, 74EEh	; 0x36D86
; Text:	'Well done! '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
push	[bp+var_4]
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
mov	ax, 74FAh	; 0x36D92
; Text:	' has submitted to us! '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	[bp+var_4]
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short near ptr unk_16A8E
mov	ax, 7510h	; 0b36DA8
; Text:	' scorned our attempt to scare him '
jmp	short near ptr unk_16A91
;     ***************************************************************************
mov	ax, 7532h	; 0x36DCA
; Text:	' scorned our attempt to scare him '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:126h
mov	sp, bp
pop	bp
retf
game_diplomacy_threaten_result endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_threaten	proc far

var_4		= word ptr -4
var_2		= word ptr -2

; FUNCTION CHUNK AT 6AA7 SIZE 0000009C BYTES

push	bp
mov	bp, sp
sub	sp, 2
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr loc_16AC2+2
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
push	ax
mov	al, 3
push	ax
mov	ax, 7554h	; 0x36DEC
; Text:	'Threaten whom '
push	ax
call	game_ruler_hos_tru_table_query
add	sp, 6
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_16AEE
push	current_province
call	game_display_draw_province_data
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	ax
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short near ptr loc_16B08+2
mov	ax, 7562h	; 0x36DFA
; Text:	'Can't threaten him. '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
jmp	short loc_16ADD
;     ***************************************************************************
nop
push	[bp+var_2]
push	cs
call	game_diplomacy_threaten_result
add	sp, 2
call	s_105CA		; *
or	ax, ax
jnz	short near ptr loc_16B26+1
push	ax
push	current_province
call	game_display_draw_province_info_and_data
mov	sp, bp
pop	bp
retf
game_diplomacy_threaten	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_cancel_alliance proc far

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2
sub	ax, ax
push	ax
mov	al, 1
push	ax
mov	ax, 7577h	; 0x36E0F
; Text:	'Which ruler '
push	ax
call	game_ruler_hos_tru_table_query
add	sp, 6
mov	[bp+var_2], ax
or	ax, ax
jz	short near ptr unk_16B77
mov	bx, ax
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 7583h	; 0x36E1B
; Text:	'Your alliance with %s is broken '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	ax, 1
push	ax
push	[bp+var_2]
push	current_ruler
call	game_diplomacy_cancel_alliance_sub
add	sp, 6
push	current_province
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf
game_diplomacy_cancel_alliance endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_gift_query_result proc far ; DATA XREF: game_diplomacy_gift+52  t

var_2		= word ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 6C1F SIZE 0000002A BYTES
; FUNCTION CHUNK AT 6C4A SIZE 00000050 BYTES
; FUNCTION CHUNK AT 6CEC SIZE 0000005F BYTES
; FUNCTION CHUNK AT 6D4C SIZE 0000000E BYTES
; FUNCTION CHUNK AT 6D88 SIZE 00000014 BYTES

push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	cs
call	game_diplomacy_send_whom
mov	word_1CE9E, ax
or	ax, ax
jnz	short near ptr unk_16B9D
jmp	near ptr loc_16D21+2
;     ***************************************************************************
mov	ax, 3E8h
push	ax
mov	bx, current_province
push	word ptr [bx+8]
call	far ptr	561h:18Ah ; math_truncate_decimal_value
add	sp, 4
push	ax
mov	ax, 100
push	ax
mov	ax, 75ACh	; 0x36E44
; Text:	'Offer how much gold '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jnz	short near ptr unk_16BCC
jmp	near ptr loc_16D21+2
;     ***************************************************************************
push	word_1CE9E
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	byte_1CE9C, 3
mov	bx, [bp+arg_0]
mov	ax, [bx+2]
mov	word_1CEA4, ax
mov	ax, [bp+var_2]
mov	word_1CA96, ax
sub	cx, cx
mov	word_1CA8A, cx
mov	word_1CA88, cx
mov	bx, current_province
sub	[bx+8],	ax
mov	byte_1CEA0, 0
call	game_messenger_travel
cmp	byte_1CA86, 2
jz	short near ptr unk_16C15
cmp	byte_1CA86, 3
jnz	short loc_16C1F
mov	ax, [bp+var_2]
mov	bx, current_province
add	[bx+8],	ax
call	game_messenger_travel_results_2
or	ax, ax
jz	short loc_16C2B
jmp	near ptr loc_16D21+2
;     ***************************************************************************
mov	al, byte_1CEA0
sub	ah, ah
or	ax, ax
jz	short loc_16C44
dec	ax
jnz	short loc_16C3A
jmp	locret_16CC2
;     ***************************************************************************
dec	ax
dec	ax
jnz	short near ptr loc_16C3D+4
jmp	near ptr loc_16D13+1
;     ***************************************************************************
jmp	near ptr loc_16D1C+2
;     ***************************************************************************
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short loc_16C7E
mov	ax, 75C1h	; 0x36E59
; Text:	'Success! '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
mov	ax, 75CBh	; 0x36E63
; Text:	' acccepted our tribute gift '
jmp	short near ptr unk_16CA6
;     ***************************************************************************
mov	ax, 75E6h	; 0x36E7E
; Text:	'Our gift arrived safely '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
mov	ax, 75FFh	; 0x36E97
; Text:	' was pleased '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short loc_16CEC
mov	ax, 760Ch	; 0x36EA4
; Text:	' dared to refuse our tribute gift'
jmp	short near ptr loc_16CED+2
;     ***************************************************************************
mov	ax, 762Eh	; 0x36EC6
; Text:	' refused our tribute gift '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	ax, [bp+var_2]
mov	bx, current_province
add	[bx+8],	ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, [bp+var_2]
;     ***************************************************************************
db  8Bh	;   *
db  1Eh
db  9Ah	;   *
db  33h	; 3
db    1
db  47h	; G
db    8
db  9Ah	;   *
db 0A2h	;   *
db    7
db 0F9h	;   *
db  12h
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_diplomacy_gift_query_result endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_gift proc far

; FUNCTION CHUNK AT 6D66 SIZE 00000022 BYTES

push	bp
mov	bp, sp
sub	sp, 2
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr loc_16D3F+1
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
push	ax
mov	al, 3
push	ax
mov	ax, 7648h	; 0x36EE0
; Text:	'Offer gold to whom '
push	ax
call	game_ruler_hos_tru_table_query
add	sp, 6
or	ax, ax
jnz	short loc_16D66
push	current_province
call	game_display_draw_province_data
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, current_province
cmp	word ptr [bx+8], 100
jnb	short near ptr loc_16D77+1
call	game_warning_not_enough_gold
jmp	short near ptr loc_16D55+1
;     ***************************************************************************
nop
push	ax
push	cs
call	game_diplomacy_gift_query_result
add	sp, 2
call	s_105CA		; *
or	ax, ax
jnz	short loc_16D93
push	ax
push	current_province
call	game_display_draw_province_info_and_data
mov	sp, bp
pop	bp
retf
game_diplomacy_gift endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_marriage_result proc far	; DATA XREF: game_diplomacy_marriage+63  t

var_4		= byte ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 6E3E SIZE 0000002E BYTES
; FUNCTION CHUNK AT 6E72 SIZE 00000027 BYTES
; FUNCTION CHUNK AT 6E9A SIZE 00000023 BYTES
; FUNCTION CHUNK AT 6EE9 SIZE 00000001 BYTES

push	bp
mov	bp, sp
sub	sp, 2
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr loc_16DAF+1
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	cs
call	game_diplomacy_send_whom
mov	word_1CE9E, ax
or	ax, ax
jnz	short loc_16DBE
jmp	loc_16EE9
;     ***************************************************************************
push	ax
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
push	word_1CE9E
push	[bp+arg_0]
call	game_diplomacy_marriage_calc
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh ; s_589C
add	sp, 2
mov	[bp+var_2], ax
sub	ax, ax
push	ax
push	word_162C4
mov	cx, 74D6h
push	cx
push	[bp+var_2]
call	game_advisor_display
add	sp, 8
or	ax, ax
jnz	short near ptr loc_16DFE+1
jmp	loc_16EE9
;     ***************************************************************************
mov	byte_1CE9C, 2
mov	bx, [bp+arg_0]
mov	ax, [bx+2]
mov	word_1CEA4, ax
cmp	[bp+var_2], 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
call	game_messenger_travel
call	game_messenger_travel_results_2	; *
or	ax, ax
jz	short near ptr unk_16E29
jmp	loc_16EE9
;     ***************************************************************************
mov	al, byte_1CEA0
sub	ah, ah
or	ax, ax
jz	short loc_16E3E
dec	ax
jz	short near ptr loc_16E8D+3
call	game_messenger_travel_results_1	; *
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short loc_16E72
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	ax, 765Bh	; 0x36EF3
; Text:	' is delighted to marry your daughter '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
jmp	short near ptr loc_16E7D+2
;     ***************************************************************************
mov	ax, 7680h	; 0x36F18
; Text:	'Congratulations on your daughter's marriage! '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short near ptr loc_16EB9+1
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	ax, 76ADh	; 0x36F45
; Text:	' is not a marrying man '
jmp	short near ptr loc_16ED1+1
;     ***************************************************************************
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	ax, 76C4h	; 0x36F5C
; Text:	' said he was flattered, but... '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	sp, bp
pop	bp
retf
game_diplomacy_marriage_result endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_marriage	proc far

; FUNCTION CHUNK AT 6F13 SIZE 00000001 BYTES

push	bp
mov	bp, sp
sub	sp, 2
call	game_data_get_generals_actions
or	al, al
jnz	short loc_16F06
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, current_ruler
test	byte ptr [bx+7], 2
jz	short loc_16F2C
mov	ax, 76E3h	; 0x36F7B
; Text:	'You have no daughters '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
push	current_province
call	game_display_draw_province_data
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
cmp	byte ptr [bx+21h], 0FFh
jz	short near ptr loc_16F35+3
mov	ax, 76F9h	; 0x36F91
; Text:	'Your daughter is already married '
jmp	short loc_16F13
;     ***************************************************************************
nop
mov	ax, 1
push	ax
mov	al, 3
push	ax
mov	ax, 771Ah	; 0x36FB2
; Text:	'Offer your daughter to whom '
push	ax
call	game_ruler_hos_tru_table_query
add	sp, 6
or	ax, ax
jz	short near ptr loc_16F1A+2
push	ax
push	cs
call	game_diplomacy_marriage_result
add	sp, 2
call	s_105CA		; *
or	ax, ax
jnz	short near ptr loc_16F68+2
push	ax
push	current_province
call	game_display_draw_province_info_and_data
mov	sp, bp
pop	bp
retf
game_diplomacy_marriage	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_joint_invasion_result proc far ;	DATA XREF: game_diplomacy_joint_invasion+96  t

var_E		= word ptr -0Eh
var_8		= word ptr -8
var_2		= word ptr -2
arg_2		= word ptr  6

; FUNCTION CHUNK AT 7035 SIZE 00000025 BYTES

push	bp
mov	bp, sp
sub	sp, 2
push	cs
call	game_diplomacy_send_whom
mov	word_1CE9E, ax
or	ax, ax
jnz	short loc_16F82
jmp	near ptr loc_170B8+1
;     ***************************************************************************
push	ax
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
push	word_1CE9E
push	[bp+arg_2]
call	game_diplomacy_joint_invasion_precalc
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh ; s_589C
add	sp, 2
mov	[bp+var_2], ax
sub	ax, ax
push	ax
push	word_162C4
mov	cx, 74DAh
push	cx
push	[bp+var_2]
call	game_advisor_display
add	sp, 8
or	ax, ax
jnz	short near ptr unk_16FC3
jmp	near ptr loc_170B8+1
;     ***************************************************************************
mov	byte_1CE9C, 1
mov	bx, [bp+arg_2]
mov	ax, [bx+2]

loc_26FCE:		 /* DOS offset ---> 1E68:E */
mov	word_1CEA4, ax
mov	ax, word_1CA9A
mov	word_1CEAC, ax
cmp	[bp+var_2], 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
call	game_messenger_travel
call	game_messenger_travel_results_2	; *
or	ax, ax
jz	short near ptr loc_16FF2+1
jmp	near ptr loc_170B8+1
;     ***************************************************************************
mov	al, byte_1CEA0
sub	ah, ah
or	ax, ax
jz	short near ptr loc_17006+2
dec	ax
jz	short loc_17050
call	game_messenger_travel_results_1	; *
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, [bp+arg_2]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short locret_17032
mov	ax, 7736h	; 0x36FCE
; Text:	' has agreed to a joint invasion '
jmp	short loc_17035
;     ***************************************************************************
mov	ax, 7756h	; 0x36FEE
; Text:	' agreed to
; invade with us '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short near ptr loc_17077+3
mov	bx, [bp+arg_2]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	ax, 7771h	; 0x37009
; Text:	' rejected our joint invasion plan. '
jmp	short near ptr loc_170A0+2
;     ***************************************************************************
mov	ax, 7793h	; 0x3702B
; Text:	'It's a pity, but '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	bx, [bp+arg_2]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
mov	ax, 77A5h	; 0x3703D
; Text:	' refuses to invade with us '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	sp, bp
pop	bp
retf
game_diplomacy_joint_invasion_result endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_joint_invasion_invade_whom_sub proc far
; DATA XREF: game_diplomacy_joint_invasion_invade_whom_neighbors+77  t
; game_diplomacy_joint_invasion_invade_whom+A2  t

var_E		= byte ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_2		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 0Eh
push	[bp+arg_2]
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jz	short near ptr loc_170D5+1
jmp	near ptr loc_17170+2
;     ***************************************************************************
mov	[bp+var_C], ax
mov	[bp+var_8], ax
mov	[bp+var_E], 0
mov	bx, word_1CA9A
mov	al, [bx+20h]
mov	byte ptr [bp+var_4], al
mov	al, [bx+21h]
mov	byte ptr [bp+var_6], al
mov	al, [bp+var_E]
push	ax
lea	ax, [bp+var_6]
push	ax
lea	ax, [bp+var_4]
push	ax
call	far ptr	game_data_get_surrounding_provinces
add	sp, 6
mov	[bp+var_2], al
cmp	al, 0FFh
jz	short near ptr loc_17151+4
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	[bp+var_A], ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr loc_17151+4
push	[bp+var_A]
push	current_province
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jz	short near ptr loc_1713D+1
mov	[bp+var_8], 1
jmp	short near ptr loc_17151+4
;     ***************************************************************************
push	[bp+var_A]
push	[bp+arg_2]
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jz	short near ptr loc_17151+4
mov	[bp+var_C], 1
inc	[bp+var_E]
cmp	[bp+var_E], 6
jb	short near ptr loc_170DE+2
cmp	[bp+var_8], 0
jz	short near ptr loc_17170+2
cmp	[bp+var_C], 0
jz	short near ptr loc_17170+2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_diplomacy_joint_invasion_invade_whom_sub endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_joint_invasion_invade_whom_neighbors proc far
; DATA XREF: game_diplomacy_joint_invasion_invade_whom+F  t

var_4		= byte ptr -4
var_2		= byte ptr -2
arg_2		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 4
mov	ax, 77C0h	; 0x37058
; Text:	'Neighboring enemy provinces: '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 2
sub	al, al
mov	[bp+var_2], al
mov	[bp+var_4], al
mov	al, [bp+var_4]
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	word_1CA9A, ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1720E+1
mov	bx, [bp+arg_2]
push	word ptr [bx+2]
push	word_1CA9A
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jnz	short near ptr loc_1720E+1
push	word_1CA9A
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1720E+1
push	current_province
push	word_1CA9A
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jnz	short near ptr loc_1720E+1
mov	bx, [bp+arg_2]
push	word ptr [bx+2]
push	cs
call	game_diplomacy_joint_invasion_invade_whom_sub ;	*
add	sp, 2
or	ax, ax
jz	short near ptr loc_1720E+1
mov	al, [bp+var_4]
sub	ah, ah
inc	ax
push	ax
mov	ax, 77E4h	; 0x3707C
; Text:	' %d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
inc	[bp+var_2]
inc	[bp+var_4]
cmp	[bp+var_4], 42
jnb	short near ptr loc_1721A+1
jmp	near ptr loc_17190+2
;     ***************************************************************************
cmp	[bp+var_2], 0
jnz	short near ptr loc_17233+1
mov	ax, 77E8h	; 0x37080
; Text:	'<None> '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_diplomacy_joint_invasion_invade_whom_neighbors endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_joint_invasion_invade_whom proc far
; DATA XREF: game_diplomacy_joint_invasion+88  t

var_2		= word ptr -2
arg_2		= word ptr  6

; FUNCTION CHUNK AT 72D7 SIZE 00000023 BYTES

push	bp
mov	bp, sp
sub	sp, 4
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	[bp+arg_2]
push	cs
call	game_diplomacy_joint_invasion_invade_whom_neighbors
add	sp, 2
or	ax, ax
jnz	short near ptr loc_17256+2
jmp	near ptr loc_172ED+1
;     ***************************************************************************
mov	ax, 77EFh	; 0x37087
; Text:	'Invade which province? '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 2
mov	ax, 41
push	ax
mov	ax, 1
push	ax
call	far ptr	3EFh:998h ; game_input_query_func
add	sp, 4
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short near ptr loc_172ED+1
mov	al, byte ptr [bp+var_2]
dec	al
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	word_1CA9A, ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr loc_17240+2
mov	bx, [bp+arg_2]
push	word ptr [bx+2]
push	word_1CA9A
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jnz	short near ptr loc_17240+2
push	word_1CA9A
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jnz	short near ptr loc_17240+2
push	current_province
push	word_1CA9A
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jz	short loc_172D7
jmp	near ptr loc_17240+2
;     ***************************************************************************
mov	bx, [bp+arg_2]
push	word ptr [bx+2]
push	cs
call	game_diplomacy_joint_invasion_invade_whom_sub ;	*
add	sp, 2
or	ax, ax
jnz	short near ptr loc_172E9+2
jmp	near ptr loc_17240+2
;     ***************************************************************************
jmp	short near ptr loc_172F2+2
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_diplomacy_joint_invasion_invade_whom endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_joint_invasion proc far

var_4		= word ptr -4

push	bp
mov	bp, sp
sub	sp, 4
push	si
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr loc_17312+4
call	game_warning_no_one_can_do_that_now
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	s_105E6		; *
mov	bx, current_ruler
cmp	byte ptr [bx+1Eh], 0FFh
jz	short near ptr loc_17366+3
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	bx, current_ruler
mov	al, 41
mul	byte ptr [bx+1Eh]
mov	si, ax
mov	ax, [si+2B34h]
add	ax, 1Ch
push	ax
mov	al, [bx+1Fh]
sub	ah, ah
inc	ax
push	ax
mov	ax, 780Ch	; 0x370A4
; Text:	'We've already promised to invade '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jz	short loc_173C0
mov	bx, current_ruler
mov	byte ptr [bx+1Eh], 0FFh
mov	bx, current_ruler
and	byte ptr [bx+7], 0F7h
sub	ax, ax
push	ax
mov	al, 1
push	ax
mov	ax, 7863h	; 0x370FB
; Text:	'Plan joint invasion with whom '
push	ax
call	game_ruler_hos_tru_table_query
add	sp, 6
mov	[bp+var_4], ax
or	ax, ax
jz	short near ptr loc_173B3+1
push	ax
push	cs
call	game_diplomacy_joint_invasion_invade_whom
add	sp, 2
or	ax, ax
jz	short near ptr loc_173B3+1
push	[bp+var_4]
push	cs
call	game_diplomacy_joint_invasion_result ; *
add	sp, 2
call	s_105CA		; *
or	ax, ax
jnz	short loc_173C0
push	ax
push	current_province
call	game_display_draw_province_info_and_data
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	current_province
call	game_display_draw_province_data
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
game_diplomacy_joint_invasion endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_alliance_result proc far

var_2		= word ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 73DA SIZE 0000013C BYTES

push	bp
mov	bp, sp
sub	sp, 2
push	cs
call	game_diplomacy_send_whom
mov	word_1CE9E, ax
or	ax, ax
jnz	short loc_173DA
jmp	near ptr loc_1750E+2
;     ***************************************************************************
push	ax
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
push	word_1CE9E
push	[bp+arg_0]
call	game_diplomacy_alliance_calc
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh ; s_589C
add	sp, 2
mov	[bp+var_2], ax
sub	ax, ax
push	ax
push	word_162C4
mov	cx, 74DEh
push	cx
push	[bp+var_2]
call	game_advisor_display
add	sp, 8
or	ax, ax
jnz	short loc_1741B
jmp	near ptr loc_1750E+2
;     ***************************************************************************
mov	byte_1CE9C, 0
mov	bx, [bp+arg_0]
mov	ax, [bx+2]
mov	word_1CEA4, ax
cmp	[bp+var_2], 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
call	game_messenger_travel
call	game_messenger_travel_results_2	; *
or	ax, ax
jz	short loc_17445
jmp	near ptr loc_1750E+2
;     ***************************************************************************
mov	al, byte_1CEA0
sub	ah, ah
or	ax, ax
jz	short near ptr loc_17458+2
dec	ax
jz	short loc_174BC
call	game_messenger_travel_results_1	; *
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_1CE9E
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1749C+2
mov	ax, 7881h	; 0x37119
; Text:	'Success! '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
mov	ax, 788Bh	; 0x37123
; Text:	' has agreed to ally with us '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
jmp	short near ptr loc_174A9+2
;     ***************************************************************************
mov	ax, 78A7h	; 0x3713F
; Text:	'Hurray! We have sealed the alliance '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:15Eh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 78CBh
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
push	word_1CE9E
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_174F6
mov	ax, 78CCh	; 0x37164
; Text:	' refuses to ally with us '
jmp	short loc_174F9
;     ***************************************************************************
mov	ax, 78E5h	; 0x3717D
; Text:	' refuses to ally with us '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:126h
mov	sp, bp
pop	bp
retf
game_diplomacy_alliance_result endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_alliance	proc far

var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= byte ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 7537 SIZE 00000049 BYTES

push	bp
mov	bp, sp
sub	sp, 2
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr unk_1752C
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
push	ax
mov	al, 2
push	ax
mov	ax, 78FEh	; 0x37196
; Text:	'Ally with whom '
push	ax
call	game_ruler_hos_tru_table_query
add	sp, 6
or	ax, ax
jnz	short near ptr loc_17551+1
push	current_province
call	game_display_draw_province_data
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	ax
push	cs
call	game_diplomacy_alliance_result
add	sp, 2
call	s_105CA		; *
or	ax, ax
jnz	short loc_1756D
push	ax
push	current_province
call	game_display_draw_province_info_and_data
mov	sp, bp
pop	bp
retf
game_diplomacy_alliance	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_diplomacy_func proc far

var_10		= byte ptr -10h
var_E		= byte ptr -0Eh
var_C		= byte ptr -0Ch
var_A		= byte ptr -0Ah
var_8		= byte ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  6

; FUNCTION CHUNK AT 759D SIZE 0000007D BYTES

push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	bx, current_province
mov	ax, [bx+2]
mov	si, ax
call	game_data_get_generals_actions
push	si
mov	[bp+var_6], ax
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
cmp	ax, 1
sbb	ax, ax
neg	ax
cmp	byte ptr [bp+var_6], 1
sbb	cx, cx
neg	cx
test	ax, cx
jz	short loc_175B0
call	game_warning_no_one_can_do_that_now
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	bx, current_province
mov	ax, [bx+2]
push	ax
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jnz	short near ptr loc_175D5+1
mov	ax, 6
push	ax
mov	ax, 1
push	ax
mov	ax, 790Dh
jmp	short loc_17615
;     ***************************************************************************
call	game_data_get_generals_actions
or	al, al
jnz	short loc_175EC
mov	ax, 6
push	ax
mov	ax, 1
push	ax
mov	ax, 798Ch
jmp	short loc_17615
;     ***************************************************************************
mov	bx, current_ruler
test	byte ptr [bx+7], 2
jnz	short loc_1760A
cmp	byte ptr [bx+21h], 0FFh
jnz	short loc_1760A
mov	ax, 6
push	ax
mov	ax, 1
push	ax
mov	ax, 7A8Eh
jmp	short loc_17615
;     ***************************************************************************
nop
mov	ax, 6
push	ax
mov	ax, 1
push	ax
mov	ax, 7A0Dh
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_4], ax
cmp	ax, 0FFFFh
jz	short near ptr unk_17653
cmp	ax, 4
jz	short near ptr aPC ; "  *P    **"
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jnz	short near ptr aPC ; "  *P    **"
call	game_warning_not_home_province
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, [bp+var_4]
shl	bx, 1
shl	bx, 1
call	dword ptr [bx+7B06h]
pop	si
mov	sp, bp
pop	bp
retf
game_diplomacy_func endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_send_whom proc	far		; DATA XREF: game_spy_forged_letter_send_to_whom+55  t
; game_spy_betrayal_invite_whom_select+55  t ...

arg_0		= byte ptr  6

push	bp
mov	bp, sp
mov	ax, 7CC4h	; 0x37554
; Text:	'Send whom as messenger '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 3
push	ax
mov	al, 1
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
mov	al, [bp+arg_0]
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
mov	sp, bp
pop	bp
retf
game_spy_send_whom endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_betrayal_letter_query proc far	; DATA XREF: game_spy_forged_letter+1D  t
; game_spy_betrayal+1D  t ...

var_2		= word ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 76CE SIZE 000000C9 BYTES

push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 41
push	ax
mov	ax, 1
push	ax
push	[bp+arg_0]
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short loc_176CE
mov	al, byte ptr [bp+var_2]
dec	al
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	word_1CEA4, ax
push	ax
call	s_10580		; *
add	sp, 2
or	ax, ax
jz	short near ptr loc_1768B+3
jmp	short near ptr loc_176D3+1
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_spy_betrayal_letter_query endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_forged_letter_result proc far	; DATA XREF: game_spy_forged_letter_send_to_whom+63  t

var_4		= dword	ptr -4

; FUNCTION CHUNK AT 77FD SIZE 00000018 BYTES
; FUNCTION CHUNK AT 7816 SIZE 00000015 BYTES

push	bp
mov	bp, sp
sub	sp, 2
push	word_1CE9E
push	word_1CE9A
push	word_1CEA4
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
push	ax
call	game_spy_forged_letter_calc
add	sp, 6
push	ax
call	far ptr	57Ch:0DCh ; s_589C
add	sp, 2
mov	word ptr [bp+var_4+2], ax
push	word_1CE9E
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
sub	ax, ax
push	ax
push	word_162C4
mov	cx, 7CDCh	; 0x3756C
push	cx
push	word ptr [bp+var_4+2]
call	game_advisor_display
add	sp, 8
or	ax, ax
jnz	short near ptr loc_17733+1
jmp	near ptr loc_17823+1
;     ***************************************************************************

loc_27734:				; CODE XREF: dseg:22892  P		 /* DOS offset ---> 1EDF:4 */
mov	byte_1CE9C, 0Bh
cmp	word ptr [bp+var_4+2], 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
call	game_messenger_travel
call	game_messenger_travel_results_2	; *
or	ax, ax
jz	short near ptr loc_17753+2
jmp	near ptr loc_17823+1
;     ***************************************************************************
mov	al, byte_1CEA0
sub	ah, ah
or	ax, ax
jz	short loc_1776E
dec	ax
jnz	short near ptr loc_17762+2
jmp	near ptr loc_177E2+2
;     ***************************************************************************
call	game_messenger_travel_results_1	; *
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	ax, 7CF4h	; 0x37584
; Text:	' has begun to distrust '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
push	word_1CE9A
call	far ptr	525h:30h ; s_5280
add	sp, 2
mov	bx, ax
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short near ptr loc_177C2+4
mov	ax, 7D0Ch
jmp	short near ptr loc_177C7+2
;     ***************************************************************************
mov	ax, 7D0Dh
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short locret_177FA
mov	ax, 7D0Eh	; 0x3759E
; Text:	'Failure! '
jmp	short loc_177FD
;     ***************************************************************************
nop
mov	ax, 7D18h	; 0x375A8
; Text:	'I have no excuse... '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	ax, 7D2Dh	; 0x375BD
; Text:	'We were detected '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	sp, bp
pop	bp
retf
game_spy_forged_letter_result endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_forged_letter_send_to_whom proc far ; DATA XREF: game_spy_forged_letter+28  t

var_2		= byte ptr -2

push	bp
mov	bp, sp
sub	sp, 2
mov	al, 5
push	ax
push	word_1CEA4
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
mov	[bp+var_2], al
or	al, al
jnz	short near ptr unk_17856
push	word_17CF2
call	game_warning_display_text_and_sound
add	sp, 2
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 7D3Eh	; 0x375CE
; Text:	'Send false letter to whom '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
sub	al, al
push	ax
mov	cl, [bp+var_2]
push	cx
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	word_1CE9A, ax
or	ax, ax
jz	short near ptr loc_1788D+1
mov	al, 1
push	ax
push	cs
call	game_spy_send_whom
add	sp, 2
mov	word_1CE9E, ax
or	ax, ax
jz	short near ptr loc_1788D+1
push	cs
call	game_spy_forged_letter_result
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_spy_forged_letter_send_to_whom endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_forged_letter proc far

var_2		= word ptr -2

; FUNCTION CHUNK AT 78DC SIZE 00000058 BYTES

push	bp
mov	bp, sp
sub	sp, 2
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr loc_178AD+1
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_17CEE
push	cs
call	game_spy_betrayal_letter_query
add	sp, 2
or	ax, ax
jz	short loc_178DC
push	cs
call	game_spy_forged_letter_send_to_whom
mov	[bp+var_2], ax
call	s_105CA		; *
or	ax, ax
jnz	short loc_178DC
cmp	[bp+var_2], ax
jz	short loc_178DC
push	ax
push	current_province
call	game_display_draw_province_info_and_data
mov	sp, bp
pop	bp
retf
game_spy_forged_letter endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_betrayal_result proc far	; DATA XREF: game_spy_betrayal_invite_whom_select+63  t

var_2		= word ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 794F SIZE 00000032 BYTES
; FUNCTION CHUNK AT 79A2 SIZE 000000EE BYTES

push	bp
mov	bp, sp
sub	sp, 2
push	word_1CE9E
push	word_1CE9A
push	word_1CEA4
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
push	ax
call	s_12A2E
add	sp, 6
push	ax
call	far ptr	57Ch:0DCh ; s_589C
add	sp, 2
mov	[bp+var_2], ax
push	word_1CE9E
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
sub	ax, ax
push	ax
push	word_162C4
mov	cx, 7CE0h
push	cx
push	[bp+var_2]
call	s_102EA		; *
add	sp, 8
or	ax, ax
jnz	short near ptr loc_17937+1
jmp	near ptr loc_17A4F+2
;     ***************************************************************************
mov	byte_1CE9C, 9
cmp	[bp+var_2], 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
call	game_messenger_travel
call	game_messenger_travel_results_2	; *
or	ax, ax
jz	short loc_17959
jmp	near ptr loc_17A4F+2
;     ***************************************************************************
mov	al, byte_1CEA0
sub	ah, ah
or	ax, ax
jz	short loc_17972
dec	ax
jnz	short near ptr loc_17965+3
jmp	loc_179EC
;     ***************************************************************************
call	game_messenger_travel_results_1	; *
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short loc_179AA
mov	ax, 7D58h	; 0x375E8
; Text:	'Success! '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
mov	ax, 7D62h	; 0x375F2
; Text:	' will switch sides without fail. '
jmp	short near ptr loc_179CF+1
;     ***************************************************************************
mov	ax, 7D83h	; 0x37613
; Text:	'Ha ha ha! '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
mov	ax, 7D8Eh	; 0x3761E
; Text:	' will switch to our side. '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short near ptr loc_17A22+2
mov	ax, 7DA8h	; 0x37638
; Text:	'Failure! '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
mov	ax, 7DB2h	; 0x37642
; Text:	' promptly refused. '
jmp	short loc_17A3A
;     ***************************************************************************
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	ax, 7DC5h	; 0x37655
; Text:	' is a loyal man. '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	sp, bp
pop	bp
retf
game_spy_betrayal_result endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_betrayal_invite_whom_select proc far ;	DATA XREF: game_spy_betrayal:loc_27AEC  t

var_2		= byte ptr -2

push	bp
mov	bp, sp
sub	sp, 2
mov	al, 5
push	ax
push	word_1CEA4
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
mov	[bp+var_2], al
or	al, al
jnz	short loc_17A84
push	word_17CF2
call	game_warning_display_text_and_sound
add	sp, 2
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 7DEEh	; 0x3767E
; Text:	'Invite whom '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
sub	al, al
push	ax
mov	cl, [bp+var_2]
push	cx
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	word_1CE9A, ax
or	ax, ax
jz	short near ptr loc_17ABA+2
mov	al, 3
push	ax
push	cs
call	game_spy_send_whom
add	sp, 2
mov	word_1CE9E, ax
or	ax, ax
jz	short near ptr loc_17ABA+2
push	cs
call	game_spy_betrayal_result
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_spy_betrayal_invite_whom_select endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_betrayal proc far

var_2		= word ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 7AAA SIZE 000000A0 BYTES

push	bp
mov	bp, sp
sub	sp, 2
call	game_data_get_generals_actions
or	al, al
jnz	short loc_17ADC
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_17CEE
push	cs
call	game_spy_betrayal_letter_query
add	sp, 2
or	ax, ax
jz	short near ptr loc_17B08+2
push	cs

loc_27AEC:				; CODE XREF: dseg:2B2AD  P		 /* DOS offset ---> 1F1A:C */
call	game_spy_betrayal_invite_whom_select
mov	[bp+var_2], ax
call	s_105CA		; *
or	ax, ax
jnz	short near ptr loc_17B08+2
cmp	[bp+var_2], ax
jz	short near ptr loc_17B08+2
push	ax
push	current_province
call	game_display_draw_province_info_and_data
mov	sp, bp
pop	bp
retf
game_spy_betrayal endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_tiger_and_wolf_result proc far	; DATA XREF: game_spy_tiger_and_wolf+10D  t

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= byte ptr  0Ah

; FUNCTION CHUNK AT 7B87 SIZE 0000006E BYTES
; FUNCTION CHUNK AT 7C0B SIZE 000000E0 BYTES
; FUNCTION CHUNK AT 7D14 SIZE 00000075 BYTES

push	bp
mov	bp, sp
sub	sp, 2
push	word_1CE9E
push	word_1CE9A
push	word_1CEA4
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
push	ax
call	game_spy_tiger_and_wolf_calc
add	sp, 6
push	ax
call	far ptr	57Ch:0DCh ; s_589C
add	sp, 2
mov	[bp+var_2], ax
push	word_1CE9E
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
sub	ax, ax
push	ax
push	word_162C4
mov	cx, 7CE4h
push	cx
push	[bp+var_2]
call	game_advisor_display
add	sp, 8
or	ax, ax
jnz	short near ptr loc_17B65+1
jmp	loc_17C5A
;     ***************************************************************************
mov	byte_1CE9C, 7
cmp	[bp+var_2], 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
call	game_messenger_travel
call	game_messenger_travel_results_2	; *
or	ax, ax
jz	short loc_17B87
jmp	loc_17C5A
;     ***************************************************************************
mov	al, byte_1CEA0
sub	ah, ah
or	ax, ax
jz	short near ptr loc_17B9B+1
dec	ax
jz	short near ptr loc_17BF1+1
call	game_messenger_travel_results_1	; *
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 7DFAh	; 0x3768A
; Text:	' Success! '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short loc_17BD4
mov	ax, 7E04h
jmp	short loc_17BD7
;     ***************************************************************************
mov	ax, 7E19h	; 0x376A9
; Text:	' will start a revolt! '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short locret_17C08
mov	ax, 7E2Eh
jmp	short loc_17C0B
;     ***************************************************************************
nop
mov	ax, 7E38h	; 0x376C8
; Text:	'Failure! '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short near ptr loc_17C3E+2
mov	ax, 7E42h
jmp	short loc_17C43
;     ***************************************************************************
mov	ax, 7E52h	; 0x376E2
; Text:	' turned us down '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	sp, bp
pop	bp
retf
game_spy_tiger_and_wolf_result endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_tiger_and_wolf	proc far

var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 4
call	game_data_get_generals_actions
or	al, al
jnz	short loc_17C76
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	[bp+var_4], 0
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 41
push	ax
mov	ax, 1
push	ax
mov	ax, 7E62h	; 0x376F2
; Text:	'Approach which province's governor '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jnz	short loc_17C9F
jmp	near ptr loc_17D52+2
;     ***************************************************************************
mov	al, byte ptr [bp+var_2]
dec	al
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	word_1CEA4, ax
mov	bx, ax
mov	ax, [bx+2]
mov	word_1CE9A, ax
push	bx
call	s_10580		; *
add	sp, 2
or	ax, ax
jz	short loc_17C7B
push	word_1CE9A
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jnz	short loc_17C7B
call	far ptr	4B5h:282h ; game_gfx_blk_bkgrnd_shape_4
mov	bx, word_1CE9A
push	word ptr [bx+1Ah]
mov	ax, 84
push	ax
mov	ax, 38
push	ax
call	far ptr	4B5h:6A4h ; s_51F4
add	sp, 6
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	ax, 7E85h
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	[bp+var_4], 1
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	ax, 7E91h	; 0x37721
; Text:	'%s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	3EFh:0A24h ; game_input_query_display_OK
or	ax, ax
jnz	short loc_17D32
jmp	loc_17C7B
;     ***************************************************************************
mov	al, 3
push	ax
push	cs
call	game_spy_send_whom
add	sp, 2
mov	word_1CE9E, ax
or	ax, ax
jnz	short near ptr loc_17D66+4
push	ax
push	current_province
call	game_display_draw_province_info_and_data
add	sp, 4
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
cmp	[bp+var_4], 0
jz	short loc_17D81
push	current_province
call	game_display_draw_province_data
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	cs
call	game_spy_tiger_and_wolf_result
call	s_105CA		; *
or	ax, ax
jnz	short loc_17D81
push	ax
push	current_province
call	game_display_draw_province_info_and_data
mov	sp, bp
pop	bp
retf
game_spy_tiger_and_wolf	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_rival_tigers_ruler_2_result proc far ;	DATA XREF: game_spy_rival_tigers+F3  t

arg_0		= word ptr  6
arg_2		= word ptr  8

; FUNCTION CHUNK AT 7DB7 SIZE 0000001F BYTES
; FUNCTION CHUNK AT 7DEE SIZE 00000052 BYTES
; FUNCTION CHUNK AT 7E42 SIZE 00000092 BYTES

push	bp
mov	bp, sp
mov	al, byte_1CEA0
sub	ah, ah
or	ax, ax
jz	short near ptr unk_17D9E
dec	ax
jz	short near ptr unk_17DE8
call	game_messenger_travel_results_1	; *
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
mov	sp, bp
or	ax, ax
jz	short near ptr loc_17DBD+1
cmp	[bp+arg_2], 0
jz	short near ptr loc_17DB7+1
mov	ax, 7E95h
jmp	short near ptr loc_17DCC+1
;     ***************************************************************************
mov	ax, 7EC2h
jmp	short near ptr loc_17DCC+1
;     ***************************************************************************
nop
cmp	[bp+arg_2], 0
jz	short loc_17DCA
mov	ax, 7EF5h
jmp	short near ptr loc_17DCC+1
;     ***************************************************************************
nop
mov	ax, 7F15h
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
mov	sp, bp
call	loc_13605+1
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
mov	sp, bp
or	ax, ax
jz	short near ptr loc_17E07+1
cmp	[bp+arg_2], 0
jz	short near ptr loc_17E00+2
mov	ax, 7F3Bh
jmp	short near ptr loc_17E14+3
;     ***************************************************************************
mov	ax, 7F78h
jmp	short near ptr loc_17E14+3
;     ***************************************************************************
nop
cmp	[bp+arg_2], 0
jz	short loc_17E14
mov	ax, 7FA5h
jmp	short near ptr loc_17E14+3
;     ***************************************************************************
nop
mov	ax, 7FD1h
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
mov	sp, bp
call	loc_13605+1
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	sp, bp
pop	bp
retf
game_spy_rival_tigers_ruler_2_result endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_rival_tigers_ruler_1_result proc far ;	DATA XREF: game_spy_rival_tigers+AC  t

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	al, byte_1CEA0
sub	ah, ah
or	ax, ax
jz	short loc_17E4C
dec	ax
jnz	short near ptr loc_17E42+2
jmp	near ptr loc_17EC5+3
;     ***************************************************************************
call	game_messenger_travel_results_1	; *
jmp	near ptr loc_17F17+2
;     ***************************************************************************
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
mov	sp, bp
or	ax, ax
jz	short loc_17E84
mov	ax, 7FF9h
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
mov	sp, bp
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
mov	sp, bp
mov	ax, 8003h
jmp	short near ptr loc_17EA9+1
;     ***************************************************************************
nop
mov	ax, 801Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
mov	sp, bp
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
mov	sp, bp
mov	ax, 8026h
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
mov	sp, bp
call	loc_13605+1
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
;     ***************************************************************************
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db    7
db    5
db  1Ch
db    0
db  50h	; P
db 0B8h	;   *
db 0FEh	;   *
db 0C9h	;   *
db  50h	; P
db  9Ah	;   *
db 0BEh	;   *
db    0
db  61h	; a
db    5
db  8Bh	;   *
db 0E5h	;   *
db 0B8h	;   *
db  3Fh	; ?
db  80h	;   *
db  50h	; P
db 0B8h	;   *
db 0FEh	;   *
db 0C9h	;   *
db  50h	; P
db  9Ah	;   *
db 0E6h	;   *
db    0
db  61h	; a
db    5
db  8Bh	;   *
db 0E5h	;   *
db 0FFh
db  36h	; 6
db  9Eh	;   *
db 0CEh	;   *
db  9Ah	;   *
db 0D8h	;   *
db    1
db  42h	; B
db    5
db  8Bh	;   *
db 0E5h	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db    6
db 0B8h	;   *
db  56h	; V
db  80h	;   *
db 0EBh	;   *
db    4
;     ***************************************************************************
nop
mov	ax, 8057h
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
mov	sp, bp
call	loc_13605+1
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_spy_rival_tigers_ruler_1_result endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_rival_tigers_send_whom_text proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
push	[bp+arg_0]
mov	ax, 8058h	; 0x378E8
; Text:	'Send whom to %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
mov	sp, bp
pop	bp
retf
game_spy_rival_tigers_send_whom_text endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_rival_tigers_send_whom_select proc far
; DATA XREF: game_spy_rival_tigers_send_whom+A  t
; game_spy_rival_tigers_send_whom+27  t

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 8D0h
mov	dx, 1765h
push	dx
push	ax
mov	al, 3
push	ax
mov	al, 1
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
mov	al, 1
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
mov	sp, bp
pop	bp
retf
game_spy_rival_tigers_send_whom_select endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_rival_tigers_send_whom	proc far ; DATA	XREF: game_spy_rival_tigers+17D  t

var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= word ptr  6

; FUNCTION CHUNK AT 7F74 SIZE 0000020C BYTES

push	bp
mov	bp, sp
sub	sp, 0Ah
push	[bp+arg_2]
push	cs
call	game_spy_rival_tigers_send_whom_select
add	sp, 2
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_17F82
jmp	near ptr loc_1809D+1
;     ***************************************************************************
push	ax
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
push	word ptr [bp+8]
push	cs
call	game_spy_rival_tigers_send_whom_select
add	sp, 2
mov	[bp+var_4], ax
or	ax, ax
jnz	short loc_17FA8
mov	bx, [bp+var_2]
and	byte ptr [bx+2], 0FEh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
game_spy_rival_tigers_send_whom	endp


;     *************** S U B	R O U T	I N E     ***************************************


game_spy_rival_tigers proc far
push	ax
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
push	word ptr [bp-2]
push	word ptr [bp+6]
call	game_spy_rival_tigers_calc ; *
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh ; s_589C
add	sp, 2
mov	[bp-6],	ax
push	word ptr [bp-4]
push	word ptr [bp+8]
call	game_spy_rival_tigers_calc ; *
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh ; s_589C
add	sp, 2
mov	[bp-8],	ax
cmp	word ptr [bp-6], 0
jz	short near ptr loc_17FF4+2
or	ax, ax
jz	short near ptr loc_17FF4+2
mov	word ptr [bp-0Ah], 1
jmp	short near ptr loc_17FF8+3
;     ***************************************************************************
mov	word ptr [bp-0Ah], 0
sub	ax, ax
push	ax
push	word_162C4
mov	cx, 7CE8h
push	cx
push	word ptr [bp-0Ah]
call	game_advisor_display
add	sp, 8
or	ax, ax
jnz	short near ptr loc_18016+2
jmp	near ptr loc_1809D+1
;     ***************************************************************************
mov	byte_1CE9C, 6
cmp	word ptr [bp-6], 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
mov	ax, [bp-2]
mov	word_1CE9E, ax
mov	bx, [bp+6]
mov	ax, [bx+2]
mov	word_1CEA4, ax
mov	ax, [bp+8]
mov	word_1CAF0, ax
call	game_messenger_travel
call	game_messenger_travel_results_2	; *
or	ax, ax
jz	short near ptr loc_1804E+2
sub	ax, ax
jmp	short loc_1805A
;     ***************************************************************************
nop
push	word ptr [bp+6]
push	cs
call	game_spy_rival_tigers_ruler_1_result
add	sp, 2
mov	[bp-6],	ax
call	s_10524		; *
or	ax, ax
jnz	short near ptr loc_1809D+1
cmp	word ptr [bp-8], 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
mov	ax, [bp-4]
mov	word_1CE9E, ax
mov	bx, [bp+8]
mov	ax, [bx+2]
mov	word_1CEA4, ax
mov	ax, [bp+6]
mov	word_1CAF0, ax
call	game_messenger_travel
call	game_messenger_travel_results_2	; *
or	ax, ax
jnz	short near ptr loc_1809D+1
push	word ptr [bp-6]
push	word ptr [bp+8]
push	cs
call	game_spy_rival_tigers_ruler_2_result
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
call	game_data_get_generals_actions
cmp	al, 2
jnb	short near ptr loc_180B6+4
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	game_spy_rival_tigers_select_rulers
or	ax, ax
jnz	short near ptr loc_180D3+1
push	current_province
call	game_display_draw_province_data
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	word ptr [bp-2], 0
mov	byte ptr [bp-8], 0
mov	bl, [bp-8]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-3390h], 0
jz	short loc_18104
cmp	word ptr [bp-2], 0
jnz	short loc_18110
mov	word ptr [bp-2], 1
mov	bl, [bp-8]
sub	bh, bh
shl	bx, 1
mov	ax, [bx-3508h]
mov	[bp-4],	ax
inc	byte ptr [bp-8]
cmp	byte ptr [bp-8], 10h
jb	short near ptr loc_180DC+1
jmp	short loc_1811E
;     ***************************************************************************
nop
mov	bl, [bp-8]
sub	bh, bh
shl	bx, 1
mov	ax, [bx-3508h]
mov	[bp-6],	ax
push	word ptr [bp-6]
push	word ptr [bp-4]
push	cs
call	game_spy_rival_tigers_send_whom
add	sp, 4
call	s_105CA		; *
or	ax, ax
jnz	short near ptr loc_1813C+2
push	ax
push	current_province
call	game_display_draw_province_info_and_data
mov	sp, bp
pop	bp
retf
game_spy_rival_tigers endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_infiltrate_withdraw_list proc far
; DATA XREF: game_spy_infiltrate_withdraw_output+A  t
; game_spy_infiltrate_verify+5B  t

var_C		= dword	ptr -0Ch
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= byte ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  6
arg_2		= word ptr  8

; FUNCTION CHUNK AT 81A4 SIZE 0000000F BYTES
; FUNCTION CHUNK AT 81D6 SIZE 0000003E BYTES

push	bp
mov	bp, sp
sub	sp, 0Ah
push	current_ruler
call	far ptr	525h:6	; game_data_get_rulers_data
add	sp, 2
mov	byte ptr [bp+var_8], al
cmp	[bp+arg_0], 1
sbb	al, al
and	al, 3
add	al, 2
push	ax
push	word_1CEA4
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
mov	byte ptr [bp+var_2], 0
mov	ax, 0CEB2h
mov	[bp+var_6], ax
mov	word ptr [bp+var_C+2], ax
jmp	short near ptr loc_181A7+1
;     ***************************************************************************
nop
cmp	[bp+arg_0], 1
jnz	short near ptr unk_1818C
mov	bx, ax
test	byte ptr [bx+2], 2
jz	short loc_181A4
mov	bx, ax
mov	al, byte ptr [bp+var_8]
cmp	[bx+0Dh], al
jnz	short loc_181A4
mov	ax, bx
mov	bx, word ptr [bp+var_C+2]
add	word ptr [bp+var_C+2], 2
mov	[bx], ax
inc	byte ptr [bp+var_2]
add	[bp+var_6], 2
mov	bx, [bp+var_6]
mov	ax, [bx]
or	ax, ax
jnz	short near ptr loc_1817C+2
mov	bl, byte ptr [bp+var_2]
sub	bh, bh
shl	bx, 1
mov	[bx-314Eh], ax
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
game_spy_infiltrate_withdraw_list endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_infiltrate_withdraw_output proc far ; DATA XREF: game_spy_infiltrate_withdraw+39  t

var_4		= byte ptr -4

push	bp
mov	bp, sp
sub	sp, 4
mov	al, 1
push	ax
push	cs
call	game_spy_infiltrate_withdraw_list
add	sp, 2
mov	[bp+var_4], al
or	al, al
jnz	short near ptr loc_181EC+2
push	word_17CF0
call	game_warning_display_text_and_sound
add	sp, 2
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 8069h
;     ***************************************************************************
db  50h	; P
db 0B8h	;   *
db  0Ch
db    0
db 0BAh	;   *
db  0Dh
db    6
db  52h	; R
db  50h	; P
db  2Ah	; *
db 0C0h	;   *
db  50h	; P
db  8Ah	;   *
db  4Eh	; N
db 0FCh	;   *
db  51h	; Q
db  50h	; P
db  9Ah	;   *
db 0F6h	;   *
db    2
db  0Dh
db    6
db  83h	;   *
db 0C4h	;   *
db  0Ch
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  5Bh	; [
db  50h	; P
db  9Ah	;   *
db    0
db    7
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
db  8Ah	;   *
db  47h	; G
db  0Dh
db  88h	;   *
db  47h	; G
db  0Ah
db  8Ah	;   *
db  47h	; G
db  0Eh
db  88h	;   *
db  47h	; G
db  0Ch
db  53h	; S
db  9Ah	;   *
db 0BEh	;   *
db    0
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db 0FFh
db  76h	; v
db 0FEh	;   *
db 0FFh
db  36h	; 6
db 0A4h	;   *
db 0CEh	;   *
db  9Ah	;   *
db  2Ch	; ,
db    5
db 0E9h	;   *
db  0Fh
db  83h	;   *
db 0C4h	;   *
db    4
db 0FFh
db  76h	; v
db 0FEh	;   *
db 0FFh
db  36h	; 6
db  9Ah	;   *
db  33h	; 3
db  9Ah	;   *
db 0CEh	;   *
db    5
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
db 0C6h	;   *
db  47h	; G
db  0Bh
db  64h	; d
db  8Dh	;   *
db  47h	; G
db  1Ch
db  50h	; P
db 0B8h	;   *
db  77h	; w
db  80h	;   *
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db  9Ah	;   *
db  26h	; &
db    1
db  7Ch	; |
db    5
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
nop
game_spy_infiltrate_withdraw_output endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_infiltrate_withdraw proc far

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 41
push	ax
mov	ax, 1
push	ax
push	word_17CEC
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short near ptr unk_182BD
mov	al, byte ptr [bp+var_2]
dec	al
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	word_1CEA4, ax
push	cs
call	game_spy_infiltrate_withdraw_output
or	ax, ax
jz	short near ptr unk_182BD
push	current_province
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf
game_spy_infiltrate_withdraw endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_spy_infiltrate_verify_output proc far ; DATA XREF:	game_spy_infiltrate_verify_sub+36  t

; FUNCTION CHUNK AT 82E6 SIZE 0000004D BYTES
; FUNCTION CHUNK AT 8338 SIZE 00000005 BYTES

push	word_1CE9E
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	byte_1CE9C, 8
mov	bx, word_1CE9A
test	byte ptr [bx+2], 2
jz	short near ptr loc_182F9+1
push	current_ruler
call	far ptr	525h:6	; game_data_get_rulers_data
add	sp, 2
mov	bx, word_1CE9A
cmp	al, [bx+0Dh]
jnz	short near ptr loc_182F9+1
mov	byte_1CEA0, 0
jmp	short near ptr loc_182FD+2
;     ***************************************************************************
nop
mov	byte_1CEA0, 1
call	game_messenger_travel ;	*
call	game_messenger_travel_results_2	; *
or	ax, ax
jz	short loc_18310
jmp	near ptr loc_183AC+2
;     ***************************************************************************
mov	al, byte_1CEA0
sub	ah, ah
or	ax, ax
jz	short near ptr loc_18320+2
dec	ax
jz	short near ptr unk_18354
call	game_messenger_travel_results_1	; *
retf
;     ***************************************************************************
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short loc_18338
mov	ax, 8093h
jmp	short near ptr loc_18339+2
;     ***************************************************************************
nop
mov	ax, 80A5h	; 0x37935
; Text:	'Don't worry, he's trustworthy '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:15Eh ; system_sound_6_dings
retf
;     ***************************************************************************
nop
mov	ax, 80C3h	; 0x37953
; Text:	'It's terrible,   left us for the enemy '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
push	word_1CE9E
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short near ptr unk_1838C
mov	ax, 80D3h
jmp	short near ptr unk_1838F
;     ***************************************************************************
mov	ax, 80EAh	; 0x3797A
; Text:	'  joined the enemy '
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h ; s_56F6
add	sp, 4
call	game_advisor_display_results ; *
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	bx, word_1CE9A
and	byte ptr [bx+2], 0FDh
retf
game_spy_infiltrate_verify_output endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_infiltrate_verify_sub proc far	; DATA XREF: game_spy_infiltrate_verify+7B  t

arg_0		= byte ptr  6

push	bp
mov	bp, sp
mov	ax, 80FCh
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
sub	al, al
push	ax
mov	cl, [bp+arg_0]
push	cx
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
mov	sp, bp
mov	word_1CE9A, ax
or	ax, ax
jz	short near ptr loc_183E6+3
mov	al, 1
push	ax
push	cs
call	game_spy_send_whom ; *
mov	sp, bp
mov	word_1CE9E, ax
or	ax, ax
jz	short near ptr loc_183E6+3
push	cs
call	game_spy_infiltrate_verify_output
mov	sp, bp
pop	bp
retf
game_spy_infiltrate_verify_sub endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_infiltrate_verify proc	far

var_4		= word ptr -4
var_2		= byte ptr -2

; FUNCTION CHUNK AT 8406 SIZE 00000002 BYTES

push	bp
mov	bp, sp
sub	sp, 4
call	game_data_get_generals_actions
or	al, al
jnz	short loc_18406
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 41
push	ax
mov	ax, 1
push	ax
push	word_17CEC
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_4], ax
cmp	ax, 0FFFFh
jz	short near ptr loc_18481+1
mov	al, byte ptr [bp+var_4]
dec	al
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	word_1CEA4, ax
push	ax
call	s_10580		; *
add	sp, 2
or	ax, ax
jz	short loc_18406
sub	al, al
push	ax
push	cs
call	game_spy_infiltrate_withdraw_list ; *
add	sp, 2
mov	[bp+var_2], al
or	al, al
jnz	short near ptr unk_18464
push	word_17CF0
call	game_warning_display_text_and_sound
add	sp, 2
jmp	short loc_18406
;     ***************************************************************************
mov	al, [bp+var_2]
push	ax
push	cs
call	game_spy_infiltrate_verify_sub
add	sp, 2
call	s_105CA		; *
or	ax, ax
jnz	short near ptr loc_18481+1
push	ax
push	current_province
call	game_display_draw_province_info_and_data
mov	sp, bp
pop	bp
retf
game_spy_infiltrate_verify endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_infiltrate_available_generals proc far	; DATA XREF: game_spy_infiltrate+14  t

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

; FUNCTION CHUNK AT 8481 SIZE 00000026 BYTES
; FUNCTION CHUNK AT 84A8 SIZE 00000033 BYTES

push	bp
mov	bp, sp
sub	sp, 6
mov	al, 5
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
mov	byte ptr [bp+var_2], 0
mov	bx, 0CEB2h
mov	[bp+var_4], bx
mov	[bp+var_6], bx
cmp	word ptr [bx], 0
jz	short near ptr loc_184D0+2
mov	bx, [bx]
cmp	byte ptr [bx+0Bh], 100 ; check loyalty
jnz	short loc_184C6
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	bx, [bp+var_6]
add	[bp+var_6], 2
mov	[bx], ax
inc	byte ptr [bp+var_2]
add	[bp+var_4], 2
mov	bx, [bp+var_4]
cmp	word ptr [bx], 0
jnz	short near ptr loc_184AB+2
mov	bx, [bp+var_6]
mov	word ptr [bx], 0
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
game_spy_infiltrate_available_generals endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_spy_infiltrate proc far		; DATA XREF: game_spy_func+10  t

var_4		= byte ptr -4
var_2		= word ptr -2

; FUNCTION CHUNK AT 8501 SIZE 00000018 BYTES

push	bp
mov	bp, sp
sub	sp, 4
push	si
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr unk_184F3
jmp	near ptr loc_185E2+2
;     ***************************************************************************
push	cs
call	game_spy_infiltrate_available_generals
mov	[bp+var_4], al
or	al, al
jnz	short loc_18501
jmp	near ptr loc_185E2+2
;     ***************************************************************************
mov	ax, 8108h
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 3
push	ax
mov	al, [bp+var_4]
push	ax
mov	al, 4
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	[bp+var_2], ax
or	ax, ax
jnz	short near ptr unk_1852E
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 8116h	; 0x379A6
; Text:	'Hide this general? '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jz	short near ptr unk_18526
push	[bp+var_2]
push	current_province
call	far ptr	59Dh:6A8h ; s_6078
add	sp, 4
mov	bx, [bp+var_2]
and	byte ptr [bx+2], 0F7h
and	byte ptr [bx+3], 0Fh
mov	si, current_ruler
cmp	[si+4],	bx
jnz	short near ptr loc_1856A+3
mov	bx, si
mov	word ptr [bx+4], 0
mov	bx, [bp+var_2]
test	byte ptr [bx+2], 2
jz	short near ptr unk_185B0
mov	ax, bx
add	ax, 1Ch
push	ax
mov	ax, 812Ah	; 0x379BA
; Text:	'%s deserted and fled '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	ax, 8148h
push	ax

loc_28591:				; CODE XREF: dseg:2B6BC  P		 /* DOS offset ---> 1FC5:1 */
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
push	[bp+var_2]
push	word_1CEA4
call	far ptr	59Dh:190h ; s_5B60
add	sp, 4
jmp	near ptr unk_18526
;     ***************************************************************************
mov	al, [bx+0Ah]
mov	[bx+0Dh], al
mov	al, [bx+0Ch]
mov	[bx+0Eh], al
push	bx
push	word_1CEA4
call	far ptr	59Dh:58Eh ; s_5F5E
add	sp, 4
mov	bx, [bp+var_2]
or	byte ptr [bx+2], 2
mov	ax, 8173h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	57Ch:15Eh ; system_sound_6_dings
jmp	near ptr unk_18526
;     ***************************************************************************
call	game_warning_no_one_can_do_that_now
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
game_spy_infiltrate endp


;     *************** S U B	R O U T	I N E     ***************************************


game_spy_func	proc far

; FUNCTION CHUNK AT 863B SIZE 00000026 BYTES
; FUNCTION CHUNK AT 866E SIZE 000000AA BYTES

mov	ax, 8185h
push	ax
push	cs
call	game_spy_betrayal_letter_query ; *
add	sp, 2
or	ax, ax
jz	short near ptr loc_18612+1
push	cs
call	game_spy_infiltrate
or	ax, ax
jz	short near ptr loc_18612+1
push	current_province
call	game_display_draw_province_data
add	sp, 2
retf
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr loc_1862F+1
mov	ax, 3
push	ax
mov	ax, 1
push	ax
mov	ax, 8190h
jmp	short loc_1863B
;     ***************************************************************************
nop
mov	ax, 3
push	ax
mov	ax, 1
push	ax
mov	ax, 81C6h	; 0x37A56
; Text:	'1. Hide 2. Verify. 3.Withdraw '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
cmp	ax, 0FFFFh
jz	short loc_18653
mov	bx, ax
shl	bx, 1
shl	bx, 1
call	dword ptr [bx-7E0Ah]
retf
;     ***************************************************************************
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jnz	short loc_1866E
call	game_warning_not_home_province
retf
;     ***************************************************************************
nop
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr loc_18689+1
mov	ax, 5
push	ax
mov	ax, 1
push	ax
mov	ax, 8206h
jmp	short loc_186AB
;     ***************************************************************************
nop
call	game_data_get_generals_actions
cmp	al, 2
jnb	short loc_186A0
mov	ax, 5
push	ax
mov	ax, 1
push	ax
mov	ax, 8277h
jmp	short loc_186AB
;     ***************************************************************************
mov	ax, 5
push	ax
mov	ax, 1
push	ax
mov	ax, 82EBh	; 0x37B7B
; Text:	'1. Infiltrate 4. Betrayal
; 2. Rival tigers 5. Forged letter
; 3. Tiger and wolf '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
cmp	ax, 0FFFFh
jz	short loc_186C3
mov	bx, ax
shl	bx, 1
shl	bx, 1
call	dword ptr [bx-7CAAh]
retf
game_spy_func	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_view_func	proc far

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= word ptr  6

; FUNCTION CHUNK AT 873E SIZE 00000016 BYTES
; FUNCTION CHUNK AT 8784 SIZE 00000005 BYTES
; FUNCTION CHUNK AT 878C SIZE 0000009B BYTES
; FUNCTION CHUNK AT 8828 SIZE 0000003D BYTES
; FUNCTION CHUNK AT 8866 SIZE 0000000B BYTES
; FUNCTION CHUNK AT 8872 SIZE 000000B9 BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	byte ptr [bp+var_4], 0
mov	al, byte ptr [bp+var_4]
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
push	ax
push	current_province
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
cmp	ax, 1
sbb	ax, ax
inc	ax
mov	bl, byte ptr [bp+var_4]
sub	bh, bh
shl	bx, 1
mov	[bx-7C22h], ax
inc	byte ptr [bp+var_4]
cmp	byte ptr [bp+var_4], 41
jb	short near ptr loc_186CD+1
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 6
push	ax
mov	ax, 1
push	ax
mov	ax, 836Eh	; 0x37BFE
; Text:	'1. Other provinces 4.Summary
; 2. Generals 5. Territory
; 3. Summary 6.	Data order
; View what '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short loc_18784
ja	short loc_1873E
dec	ax
cmp	ax, 5
ja	short loc_18701
shl	ax, 1
xchg	ax, bx
jmp	word ptr cs:[bx+72h]
;     ***************************************************************************
jle	short near ptr aPC_0 ; "  *P    **"
xchg	al, [bx+si]
xchg	ax, sp
add	[si-5400h], dl
add	[bx+si-6600h], bh
sub	cl, [si]
rcl	word ptr [bp+di], cl
jmp	short loc_18701
;     ***************************************************************************
nop
push	current_province
call	game_view_general_select_general
add	sp, 2
jmp	short loc_18701
;     ***************************************************************************
mov	al, byte ptr [bp+var_2]
sub	al, 3
push	ax
mov	ax, 1
push	ax
push	current_province
call	game_view_summary_data
add	sp, 6
jmp	short loc_18701
;     ***************************************************************************
mov	ax, 1
push	ax
call	game_view_territory_data
jmp	short near ptr loc_1874B+4
;     ***************************************************************************
nop
push	current_province
call	game_view_data_order
jmp	short near ptr loc_1874B+4
;     ***************************************************************************
nop
mov	sp, bp
pop	bp
retf
game_view_func	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_development_land_query proc far	; DATA XREF: game_development_land_check+27  t  /* DOS offset ---> 1fe4:8 */

var_8		= byte ptr -8
var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 8
mov	ax, 8487h	; 0x37CC9
; Text:	'Who will develop land '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 3
push	ax
mov	al, 1
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
mov	al, 1
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_187C2
jmp	near ptr loc_18887+2
;     ***************************************************************************
mov	bx, current_province
push	word ptr [bx+8]
mov	ax, 100
push	ax
call	far ptr	561h:18Ah ; math_truncate_decimal_value
add	sp, 4
push	ax
mov	ax, 1
push	ax
mov	ax, 849Dh	; 0x37CDF
; Text:	'Use how much gold '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_4], ax
cmp	ax, 0FFFFh
jnz	short near ptr loc_187F0+1
jmp	near ptr loc_18887+2
;     ***************************************************************************
mov	ax, 1
push	ax
mov	ax, 84B0h   ; JUQIANG: develop land (text)
push	ax
mov	ax, 8500h   ; JUQIANG: 0.Z no gold! (text)
push	ax
push	[bp+var_4]  ; JUQIANG: gold
push	[bp+var_2]  ; JUQIANG: general
call	game_development_land_func
add	sp, 4
mov	[bp+var_8], al
or	al, al
jz	short near ptr loc_18815+1
sub	ax, ax
jmp	short near ptr loc_18818+1
;     ***************************************************************************
mov	ax, 1
push	ax
call	game_advisor_display
add	sp, 8
or	ax, ax
jz	short near ptr loc_18887+2
push	[bp+var_2]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	al, 100
push	ax
mov	al, [bp+var_8]
push	ax
mov	cx, current_province
add	cx, 16h
push	cx
call	far ptr	49Ch:48h ; game_data_prov_move_next_free_general_pointer
add	sp, 6
mov	ax, [bp+var_4]
mov	bx, current_province
sub	[bx+8],	ax
cmp	[bp+var_8], 0
jz	short loc_18878
mov	bx, current_province
mov	al, [bx+16h]
sub	ah, ah
push	ax
mov	ax, 84BDh	; 0x37CFF
; Text:	'Land value has increased to %d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 84E1h	; 0x37D23
; Text:	'Our efforts had no effect '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	sp, bp
pop	bp
retf
game_development_land_query endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_development_land_check proc far
mov	bx, current_province
cmp	word ptr [bx+8], 0
jnz	short near ptr loc_188A3+1
mov	ax, 8504h	; 0x37D46
; Text:	'No gold! '
push	ax
call	game_warning_display_text_and_sound
jmp	short near ptr loc_188BE+3
;     ***************************************************************************
nop
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr loc_188B3+1
call	game_warning_no_one_can_do_that_now
retf
;     ***************************************************************************
nop
push	cs
call	game_development_land_query
push	current_province
call	game_display_draw_province_data
add	sp, 2
retf
game_development_land_check endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_development_flood_query proc far	; DATA XREF: game_development_flood_check+27  t

var_60		= word ptr -60h
var_8		= byte ptr -8
var_4		= word ptr -4
var_2		= word ptr -2

; FUNCTION CHUNK AT 89B6 SIZE 00000017 BYTES
; FUNCTION CHUNK AT 89CE SIZE 00000005 BYTES
; FUNCTION CHUNK AT 89F5 SIZE 0000004E BYTES

push	bp
mov	bp, sp
sub	sp, 8
mov	ax, 8562h	; 0x37DA4
; Text:	'Who will supervise '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 3
push	ax
mov	al, 1
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
mov	al, 1
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	[bp+var_2], ax
or	ax, ax
jnz	short near ptr loc_188FE+2
jmp	near ptr loc_189C6+1
;     ***************************************************************************
mov	bx, current_province
push	word ptr [bx+8]
mov	ax, 100
push	ax
call	far ptr	561h:18Ah ; math_truncate_decimal_value
add	sp, 4
push	ax
mov	ax, 1
push	ax
mov	ax, 8575h	; 0x37DB7
; Text:	'Use how much gold '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_4], ax
cmp	ax, 0FFFFh
jnz	short loc_1892F
jmp	near ptr loc_189C6+1
;     ***************************************************************************
mov	ax, 1
push	ax
mov	ax, 8588h
push	ax
mov	ax, 85D2h
push	ax
push	[bp+var_4]
push	[bp+var_2]
call	game_development_flood_func
add	sp, 4
mov	[bp+var_8], al
or	al, al
jz	short near ptr loc_18950+4
sub	ax, ax
jmp	short near ptr loc_18955+2
;     ***************************************************************************
mov	ax, 1
push	ax
call	game_advisor_display
add	sp, 8
or	ax, ax
jz	short near ptr loc_189C6+1
push	[bp+var_2]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	al, 100
push	ax
mov	al, [bp+var_8]
push	ax
mov	cx, current_province
add	cx, 18h
push	cx
call	far ptr	49Ch:48h ; game_data_prov_move_next_free_general_pointer
add	sp, 6
mov	ax, [bp+var_4]
mov	bx, current_province
sub	[bx+8],	ax
cmp	[bp+var_8], 0
jz	short loc_189B6
mov	bx, current_province
mov	al, [bx+18h]
sub	ah, ah
push	ax
mov	ax, 859Eh	; 0x37DFB
; Text:	'Flood control now %d. '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 85B9h	; 0x37DFB
; Text:	'Our efforts failed. '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	sp, bp
pop	bp
retf
game_development_flood_query endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_development_flood_check proc far

; FUNCTION CHUNK AT 89F2 SIZE 00000003 BYTES

mov	bx, current_province
cmp	word ptr [bx+8], 0
jnz	short near ptr loc_189E0+2
mov	ax, 85D6h	; 0x37E18
; Text:	'No gold! '
push	ax
call	game_warning_display_text_and_sound
jmp	short loc_189FF
;     ***************************************************************************
nop
call	game_data_get_generals_actions
or	al, al
jnz	short loc_189F2
call	game_warning_no_one_can_do_that_now
retf
;     ***************************************************************************
nop
push	cs
call	game_development_flood_query
push	current_province
call	game_display_draw_province_data
add	sp, 2
retf
game_development_flood_check endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


func_18A04	proc far
mov	ax, 867Bh	; 0x37EBD
; Text:	' failed!'
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
retf
;     ***************************************************************************
mov	ax, 868Ch	; 0x37ECE
; Text:	' worked!'
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	57Ch:15Eh ; system_sound_6_dings
retf
func_18A04	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_reward_gift_writing proc far	; DATA XREF: game_reward_func+7F  t

var_E		= word ptr -0Eh
var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= byte ptr  6

; FUNCTION CHUNK AT 8ADD SIZE 00000012 BYTES
; FUNCTION CHUNK AT 8AF0 SIZE 0000005F BYTES
; FUNCTION CHUNK AT 8B50 SIZE 00000031 BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	ax, 8695h	; 0x37ED7
; Text:	'Give writings to whom '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
sub	al, al
push	ax
mov	al, [bp+arg_2]
push	ax
mov	al, 1
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 12
mov	[bp+var_2], ax
or	ax, ax
jnz	short near ptr loc_18A55+1
jmp	loc_18ADD
;     ***************************************************************************
mov	bx, current_ruler
mov	bx, [bx+4]
mov	al, [bx+4]
sub	ah, ah
mov	bx, [bp+var_2]
mov	cl, [bx+4]
sub	ch, ch
inc	cx
cmp	ax, cx
jle	short near ptr loc_18A70+4
mov	ax, 1
jmp	short near ptr loc_18A75+1
;     ***************************************************************************
sub	ax, ax
mov	[bp+var_4], ax
sub	cx, cx
push	cx
mov	dx, 86ABh
push	dx
mov	dx, 8684h
push	dx
cmp	ax, 1
sbb	ax, ax
neg	ax
push	ax
call	game_advisor_display
add	sp, 8
or	ax, ax
jz	short loc_18ADD
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
cmp	[bp+var_4], 0
jz	short near ptr loc_18AC9+3
mov	bx, [bp+var_2]
inc	byte ptr [bx+4]
lea	ax, [bx+1Ch]
push	ax
mov	ax, 86B9h	; 0x37EFB
; Text:	'%s's intellect has risen '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 86D7h	; 0x37F19
; Text:	'Reward had no effect '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	sp, bp
pop	bp
retf
game_reward_gift_writing endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_reward_gift_loyalty_output	proc far ; DATA	XREF: game_reward_gift_horse+7E  t
; game_reward_gift_gold+B5  t

arg_0		= word ptr  6
arg_2		= byte ptr  8

push	bp
mov	bp, sp
mov	al, 100
push	ax
mov	al, [bp+arg_2]
push	ax
mov	cx, [bp+arg_0]
add	cx, 0Bh
push	cx
call	far ptr	49Ch:48h ; game_data_prov_move_next_free_general_pointer
mov	sp, bp
cmp	[bp+arg_2], 0
jz	short near ptr loc_18B1E+4
mov	bx, [bp+arg_0]
mov	al, [bx+0Bh]
sub	ah, ah
push	ax
lea	ax, [bx+1Ch]
push	ax
mov	ax, 86F1h	; 0x37F33
; Text:	'%s's loyalty now %d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
mov	sp, bp
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, [bp+arg_0]
add	ax, 28
push	ax
mov	ax, 870Ah	; 0x37F4C
; Text:	'%'s loyalty did not change '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
mov	sp, bp
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	sp, bp
pop	bp
retf
game_reward_gift_loyalty_output	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_reward_gift_horse proc far		; DATA XREF: game_reward_func+75  t

var_4		= byte ptr -4
var_2		= word ptr -2
arg_2		= byte ptr  6

; FUNCTION CHUNK AT 8B8E SIZE 00000098 BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	ax, 872Bh	; 0x37F6D
; Text:	'Give horse to whom '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
sub	al, al
push	ax
mov	al, [bp+arg_2]
push	ax
mov	al, 5
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	[bp+var_2], ax
or	ax, ax
jz	short near ptr loc_18BBE+1
mov	ax, 1
push	ax
mov	ax, 873Eh
push	ax
mov	ax, 8688h
push	ax
sub	ax, ax
push	ax
push	[bp+var_2]
call	game_reward_func_calc
add	sp, 4
mov	[bp+var_4], al
or	al, al
jz	short loc_18B8E
sub	ax, ax
jmp	short loc_18B91
;     ***************************************************************************
mov	ax, 1
push	ax
call	game_advisor_display
add	sp, 8
or	ax, ax
jz	short near ptr loc_18BBE+1
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	bx, current_province
dec	byte ptr [bx+19h]
mov	al, [bp+var_4]
push	ax
push	[bp+var_2]
push	cs
call	game_reward_gift_loyalty_output
mov	sp, bp
pop	bp
retf
game_reward_gift_horse endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_reward_gift_gold proc far		; DATA XREF: game_reward_func+6B  t

var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= byte ptr  6

; FUNCTION CHUNK AT 8C48 SIZE 0000003B BYTES

push	bp
mov	bp, sp
sub	sp, 6
mov	ax, 8749h	; 0x37F8B
; Text:	'Give gold to whom '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
sub	al, al
push	ax
mov	al, [bp+arg_2]
push	ax
mov	al, 5
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_18BF2
jmp	near ptr loc_18C7B+1
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	bx, current_province
push	word ptr [bx+8]
mov	ax, 100
push	ax
call	far ptr	561h:18Ah ; math_truncate_decimal_value
add	sp, 4
push	ax
mov	ax, 1
push	ax
mov	ax, 875Bh	; 0x37F9D
; Text:	'Give how much gold '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_4], ax
cmp	ax, 0FFFFh
jz	short near ptr loc_18C7B+1
mov	ax, 1
push	ax
mov	ax, 876Eh	; 0x37FB0
; Text:	'Give gold '
; ?
push	ax
mov	ax, 8688h	; 0x37FB0
; Text:	'd. %s'
push	ax
push	[bp+var_4]
push	[bp+var_2]
call	game_reward_func_calc
add	sp, 4
mov	[bp+var_6], al
or	al, al
jz	short loc_18C48
sub	ax, ax
jmp	short near ptr loc_18C49+2
;     ***************************************************************************
mov	ax, 1
push	ax
call	game_advisor_display
add	sp, 8
or	ax, ax
jz	short near ptr loc_18C7B+1
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	ax, [bp+var_4]
mov	bx, current_province
sub	[bx+8],	ax
mov	al, [bp+var_6]
push	ax
push	[bp+var_2]
push	cs
call	game_reward_gift_loyalty_output
mov	sp, bp
pop	bp
retf
game_reward_gift_gold endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_reward_func_options proc far	; DATA XREF: game_reward_func_sub+1E  t

var_2		= word ptr -2
arg_2		= word ptr  6

; FUNCTION CHUNK AT 8CDC SIZE 00000020 BYTES
; FUNCTION CHUNK AT 8D0B SIZE 00000080 BYTES
; FUNCTION CHUNK AT 8D8C SIZE 00000017 BYTES
; FUNCTION CHUNK AT 8DB8 SIZE 00000041 BYTES

push	bp
mov	bp, sp
sub	sp, 2
mov	bx, current_province
cmp	word ptr [bx+8], 1
sbb	ax, ax
neg	ax
cmp	[bp+arg_2], 1
sbb	cx, cx
neg	cx
test	ax, cx
jnz	short near ptr loc_18CFF+1
cmp	[bp+arg_2], 1
jnz	short near ptr unk_18CAA
mov	ax, 1
jmp	short near ptr unk_18CAC
;     ***************************************************************************
nop
sub	ax, ax
cmp	byte ptr [bx+19h], 1
sbb	cx, cx
neg	cx
test	cx, ax
jnz	short near ptr loc_18CFF+1
mov	bx, current_ruler
cmp	word ptr [bx+4], 0
jz	short loc_18CDC
push	current_province
push	word ptr [bx+4]
call	far ptr	542h:15Ah ; game_data_check_advisor_in_province
add	sp, 4
or	ax, ax
jz	short loc_18CDC
mov	[bp+var_2], 0
jmp	short loc_18CE1
;     ***************************************************************************
mov	[bp+var_2], 1
cmp	[bp+arg_2], 2
jnz	short near ptr loc_18CEB+1
mov	ax, 1
jmp	short loc_18CEE
;     ***************************************************************************
sub	ax, ax
test	[bp+var_2], ax
jnz	short near ptr loc_18CFF+1
push	word ptr [bp+8]
mov	ax, [bp+arg_2]
inc	ax
push	ax
mov	ax, 8783h	; 0x37FC5
; Text:	'%d.%s '
jmp	short loc_18D0B
;     ***************************************************************************
push	word ptr [bp+8]
mov	ax, [bp+arg_2]
inc	ax
push	ax
mov	ax, 8778h	; 0x37FBA
; Text:	'%d.%s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
mov	sp, bp
pop	bp
retf
game_reward_func_options endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_reward_func_sub proc far		; DATA XREF: game_reward_func+55  t

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 6
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	[bp+var_4], 0
mov	[bp+var_6], 87CCh
mov	bx, [bp+var_6]
push	word ptr [bx]
push	[bp+var_4]
push	cs
call	game_reward_func_options
add	sp, 4
inc	[bp+var_4]
add	[bp+var_6], 2
cmp	[bp+var_6], 87D2h
jb	short loc_18D2B
mov	ax, 3
push	ax
mov	ax, 1
push	ax
mov	ax, 87A2h	; 0x37FE4
; Text:	'Give what '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short near ptr loc_18DC1+1
dec	ax
jz	short loc_18D74
dec	ax
jz	short loc_18D86
dec	ax
jz	short near ptr loc_18D9E+2
sub	ax, 0FFFCh
jz	short near ptr loc_18DC1+1
jmp	short near ptr loc_18DC5+3
;     ***************************************************************************
mov	bx, current_province
cmp	word ptr [bx+8], 0
jnz	short near ptr loc_18DC5+3
call	game_warning_not_enough_gold
jmp	short near ptr loc_18D19+3
;     ***************************************************************************
nop
mov	bx, current_province
cmp	byte ptr [bx+19h], 0
jnz	short near ptr loc_18DC5+3
mov	ax, 87B0h	; 0x37FF2
; Text:	'No horses! '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
jmp	near ptr loc_18D19+3
;     ***************************************************************************
nop
mov	bx, current_ruler
cmp	word ptr [bx+4], 0
jz	short near ptr loc_18DB9+4
push	current_province
push	word ptr [bx+4]
call	far ptr	542h:15Ah ; game_data_check_advisor_in_province
add	sp, 4
or	ax, ax
jnz	short near ptr loc_18DC5+3
mov	ax, 87BBh	; 0x37FFD
; Text:	'No advisor here! '
jmp	short loc_18D93
;     ***************************************************************************
mov	al, 0FFh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
game_reward_func_sub endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_reward_func proc far

var_4		= byte ptr -4
var_2		= byte ptr -2

; FUNCTION CHUNK AT 8E32 SIZE 00000053 BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	542h:58h ; game_data_get_general_action
add	sp, 2
or	ax, ax
jnz	short near ptr loc_18DF0+2
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, 5
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
mov	[bp+var_4], al
or	al, al
jnz	short near ptr unk_18E24
mov	ax, 87D2h	; 0x38014
; Text:	'No generals to reward! '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
mov	word_159EE, 1
call	game_display_draw_province_menu
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	cs
call	game_reward_func_sub
sub	ah, ah
dec	ax
jz	short loc_18E36
dec	ax
jz	short near ptr loc_18E3F+1
dec	ax
jz	short loc_18E4A
jmp	short near ptr loc_18E53+2
;     ***************************************************************************
nop
mov	al, [bp+var_4]
push	ax
push	cs
call	game_reward_gift_gold
jmp	short near ptr loc_18E51+1
;     ***************************************************************************
mov	al, [bp+var_4]
push	ax
push	cs
call	game_reward_gift_horse
jmp	short near ptr loc_18E51+1
;     ***************************************************************************
mov	al, [bp+var_4]
push	ax
push	cs
call	game_reward_gift_writing
add	sp, 2
sub	ax, ax
push	ax
push	current_province
call	game_display_draw_province_info_and_data
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
game_reward_func endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_give_population_func proc far

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  6

; FUNCTION CHUNK AT 8F9F SIZE 00000098 BYTES
; FUNCTION CHUNK AT 9038 SIZE 00000043 BYTES

push	bp
mov	bp, sp
sub	sp, 8
mov	bx, current_province
mov	ax, [bx+0Ch]
or	ax, [bx+0Ah]
jnz	short loc_18E86
mov	ax, 886Dh	; 0x380AF
; Text:	'No food! '
push	ax
call	game_warning_display_text_and_sound
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
call	game_data_get_generals_actions
or	al, al
jnz	short near ptr loc_18E97+1
call	fagame_warning_no_one_can_do_that_nowr ptr loc_13110
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, current_province
cmp	word ptr [bx+0Ch], 0
jl	short near ptr loc_18EAF+1
jg	short near ptr loc_18EA9+2
cmp	word ptr [bx+0Ah], 10000
jbe	short near ptr loc_18EAF+1
mov	ax, 10000
jmp	short near ptr loc_18EB2+1
;     ***************************************************************************
mov	ax, [bx+0Ah]
mov	[bp+var_4], ax
mov	ax, 8876h	; 0x380B8
; Text:	'Who will give '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 3
push	ax
mov	cl, 1
push	cx
push	bx
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
mov	al, 3
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
mov	[bp+var_6], ax
or	ax, ax
jnz	short near ptr loc_18EE4+3
jmp	loc_18F9F
;     ***************************************************************************
push	[bp+var_4]
mov	ax, 1
push	ax
mov	ax, 8884h	; 0x380C6
; Text:	'Give how much food '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_8], ax
cmp	ax, 0FFFFh
jnz	short near ptr loc_18F03+2
jmp	loc_18F9F
;     ***************************************************************************
mov	ax, 1
push	ax
mov	ax, 8898h
push	ax
mov	ax, 88E4h
push	ax
push	[bp+var_8]
push	[bp+var_6]
call	game_give_population_calc
add	sp, 4
mov	byte ptr [bp+var_2], al
or	al, al
jz	short near ptr loc_18F27+3
sub	ax, ax
jmp	short near ptr loc_18F2B+2
;     ***************************************************************************
mov	ax, 1
push	ax
call	game_advisor_display
add	sp, 8
or	ax, ax
jz	short loc_18F9F
push	[bp+var_6]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	al, 100
push	ax
mov	al, byte ptr [bp+var_2]
push	ax
mov	cx, current_province
add	cx, 17h
push	cx
call	far ptr	49Ch:48h ; game_data_prov_move_next_free_general_pointer
add	sp, 6
mov	ax, [bp+var_8]
sub	dx, dx
mov	bx, current_province
sub	[bx+0Ah], ax
sbb	[bx+0Ch], dx
cmp	byte ptr [bp+var_2], 0
jz	short near ptr loc_18F8D+1
mov	bx, current_province
mov	al, [bx+17h]
sub	ah, ah
push	ax
mov	ax, 889Dh	; 0x380DF
; Text:	'People's loyalty is now %d. '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	57Ch:15Eh ; system_sound_6_dings
jmp	short loc_18F9F
;     ***************************************************************************
mov	ax, 88BEh	; 0x38100
; Text:	'People's loyalty did not change. '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
push	current_province
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf
game_give_population_func endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_merchants_buy_weapons_amount_query_func proc far
; DATA XREF: game_merchants_buy_weapons_amount_query+7  t

var_2		= word ptr -2
arg_2		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 2
push	si
mov	bx, [bp+arg_2]
cmp	word ptr [bx+14h], 10000
jnz	short near ptr loc_18FCD+1
mov	ax, 88ECh	; 0x3812E
; Text:	'Can't buy more weapons '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, [bx+14h]	; get weapons and divide by 100
mov	cx, 100
sub	dx, dx
div	cx
sub	cx, ax
push	cx
mov	bx, current_province
push	word ptr [bx+8]
call	far ptr	561h:18Ah ; math_truncate_decimal_value
add	sp, 4
push	ax
mov	ax, 1
push	ax
mov	ax, 8903h	; 0x38146
; Text:	'Buy how many 100s of weapons '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short loc_1905B
push	[bp+arg_2]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	ax, [bp+var_2]
mov	bx, current_province
sub	[bx+8],	ax
mov	cx, 10000
push	cx
mov	cx, 100
mul	cx
push	ax
mov	ax, [bp+arg_2]
add	ax, 14h
push	ax
mov	si, ax
call	far ptr	49Ch:8Ch ; game_data_set_generals_soldiers
add	sp, 6
push	[bp+arg_2]
call	far ptr	525h:0EEh ; game_data_get_generals_weapons_and_arms
add	sp, 2
sub	ah, ah
push	ax
push	word ptr [si]
mov	ax, [bp+arg_2]
add	ax, 1Ch
push	ax
mov	ax, 8921h	; 0x38164
; Text:	%s's weapons now %d
; Arms level now %d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 8
call	far ptr	57Ch:15Eh ; system_sound_6_dings
pop	si
mov	sp, bp
pop	bp
retf
game_merchants_buy_weapons_amount_query_func endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_merchants_buy_weapons_amount_query	proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
push	[bp+arg_0]
push	cs
call	game_merchants_buy_weapons_amount_query_func
mov	sp, bp
push	current_province
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf
game_merchants_buy_weapons_amount_query	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_merchants_buy_horses proc far

var_4		= byte ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 4
push	current_province
call	game_display_draw_province_data
add	sp, 2
mov	bx, current_province
mov	ax, [bx+8]
mov	cx, 100
sub	dx, dx
div	cx
push	ax
mov	al, [bx+19h]	; horses
sub	ah, ah
sub	cx, ax
push	cx
call	far ptr	561h:18Ah ; math_truncate_decimal_value
add	sp, 4
mov	[bp+var_4], al
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	al, [bp+var_4]
sub	ah, ah
push	ax
mov	ax, 1
push	ax
mov	ax, 894Ch	; 0x3818E
; Text:	'Buy how many horses '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jnz	short near ptr loc_190D1+3
jmp	near ptr loc_19156+4
;     ***************************************************************************
push	[bp+arg_0]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	al, byte ptr [bp+var_2]
mov	bx, current_province
add	[bx+19h], al
mov	ax, 100
mul	[bp+var_2]
mov	bx, current_province
sub	[bx+8],	ax
mov	bx, current_province
mov	al, [bx+19h]
sub	ah, ah
push	ax
mov	ax, 8960h	; 0x381A2
; Text:	'You now have %d horses '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	ax, 80
push	ax
mov	ax, 58
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
mov	bx, current_province
push	word ptr [bx+8]
mov	ax, 8980h	; 0x381C2
; Text:	'%6d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	ax, 122
push	ax
mov	ax, 61
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
mov	bx, current_province
mov	al, [bx+19h]
sub	ah, ah
push	ax
mov	ax, 8984h	; 0x381C6
; Text:	'%3d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
game_merchants_buy_horses endp


;     *************** S U B	R O U T	I N E     ***************************************


game_merchants_buy_sell_food_update proc far ; DATA XREF: game_merchants_buy_food+90  t
; game_merchants_buy_food+99  t ...
mov	bx, current_province
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
push	word ptr [bx+8]
mov	ax, 8988h	; 0x381CA
; Text:	'Gold now: '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 8
mov	ax, 80
push	ax
mov	ax, 58
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
mov	bx, current_province
push	word ptr [bx+8]
mov	ax, 89ADh
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	ax, 94
push	ax
mov	ax, 56
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
mov	bx, current_province
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
mov	ax, 89B1h	; 0x381F3
; Text:	'%8'
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
call	far ptr	57Ch:15Eh ; system_sound_6_dings
retf
game_merchants_buy_sell_food_update endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_merchants_buy_food	proc far

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 9245 SIZE 00000049 BYTES

push	bp
mov	bp, sp
sub	sp, 0Ch
push	si
push	current_province
call	game_display_draw_province_data
add	sp, 2
mov	bx, current_province
mov	al, [bx+1Bh]
sub	ah, ah
mul	word ptr [bx+8]
mov	[bp+var_4], ax
mov	[bp+var_2], dx
mov	cx, 0C6C0h
mov	si, 45
sub	cx, [bx+0Ah]
sbb	si, [bx+0Ch]
cmp	dx, si
jl	short near ptr unk_1920B
jg	short near ptr unk_19201
cmp	ax, cx
jbe	short near ptr unk_1920B
mov	ax, cx
mov	dx, si
mov	[bp+var_4], ax
mov	[bp+var_2], dx
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	[bp+var_2]
push	[bp+var_4]
mov	ax, 89B6h	; 0x381F8
; Text:	'Buy how much food? (1-%1u) '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
push	[bp+var_2]
push	[bp+var_4]
mov	ax, 1
cwd
push	dx
push	ax
call	far ptr	3EFh:8E2h ; game_input_query_func_wait_for_input
add	sp, 8
mov	[bp+var_8], ax
mov	[bp+var_6], dx
cmp	ax, 0FFFFh
jnz	short loc_19245
or	dx, dx
jz	short near ptr loc_19261+1
push	[bp+arg_0]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
push	[bp+var_6]
push	[bp+var_8]
call	game_merchants_buy_food_calc
add	sp, 4
push	cs
call	game_merchants_buy_sell_food_update
pop	si
mov	sp, bp
pop	bp
retf
game_merchants_buy_food	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_merchants_sell_food proc far

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

; FUNCTION CHUNK AT 92F9 SIZE 0000000D BYTES

push	bp
mov	bp, sp
sub	sp, 0Ah
push	di
push	si
push	current_province
call	game_display_draw_province_data
add	sp, 2
mov	ax, 7530h
mov	bx, current_province
sub	ax, [bx+8]
mov	cl, [bx+1Bh]	; food rate
mov	dx, cx
sub	ch, ch
mov	bx, dx
mul	cx
mov	[bp+var_6], ax
mov	[bp+var_4], dx
mov	[bp+var_2], bl
mov	bx, current_province
cmp	dx, [bx+0Ch]
jl	short near ptr loc_192B4+2
jg	short near ptr loc_192A8+2
cmp	ax, [bx+0Ah]
jbe	short near ptr loc_192B4+2
mov	ax, [bx+0Ah]
mov	dx, [bx+0Ch]
mov	[bp+var_6], ax
mov	[bp+var_4], dx
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	[bp+var_4]
push	[bp+var_6]
mov	al, [bp+var_2]
sub	ah, ah
sub	dx, dx
push	dx
push	ax
mov	cx, 89D2h	; 0x38214
; Text:	'Sell how much food? (%1u-%1u) '
push	cx
mov	si, ax
mov	di, dx
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 0Ah
push	[bp+var_4]
push	[bp+var_6]
push	di
push	si
call	far ptr	3EFh:8E2h ; game_input_query_func_wait_for_input
add	sp, 8
mov	[bp+var_A], ax
mov	[bp+var_8], dx
cmp	ax, 0FFFFh
jnz	short loc_192F9
or	dx, dx
jz	short near ptr loc_19336+1
push	[bp+arg_0]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	bx, current_province
mov	al, [bx+1Bh]
sub	ah, ah
sub	dx, dx
push	dx
push	ax
push	[bp+var_8]
push	[bp+var_A]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/	; math_divide_2_16bit_values
mov	bx, current_province
add	[bx+8],	ax
mov	ax, [bp+var_A]
mov	dx, [bp+var_8]
mov	bx, current_province
sub	[bx+0Ah], ax
sbb	[bx+0Ch], dx
push	cs
call	game_merchants_buy_sell_food_update
pop	si
pop	di
mov	sp, bp
pop	bp
retf
game_merchants_sell_food endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_merchants_warning_checks proc far	; DATA XREF: game_merchants_func+5F  t

var_8		= word ptr -8
var_4		= word ptr -4
arg_0		= word ptr  6

; FUNCTION CHUNK AT 9354 SIZE 0000002F BYTES
; FUNCTION CHUNK AT 9384 SIZE 00000007 BYTES
; FUNCTION CHUNK AT 938C SIZE 00000013 BYTES
; FUNCTION CHUNK AT 93A0 SIZE 00000025 BYTES
; FUNCTION CHUNK AT 93C6 SIZE 00000024 BYTES

push	bp
mov	bp, sp
mov	ax, [bp+arg_0]
dec	ax
jz	short loc_19354
dec	ax
jz	short loc_19384
dec	ax
jz	short near ptr loc_19398+2
dec	ax
jz	short loc_193AA
jmp	short near ptr loc_193C9+1
;     ***************************************************************************
nop
nop
mov	bx, current_province
mov	al, [bx+1Bh]
sub	ah, ah
sub	dx, dx
cmp	dx, [bx+0Ch]
jg	short near ptr loc_19370+2
jl	short near ptr loc_1936A+1
cmp	ax, [bx+0Ah]
ja	short near ptr loc_19370+2
cmp	word ptr [bx+8], 30000
jnz	short near ptr loc_193C9+1
mov	ax, 89F1h	; 0x38233
; Text:	'Can't sell more food '
push	ax
call	game_warning_display_text_and_sound
mov	sp, bp
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, current_province
cmp	word ptr [bx+0Ah], 0C6C0h
jnz	short loc_193AA
cmp	word ptr [bx+0Ch], 45
jnz	short loc_193AA
mov	ax, 8A1Ch	; 0x3825E
; Text:	'Can't buy more food '
jmp	short loc_19375
;     ***************************************************************************
mov	bx, current_province
cmp	byte ptr [bx+19h], 100
jnz	short loc_193AA
mov	ax, 8A06h	; 0x38248
; Text:	'Can't buy more horses '
jmp	short loc_19375
;     ***************************************************************************
nop
cmp	[bp+arg_0], 3
jnz	short near ptr loc_193B5+1
mov	ax, 100
jmp	short near ptr loc_193B7+2
;     ***************************************************************************
nop
mov	ax, 1
mov	bx, current_province
cmp	ax, [bx+8]
jle	short near ptr loc_193C9+1
call	game_warning_not_enough_gold
jmp	short near ptr loc_1937C+1
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_merchants_warning_checks endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_merchants_func proc far

var_C		= word ptr -0Ch
var_6		= word ptr -6
var_4		= word ptr -4

; FUNCTION CHUNK AT 93FE SIZE 0000008D BYTES
; FUNCTION CHUNK AT 948D SIZE 0000004E BYTES
; FUNCTION CHUNK AT 94E6 SIZE 00000013 BYTES

push	bp
mov	bp, sp
sub	sp, 4
call	game_data_get_generals_actions
or	al, al
jnz	short loc_193EA
call	game_warning_no_one_can_do_that_now
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	game_merchants_check_for_merchants
or	ax, ax
jnz	short near ptr loc_1940D+1
;     ***************************************************************************
db 0B8h	;   *
db  30h	; 0
db  8Ah	;   *
db  50h	; P
db  9Ah	;   *
db  0Ch
db    1
db 0F9h	;   *
db  12h
db  83h	;   *
db 0C4h	;   *
db    2
db 0C7h	;   *
db    6
db 0E4h	;   *
db  59h	; Y
db    1
db    0
db  9Ah	;   *
db  32h	; 2
db    2
db 0F9h	;   *
db  12h
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 4
push	ax
mov	ax, 1
push	ax
mov	ax, 8A42h	; 0x38284
; Text:	'1. Sell food 3. Buy horses 2. Buy food 4. Buy weapons '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_4], ax
cmp	ax, 0FFFFh
jz	short loc_1948D
push	ax
push	cs
call	game_merchants_warning_checks
add	sp, 2
or	ax, ax
jz	short loc_1948D
mov	ax, 8A8Eh	; 0x382D0
; Text:	'Who will go to market '
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 3
push	ax
mov	al, 1
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
cmp	[bp+var_4], 4
jnz	short loc_19464
mov	al, 6
jmp	short near ptr loc_19464+2
;     ***************************************************************************
sub	al, al
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_query
add	sp, 0Ch
or	ax, ax
jz	short loc_19484
push	ax
mov	bx, [bp+var_4]
shl	bx, 1
shl	bx, 1
call	dword ptr [bx-7560h]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	current_province
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf
game_merchants_func endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_tax_calc	proc far		; DATA XREF: game_tax_check+60  t

var_6		= word ptr -6
var_4		= byte ptr -4
var_2		= word ptr -2

; FUNCTION CHUNK AT 9570 SIZE 00000047 BYTES

push	bp		; special tax
; pop loy + ruler trust	+ max(sqrt(pop)	/ 10, 7) * rnd (100, 900) / 200
; pop loy + ruler trust	+ max(sqrt(pop)	/ 10, 7) * rnd (5000, 45000) / 200
mov	bp, sp
sub	sp, 6
push	si
mov	ax, 8AB4h	; 0x382F6
; Text:	'Impose special tax '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jnz	short near ptr loc_194AE+3
jmp	near ptr unk_195C9
;     ***************************************************************************
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	ax, 7
push	ax
mov	bx, current_province
push	word ptr [bx+0Eh] ; province population
call	far ptr	0:1B0h	; math_square_root_func
add	sp, 2
mov	cx, 10
sub	dx, dx
div	cx
push	ax
call	far ptr	561h:19Ch ; math_max_function_x1_y1
add	sp, 4
mov	bx, current_ruler
add	al, [bx+6]
mov	bx, current_province
add	al, [bx+17h]
mov	[bp+var_4], al
mov	ax, 200
push	ax
mov	cl, [bp+var_4]
sub	ch, ch
push	cx
mov	dx, 901
push	dx
mov	si, cx
call	far ptr	49Ch:178h ; math_random_number_generator
add	sp, 2
add	ax, 100
push	ax
call	far ptr	49Ch:0Ah ; math_value_x2_from_x1_y1_y2
add	sp, 6
mov	[bp+var_2], ax
mov	ax, 30000
push	ax
push	[bp+var_2]
mov	ax, current_province
add	ax, 8
push	ax
call	far ptr	49Ch:8Ch ; game_data_set_generals_soldiers
add	sp, 6
mov	ax, 200
push	ax
push	si
mov	ax, 45001
push	ax
call	far ptr	49Ch:178h ; math_random_number_generator
add	sp, 2
add	ax, 5000
push	ax
call	far ptr	49Ch:0Ah ; math_value_x2_from_x1_y1_y2
add	sp, 6
mov	[bp+var_6], ax
sub	dx, dx
mov	bx, current_province
add	[bx+0Ah], ax
adc	[bx+0Ch], dx
mov	bx, current_province
cmp	word ptr [bx+0Ch], 45
jl	short near ptr loc_19579+1
jg	short loc_19570
cmp	word ptr [bx+0Ah], 0C6C0h
jbe	short near ptr loc_19579+1
mov	word ptr [bx+0Ah], 0C6C0h
mov	word ptr [bx+0Ch], 45
mov	al, 10
push	ax
mov	ax, current_province
add	ax, 23
push	ax
call	far ptr	49Ch:6Ch ; math_subtract_x1_from_y1
add	sp, 4
mov	al, 5
push	ax
mov	ax, current_ruler
add	ax, 6
push	ax
call	far ptr	49Ch:6Ch ; math_subtract_x1_from_y1
add	sp, 4
push	[bp+var_6]
push	[bp+var_2]
mov	ax, 8AC7h	; 0x3830A
; Text:	'We collected %u gold and %u food '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	bx, current_province
or	byte ptr [bx+13h], 4
push	current_province
call	game_display_draw_province_data
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
game_tax_calc	endp


;     *************** S U B	R O U T	I N E     ***************************************


game_tax_check	proc far

; FUNCTION CHUNK AT 95F4 SIZE 00000105 BYTES

mov	al, month_value	; game_tax_check
mov	cl, 3
sub	ah, ah
div	cl
cmp	al, 2
jnz	short loc_195F4
mov	ax, 8AF1h	; 0x38333
; Text:	'Can't impose special tax in fall '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
mov	special_tax_unavailable, 1
call	game_display_draw_province_menu
retf
;     ***************************************************************************
nop
mov	bx, current_province
test	byte ptr [bx+13h], 4 ; checks to see if	tax was	already	imposed
jz	short loc_19612
mov	ax, 8B12h	; 0x38354
; Text:	'Already collected special tax '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
mov	special_tax_unavailable, 1
retf
;     ***************************************************************************
nop
push	word ptr [bx+2]
call	far ptr	542h:58h ; game_data_get_general_action
add	sp, 2
or	ax, ax
jnz	short loc_19628
call	game_warning_no_one_can_do_that_now
retf
;     ***************************************************************************
nop
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	cs
call	game_tax_calc
retf
game_tax_check	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_build_fort_map_draw_tile_map_main_sub proc	far
; DATA XREF: game_build_fort_map_draw_tile_map_main+17  t
; game_build_fort_yes+1A  t

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 2
mov	bx, [bp+arg_2]
mov	ax, bx
shl	bx, 1
add	bx, ax
shl	bx, 1
shl	bx, 1
add	bx, ax
add	bx, [bp+arg_0]
add	bx, 0CBCEh
cmp	byte ptr [bx], 4
jnz	short loc_19692
sub	ax, ax
push	ax
mov	al, 0C0h ; '  *'
mul	byte ptr [bx]
push	ax
push	word_1CE98
mov	ax, 10h
push	ax
mov	ax, 4
push	ax
mov	al, byte ptr [bp+arg_0]
and	ax, 1
cmp	ax, 1
cmc
sbb	ax, ax
and	ax, 8
mov	cl, 4
mov	dx, [bp+arg_2]
shl	dx, cl
add	ax, dx
push	ax
mov	ax, [bp+arg_0]
shl	ax, 1
shl	ax, 1
push	ax
call	far ptr	0:1D3Fh	; s_1D3F
; nop results in no water tiles	showing	on hex map
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
push	ax
mov	al, 0C0h ; '  *'
mul	byte ptr [bx]
push	ax
push	word_1CE98
mov	ax, 10h
push	ax
mov	ax, 4
push	ax
mov	al, byte ptr [bp+arg_0]
and	ax, 1
cmp	ax, 1
cmc
sbb	ax, ax
and	ax, 8
mov	cl, 4
mov	dx, [bp+arg_2]
shl	dx, cl
add	ax, dx
push	ax
mov	ax, [bp+arg_0]
shl	ax, 1
shl	ax, 1
push	ax
call	far ptr	0:1DBEh	; nop results in no land tiles showing on hex map
mov	sp, bp
pop	bp
retf
game_build_fort_map_draw_tile_map_main_sub endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_build_fort_map_draw_tile_map_main proc far
; DATA XREF: game_build_fort_map_fort_placement+5C  t

var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_4], 0
mov	[bp+var_2], 0
push	[bp+var_4]
push	[bp+var_2]
push	cs
call	game_build_fort_map_draw_tile_map_main_sub
add	sp, 4
inc	[bp+var_2]
cmp	[bp+var_2], 0Dh
jb	short near ptr loc_196DC+4
inc	[bp+var_4]
cmp	[bp+var_4], 0Ch
jb	short loc_196DB
mov	sp, bp
pop	bp
retf
game_build_fort_map_draw_tile_map_main endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_build_fort_s_19704	proc far
mov	ax, 912Ah
push	ax
mov	ax, 107h
push	ax
mov	ax, 10h
push	ax
mov	ax, 4
push	ax
mov	al, byte ptr temp_fort_x_location
and	ax, 1
cmp	ax, 1
cmc
sbb	ax, ax
and	ax, 8
mov	cl, 4
mov	dx, temp_fort_y_location
shl	dx, cl
add	ax, dx
push	ax
mov	ax, temp_fort_x_location
shl	ax, 1
shl	ax, 1
push	ax
call	far ptr	0:1469h	; s_1469
add	sp, 0Ch
retf
game_build_fort_s_19704	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_build_fort_map_fort_placement_new_location	proc far
; DATA XREF: game_build_fort_map_fort_placement_interface+CE  t
; game_build_fort_map_fort_placement+64  t

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
mov	ax, [bp+arg_0]
mov	temp_fort_x_location, ax
mov	ax, [bp+arg_2]
mov	temp_fort_y_location, ax
pop	bp
retf
game_build_fort_map_fort_placement_new_location	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_build_fort_surround_province_text proc far
; DATA XREF: game_build_fort_map_fort_placement+B0  t
; game_build_fort_func+3C  t

var_8		= byte ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

; FUNCTION CHUNK AT 9768 SIZE 0000001B BYTES

push	bp
mov	bp, sp
sub	sp, 8
mov	ax, 916Ah	; use yellow color
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
; change surrounding province #	text color
add	sp, 2
mov	[bp+var_8], 0
mov	bx, current_province
mov	al, [bx+20h]	; province map positioning x?
mov	byte ptr [bp+var_4], al
mov	al, [bx+21h]	; province map positioning y?
mov	byte ptr [bp+var_6], al
mov	al, [bp+var_8]
push	ax
lea	ax, [bp+var_6]
push	ax
lea	ax, [bp+var_4]
push	ax
call	far ptr	game_data_get_surrounding_provinces
; nop, sets all	surrounding province values to 105
; so must have something to do with displaying proper
; surrounding province values
add	sp, 6
mov	[bp+var_2], al
cmp	al, 255
jz	short near ptr unk_197D5
mov	al, [bp+var_8]
mov	cl, 3
sub	ah, ah
div	cl
sub	ah, ah
mov	bx, 0FFBEh
imul	bx
add	ax, [bp+arg_2]
push	ax
mov	al, [bp+var_8]
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
shl	ax, 1
shl	ax, 1

loc_297B6:				; CODE XREF: dseg:228A6  P		 /* DOS offset ---> 20E7:6 */
add	ax, [bp+arg_0]
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
; nop, removes all spacing and coordinates from	surrounding
; provinces values showing as a	single string of numbers
add	sp, 4
mov	al, [bp+var_2]
sub	ah, ah
inc	ax
push	ax
mov	ax, 916Fh
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
; displays surrounding province	values
add	sp, 4
inc	[bp+var_8]
cmp	[bp+var_8], 6
jb	short loc_19768
mov	ax, 9173h	; use white color
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
; call to change text color
mov	sp, bp
pop	bp
retf
game_build_fort_surround_province_text endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_build_fort_minimap_display	proc far ; DATA	XREF: game_build_fort_map_fort_placement+95  t
; game_build_fort_func+2D  t

var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= word ptr  0Ah

; FUNCTION CHUNK AT 9800 SIZE 00000017 BYTES
; FUNCTION CHUNK AT 98A1 SIZE 00000002 BYTES

push	bp
mov	bp, sp
sub	sp, 0Eh
push	si
mov	[bp+var_C], 0
mov	ax, [bp+arg_2]
shl	ax, 1
mov	[bp+var_E], ax
mov	[bp+var_8], 0
mov	ax, [bp+var_8]
mov	cx, 2
cwd
idiv	cx
cmp	dx, 1
cmc
sbb	ax, ax
and	ax, cx
add	ax, [bp+var_E]
mov	[bp+var_4], ax
mov	si, [bp+var_C]
mov	bx, [bp+var_8]
mov	cl, [bx+si-3432h]
sub	ch, ch
mov	si, cx
shl	cx, 1
add	cx, si
shl	cx, 1
shl	cx, 1
add	cx, 9178h
mov	[bp+var_6], cx
push	cx
sub	cx, cx
push	cx
mov	si, 4
push	si
mov	si, 1
push	si
push	ax
add	bx, [bp+arg_0]
mov	[bp+var_2], bx
push	bx
mov	si, dx
call	far ptr	0:1627h	; s_1627
; nop, compresses minimap into checker pattern two rows	only
add	sp, 0Ch
or	si, si
jz	short near ptr unk_1987A
cmp	[bp+var_C], 0
jnz	short loc_198A1
mov	ax, [bp+var_6]
add	ax, 6
push	ax
sub	ax, ax
push	ax
mov	ax, 2
push	ax
mov	cx, 1
push	cx
sub	ax, [bp+var_4]
neg	ax
jmp	short near ptr unk_19895
;     ***************************************************************************
cmp	[bp+var_C], 8Fh	; '  *'
jnz	short loc_198A1
push	[bp+var_6]
sub	ax, ax
push	ax
mov	ax, 2
push	ax
mov	ax, 1
push	ax
mov	ax, [bp+var_4]
add	ax, 4
push	ax
push	[bp+var_2]
call	far ptr	0:1627h	; s_1627
; nop, foreground minimap and background white translucent interlace off
add	sp, 0Ch
inc	[bp+var_8]
cmp	[bp+var_8], 0Dh
jge	short near ptr unk_198AD
jmp	loc_19805
;     ***************************************************************************
add	[bp+var_E], 4
add	[bp+var_C], 0Dh
cmp	[bp+var_C], 9Ch	; '  *'
jge	short near ptr loc_198BE+1
jmp	loc_19800
;     ***************************************************************************
pop	si
mov	sp, bp
pop	bp
retf
game_build_fort_minimap_display	endp


;     *************** S U B	R O U T	I N E     ***************************************


game_build_fort_s_198C4	proc far	; DATA XREF: game_build_fort_yes+21  t
mov	ax, word_1D47C
mov	word ptr dword_1CB9A+2,	ax
push	current_province
call	far ptr	525h:64h ; game_data_get_province_number
add	sp, 2
mov	cl, 156
mul	cl
mov	word ptr dword_1CB9A, ax
mov	ax, 156
push	ax
mov	ax, 0CBCEh
push	ax
push	word ptr dword_1CB9A+2
push	word ptr dword_1CB9A
call	far ptr	561h:7Ch ; s_568C
; nop, unknown
add	sp, 8
retf
game_build_fort_s_198C4	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_build_fort_map_fort_placement_interface_hex_move proc far
; DATA XREF: game_build_fort_map_fort_placement_interface+C1  t

var_4		= word ptr -4
arg_0		= word ptr  6
arg_2		= word ptr  8
arg_4		= byte ptr  0Ah

push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	bx, [bp+arg_0]
mov	ax, [bx]
mov	cx, 2
mov	bx, ax
cwd
idiv	cx
mov	si, dx
mov	ax, dx
shl	si, 1
add	si, ax
shl	si, 1
mov	ax, bx
mov	bl, [bp+arg_4]
sub	bh, bh
mov	cl, [bx+si-6E34h]
sub	ch, ch
mov	bx, [bp+arg_2]
add	cx, [bx]
mov	[bp+var_4], cx
mov	cx, ax
mov	al, [bp+arg_4]
mov	dl, 3
sub	ah, ah
div	dl
mov	al, ah
sub	ah, ah
add	cx, ax
jz	short near ptr unk_19966
cmp	cx, 0Dh
jg	short near ptr unk_19966
cmp	[bp+var_4], 0
jz	short near ptr unk_19966
cmp	[bp+var_4], 0Ch
jg	short near ptr unk_19966
mov	ax, cx
dec	ax
mov	bx, [bp+arg_0]
mov	[bx], ax
mov	ax, [bp+var_4]
dec	ax
mov	bx, [bp+arg_2]
mov	[bx], ax
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
game_build_fort_map_fort_placement_interface_hex_move endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_build_fort_yes_build_where_text proc far
; DATA XREF: game_build_fort_yes_build_where_text_inverse+1  t
; game_build_fort_yes+35  t
mov	ax, 7
push	ax
mov	ax, 65		; dimensions of	the white box behind text?
push	ax
mov	ax, 26
push	ax
mov	ax, 131		; y position of	white box
push	ax
mov	ax, 53		; x position of	white box
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer	; draw shape function
add	sp, 0Ah
mov	ax, 91D8h	; 0x38A01
; Text:	Build fort where (0:Enter  RET:	Cancel)
push	ax
call	far ptr	3EFh:6C0h ; sets placement of text
add	sp, 2
retf
game_build_fort_yes_build_where_text endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_build_fort_yes_build_where_text_inverse proc far
; DATA XREF: game_build_fort_map_fort_placement_interface+7  t
; game_build_fort_map_fort_placement_interface+4F  t
push	cs
call	game_build_fort_yes_build_where_text
mov	ax, 91E0h	; inverse color	(white on black	becomes	black on white background)
push	ax
call	far ptr	3EFh:6C0h ; changes text display
add	sp, 2
retf
game_build_fort_yes_build_where_text_inverse endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_build_fort_map_fort_placement_interface proc far
; DATA XREF: game_build_fort_map_fort_placement+BA  t

var_A		= byte ptr -0Ah
var_8		= byte ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_4		= byte ptr  8

; FUNCTION CHUNK AT 99BE SIZE 0000009F BYTES
; FUNCTION CHUNK AT 9A82 SIZE 0000000D BYTES

push	bp
mov	bp, sp
sub	sp, 0Ah
push	cs
call	game_build_fort_yes_build_where_text_inverse
sub	ax, ax
mov	[bp+var_4], ax
mov	[bp+var_6], ax
jmp	short near ptr loc_199FB+1
;     ***************************************************************************
jg	short near ptr loc_199C7+1
sub	ax, 0Dh
jz	short near ptr loc_199DE+2
jmp	short near ptr loc_199FB+1
;     ***************************************************************************
nop
sub	ax, 31h	; '1'
jl	short near ptr loc_199FB+1
dec	ax
dec	ax
jg	short near ptr loc_199D3+1
jmp	locret_19A5C
;     ***************************************************************************
sub	ax, 4
jl	short near ptr loc_199FB+1
dec	ax
dec	ax
jle	short near ptr loc_19A56+2
jmp	short near ptr loc_199FB+1
;     ***************************************************************************
nop
mov	ax, 920Fh	; 0x38A2A
; Text:	'Don't build '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
; displays text
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jz	short near ptr loc_199F7+1
jmp	near ptr loc_19AD4+1
;     ***************************************************************************
push	cs
call	game_build_fort_yes_build_where_text_inverse
call	far ptr	3EFh:79Ah ; game_query_user_input_main
mov	[bp+var_8], al
sub	ah, ah
cmp	ax, 30h	; '0'
jnz	short loc_199BE
mov	bx, temp_fort_y_location
mov	ax, bx
shl	bx, 1
add	bx, ax
shl	bx, 1
shl	bx, 1
add	bx, ax
add	bx, temp_fort_x_location
add	bx, 0CBCEh
mov	[bp+var_2], bx
mov	al, [bx]
mov	[bp+var_A], al
cmp	al, 3
jz	short near ptr loc_19A47+3
cmp	al, 4
jnb	short near ptr loc_19A47+3
mov	ax, 9236h	; 0x38A50
; Text:	'Build fort '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
; displays text
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jnz	short loc_19A82
jmp	short near ptr loc_199F7+1
;     ***************************************************************************
mov	ax, 921Dh
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
jmp	short near ptr loc_199F7+1
;     ***************************************************************************
sub	[bp+var_8], 3
mov	al, [bp+var_8]
sub	al, 31h	; '1'
push	ax
lea	ax, [bp+var_6]
push	ax
lea	cx, [bp+var_4]
push	cx
push	cs
call	game_build_fort_map_fort_placement_interface_hex_move
add	sp, 6
push	[bp+var_6]
push	[bp+var_4]
push	cs
call	game_build_fort_map_fort_placement_new_location
add	sp, 4
jmp	near ptr loc_199FB+1
game_build_fort_map_fort_placement_interface endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_build_fort_yes proc far
push	word ptr [bp+6]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	bx, [bp-2]
mov	byte ptr [bx], 5
push	temp_fort_y_location
push	temp_fort_x_location
push	cs
call	game_build_fort_map_draw_tile_map_main_sub
add	sp, 4
push	cs
call	game_build_fort_s_198C4
mov	bx, current_province
sub	word ptr [bx+8], 5000 ;	subtract fort cost from	province gold
mov	bx, current_province
inc	byte ptr [bx+1Ah] ; increase fort count	by 1
push	cs
call	game_build_fort_yes_build_where_text
mov	bx, current_province
mov	al, [bx+1Ah]	; get new number of forts
sub	ah, ah
push	ax
mov	ax, 9242h	; 0x38A5B
; Text:	You now	have %d	forts!
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	sp, bp
pop	bp
retf
game_build_fort_yes endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_build_fort_map_top_right_display proc far
; DATA XREF: game_build_fort_map_fort_placement+86  t

arg_0		= word ptr  6

push	bp
mov	bp, sp
call	game_gfx_cyan_border_hex_map_display
mov	ax, 7
push	ax
mov	ax, 24
push	ax
mov	ax, 26
push	ax
sub	ax, ax
push	ax
mov	ax, 35h	; '5'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
mov	sp, bp
mov	ax, 1
push	ax
call	far ptr	4B5h:0E6h ; game_gfx_render_graphics
mov	sp, bp
mov	ax, [bp+arg_0]
add	ax, 1Ch
push	ax
push	current_province
call	far ptr	525h:18h ; game_data_get_province_governor_name
add	sp, 2
push	ax
push	current_province
call	far ptr	525h:64h ; game_data_get_province_number
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, 9260h
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
mov	sp, bp
pop	bp
retf
game_build_fort_map_top_right_display endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_build_fort_map_fort_placement proc	far ; DATA XREF: game_build_fort_func+7F  t

var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_8		= word ptr -8
var_6		= byte ptr -6
var_2		= word ptr -2
arg_2		= word ptr  6
arg_4		= word ptr  8

; FUNCTION CHUNK AT 9B77 SIZE 0000015C BYTES
; FUNCTION CHUNK AT 9D4A SIZE 00000005 BYTES

push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 9289h
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 3
push	ax
mov	al, 1
push	ax
push	current_province
call	far ptr	59Dh:382h ; game_display_generals_action_list2
add	sp, 4
push	ax
sub	al, al
push	ax
call	far ptr	60Dh:2F6h ; game_display_generals_action_list_main
add	sp, 0Ch
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_19B77
jmp	loc_19C2E
;     ***************************************************************************
mov	word_13534, 0
call	far ptr	0:15B3h	; system_graphics_buffer_back_clear
; nop, results in minimap squares where	there should be	black has hex tiles
sub	ax, ax
push	ax
call	far ptr	4B5h:0E6h ; game_gfx_render_graphics
add	sp, 2
mov	word_13572, 1
push	cs
call	game_build_fort_map_draw_tile_map_main
sub	ax, ax
push	ax
push	ax
push	cs
call	game_build_fort_map_fort_placement_new_location	; nop, unknown
;
; mov	  ax, [bp+6]
; mov	  word_1D474, ax
; mov	  ax, [bp+8]
; mov	  word_1D47A, ax
;
add	sp, 4
mov	word_13530, 0D4h ; '  *'
mov	word_13532, 1963h
mov	ax, 92A1h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
; displays right header, Province and Builder
add	sp, 2
push	[bp+var_2]
push	cs
call	game_build_fort_map_top_right_display ;	displays province number, governor and builder
add	sp, 2
mov	ax, 25
push	ax
mov	ax, 59
push	ax
push	cs
call	game_build_fort_minimap_display
add	sp, 4
mov	ax, 92A6h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
; displays surrounding province	text
add	sp, 2
mov	ax, 107
push	ax
mov	ax, 60
push	ax
push	cs
call	game_build_fort_surround_province_text
add	sp, 4
push	[bp+var_2]
push	cs
call	game_build_fort_map_fort_placement_interface
add	sp, 2
sub	ax, ax
mov	word_13532, ax
mov	word_13530, ax
mov	ax, 92ABh
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
; displays 'You now have # forts' text
add	sp, 2
call	far ptr	4B5h:364h ; s_4EB4
;
mov	ax, 1
push	ax
mov	cx, current_province
mov	word_13534, cx
push	cx
call	game_display_draw_province_info_and_data
add	sp, 4
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_build_fort_map_fort_placement endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_build_fort_province_minimap_display proc far ; DATA XREF: game_build_fort_func+1  t
push	bp
mov	bp, sp
;     ***************************************************************************
db  83h	;   *
db 0ECh	;   *
db    2
db 0FFh
db  36h	; 6
db  9Ah	;   *
db  33h	; 3
db  9Ah	;   *
db  64h	; d
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db 0A1h	;   *
db  7Ch	; |
db 0D4h	;   *
db 0A3h	;   *
db  9Ch	;   *
db 0CBh	;   *
db 0B0h	;   *
db  9Ch	;   *
db 0F6h	;   *
db  66h	; f
db 0FEh	;   *
db 0A3h	;   *
db  9Ah	;   *
db 0CBh	;   *
db 0B8h	;   *
db  9Ch	;   *
db    0
db  50h	; P
db 0B8h	;   *
db 0CEh	;   *
db 0CBh	;   *
db  50h	; P
db 0FFh
db  36h	; 6
db  9Ch	;   *
db 0CBh	;   *
db 0FFh
db  36h	; 6
db  9Ah	;   *
db 0CBh	;   *
db  9Ah	;   *
db  58h	; X
db    0
db  61h	; a
db    5
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_build_fort_province_minimap_display endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_build_fort_hit_any_key proc far	; DATA XREF: game_build_fort_func+89  t

var_A		= word ptr -0Ah
var_8		= byte ptr -8
var_6		= byte ptr -6
var_4		= byte ptr -4
var_2		= byte ptr -2

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  0Ah
db  9Ah	;   *
db  90h	;   *
db    2
db 0B5h	;   *
db    4
db 0B8h	;   *
db 0B4h	;   *
db  92h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db  2Ah	; *
db 0C0h	;   *
db  88h	;   *
db  46h	; F
db 0F8h	;   *
db  88h	;   *
db  46h	; F
db 0FAh	;   *
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db 0C7h	;   *
db  46h	; F
db 0F6h	;   *
db    0
db    0
db  9Ah	;   *
db  9Ah	;   *
db    7
db 0EFh	;   *
db    3
db  2Ah	; *
db 0E4h	;   *
db  3Dh	; =
db  19h
db    0
db  74h	; t
db  28h	; (
db  77h	; w
db  0Ch
db  2Ch	; ,
db    2
db  74h	; t
db  10h
db  2Ch	; ,
db  12h
db  74h	; t
db  12h
db  2Ch	; ,
db    2
db  74h	; t
db  14h
db 0C7h	;   *
db  46h	; F
db 0F6h	;   *
db    1
db    0
db 0EBh	;   *
db  16h
;     ***************************************************************************
nop
inc	[bp+var_6]
jmp	short loc_19CD1
;     ***************************************************************************
nop
inc	[bp+var_4]
jmp	short loc_19CD1
;     ***************************************************************************
nop
inc	[bp+var_2]
jmp	short loc_19CD1
;     ***************************************************************************
nop
inc	[bp+var_8]
cmp	[bp+var_A], 0
jz	short loc_19C9A
cmp	[bp+var_2], 1
jnz	short near ptr loc_19CFD+1
cmp	[bp+var_4], 2
jnz	short near ptr loc_19CFD+1
cmp	[bp+var_6], 3
jnz	short near ptr loc_19CFD+1
cmp	[bp+var_8], 4
jnz	short near ptr loc_19CFD+1
mov	bx, current_province
cmp	word ptr [bx+8], 0
jnz	short near ptr loc_19CFD+1
or	byte_1339C, 80h
mov	sp, bp
pop	bp
retf
game_build_fort_hit_any_key endp


;     *************** S U B	R O U T	I N E     ***************************************


game_build_fort_func proc far

; FUNCTION CHUNK AT 9D9A SIZE 00000004 BYTES

push	cs		; build	fort interface,	including province description,
; surrounding provinces, map and build fort check and question
call	game_build_fort_province_minimap_display
call	far ptr	4B5h:266h ; game_gfx_blk_bkgrnd_shape_y_pos_height
; call to clear	main province window
mov	bx, current_province
mov	bl, [bx+22h]	; province description pointer
sub	bh, bh
shl	bx, 1
push	word ptr [bx-6EF2h]
mov	ax, 92C1h
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
; call to display description text
add	sp, 4
mov	ax, 39		; mini map y position
push	ax
mov	ax, 64		; mini map x position
push	ax
push	cs
call	game_build_fort_minimap_display
;     ***************************************************************************
db  83h	;   *
db 0C4h	;   *
db    4
db 0B8h	;   *
db  86h	;   *
db    0
db  50h	; P
db 0B8h	;   *
db  41h	; A
db    0
db  50h	; P
db  0Eh
db 0E8h	;   *
db  11h
db 0FAh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db  1Eh
db  9Ah	;   *
db  33h	; 3
db  80h	;   *
db  7Fh	; 
db  1Ah
db  64h	; d
db  73h	; s
db  3Ch	; <
db  81h	;   *
db  7Fh	; 
db    8
db  88h	;   *
db  13h
db  72h	; r
db  35h	; 5
db  9Ah	;   *
db  90h	;   *
db    2
db 0B5h	;   *
db    4
db 0B8h	;   *
db 0CBh	;   *
db  92h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db  9Ah	;   *
db 0D6h	;   *
db    9
db 0EFh	;   *
db    3
db  0Bh
db 0C0h	;   *
db  74h	; t
db  1Fh
db  9Ah	;   *
db  8Eh	;   *
db    0
db  8Ah	;   *
db  12h
db  0Ah
db 0C0h	;   *
db  75h	; u
db    8
db  9Ah	;   *
db  80h	;   *
db    1
db 0F9h	;   *
db  12h
db 0EBh	;   *
db  0Fh
;     ***************************************************************************
nop
push	cs
call	game_build_fort_map_fort_placement
or	ax, ax
jnz	short loc_19D9A
jmp	short loc_29D8E
;     ***************************************************************************

j_19D8A:				; DATA XREF: game_build_fort_func+4A  t
; game_build_fort_func+51  t
push	cs
call	game_build_fort_hit_any_key ; nop, unknown

loc_29D8E:				; DATA XREF: game_build_fort_func+6B  t		 /* DOS offset ---> 2144:E */
; game_build_fort_func+7B  t ...
push	current_province
;     ***************************************************************************
db  9Ah	;   *
db 0ECh	;   *
db    7
db 0F9h	;   *
db  12h
db  83h	;   *
db 0C4h	;   *
db    2
db 0CBh	;   *
game_build_fort_func endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_delegate_check proc far

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	bx, [bp+arg_0]
test	byte ptr [bx+12h], 4
jz	short j_19DB2
and	byte ptr [bx+12h], 0FBh
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
nop

j_19DB2:				; DATA XREF: game_delegate_check+A  t
sub	ax, ax
pop	bp
retf
game_delegate_check endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_delegate_war_query_where proc far	; DATA XREF: game_delegate_war_query+29  t
; game_delegate_send_query+29  t

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 9E08 SIZE 00000053 BYTES

push	bp
mov	bp, sp
sub	sp, 2
sub	ax, ax
push	ax
mov	ax, 32
push	ax
mov	ax, 42
push	ax
mov	ax, 160
push	ax
mov	cx, 37
push	cx
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
mov	ax, 160
push	ax
mov	ax, 38
push	ax
call	far ptr	3EFh:434h ; game_display_generals_list_x_y
add	sp, 4
mov	ax, 41
push	ax
mov	ax, 1
push	ax
push	[bp+arg_0]
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jnz	short loc_19E08
mov	al, 0FFh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, byte ptr [bp+var_2]
dec	al
mov	sp, bp
pop	bp
retf
game_delegate_war_query_where endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_delegate_war_query	proc far	; DATA XREF: game_delegate_query_choose_policy+57  t

var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_2], 0FFh
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 92D6h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jz	short near ptr unk_19E86
mov	ax, 92ECh	; 0x38B05
; Text:	'Invade where '
push	ax
push	cs
call	game_delegate_war_query_where
add	sp, 2
mov	[bp+var_2], al
cmp	al, 0FFh
jz	short near ptr unk_19E86
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	[bp+var_4], ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr loc_19E35+1
push	[bp+var_4]
push	[bp+arg_0]
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jnz	short near ptr loc_19E35+1
mov	al, [bp+var_2]
push	ax
push	[bp+arg_0]
call	game_check_province_is_neighbor
add	sp, 4
or	ax, ax
jz	short near ptr loc_19E35+1
mov	al, [bp+var_2]
mov	sp, bp
pop	bp
retf
game_delegate_war_query	endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_delegate_send_query proc far	; DATA XREF: game_delegate_query_choose_policy+4A  t

var_C		= byte ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 9EA4 SIZE 00000065 BYTES
; FUNCTION CHUNK AT 9F0A SIZE 00000033 BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_2], 0FFh
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 92F9h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jz	short near ptr loc_19EF0+4
mov	ax, 9313h	; 0x38B2C
; Text:	'Send where '
push	ax
push	cs
call	game_delegate_war_query_where
add	sp, 2
mov	[bp+var_2], al
cmp	al, 0FFh
jz	short near ptr loc_19EF0+4
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	[bp+var_4], ax
cmp	ax, [bp+arg_0]
jz	short loc_19EB2
push	ax
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_19EB2
push	[bp+var_4]
push	[bp+arg_0]
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jz	short loc_19EB2
mov	al, [bp+var_2]
mov	sp, bp
pop	bp
retf
game_delegate_send_query endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_delegate_query_choose_policy proc far

var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 9FEC SIZE 00000009 BYTES
; FUNCTION CHUNK AT 9FF6 SIZE 00000037 BYTES
; FUNCTION CHUNK AT A05A SIZE 0000000C BYTES

push	bp
mov	bp, sp
sub	sp, 6
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	word ptr loc_193F0+2
push	word ptr loc_193F0
push	word ptr loc_193ED+1
push	word ptr loc_193EB+1
mov	ax, 9359h	; 0x38B72
; Text:	'1. %s 2. %s 3. %s 4. %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 0Ah
mov	ax, 4
push	ax
mov	ax, 1
push	ax
mov	ax, 9376h	; 0x38B8F
; Text:	'Choose which policy '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_4], ax
cmp	ax, 0FFFFh
jnz	short near ptr unk_19F42
jmp	loc_19FEC
;     ***************************************************************************
push	[bp+arg_0]
push	cs
call	game_delegate_send_query
add	sp, 2
mov	[bp+var_2], al
push	[bp+arg_0]
push	cs
call	game_delegate_war_query
add	sp, 2
mov	[bp+var_6], al
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	bx, [bp+var_4]
shl	bx, 1
push	word ptr [bx-6C16h]
mov	ax, 938Eh	; 0x38BA7
; Text:	'Orders: '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
cmp	[bp+var_2], 0FFh
jnz	short near ptr unk_19F8A
mov	ax, 93ADh
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
jmp	short near ptr unk_19F9D
;     ***************************************************************************
mov	al, [bp+var_2]
sub	ah, ah
inc	ax
push	ax
mov	ax, 93B3h	; 0x38BCC
; Text:	'Province %2d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	ax, 93C1h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
cmp	[bp+var_6], 0FFh
jnz	short near ptr loc_19FBC+2
mov	ax, 93D2h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
jmp	short near ptr unk_19FD1
;     ***************************************************************************
nop
mov	al, [bp+var_6]
sub	ah, ah
inc	ax
push	ax
mov	ax, 93D8h	; 0x38BF1
; Text:	'Province %2d '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	ax, 93E6h
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:0A24h ; game_input_query_display_OK
or	ax, ax
jnz	short near ptr unk_19FE9

loc_29FE6:				; CODE XREF: dseg:23270  P		 /* DOS offset ---> 216A:6 */
jmp	loc_19F02
;     ***************************************************************************
jmp	short near ptr loc_19FF1+1
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, [bp+arg_0]
or	byte ptr [bx+12h], 4
and	byte ptr [bx+12h], 0FCh
mov	al, byte ptr [bp+var_4]
dec	al
or	[bx+12h], al
mov	al, [bp+var_2]
mov	[bx+14h], al
mov	al, [bp+var_6]
mov	[bx+15h], al
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_delegate_query_choose_policy endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_delegate_func_warnings proc far
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	bx, current_province
mov	ax, [bx+2]
push	ax
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1A03A+2
call	game_warning_not_home_province
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, current_province
cmp	word ptr [bx], 0
jnz	short loc_1A0C4
mov	ax, 93F4h	; 0x38C0D
; Text:	'No other provinces '
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
mov	word_159EC, 1
call	game_display_draw_province_menu
mov	sp, bp
pop	bp
retf
game_delegate_func_warnings endp

;     ***************************************************************************
nop
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_delegate_func proc	far

; FUNCTION CHUNK AT A0C4 SIZE 00000008 BYTES

mov	ax, 9423h	; 0x38C3C
; Text:	'direct rule '
push	ax
push	word ptr [bp-6]
mov	ax, 942Fh	; 0x38C48
; Text:	'Province %2d now under %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
mov	ax, 2
push	ax
mov	ax, 1
push	ax
mov	ax, 9453h	; 0x38C6C
; Text:	'1. Self rule 2. Direct rule '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp-4],	ax
cmp	ax, 0FFFFh
jz	short loc_1A0C4
mov	ax, [bp-8]
mov	word_13536, ax
push	ax
mov	bx, [bp-4]
shl	bx, 1
shl	bx, 1
call	dword ptr [bx-6B6Ah]
add	sp, 2
or	ax, ax
jz	short locret_1A0BE
push	word ptr [bp-6]
mov	ax, 947Ch	; 0x38C95
; Text:	'Province %2d orders executed '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
call	far ptr	57Ch:15Eh ; system_sound_6_dings
mov	word_13536, 0
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 41
push	ax
mov	ax, 1
push	ax
mov	ax, 9407h	; 0x38C20
; Text:	'Send orders where '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp-6],	ax
cmp	ax, 0FFFFh
jz	short near ptr loc_1A141+1
mov	al, [bp-6]
dec	al
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	[bp-8],	ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait ; game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_1A0C4
mov	ax, current_province
cmp	[bp-8],	ax
jz	short loc_1A0C4
push	ax
push	word ptr [bp-8]
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jz	short loc_1A0C4
push	word ptr [bp-8]
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jnz	short loc_1A0C4
push	word ptr [bp-8]
call	far ptr	542h:0A8h ; game_data_get_province_delegate_policy
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1A13B+1
jmp	loc_1A062
;     ***************************************************************************
mov	ax, 9419h	; 0x38C32
; Text:	'self rule '
jmp	locret_1A065
;     ***************************************************************************
mov	sp, bp
pop	bp
retf
game_delegate_func endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_exile_func_sub proc far		; DATA XREF: game_exile_func+51  t

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

; FUNCTION CHUNK AT A17B SIZE 0000001B BYTES
; FUNCTION CHUNK AT A1A0 SIZE 00000072 BYTES

push	bp
mov	bp, sp
sub	sp, 6
mov	bx, current_ruler
mov	ax, [bx+2]
mov	[bp+var_6], ax
mov	bx, ax
mov	ax, [bx]
mov	[bp+var_4], ax
or	ax, ax
jz	short near ptr loc_1A1BF+1
push	ax
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1A1B3+1
mov	bx, [bp+var_4]
mov	ax, [bx+2]
mov	[bp+var_2], ax
or	ax, ax
jz	short loc_1A1A0
push	ax
push	bx
call	far ptr	59Dh:6A8h ; s_6078
add	sp, 4
push	[bp+var_2]
push	[bp+var_4]
call	far ptr	59Dh:190h ; s_5B60
add	sp, 4
mov	bx, [bp+var_4]
mov	ax, [bx+2]
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_1A17B
push	bx
call	far ptr	59Dh:50Eh ; s_5EDE
add	sp, 2
push	[bp+var_4]
call	far ptr	4B5h:3F4h ; s_4F44
add	sp, 2
mov	bx, [bp+var_6]
mov	ax, [bx]
mov	[bp+var_4], ax
or	ax, ax
jnz	short near ptr loc_1A160+1
mov	sp, bp
pop	bp
retf
game_exile_func_sub endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_exile_func_clear_home_province proc far ; DATA XREF: game_exile_func+75  t

var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

; FUNCTION CHUNK AT A24D SIZE 0000000E BYTES
; FUNCTION CHUNK AT A25C SIZE 00000061 BYTES
; FUNCTION CHUNK AT A2DA SIZE 00000004 BYTES

push	bp
mov	bp, sp
sub	sp, 0Ch
sub	ax, ax
mov	[bp+var_A], ax
mov	[bp+var_C], ax
cmp	[bp+arg_0], ax
jz	short near ptr unk_1A21A
mov	ax, word_13396
mov	[bp+var_6], ax
or	ax, ax
jz	short loc_1A20A
mov	ax, 14h
push	ax
mov	bx, [bp+var_6]
push	word ptr [bx+12h]
call	far ptr	49Ch:32h ; math_value_x2_from_x1_y1_y2_2
add	sp, 4
mov	bx, [bp+var_6]
mov	[bx+12h], ax
sub	dx, dx
add	[bp+var_C], ax
adc	[bp+var_A], dx
mov	ax, [bx]
mov	[bp+var_6], ax
or	ax, ax
jnz	short loc_1A1E1
push	current_province
push	current_ruler
call	far ptr	59Dh:52Eh ; s_5EFE
jmp	short loc_1A27F
;     ***************************************************************************
nop
mov	bx, word_13396
mov	ax, [bx]
mov	[bp+var_6], ax
or	ax, ax
jz	short loc_1A250
push	ax
push	current_province
call	far ptr	59Dh:6A8h ; s_6078
add	sp, 4
push	[bp+var_6]
push	current_province
call	far ptr	59Dh:190h ; s_5B60
add	sp, 4
mov	bx, word_13396
mov	ax, [bx]
mov	[bp+var_6], ax
or	ax, ax
jnz	short near ptr unk_1A227
mov	ax, 14h
push	ax
push	word ptr [bx+12h]
call	far ptr	49Ch:32h ; math_value_x2_from_x1_y1_y2_2
add	sp, 4
mov	bx, word_13396
mov	[bx+12h], ax
mov	bx, word_13396
mov	ax, [bx+12h]
mov	[bp+var_C], ax
mov	[bp+var_A], 0
push	bx
push	current_province
call	far ptr	59Dh:6A8h ; s_6078
add	sp, 4
push	current_province
call	far ptr	525h:64h ; game_data_get_province_number
add	sp, 2
mov	bx, current_ruler
mov	[bx+22h], al
mov	ax, 100
cwd
push	dx
push	ax
push	[bp+var_A]
push	[bp+var_C]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/	; math_divide_2_16bit_values
push	ax
mov	bx, current_province
push	word ptr [bx+8]
call	far ptr	561h:18Ah ; math_truncate_decimal_value
add	sp, 4
mov	bx, current_ruler
mov	[bx+23h], ax
mov	bx, current_province
sub	[bx+8],	ax
mov	bx, current_province
mov	ax, [bx+0Ah]
mov	dx, [bx+0Ch]
cmp	dx, [bp+var_A]
jl	short near ptr loc_1A2DF+1
jg	short loc_1A2DA
cmp	ax, [bp+var_C]
jbe	short near ptr loc_1A2DF+1
mov	dx, [bp+var_A]
mov	ax, [bp+var_C]
mov	[bp+var_4], ax
mov	[bp+var_2], dx
mov	bx, current_ruler
mov	[bx+25h], ax
mov	[bx+27h], dx
mov	ax, [bp+var_4]
mov	dx, [bp+var_2]
mov	bx, current_province
sub	[bx+0Ah], ax
sbb	[bx+0Ch], dx
push	current_province
call	far ptr	59Dh:50Eh ; s_5EDE
add	sp, 2
push	current_province
call	far ptr	4B5h:3F4h ; s_4F44
mov	sp, bp
pop	bp
retf
game_exile_func_clear_home_province endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_exile_func_check proc far		; DATA XREF: game_exile_func_warnings+23  t

var_4		= word ptr -4
var_2		= byte ptr -2

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_4], 2DC4h
mov	[bp+var_2], 0
push	[bp+var_4]
call	far ptr	542h:92h ; game_data_check_province_in_war
add	sp, 2
or	ax, ax
jz	short near ptr loc_1A378+2
push	current_province
push	[bp+var_4]
call	far ptr	542h:192h ; game_data_get_province_ruler
add	sp, 4
or	ax, ax
jnz	short near ptr loc_1A389+1
push	current_ruler
call	far ptr	525h:6	; game_data_get_rulers_data

loc_2A354:				; CODE XREF: dseg:2B65B  P		 /* DOS offset ---> 21A1:4 */
add	sp, 2
;     ***************************************************************************
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db  3Ah	; :
db  47h	; G
db  11h
db  74h	; t
db  2Bh	; +
db  53h	; S
db  9Ah	;   *
db    6
db    0
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db 0A1h	;   *
db  7Ch	; |
db 0CBh	;   *
db  39h	; 9
db    6
db  94h	;   *
db  33h	; 3
db  74h	; t
db  19h
db 0A1h	;   *
db  90h	;   *
db 0CBh	;   *
db  39h	; 9
db    6
db  94h	;   *
db  33h	; 3
db  74h	; t
db  10h
db  83h	;   *
db  46h	; F
db 0FCh	;   *
db  23h	; #
db 0FEh	;   *
db  46h	; F
db 0FEh	;   *
db  80h	;   *
db  7Eh	; ~
db 0FEh	;   *
db  29h	; )
db  72h	; r
db 0A2h	;   *
db 0EBh	;   *
db    9
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_exile_func_check endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_exile_func_warnings proc far

var_18		= word ptr -18h
var_16		= word ptr -16h
var_14		= word ptr -14h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

; FUNCTION CHUNK AT A2F3 SIZE 000000AE BYTES
; FUNCTION CHUNK AT A3D0 SIZE 00000049 BYTES
; FUNCTION CHUNK AT A41A SIZE 0000000D BYTES
; FUNCTION CHUNK AT A428 SIZE 00000009 BYTES
; FUNCTION CHUNK AT A432 SIZE 0000006B BYTES

push	bp
mov	bp, sp
sub	sp, 2
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1A3B8+2
call	game_warning_not_home_province
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	cs
call	game_exile_func_check
or	ax, ax
jz	short loc_1A3D0
mov	ax, 94A2h	; 0x38CBB
; Text:	'Can't abandon a general at war '
push	ax
call	game_warning_display_text_and_sound
mov	sp, bp
pop	bp
retf
game_exile_func_warnings endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_exile_func	proc far
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 94C1h	; 0x38CDA
; Text:	'Go into exile '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jnz	short near ptr loc_1A3EB+2
jmp	near ptr loc_1A472+2
;     ***************************************************************************
mov	ax, 94CFh	; 0x38CE8
; Text:	'0A '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	525h:158h ; game_data_get_generals_or_free_in_province
add	sp, 2
cmp	al, 1
jbe	short loc_1A420
mov	ax, 94D1h	; 0x38CEA
; Text:	'Take all generals '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
mov	[bp-2],	ax
push	cs
call	game_exile_func_sub
mov	bx, current_ruler
mov	byte ptr [bx+1Eh], 0FFh
push	current_ruler
call	far ptr	525h:6	; game_data_get_rulers_data
add	sp, 2
push	ax
call	s_108DC		; *
add	sp, 2
push	word ptr [bp-2]
push	cs
call	game_exile_func_clear_home_province
add	sp, 2
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 94E3h	; 0x38CFC
; Text:	' %s has gone into exile '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4

loc_2A45E:				; CODE XREF: dseg:2B57E  P		 /* DOS offset ---> 21B1:E */
call	far ptr	57Ch:126h ; system_sound_warning_error_and_wait
mov	bx, current_ruler
or	byte ptr [bx+7], 4
push	current_province
call	game_end_turn_func
mov	sp, bp
pop	bp
retf
game_exile_func	endp

;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, 0CEB2h
mov	[bp-2],	bx
cmp	word ptr [bx], 0
jz	short loc_1A49B
mov	bx, [bx]
and	byte ptr [bx+3], 0F0h
add	word ptr [bp-2], 2
mov	bx, [bp-2]
cmp	word ptr [bx], 0
jnz	short near ptr loc_1A487+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
mov	word ptr [bp-2], 0CEB2h
mov	byte ptr [bp-6], 0
mov	bx, current_province
mov	ax, [bx+2]
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr loc_1A4E4+1
push	ax
call	far ptr	542h:7Eh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1A4D8+1
mov	ax, [bp-4]
mov	bx, [bp-2]
add	word ptr [bp-2], 2
mov	[bx], ax
inc	byte ptr [bp-6]
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jnz	short near ptr loc_1A4BA+3
mov	bx, [bp-2]
mov	word ptr [bx], 0
mov	al, [bp-6]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
lea	ax, [bp-6]
mov	[bp-2],	ax
cmp	byte ptr [bp+6], 9
jbe	short near ptr unk_1A519
mov	al, [bp+6]
mov	cl, 0Ah
sub	ah, ah
div	cl
add	al, 30h	; '0'
mov	bx, [bp-2]
inc	word ptr [bp-2]
mov	[bx], al
mov	al, [bp+6]
mov	cl, 0Ah
sub	ah, ah
div	cl
add	ah, 30h	; '0'
mov	bx, [bp-2]
inc	word ptr [bp-2]
mov	[bx], ah
mov	bx, [bp-2]
mov	byte ptr [bx], 0
lea	ax, [bp-6]
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	al, [bp+6]
push	ax
mov	bl, al
sub	bh, bh
shl	bx, 1
push	word ptr [bx-67BEh]
push	word ptr [bx-67B2h]
call	game_advisor_display_sub
mov	sp, bp
call	far ptr	57Ch:1FEh
push	current_province
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advice_doctor_no_doctor_here proc far ; DATA XREF:	game_advice_func+7A  t

arg_0		= word ptr  6

; FUNCTION CHUNK AT A58A SIZE 00000002 BYTES
; FUNCTION CHUNK AT A5B4 SIZE 0000000A BYTES

push	bp
mov	bp, sp
cmp	[bp+arg_0], 0
jnz	short loc_1A58A
mov	ax, 98CFh	; 0x390E8
; Text 'No doctor here '
push	ax
call	game_warning_display_text_and_sound
mov	sp, bp
mov	sp, bp
pop	bp
retf
game_advice_doctor_no_doctor_here endp


;     *************** S U B	R O U T	I N E     ***************************************


game_advice_rumors_output proc far

; FUNCTION CHUNK AT A584 SIZE 00000006 BYTES
; FUNCTION CHUNK AT A878 SIZE 00000013 BYTES
; FUNCTION CHUNK AT A88C SIZE 00000009 BYTES
; FUNCTION CHUNK AT A89D SIZE 00000016 BYTES
; FUNCTION CHUNK AT A8C8 SIZE 00000012 BYTES
; FUNCTION CHUNK AT AA12 SIZE 0000001B BYTES
; FUNCTION CHUNK AT AA2E SIZE 00000025 BYTES
; FUNCTION CHUNK AT AA54 SIZE 0000000D BYTES
; FUNCTION CHUNK AT AA6E SIZE 0000004F BYTES
; FUNCTION CHUNK AT AABE SIZE 0000000E BYTES

call	far ptr	4B5h:290h
push	cs
call	near ptr loc_1A49F+1
or	al, al
jnz	short near ptr unk_1A5B0
push	word ptr loc_198DE
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
mov	sp, bp
mov	al, 2
push	ax
push	cs
call	near ptr loc_1A542+2
jmp	short loc_1A584
;     ***************************************************************************
nop
push	word ptr loc_198E0
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	al, 2
push	ax
push	cs
call	near ptr loc_1A542+2
add	sp, 2
push	cs
call	near ptr loc_1A475+3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	bx, [bp+6]
cmp	byte ptr [bx+5], 5Fh ; '_'
jb	short near ptr unk_1A5E4
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	bx, [bp+6]
cmp	byte ptr [bx+4], 5Fh ; '_'
jb	short loc_1A5FA
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	bx, [bp+6]
cmp	byte ptr [bx+0Bh], 32h ; '2'
jbe	short loc_1A60E
sub	ax, ax
pop	bp
retf
;     ***************************************************************************
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	bx, [bp+6]
test	byte ptr [bx+2], 2
jnz	short loc_1A62A
test	byte ptr [bx+3], 0F0h
jnz	short loc_1A62A
sub	ax, ax
pop	bp
retf
;     ***************************************************************************
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	bx, [bp+6]
mov	al, [bx+2]
and	al, 10h
cmp	al, 1
sbb	ax, ax
inc	ax
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	bx, [bp+6]
cmp	byte ptr [bx+9], 50h ; 'P'
jb	short near ptr loc_1A653+1
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	bx, [bp+6]
cmp	byte ptr [bx+7], 32h ; '2'
jbe	short near ptr loc_1A666+2
sub	ax, ax
pop	bp
retf
;     ***************************************************************************
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
mov	byte ptr [bp-8], 0
mov	word ptr [bp-4], 0CEB2h
mov	bx, [bp+6]
mov	ax, [bx+2]
mov	[bp-6],	ax
or	ax, ax
jz	short loc_1A6E5
push	ax
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_1A6D9
mov	bx, [bp-6]
mov	ax, [bx+2]
mov	[bp-2],	ax
or	ax, ax
jz	short loc_1A6D9
push	ax
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1A6CC+1
push	word ptr [bp-2]
call	dword ptr [bp+8]
add	sp, 2
or	ax, ax
jz	short near ptr loc_1A6CC+1
mov	ax, [bp-2]
mov	bx, [bp-4]
add	word ptr [bp-4], 2
mov	[bx], ax
inc	byte ptr [bp-8]
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_1A6A4
mov	bx, [bp-6]
mov	ax, [bx]
mov	[bp-6],	ax
or	ax, ax
jnz	short loc_1A68A
mov	al, [bp-8]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 1E8h
mov	dx, 1A47h
push	dx
push	ax
push	current_ruler
push	cs
call	near ptr loc_1A66A+4
add	sp, 6
or	al, al
jz	short loc_1A744
sub	ah, ah
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
mov	ax, [bx-314Eh]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	ax, 98E2h
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
mov	al, 1
push	ax
push	cs
call	near ptr loc_1A542+2
add	sp, 2
mov	ax, 1
retf
;     ***************************************************************************
sub	ax, ax
retf
;     ***************************************************************************
nop
mov	ax, 1D2h
mov	dx, 1A47h
push	dx
push	ax
push	current_ruler
push	cs
call	near ptr loc_1A66A+4
add	sp, 6
or	al, al
jz	short near ptr unk_1A7A0
sub	ah, ah
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
mov	ax, [bx-314Eh]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	ax, 98FEh
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
mov	al, 1
push	ax
push	cs
call	near ptr loc_1A542+2
add	sp, 2
mov	ax, 1
retf
;     ***************************************************************************
sub	ax, ax
retf
;     ***************************************************************************
nop
mov	ax, 1A4h
mov	dx, 1A47h
push	dx
push	ax
push	current_ruler
push	cs
call	near ptr loc_1A66A+4
add	sp, 6
or	al, al
jz	short near ptr loc_1A80A+2
sub	ah, ah
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
mov	ax, [bx-314Eh]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	ax, 2
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
push	word ptr [bx-66B4h]
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
mov	al, 1
push	ax
push	cs
call	near ptr loc_1A542+2
add	sp, 2
mov	ax, 1
retf
;     ***************************************************************************
sub	ax, ax
retf
;     ***************************************************************************
nop
mov	ax, 1C0h
mov	dx, 1A47h
push	dx
push	ax
push	current_ruler
push	cs
call	near ptr loc_1A66A+4
add	sp, 6
or	al, al
jz	short loc_1A878
sub	ah, ah
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
mov	ax, [bx-314Eh]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	ax, 2
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
push	word ptr [bx-6674h]
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
mov	al, 1
push	ax
push	cs
call	near ptr loc_1A542+2
add	sp, 2
mov	ax, 1
retf
;     ***************************************************************************
sub	ax, ax
retf
;     ***************************************************************************
nop
mov	bx, current_province
test	byte ptr [bx+12h], 8
jz	short loc_1A88C
push	word_19864
jmp	short near ptr loc_1A8E0+3
;     ***************************************************************************
mov	ax, 2
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
shl	bx, 1
call	dword ptr [bx-6670h]
or	ax, ax
jnz	short near ptr loc_1A8F7+2
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1A8CF
mov	ax, 2
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
shl	bx, 1
call	dword ptr [bx-6668h]
or	ax, ax
jnz	short near ptr loc_1A8F7+2
mov	ax, 8
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
push	word ptr [bx-67ACh]
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	al, 1
push	ax
push	cs
call	near ptr loc_1A542+2
add	sp, 2
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
mov	sp, bp
or	ax, ax
jz	short loc_1A93E
mov	ax, 99A0h
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
mov	sp, bp
mov	al, [bp+6]
push	ax
call	far ptr	525h:76h
mov	sp, bp
push	ax
call	far ptr	525h:18h
mov	sp, bp
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
mov	sp, bp
mov	ax, 99B0h
jmp	short loc_1A96F
;     ***************************************************************************
mov	ax, 99BEh
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
mov	sp, bp
mov	al, [bp+6]
push	ax
call	far ptr	525h:76h
mov	sp, bp
push	ax
call	far ptr	525h:18h
mov	sp, bp
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
mov	sp, bp
mov	ax, 99CBh
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
mov	sp, bp
sub	al, al
push	ax
push	cs
call	near ptr loc_1A542+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, [bp+6]
mov	al, 29h	; ')'
mul	byte ptr [bx+9]
mov	bx, ax
add	bx, 2B34h
mov	[bp-2],	bx
cmp	word ptr [bx], 0
jnz	short near ptr loc_1A9A2+3
jmp	loc_1AA6E
;     ***************************************************************************
mov	ax, [bp+6]
cmp	current_ruler, ax
jnz	short near ptr unk_1A9B1
jmp	loc_1AA6E
;     ***************************************************************************
push	ax
call	far ptr	542h:42h
add	sp, 2
or	ax, ax
jz	short near ptr unk_1A9C1
jmp	loc_1AA6E
;     ***************************************************************************
push	word ptr [bp-2]
call	far ptr	542h:42h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1A9D2+1
jmp	loc_1AA6E
;     ***************************************************************************
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1AA12
mov	bx, [bp+6]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	ax, 99E4h
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
mov	bx, [bp-2]
mov	ax, [bx]
add	ax, 1Ch
jmp	short near ptr loc_1AA4D+2
;     ***************************************************************************
nop
mov	bx, [bp-2]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	ax, 99F6h
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
mov	bx, [bp+6]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
mov	ax, 9A10h
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
sub	al, al
push	ax
push	cs
call	near ptr loc_1A542+2
add	sp, 2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
cmp	word ptr [bp+6], 0
jz	short near ptr loc_1AA99+1
mov	bx, [bp+6]
cmp	word ptr [bx+1Ah], 4Dh ; 'M'
jz	short loc_1AA92
mov	ax, [bx]
mov	[bp+6],	ax
or	ax, ax
jnz	short near ptr loc_1AA7C+1
jmp	short near ptr loc_1AA99+1
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
mov	bx, current_province
test	byte ptr [bx+12h], 8
jz	short near ptr loc_1AAB7+1
push	word_19876
jmp	near ptr loc_1AB5D+1
;     ***************************************************************************
nop
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr unk_1AB00
sub	ax, ax
push	ax
call	far ptr	59Dh:320h
add	sp, 2
or	al, al
jz	short near ptr loc_1AB47+3
sub	ah, ah
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
mov	bx, [bx-3508h]
cmp	byte ptr [bx+9], 0FFh
jz	short near ptr loc_1AB47+3
push	bx
push	cs
call	near ptr loc_1A985+1
add	sp, 2
or	ax, ax
jz	short near ptr loc_1AB47+3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	word ptr [bp-8], 2DC4h
mov	byte ptr [bp-4], 0
mov	bx, [bp-8]
push	word ptr [bx+4]
push	cs
call	near ptr loc_1AA73+1
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1AB37+1
mov	bx, [bp-8]
push	word ptr [bx+6]
push	cs
call	near ptr loc_1AA73+1
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1AB37+1
add	word ptr [bp-8], 23h ; '#'
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 29h ; ')'
jb	short near ptr unk_1AB09
cmp	byte ptr [bp-4], 29h ; ')'
jz	short near ptr loc_1AB47+3
mov	al, [bp-4]
push	ax
push	cs
call	near ptr loc_1A8F7+3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 8
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
push	word ptr [bx-679Ah]
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
sub	al, al
push	ax
push	cs
call	near ptr loc_1A542+2
mov	sp, bp
pop	bp
retf
game_advice_rumors_output endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advice_check_rumors_no_travelers proc far ; DATA XREF: game_advice_func+6A  t

arg_0		= byte ptr  6

push	bp
mov	bp, sp
cmp	[bp+arg_0], 2
jb	short near ptr unk_1AB8E
mov	ax, 9A11h	; 0x3922A
; Text:	'No travelers '
push	ax
call	game_warning_display_text_and_sound
mov	sp, bp
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	bl, [bp+arg_0]
sub	bh, bh
shl	bx, 1
shl	bx, 1
call	dword ptr [bx-65E2h]
mov	bx, current_province
or	byte ptr [bx+12h], 8
mov	sp, bp
pop	bp
retf
game_advice_check_rumors_no_travelers endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advice_check_rumors_sub proc far	; DATA XREF: game_advice_check_rumors+14  t
; game_advice_check_rumors+67  t

var_2		= byte ptr -2
arg_0		= byte ptr  6

push	bp
mov	bp, sp
sub	sp, 2
mov	[bp+var_2], 0
mov	bl, [bp+var_2]
sub	bh, bh
mov	al, [bp+arg_0]
cmp	[bx+2B30h], al
jz	short loc_1ABD0
inc	[bp+var_2]
cmp	[bp+var_2], 3
jb	short near ptr unk_1ABB6
jmp	short near ptr loc_1ABD4+4
;     ***************************************************************************
nop
mov	al, [bp+var_2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, 0FFh
mov	sp, bp
pop	bp
retf
game_advice_check_rumors_sub endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advice_check_rumors proc far	; DATA XREF: game_advice_func+13  t
; game_advice_func+65  t

var_A		= byte ptr -0Ah

push	bp
mov	bp, sp
sub	sp, 0Ch
push	current_province
call	far ptr	525h:64h ; game_data_get_province_number
add	sp, 2
push	ax
push	cs
call	game_advice_check_rumors_sub
add	sp, 2
mov	[bp+var_A], al
cmp	al, 2
jnb	short loc_1AC06
mov	al, [bp+var_A]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	far ptr	525h:17Eh ; s_53CE
;     ***************************************************************************
db 0C6h	;   *
db  46h	; F
db 0F8h	;   *
db    0
db  8Ah	;   *
db  5Eh	; ^
db 0F8h	;   *
db  2Ah	; *
db 0FFh
db  8Ah	;   *
db  87h	;   *
db  8Eh	;   *
db 0CAh	;   *
db  88h	;   *
db  46h	; F
db 0F4h	;   *
db  8Bh	;   *
db  1Eh
db  9Ah	;   *
db  33h	; 3
db  8Ah	;   *
db  4Fh	; O
db  20h
db  88h	;   *
db  4Eh	; N
db 0FEh	;   *
db  8Ah	;   *
db  4Fh	; O
db  21h	; !
db  88h	;   *
db  4Eh	; N
db 0FAh	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  9Ah	;   *
db 0A8h	;   *
db    2
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    6
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db  3Ch	; <
db 0FFh
db  74h	; t
db  0Fh
db  50h	; P
db  0Eh
db 0E8h	;   *
db  64h	; d
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db  88h	;   *
db  46h	; F
db 0F6h	;   *
db  3Ch	; <
db    2
db  72h	; r
db 0ADh	;   *
db 0FEh	;   *
db  46h	; F
db 0F8h	;   *
db  80h	;   *
db  7Eh	; ~
db 0F8h	;   *
db    6
db  72h	; r
db 0B4h	;   *
db 0B0h	;   *
db 0FFh
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_advice_check_rumors endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advice_doctor_check_sub proc far	; DATA XREF: game_advice_doctor_check+14  t
; game_advice_doctor_check+57  t

arg_0		= byte ptr  6

push	bp
mov	bp, sp
mov	al, byte_12B32
cmp	[bp+arg_0], al
jnz	short near ptr unk_1AC72
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	bp
retf
game_advice_doctor_check_sub endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advice_doctor_check proc far	; DATA XREF: game_advice_check_doctor+1  t
; game_advice_func+75  t

var_8		= byte ptr -8

push	bp
mov	bp, sp
sub	sp, 8
push	current_province
call	far ptr	525h:64h ; game_data_get_province_number
add	sp, 2
push	ax
push	cs
call	game_advice_doctor_check_sub
add	sp, 2
or	ax, ax
jz	short near ptr unk_1AC9C
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	[bp+var_8], 0
;     ***************************************************************************
db  8Bh	;   *
db  1Eh
db  9Ah	;   *
db  33h	; 3
db  8Ah	;   *
db  47h	; G
db  20h
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db  8Ah	;   *
db  47h	; G
db  21h	; !
db  88h	;   *
db  46h	; F
db 0FAh	;   *
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  9Ah	;   *
db 0A8h	;   *
db    2
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    6
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db  3Ch	; <
db 0FFh
db  74h	; t
db  0Ch
db  50h	; P
db  0Eh
db 0E8h	;   *
db  92h	;   *
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0BDh	;   *
db 0FEh	;   *
db  46h	; F
db 0F8h	;   *
db  80h	;   *
db  7Eh	; ~
db 0F8h	;   *
db    6
db  72h	; r
db 0C0h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_advice_doctor_check endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advice_advisor_sub	proc far	; DATA XREF: game_advice_advisor+B0  t

arg_0		= word ptr  6

push	bp
mov	bp, sp
mov	al, 0FFh
push	ax
mov	ax, [bp+arg_0]
add	ax, 1Ch
push	ax
mov	bx, [bp+arg_0]
push	word ptr [bx+1Ah]
call	game_advisor_display_sub
mov	sp, bp
call	far ptr	57Ch:1FEh ; game_input_hit_any_key
push	current_province
call	game_display_draw_province_data
mov	sp, bp
pop	bp
retf
game_advice_advisor_sub	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advice_advisor_output proc	far

var_A		= byte ptr -0Ah
var_8		= byte ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
sub	sp, 2
mov	bx, [bp+arg_0]
test	byte ptr [bx+2], 2
jz	short near ptr loc_1AD22+2
jmp	near ptr unk_1ADD0
;     ***************************************************************************
mov	ax, 1A4h
mov	dx, 1A47h
push	dx
push	ax
push	current_ruler
push	cs
call	near ptr loc_1A66A+4
add	sp, 6
or	al, al
jz	short near ptr loc_1AD8E+2
sub	ah, ah
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
mov	ax, [bx-314Eh]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	ax, 2
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
push	word ptr [bx-6586h]
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
push	[bp+arg_0]
push	cs
call	loc_1ACE6
add	sp, 2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 18Eh
mov	dx, 1A47h
push	dx
push	ax
push	current_ruler
push	cs
call	near ptr loc_1A66A+4
add	sp, 6
or	al, al
jz	short near ptr unk_1ADD0
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bl, al
sub	bh, bh
shl	bx, 1
mov	ax, [bx-314Eh]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	ax, 9A53h
push	ax
jmp	short loc_1AD72
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+arg_0]
mov	ax, [bx+2]
mov	[bp+var_4], ax
or	ax, ax
jz	short near ptr loc_1AE2E+2
push	ax
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1AE16+1
mov	bx, [bp+var_4]
mov	ax, [bx+2]
mov	[bp+var_2], ax
or	ax, ax
jz	short near ptr loc_1AE16+1
mov	ax, [bp+arg_2]
cmp	[bp+var_2], ax
jz	short near ptr loc_1AE27+1
mov	bx, [bp+var_2]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jnz	short loc_1AE03
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_4], ax
or	ax, ax
jnz	short loc_1ADE9
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	[bp+var_4]
call	far ptr	525h:64h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ch
push	si
sub	ax, ax
push	ax
call	far ptr	59Dh:320h
add	sp, 2
mov	byte ptr [bp+var_4], al
or	al, al
jnz	short near ptr loc_1AE4E+2
jmp	near ptr loc_1AF25+1
;     ***************************************************************************
mov	al, 46h	; 'F'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1AE64
sub	al, al
jmp	short loc_1AE71
;     ***************************************************************************
nop
mov	al, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
inc	al
mov	[bp+var_A], al
mov	al, byte ptr [bp+var_4]
sub	ah, ah
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
mov	ax, [bx-3508h]
mov	[bp+var_6], ax
mov	bl, [bp+var_A]
sub	bh, bh
shl	bx, 1
shl	bx, 1
push	word ptr [bx-653Ah]
push	word ptr [bx-653Ch]
push	ax
push	cs
call	near ptr loc_1A66A+4
add	sp, 6
or	al, al
jz	short near ptr loc_1AF25+1
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bl, al
sub	bh, bh
shl	bx, 1
push	word ptr [bx-314Eh]
push	[bp+var_6]
mov	si, bx
push	cs
call	loc_1ADD6
add	sp, 4
mov	[bp+var_8], al
mov	ax, [si-314Eh]
add	ax, 1Ch
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
mov	ax, 9AB4h
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
mov	al, [bp+var_8]
inc	al
push	ax
push	cs
call	loc_1A4F4
add	sp, 2
mov	bl, [bp+var_A]
sub	bh, bh
shl	bx, 1
push	word ptr [bx-6530h]
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
push	[bp+arg_0]
push	cs
call	loc_1ACE6
add	sp, 2
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_4], 0CA62h
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jz	short loc_1AF72
push	ax
call	loc_1057F+1
add	sp, 2
or	ax, ax
jz	short near ptr loc_1AF63+1
mov	bx, [bp+var_2]
push	word ptr [bx+2]
call	far ptr	525h:158h
add	sp, 2
cmp	al, 14h
jnb	short near ptr loc_1AF68+2
add	[bp+var_4], 2
jmp	short near ptr loc_1AF37+2
;     ***************************************************************************
mov	ax, [bp+var_2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	current_province
call	far ptr	loc_1290E
add	sp, 2
mov	[bp+var_2], ax
mov	[bp+var_6], 0CA62h
mov	bx, [bp+var_6]
mov	ax, [bx]
mov	[bp+var_4], ax
or	ax, ax
jz	short near ptr loc_1AFD2+2
push	ax
call	loc_1057F+1
add	sp, 2
or	ax, ax
jz	short loc_1AFC6
push	[bp+var_4]
call	far ptr	loc_1290E
add	sp, 2
mov	cx, ax
mov	ax, [bp+var_2]
mov	bx, 3
sub	dx, dx
div	bx
cmp	cx, ax
jb	short loc_1AFCC
add	[bp+var_6], 2
jmp	short loc_1AF92
;     ***************************************************************************
mov	ax, [bp+var_4]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	current_province
call	far ptr	loc_1290E
add	sp, 2
mov	[bp+var_2], ax
mov	[bp+var_6], 0CA62h
mov	bx, [bp+var_6]
mov	ax, [bx]
mov	[bp+var_4], ax
or	ax, ax
jz	short near ptr loc_1B02D+1
push	ax
call	loc_1057F+1
add	sp, 2
or	ax, ax
jz	short near ptr loc_1B01D+2
push	[bp+var_4]
call	far ptr	loc_1290E
add	sp, 2
shr	ax, 1
cmp	ax, [bp+var_2]
ja	short near ptr loc_1B025+1
add	[bp+var_6], 2
jmp	short near ptr loc_1AFF3+1
;     ***************************************************************************
nop
mov	ax, [bp+var_4]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_4], 0CA62h
mov	bx, [bp+var_4]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jz	short near ptr loc_1B08B+1
push	ax
call	loc_1057F+1
add	sp, 2
or	ax, ax
jz	short loc_1B07F
mov	ax, 2
cwd
push	dx
push	ax
push	[bp+var_2]
call	far ptr	525h:122h
add	sp, 2
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	bx, [bp+var_2]
cmp	dx, [bx+0Ch]
jg	short near ptr loc_1B085+1
jl	short loc_1B07F
cmp	ax, [bx+0Ah]
ja	short near ptr loc_1B085+1
add	[bp+var_4], 2
jmp	short loc_1B03F
;     ***************************************************************************
nop
mov	ax, bx
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	current_province
call	far ptr	59Dh:428h
add	sp, 2
mov	al, 4
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	[bp+var_8], al
add	al, 2
mov	byte ptr [bp+var_2], al
cmp	al, [bp+var_8]
ja	short near ptr loc_1B0BE+1
jmp	near ptr unk_1B170
;     ***************************************************************************
mov	bl, [bp+var_8]
and	bx, 3
shl	bx, 1
shl	bx, 1
call	dword ptr [bx-63ECh]
mov	[bp+var_6], ax
or	ax, ax
jnz	short near ptr loc_1B0E1+1
inc	[bp+var_8]
mov	al, byte ptr [bp+var_2]
cmp	[bp+var_8], al
jb	short near ptr loc_1B0BE+1
jmp	near ptr unk_1B170
;     ***************************************************************************
mov	al, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	byte ptr [bp+var_4], al
mov	al, [bp+var_8]
and	al, 3
cmp	al, 2
jnz	short loc_1B104
cmp	byte ptr [bp+var_4], 0
jnz	short loc_1B104
mov	ax, 9BD2h
jmp	short near ptr unk_1B11B
;     ***************************************************************************
mov	al, [bp+var_8]
and	al, 3
cmp	al, 3
jnz	short near ptr unk_1B118
cmp	byte ptr [bp+var_4], 0
jnz	short near ptr unk_1B118
mov	ax, 9BE9h
jmp	short near ptr unk_1B11B
;     ***************************************************************************
mov	ax, 9C0Ah
push	ax
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh
add	sp, 4
push	[bp+var_6]
call	far ptr	525h:64h
add	sp, 2
inc	al
push	ax
push	cs
call	loc_1A4F4
add	sp, 2
mov	bl, [bp+var_8]
and	bx, 3
shl	bx, 1
mov	al, byte ptr [bp+var_4]
sub	ah, ah
add	bx, ax
shl	bx, 1
push	word ptr [bx-63DCh]
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0E6h
add	sp, 4
push	[bp+arg_0]
push	cs
call	loc_1ACE6
add	sp, 2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_advice_advisor_output endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advice_advisor proc far		; DATA XREF: game_advice_func+5D  t

var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= byte ptr -2

push	bp
mov	bp, sp
sub	sp, 6
mov	bx, current_ruler
mov	ax, [bx+4]
mov	[bp+var_4], ax
or	ax, ax
jnz	short loc_1B18D
jmp	locret_1B23C
;     ***************************************************************************
push	current_province
push	ax
call	far ptr	542h:15Ah ; game_data_check_advisor_in_province
add	sp, 4
or	ax, ax
jnz	short near ptr loc_1B1A0+1
jmp	locret_1B23C
;     ***************************************************************************
mov	bx, current_ruler
test	byte ptr [bx+7], 20h
jnz	short near ptr loc_1B201+1
mov	bx, [bp+var_4]
mov	al, [bx+0Bh]
push	ax
call	far ptr	57Ch:0DCh ; game_math_get_random_number_100
add	sp, 2
or	ax, ax
jz	short near ptr loc_1B201+1
mov	al, 3
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2
mov	[bp+var_2], al
add	al, 3
mov	[bp+var_6], al
cmp	al, [bp+var_2]
jbe	short near ptr loc_1B201+1
push	[bp+var_4]
mov	al, [bp+var_2]
mov	cl, 3
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
shl	ax, 1
shl	ax, 1
mov	bx, ax
call	dword ptr [bx-637Ah]
add	sp, 2
or	ax, ax
jnz	short loc_1B230
inc	[bp+var_2]
mov	al, [bp+var_6]
cmp	[bp+var_2], al
jb	short near ptr loc_1B1D5+1
mov	ax, 2
push	ax
call	far ptr	49Ch:178h ; math_random_number_generator
add	sp, 2
mov	bx, ax
shl	bx, 1
push	word ptr [bx-636Eh]
mov	ax, 0C9FEh
push	ax
call	far ptr	561h:0BEh ; s_56CE
add	sp, 4
push	[bp+var_4]
push	cs
call	game_advice_advisor_sub
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, current_ruler
;     ***************************************************************************
db  80h	;   *
db  4Fh	; O
db    7
db  20h
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
mov	ax, 9C75h	; 0x3948E
; Text:	'No advisor here '
;     ***************************************************************************
db  50h	; P
db  9Ah	;   *
db  0Ch
db    1
db 0F9h	;   *
db  12h
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_advice_advisor endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_advice_check_advisor proc far	; DATA XREF: game_advice_func+C  t
mov	bx, current_ruler
mov	ax, [bx+4]
or	ax, ax
jz	short near ptr unk_1B26A
push	current_province
push	ax
call	far ptr	542h:15Ah ; game_data_check_advisor_in_province
add	sp, 4
or	ax, ax
jz	short near ptr unk_1B26A
mov	ax, 5
retf
;     ***************************************************************************
mov	ax, 1
retf
game_advice_check_advisor endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advice_func_sub2 proc far		; DATA XREF: game_advice_func+18  t

arg_0		= byte ptr  6

push	bp
mov	bp, sp
cmp	[bp+arg_0], 2
jb	short near ptr unk_1B27C
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
mov	ax, 5
pop	bp
retf
game_advice_func_sub2 endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


game_advice_check_doctor proc far	; DATA XREF: game_advice_func+22  t
push	cs
call	game_advice_doctor_check
or	ax, ax
jnz	short near ptr loc_1B28A+4
mov	ax, 1
retf
;     ***************************************************************************
mov	ax, 5
retf
game_advice_check_doctor endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_advice_func proc far

var_A		= word ptr -0Ah
var_4		= word ptr -4

push	bp
mov	bp, sp
sub	sp, 0Ah
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
push	cs
call	game_advice_check_advisor
mov	[bp+var_A], ax
push	cs
call	game_advice_check_rumors
push	ax
push	cs
call	game_advice_func_sub2
add	sp, 2
mov	[bp+var_4], ax
push	cs
call	game_advice_check_doctor
push	ax
push	[bp+var_4]
push	[bp+var_A]
mov	ax, 9C96h	; 0x394AF
; Text:	'%d1. Advice %d2. Rumors %d3. Healing '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 8
mov	ax, 3
push	ax
mov	ax, 1
push	ax
mov	ax, 9CC6h	; 0x394DF
; Text:	'Select which '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
dec	ax
jz	short loc_1B2EE
dec	ax
jz	short near ptr loc_1B2F5+1
dec	ax
jz	short loc_2B306
dec	ax
jz	short loc_1B312
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	cs
call	game_advice_advisor
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	cs
call	game_advice_check_rumors
push	ax
push	cs
call	game_advice_check_rumors_no_travelers
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************

loc_2B306:				; DATA XREF: game_advice_func+53  t		 /* DOS offset ---> 229C:6 */
push	cs
;     ***************************************************************************
db 0E8h	;   *
db  6Ch	; l
db 0F9h	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db  63h	; c
db 0F2h	;   *
db 0EBh	;   *
db 0EEh	;   *
;     ***************************************************************************
nop
call	loc_20569+3	; s_2056C
;     ***************************************************************************
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_advice_func endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_options_quit_game proc far		; DATA XREF: game_options_func+E7  t
push	bp
mov	bp, sp
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 9CD4h	; 0x394ED
; Text:	'<This will end the game for all players> '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jz	short near ptr loc_1B367+1
call	far ptr	4B5h:282h ; game_gfx_blk_bkgrnd_shape_4
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 9D12h	; 0x3952B
; Text:	'Until next time... '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	al, 96
push	ax
call	far ptr	6EBh:3Ah ; game_audio_fade_music
add	sp, 2
call	far ptr	6EBh:64h ; game_audio_fade_music_check
or	ax, ax
jnz	short near ptr loc_1B359+1
call	far ptr	0A95h:4	; game_quit_execute
mov	sp, bp
pop	bp
retf
game_options_quit_game endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_options_quit_player proc far	; DATA XREF: game_options_func+D7  t
push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 9D2Fh	; 0x39548
; Text:	'Quit player '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jnz	short near ptr loc_1B38D+2
jmp	near ptr loc_1B415+2
;     ***************************************************************************
push	current_ruler
call	far ptr	525h:6	; game_data_get_rulers_data
add	sp, 2
mov	bl, al
sub	bh, bh
mov	[bx+3360h], bh
call	far ptr	542h:2	; s_5422
or	ax, ax
jz	short near ptr loc_1B3F4+1
mov	ax, 9D3Bh	; 0x39554
; Text:	'See what happens '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
call	far ptr	3EFh:9D6h ; game_input_query_display_yes_no
or	ax, ax
jnz	short near ptr loc_1B3EE+2
call	far ptr	4B5h:282h ; game_gfx_blk_bkgrnd_shape_4
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 9D4Dh	; 0x39566
; Text:	'Until next time... '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
add	sp, 2
mov	al, 96
push	ax
call	far ptr	6EBh:3Ah ; game_audio_fade_music
add	sp, 2
call	far ptr	6EBh:64h ; game_audio_fade_music_check
or	ax, ax
jnz	short loc_1B3E2
call	far ptr	0A95h:4	; game_quit_execute
mov	byte_14CEF, 0
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 9D6Ah	; 0x39583
; Text:	'From now on, the computer will play %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
push	current_province
call	game_end_turn_func
add	sp, 2
mov	ax, 1
mov	sp, bp
pop	bp
retf
game_options_quit_player endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_options_sound_effects proc	far	; DATA XREF: game_options_func+A5  t

var_4		= byte ptr -4
arg_0		= byte ptr  6

push	bp
mov	bp, sp
sub	sp, 4
cmp	[bp+arg_0], 0
jnz	short near ptr loc_1B42B+1
mov	al, 4
jmp	short near ptr loc_1B436+2
;     ***************************************************************************
cmp	[bp+arg_0], 1
jnz	short loc_1B436
mov	al, 2
jmp	short near ptr loc_1B436+2
;     ***************************************************************************
mov	al, 1
mov	[bp+var_4], al
test	options_value, al
jz	short near ptr loc_1B443+3
mov	ax, 9DBDh
jmp	short near ptr loc_1B448+1
;     ***************************************************************************
mov	ax, 9DC2h
push	ax
mov	bl, [bp+arg_0]
sub	bh, bh
shl	bx, 1
push	word ptr [bx-621Ch]
mov	ax, 9DC8h	; 0x395E1
; Text:	'%s %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
mov	ax, 2
push	ax
mov	ax, 1
push	ax
mov	ax, 9DD8h	; 0x395F1
; Text:	'1. On 2. Off '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
dec	ax
jz	short loc_1B47E
dec	ax
jz	short near ptr loc_1B487+1
jmp	short near ptr loc_1B490+1
;     ***************************************************************************
nop
mov	al, [bp+var_4]
or	options_value, al
jmp	short near ptr loc_1B490+1
;     ***************************************************************************
nop
mov	al, [bp+var_4]
not	al
and	options_value, al
cmp	[bp+arg_0], 1
jnz	short near ptr loc_1B4BD+1
test	options_value, 2
jz	short near ptr loc_1B4B5+1
mov	bx, current_province
mov	bl, [bx+22h]
sub	bh, bh
mov	al, [bx+3C4Eh]
push	ax
call	far ptr	6EBh:96h ; game_audio_start_music
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, 10h
push	ax
call	far ptr	6EBh:3Ah ; game_audio_fade_music
mov	sp, bp
pop	bp
retf
game_options_sound_effects endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_options_wait_messenger_speed proc far ; DATA XREF:	game_options_wait+3D  t

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4

push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	bl, byte ptr messenger_speed_value
shr	bl, 1
sub	bh, bh
shl	bx, 1
push	word ptr [bx-61B8h]
mov	ax, 9E0Ah	; 0x39623
; Text:	'Display speed is %s '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	[bp+var_4], 0
mov	[bp+var_8], 9E48h
mov	bx, [bp+var_8]
push	word ptr [bx]
mov	ax, [bp+var_4]
inc	ax
push	ax
mov	cx, 9E2Dh	; 0x39646
; Text:	'%d. %s'
push	cx
mov	si, ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 6
mov	[bp+var_4], si
add	[bp+var_8], 2
cmp	[bp+var_8], 9E50h
jb	short near ptr loc_1B4EA+3
mov	ax, 4
push	ax
mov	ax, 1
push	ax
mov	ax, 9E34h	; 0x3964D
; Text:	'Change to what '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_6], ax
cmp	ax, 0FFFFh
jz	short loc_1B539
mov	al, byte ptr [bp+var_6]
dec	al
shl	al, 1
mov	byte ptr messenger_speed_value,	al
pop	si
mov	sp, bp
pop	bp
retf
game_options_wait_messenger_speed endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_options_wait_message_speed	proc far ; DATA	XREF: game_options_wait+35  t

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2
mov	al, message_wait_value
sub	ah, ah
push	ax
mov	ax, 9E50h	; 0x39669
; Text:	'Message wait is '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	ax, 0Ah
push	ax
mov	ax, 1
push	ax
mov	ax, 9E70h	; 0x39689
; Text:	'Change to what '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short near ptr unk_1B578
mov	al, byte ptr [bp+var_2]
mov	message_wait_value, al
mov	sp, bp
pop	bp
retf
game_options_wait_message_speed	endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_options_wait proc far		; DATA XREF: game_options_func+97  t

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 2
push	ax
mov	ax, 1
push	ax
mov	ax, 9E7Fh	; 0x39698
; Text:	'1. Message wait 2. Messenger speed '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, [bp+var_2]
dec	ax
jz	short loc_1B5B0
dec	ax
jz	short near ptr loc_1B5B6+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	cs
call	game_options_wait_message_speed
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	cs
call	game_options_wait_messenger_speed
mov	sp, bp
pop	bp
retf
game_options_wait endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_options_HEX proc far		; DATA XREF: game_options_func+CF  t
push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
call	game_check_provinces_in_war
or	ax, ax
jz	short loc_1B622
mov	al, options_value
and	al, 8
cmp	al, 1
sbb	bx, bx
neg	bx
shl	bx, 1
push	word ptr [bx-60EEh]
mov	ax, 9EC0h	; 0x396D9
; Text:	'HEX war is '
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	ax, 2
push	ax
mov	ax, 1
push	ax
mov	ax, 9ED7h	; 0x396F0
; Text:	'1. On 2. Off '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
cmp	ax, 0FFFFh
jz	short near ptr loc_1B62A+1
cmp	ax, 1
jnz	short loc_1B618
or	options_value, 8
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
and	options_value, 0F7h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 9EE2h	; 0x396FB
; Text:	'Some provinces now in battle '
push	ax
call	far ptr	3EFh:6C0h ; system_execute_function
mov	sp, bp
pop	bp
retf
game_options_HEX endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_options_func proc far

var_19FE	= word ptr -19FEh
var_4		= byte ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 4
mov	bx, current_ruler
cmp	byte ptr [bx+22h], 0FFh
jnz	short loc_1B644
mov	al, 5
jmp	short near ptr loc_1B644+2
;     ***************************************************************************
mov	al, 6
mov	[bp+var_4], al
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	al, [bp+var_4]
sub	ah, ah
push	ax
call	far ptr	3EFh:458h ; game_display_text_color
add	sp, 2
cmp	word_1352C, 0
jz	short near ptr loc_1B66F+1
mov	ax, 8
push	ax
mov	ax, 1
push	ax
mov	ax, 9F16h
jmp	short loc_1B68D
;     ***************************************************************************
mov	al, [bp+var_4]
sub	ah, ah
push	ax
mov	ax, 9FA1h	; 0x397B3
; Text:	'1. Wait 5. Save
; 2. Graphics 6. HEX War
; 3. Music 7. Quit Player
; 4. Sound effects 8. Quit Game	'
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
mov	ax, 8
push	ax
mov	ax, 1
push	ax
mov	ax, 0A023h	; 0x3982E
; Text:	'Choose which '
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax

loc_2B699:				; CODE XREF: dseg:227D8  P		 /* DOS offset ---> 22D5:9 */
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, [bp+var_2]
cmp	ax, 0FFFFh
jz	short loc_1B71C
ja	short near ptr loc_1B6C3+3
dec	ax
cmp	ax, 7
ja	short near ptr loc_1B648+1
shl	ax, 1
xchg	ax, bx
jmp	word ptr cs:[bx+3A6h]
;     ***************************************************************************
mov	dh, 3
mov	si, 0CE03h
add	di, [bp+var_19FE+1]
add	bp, si
add	si, si
add	ax, word_10E04
call	game_options_wait
jmp	near ptr loc_1B648+1
;     ***************************************************************************
nop
mov	al, byte ptr [bp+var_2]
sub	al, 2
push	ax
push	cs
call	game_options_sound_effects
add	sp, 2
jmp	near ptr loc_1B648+1
;     ***************************************************************************
cmp	word_1352C, 0
jnz	short near ptr loc_1B6CD+1
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 0A034h
push	ax
call	game_warning_display_text_and_sound
jmp	short near ptr loc_1B6D6+2
;     ***************************************************************************
nop
call	game_options_save_game
jmp	near ptr loc_1B648+1
;     ***************************************************************************
push	cs
call	game_options_HEX
jmp	near ptr loc_1B648+1
;     ***************************************************************************
nop
push	cs
call	game_options_quit_player
or	ax, ax
jnz	short near ptr loc_1B710+1
jmp	near ptr loc_1B648+1
;     ***************************************************************************
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	cs
call	game_options_quit_game
jmp	short near ptr loc_1B706+4
;     ***************************************************************************
mov	sp, bp
pop	bp
retf
game_options_func endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

func_1B720	proc far		; CODE XREF: dseg:225DE  P dseg:23A7C  P ...

var_14		= word ptr -14h
var_10		= word ptr -10h
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_4		= word ptr -4

push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db  16h
db  56h	; V
db 0C7h	;   *
db  46h	; F
db 0F8h	;   *
db    0
db    0
db 0C7h	;   *
db  46h	; F
db 0F6h	;   *
db  34h	; 4
db  2Bh	; +
db  2Bh	; +
db 0C0h	;   *
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  89h	;   *
db  46h	; F
db 0EEh	;   *
db 0C7h	;   *
db  46h	; F
db 0FAh	;   *
db    0
db    0
db  8Bh	;   *
db  5Eh	; ^
db 0F6h	;   *
db  83h	;   *
db  3Fh	; ?
db    0
db  75h	; u
db    3
db 0E9h	;   *
db  88h	;   *
db    1
;     ***************************************************************************
push	bx
call	far ptr	542h:42h
add	sp, 2
or	ax, ax
jnz	short loc_1B759
jmp	near ptr byte_1B8D1
;     ***************************************************************************
cmp	[bp+var_8], 0
jnz	short near ptr loc_1B767+2
call	far ptr	4B5h:282h
mov	[bp+var_8], 1
test	byte ptr [bp+var_4], 3
jnz	short near ptr loc_1B795+3
mov	ax, 0A0h ; '  *'
push	ax
mov	al, byte ptr [bp+var_4]
and	al, 4
shr	al, 1
shr	al, 1
mov	cl, 15h
mul	cl
add	ax, 26h	; '&'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 0A064h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	al, byte ptr [bp+var_4]
and	al, 3
mov	cl, 13h
mul	cl
add	ax, 0B7h ; '  *'
mov	[bp+var_14], ax

loc_2B7A7:				; CODE XREF: dseg:27D52  P		 /* DOS offset ---> 22E6:7 */
mov	cx, 7
push	cx
add	ax, 0Fh
push	ax
mov	al, byte ptr [bp+var_4]
and	al, 4
mov	cl, 2Ah	; '*'
mul	cl
add	ax, 130h
mov	[bp+var_10], ax
add	ax, 10h
push	ax
push	[bp+var_14]
push	[bp+var_10]
call	far ptr	57Ch:0
add	sp, 0Ah
cmp	word_1CEA2, 0
jz	short loc_1B7FC
sub	ax, ax
push	ax
push	[bp+var_A]
call	far ptr	525h:6
add	sp, 2
mov	bl, al
sub	bh, bh
mov	al, [bx+48h]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 3B30h
jmp	short loc_1B81F
;     ***************************************************************************
sub	ax, ax
push	ax
push	[bp+var_A]
call	far ptr	525h:6
add	sp, 2
mov	bl, al
sub	bh, bh
mov	al, [bx+48h]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 3AD0h
push	ax
mov	ax, 2
push	ax
mov	ax, 7
push	ax

loc_2B828:				; CODE XREF: dseg:2A9BD  P		 /* DOS offset ---> 22EE:8 */
mov	ax, [bp+var_14]
;     ***************************************************************************
db    5
db    8
db    0
db  50h	; P
db  8Bh	;   *
db  46h	; F
db 0F0h	;   *
db    5
db    8
db    0
db  50h	; P
db  9Ah	;   *
db 0E6h	;   *
db    5
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ch
db 0FFh
db  76h	; v
db 0ECh	;   *
db  8Bh	;   *
db  46h	; F
db 0F0h	;   *
db  99h	;   *
db  33h	; 3
db 0C2h	;   *
db  2Bh	; +
db 0C2h	;   *
db 0B9h	;   *
db    3
db    0
db 0D3h	;   *
db 0F8h	;   *
db  33h	; 3
db 0C2h	;   *
db  2Bh	; +
db 0C2h	;   *
db  50h	; P
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0C6h	;   *
db  46h	; F
db 0EAh	;   *
db    0
db  2Bh	; +
db 0C0h	;   *
db  89h	;   *
db  46h	; F
db 0F4h	;   *
db  89h	;   *
db  46h	; F
db 0F2h	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0F6h	;   *
db  8Bh	;   *
db    7
db  0Bh
db 0C0h	;   *
db  74h	; t
db  16h
db 0FEh	;   *
db  46h	; F
db 0EAh	;   *
db  8Bh	;   *
db 0D8h	;   *
db  8Bh	;   *
db  47h	; G
db  12h
db  2Bh	; +
db 0D2h	;   *
db    1
db  46h	; F
db 0F2h	;   *
db  11h
db  56h	; V
db 0F4h	;   *
db  8Bh	;   *
db    7
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0EAh	;   *
db  83h	;   *
db  7Eh	; ~
db 0F4h	;   *
db    0
db  7Ch	; |
db  13h
db  7Fh	; 
db    7
db  81h	;   *
db  7Eh	; ~
db 0F2h	;   *
db  50h	; P
db 0C3h	;   *
db  76h	; v
db  0Ah
db 0C7h	;   *
db  46h	; F
db 0F2h	;   *
db  50h	; P
db 0C3h	;   *
db 0C7h	;   *
db  46h	; F
db 0F4h	;   *
db    0
db    0
db 0FFh
db  76h	; v
db 0F2h	;   *
db  8Ah	;   *
db  46h	; F
db 0EAh	;   *
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db 0F6h	;   *
db  8Ah	;   *
db  47h	; G
db  22h	; "
db  40h	; @
db  50h	; P
db  8Bh	;   *
db    7
db    5
db  1Ch
db    0
db  50h	; P
db  8Bh	;   *
db  46h	; F
db 0FCh	;   *
db  40h	; @
db  50h	; P
db 0B9h	;   *
db  82h	;   *
db 0A0h	;   *
db  51h	; Q
db  8Bh	;   *
db 0F0h	;   *
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db  0Ch
db  89h	;   *
db  76h	; v
db 0FCh	;   *
db 0C7h	;   *
db  46h	; F
db 0FAh	;   *
db    1
db    0
db  83h	;   *
db  46h	; F
db 0F6h	;   *
db  29h	; )
db 0A0h	;   *
db  47h	; G
db    0
db  2Ah	; *
db 0E4h	;   *
db 0FFh
db  46h	; F
db 0EEh	;   *
db  3Bh	; ;
db  46h	; F
db 0EEh	;   *
db  74h	; t
db  2Eh	; .
db  83h	;   *
db  7Eh	; ~
db 0FAh	;   *
db    0
db  75h	; u
db    3
db 0E9h	;   *
db  4Eh	; N
db 0FEh	;   *
;     ***************************************************************************
cmp	[bp+var_4], 0
jnz	short near ptr loc_1B8F3+1
jmp	loc_1B739
;     ***************************************************************************
test	byte ptr [bp+var_4], 7
jz	short near ptr loc_1B8FA+3

loc_2B8FA:				; CODE XREF: dseg:241D0  P dseg:241F5  P ...		 /* DOS offset ---> 22FB:A */
jmp	loc_1B739
;     ***************************************************************************
call	far ptr	4B5h:290h
call	far ptr	57Ch:1FEh
call	far ptr	4B5h:282h
jmp	loc_1B739
;     ***************************************************************************
nop
cmp	[bp+var_8], 1
jnz	short loc_1B926
test	byte ptr [bp+var_4], 7
jz	short loc_1B926
call	far ptr	4B5h:290h
call	far ptr	57Ch:1FEh
cmp	[bp+var_8], 0
jnz	short near ptr loc_1B938+4
call	far ptr	4B5h:290h
mov	ax, 0A0A5h
push	ax
call	far ptr	3EFh:6C0h
jmp	short loc_1B945
;     ***************************************************************************
push	current_province
call	loc_1377C
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
func_1B720	endp

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
mov	word ptr [bp-6], 2DC4h
mov	byte ptr [bp-4], 0
mov	bx, [bp-6]
mov	ax, [bx+6]
mov	[bp-2],	ax
or	ax, ax
jz	short near ptr unk_1B9B1

loc_2B96A:				; CODE XREF: dseg:22F3E  P dseg:23349  P ...		 /* DOS offset ---> 2302:A */
mov	al, [bp-4]
;     ***************************************************************************
db  2Ah	; *
db 0E4h	;   *
db  40h	; @
db  89h	;   *
db  46h	; F
db 0F8h	;   *
db  9Ah	;   *
db  90h	;   *
db    2
db 0B5h	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
db  8Ah	;   *
db  47h	; G
db    6
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db  8Ah	;   *
db  47h	; G
db    5
db  50h	; P
db  8Ah	;   *
db  47h	; G
db    4
db  50h	; P
db  8Dh	;   *
db  47h	; G
db  1Ch
db  50h	; P
db 0FFh
db  76h	; v
db 0F8h	;   *
db 0B8h	;   *
db 0B8h	;   *
db 0A0h	;   *
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db  0Ch
db  9Ah	;   *
db  9Ah	;   *
db    7
db 0EFh	;   *
db    3
db  3Ch	; <
db  1Bh
db  74h	; t
db  19h
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0C2h	;   *
db  83h	;   *
db  46h	; F
db 0FAh	;   *
db  23h	; #
db 0FEh	;   *
db  46h	; F
db 0FCh	;   *
db  80h	;   *
db  7Eh	; ~
db 0FCh	;   *
db  29h	; )
db  72h	; r
db  9Fh	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
mov	word ptr [bp-6], 2DC4h
mov	byte ptr [bp-4], 0
mov	bx, [bp-6]
mov	ax, [bx+4]
mov	[bp-2],	ax
or	ax, ax
jz	short near ptr unk_1BA25
mov	al, [bp-4]
sub	ah, ah
inc	ax
mov	[bp-8],	ax
call	far ptr	4B5h:290h
mov	bx, [bp-2]
mov	al, [bx+6]
sub	ah, ah
push	ax
mov	al, [bx+5]
push	ax
mov	al, [bx+4]
push	ax
lea	ax, [bx+1Ch]
push	ax
push	word ptr [bp-8]
mov	ax, 0A0EFh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Ch
call	far ptr	3EFh:79Ah
cmp	al, 1Bh
jz	short loc_1BA32
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr unk_1B9E7
add	word ptr [bp-6], 23h ; '#'
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 29h ; ')'
jb	short near ptr loc_1B9CF+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 10h
push	si
call	far ptr	4B5h:282h
mov	word ptr [bp-2], 0
mov	word ptr [bp-8], 3370h
jmp	short near ptr unk_1BA52
;     ***************************************************************************
add	word ptr [bp-8], 2
mov	bx, [bp-8]
mov	bx, [bx]
mov	[bp-6],	bx
cmp	word ptr [bx], 0
jz	short near ptr unk_1BA4E
test	byte ptr [bp-2], 3
jnz	short loc_1BA81
mov	ax, 50h	; 'P'
push	ax
mov	ax, 2Fh	; '/'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 0A11Eh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	al, [bp-2]
and	al, 3
mov	cl, 13h
mul	cl
add	ax, 0B7h ; '  *'
mov	[bp-0Eh], ax
mov	cx, 7
push	cx
add	ax, 0Fh
cwd
sub	ax, dx
sar	ax, 1
push	ax
mov	ax, 180h
push	ax
mov	ax, [bp-0Eh]
cwd
sub	ax, dx
sar	ax, 1
push	ax
mov	ax, 170h
mov	[bp-0Ch], ax
push	ax
call	far ptr	57Ch:0
add	sp, 0Ah
cmp	word_1CEA2, 0
jnz	short near ptr unk_1BAC3
jmp	near ptr loc_1BB4E+2
;     ***************************************************************************
sub	ax, ax
push	ax
push	word ptr [bp-6]
call	far ptr	525h:6
add	sp, 2
mov	bl, al
sub	bh, bh
mov	al, [bx+48h]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx

loc_2BAE1:				; CODE XREF: dseg:2340F  P dseg:28A6D  P ...		 /* DOS offset ---> 231A:1 */
shl	ax, 1
add	ax, 3B30h
push	ax
mov	ax, 2
push	ax
mov	cx, 7
push	cx
mov	cx, [bp-0Eh]
add	cx, 8
push	cx
mov	cx, [bp-0Ch]
add	cx, 8
push	cx
call	far ptr	0:5E6h
add	sp, 0Ch
mov	ax, [bp-0Eh]
cwd
sub	ax, dx
sar	ax, 1
push	ax

loc_2BB0E:				; CODE XREF: dseg:2343B  P		 /* DOS offset ---> 231C:E */
mov	ax, [bp-0Ch]
;     ***************************************************************************
db  99h	;   *
db  33h	; 3
db 0C2h	;   *
db  2Bh	; +
db 0C2h	;   *
db 0B9h	;   *
db    3
db    0
db 0D3h	;   *
db 0F8h	;   *
db  33h	; 3
db 0C2h	;   *
db  2Bh	; +
db 0C2h	;   *
db  2Dh	; -
db    5
db    0
db  50h	; P
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0FFh
db  76h	; v
db 0FAh	;   *
db  9Ah	;   *
db    6
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Ah	;   *
db 0D8h	;   *
db  2Ah	; *
db 0FFh
db  8Ah	;   *
db  87h	;   *
db  48h	; H
db    0
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db 0B8h	;   *
db  3Bh	; ;
db 0A1h	;   *
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0EBh	;   *
db  43h	; C
;     ***************************************************************************
nop
sub	ax, ax
push	ax
push	word ptr [bp-6]
call	far ptr	525h:6
add	sp, 2
mov	bl, al

loc_2BB60:				; CODE XREF: dseg:2B56B  P		 /* DOS offset ---> 2322:0 */
sub	bh, bh
;     ***************************************************************************
db  8Ah	;   *
db  87h	;   *
db  48h	; H
db    0
db  2Ah	; *
db 0E4h	;   *
db  8Bh	;   *
db 0C8h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    3
db 0C1h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    5
db 0D0h	;   *
db  3Ah	; :
db  50h	; P
db 0B8h	;   *
db    2
db    0
db  50h	; P
db 0B8h	;   *
db    7
db    0
db  50h	; P
db  8Bh	;   *
db  46h	; F
db 0F2h	;   *
db    5
db    8
db    0
db  50h	; P
db  8Bh	;   *
db  46h	; F
db 0F4h	;   *
db    5
db    8
db    0
db  50h	; P
db  9Ah	;   *
db 0E6h	;   *
db    5
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ch
db  8Bh	;   *
db  46h	; F
db 0F2h	;   *
db  99h	;   *
db  2Bh	; +
db 0C2h	;   *
db 0D1h	;   *
db 0F8h	;   *
db  50h	; P
db  8Bh	;   *
db  46h	; F
db 0F4h	;   *
db  99h	;   *
db  33h	; 3
db 0C2h	;   *
db  2Bh	; +
db 0C2h	;   *
db 0B9h	;   *
db    3
db    0
db 0D3h	;   *
db 0F8h	;   *
db  33h	; 3
db 0C2h	;   *
db  2Bh	; +
db 0C2h	;   *
db  50h	; P
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0C6h	;   *
db  46h	; F
db 0FCh	;   *
db    0
db  8Bh	;   *
db  5Eh	; ^
db 0FAh	;   *
db  8Bh	;   *
db  47h	; G
db    2
db  89h	;   *
db  46h	; F
db 0F6h	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  0Eh
db 0FEh	;   *
db  46h	; F
db 0FCh	;   *
db  8Bh	;   *
db 0D8h	;   *
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0F6h	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0F2h	;   *
db 0C6h	;   *
db  46h	; F
db 0F0h	;   *
db    0
db  8Bh	;   *
db  5Eh	; ^
db 0FAh	;   *
db  8Bh	;   *
db  47h	; G
db    2
db  89h	;   *
db  46h	; F
db 0F6h	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  1Ch
db  8Bh	;   *
db 0D8h	;   *
db 0FFh
db  77h	; w
db    2
db  9Ah	;   *
db  58h	; X
db    1
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db    0
db  46h	; F
db 0F0h	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0F6h	;   *
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0F6h	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0E4h	;   *
db 0B8h	;   *
db 0E7h	;   *
db    3
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db 0FAh	;   *
db  8Bh	;   *
db  47h	; G
db  0Ch
db 0B9h	;   *
db  0Ah
db    0
db  2Bh	; +
db 0D2h	;   *
db 0F7h	;   *
db 0F1h	;   *
db  40h	; @
db  50h	; P
db  9Ah	;   *
db  8Ah	;   *
db    1
db  61h	; a
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F0h	;   *
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db 0FAh	;   *
db  8Bh	;   *
db    7
db    5
db  1Ch
db    0
db  50h	; P
db  8Bh	;   *
db  46h	; F
db 0FEh	;   *
db  40h	; @
db  50h	; P
db 0B9h	;   *
db  3Fh	; ?
db 0A1h	;   *
db  51h	; Q
db  8Bh	;   *
db 0F0h	;   *
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db  0Ch
db  89h	;   *
db  76h	; v
db 0FEh	;   *
db  83h	;   *
db  46h	; F
db 0F8h	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db  83h	;   *
db  3Fh	; ?
db    0
db  74h	; t
db  24h	; $
db 0A0h	;   *
db  47h	; G
db    0
db  2Ah	; *
db 0E4h	;   *
db  3Bh	; ;
db 0C6h	;   *
db  74h	; t
db  1Bh
db 0F6h	;   *
db  46h	; F
db 0FEh	;   *
db    3
db  74h	; t
db    3
db 0E9h	;   *
db 0EEh	;   *
db 0FDh	;   *
;     ***************************************************************************
call	far ptr	4B5h:290h
call	far ptr	57Ch:1FEh
call	far ptr	4B5h:282h
jmp	near ptr unk_1BA52
;     ***************************************************************************
call	far ptr	4B5h:290h
call	far ptr	57Ch:1FEh
push	current_province
call	loc_1377C
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:290h
mov	byte ptr [bp-2], 0
mov	bl, [bp-2]
sub	bh, bh
mov	al, [bx+2B30h]
sub	ah, ah
inc	ax
push	ax
shl	bx, 1
push	word ptr [bx-5E6Ch]
mov	ax, 0A17Eh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
cmp	byte ptr [bp-2], 2
jnb	short loc_1BCD2
mov	ax, 0A192h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 3
jb	short loc_1BCA1
call	far ptr	3EFh:79Ah ; game_query_user_input_main
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	ax, 6
push	ax
mov	ax, 27h	; '''
push	ax
mov	cx, 277h
push	cx
push	ax
mov	ax, 128h
push	ax
call	far ptr	3EFh:70Ch
add	sp, 0Ah
sub	ax, ax
push	ax
mov	ax, 0F8h ; '  *'
push	ax
mov	ax, 2Ah	; '*'
push	ax
mov	ax, 28h	; '('
push	ax
mov	ax, 25h	; '%'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
call	far ptr	4B5h:290h
mov	word ptr [bp-4], 0
mov	word ptr [bp-2], 154h
cmp	word ptr [bp-4], 6
jnb	short near ptr loc_1BD7B+1
sub	ax, ax
push	ax
mov	ax, 27h	; '''
push	ax
push	word ptr [bp-2]
mov	ax, 8
push	ax
push	word ptr [bp-2]
call	far ptr	3EFh:70Ch
add	sp, 0Ah
mov	ax, 6
push	ax
mov	ax, 11Fh
push	ax
push	word ptr [bp-2]
mov	ax, 28h	; '('
push	ax
push	word ptr [bp-2]
call	far ptr	3EFh:70Ch
add	sp, 0Ah
mov	bx, [bp-4]
mov	al, [bx-5E66h]
sub	ah, ah
add	[bp-2],	ax
inc	word ptr [bp-4]
cmp	word ptr [bp-2], 257h
jb	short near ptr loc_1BD2B+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	far ptr	4B5h:244h
mov	ax, 90h	; '  *'
push	ax
call	far ptr	4B5h:33Eh
add	sp, 2
mov	ax, 7
push	ax
mov	ax, 20h	; ' '
push	ax
mov	ax, 2Ah	; '*'
push	ax
mov	ax, 8
push	ax
mov	ax, 25h	; '%'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 10h
push	ax
mov	ax, 26h	; '&'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 0A19Fh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
push	cs
call	near ptr loc_1BCE3+1
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ch
mov	al, 3
push	ax
push	word ptr [bp+6]
call	far ptr	59Dh:382h
add	sp, 4
or	al, al
jnz	short loc_1BDE9
jmp	loc_1BF19
;     ***************************************************************************
push	cs
call	loc_1BD80
mov	ax, 3
push	ax
call	far ptr	3EFh:484h
add	sp, 2
push	word ptr [bp+6]
call	far ptr	525h:4Ah
add	sp, 2
mov	bx, 0CEB2h
mov	[bp-4],	bx
mov	ax, [bx]
mov	[bp-6],	ax
mov	word ptr [bp-2], 0
mov	byte ptr [bp-0Ch], 0
mov	al, [bp-0Ch]
mov	cl, 0Ch
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
mov	cl, 3
shl	ax, cl
add	ax, 2Ch	; ','
push	ax
mov	ax, 26h	; '&'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, [bp-6]
add	ax, 1Ch
push	ax
push	word ptr [bp-6]
call	far ptr	542h:7Eh
add	sp, 2
cmp	ax, 1
sbb	ax, ax
and	al, 0FCh
add	ax, 7
push	ax
push	word ptr [bp-6]
call	far ptr	525h:84h
add	sp, 2
mov	bl, al
sub	bh, bh
shl	bx, 1
push	word ptr [bx-5DBEh]
mov	ax, 0A211h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
mov	bx, [bp-6]
mov	al, [bx+0Fh]
sub	ah, ah
push	ax
mov	ax, 0A224h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	bx, [bp-6]
mov	al, [bx+9]
sub	ah, ah
push	ax
mov	al, [bx+8]
push	ax
mov	al, [bx+7]
push	ax
mov	ax, 0A228h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
mov	bx, [bp-6]
push	word ptr [bx+12h]
mov	ax, 0A232h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
add	word ptr [bp-4], 2
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-6],	ax
or	ax, ax
jz	short near ptr loc_1BEDF+1
inc	byte ptr [bp-0Ch]
mov	al, [bp-0Ch]
mov	cl, 0Ch
sub	ah, ah
div	cl
or	ah, ah
jz	short loc_1BEDE
jmp	loc_1BE18
;     ***************************************************************************
jmp	short near ptr loc_1BEE4+1
;     ***************************************************************************
mov	word ptr [bp-2], 1
call	far ptr	4B5h:290h
cmp	word ptr [bp-2], 0
jnz	short near ptr loc_1BF0B+1
mov	ax, 0A236h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:9D6h
or	ax, ax
jz	short near ptr loc_1BF0F+2
push	cs
call	near ptr loc_1BCE3+1
jmp	loc_1BE18
;     ***************************************************************************
call	far ptr	57Ch:1FEh
sub	ax, ax
push	ax
call	far ptr	3EFh:484h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Q_1BF1E		proc far

var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_2], 0
jmp	short loc_1BF47
;     ***************************************************************************
nop
mov	al, byte ptr [bp+var_4]
dec	al
push	ax
call	far ptr	525h:76h
add	sp, 2
push	ax
push	cs
call	near ptr unk_1BDCE
add	sp, 2
mov	[bp+var_2], 1

loc_2BF47:				; CODE XREF: dseg:232F9  P		 /* DOS offset ---> 2360:7 */
call	far ptr	4B5h:290h
mov	ax, 41
push	ax
mov	ax, 1
push	ax
mov	ax, 0A24Ch
push	ax
call	far ptr	3EFh:9B2h ; Q_1BF1E
add	sp, 6
mov	[bp+var_4], ax
cmp	ax, 0FFFFh
jnz	short near ptr loc_1BF2A+2
cmp	[bp+var_2], 0
jz	short loc_1BF80
call	far ptr	4B5h:244h
mov	ax, 1
push	ax
push	current_province
call	far ptr	loc_139C6
mov	sp, bp
pop	bp
retf
Q_1BF1E		endp

;     ***************************************************************************
jmp	short near ptr loc_1BFC1+3
;     ***************************************************************************
ja	short near ptr loc_1BFA1+1
dec	ax
cmp	ax, 5
ja	short near ptr loc_1BFC1+3
shl	ax, 1
xchg	ax, bx
jmp	word ptr cs:[bx+876h]
;     ***************************************************************************
or	byte ptr [bx+si], 88h
or	[bp-6BF8h], cl
or	[bp+si-5FF8h], bl
or	byte ptr loc_178E8, cl
;     ***************************************************************************
db 0FFh

;     *************** S U B	R O U T	I N E     ***************************************


Q_1BFA6		proc far
jmp	short near ptr loc_1BFC1+3
;     ***************************************************************************
push	cs
call	loc_1BA36
jmp	short near ptr loc_1BFC1+3
;     ***************************************************************************
push	cs
call	near ptr loc_1B71C+4
jmp	short near ptr loc_1BFC1+3
;     ***************************************************************************
push	cs
call	loc_1BC92
jmp	short near ptr loc_1BFC1+3
;     ***************************************************************************
push	cs
call	loc_1B9C2
jmp	short near ptr loc_1BFC1+3
;     ***************************************************************************
push	cs
call	loc_1B94E
call	far ptr	4B5h:290h
mov	ax, 6
push	ax
mov	ax, 1
push	ax
mov	ax, 0A25Bh
push	ax
call	far ptr	3EFh:9B2h ; Q_1BFA6
add	sp, 6
cmp	ax, 0FFFFh
jnz	short loc_1BF86
retf
Q_1BFA6		endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_give_population_sub2 proc far	; DATA XREF: game_give_population_sub+1F  t
; s_1C06C+11  t

arg_0		= word ptr  6

push	bp
mov	bp, sp
cmp	[bp+arg_0], 0
jz	short loc_1C010
push	[bp+arg_0]
call	far ptr	542h:58h ; game_data_get_general_action
mov	sp, bp
or	ax, ax
jnz	short near ptr unk_1C00A
mov	bx, [bp+arg_0]
mov	ax, [bx]
mov	[bp+arg_0], ax
or	ax, ax
jnz	short loc_1BFED
jmp	short loc_1C010
;     ***************************************************************************
nop
mov	ax, [bp+arg_0]
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	bp
retf
game_give_population_sub2 endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_give_population_sub proc far	; DATA XREF: s_1C06C+1B  t
; game_ai_training+29  t	...

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2
mov	ax, word_1CA94
mov	word_1CEA6, ax
or	ax, ax
jnz	short near ptr unk_1C02C
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, word_1CEA6
push	word ptr [bx]
push	cs
call	game_give_population_sub2
add	sp, 2
mov	word_1CA94, ax
or	ax, ax
jnz	short loc_2C065
mov	bx, current_province
mov	ax, word_1CEA6
cmp	[bx+2],	ax
jz	short loc_2C065
mov	ax, [bx+2]
mov	[bp+var_2], ax
push	ax
call	far ptr	542h:58h ; game_data_get_general_action
add	sp, 2
or	ax, ax
jz	short loc_2C065
mov	ax, [bp+var_2]
mov	word_1CA94, ax

loc_2C065:				; DATA XREF: game_give_population_sub+2A  t		 /* DOS offset ---> 2372:5 */
; game_give_population_sub+36  t	...
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_give_population_sub endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


s_1C06C		proc far		; DATA XREF: s_1FC80+DA  t		 /* DOS offset ---> 2372:C */
mov	bx, current_province
mov	ax, [bx+2]
mov	bx, ax
cmp	word ptr [bx], 0
jz	short loc_1C083
push	word ptr [bx]
push	cs
call	game_give_population_sub2
add	sp, 2
mov	word_1CA94, ax
push	cs
call	game_give_population_sub
retf
s_1C06C		endp		 /* DOS offset ---> 2372:C */

;     ***************************************************************************
nop
call	loc_22379+1
retf
;     ***************************************************************************
push	di
push	si
mov	ax, 3
cwd
push	dx
push	ax
mov	bx, current_province
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/

loc_2C0A9:				; CODE XREF: dseg:28BF0  P dseg:28CB1  P ...		 /* DOS offset ---> 2376:9 */
push	current_province
mov	si, ax
mov	di, dx
call	far ptr	525h:122h
add	sp, 2
cmp	di, dx
jl	short near ptr unk_1C0D2
jg	short near ptr setup_game_view_other_wars_sub+1
cmp	si, ax
jbe	short near ptr unk_1C0D2
call	far ptr	unk_1E216
or	ax, ax
jz	short near ptr unk_1C0D2
mov	ax, 1
pop	si
pop	di
retf
;     ***************************************************************************
mov	al, 1Eh
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr setup_game_view_other_wars
call	a3p		; "  *3P  *\b"
pop	si
pop	di
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	si
pop	di
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	al, game_difficulty
mov	cx, ax
shl	al, 1
shl	al, 1
add	al, cl
shl	al, 1
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr unk_1C11F
mov	al, 2
push	ax
push	current_province
call	loc_103F9+1
add	sp, 4
push	cs
call	near ptr unk_1C06C
or	ax, ax
jz	short near ptr loc_1C12C+2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, 4
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	[bp-2],	al
mov	al, game_difficulty
shr	al, 1
add	al, [bp-2]
add	al, 2
mov	[bp-4],	al
cmp	al, [bp-2]
jbe	short near ptr loc_1C169+2
mov	bl, [bp-2]
and	bx, 3
shl	bx, 1
shl	bx, 1
call	dword ptr [bx-5D1Ah]
or	ax, ax
jnz	short loc_1C127
inc	byte ptr [bp-2]
mov	al, [bp-4]

loc_2C166:				; CODE XREF: dseg:27C1A  P		 /* DOS offset ---> 2382:6 */
cmp	[bp-2],	al
jb	short near ptr loc_1C14D+1
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	al, 14h
mul	game_difficulty
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1C197+3
mov	al, 3
push	ax
push	current_province
call	loc_103F9+1
add	sp, 4
push	cs
call	near ptr unk_1C06C
or	ax, ax
jz	short near ptr loc_1C1A6+4
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, 4
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	[bp-2],	al
mov	al, game_difficulty
add	al, [bp-2]
inc	al
mov	[bp-4],	al
cmp	al, [bp-2]
jbe	short loc_1C1E5
mov	bl, [bp-2]
and	bx, 3
shl	bx, 1
shl	bx, 1
call	dword ptr [bx-5D0Ah]
or	ax, ax
jnz	short near ptr loc_1C1A1+1
inc	byte ptr [bp-2]
mov	al, [bp-4]
cmp	[bp-2],	al
jb	short loc_1C1C8
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	al, 1Eh
mul	game_difficulty
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1C214
mov	al, 1
push	ax
push	current_province
call	loc_103F9+1
add	sp, 4
push	cs
call	near ptr unk_1C06C
or	ax, ax
jz	short near ptr loc_1C220+4
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, 5
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	[bp-2],	al
add	al, game_difficulty
inc	al
mov	[bp-4],	al
cmp	al, [bp-2]
jbe	short near ptr loc_1C265+1
mov	al, [bp-2]
mov	cl, 5
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
shl	ax, 1
shl	ax, 1
mov	bx, ax
call	dword ptr [bx-5CFAh]
or	ax, ax
jnz	short near ptr loc_1C219+3
inc	byte ptr [bp-2]
mov	al, [bp-4]
cmp	[bp-2],	al
jb	short near ptr loc_1C23E+2
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, current_province
mov	ax, [bx+2]
mov	bx, ax
cmp	byte ptr [bx+9], 50h ; 'P'
jb	short loc_1C28A
mov	al, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
inc	al
retf
;     ***************************************************************************
nop
sub	al, al
retf
;     ***************************************************************************
nop
push	current_ruler
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1C2AB+1
mov	bx, current_province
mov	al, [bx+12h]
and	al, 3
jz	short near ptr loc_1C2AB+1
dec	al
retf
;     ***************************************************************************
push	cs
call	loc_1C26C
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	byte ptr [bp-4], 0
mov	word ptr [bp-2], 0CB72h
mov	bx, [bp-2]
cmp	word ptr [bx], 0
jz	short loc_1C2CF
cmp	word ptr [bx+8], 1
jnz	short near ptr unk_1C2DE
add	word ptr [bp-2], 0Ah
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 4
jb	short loc_1C2C1
jmp	short near ptr loc_1C2E5+1
;     ***************************************************************************
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah

loc_2C2F2:				; CODE XREF: dseg:2ACAD  P dseg:2B887  P ...		 /* DOS offset ---> 239B:2 */
call	far ptr	542h:2
or	ax, ax
jz	short near ptr loc_1C31A+4
cmp	word_13574, 0
jnz	short near ptr loc_1C31A+4
mov	ax, 1
push	ax
push	current_province
call	far ptr	loc_139C6
add	sp, 4
push	current_province
call	far ptr	57Ch:1CAh
add	sp, 2
push	cs
call	near ptr unk_1C06C
or	ax, ax
jz	short near ptr loc_1C328+1
jmp	loc_1C432
;     ***************************************************************************
call	far ptr	loc_1CF0E
or	ax, ax
jz	short near ptr loc_1C334+1
jmp	near ptr loc_1C428+1
;     ***************************************************************************
mov	bx, current_province
mov	ax, word_13396
cmp	[bx+2],	ax
jnz	short loc_1C34D
call	loc_1D85D+1
or	ax, ax
jz	short loc_1C34D
jmp	near ptr loc_1C428+1
;     ***************************************************************************

loc_2C34D:				; CODE XREF: dseg:2AD61  P		 /* DOS offset ---> 23A0:D */
mov	word ptr unk_1CA9C, 0
push	cs
call	near ptr loc_1C28B+3
mov	[bp-4],	al
mov	word ptr [bp-8], 0
mov	byte ptr [bp-6], 0
cmp	byte ptr [bp-6], 5
jb	short loc_1C36C
jmp	near ptr loc_1C428+1
;     ***************************************************************************
cmp	word ptr [bp-8], 0
jnz	short loc_1C38A
mov	bx, current_province
cmp	byte ptr [bx+15h], 0FFh
jz	short loc_1C38A
push	cs
call	near ptr loc_1C08F+3
mov	[bp-2],	ax
mov	word ptr [bp-8], 1
jmp	short near ptr loc_1C3AB+1
;     ***************************************************************************
mov	bl, [bp-4]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
mov	al, [bp-6]
inc	byte ptr [bp-6]
sub	ah, ah
add	bx, ax
shl	bx, 1
shl	bx, 1
call	dword ptr [bx-5CE6h]
mov	[bp-2],	ax
test	byte_1339C, 1

loc_2C3B1:				; CODE XREF: dseg:27ED5  P dseg:2A3C9  P ...		 /* DOS offset ---> 23A7:1 */
jz	short near ptr loc_1C3EC+2
call	far ptr	57Ch:1E4h
call	far ptr	loc_12803+1
push	cs
call	near ptr loc_1C2B1+1
or	ax, ax
jnz	short near ptr loc_1C3D6+2
test	options_value, 8
jnz	short near ptr loc_1C3D6+2
call	loc_21414+4
call	far ptr	6A3h:4Ch
jmp	short near ptr loc_1C3DB+2
;     ***************************************************************************
call	far ptr	6A3h:52h
push	current_province
call	far ptr	57Ch:1CAh
add	sp, 2
and	byte_1339C, 0FEh
cmp	word ptr [bp-2], 0
jnz	short near ptr loc_1C428+1

loc_2C3F4:				; CODE XREF: dseg:2A79D  P dseg:2BCAA  P		 /* DOS offset ---> 23AB:4 */
push	current_province
call	far ptr	542h:148h
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1C428+1
push	current_province
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1C428+1
push	current_province
call	far ptr	525h:4Ah
add	sp, 2
cmp	ax, current_ruler
jnz	short near ptr loc_1C428+1
jmp	near ptr loc_1C362+1
;     ***************************************************************************
push	current_province
call	loc_103AF+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, word_13396
mov	al, [bx+9]
mov	[bp-2],	al
cmp	al, 50h	; 'P'
jnb	short near ptr loc_1C453+2
mov	cl, 3
sub	ah, ah
div	cl
add	al, 2

loc_2C452:				; CODE XREF: dseg:26C85  P dseg:2AC6B  P		 /* DOS offset ---> 23B1:2 */
mov	[bp-2],	al
mov	al, [bp-2]
push	ax
call	far ptr	57Ch:0DCh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	word ptr [bp-2], 0
push	word ptr [bp+6]
call	far ptr	59Dh:428h
add	sp, 2
mov	word ptr [bp-4], 0CA62h
jmp	short near ptr loc_1C4B5+2
;     ***************************************************************************
nop
push	ax
call	loc_1057F+1
add	sp, 2
or	ax, ax
jz	short loc_1C4B3
push	word ptr [bp-2]
push	word ptr [bp-6]
push	cs
call	near ptr loc_1C526+2
add	sp, 2
push	ax
call	far ptr	561h:19Ch
add	sp, 4
push	ax
mov	ax, 1C2h
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	[bp-2],	ax
add	word ptr [bp-4], 2
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-6],	ax
or	ax, ax
jnz	short loc_1C480
mov	ax, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	word ptr [bp+6]
call	far ptr	59Dh:428h
add	sp, 2
mov	byte ptr [bp-4], 0
mov	word ptr [bp-2], 0CA62h
jmp	short near ptr loc_1C513+2
;     ***************************************************************************
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short near ptr unk_1C4FA
or	byte ptr [bp-4], 1
jmp	short loc_1C511
;     ***************************************************************************
nop
push	current_province
push	word ptr [bp-6]
call	far ptr	542h:192h
add	sp, 4
or	ax, ax
jnz	short loc_1C511
or	byte ptr [bp-4], 2
add	word ptr [bp-2], 2
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-6],	ax
or	ax, ax
jnz	short near ptr loc_1C4E4+2
mov	al, [bp-4]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	[bp-6],	al
mov	bx, [bp+6]
mov	ax, [bx+2]
mov	[bp-2],	ax
mov	bx, ax
mov	ax, [bx+12h]
mov	cx, 46h	; 'F'
sub	dx, dx
div	cx
mov	[bp-4],	ax
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jz	short near ptr loc_1C5B4+3
mov	bx, ax
test	byte ptr [bx+3], 0F0h
jnz	short near ptr loc_1C592+2
test	byte ptr [bx+2], 2
jz	short loc_1C574
mov	al, [bp-6]
cmp	[bx+0Dh], al
jz	short near ptr loc_1C592+2
mov	al, [bx+7]
sub	ah, ah
mov	cl, [bx+0Bh]
sub	ch, ch
add	ax, cx
cmp	ax, 69h	; 'i'
jl	short near ptr loc_1C592+2
mov	ax, [bx+12h]
mov	cx, 5Ah	; 'Z'
sub	dx, dx
div	cx
add	[bp-4],	ax
jmp	short near ptr loc_1C5AA+1
;     ***************************************************************************
mov	ax, [bx+12h]
mov	cx, 96h	; '  *'
sub	dx, dx
div	cx
push	ax
lea	ax, [bp-4]
push	ax
call	far ptr	49Ch:0AAh
add	sp, 4
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_1C55E
mov	ax, [bp-4]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	si
push	word_1CEA4
call	far ptr	525h:4Ah
add	sp, 2
mov	bx, ax
mov	ax, [bx]
mov	[bp-4],	ax
mov	bx, word_1CEA4
mov	ax, [bx+2]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_1C5E7+2
jmp	loc_1C66C
;     ***************************************************************************
push	ax
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jnz	short loc_1C656
mov	bx, [bp-4]
mov	si, [bp-2]
mov	ax, [si+10h]
test	[bx+10h], ax
jnz	short loc_1C656
mov	bx, si
mov	al, [bx+0Bh]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short loc_1C656
mov	bx, [bp-2]
test	byte ptr [bx+2], 2
jnz	short loc_1C656
push	word ptr [bp-4]
push	bx
call	far ptr	60Dh:630h
add	sp, 4
add	al, 50h	; 'P'
mov	bx, [bp-2]
cmp	al, [bx+0Bh]
ja	short loc_1C664
mov	bx, word_1CEA4
mov	ax, [bp-2]
cmp	[bx+2],	ax
jnz	short loc_1C656
mov	al, 64h	; 'd'
mov	bx, [bp-2]
sub	al, [bx+0Bh]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short loc_1C664
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_1C5E7+2
jmp	short loc_1C66C
;     ***************************************************************************
mov	ax, [bp-2]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
sub	ax, ax
push	ax
call	far ptr	59Dh:320h
add	sp, 2
mov	[bp-4],	al
or	al, al
jz	short near ptr loc_1C6E3+1
mov	byte ptr [bp-8], 0
cmp	game_difficulty, 0
jz	short near ptr loc_1C6E3+1
mov	al, [bp-4]
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bl, al
sub	bh, bh
shl	bx, 1
mov	bx, [bx-3508h]
mov	ax, [bx+2]
mov	word_1CEA4, ax
or	ax, ax
jz	short near ptr loc_1C6D7+2
push	ax
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1C6CB+1
push	cs
call	near ptr loc_1C5BC+2
or	ax, ax
jnz	short near ptr loc_1C6E5+1
mov	bx, word_1CEA4
mov	ax, [bx]
mov	word_1CEA4, ax
or	ax, ax
jnz	short near ptr loc_1C6B5+2
inc	byte ptr [bp-8]
mov	al, game_difficulty
cmp	[bp-8],	al
jb	short loc_1C697
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	word ptr [bp-8], 0
mov	word ptr [bp-0Ah], 0
push	current_province
call	far ptr	59Dh:428h
add	sp, 2
mov	word ptr [bp-6], 0CA62h
jmp	short loc_1C783
;     ***************************************************************************
nop
push	ax
call	loc_1057F+1
add	sp, 2
or	ax, ax
jz	short loc_1C77F
push	word ptr [bp-4]
call	far ptr	525h:4Ah
add	sp, 2
push	ax
push	current_ruler
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jnz	short loc_1C77F
push	word ptr [bp-4]
push	cs
call	near ptr loc_1C526+2
add	sp, 2
mov	[bp-2],	ax
push	word ptr [bp-4]
call	far ptr	525h:4Ah
add	sp, 2
push	ax
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_1C76E
mov	ax, 96h	; '  *'
push	ax
push	word ptr [bp-2]
call	far ptr	49Ch:32h
add	sp, 4
mov	[bp-2],	ax
mov	ax, [bp-2]
cmp	[bp-8],	ax
jnb	short loc_1C77F
mov	[bp-8],	ax
mov	ax, [bp-4]
mov	[bp-0Ah], ax
add	word ptr [bp-6], 2
mov	bx, [bp-6]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr loc_1C790+2
jmp	loc_1C70E
;     ***************************************************************************
push	current_province
call	far ptr	loc_1290E
add	sp, 2
cmp	ax, [bp-8]
jbe	short near ptr loc_1C7A8+2
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, [bp-0Ah]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
push	si
push	word ptr [bp+6]
call	far ptr	59Dh:428h
add	sp, 2
mov	word ptr [bp-8], 0CA62h
mov	bx, [bp-8]
mov	ax, [bx]
mov	[bp-6],	ax
or	ax, ax
jnz	short near ptr loc_1C7D7+1
jmp	near ptr unk_1C86A
;     ***************************************************************************
push	ax
call	loc_1057F+1
add	sp, 2
or	ax, ax
jz	short near ptr unk_1C859
push	word ptr [bp-6]
push	word ptr [bp+6]
call	far ptr	542h:192h
add	sp, 4
or	ax, ax
jnz	short near ptr unk_1C859
push	word ptr [bp-6]
call	far ptr	525h:4Ah
add	sp, 2
mov	[bp-2],	ax
push	ax
push	current_ruler
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jnz	short near ptr unk_1C862
push	current_ruler
call	far ptr	525h:6
add	sp, 2
sub	ah, ah
mov	si, ax
mov	bx, [bp-2]
mov	al, [bx+si+0Eh]
mov	[bp-4],	al
push	bx
call	far ptr	525h:6
add	sp, 2
mov	bx, current_ruler
cmp	al, [bx+9]
jnz	short near ptr loc_1C842+2
shl	byte ptr [bp-4], 1
mov	al, 9
sub	al, game_difficulty
mov	cx, ax
shl	al, 1
shl	al, 1
add	al, cl
shl	al, 1
cmp	al, [bp-4]
ja	short near ptr unk_1C862
add	word ptr [bp-8], 2
jmp	near ptr loc_1C7C8+1
;     ***************************************************************************
nop
nop
mov	ax, [bp-2]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	ax, current_ruler
add	ax, 0Eh
mov	[bp-8],	ax
sub	ax, ax
push	ax
call	far ptr	59Dh:320h
add	sp, 2
mov	word ptr [bp-4], 0CAF8h
jmp	near ptr loc_1C932+2
;     ***************************************************************************
nop
push	ax
call	far ptr	525h:6
add	sp, 2
mov	bl, al
sub	bh, bh
mov	si, [bp-8]
mov	al, [bx+si]
mov	[bp-2],	al
mov	al, 12h
sub	al, game_difficulty
mov	cx, ax
shl	al, 1
shl	al, 1
add	al, cl
cmp	al, [bp-2]
jnb	short loc_1C8FD
mov	bx, current_ruler
cmp	byte ptr [bx+9], 0FFh
jnz	short loc_1C8FD
push	word ptr [bp-6]
push	bx
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jz	short near ptr loc_1C8E9+2
mov	ax, 1
push	ax
push	word ptr [bp-6]
push	current_ruler
call	loc_10914
add	sp, 6
push	word ptr [bp-6]
call	far ptr	525h:6
add	sp, 2
mov	bx, current_ruler
mov	[bx+9],	al
mov	al, 7
sub	al, game_difficulty
mov	cx, ax
shl	al, 1
shl	al, 1
add	al, cl
cmp	al, [bp-2]
jbe	short near ptr loc_1C92F+1
push	word ptr [bp-6]
call	far ptr	525h:6
add	sp, 2
mov	bx, current_ruler
cmp	al, [bx+9]
jnz	short near ptr loc_1C92F+1
push	word ptr [bp-6]
push	bx
call	far ptr	loc_10A62+2
add	sp, 4
add	word ptr [bp-4], 2
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-6],	ax
or	ax, ax
jz	short near ptr loc_1C942+1
jmp	loc_1C896
;     ***************************************************************************
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	bx, current_province
cmp	word ptr [bx+8], 7D0h
jnb	short loc_1C95D
jmp	loc_1CA64
;     ***************************************************************************
mov	al, 55h	; 'U'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1C96F
jmp	loc_1CA64
;     ***************************************************************************
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	[bp-6],	al
sub	ax, ax
push	ax
call	far ptr	59Dh:320h
add	sp, 2
mov	word ptr [bp-4], 0CAF8h
jmp	short loc_1C9DF
;     ***************************************************************************
push	current_ruler
push	ax
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jz	short loc_1C9DB
push	word ptr [bp-2]
call	far ptr	542h:0DAh
add	sp, 2
or	ax, ax
jz	short loc_1C9DB
mov	bx, [bp-2]
mov	si, current_ruler
mov	ax, [si+0Ch]
cmp	[bx+0Ch], ax
jb	short loc_1C9DB
mov	al, 29h	; ')'
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 0Ah
mov	si, [bp-6]
and	si, 0FFh
mov	bx, [bp-2]
cmp	[bx+si+0Eh], al
ja	short loc_1C9EB
add	word ptr [bp-4], 2
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_1C98F+1
cmp	word ptr [bp-2], 0
jz	short loc_1CA64
mov	byte_1CE9C, 3
mov	bx, current_province
mov	ax, [bx+8]
sub	ax, 64h	; 'd'
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 64h	; 'd'
push	ax
mov	ax, 3E8h
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	word_1CA96, ax
sub	ax, ax
mov	word_1CA8A, ax
mov	word_1CA88, ax
mov	byte_1CEA0, 0
push	word_1CEA6
call	far ptr	59Dh:700h
add	sp, 2
mov	ax, word_1CEA6
mov	word_1CE9E, ax
mov	bx, [bp-2]
mov	ax, [bx+2]
mov	word_1CEA4, ax
call	loc_12398
call	loc_105C9+1
or	ax, ax
jz	short loc_1CA5A
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	loc_1C014
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, current_ruler
cmp	byte ptr [bx+8], 0FFh
jnz	short near ptr word_1CA9A
push	cs
call	near ptr loc_1C6E8+2
or	ax, ax
jz	short near ptr word_1CA9A
push	ax
call	far ptr	525h:4Ah
add	sp, 2
push	ax
call	far ptr	525h:6
mov	bx, current_ruler
mov	[bx+8],	al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, 4Bh	; 'K'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1CAB0
jmp	loc_1CB50
;     ***************************************************************************
push	current_province
push	cs
call	near ptr loc_1C4C9+1
add	sp, 2
test	al, 2
jz	short near ptr loc_1CACB+2
mov	bx, current_province
cmp	word ptr [bx+8], 7D0h
jnb	short near ptr loc_1CACB+2
jmp	loc_1CB50
;     ***************************************************************************
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	525h:158h
add	sp, 2
mov	cl, 0C8h ; '  *'
mul	cl
mov	bx, current_province
cmp	ax, [bx+8]
ja	short loc_1CB50
mov	ax, 14h
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 14h
push	ax
push	word_1CEA4
call	far ptr	loc_11114+2
add	sp, 2
push	ax
call	far ptr	49Ch:32h
add	sp, 4
mov	word_1CA96, ax
mov	ax, 64h	; 'd'
cwd
push	dx
push	ax
push	word_1CEA4
call	far ptr	loc_11134
add	sp, 2
push	dx
push	ax
mov	ax, 14h
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 14h
sub	dx, dx
push	dx
push	ax
call	far ptr	0:38B2h
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	word_1CA88, ax
mov	word_1CA8A, dx
mov	ax, 1
retf
;     ***************************************************************************
nop
sub	ax, ax
retf
;     ***************************************************************************
nop
push	di
push	si
mov	bx, current_province
cmp	byte ptr [bx+14h], 0FFh
jz	short near ptr loc_1CBAF+3
mov	al, [bx+14h]
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	word_1CEA4, ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_1CBA6
push	word_1CEA4
push	current_province
call	far ptr	542h:192h
add	sp, 4
or	ax, ax
jz	short loc_1CBA6
push	word_1CEA4
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_1CBA3
jmp	loc_1CCA4
;     ***************************************************************************
jmp	loc_1CCAC
;     ***************************************************************************
mov	bx, current_province
mov	byte ptr [bx+14h], 0FFh
jmp	loc_1CCAC
;     ***************************************************************************
nop
mov	bx, current_ruler
mov	ax, [bx+2]
mov	word_1CEA4, ax
or	ax, ax
jnz	short near ptr loc_1CBBF+4
jmp	loc_1CCAC
;     ***************************************************************************
mov	ax, current_province
cmp	word_1CEA4, ax
jnz	short near ptr loc_1CBCD+2
jmp	near ptr loc_1CC8F+2
;     ***************************************************************************
push	word_1CEA4
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_1CC2C
mov	bx, word_1CEA4
test	byte ptr [bx+13h], 8
jnz	short near ptr loc_1CBEB+1
jmp	near ptr loc_1CC8F+2
;     ***************************************************************************
mov	word_1CA96, 0
mov	ax, 3
cwd
push	dx
push	ax
mov	bx, current_province
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	word_1CA88, ax
mov	word_1CA8A, dx
mov	al, 1Eh
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1CC21+4
mov	bx, word_1CEA4
and	byte ptr [bx+13h], 0F7h
mov	ax, 1
pop	si
pop	di
retf
;     ***************************************************************************
nop
mov	bx, word_1CEA4
push	word ptr [bx+2]
call	far ptr	525h:158h
add	sp, 2
mov	cl, 96h	; '  *'
mul	cl
mov	bx, word_1CEA4
cmp	ax, [bx+8]
ja	short near ptr unk_1CC73
mov	ax, 2
cwd
push	dx
push	ax
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
push	word_1CEA4
mov	si, ax
mov	di, dx
call	far ptr	525h:122h
add	sp, 2
cmp	di, dx
jg	short near ptr loc_1CC8F+2
jl	short near ptr unk_1CC73
cmp	si, ax
jnb	short near ptr loc_1CC8F+2
push	word_1CEA4
push	cs
call	near ptr loc_1C4C9+1
add	sp, 2
or	al, al
jnz	short loc_1CCA4
mov	al, 55h	; 'U'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1CCA4
mov	bx, word_1CEA4
mov	ax, [bx]
mov	word_1CEA4, ax
or	ax, ax
jz	short near ptr loc_1CC9F+2
jmp	near ptr loc_1CBBF+4
;     ***************************************************************************
jmp	short loc_1CCAC
;     ***************************************************************************
nop
push	cs
call	near ptr word_1CA9E
pop	si
pop	di
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	si
pop	di
retf
;     ***************************************************************************
nop
push	cs
call	loc_1CB54
or	ax, ax
jz	short loc_1CD08
push	word_1CEA6
call	far ptr	59Dh:700h
add	sp, 2
mov	byte_1CE9C, 0Ch
mov	ax, word_1CEA6
mov	word_1CE9E, ax
push	current_province
call	s_1172
add	sp, 2
call	loc_12398
cmp	byte_1CA86, 3
jnz	short loc_1CCF5
push	current_province
call	unk_1118E
add	sp, 2
call	loc_105C9+1
or	ax, ax
jz	short near ptr loc_1CD00+2
mov	ax, 1
retf
;     ***************************************************************************
call	loc_1C014
retf
;     ***************************************************************************
sub	ax, ax
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
push	current_province
call	far ptr	59Dh:428h
add	sp, 2
mov	word ptr [bp-4], 0CA62h
jmp	short near ptr loc_1CD72+2
;     ***************************************************************************
nop
push	ax
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1CD6C+4
push	current_province
push	word ptr [bp-2]
call	far ptr	542h:192h
add	sp, 4
or	ax, ax
jz	short near ptr loc_1CD54+2
mov	bx, [bp-2]
test	byte ptr [bx+12h], 20h
jz	short near ptr loc_1CD6C+4
mov	ax, bx
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp-2]
cmp	al, [bx+11h]
jnz	short near ptr loc_1CD6C+4
test	byte ptr [bx+12h], 40h
jnz	short loc_1CD4F
add	word ptr [bp-4], 2
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_1CD25+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
call	loc_105B9+1
or	ax, ax
jnz	short locret_1CD96
jmp	near ptr loc_1CE75+1
;     ***************************************************************************
mov	ax, 0C8h ; '  *'
push	ax
push	current_province
call	far ptr	loc_1290E
add	sp, 2
push	ax
call	far ptr	561h:19Ch
add	sp, 4
mov	[bp-4],	ax
mov	bx, word_13396
mov	al, [bx+8]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
add	ax, 190h
sub	dx, dx
push	dx
push	ax
mov	bx, current_province
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	[bp-6],	ax
cmp	ax, [bp-4]
jb	short loc_1CDE2
jmp	near ptr loc_1CE75+1
;     ***************************************************************************
mov	bx, current_province
mov	al, [bx+1Bh]
sub	ah, ah
push	ax
mov	ax, 3Ch	; '<'
push	ax
push	word ptr [bx+8]
call	far ptr	49Ch:32h
add	sp, 4
push	ax
call	far ptr	49Ch:32h
add	sp, 4
push	ax
mov	ax, 64h	; 'd'
cwd
push	dx
push	ax
mov	ax, 0C6C0h
mov	dx, 2Dh	; '-'
mov	bx, current_province
sub	ax, [bx+0Ah]
sbb	dx, [bx+0Ch]
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
push	ax
mov	ax, [bp-4]
sub	ax, [bp-6]
push	ax
call	far ptr	561h:18Ah
add	sp, 4
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	[bp-2],	ax
mov	cx, 5
mov	dx, ax
mov	ax, [bp-4]
mov	bx, dx
sub	dx, dx
div	cx
cmp	bx, ax
jbe	short near ptr loc_1CE75+1
push	word_1CEA6
call	far ptr	59Dh:700h
add	sp, 2
mov	ax, 64h	; 'd'
mul	word ptr [bp-2]
push	dx
push	ax
call	loc_1065F+1
add	sp, 4
call	loc_1C014
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, current_province
cmp	byte ptr [bx+15h], 0FFh
jz	short near ptr loc_1CF06+2
mov	al, [bx+15h]
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	[bp-2],	ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short near ptr word_1CEB0
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	current_province
push	word ptr [bp-2]
call	far ptr	542h:192h
add	sp, 4
or	ax, ax
jz	short near ptr loc_1CEDD+1
push	word ptr [bp-2]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short near ptr word_1CEA8
mov	bx, [bp-2]
test	byte ptr [bx+12h], 20h
jnz	short near ptr loc_1CF06+2
jmp	short near ptr word_1CEA8
;     ***************************************************************************
nop
push	word ptr [bp-2]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1CF06+2
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp-2]
cmp	al, [bx+11h]
jnz	short near ptr word_1CEA8
test	byte ptr [bx+12h], 40h
jmp	short near ptr loc_1CED7+2
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	cs
call	loc_1CE7C
or	ax, ax
jz	short loc_1CF1E
mov	bx, current_province
mov	byte ptr [bx+15h], 0FFh
push	cs
call	loc_1CD0C
or	ax, ax
jz	short near ptr loc_1CF35+1
push	ax
call	far ptr	525h:64h
add	sp, 2
mov	bx, current_province
mov	[bx+15h], al
push	cs
call	near ptr aTU+1
or	ax, ax
jnz	short locret_1CF84
push	cs
call	loc_1CCB2
or	ax, ax
jnz	short locret_1CF84
push	cs
call	near ptr loc_1C947+1
or	ax, ax
jnz	short locret_1CF84
push	cs
call	loc_1CA6C
push	current_ruler
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short loc_1CF81
mov	al, 19h
mul	game_difficulty
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1CF81
push	current_province
call	far ptr	60Dh:54Ch
add	sp, 2
sub	ax, ax
retf
;     ***************************************************************************
mov	ax, 1
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	[bp-4],	al
mov	bx, word_1CEA4
mov	ax, [bx+2]
or	ax, ax
jz	short loc_1CFCC
mov	bx, ax
test	byte ptr [bx+2], 2
jz	short near ptr loc_1CFBC+2
mov	al, [bp-4]
cmp	[bx+0Dh], al
jnz	short near ptr loc_1CFBC+2
test	byte ptr [bx+2], 4
jz	short near ptr loc_1CFC4+2
mov	ax, [bx]
or	ax, ax
jnz	short near ptr loc_1CFA7+1
jmp	short loc_1CFCC
;     ***************************************************************************
mov	ax, bx
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	word_1CEA4, 2DC4h
mov	byte ptr [bp-2], 0
push	word_1CEA4
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short near ptr a3pA ; "3P    **"
push	cs
call	near ptr loc_1CF86+2
mov	word_1CE9A, ax
or	ax, ax
jnz	short loc_1D00B
add	word_1CEA4, 23h	; '#'
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 29h ; ')'
jb	short loc_1CFE2
cmp	word_1CE9A, 0
jnz	short loc_1D018
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	byte_1CE9C, 8
mov	ax, word_1CEA6
mov	word_1CE9E, ax
mov	bx, word_1CE9A
test	byte ptr [bx+2], 2
jz	short near ptr loc_1D048+2
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	bx, word_1CE9A
cmp	al, [bx+0Dh]
jnz	short near ptr loc_1D048+2
mov	byte_1CEA0, 0
jmp	short near ptr loc_1D04D+2
;     ***************************************************************************
nop
mov	byte_1CEA0, 1
call	loc_12398
cmp	byte_1CA86, 1
ja	short near ptr loc_1D068+2
cmp	byte_1CEA0, 0
jz	short near ptr loc_1D068+2
mov	bx, word_1CE9A
and	byte ptr [bx+2], 0FDh
call	loc_105C9+1
or	ax, ax
jz	short near ptr s_D076+4
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	loc_1C014
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
call	loc_1C672+2
mov	word_1CE9A, ax
or	ax, ax
jnz	short near ptr loc_1D09B+1
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word_1CEA6
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1D0C4+2
mov	bx, word_1CEA6
mov	al, [bx+5]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1D0C4+2
mov	byte ptr [bp-2], 0
jmp	short loc_1D11C
;     ***************************************************************************
mov	bx, current_province
cmp	byte ptr [bx+19h], 0

loc_2D0CE:				; CODE XREF: dseg:228C2  P		 /* DOS offset ---> 2478:E */
jz	short loc_1D0EA
mov	bx, word_1CE9A
mov	al, [bx+5]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1D0EA
mov	byte ptr [bp-2], 1
jmp	short loc_1D11C
;     ***************************************************************************
mov	bx, current_province
cmp	word ptr [bx+8], 500
jbe	short loc_1D118
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1D118
mov	byte ptr [bp-2], 2
mov	word_1CA96, 100
sub	ax, ax
mov	word_1CA8A, ax
mov	word_1CA88, ax
jmp	short loc_1D11C
;     ***************************************************************************
mov	byte ptr [bp-2], 3
mov	al, [bp-2]
push	ax
push	word_1CEA6
push	word_1CE9A
call	far ptr	unk_12EA8
add	sp, 6
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
mov	[bp-4],	ax
mov	bx, current_ruler
cmp	word ptr [bx+4], 0
jz	short near ptr loc_1D15A+2
or	ax, ax
jnz	short near ptr loc_1D15A+2
mov	al, 80
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1D15A+2
jmp	loc_1D096
;     ***************************************************************************
push	word_1CEA6
call	far ptr	59Dh:700h
add	sp, 2
mov	byte_1CE9C, 0Ah
mov	ax, word_1CEA6
mov	word_1CE9E, ax
mov	al, [bp-2]
mov	byte ptr loc_1CBA2, al
cmp	word ptr [bp-4], 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
push	word_1CE9A
call	far ptr	525h:30h
add	sp, 2
mov	[bp-6],	ax
call	loc_12398
cmp	byte_1CA86, 3
jnz	short loc_1D1A2
jmp	near ptr loc_1D22C+1
;     ***************************************************************************
cmp	byte_1CA86, 2
jz	short near ptr loc_1D1C7+2
cmp	byte ptr loc_1CBA2, 1
jnz	short near ptr loc_1D1B9+1
mov	bx, current_province
dec	byte ptr [bx+19h]
jmp	short near ptr loc_1D1C7+2
;     ***************************************************************************
nop
cmp	byte ptr loc_1CBA2, 2
jnz	short near ptr loc_1D1C7+2
mov	bx, current_province
sub	word ptr [bx+8], 100
cmp	byte_1CA86, 2
jnb	short near ptr loc_1D22C+1
cmp	byte_1CEA0, 0
jnz	short near ptr loc_1D22C+1
call	far ptr	4B5h:290h
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, word_1CE9A
add	ax, 1Ch
push	ax
mov	bx, [bp-6]
mov	ax, [bx]
add	ax, 1Ch
push	ax
push	bx
call	far ptr	542h:0BAh
add	sp, 2
cmp	ax, 1
sbb	bx, bx
neg	bx
shl	bx, 1
push	word ptr [bx-5C36h]
call	far ptr	3EFh:6E8h
add	sp, 8
push	word ptr [bp-6]
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_1D228
call	far ptr	57Ch:126h
jmp	short near ptr loc_1D22C+1
;     ***************************************************************************
nop
call	far ptr	57Ch:15Eh
call	loc_105C9+1
or	ax, ax
jz	short near ptr loc_1D23C+2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
call	loc_1C014
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
push	si
push	current_ruler
push	word ptr [bp+6]
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jz	short loc_1D272
mov	bx, current_ruler
mov	byte ptr [bx+8], 0FFh
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word ptr [bp+6]
call	far ptr	542h:0DAh
add	sp, 2
or	ax, ax
jz	short loc_1D26A
push	current_ruler
call	far ptr	525h:6
add	sp, 2
sub	ah, ah
mov	si, ax
mov	bx, [bp+6]
mov	al, [bx+si+0Eh]
mov	[bp-2],	al
push	bx
call	far ptr	525h:6
add	sp, 2
mov	bx, current_ruler
cmp	al, [bx+9]
jz	short loc_1D26A
cmp	word ptr [bp+8], 0
jz	short loc_1D2F8
cmp	byte ptr [bp-2], 46h ; 'F'
jbe	short loc_1D2F8
cmp	byte ptr [bx+21h], 0FFh
jnz	short loc_1D2F8
test	byte ptr [bx+7], 2
jnz	short loc_1D2F8
mov	bx, [bp+6]
mov	ax, [bx+0Ch]
shr	ax, 1
mov	bx, current_ruler
cmp	ax, [bx+0Ch]
jbe	short loc_1D2F8
mov	al, 1Eh
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1D2F8
mov	byte_1CE9C, 2
push	word_1CEA6
push	word ptr [bp+6]
call	far ptr	loc_12B96+2
jmp	short loc_1D36B
;     ***************************************************************************
nop
cmp	byte ptr [bp-2], 3Ch ; '<'
jbe	short loc_1D35A
mov	bx, current_province
cmp	word ptr [bx+8], 12Ch
jbe	short loc_1D35A
mov	al, 1Eh
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1D35A
mov	byte_1CE9C, 3
mov	bx, current_province
mov	ax, [bx+8]
sub	ax, 0C8h ; '  *'
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 64h	; 'd'
push	ax
mov	ax, 3E8h
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	word_1CA96, ax
mov	bx, current_province
sub	[bx+8],	ax
sub	ax, ax
mov	word_1CA8A, ax
mov	word_1CA88, ax
mov	byte_1CEA0, 0
jmp	short loc_1D381
;     ***************************************************************************
nop
mov	byte_1CE9C, 0
push	word_1CEA6
push	word ptr [bp+6]
call	far ptr	unk_12CFC
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
cmp	ax, 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
push	word_1CEA6
call	far ptr	59Dh:700h
add	sp, 2
mov	ax, word_1CEA6
mov	word_1CE9E, ax
mov	bx, [bp+6]
mov	ax, [bx+2]
mov	word_1CEA4, ax
call	loc_12398
cmp	byte_1CE9C, 3
jnz	short near ptr loc_1D3D3+2
cmp	byte_1CA86, 2
jz	short loc_1D3CB
cmp	byte_1CA86, 3
jz	short loc_1D3CB
cmp	byte_1CA86, 2
jnb	short near ptr loc_1D3D3+2
cmp	byte_1CEA0, 1
jz	short loc_1D3CB
cmp	byte_1CEA0, 3
jnz	short near ptr loc_1D3D3+2
mov	ax, word_1CA96
mov	bx, current_province
add	[bx+8],	ax
call	loc_105C9+1
or	ax, ax
jz	short loc_1D3E6
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	loc_1C014
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	word ptr [bp+6]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_1D40C
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, [bp+6]
mov	word_1CEA4, ax
push	ax
call	far ptr	525h:4Ah
add	sp, 2
mov	[bp-4],	ax
call	loc_1C5BC+2
mov	word_1CE9A, ax
or	ax, ax
jz	short near ptr loc_1D403+2
mov	al, 14h
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1D448
call	loc_20216
call	unk_1C06C
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	current_ruler
push	word ptr [bp-4]
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jz	short loc_1D46A
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1D403+2
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1D48E+2
mov	byte_1CE9C, 9
push	word_1CEA6
push	word_1CE9A
push	word ptr [bp-4]
call	far ptr	loc_12A2E
jmp	short near ptr unk_1D4D6
;     ***************************************************************************
mov	bx, word_1CEA4
push	word ptr [bx+2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1D4B9+1
mov	byte_1CE9C, 0Bh
push	word_1CEA6
push	word_1CE9A
push	word ptr [bp-4]
call	far ptr	loc_12993+1
jmp	short near ptr unk_1D4D6
;     ***************************************************************************
mov	byte_1CE9C, 7
mov	bx, word_1CEA4
mov	ax, [bx+2]
mov	word_1CE9A, ax
push	word_1CEA6
push	ax
push	word ptr [bp-4]
call	far ptr	loc_12AD0
add	sp, 6
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
mov	[bp-2],	ax
push	word_1CEA6
call	far ptr	59Dh:700h
add	sp, 2
mov	ax, word_1CEA6
mov	word_1CE9E, ax
cmp	word ptr [bp-2], 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
call	loc_12398
call	loc_105C9+1
or	ax, ax
jz	short near ptr loc_1D515+3
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
call	loc_1C014
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
mov	bx, current_ruler
cmp	byte ptr [bx+9], 0FFh
jnz	short near ptr loc_1D534+1
jmp	near ptr loc_1D5BA+2
;     ***************************************************************************
mov	al, 29h	; ')'
mul	byte ptr [bx+9]
add	ax, 2B34h
mov	bx, ax
mov	ax, [bx+2]
mov	[bp-6],	ax
or	ax, ax
jz	short near ptr loc_1D5BA+2
push	ax
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_1D5A0
push	word ptr [bp-6]
call	far ptr	59Dh:428h
add	sp, 2
mov	word ptr [bp-4], 0CA62h
jmp	short near ptr unk_1D58E
;     ***************************************************************************
nop
nop
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr unk_1D58A
push	current_province
push	word ptr [bp-8]
call	far ptr	542h:192h
add	sp, 4
or	ax, ax
jnz	short loc_1D59A
add	word ptr [bp-4], 2
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-8],	ax
or	ax, ax
jnz	short near ptr unk_1D56A
cmp	word ptr [bp-8], 0
jnz	short loc_1D5AE
mov	bx, [bp-6]
mov	ax, [bx]
mov	[bp-6],	ax
or	ax, ax
jnz	short loc_1D549
jmp	short near ptr loc_1D5BA+2
;     ***************************************************************************
push	word ptr [bp-6]
push	cs
call	near ptr loc_1D3EE+2
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
call	far ptr	loc_105E6
mov	bx, current_ruler
cmp	byte ptr [bx+1Eh], 0FFh
jz	short loc_1D5DA
jmp	loc_1D72A
;     ***************************************************************************
mov	ax, [bx+2]
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr loc_1D63A+2
push	ax
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_1D630
mov	bx, [bp-4]
cmp	byte ptr [bx+15h], 0FFh
jz	short loc_1D630
mov	al, [bx+15h]
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	[bp-8],	ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1D626+3
push	word ptr [bp-8]
push	current_province
call	far ptr	542h:192h
add	sp, 4
or	ax, ax
jz	short near ptr loc_1D63A+2
mov	bx, [bp-4]
mov	byte ptr [bx+15h], 0FFh
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jnz	short near ptr loc_1D5E1+3
cmp	word ptr [bp-4], 0
jnz	short loc_1D645
jmp	loc_1D72A
;     ***************************************************************************
push	word ptr [bp-8]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1D656+1
jmp	loc_1D72A
;     ***************************************************************************
push	word ptr [bp-8]
call	far ptr	loc_1C7B2
add	sp, 2
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_1D66C
jmp	near ptr unk_1D71C
;     ***************************************************************************
mov	al, 1Eh
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1D67E
jmp	near ptr unk_1D71C
;     ***************************************************************************
push	word ptr [bp-2]
call	far ptr	542h:0DAh
add	sp, 2
or	ax, ax
jz	short near ptr unk_1D70A
sub	ax, ax
push	ax
push	word ptr [bp-2]
push	cs
call	loc_1D248
add	sp, 4
or	ax, ax
jnz	short near ptr unk_1D70A
push	current_ruler
push	word ptr [bp-2]
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jz	short loc_1D72A
mov	ax, [bp-8]
mov	word_1CA9A, ax
push	word_1CEA6
call	far ptr	59Dh:700h
add	sp, 2
mov	byte_1CE9C, 1
mov	ax, word_1CEA6
mov	word_1CE9E, ax
mov	bx, [bp-2]
mov	cx, [bx+2]
mov	word_1CEA4, cx
mov	cx, [bp-8]

loc_2D6DB:				; CODE XREF: dseg:292C5  P dseg:2B5CD  P		 /* DOS offset ---> 24D9:B */
mov	word_1CEAC, cx
push	ax
push	bx
call	far ptr	loc_12CB2
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
cmp	ax, 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
call	loc_12398
call	loc_105C9+1
or	ax, ax
jz	short near ptr unk_1D712
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
call	loc_1C014
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word ptr [bp-8]
push	cs
call	near ptr loc_1D3EE+2
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, current_ruler
mov	al, [bx+9]
cmp	[bx+8],	al
jz	short near ptr unk_1D752
mov	ax, 1
push	ax
mov	al, 29h	; ')'
mul	byte ptr [bx+8]
add	ax, 2B34h
push	ax
push	cs
call	loc_1D248
add	sp, 4
retf
;     ***************************************************************************
nop
sub	ax, ax
retf
;     ***************************************************************************
nop
push	si
mov	bx, current_province
cmp	word ptr [bx], 0
jz	short near ptr aQsM ; "  *S    **"
jmp	near ptr loc_1D858+2
;     ***************************************************************************
cmp	byte ptr [bx+17h], 14h
jbe	short loc_1D76C
jmp	near ptr loc_1D858+2
;     ***************************************************************************
push	bx
call	far ptr	loc_1290E
add	sp, 2
push	current_province
mov	si, ax
call	far ptr	loc_1C461+1
add	sp, 2
mov	cx, 3
sub	dx, dx
div	cx
cmp	ax, si
jnb	short loc_1D791
jmp	near ptr loc_1D858+2
;     ***************************************************************************
mov	bx, current_province
cmp	word ptr [bx+8], 64h ; 'd'
jbe	short loc_1D79E
jmp	near ptr loc_1D858+2
;     ***************************************************************************
call	far ptr	loc_10624
or	ax, ax
jnz	short near ptr loc_1D7A8+2
jmp	near ptr loc_1D858+2
;     ***************************************************************************
mov	bx, current_ruler
mov	byte ptr [bx+1Eh], 0FFh
push	current_ruler
call	far ptr	525h:6
add	sp, 2
push	ax
call	far ptr	loc_108DC
add	sp, 2
push	current_province
push	current_ruler
call	far ptr	59Dh:52Eh
add	sp, 4
push	current_province
call	far ptr	525h:64h
add	sp, 2
mov	bx, current_ruler
mov	[bx+22h], al
mov	bx, current_ruler
mov	word ptr [bx+23h], 32h ; '2'
mov	bx, current_ruler
mov	word ptr [bx+25h], 1388h
mov	word ptr [bx+27h], 0
push	current_province
call	far ptr	59Dh:50Eh
add	sp, 2
push	current_province
call	far ptr	4B5h:3F4h
add	sp, 2
call	far ptr	4B5h:290h
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0A3CEh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
call	far ptr	57Ch:126h
mov	al, 0Ah
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
mov	bx, current_ruler
or	byte ptr [bx+7], 4
push	current_province
call	loc_103AF+1
add	sp, 2
mov	ax, 1
pop	si
retf
;     ***************************************************************************
sub	ax, ax
pop	si
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
call	far ptr	loc_1C870+2
mov	al, game_difficulty
add	al, 2
mov	cx, ax
shl	al, 1
shl	al, 1
add	al, cl
shl	al, 1
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1D899
push	cs
call	near ptr unk_1D756
or	ax, ax
jz	short near ptr loc_1D893+1
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	loc_20501+1
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	525h:158h
add	sp, 2
mov	[bp-8],	al
mov	al, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	cl, [bp-8]
shr	cl, 1
add	al, cl
mov	[bp-2],	al
mov	al, 3
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	[bp-4],	al
mov	al, game_difficulty
shl	al, 1
add	al, [bp-4]
mov	[bp-6],	al
cmp	al, [bp-4]
jbe	short near ptr loc_1D90B+2
cmp	byte ptr [bp-2], 0
jz	short near ptr loc_1D90B+2
mov	al, [bp-4]
mov	cl, 5
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
shl	ax, 1
shl	ax, 1
mov	bx, ax
call	dword ptr [bx-5C12h]
or	ax, ax
jnz	short near ptr loc_1D88C+1
dec	byte ptr [bp-2]
inc	byte ptr [bp-4]
mov	al, [bp-6]
cmp	[bp-4],	al
jb	short near ptr loc_1D8DD+1
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 14h
push	si
mov	bx, current_ruler
mov	ax, [bx+2]
mov	[bp-0Ch], ax
or	ax, ax
jz	short loc_1D94B
push	ax
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_1D93F
mov	ax, [bp-0Ch]
cmp	current_province, ax
jnz	short loc_1D94B
mov	bx, [bp-0Ch]
mov	ax, [bx]
mov	[bp-0Ch], ax
or	ax, ax
jnz	short loc_1D929
or	ax, ax
jnz	short near ptr loc_1D950+2
jmp	near ptr loc_1DA9D+4
;     ***************************************************************************
sub	ax, ax
push	ax
push	current_province
push	word ptr [bp-0Ch]
call	loc_12141+1
add	sp, 6
mov	word ptr [bp-14h], 0
mov	byte ptr [bp-6], 29h ; ')'
mov	bx, current_ruler
mov	ax, [bx+2]
mov	[bp-0Ch], ax
or	ax, ax
jz	short near ptr loc_1D9CE+1
push	ax
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1D9C1+2
mov	ax, [bp-0Ch]
cmp	current_province, ax
jz	short near ptr loc_1D9C1+2
push	ax
call	loc_1C4C9+1
add	sp, 2
or	al, al
jz	short near ptr loc_1D9C1+2
mov	cl, 3
mov	bx, [bp-0Ch]
mov	si, [bx+21h]
and	si, 0FFh
shl	si, cl
mov	bl, [bx+20h]
sub	bh, bh
mov	al, [bx+si-3432h]
mov	[bp-10h], al
cmp	al, [bp-6]
jnb	short near ptr loc_1D9C1+2
mov	ax, [bp-0Ch]
mov	[bp-14h], ax
mov	bx, [bp-0Ch]
mov	ax, [bx]
mov	[bp-0Ch], ax
or	ax, ax
jnz	short loc_1D97B
cmp	word ptr [bp-14h], 0
jnz	short near ptr loc_1D9D5+3
jmp	near ptr loc_1DA9D+1
;     ***************************************************************************
mov	ax, 1
push	ax
push	word ptr [bp-14h]
push	current_province
call	loc_12141+1
add	sp, 6
mov	word ptr [bp-14h], 0

loc_2D9F0:				; CODE XREF: dseg:26E67  P dseg:292B3  P ...		 /* DOS offset ---> 250B:0 */
mov	byte ptr [bp-6], 0FAh ;	'  *'
;     ***************************************************************************
db  8Bh	;   *
db  1Eh
db  9Ah	;   *
db  33h	; 3
db  8Ah	;   *
db  47h	; G
db  20h
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db  8Ah	;   *
db  47h	; G
db  21h	; !
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db 0C6h	;   *
db  46h	; F
db 0EEh	;   *
db    0
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  88h	;   *
db  46h	; F
db 0F6h	;   *
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  88h	;   *
db  46h	; F
db 0F2h	;   *
db  8Ah	;   *
db  46h	; F
db 0EEh	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0F2h	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  9Ah	;   *
db 0A8h	;   *
db    2
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    6
db  88h	;   *
db  46h	; F
db 0F8h	;   *
db  3Ch	; <
db 0FFh
db  74h	; t
db  63h	; c
db  50h	; P
db  9Ah	;   *
db  76h	; v
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  9Ah	;   *
db 0C2h	;   *
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  22h	; "
db 0FFh
db  36h	; 6
db  9Ah	;   *
db  33h	; 3
db 0FFh
db  76h	; v
db 0F4h	;   *
db  9Ah	;   *
db  92h	;   *
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  37h	; 7
db 0FFh
db  76h	; v
db 0F4h	;   *
db  9Ah	;   *
db  92h	;   *
db    0
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  28h	; (
db 0B1h	;   *
db    3
db  8Bh	;   *
db  76h	; v
db 0F2h	;   *
db  81h	;   *
db 0E6h	;   *
db 0FFh
db    0
db 0D3h	;   *
db 0E6h	;   *
db  8Ah	;   *
db  5Eh	; ^
db 0F6h	;   *
db  2Ah	; *
db 0FFh
db  8Ah	;   *
db  80h	;   *
db 0CEh	;   *
db 0CBh	;   *
db  88h	;   *
db  46h	; F
db 0F0h	;   *
db  3Ah	; :
db  46h	; F
db 0FAh	;   *
db  73h	; s
db  0Ch
db  8Bh	;   *
db  46h	; F
db 0F4h	;   *
db  89h	;   *
db  46h	; F
db 0ECh	;   *
db  8Ah	;   *
db  46h	; F
db 0F0h	;   *
db  88h	;   *
db  46h	; F
db 0FAh	;   *
db 0FEh	;   *
db  46h	; F
db 0EEh	;   *
db  80h	;   *
db  7Eh	; ~
db 0EEh	;   *
db    6
db  73h	; s
db    3
db 0E9h	;   *
db  6Ah	; j
db 0FFh
;     ***************************************************************************
mov	ax, [bp-14h]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	current_province
call	far ptr	59Dh:428h
add	sp, 2
mov	word ptr [bp-2], 0CA62h
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr unk_1DB2A
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1DB21+1
push	current_province
push	word ptr [bp-4]
call	far ptr	542h:192h
add	sp, 4
or	ax, ax
jz	short loc_1DB1C
push	word ptr [bp-4]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_1DB1C
mov	bx, [bp-4]
push	word ptr [bx+2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_1DB1C
mov	bx, [bp-4]
push	word ptr [bx+2]
call	far ptr	525h:158h
add	sp, 2
cmp	al, 5
jb	short near ptr loc_1DB21+1
add	word ptr [bp-2], 2
jmp	short near ptr loc_1DAB9+4
;     ***************************************************************************
mov	ax, [bp-4]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 12h
call	loc_1C432+4
or	ax, ax
jnz	short loc_1DB42
jmp	loc_1DD24
;     ***************************************************************************
push	current_province
call	loc_1C4C9+1
add	sp, 2
mov	[bp-8],	al
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_1DB72
cmp	byte ptr [bp-8], 0
jnz	short loc_1DB72
mov	word ptr [bp-10h], 1
jmp	short loc_1DB77
;     ***************************************************************************
nop
mov	word ptr [bp-10h], 9
mov	al, [bp-10h]
push	ax
push	current_province
call	far ptr	59Dh:382h
add	sp, 4
mov	[bp-0Ah], al
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	542h:1D8h
add	sp, 2
cmp	ax, 1
sbb	al, al
and	al, 0FBh
add	al, 7
cmp	byte ptr [bp-8], 1
cmc
sbb	cl, cl
and	cl, 3
add	al, cl
cmp	al, [bp-0Ah]
jbe	short near ptr loc_1DBB5+1
jmp	loc_1DD24
;     ***************************************************************************
push	current_province
call	far ptr	loc_1290E
add	sp, 2
mov	[bp-2],	ax
mov	ax, 0C8h ; '  *'
cwd
push	dx
push	ax
mov	bx, current_province
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
cmp	ax, [bp-2]
jnb	short loc_1DBE2
jmp	loc_1DD24
;     ***************************************************************************
mov	al, 46h	; 'F'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1DBF7+1
push	cs
call	near ptr loc_1DAA5+1
jmp	short near ptr loc_1DBFB+1
;     ***************************************************************************
nop
push	cs
call	near ptr loc_1D913+1
mov	[bp-6],	ax
or	ax, ax
jnz	short loc_1DC06
jmp	loc_1DD24
;     ***************************************************************************
mov	bx, ax
push	word ptr [bx+2]
call	far ptr	525h:158h
add	sp, 2
cmp	al, [bp-0Ah]
jb	short loc_1DC1B
jmp	loc_1DD24
;     ***************************************************************************
call	far ptr	60Dh:2E2h
mov	word ptr [bp-0Eh], 0
sub	al, al
mov	[bp-4],	al
mov	[bp-0Ch], al
cmp	[bp-0Ah], al
jz	short near ptr loc_1DC7F+1
mov	ax, [bp-2]
mov	cx, 3
sub	dx, dx
div	cx
mov	[bp-12h], ax
mov	bl, [bp-0Ch]
sub	bh, bh
shl	bx, 1
mov	word ptr [bx-3390h], 1
inc	byte ptr [bp-4]
mov	bx, [bx-314Eh]
mov	ax, [bx+12h]
mov	cx, 64h	; 'd'
sub	dx, dx
div	cx
add	[bp-0Eh], ax
mov	ax, [bp-12h]
cmp	[bp-0Eh], ax
ja	short near ptr loc_1DC7F+1
mov	al, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
inc	al
add	[bp-0Ch], al
mov	al, [bp-0Ah]
cmp	[bp-0Ch], al
jb	short loc_1DC3F
cmp	byte ptr [bp-4], 0
jnz	short loc_1DC89
jmp	loc_1DD24
;     ***************************************************************************
push	word ptr [bp-6]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short near ptr loc_1DCA9+1
push	word ptr [bp-6]
call	far ptr	loc_1C461+1
add	sp, 2
shr	ax, 1
cmp	ax, [bp-0Eh]
ja	short loc_1DD24
mov	bx, current_province
mov	ax, [bx+8]
mov	cx, 3
sub	dx, dx
div	cx
mov	word_1CA96, ax
mov	ax, [bp-2]
inc	ax
sub	dx, dx
push	dx
push	ax
mov	ax, [bp-0Eh]
push	dx
push	ax
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:38B2h
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	word_1CA88, ax
mov	word_1CA8A, dx
mov	word_1CE96, 0Ch
mov	byte ptr word_1CB6B, 0
push	current_ruler
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1DD09+2
push	word ptr [bp-6]
push	current_province
call	far ptr	unk_11E74
add	sp, 4
mov	al, [bp-0Ah]
push	ax
push	word ptr [bp-6]
call	far ptr	loc_111D6
add	sp, 4
call	unk_1C06C
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Eh
push	si
push	current_province
call	far ptr	542h:0A8h
add	sp, 2
mov	[bp-0Ch], ax
or	ax, ax
jz	short near ptr loc_1DD56+2
mov	bx, current_province
mov	al, [bx+12h]
and	al, 3
cmp	al, 2
jz	short near ptr loc_1DD56+2
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	word ptr [bp-6], 4E20h
mov	word_1CA9A, 0
push	current_province
call	far ptr	59Dh:428h
add	sp, 2
mov	word ptr [bp-0Ah], 0CA62h
mov	bx, [bp-0Ah]
mov	ax, [bx]
mov	[bp-8],	ax
or	ax, ax
jz	short loc_1DDD7
push	ax
call	loc_1057F+1
add	sp, 2
or	ax, ax
jz	short loc_1DDCB
mov	ax, 3
cwd
push	dx
push	ax
push	word ptr [bp-8]
call	far ptr	525h:122h
add	sp, 2
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	bx, [bp-8]
cmp	dx, [bx+0Ch]
jg	short loc_1DDD2
jl	short near ptr loc_1DDB2+2
cmp	ax, [bx+0Ah]
ja	short loc_1DDD2
push	bx
call	loc_1C526+2
add	sp, 2
cmp	ax, [bp-6]
jnb	short loc_1DDCB
mov	[bp-6],	ax
mov	ax, [bp-8]
mov	word_1CA9A, ax
add	word ptr [bp-0Ah], 2
jmp	short loc_1DD74
;     ***************************************************************************
nop
mov	ax, bx
mov	word_1CA9A, ax
cmp	word_1CA9A, 0
jz	short loc_1DE5A
push	word_1CA9A
call	far ptr	525h:4Ah
add	sp, 2
mov	[bp-4],	ax
push	ax
call	far ptr	525h:6
add	sp, 2
sub	ah, ah
mov	si, ax
mov	bx, current_ruler
mov	al, 64h	; 'd'
sub	al, [bx+si+0Eh]
mov	[bp-0Eh], al
push	bx
push	word ptr [bp-4]
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jnz	short near ptr loc_1DE28+1
push	current_ruler
push	word ptr [bp-4]
call	loc_104F4
add	sp, 4
or	ax, ax
jz	short loc_1DE44
cmp	word ptr [bp-0Ch], 0
jz	short near ptr loc_1DE31+1
jmp	near ptr loc_1DD50+1
;     ***************************************************************************
mov	bx, word_13396
mov	al, [bx+8]
mov	cl, 3
sub	ah, ah
div	cl
add	al, 0Ah
add	[bp-0Eh], al
mov	al, [bp-0Eh]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1DE5A
mov	word_1CA9A, 0
cmp	word_1CA9A, 1
sbb	ax, ax
inc	ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 12h
call	far ptr	60Dh:2E2h
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	525h:158h
add	sp, 2
mov	byte_1CB6A, al
cmp	word_1CBA0, 0
jnz	short loc_1DEA2
mov	al, 50h	; 'P'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short loc_1DEA2
mov	word ptr [bp-10h], 1
jmp	short near ptr loc_1DEA6+1
;     ***************************************************************************
mov	word ptr [bp-10h], 9
mov	al, [bp-10h]
push	ax
push	current_province
call	far ptr	59Dh:382h
add	sp, 4
mov	[bp-0Ch], al
mov	word ptr loc_1CE8F+3, 0
mov	byte_1CBCC, 0
mov	word ptr [bp-0Ah], 0CA70h
mov	ax, 3
push	ax
mov	ax, 2
push	ax
push	current_province
call	far ptr	loc_1290E
add	sp, 2
push	ax
call	far ptr	49Ch:0Ah
add	sp, 6
mov	[bp-2],	ax
cmp	word_1CBA0, 0
jz	short near ptr loc_1DEF9+1
mov	cx, 3
sub	dx, dx
div	cx
jmp	short near ptr unk_1DF06
;     ***************************************************************************
push	word_1CA9A
call	far ptr	loc_1290E
add	sp, 2
mov	[bp-8],	ax
mov	byte ptr [bp-0Eh], 0
cmp	byte ptr [bp-0Ch], 0
jnz	short loc_1DF16
jmp	near ptr loc_1DFBC+1
;     ***************************************************************************
mov	al, byte_1CBCC
cmp	[bp+6],	al
ja	short loc_1DF21
jmp	near ptr loc_1DFBC+1
;     ***************************************************************************
mov	bl, [bp-0Eh]
sub	bh, bh
shl	bx, 1
mov	ax, [bx-314Eh]
mov	[bp-4],	ax
mov	word ptr [bx-3390h], 1
mov	bx, current_province
mov	[bp-12h], ax
cmp	ax, [bx+2]
jnz	short loc_1DF46
mov	ax, 1F40h
jmp	short near ptr loc_1DF48+1
;     ***************************************************************************
mov	ax, 5DCh
mov	bx, [bp-12h]
cmp	ax, [bx+12h]
ja	short loc_1DFAF
push	word ptr [bp-4]
call	far ptr	542h:58h
add	sp, 2
or	ax, ax
jz	short loc_1DFAF
push	word ptr [bp-4]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1DF77+1
mov	bx, [bp-4]
cmp	byte ptr [bx+0Bh], 4Bh ; 'K'
jb	short loc_1DFAF
mov	ax, [bp-4]
mov	bx, [bp-0Ah]
add	word ptr [bp-0Ah], 2
mov	[bx], ax
mov	bx, ax
mov	ax, [bx+12h]
add	word ptr loc_1CE8F+3, ax
inc	byte_1CBCC
mov	ax, word ptr loc_1CE8F+3
mov	cx, 64h	; 'd'
sub	dx, dx
div	cx
cmp	ax, [bp-2]
ja	short near ptr loc_1DFBC+1
mov	ax, word ptr loc_1CE8F+3
mov	cx, 12Ch
sub	dx, dx
div	cx
cmp	ax, [bp-8]
ja	short near ptr loc_1DFBC+1
inc	byte ptr [bp-0Eh]
mov	al, [bp-0Ch]
cmp	[bp-0Eh], al
jnb	short near ptr loc_1DFBC+1
jmp	loc_1DF16
;     ***************************************************************************
mov	bx, [bp-0Ah]
mov	word ptr [bx], 0
cmp	byte_1CBCC, 0
jz	short loc_1DFD2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
push	word ptr [bp+0Ah]
call	far ptr	525h:0EEh
mov	sp, bp
sub	ah, ah
mov	bx, [bp+0Ah]
mov	cl, [bx+16h]
sub	ch, ch
add	ax, cx
mov	cx, 0Ah
sub	dx, dx
div	cx
add	ax, [bp+8]
push	ax
push	word ptr [bp+6]
call	far ptr	49Ch:32h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	word ptr [bp-6], 0
call	far ptr	loc_105E6
cmp	word_1CBA0, 0
jz	short near ptr loc_1E022+1
jmp	loc_1E13C
;     ***************************************************************************
mov	bx, word_1CA9A
push	word ptr [bx+2]
mov	ax, 55h	; 'U'
push	ax
push	bx
call	loc_1C526+2
add	sp, 2
push	ax
mov	ax, 1C2h
push	ax
call	far ptr	561h:18Ah
add	sp, 4
push	ax
push	cs
call	near ptr loc_1DFD6+2
add	sp, 6
mov	[bp-2],	ax
push	word ptr loc_1CA70
mov	ax, 32h	; '2'
push	ax
mov	ax, word ptr loc_1CE8F+3
mov	cx, 64h	; 'd'
sub	dx, dx
div	cx
push	ax
push	cs
call	near ptr loc_1DFD6+2
add	sp, 6
mov	[bp-4],	ax
push	word ptr loc_1CA70
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1E08A+4
mov	ax, 46h	; 'F'
push	ax
push	word ptr [bp-4]
call	far ptr	49Ch:32h
add	sp, 4
mov	[bp-4],	ax
push	current_province
call	far ptr	loc_1290E
add	sp, 2
cmp	ax, 1F4h
jbe	short near ptr loc_1E0A6+1
sub	ax, 1F4h
shr	ax, 1
add	[bp-4],	ax
mov	bx, current_ruler
cmp	byte ptr [bx+1Eh], 0FFh
jz	short near ptr unk_1E0E3
push	word_1CA9A
call	far ptr	525h:64h
add	sp, 2
mov	bx, current_ruler
cmp	al, [bx+1Fh]
jnz	short near ptr unk_1E0E3
test	byte ptr [bx+7], 8
jnz	short near ptr unk_1E0DB
mov	al, 46h	; 'F'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr unk_1E0E3
mov	word ptr [bp-6], 1
shl	word ptr [bp-4], 1
mov	ax, [bp-2]
cmp	[bp-4],	ax
jnb	short loc_1E13C
mov	ax, 21h	; '!'
cwd
push	dx
push	ax
mov	bx, word_1CA9A
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
cmp	ax, [bp-2]
jbe	short loc_1E13C
mov	ax, [bp-2]
shr	ax, 1
cmp	ax, [bp-4]
jnb	short near ptr aV0 ; "v\b  *0"
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	525h:158h
add	sp, 2
cmp	al, 2
jbe	short near ptr aV0 ; "v\b  *0"
push	word_1CA9A
call	far ptr	525h:64h
add	sp, 2
mov	bx, current_province
mov	[bx+15h], al
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, word ptr loc_1CE8F+3
mov	cx, 19h
sub	dx, dx
div	cx
push	ax
mov	ax, 12Ch
push	ax
call	far ptr	561h:19Ch
add	sp, 4
push	ax
mov	bx, current_province
mov	ax, [bx+8]
mov	cx, 5
sub	dx, dx
div	cx
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	word_1D476, ax
mov	ax, word ptr loc_1CE8F+3
shr	ax, 1
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	cx, ax
cmp	word ptr [bp-6], 1
sbb	ax, ax
and	ax, 2
inc	ax
inc	ax
cwd
push	dx
push	ax
mov	ax, word ptr loc_1CE8F+3
sub	dx, dx
mov	bx, ax
mov	si, dx
shl	ax, 1
rcl	dx, 1
shl	ax, 1
rcl	dx, 1
add	ax, bx
adc	dx, si
push	dx
push	ax
mov	si, cx
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
add	ax, si
adc	dx, 0
mov	word_1CEAE, ax
mov	word_1CEB0, dx
mov	byte_1CAF2, 0
call	loc_1EE7C
cmp	word_1CBA0, 0
jnz	short near ptr unk_1E20C
or	byte_1339C, 1
call	far ptr	4B5h:290h
push	word_1CA9A
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
push	current_province
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0A402h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	unk_1C06C
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, current_province
cmp	byte ptr [bx+15h], 0FFh
jnz	short loc_1E22F
call	loc_1C432+4
or	ax, ax
jz	short near ptr loc_1E29A+2
mov	bx, current_province
cmp	byte ptr [bx+15h], 0FFh
jz	short loc_1E254
mov	al, [bx+15h]
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	word_1CA9A, ax
mov	bx, word_1CA9A
test	byte ptr [bx+13h], 40h
jz	short loc_1E25E
jmp	short near ptr loc_1E29A+2
;     ***************************************************************************
push	cs
call	near ptr loc_1DD29+1
or	ax, ax
jnz	short loc_1E248
jmp	short near ptr loc_1E29A+2
;     ***************************************************************************
call	far ptr	loc_12858
mov	[bp-4],	al
mov	al, 2
push	ax
push	current_province
call	loc_103F9+1
add	sp, 4
mov	al, 4
push	ax
push	current_province
call	loc_103F9+1
add	sp, 4
mov	al, [bp-4]
push	ax
push	cs
call	loc_1DE68
add	sp, 2
or	ax, ax
jz	short near ptr loc_1E29A+2
push	cs
call	near ptr loc_1E006+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
push	ax
mov	ax, 1Ch
push	ax
mov	ax, 2Ah	; '*'
push	ax
mov	ax, 0A8h ; '  *'
push	ax
mov	cx, 25h	; '%'
push	cx
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 0A8h ; '  *'
push	ax
mov	ax, 26h	; '&'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
retf
;     ***************************************************************************
mov	bx, word_1CB86
mov	ax, [bx]
add	ax, 1Ch
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 0A438h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
retf
;     ***************************************************************************
nop
mov	ax, 0A469h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
retf
;     ***************************************************************************
nop
mov	ax, 0A49Fh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
retf
;     ***************************************************************************
nop
mov	bx, word_1CAF0
mov	ax, [bx]
add	ax, 1Ch
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 0A4D0h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
retf
;     ***************************************************************************
nop
mov	ax, 0A4FDh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
retf
;     ***************************************************************************
nop
mov	ax, 0A531h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
retf
;     ***************************************************************************
nop
push	word_1CA96
mov	ax, 0A55Bh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
retf
;     ***************************************************************************
nop
mov	ax, 0A57Eh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
retf
;     ***************************************************************************
nop
push	word_1CEAC
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, 0A5A6h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
retf
;     ***************************************************************************
nop
mov	ax, 0A5D3h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
retf
;     ***************************************************************************
nop
mov	bl, byte ptr loc_1CBA2
sub	bh, bh
shl	bx, 1
push	word ptr [bx-5954h]
call	far ptr	3EFh:6C0h
add	sp, 2
retf
;     ***************************************************************************
nop
mov	ax, 3
push	ax
call	far ptr	49Ch:178h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1E3BE+2
dec	ax
jz	short loc_1E3C6
push	cs
call	loc_1E2EE
retf
;     ***************************************************************************
push	cs
call	near ptr loc_1E2FA+2
retf
;     ***************************************************************************
nop
push	cs
call	near ptr loc_1E329+1
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
mov	ax, 4
push	ax
mov	ax, 85F0h
push	ax
mov	ax, 44h	; 'D'
push	ax
mov	ax, 1C0h
push	ax
call	far ptr	4B5h:1CEh
add	sp, 8
cmp	byte_1CE9C, 7
jb	short near ptr loc_1E3FB+3
cmp	byte_1CE9C, 0Bh
ja	short near ptr loc_1E3FB+3
mov	ax, word_1CE9A
jmp	short near ptr loc_1E402+2
;     ***************************************************************************
nop
mov	bx, word_1CAE8
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0A6B4h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, 5Ah	; 'Z'
push	ax
mov	ax, 39h	; '9'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	bl, byte_1CE9C
sub	bh, bh
shl	bx, 1
shl	bx, 1
call	dword ptr [bx-5906h]
cmp	word_1CEA2, 0
jz	short near ptr loc_1E445+1
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0A6D0h
jmp	short near ptr loc_1E44E+2
;     ***************************************************************************
nop
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0A6E4h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Q_1E45B		proc far

var_14		= word ptr -14h
var_12		= word ptr -12h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= byte ptr -0Ah
var_8		= byte ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

; FUNCTION CHUNK AT E322 SIZE 000001C9 BYTES

mov	bp, sp
sub	sp, 6
mov	bx, word_1CAE8
mov	ax, [bx+2]
mov	word_13536, ax
mov	[bp+var_2], 0
call	far ptr	4B5h:290h
mov	ax, 29h	; ')'
push	ax
mov	ax, 1
push	ax
mov	ax, 0A72Ah
push	ax
call	far ptr	3EFh:9B2h ; Q_1E45B
add	sp, 6
mov	[bp+var_4], ax
cmp	ax, 0FFFFh
jnz	short near ptr loc_1E4A7+1
mov	ax, 0A749h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:9D6h
or	ax, ax
jz	short loc_1E46F
jmp	short near ptr unk_1E4F1
;     ***************************************************************************
nop
mov	al, byte ptr [bp+var_4]
dec	al
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	[bp+var_6], ax
push	ax
call	far ptr	525h:4Ah
add	sp, 2
cmp	ax, word_1CAE8
jnz	short loc_1E46F
sub	ax, ax
push	ax
push	[bp+var_6]
call	loc_12516+4
add	sp, 4
or	ax, ax
jz	short loc_1E46F
sub	al, al
push	ax
push	[bp+var_6]
call	loc_1273C+2
add	sp, 4
or	ax, ax
jz	short loc_1E46F
mov	[bp+var_2], 1
cmp	[bp+var_2], 0
jnz	short near ptr loc_1E517+1
mov	ax, 0FFFBh
push	ax
push	word_1CAE8
call	far ptr	loc_128D6
add	sp, 4
mov	ax, 5
push	ax
push	word_1CAE8
push	current_ruler
call	far ptr	loc_128EB+1
mov	word_13536, 0
mov	al, 0FFh
mov	sp, bp
pop	bp
retf
Q_1E45B		endp

;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:290h
mov	ax, word_1CE9E
add	ax, 1Ch
push	ax
mov	ax, 0A751h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
call	far ptr	57Ch:15Eh
push	cs
call	loc_1E2A2
push	word_1CE9E
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short locret_1E560
mov	ax, 0A769h
jmp	short near ptr loc_1E562+1
;     ***************************************************************************
mov	ax, 0A772h
push	ax
mov	ax, 0A77Ah
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, 2
push	ax
mov	ax, 1
push	ax
call	far ptr	3EFh:998h
add	sp, 4
mov	[bp-2],	ax
cmp	ax, 0FFFFh
jz	short near ptr loc_1E546+1
mov	al, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Q_1E590		proc far

var_4		= word ptr -4
var_2		= word ptr -2

; FUNCTION CHUNK AT E59C SIZE 0000001E BYTES
; FUNCTION CHUNK AT E60E SIZE 00000008 BYTES

push	bp
mov	bp, sp
sub	sp, 2
mov	ax, word_1CB6B+1
mov	word_13536, ax
push	cs
call	loc_1E2A2
mov	ax, 3
push	ax
mov	ax, 1
push	ax
mov	ax, 0A7A5h
push	ax
call	far ptr	3EFh:9B2h ; Q_1E590
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short loc_1E59C
cmp	byte_1CE9C, 5
jnz	short near ptr unk_1E5EA
mov	ax, word_1CAE8
cmp	word_1CB90, ax
jnz	short near ptr unk_1E5EA
cmp	[bp+var_2], 1
jnz	short near ptr unk_1E5EA
push	cs
call	loc_1E2A2
mov	ax, 0A7DAh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	57Ch:126h
jmp	short loc_1E59C
;     ***************************************************************************
nop
mov	word_13536, 0
cmp	byte_1CE9C, 2
jnz	short near ptr loc_1E673+3
cmp	[bp+var_2], 1
jnz	short near ptr loc_1E673+3
mov	al, 13h
push	ax
call	far ptr	6EBh:96h
add	sp, 2
sub	al, al
push	ax
call	far ptr	6EBh:100h
add	sp, 2
mov	ax, 5
push	ax
mov	ax, 40h	; '@'
push	ax
mov	ax, 10h
push	ax
mov	ax, 48h	; 'H'
push	ax
mov	ax, 27h	; '''
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
push	current_ruler
call	far ptr	525h:6
add	sp, 2
sub	ah, ah
add	ax, 0CCh ; '  *'
push	ax
call	far ptr	4B5h:672h
add	sp, 2
mov	ax, 0D0B2h
push	ax
sub	ax, ax
push	ax
mov	ax, 28h	; '('
push	ax
mov	ax, 8
push	ax
mov	ax, 54h	; 'T'
push	ax
mov	ax, 2Bh	; '+'
push	ax
call	far ptr	0:1627h
add	sp, 0Ch
mov	word_1356C, 0FFFFh
mov	al, 14h
push	ax
call	far ptr	57Ch:7Ch
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
Q_1E590		endp

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	al, byte_1356A
mov	[bp-2],	al
cmp	byte_1CE9C, 5
jz	short near ptr unk_1E69C
mov	al, 12h
push	ax
call	far ptr	6EBh:96h
add	sp, 2
mov	ax, 1
push	ax
push	word_1CEA4
call	loc_13860+2
add	sp, 4
call	far ptr	4B5h:266h
mov	ax, 90h	; '  *'
push	ax
call	far ptr	4B5h:33Eh
add	sp, 2
mov	ax, 4
push	ax
mov	ax, 6A18h
push	ax
mov	ax, 48h	; 'H'
push	ax
mov	ax, 138h
push	ax
call	far ptr	4B5h:1CEh
add	sp, 8
push	cs
call	near ptr loc_1E3CB+1
call	far ptr	4B5h:290h
mov	ax, word_1CE9E
add	ax, 1Ch
push	ax
push	word_1CE9E
call	far ptr	542h:1D8h
add	sp, 2
cmp	ax, 1
sbb	ax, ax
and	ax, 4
inc	ax
inc	ax
push	ax
mov	bx, word_1CAE8
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0A7FAh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
call	far ptr	542h:2
or	ax, ax
jz	short near ptr loc_1E739+1
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
add	sp, 2
mov	al, [bp-2]
push	ax
call	far ptr	6EBh:96h
add	sp, 2
mov	al, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, word_1CEA4
mov	word_13536, ax
cmp	byte_1CE9C, 6
jnz	short near ptr loc_1E780+4
mov	ax, 0A830h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:79Ah
cmp	byte_1CEA0, 0
jnz	short loc_1E766
mov	word ptr [bp-4], 1
jmp	short near ptr loc_1E78B+2
;     ***************************************************************************
mov	word ptr [bp-4], 2
cmp	word_1D472, 0
jz	short near ptr loc_1E78B+2
mov	ax, 0FFFDh
push	ax
push	current_ruler
call	far ptr	loc_128D6
add	sp, 4
jmp	short near ptr loc_1E78B+2
;     ***************************************************************************
push	cs
call	near ptr unk_1E590
sub	ah, ah
mov	[bp-4],	ax
mov	word_13536, 0
cmp	byte_1CE9C, 5
jz	short near ptr loc_1E7B6+1
mov	al, 10h
push	ax
call	far ptr	6EBh:3Ah
add	sp, 2
call	far ptr	6EBh:64h
or	ax, ax
jnz	short loc_1E7A5
mov	al, [bp-2]
push	ax
call	far ptr	6EBh:96h
mov	al, [bp-4]
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Q_1E7BE		proc far

var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 2
mov	ax, 1
push	ax
push	word_1CB6B+1
call	loc_13860+2
add	sp, 4
call	far ptr	4B5h:266h
mov	ax, 90h	; '  *'
push	ax
call	far ptr	4B5h:33Eh
add	sp, 2
mov	ax, 4
push	ax
mov	ax, 731Fh
push	ax
mov	ax, 48h	; 'H'
push	ax
mov	ax, 138h
push	ax
call	far ptr	4B5h:1CEh
add	sp, 8
call	far ptr	4B5h:290h
mov	bx, word_1D478
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0A841h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
push	word_1CE9E
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jnz	short near ptr unk_1E844
mov	ax, word_1CE9E
add	ax, 1Ch
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0A849h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
jmp	short near ptr unk_1E857
;     ***************************************************************************
mov	ax, word_1CE9E
add	ax, 1Ch
push	ax
mov	ax, 0A89Dh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
call	far ptr	542h:2
or	ax, ax
jz	short near ptr unk_1E876
push	cs
call	near ptr loc_1E3CB+1
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
add	sp, 2
mov	al, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 0A8DBh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:9D6h
or	ax, ax
jnz	short near ptr unk_1E896
mov	byte_1CA86, 0
mov	al, 0FFh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	cs
call	near ptr loc_1E3CB+1
call	far ptr	4B5h:290h
mov	ax, 3
push	ax
mov	ax, 1
push	ax
mov	ax, 0A8E7h
push	ax
call	far ptr	3EFh:9B2h ; Q_1E7BE
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short near ptr unk_1E89A
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
Q_1E7BE		endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Q_1E8C2		proc far

var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_4		= byte ptr -4
var_2		= word ptr -2

; FUNCTION CHUNK AT E95C SIZE 00000117 BYTES

push	bp
mov	bp, sp
sub	sp, 2
mov	ax, 1
push	ax
push	word_1CB6B+1
call	loc_13860+2
add	sp, 4
call	far ptr	4B5h:266h
mov	ax, 3Dh	; '='
push	ax
call	far ptr	4B5h:33Eh
add	sp, 2
mov	ax, 90h	; '  *'
push	ax
call	far ptr	4B5h:33Eh
add	sp, 2
mov	ax, 4
push	ax
mov	ax, 7BECh
push	ax
mov	ax, 48h	; 'H'
push	ax
mov	ax, 138h
push	ax
call	far ptr	4B5h:1CEh
add	sp, 8
mov	bx, word_1D478
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0A936h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
push	word_1CE9E
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jnz	short loc_1E95C
push	word_1CA8A
push	word_1CA88
push	word_1CA96
mov	ax, word_1CE9E
add	ax, 1Ch
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0A949h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Ch
jmp	short near ptr loc_1E979+2
;     ***************************************************************************
nop
push	word_1CA8A
push	word_1CA88
push	word_1CA96
mov	ax, word_1CE9E
add	ax, 1Ch
push	ax
mov	ax, 0A99Bh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Ah
call	far ptr	542h:2
or	ax, ax
jz	short near ptr loc_1E995+1
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
add	sp, 2
mov	al, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	far ptr	4B5h:290h
mov	ax, 3
push	ax
mov	ax, 1
push	ax
mov	ax, 0A9D7h
push	ax
call	far ptr	3EFh:9B2h ; Q_1E8C2
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short near ptr loc_1E995+1
mov	al, byte ptr [bp+var_2]
mov	sp, bp
pop	bp
retf
Q_1E8C2		endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1E9BE		proc far		; DATA XREF: unkfunc_12804+2A  t		 /* DOS offset ---> 2607:E */

var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 6
push	word_1CA9A
call	far ptr	525h:4Ah
add	sp, 2
mov	[bp+var_4], ax
push	ax
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short loc_1E9E3
jmp	loc_1EA7E
;     ***************************************************************************
push	word_1CA9A
call	far ptr	542h:0A8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1E9F4+2
jmp	loc_1EA7E
;     ***************************************************************************
mov	ax, 1
push	ax
push	word_1CA9A
call	far ptr	loc_139C6
add	sp, 4
call	far ptr	4B5h:290h
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	bx, [bp+var_4]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0AA1Eh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
call	far ptr	4B5h:290h
cmp	byte_1CBCC, 1
jnz	short loc_1EA38
mov	ax, word ptr loc_1AAC0
jmp	short near ptr loc_1EA3A+1
;     ***************************************************************************
mov	ax, word ptr loc_1AAC1+1
push	word_1CEB0
push	word_1CEAE
push	word ptr loc_1CE8F+3
push	ax
mov	al, byte_1CBCC
sub	ah, ah
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0AA47h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Eh
mov	ax, 0AAA8h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:9D6h
or	ax, ax
jz	short near ptr unk_1EAB6
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word_1CA9A
call	far ptr	loc_1290E
add	sp, 2
mov	[bp+var_2], ax
mov	ax, word ptr loc_1CE8F+3
mov	cx, 87h	; '  *'
sub	dx, dx
div	cx
cmp	ax, [bp+var_2]
jbe	short near ptr unk_1EAB6
mov	ax, 78h	; 'x'
cwd
push	dx
push	ax
mov	bx, word_1CA9A
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
cmp	ax, [bp+var_2]
ja	short near ptr s_EA74+2
sub	ax, ax
mov	sp, bp
pop	bp
retf
s_1E9BE		endp		 /* DOS offset ---> 2607:E */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1EABC		proc far		; DATA XREF: s_1F044+10  t		 /* DOS offset ---> 2617:C */

arg_0		= byte ptr  6

push	bp
mov	bp, sp
cmp	[bp+arg_0], 0
jnz	short loc_1EAD6
sub	ax, ax
push	ax
push	word_1CA9A
call	s_25E40		; *
mov	sp, bp
pop	bp
retf
s_1EABC		endp		 /* DOS offset ---> 2617:C */

;     ***************************************************************************
nop
sub	ax, ax
push	ax
push	word_1CA9A
call	loc_25DC9+3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
sub	al, al
push	ax
mov	ax, 9Ch	; '  *'
push	ax
mov	cx, 0CBCEh
push	cx
call	far ptr	561h:0A0h
add	sp, 6
mov	ax, word_1D47E
mov	[bp-2],	ax
push	word_1CA9A
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
mov	cx, 10Bh
mul	cx
mov	[bp-4],	ax
mov	ax, 9Ch	; '  *'
push	ax
mov	ax, 0CBCEh
push	ax
mov	ax, [bp-4]
mov	dx, [bp-2]
add	ax, 6Fh	; 'o'
push	dx
push	ax
call	far ptr	561h:7Ch
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
mov	ax, word_1D476
mov	bx, current_province
sub	[bx+8],	ax
mov	ax, word_1CEAE
mov	dx, word_1CEB0
mov	bx, current_province
sub	[bx+0Ah], ax
sbb	[bx+0Ch], dx
cmp	word_1CBA0, 0
jz	short loc_1EBD2
mov	ax, current_province
mov	bl, [bp+6]
sub	bh, bh
mov	cx, word ptr unk_1C980
mov	dx, cx
shl	cx, 1
add	cx, dx
shl	cx, 1
add	bx, cx
shl	bx, 1
mov	[bx-354Bh], ax
mov	ax, 7530h
push	ax
push	word_1D476
mov	ax, word ptr unk_1C980
shl	ax, 1
add	ax, 0CAA1h
push	ax
call	far ptr	49Ch:8Ch
add	sp, 6
mov	ax, word_1CEAE
mov	dx, word_1CEB0
mov	bx, word ptr unk_1C980
shl	bx, 1
shl	bx, 1
add	bx, 0CAA5h
mov	[bp-2],	bx
add	[bx], ax
adc	[bx+2],	dx
mov	bx, [bp-2]
cmp	word ptr [bx+2], 2Dh ; '-'
jge	short loc_1EBBC
jmp	near ptr loc_1EC3D+1
;     ***************************************************************************
jg	short near ptr loc_1EBC3+1
cmp	word ptr [bx], 0C6C0h
jbe	short near ptr loc_1EC3D+1
mov	word ptr [bx], 0C6C0h
mov	word ptr [bx+2], 2Dh ; '-'
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, current_ruler
mov	word_1CB86, ax
mov	ax, current_province
mov	word ptr loc_1CB88, ax
mov	ax, word_1D476
mov	word ptr loc_1CAA2+1, ax
mov	ax, word_1CEAE
mov	dx, word_1CEB0
mov	word_1CAA9, ax
mov	word_1CAAB, dx
push	word_1CA9A
call	far ptr	525h:4Ah
add	sp, 2
mov	word ptr loc_1CB71+1, ax
mov	ax, word_1CA9A
mov	word_1CB74, ax
mov	bx, ax
mov	cx, [bx+8]
mov	word ptr unk_1CAA1, cx
mov	cx, [bx+0Ah]
mov	dx, [bx+0Ch]
mov	word ptr loc_1CAA2+3, cx
mov	word_1CAA7, dx
mov	al, 4
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	byte ptr loc_1CAAD, al
mov	al, 7
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	byte ptr loc_1CAAD+1, al
push	cs
call	near ptr loc_1EAE3+3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	bl, byte_1CAF2
sub	bh, bh
shl	bx, 1
mov	ax, [bx-3590h]
mov	[bp-2],	ax
push	ax
call	far ptr	59Dh:700h
add	sp, 2
push	word ptr [bp-2]
push	current_province
call	far ptr	59Dh:6A8h
add	sp, 4
cmp	word_1CBA0, 0
jz	short loc_1ECD8
mov	bx, word ptr unk_1C980
mov	ax, bx
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	al, [bp+6]
sub	ah, ah
add	bx, ax
shl	bx, 1
add	bx, 0CACDh
mov	[bp-4],	bx
cmp	word ptr [bx], 0
jnz	short near ptr loc_1EC9C+4
mov	ax, [bp-2]
mov	[bx], ax
jmp	short near ptr loc_1ECDC+2
;     ***************************************************************************
nop
push	word ptr [bx]
call	far ptr	59Dh:62h
add	sp, 2
mov	[bp-6],	ax
push	word ptr [bp-2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1ECCF+1
mov	bx, [bp-4]
mov	ax, [bx]
mov	si, [bp-2]
mov	[si], ax
mov	[bx], si
mov	ax, [bp-6]
mov	[bp-2],	ax
jmp	short near ptr loc_1ECDC+2
;     ***************************************************************************
mov	ax, [bp-2]
mov	bx, [bp-6]
jmp	short loc_1EC9B
;     ***************************************************************************
mov	ax, [bp-2]
mov	word ptr loc_1CB8A, ax
mov	byte ptr [bp-8], 0
mov	bx, 0CA70h
mov	[bp-4],	bx
cmp	word ptr [bx], 0
jz	short near ptr loc_1ED2B+3
mov	al, byte_1CAF2
cmp	[bp-8],	al
jz	short near ptr loc_1ED1B+4
push	word ptr [bx]
call	far ptr	59Dh:700h
add	sp, 2
mov	bx, [bp-4]
push	word ptr [bx]
push	current_province
call	far ptr	59Dh:6A8h
add	sp, 4
mov	bx, [bp-4]
mov	ax, [bx]
mov	si, [bp-2]
mov	[si], ax
mov	ax, [bx]
mov	[bp-2],	ax
inc	byte ptr [bp-8]
add	word ptr [bp-4], 2
mov	bx, [bp-4]
cmp	word ptr [bx], 0
jnz	short loc_1ECED
mov	bx, [bp-2]
mov	word ptr [bx], 0
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	current_province
call	far ptr	525h:64h
add	sp, 2
mov	[bp-6],	al
mov	byte ptr [bp-8], 0
mov	bx, word_1CA9A
mov	al, [bx+20h]
mov	[bp-2],	al
mov	al, [bx+21h]
mov	[bp-4],	al
mov	al, [bp-8]
push	ax
lea	ax, [bp-4]
push	ax
lea	ax, [bp-2]
push	ax
call	far ptr	59Dh:2A8h
add	sp, 6
cmp	al, [bp-6]
jz	short near ptr loc_1ED89+1
inc	byte ptr [bp-8]
cmp	byte ptr [bp-8], 6
jb	short loc_1ED53
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bp-8]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	current_ruler
push	word ptr [bp+6]
call	loc_104F4
add	sp, 4
cmp	ax, 1
sbb	cx, cx
and	cl, 0F6h
add	cx, 0Fh
mov	[bp-6],	cx
cmp	ax, 1
cmc
sbb	cx, cx
and	cl, 0F6h
mov	[bp-4],	cx
or	ax, ax
jz	short loc_1EE01
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp+6]
cmp	al, [bx+21h]
jnz	short loc_1EDE1
mov	byte ptr [bx+21h], 0FFh
or	byte ptr [bx+7], 2
push	word ptr [bp+6]
call	far ptr	525h:6
add	sp, 2
mov	bx, current_ruler
cmp	al, [bx+21h]
jnz	short loc_1EE01
mov	byte ptr [bx+21h], 0FFh
mov	bx, current_ruler
or	byte ptr [bx+7], 2
push	current_ruler
push	word ptr [bp+6]
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jz	short loc_1EE2E
add	word ptr [bp-6], 5
sub	word ptr [bp-4], 5
sub	ax, ax
push	ax
push	current_ruler
push	word ptr [bp+6]
call	loc_10914
add	sp, 6
push	word ptr [bp-4]
push	current_ruler
call	far ptr	loc_128D6
add	sp, 4
push	word ptr [bp-6]
push	current_ruler
push	word ptr [bp+6]
call	far ptr	loc_128EB+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
push	word ptr [bp+6]
call	far ptr	525h:4Ah
mov	sp, bp
push	ax
call	far ptr	542h:0BAh
mov	sp, bp
or	ax, ax
jz	short near ptr loc_1EE76+1
push	word ptr [bp+6]
call	far ptr	542h:0A8h
mov	sp, bp
or	ax, ax
jz	short near ptr loc_1EE79+1
mov	ax, 1
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1EE7C		proc far		 /* DOS offset ---> 2653:C */

var_8		= byte ptr -8
var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 8
mov	bx, current_province
mov	ax, word ptr loc_1CA70
cmp	[bx+2],	ax
jnz	short near ptr loc_1EE92+2
mov	ax, 1
jmp	short near ptr loc_1EE92+4
;     ***************************************************************************
nop
sub	ax, ax
mov	[bp+var_2], ax
push	bx
push	cs
call	loc_1EE50
add	sp, 2
mov	[bp+var_4], ax
push	cs
call	near ptr loc_1ED37+3
mov	[bp+var_8], al
push	ax
push	cs
call	near ptr loc_1EC41+1
add	sp, 2
mov	ax, 3
push	ax
mov	ax, 7C1Fh
cwd
push	dx
push	ax
call	far ptr	4B5h:1F8h
add	sp, 6
mov	word_1CE96, 0Ch
mov	byte ptr word_1CB6B, 0
push	word_1CA9A
push	current_province
call	far ptr	unk_11E74
add	sp, 4
mov	al, byte_1CBCC
cmp	byte_1CB6A, al
jnz	short near ptr loc_1EF07+2
mov	bx, current_ruler
or	byte ptr [bx+7], 10h
push	current_province
call	far ptr	59Dh:50Eh
add	sp, 2
push	current_province
call	far ptr	4B5h:3F4h
add	sp, 2
cmp	[bp+var_2], 0
jz	short near ptr loc_1EF56+2
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	525h:158h
add	sp, 2
cmp	al, 1
jbe	short loc_1EF44
cmp	[bp+var_4], 0
jnz	short loc_1EF38
mov	ax, 1
push	ax
push	current_province
call	loc_13860+2
add	sp, 4
push	current_province
call	far ptr	60Dh:54Ch
add	sp, 2
push	current_province
call	loc_103AF+1
add	sp, 2
mov	bx, current_ruler
or	byte ptr [bx+7], 10h
mov	al, [bp+var_8]
push	ax
push	cs
call	near ptr loc_1EB36+2
add	sp, 2
push	word_1CA9A
call	far ptr	525h:4Ah
add	sp, 2
cmp	word_1CBA0, 0
jz	short near ptr loc_1EF9B+1
cmp	[bp+var_4], 0
jnz	short near ptr loc_1EF8A+1
mov	ax, 14h
imul	word ptr unk_1C980
mov	bx, ax
mov	word ptr [bx-3486h], 0
mov	al, 1
push	ax
push	cs
call	near ptr unk_1EABC
add	sp, 2
sub	al, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	ax
push	cs
call	loc_1ED92
add	sp, 2
mov	ax, [bp+var_4]
mov	word ptr loc_1CB8D+1, ax
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	bx, word_1CA9A
mov	[bx+11h], al
mov	al, 4
push	ax
push	word_1CA9A
call	loc_103F9+1
add	sp, 4
push	word_1CA9A
push	cs
call	loc_1EE50
mov	word ptr loc_1CB7A, ax
sub	al, al
mov	sp, bp
pop	bp
retf
s_1EE7C		endp		 /* DOS offset ---> 2653:C */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1EFDE		proc far		 /* DOS offset ---> 2669:E */

var_8		= word ptr -8
var_6		= byte ptr -6
var_4		= byte ptr -4

push	bp
mov	bp, sp
sub	sp, 8
sub	al, al
mov	[bp+var_4], al
mov	[bp+var_6], al
mov	ax, word ptr unk_1C980
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
mov	[bp+var_8], ax
mov	bl, [bp+var_6]
sub	bh, bh
add	bx, [bp+var_8]
shl	bx, 1
cmp	word ptr [bx-354Bh], 0
jz	short near ptr loc_1F032+1
mov	bx, word ptr unk_1C980
mov	ax, bx
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	al, [bp+var_6]
sub	ah, ah
add	bx, ax
shl	bx, 1
mov	ax, [bx-3533h]
or	ax, ax
jz	short near ptr loc_1F032+1
inc	[bp+var_4]
mov	bx, ax
mov	ax, [bx]
or	ax, ax
jnz	short near ptr loc_1F027+1
inc	[bp+var_6]
cmp	[bp+var_6], 6
jb	short loc_1EFFA
mov	al, [bp+var_4]
mov	sp, bp
pop	bp
retf
s_1EFDE		endp		 /* DOS offset ---> 2669:E */

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1F044		proc far		 /* DOS offset ---> 2670:4 */

var_6		= byte ptr -6
var_4		= byte ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 6
mov	word_1CBA0, 1
sub	al, al
push	ax
push	cs
call	s_1EABC		; *
add	sp, 2
push	current_province
push	word_1CA9A
call	far ptr	542h:192h
add	sp, 4
or	ax, ax
jz	short near ptr loc_1F07F+1
mov	word ptr unk_1C980, 0
mov	[bp+var_2], 0CB72h
mov	[bp+var_6], 0Ah
jmp	short near ptr loc_1F087+2
;     ***************************************************************************
nop
mov	[bp+var_2], 0CB86h
mov	[bp+var_6], 5
mov	bx, [bp+var_2]
push	word ptr [bx+4]
call	far ptr	525h:158h
add	sp, 2
mov	[bp+var_4], al
push	cs
call	s_1EFDE		; *
add	[bp+var_4], al
mov	al, [bp+var_6]
cmp	[bp+var_4], al
jb	short near ptr loc_1F0AF+1
sub	al, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bp+var_6]
sub	ah, ah
mov	cl, [bp+var_4]
sub	ch, ch
sub	ax, cx
push	ax
mov	ax, 5
push	ax
call	far ptr	561h:18Ah
mov	sp, bp
pop	bp
retf
s_1F044		endp		 /* DOS offset ---> 2670:4 */


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1F0CA		proc far		; DATA XREF: dseg:1F3D8  t Q_1F3EC+86  t		 /* DOS offset ---> 2678:A */

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
arg_0		= word ptr  6
arg_2		= byte ptr  8

; FUNCTION CHUNK AT F117 SIZE 0000001B BYTES

push	bp
mov	bp, sp
sub	sp, 8
push	word_1CA9A
call	far ptr	525h:4Ah
add	sp, 2
mov	[bp+var_8], ax
push	ax
push	[bp+arg_0]
call	loc_104F4
add	sp, 4
cmp	ax, 1
sbb	cx, cx
and	cl, 0F6h
add	cx, 0Fh
mov	[bp+var_6], cx
cmp	ax, 1
cmc
sbb	cx, cx
and	cl, 0F6h
mov	[bp+var_4], cx
or	ax, ax
jz	short near ptr unk_1F13F
push	[bp+var_8]
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp+arg_0]
cmp	al, [bx+21h]
jnz	short loc_1F124
mov	byte ptr [bx+21h], 0FFh
or	byte ptr [bx+7], 2
push	[bp+arg_0]
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp+var_8]
cmp	al, [bx+21h]
jnz	short near ptr unk_1F13F
mov	byte ptr [bx+21h], 0FFh
or	byte ptr [bx+7], 2
push	[bp+var_8]
push	[bp+arg_0]
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jz	short near ptr loc_1F169+1
add	[bp+var_6], 5
sub	[bp+var_4], 5
sub	ax, ax
push	ax
push	[bp+var_8]
push	[bp+arg_0]
call	loc_10914
add	sp, 6
push	[bp+var_4]
push	[bp+arg_0]
call	far ptr	loc_128D6
add	sp, 4
push	[bp+var_6]
push	[bp+arg_0]
push	[bp+var_8]
call	far ptr	loc_128EB+1
mov	sp, bp
pop	bp
retf
s_1F0CA		endp		 /* DOS offset ---> 2678:A */

;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ch
mov	ax, word ptr loc_1CE8F+3
mov	cx, 32h	; '2'
sub	dx, dx
div	cx
push	ax
push	word ptr [bp+6]
call	far ptr	loc_1290E
add	sp, 2
push	ax
call	far ptr	561h:18Ah
add	sp, 4
push	ax
mov	ax, 3E8h
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	cx, 32h	; '2'
mul	cx
mov	[bp-8],	ax
call	far ptr	60Dh:2E2h
mov	word ptr [bp-6], 0
sub	al, al
mov	[bp-2],	al
mov	[bp-0Ch], al
mov	al, 9
push	ax
push	word ptr [bp+6]
call	far ptr	59Dh:382h
add	sp, 4
mov	[bp-0Ah], al
or	al, al
jz	short near ptr loc_1F24A+2
mov	al, [bp+8]
cmp	[bp-2],	al
jnb	short near ptr loc_1F24A+2
mov	bl, [bp-0Ch]
sub	bh, bh
shl	bx, 1
mov	bx, [bx-314Eh]
mov	[bp-4],	bx
cmp	word ptr [bx+12h], 0BB8h
jb	short loc_1F241
push	bx
call	far ptr	542h:7Eh
add	sp, 2
or	ax, ax
jz	short loc_1F239
mov	bl, [bp-0Ch]
sub	bh, bh
shl	bx, 1
mov	word ptr [bx-3390h], 1
push	word ptr [bp-4]
call	far ptr	59Dh:700h
add	sp, 2
inc	byte ptr [bp-2]
mov	bx, [bp-4]
mov	ax, [bx+12h]
add	[bp-6],	ax
mov	ax, [bp-8]
cmp	[bp-6],	ax
ja	short near ptr loc_1F24A+2
inc	byte ptr [bp-0Ch]
mov	al, [bp-0Ah]
cmp	[bp-0Ch], al
jb	short loc_1F1EB
cmp	byte ptr [bp-2], 0
jz	short near ptr loc_1F256+2
mov	ax, [bp-6]
mov	word ptr unk_1CA9C, ax
mov	al, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
mov	word ptr [bp-4], 0CA62h
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-6],	ax
or	ax, ax
jnz	short loc_1F27A
jmp	near ptr loc_1F2F9+1
;     ***************************************************************************
mov	al, 4
push	ax
push	word ptr [bp-6]
push	cs
call	near ptr loc_1F189+1
add	sp, 4
mov	[bp-2],	al
or	al, al
jnz	short near ptr loc_1F293+1
add	word ptr [bp-4], 2
jmp	short near ptr loc_1F269+2
;     ***************************************************************************
push	current_ruler
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1F2D8+2
push	word_1CAE8
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1F2D8+2
call	far ptr	4B5h:290h
push	word ptr unk_1CA9C
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	bx, word_1CAE8
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0AAC4h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
mov	word ptr unk_1CA9C, 0
mov	al, [bp-2]
push	ax
sub	al, al
push	ax
push	word ptr [bp-6]
call	loc_125F1+1
add	sp, 6
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 0FFFBh
push	ax
push	word_1CAE8
call	far ptr	loc_128D6
add	sp, 4
mov	ax, 5
push	ax
push	word_1CAE8
push	current_ruler
call	far ptr	loc_128EB+1
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
mov	bx, [bp+6]
mov	bx, [bx]
mov	al, [bx+8]
shr	al, 1
add	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short loc_1F344
jmp	loc_1F3E6
;     ***************************************************************************
mov	word ptr [bp-4], 0CA62h
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-6],	ax
or	ax, ax
jnz	short loc_1F358
jmp	loc_1F3E6
;     ***************************************************************************
mov	al, 5
push	ax
push	word ptr [bp-6]
push	cs
call	near ptr loc_1F189+1
add	sp, 4
mov	[bp-2],	al
or	al, al
jnz	short near ptr loc_1F371+1
add	word ptr [bp-4], 2
jmp	short near ptr loc_1F348+1
;     ***************************************************************************
push	current_ruler
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1F3C1+1
push	word ptr [bp+6]
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1F3C1+1
call	far ptr	4B5h:290h
push	word_1CA9A
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	bx, [bp+6]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0AAFDh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
mov	al, [bp-2]
push	ax
mov	al, 1
push	ax
push	word ptr [bp-6]
call	loc_125F1+1
add	sp, 6
push	word ptr [bp+6]
push	cs
call	s_1F0CA		; *
add	sp, 2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Q_1F3EC		proc far

var_4		= word ptr -4
var_2		= word ptr -2
arg_2		= word ptr  6

; FUNCTION CHUNK AT F3FB SIZE 00000009 BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+arg_2]
mov	ax, [bx+2]
mov	word_13536, ax
call	far ptr	4B5h:290h ; game_gfx_buffer_main_data_window
mov	ax, 41
push	ax
mov	ax, 1
push	ax
mov	ax, 0AB38h
push	ax
call	far ptr	3EFh:9B2h ; game_input_query_display_and_query
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short near ptr loc_1F460+2
mov	al, byte ptr [bp+var_2]
dec	al
push	ax
call	far ptr	525h:76h ; game_data_get_province_num_data_address
add	sp, 2
mov	[bp+var_4], ax
push	ax
call	far ptr	525h:4Ah ; game_data_get_province_rulers_potrait_data
add	sp, 2
cmp	ax, [bp+arg_2]
jnz	short loc_1F3FB
sub	ax, ax
push	ax
push	[bp+var_4]
call	s_1251A		; *
add	sp, 4
or	ax, ax
jz	short loc_1F3FB
mov	al, 1
push	ax
push	[bp+var_4]
call	s_1273E		; *
add	sp, 4
or	ax, ax
jz	short loc_1F3FB
jmp	short loc_1F46E
;     ***************************************************************************
nop
mov	word_13536, 0
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	[bp+arg_2]
push	cs
call	s_1F0CA		; *
mov	word_13536, 0
mov	ax, 1
mov	sp, bp
pop	bp
retf
Q_1F3EC		endp


;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1F482		proc far		; DATA XREF: unkfunc_12804+1F  t		 /* DOS offset ---> 26B4:2 */

var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 4
mov	bx, current_ruler
mov	al, 29h	; ')'
mul	byte ptr [bx+1Eh]
add	ax, 2B34h
mov	[bp+var_2], ax
mov	byte ptr [bx+1Eh], 0FFh
mov	bx, current_ruler
and	byte ptr [bx+7], 0F7h
push	[bp+var_2]
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short near ptr unk_1F4F5
mov	ax, 1
push	ax
mov	bx, [bp+var_2]
push	word ptr [bx+2]
call	far ptr	loc_139C6
add	sp, 4
call	far ptr	4B5h:290h
push	word_1CA9A
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	bx, [bp+var_2]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0AB57h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
mov	[bp+var_4], 0
push	[bp+var_2]
call	far ptr	542h:0DAh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1F55C+2
sub	ax, ax
push	ax
push	[bp+var_2]
call	loc_1259D+1
add	sp, 4
or	al, al
jz	short near ptr loc_1F55C+2
push	[bp+var_2]
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_1F554
mov	ax, word_1CA9A
mov	word_13536, ax
mov	ax, 0ABB5h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:9D6h
or	ax, ax
jz	short near ptr loc_1F575+4
push	[bp+var_2]
push	cs
call	near ptr loc_1F3E8+4
add	sp, 2
mov	[bp+var_4], ax
jmp	short near ptr loc_1F575+4
;     ***************************************************************************
push	[bp+var_2]
push	cs
call	near ptr loc_1F321+1
jmp	short loc_1F54C
;     ***************************************************************************
nop
push	[bp+var_2]
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1F575+4
mov	ax, 0AB8Fh
push	ax
call	loc_1309B+1
add	sp, 2
cmp	[bp+var_4], 0
jnz	short loc_1F59E
mov	ax, 0FFFBh
push	ax
push	[bp+var_2]
call	far ptr	loc_128D6
add	sp, 4
mov	ax, 5
push	ax
push	[bp+var_2]
push	current_ruler
call	far ptr	loc_128EB+1
mov	ax, [bp+var_4]
mov	sp, bp
pop	bp
retf
s_1F482		endp		 /* DOS offset ---> 26B4:2 */

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
sub	ax, ax
push	ax
call	far ptr	59Dh:320h
add	sp, 2
mov	word ptr [bp-4], 0CAF8h
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_1F5CB
jmp	near ptr loc_1F6AA+2
;     ***************************************************************************
push	ax
push	current_ruler
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jz	short near ptr loc_1F614+1
mov	ax, [bp+6]
cmp	[bp-2],	ax
jz	short near ptr loc_1F614+1
push	word ptr [bp-2]
call	far ptr	542h:0DAh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1F614+1
push	word ptr [bp-2]
call	far ptr	542h:0BAh
add	sp, 2
cmp	ax, 1
sbb	ax, ax
neg	ax
push	ax
push	word ptr [bp-2]
call	loc_1259D+1
add	sp, 4
or	al, al
jnz	short loc_1F61C
add	word ptr [bp-4], 2
jmp	short loc_1F5BC
;     ***************************************************************************
nop
call	far ptr	4B5h:290h
push	word ptr [bp-2]
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1F64F+4
mov	bx, [bp-2]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, [bp+8]
add	ax, 1Ch
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0ABCEh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
mov	byte_1CE9C, 5
mov	ax, [bp+8]
mov	word_1CE9E, ax
mov	bx, [bp-2]
mov	cx, [bx+2]
mov	word_1CEA4, cx
push	ax
push	bx
call	far ptr	loc_12CD1+1
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
cmp	ax, 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
push	word ptr [bp+8]
push	current_province
call	far ptr	59Dh:6A8h
add	sp, 4
mov	bx, [bp+8]
mov	word ptr [bx], 0
mov	word_1CAE5, bx
mov	byte ptr loc_1CAB1+2, 2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
sub	ax, ax
push	ax
mov	al, 1
push	ax
mov	ax, 0AC17h
push	ax
call	loc_100A4
add	sp, 6
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_1F6EB+1
mov	ax, 0AC33h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:9D6h
or	ax, ax
jz	short near ptr loc_1F6B5+3
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, [bp+6]
cmp	[bp-2],	ax
jz	short near ptr loc_1F6B5+3
sub	ax, ax
push	ax
push	word ptr [bp-2]
call	loc_1259D+1
add	sp, 4
or	al, al
jnz	short loc_1F714
mov	ax, 0AC52h
push	ax
call	loc_1309B+1
add	sp, 2
jmp	short near ptr loc_1F6B5+3
;     ***************************************************************************
mov	ax, 0AC71h
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
mov	al, 2
push	ax
mov	al, 9
push	ax
push	word_1CA9A
call	far ptr	59Dh:382h
add	sp, 4
push	ax
mov	al, 3
push	ax
call	far ptr	60Dh:2F6h
add	sp, 0Ch
mov	word_1CE9E, ax
or	ax, ax
jnz	short loc_1F748
jmp	near ptr loc_1F6B5+3
;     ***************************************************************************
mov	byte_1CE9C, 5
mov	bx, [bp-2]
mov	ax, [bx+2]
mov	word_1CEA4, ax
push	word_1CE9E
push	bx
call	far ptr	loc_12CD1+1
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
cmp	ax, 1
sbb	al, al
neg	al
mov	byte_1CEA0, al
push	word_1CE9E
push	current_province
call	far ptr	59Dh:6A8h
mov	bx, word_1CE9E
mov	word ptr [bx], 0
mov	ax, word_1CE9E
mov	word_1CAE5, ax
mov	byte ptr loc_1CAB1+2, 2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1F79E		proc far		; DATA XREF: s_127A6+3A  t		 /* DOS offset ---> 26E5:E */

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

; FUNCTION CHUNK AT F829 SIZE 00000001 BYTES

push	bp
mov	bp, sp
sub	sp, 8
mov	ax, word_1CB86
mov	[bp+var_8], ax
push	current_ruler
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jnz	short near ptr unk_1F7C9
mov	al, 3
push	ax
push	current_province
call	game_view_data_order_set
add	sp, 4
mov	[bp+var_6], 2711h
mov	[bp+var_4], 0
mov	bx, current_province
mov	bx, [bx+2]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jz	short loc_1F810
push	ax
call	far ptr	542h:7Eh
add	sp, 2
or	ax, ax
jz	short loc_1F804
mov	bx, [bp+var_2]
mov	ax, [bp+var_6]
cmp	[bx+12h], ax
jnb	short loc_1F804
mov	[bp+var_4], bx
mov	ax, [bx+12h]
mov	[bp+var_6], ax
mov	bx, [bp+var_2]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jnz	short near ptr unk_1F7E3
cmp	[bp+var_4], 0
jnz	short loc_1F830
cmp	word ptr loc_1CB7A, 0
jnz	short loc_1F829
mov	ax, 0AC88h
push	ax
call	game_warning_display_text_and_sound
add	sp, 2
sub	ax, ax
mov	sp, bp
pop	bp
retf
s_1F79E		endp		 /* DOS offset ---> 26E5:E */

;     ***************************************************************************
nop
cmp	word ptr loc_1CB7A, 0
jnz	short near ptr loc_1F845+1
push	word ptr [bp-8]
push	cs
call	near ptr loc_1F6B1+1
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word ptr [bp-4]
push	word ptr [bp-8]
push	cs
call	near ptr loc_1F5A3+3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
call	loc_105B9+1
or	ax, ax
jnz	short near ptr loc_1F865+1
jmp	near ptr loc_1F8F2+2
;     ***************************************************************************
mov	bx, current_province
cmp	byte ptr [bx+17h], 32h ; '2'
jnb	short near ptr loc_1F871+2
jmp	near ptr loc_1F8F2+2
;     ***************************************************************************
cmp	word ptr [bx+8], 190h
jb	short near ptr loc_1F8F2+2
mov	byte ptr [bp-2], 0
push	word_1CEA6
call	far ptr	525h:0EEh
add	sp, 2
cmp	al, 64h	; 'd'
jnb	short loc_1F8DE
mov	bx, word_1CEA6
mov	ax, [bx+12h]
sub	ax, [bx+14h]
add	ax, 63h	; 'c'
mov	cx, 64h	; 'd'
sub	dx, dx
div	cx
mov	[bp-4],	ax
or	ax, ax
jz	short loc_1F8D5
push	bx
call	far ptr	59Dh:700h
add	sp, 2
mov	ax, [bp-4]
mov	bx, current_province
sub	[bx+8],	ax
mov	cx, 2710h
push	cx
mov	cx, 64h	; 'd'
mul	cx
push	ax
mov	ax, word_1CEA6
add	ax, 14h
push	ax
call	far ptr	49Ch:8Ch
add	sp, 6
call	loc_1C014
or	ax, ax
jnz	short near ptr loc_1F8EA+2
inc	byte ptr [bp-2]
mov	al, game_difficulty
cmp	[bp-2],	al
jbe	short near ptr loc_1F87D+1
jmp	short near ptr loc_1F8F2+2
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, current_province
mov	ax, [bx+2]
mov	[bp-2],	ax
or	ax, ax
jz	short loc_1F957
mov	bx, ax
mov	ax, [bx+12h]
mov	cx, 100
sub	dx, dx
div	cx
inc	ax
mov	[bp-4],	ax
push	word ptr unk_1CA9C
mov	cl, byte ptr loc_1CB71
sub	ch, ch
push	cx
push	ax
mov	al, [bx+16h]
sub	ah, ah
push	ax
call	far ptr	49Ch:0C6h
add	sp, 8
mov	byte ptr loc_1CB71, al
mov	ax, [bp-4]
add	word ptr unk_1CA9C, ax
mov	bx, [bp-2]
mov	word ptr [bx+12h], 0
mov	byte ptr [bx+16h], 100
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_1F90D+1
cmp	word ptr unk_1CA9C, 0
jz	short loc_1F966
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
cmp	word ptr unk_1CA9C, 0
jnz	short loc_1F993
mov	al, 21h	; '!'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1F98C+2
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	byte ptr loc_1CB71, 0
push	cs
call	near ptr loc_1F8F8+2
push	word_1CEA6
call	far ptr	59Dh:700h
add	sp, 2
mov	al, 2
push	ax
push	current_province
call	loc_103F9+1
add	sp, 4
mov	al, 5
push	ax
push	current_province
call	loc_103F9+1
add	sp, 4
mov	byte ptr [bp-4], 3Ch ; '<'
mov	bx, current_province
mov	ax, [bx+2]
mov	[bp-2],	ax
cmp	word ptr unk_1CA9C, 0
jz	short near ptr loc_1FA45+1
or	ax, ax
jz	short near ptr loc_1FA45+1
mov	bx, ax
cmp	word ptr [bx], 0
jnz	short near ptr loc_1F9E1+4
mov	byte ptr [bp-4], 100
mov	al, [bp-4]
sub	ah, ah
push	ax
push	word ptr unk_1CA9C
call	far ptr	49Ch:32h
add	sp, 4
push	ax
mov	ax, 100
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	[bp-6],	ax
mov	al, byte ptr loc_1CB71
mov	bx, [bp-2]
mov	[bx+16h], al
mov	ax, 100
mul	word ptr [bp-6]
mov	[bx+12h], ax
mov	ax, [bp-6]
sub	word ptr unk_1CA9C, ax
cmp	ax, 100
jnb	short loc_1FA37
mov	al, 100
push	ax
mov	al, 0Ah
push	ax
lea	ax, [bp-4]
push	ax
call	far ptr	49Ch:48h
add	sp, 6
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
cmp	word ptr unk_1CA9C, 0
jnz	short loc_1F9D6
call	unk_1C06C
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	current_province
call	far ptr	loc_1290E
add	sp, 2

loc_2FA62:				; DATA XREF: dseg:3539  w		 /* DOS offset ---> 2712:2 */
mov	[bp-4],	ax
mov	ax, 5
push	ax
mov	ax, 2
push	ax
mov	ax, 100
cwd
push	dx
push	ax
mov	bx, current_province
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
push	ax
call	far ptr	49Ch:0Ah
add	sp, 6
mov	[bp-6],	ax
cmp	ax, [bp-4]
jnb	short near ptr loc_1FA92+4
jmp	near ptr loc_1FB22+2
;     ***************************************************************************
mov	bx, current_province
push	word ptr [bx+0Eh]
call	far ptr	0:1B0h
add	sp, 2
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
shl	ax, 1
cmp	ax, [bp-4]
jnb	short loc_1FACE
mov	bx, current_province
mov	al, [bx+16h]
mov	cl, 5
sub	ah, ah
div	cl
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1FB22+2
mov	bx, current_province
mov	ax, [bx+8]
mov	cx, 0Fh
sub	dx, dx
div	cx
push	ax
call	loc_10F4A
push	ax
mov	ax, [bp-4]
shl	ax, 1
sub	ax, [bp-6]
neg	ax
push	ax
call	far ptr	561h:18Ah
add	sp, 4
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	[bp-2],	ax
cmp	ax, 0Ah
jbe	short near ptr loc_1FB22+2
push	ax
call	loc_11091+1
add	sp, 2
mov	ax, [bp-2]
mov	word ptr unk_1CA9C, ax
mov	byte ptr loc_1CB71, 0Ah
push	cs
call	near ptr loc_1F96B+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_ai_training proc far

var_2		= byte ptr -2

; FUNCTION CHUNK AT FB6A SIZE 0000000E BYTES

push	bp
mov	bp, sp
sub	sp, 2
mov	[bp+var_2], 0
mov	bx, word_1CEA6
cmp	byte ptr [bx+16h], 100 ; compare training
jnb	short near ptr loc_1FB51+2
push	bx
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
push	word_1CEA6
call	far ptr	loc_1102D+1 ; game_mil_train_soldiers_train_func
add	sp, 2
call	game_give_population_sub
or	ax, ax
jnz	short loc_1FB6A
inc	[bp+var_2]
mov	al, game_difficulty
cmp	[bp+var_2], al
jbe	short near ptr loc_1FB33+1
jmp	short loc_1FB72
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
game_ai_training endp

;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+6]
mov	al, [bx+4]
mov	[bp-4],	al
mov	bx, current_province
mov	ax, [bx+2]
or	ax, ax
jz	short near ptr unk_1FBB2
mov	bx, ax
mov	al, [bx+4]
sub	ah, ah
inc	ax
mov	cl, [bp-4]
sub	ch, ch
cmp	ax, cx
jl	short near ptr unk_1FBAC
mov	ax, [bx]
or	ax, ax
jnz	short locret_1FB92
jmp	short near ptr unk_1FBB2
;     ***************************************************************************
nop
mov	ax, bx
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	al, 90
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1FC05+3
mov	bx, current_ruler
mov	ax, [bx+4]
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr loc_1FC05+3
push	current_province
push	ax
call	far ptr	542h:15Ah
add	sp, 4
or	ax, ax
jz	short near ptr loc_1FC05+3
push	word ptr [bp-4]
push	cs
call	loc_1FB78
add	sp, 2
or	ax, ax
jz	short near ptr loc_1FC05+3
mov	bx, ax
inc	byte ptr [bx+4]
call	unk_1C06C
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_1FC0E		proc far		; DATA XREF: s_1FC80+21  t		 /* DOS offset ---> 272C:E */

var_4		= word ptr -4
var_2		= word ptr -2

; FUNCTION CHUNK AT FBF2 SIZE 000000B9 BYTES
; FUNCTION CHUNK AT FCAC SIZE 00000013 BYTES
; FUNCTION CHUNK AT FCC0 SIZE 00000065 BYTES

push	bp
mov	bp, sp
sub	sp, 2
mov	bx, current_province
mov	ax, [bx+2]
mov	[bp+var_2], ax
push	ax
call	far ptr	542h:1D8h ; game_data_check_if_home_province
add	sp, 2
or	ax, ax
jz	short loc_1FC33
mov	bx, [bp+var_2]
mov	ax, [bx]
mov	[bp+var_2], ax
cmp	[bp+var_2], 0
jz	short loc_1FC7A
mov	bx, [bp+var_2]
cmp	byte ptr [bx+0Bh], 100
jz	short near ptr loc_1FC63+1
push	bx
call	far ptr	525h:84h ; s_52D4
add	sp, 2
dec	al
jz	short loc_1FC72
mov	al, 120
mov	bx, [bp+var_2]
sub	al, [bx+0Bh]
push	ax
call	far ptr	57Ch:0DCh ; s_589C
add	sp, 2
or	ax, ax
jnz	short loc_1FC72
mov	bx, [bp+var_2]
mov	ax, [bx]
mov	[bp+var_2], ax
or	ax, ax
jnz	short near ptr loc_1FC36+3
jmp	short loc_1FC7A
;     ***************************************************************************
mov	ax, [bp+var_2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
s_1FC0E		endp		 /* DOS offset ---> 272C:E */


;     *************** S U B	R O U T	I N E     ***************************************


s_1FC80		proc far		 /* DOS offset ---> 2734:0 */

; FUNCTION CHUNK AT FD50 SIZE 00000107 BYTES
; FUNCTION CHUNK AT FE58 SIZE 00000023 BYTES

push	bp		; (3 * gen war - gen chr + trust) * (100 - gen loy) / ((difficulty + 3)	* 50))
mov	bp, sp
sub	sp, 6
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	542h:58h ; game_data_get_general_action
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1FC9E+2
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	cs
call	s_1FC0E
mov	[bp-4],	ax
or	ax, ax
jnz	short near ptr loc_1FCAD+1
jmp	loc_1FD5A
;     ***************************************************************************
mov	bx, current_province
cmp	byte ptr [bx+19h], 0
jz	short loc_1FD12
mov	word ptr [bp-2], 0
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	al, 100
push	ax
push	word ptr [bp-2]
push	word ptr [bp-4]
call	game_reward_func_calc
add	sp, 4
mov	cl, game_difficulty
push	cx
mov	[bp-6],	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2
add	al, [bp-6]
inc	al
push	ax
mov	ax, [bp-4]
add	ax, 11
push	ax
call	far ptr	49Ch:48h ; game_data_prov_move_next_free_general_pointer
add	sp, 6
cmp	word ptr [bp-2], 0
jnz	short loc_1FD50
mov	bx, current_province
dec	byte ptr [bx+19h]
jmp	short loc_1FD5A
;     ***************************************************************************
nop
mov	ax, 100
push	ax
mov	bx, [bp-4]
mov	cl, [bx+0Bh]
sub	ch, ch
sub	ax, cx
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
push	ax
mov	bx, current_province
push	word ptr [bx+8]
call	far ptr	561h:18Ah ; math_truncate_decimal_value
add	sp, 4
push	ax
call	far ptr	561h:18Ah ; math_truncate_decimal_value
add	sp, 4
mov	[bp-2],	ax
cmp	ax, 0Ah
jb	short near ptr loc_1FD48+4
jmp	loc_1FCBD
;     ***************************************************************************
jmp	loc_1FC99
;     ***************************************************************************
nop
mov	ax, [bp-2]
mov	bx, current_province
sub	[bx+8],	ax
call	s_1C06C
mov	sp, bp
pop	bp
retf
s_1FC80		endp		 /* DOS offset ---> 2734:0 */

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
mov	bx, current_province
cmp	word ptr [bx+6], 0
jnz	short loc_1FD77
jmp	loc_1FDFE
;     ***************************************************************************
push	word_1CEA6
call	far ptr	59Dh:700h
add	sp, 2
push	word_1CEA6
push	current_province
call	loc_12DAC
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1FDF4+1
push	word_1CEA6
push	current_province
call	far ptr	loc_10C0A
add	sp, 4
mov	bx, ax
mov	[bp-6],	bx
mov	ax, [bx]
mov	[bp-2],	ax
push	bx
mov	bx, current_province
push	word ptr [bx+6]
call	far ptr	59Dh:7Eh
add	sp, 4
mov	[bp-4],	ax
or	ax, ax
jnz	short near ptr loc_1FDDD+1
mov	ax, [bp-2]
mov	bx, current_province
mov	[bx+6],	ax
jmp	short near ptr loc_1FDE4+2
;     ***************************************************************************
nop
mov	ax, [bp-2]
mov	bx, [bp-4]
mov	[bx], ax
push	word ptr [bp-6]
push	current_province
call	far ptr	59Dh:190h
add	sp, 4
call	loc_1C014
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, current_province
cmp	word ptr [bx+4], 0
jz	short near ptr loc_1FE60+2
mov	ax, [bx+4]
mov	[bp-2],	ax
push	word_1CEA6
call	far ptr	59Dh:700h
add	sp, 2
mov	al, 3
push	ax
push	word_1CEA6
push	word ptr [bp-2]
call	loc_12F3E
add	sp, 6
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1FE58
push	word_1CEA6
push	word ptr [bp-2]
push	current_province
call	far ptr	loc_10CCE
add	sp, 6
call	loc_1C014
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
call	loc_105B9+1
or	ax, ax
jnz	short locret_1FE7A
jmp	near ptr loc_1FF05+1
;     ***************************************************************************
mov	bx, current_province
mov	al, [bx+19h]
mov	cl, 3
sub	ah, ah
div	cl
add	al, 3Ch	; '<'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1FF05+1
mov	bx, current_province
cmp	word ptr [bx+8], 1F4h
jbe	short near ptr loc_1FF05+1
cmp	byte ptr [bx+16h], 46h ; 'F'
jbe	short near ptr loc_1FF05+1
mov	ax, [bx+8]
mov	cx, 32h	; '2'
cwd
idiv	cx
push	ax
call	far ptr	0:1B0h
add	sp, 2
push	ax
mov	bx, current_province
mov	al, [bx+19h]
sub	ah, ah
sub	ax, 64h	; 'd'
neg	ax
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	[bp-2],	al
or	al, al
jz	short near ptr loc_1FF05+1
push	word_1CEA6
call	far ptr	59Dh:700h
add	sp, 2
mov	al, [bp-2]
mov	bx, current_province
add	[bx+19h], al
sub	ah, ah
mov	cx, 0FF9Ch
mul	cx
mov	bx, current_province
add	[bx+8],	ax
call	loc_1C014
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	di
push	si
call	loc_105B9+1
or	ax, ax
jnz	short loc_1FF20
jmp	loc_1FFEA
;     ***************************************************************************
mov	ax, 5
cwd
push	dx
push	ax
mov	bx, current_province
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
push	current_province
mov	si, ax
mov	di, dx
call	far ptr	525h:122h
add	sp, 2
cmp	di, dx
jge	short near ptr loc_1FF4A+2
jmp	loc_1FFEA
;     ***************************************************************************
jg	short near ptr loc_1FF54+1
cmp	si, ax
ja	short near ptr loc_1FF54+1
jmp	loc_1FFEA
;     ***************************************************************************
mov	ax, 4
cwd
push	dx
push	ax
mov	bx, current_province
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	[bp-8],	ax
mov	[bp-6],	dx
mov	bx, current_province
mov	cl, [bx+1Bh]
sub	ch, ch
mov	si, ax
mov	ax, 7530h
sub	ax, [bx+8]
mov	bx, dx
mul	cx
cmp	dx, bx
jg	short near ptr loc_1FF93+2
jl	short near ptr loc_1FF8D+2
cmp	ax, si
jnb	short near ptr loc_1FF93+2
mov	[bp-8],	ax
mov	[bp-6],	dx
cmp	word ptr [bp-6], 0
jl	short loc_1FFEA
jg	short near ptr loc_1FFA2+2
cmp	word ptr [bp-8], 0C8h ;	'  *'
jbe	short loc_1FFEA
push	word_1CEA6
call	far ptr	59Dh:700h
add	sp, 2
mov	bx, current_province
mov	al, [bx+1Bh]
sub	ah, ah
sub	dx, dx
push	dx
push	ax
push	word ptr [bp-6]
push	word ptr [bp-8]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	bx, current_province
add	[bx+8],	ax
mov	ax, [bp-8]
mov	dx, [bp-6]
mov	bx, current_province
sub	[bx+0Ah], ax
sbb	[bx+0Ch], dx
call	loc_1C014
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	si
pop	di
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

game_give_population proc far

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2

push	bp
mov	bp, sp
sub	sp, 6
mov	ax, 150
cwd
push	dx
push	ax
mov	bx, current_province
push	word ptr [bx+0Ch]
push	word ptr [bx+0Ah]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/	; math_divide_2_16bit_values
mov	[bp+var_6], ax
push	current_province
call	game_data_get_province_total_soldiers
add	sp, 2
mov	[bp+var_2], ax
mov	bx, current_province
cmp	byte ptr [bx+17h], 100
jnb	short loc_300A8
add	ax, 20
cmp	ax, [bp+var_6]
jnb	short loc_300A8
mov	ax, [bp+var_6]
sub	ax, [bp+var_2]
push	ax
mov	al, [bx+17h]
sub	ah, ah
sub	ax, 120
neg	ax
push	ax
call	far ptr	561h:18Ah ; math_truncate_decimal_value
add	sp, 4
push	ax
mov	ax, 100
push	ax
call	far ptr	561h:18Ah ; math_truncate_decimal_value
add	sp, 4
mov	cx, 100
mul	cx
mov	[bp+var_4], ax
push	word_1CEA6
call	far ptr	59Dh:700h ; game_data_set_general_action_02
add	sp, 2
mov	al, 100
push	ax
push	[bp+var_4]
push	word_1CEA6
call	game_give_population_calc
add	sp, 4
push	ax
mov	ax, current_province
add	ax, 23
push	ax
call	far ptr	49Ch:48h ; game_data_prov_move_next_free_general_pointer
add	sp, 6
mov	ax, [bp+var_4]
sub	dx, dx
mov	bx, current_province
sub	[bx+0Ah], ax
sbb	[bx+0Ch], dx
call	game_give_population_sub
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
nop

loc_300A8:				; DATA XREF: game_give_population+35  t		 /* DOS offset ---> 2776:8 */
; game_give_population+3D  t
sub	ax, ax
;     ***************************************************************************
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
game_give_population endp

;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, current_province
push	word ptr [bx+8]
call	far ptr	0:1B0h
add	sp, 2
cwd
sub	ax, dx
sar	ax, 1
mov	[bp-2],	ax
mov	al, game_difficulty
sub	ah, ah
shl	ax, 1
shl	ax, 1
cmp	ax, [bp-2]
jbe	short wait_entry_004
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, 100
push	ax
push	word ptr [bp-2]
push	word_1CEA6
call	dword ptr [bp+8]
add	sp, 4
push	ax
push	word ptr [bp+6]
call	far ptr	49Ch:48h
add	sp, 6
push	word_1CEA6
call	far ptr	59Dh:700h
add	sp, 2
mov	ax, [bp-2]
mov	bx, current_province
sub	[bx+8],	ax
call	loc_1C014
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, current_province
mov	al, [bx+18h]
mov	[bp-2],	al
cmp	al, 100
jnb	short near ptr loc_10162+2
sub	ah, ah
cmp	[bx+8],	ax
jbe	short near ptr loc_10162+2
mov	al, 105
sub	al, [bp-2]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_10162+2
mov	ax, 166h
mov	dx, 1066h
push	dx
push	ax
mov	ax, current_province
add	ax, 18h
push	ax
push	cs
call	KB_Read_Buffer_Retf
add	sp, 6
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, current_province
mov	al, [bx+16h]
mov	[bp-2],	al
cmp	al, 64h	; 'd'
jnb	short near ptr loc_101B1+1
sub	ah, ah
cmp	[bx+8],	ax
jbe	short near ptr loc_101B1+1
mov	al, 6Eh	; 'n'
sub	al, [bp-2]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_101B1+1
mov	ax, 18Ch
mov	dx, 1066h
push	dx
push	ax
mov	ax, current_province
add	ax, 16h
push	ax
push	cs
call	KB_Read_Buffer_Retf
add	sp, 6
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	bx, [bp+8]
mov	ax, [bx+12h]
mov	[bp-4],	ax
mov	word ptr [bx+12h], 0
mov	byte ptr [bx+16h], 64h ; 'd'
mov	bx, [bp+6]
mov	ax, [bx+2]
mov	[bp-2],	ax
or	ax, ax
jz	short locret_10212
cmp	word ptr [bp-4], 0
jz	short locret_10212
cmp	[bp+8],	ax
jz	short loc_10206
push	word ptr [bp-4]
mov	ax, 2710h
mov	bx, [bp+8]
sub	ax, [bx+12h]
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	bx, [bp+8]
add	[bx+12h], ax
sub	[bp-4],	ax
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_101DD
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	bx, current_province
push	word ptr [bx+2]
call	far ptr	525h:158h
add	sp, 2
cmp	al, 6
jnb	short near ptr loc_10232+1
jmp	loc_10353
;     ***************************************************************************
mov	bx, current_province
mov	bx, [bx+2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jz	short near ptr loc_10281+1
mov	bx, ax
cmp	byte ptr [bx+0Bh], 64h ; 'd'
jnz	short locret_10276
push	bx
call	far ptr	60Dh:416h
add	sp, 2
cmp	al, 50h	; 'P'
jnb	short locret_10276
push	word ptr [bp-2]
call	far ptr	542h:58h
add	sp, 2
or	ax, ax
jz	short locret_10276
mov	bx, [bp-2]
mov	si, word_13396
mov	ax, [si+10h]
test	[bx+10h], ax
jz	short near ptr loc_10281+1
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_10243
cmp	word ptr [bp-2], 0
jnz	short loc_1028B
jmp	loc_10353
;     ***************************************************************************
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	[bp-6],	al
mov	byte ptr [bp-8], 0
mov	bx, word_1CEA4
mov	ax, [bx+2]
or	ax, ax
jz	short loc_102C2
mov	bx, ax
test	byte ptr [bx+2], 2
jz	short near ptr loc_102BB+1
mov	al, [bp-6]
cmp	[bx+0Dh], al
jnz	short near ptr loc_102BB+1
inc	byte ptr [bp-8]
mov	ax, [bx]
or	ax, ax
jnz	short loc_102A9
mov	bx, word_1CEA4
push	word ptr [bx+2]
call	far ptr	525h:158h
add	sp, 2
shr	al, 1
shr	al, 1
cmp	al, [bp-8]
jb	short loc_10353
push	word ptr [bp-2]
push	current_province
call	far ptr	59Dh:6A8h
add	sp, 4
mov	bx, [bp-2]
and	byte ptr [bx+2], 0F7h
and	byte ptr [bx+3], 0Fh
mov	si, current_ruler
cmp	[si+4],	bx
jnz	short loc_10304
mov	bx, si
mov	word ptr [bx+4], 0
mov	bx, [bp-2]
test	byte ptr [bx+2], 2
jz	short near ptr loc_1031F+1
push	bx
push	word_1CEA4
call	far ptr	59Dh:190h
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bx
push	current_province
push	cs
call	loc_101B8
add	sp, 4
mov	bx, [bp-2]
mov	al, [bx+0Ah]
mov	[bx+0Dh], al
mov	al, [bx+0Ch]
mov	[bx+0Eh], al
mov	byte ptr [bx+0Ah], 0FFh
push	bx
push	word_1CEA4
call	far ptr	59Dh:58Eh
add	sp, 4
mov	bx, [bp-2]
or	byte ptr [bx+2], 2
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ch
push	current_ruler
call	loc_1296A
add	sp, 2
mov	[bp-0Ah], al
mov	word ptr [bp-8], 0
mov	bx, current_ruler
mov	ax, [bx+2]
mov	[bp-0Ch], ax
or	ax, ax
jnz	short loc_10383
jmp	near ptr loc_1047C+1
;     ***************************************************************************
push	ax
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short near ptr loc_10392+1
jmp	near ptr loc_1046D+1
;     ***************************************************************************
mov	bx, [bp-0Ch]
mov	bx, [bx+2]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jnz	short loc_103A5
jmp	near ptr loc_1046D+1
;     ***************************************************************************
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-2],	ax
test	byte ptr [bx+2], 2
jz	short loc_1040A
test	byte ptr [bx+2], 20h
jz	short near ptr loc_103BE+2
mov	byte ptr [bp-6], 64h ; 'd'
jmp	short near ptr loc_1041B+1
;     ***************************************************************************
nop
mov	al, [bp-0Ah]
mov	[bp-6],	al
mov	al, 29h	; ')'
mul	byte ptr [bx+0Dh]
add	ax, 2B34h
push	ax
call	loc_1296A
add	sp, 2
sub	ah, ah
mov	bx, [bp-4]
mov	cl, [bx+4]
sub	ch, ch
add	ax, cx
cwd
sub	ax, dx
sar	ax, 1
push	ax
lea	ax, [bp-6]
push	ax
call	far ptr	49Ch:6Ch
add	sp, 4
mov	al, 5
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	cl, [bp-6]
shl	cl, 1
add	al, cl
jmp	short near ptr loc_10418+1
;     ***************************************************************************
nop
test	byte ptr [bx+3], 0F0h
jz	short near ptr loc_10460+1
mov	al, [bp-0Ah]
mov	cl, 3
sub	ah, ah
div	cl
mov	[bp-6],	al
mov	al, [bp-6]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_10460+1
push	word ptr [bp-4]
push	word ptr [bp-0Ch]
push	cs
call	loc_101B8
add	sp, 4
mov	bx, [bp-4]
test	byte ptr [bx+2], 2
jz	short near ptr loc_10460+1
push	bx
push	word ptr [bp-0Ch]
call	far ptr	59Dh:6A8h
add	sp, 4
push	word ptr [bp-4]
push	word ptr [bp-0Ch]
call	far ptr	59Dh:190h
add	sp, 4
mov	word ptr [bp-8], 1
mov	ax, [bp-2]
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr loc_1046D+1
jmp	loc_103A5
;     ***************************************************************************
mov	bx, [bp-0Ch]
mov	ax, [bx]
mov	[bp-0Ch], ax
or	ax, ax
jz	short near ptr loc_1047C+1
jmp	loc_10383
;     ***************************************************************************
cmp	word ptr [bp-8], 0
jz	short loc_10488
call	unk_1C06C
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	word ptr [bp-8], 0
mov	byte ptr [bp-6], 0
mov	ax, current_province
mov	[bp-0Ah], ax
or	ax, ax
jz	short loc_104ED
mov	bx, ax
mov	ax, [bx+2]
mov	[bp-2],	ax
or	ax, ax
jz	short loc_104E1
push	ax
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jnz	short loc_104D5
mov	bx, [bp-2]
mov	al, [bx+4]
cmp	al, 50h	; 'P'
jb	short loc_104D5
cmp	[bp-6],	al
jnb	short loc_104D5
mov	[bp-6],	al
mov	ax, bx
mov	[bp-8],	ax
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_104B0+1
mov	bx, [bp-0Ah]
mov	ax, [bx]
mov	[bp-0Ah], ax
or	ax, ax
jnz	short near ptr loc_104A4+1
cmp	word ptr [bp-8], 0
jz	short near ptr loc_104FC+1
mov	ax, [bp-8]
mov	bx, current_ruler
mov	[bx+4],	ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	cs
call	near ptr loc_1048A+2
push	cs
call	loc_10358
retf
;     ***************************************************************************
nop
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, current_ruler
mov	ax, [bx+2]
mov	[bp-4],	ax
or	ax, ax
jz	short loc_10568
push	ax
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_1055C
push	word ptr [bp-4]
call	loc_103AF+1
add	sp, 2
mov	bx, [bp-4]
mov	ax, [bx+2]
mov	[bp-2],	ax
or	ax, ax
jz	short loc_1055C
push	ax
call	far ptr	59Dh:700h
add	sp, 2
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_10547
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jnz	short loc_10522
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ah
push	current_ruler
call	far ptr	525h:6
add	sp, 2
mov	[bp-4],	al
mov	bx, word_1CAF0
mov	ax, [bx+2]
mov	[bp-6],	ax
push	ax
push	bx
call	far ptr	59Dh:52Eh
add	sp, 4
mov	al, [bp-4]
mov	bx, [bp-6]
mov	[bx+10h], al
mov	al, 0FFh
mov	[bx+14h], al
mov	[bx+15h], al
and	byte ptr [bx+12h], 0FBh
mov	ax, [bx+2]
mov	[bp-2],	ax
or	ax, ax
jz	short loc_1060E
push	ax
call	far ptr	59Dh:0BEh
add	sp, 2
mov	al, [bp-4]
mov	bx, [bp-2]
mov	[bx+0Ah], al
mov	byte ptr [bx+0Ch], 1
mov	al, 14h
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
push	word_13396
push	word ptr [bp-2]
mov	[bp-0Ah], ax
call	far ptr	60Dh:630h
add	sp, 4
mov	cl, 5Ah	; 'Z'
mul	cl
push	ax
call	far ptr	0:1B0h
add	sp, 2
shr	al, 1
sub	al, 64h	; 'd'
neg	al
sub	al, [bp-0Ah]
mov	bx, [bp-2]
mov	[bx+0Bh], al
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_105B5+1
push	word ptr [bp-6]
push	current_ruler
call	far ptr	59Dh:49Ch
add	sp, 4
push	word ptr [bp-6]
call	far ptr	4B5h:3F4h
add	sp, 2
mov	bx, word_1CAF0
mov	word ptr [bx], 0
push	word_1CAF0
call	far ptr	525h:6
mov	bl, al
sub	bh, bh
mov	[bx+3360h], bh
dec	byte_10047
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
mov	byte ptr [bp-4], 0
mov	ax, [bp+6]
cwd
xor	ax, dx
sub	ax, dx
mov	cx, 3
sar	ax, cl
xor	ax, dx
sub	ax, dx
mov	[bp-6],	ax
mov	ax, 612h
push	ax
mov	ax, 0C832h
push	ax
push	word ptr [bp+8]
push	word ptr [bp-6]
call	far ptr	0:0FFCh
add	sp, 8
mov	ax, 1
push	ax
mov	al, [bp-4]
sub	ah, ah
mov	cx, 144h
mul	cx
push	ax
push	word ptr loc_1CA60
mov	ax, 12h
push	ax
mov	cx, 6
push	cx
push	word ptr [bp+8]
push	word ptr [bp-6]
call	far ptr	0:1DBEh
add	sp, 0Eh
mov	ax, 5
push	ax
call	far ptr	57Ch:5Eh
add	sp, 2
mov	ax, 0C832h
push	ax
sub	ax, ax
push	ax
mov	ax, 12h
push	ax
mov	ax, 6
push	ax
push	word ptr [bp+8]
push	word ptr [bp-6]
call	far ptr	0:1627h
add	sp, 0Ch
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 3
jb	short loc_10668
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
cmp	word ptr [bp+6], 0
jnz	short near ptr loc_106F3+1
cmp	word ptr [bp+8], 0
jnz	short near ptr loc_106F3+1
mov	al, 32h	; '2'
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 63h	; 'c'
push	ax
mov	ax, 1
push	ax
mov	ax, [bp+8]
add	ax, [bp+6]
push	ax
mov	ax, 64h	; 'd'
push	ax
push	word ptr [bp+6]
call	far ptr	49Ch:0Ah
add	sp, 6
push	ax
call	far ptr	561h:19Ch
add	sp, 4
push	ax
call	far ptr	561h:18Ah
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	ax, 1Fh
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 55h	; 'U'
push	ax
mov	bx, [bp+6]
mov	ax, [bx+12h]
mov	cx, 64h	; 'd'
sub	dx, dx
div	cx
inc	ax
push	ax
call	far ptr	49Ch:32h
add	sp, 4
mov	[bp-2],	al
mov	ax, 3
push	ax
call	far ptr	49Ch:178h
add	sp, 2
push	word ptr [bp+0Ah]
push	word ptr [bp+8]
mov	cl, [bp-2]
sub	ch, ch
push	cx
mov	si, ax
call	far ptr	49Ch:0Ah
add	sp, 6
lea	cx, [si+3]
sub	dx, dx
div	cx
add	al, [bp+0Ch]
mov	[bp-6],	al
mov	bx, [bp+6]
push	word ptr [bx+12h]
mov	ax, 64h	; 'd'
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	cx, ax
mov	al, 64h	; 'd'
mul	byte ptr [bp-6]
add	cx, ax
push	cx
call	far ptr	561h:18Ah
add	sp, 4
mov	[bp-4],	ax
push	word ptr [bp+6]
call	far ptr	525h:0EEh
add	sp, 2
sub	ah, ah
push	ax
push	word ptr [bp-4]
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+6]
sub	[bx+14h], ax
push	word ptr [bp-4]
lea	ax, [bx+12h]
push	ax
mov	si, ax
call	far ptr	49Ch:0AAh
add	sp, 4
cmp	word ptr [si], 0
jnz	short near ptr loc_107E8+1
mov	bx, [bp+6]
mov	byte ptr [bx+16h], 64h ; 'd'
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Eh
mov	ax, [bp+8]
mov	cx, ax
mul	cx
mov	[bp-4],	ax
mov	ax, [bp+6]
mov	bx, ax
mul	bx
mov	[bp-2],	ax
add	ax, [bp-4]
mov	[bp-6],	ax
mov	ax, cx
mov	dx, bx
shl	bx, 1
add	bx, dx
sub	dx, dx
div	bx
inc	al
mov	[bp-0Ah], al
mov	ax, [bp+6]
mov	dx, cx
shl	cx, 1
add	cx, dx
sub	dx, dx
div	cx
inc	al
mov	[bp-0Eh], al
mov	word ptr [bp-0Ch], 0CB72h
mov	ax, word ptr loc_1CB76
mov	[bp-8],	ax
or	ax, ax
jz	short loc_10860
mov	al, [bp-0Ah]
push	ax
push	word ptr [bp-6]
push	word ptr [bp-4]
push	word ptr [bp-8]
push	cs
call	loc_10726
add	sp, 8
mov	bx, [bp-8]
mov	ax, [bx]
mov	[bp-8],	ax
or	ax, ax
jnz	short loc_10840
add	word ptr [bp-0Ch], 0Ah
mov	bx, [bp-0Ch]
mov	ax, [bx+4]
mov	[bp-8],	ax
or	ax, ax
jz	short near ptr loc_10890+1
mov	al, [bp-0Ah]
push	ax
push	word ptr [bp-6]
push	word ptr [bp-4]
push	word ptr [bp-8]
push	cs
call	loc_10726
add	sp, 8
mov	bx, [bp-8]
mov	ax, [bx]
mov	[bp-8],	ax
or	ax, ax
jnz	short loc_10871
add	word ptr [bp-0Ch], 0Ah
mov	bx, [bp-0Ch]
mov	ax, [bx+4]
mov	[bp-8],	ax
or	ax, ax
jz	short near ptr unk_108C2
mov	al, [bp-0Eh]
push	ax
push	word ptr [bp-6]
push	word ptr [bp-2]
push	word ptr [bp-8]
push	cs
call	loc_10726
add	sp, 8
mov	bx, [bp-8]
mov	ax, [bx]
mov	[bp-8],	ax
or	ax, ax
jnz	short near ptr loc_108A1+1
mov	bx, [bp-0Ch]
mov	ax, [bx+0Eh]
mov	[bp-8],	ax
or	ax, ax
jz	short near ptr loc_108ED+2
mov	al, [bp-0Eh]
push	ax
push	word ptr [bp-6]
push	word ptr [bp-2]
push	word ptr [bp-8]
push	cs
call	loc_10726
add	sp, 8
mov	bx, [bp-8]
mov	ax, [bx]
mov	[bp-8],	ax
or	ax, ax
jnz	short near ptr loc_108CE+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	ax, [bx-348Ah]
mov	[bp-2],	ax
mov	word ptr [bp-6], 0
or	ax, ax
jz	short loc_10972
push	ax
call	far ptr	525h:0EEh
add	sp, 2
shr	al, 1
shr	al, 1
sub	ah, ah
mov	bx, [bp-2]
mov	cx, ax
mov	ax, [bx+12h]
mov	si, 64h	; 'd'
sub	dx, dx
div	si
mov	si, ax
inc	si
mov	al, [bx+16h]
mov	bl, 3
sub	ah, ah
div	bl
sub	ah, ah
mov	dx, ax
mov	ax, cx
add	ax, dx
mov	bx, [bp-2]
mov	cl, [bx+4]
shr	cl, 1
sub	ch, ch
add	ax, cx
mov	cl, [bx+5]
add	ax, cx
mul	si
mov	cx, 32h	; '2'
sub	dx, dx
div	cx
add	[bp-6],	ax
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_1091A
mov	ax, [bp-6]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
sub	ax, ax
mov	[bp-2],	ax
mov	[bp-4],	ax
cmp	[bp+6],	ax
jz	short near ptr loc_109A3+1
mov	bx, [bp+6]
mov	ax, [bx+12h]
sub	dx, dx
add	[bp-4],	ax
adc	[bp-2],	dx
mov	ax, [bx]
mov	[bp+6],	ax
or	ax, ax
jnz	short near ptr unk_1098D
mov	ax, [bp-4]
mov	dx, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
push	word ptr [bx-348Ah]
push	cs
call	loc_1097A
add	sp, 2
mov	[bp-4],	ax
mov	[bp-2],	dx
mov	bl, [bp+6]
inc	bl
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
push	word ptr [bx-348Ah]
push	cs
call	loc_1097A
add	ax, [bp-4]
adc	dx, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
push	word ptr [bx-348Ah]
push	cs
call	loc_1097A
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
push	di
push	si
mov	al, [bp+6]
push	ax
push	cs
call	loc_109AE
add	sp, 2
mov	cx, 5
sub	bx, bx
push	bx
push	cx
mov	cl, [bp+6]
push	cx
mov	si, ax
mov	di, dx
push	cs
call	loc_109AE
add	sp, 2
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
add	ax, si
adc	dx, di
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
mov	al, [bp+6]
shl	al, 1
push	ax
push	cs
call	loc_109AE
add	sp, 2
mov	[bp-8],	ax
mov	[bp-6],	dx
cmp	byte ptr [bp+6], 0
jnz	short loc_10A81
mov	bx, word_1CB74
push	word ptr [bx+2]
push	cs
call	loc_1097A
add	sp, 2
add	[bp-8],	ax
adc	[bp-6],	dx
mov	ax, 6
cwd
push	dx
push	ax
push	word ptr [bp-6]
push	word ptr [bp-8]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
add	ax, 5
adc	dx, 0
mov	bl, [bp+6]
sub	bh, bh
shl	bx, 1
shl	bx, 1
cmp	[bx-3559h], dx
jg	short loc_10AC0
jl	short near ptr loc_10AAE+1
cmp	[bx-355Bh], ax
jnb	short loc_10AC0
mov	bl, [bp+6]
sub	bh, bh
shl	bx, 1
shl	bx, 1
mov	ax, [bx-355Bh]
mov	dx, [bx-3559h]
mov	bl, [bp+6]
sub	bh, bh
shl	bx, 1
shl	bx, 1
sub	[bx-355Bh], ax
sbb	[bx-3559h], dx
mov	ax, [bx-3559h]
or	ax, [bx-355Bh]
jnz	short near ptr loc_10AE1+1
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	bx, [bp+6]
and	byte ptr [bx+3], 0Fh
mov	al, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bx, [bp+6]
mov	cx, ax
mov	al, [bx+5]
mov	bl, 1Eh
sub	ah, ah
div	bl
sub	cl, al
add	cl, 3
mov	bx, [bp+6]
or	[bx+3],	cl
mov	al, [bp+8]
sub	ah, ah
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 0CB72h
mov	[bp-6],	ax
mov	bx, ax
cmp	word ptr [bx+6], 0
jnz	short near ptr loc_10B40+2
mov	bx, [bp+6]
mov	si, ax
mov	[si+6],	bx
jmp	short near ptr loc_10B82+1
;     ***************************************************************************
nop
push	word ptr [bp+6]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_10B6B+1
mov	bx, [bp-6]
mov	ax, [bx+6]
mov	[bp-2],	ax
mov	ax, [bp+6]
mov	[bx+6],	ax
mov	bx, ax
mov	ax, [bp-2]
mov	[bx], ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, [bp-6]
push	word ptr [bx+6]
call	far ptr	59Dh:62h
add	sp, 2
mov	bx, ax
mov	ax, [bp+6]
mov	[bx], ax
mov	bx, ax
mov	word ptr [bx], 0
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
push	si
mov	ax, 3
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	cx, ax
add	cx, 5
mov	ax, 32h	; '2'
push	ax
mov	si, cx
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, [bp+6]
mov	cl, [bx+4]
sub	ch, ch
mov	dl, [bx+5]
sub	dh, dh
add	cx, dx
mov	dl, [bx+16h]
add	cx, dx
add	ax, cx
mov	cx, ax
mov	ax, [bx+12h]
mov	bx, 0Ah
sub	dx, dx
div	bx
add	ax, cx
sub	dx, dx
div	si
mov	[bp-2],	ax
cmp	word_1CA98, 0
jz	short near ptr loc_10BE7+1
add	word ptr [bp-2], 32h ; '2'
push	word ptr [bp+6]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jnz	short loc_10C01
mov	bx, [bp+6]
cmp	word ptr [bx+1Ah], 0A3h	; '  *'
jnz	short loc_10C05
add	word ptr [bp-2], 14h
mov	ax, 64h	; 'd'
push	ax
call	far ptr	49Ch:178h
add	sp, 2
cmp	ax, [bp-2]
jnb	short near ptr loc_10C1C+2
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ch
mov	byte ptr [bp-6], 0
mov	byte ptr [bp-0Ch], 0
mov	bx, word_1CA9A
mov	al, [bx+20h]
mov	[bp-4],	al
mov	al, [bx+21h]
mov	[bp-8],	al
mov	al, [bp-0Ch]
push	ax
lea	ax, [bp-8]
push	ax
lea	ax, [bp-4]
push	ax
call	far ptr	59Dh:2A8h
add	sp, 6
mov	[bp-2],	al
cmp	al, 0FFh
jz	short loc_10C96
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	[bp-0Ah], ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short near ptr loc_10C85+1
cmp	byte ptr [bp-6], 0
jz	short loc_10C96
mov	ax, [bp-0Ah]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word ptr [bp-0Ah]
call	far ptr	525h:4Ah
add	sp, 2
cmp	ax, [bp+6]
jz	short loc_10C7E
inc	byte ptr [bp-0Ch]
cmp	byte ptr [bp-0Ch], 6
jb	short near ptr loc_10C32+2
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 2
jb	short loc_10C30
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
mov	bx, [bp+6]
mov	ax, [bx+4]
mov	[bp-6],	ax
or	ax, ax
jnz	short loc_10CC4
jmp	loc_10DA7
;     ***************************************************************************
mov	bx, [bp-6]
mov	ax, [bx]
mov	[bp-2],	ax
cmp	byte ptr [bp+8], 2
jnz	short near ptr loc_10CE7+1
cmp	word ptr [bp+6], 0CB72h
jnz	short near ptr loc_10CE7+1
mov	bx, [bp+6]
push	word ptr [bx]
push	cs
call	near ptr loc_10C24+2
add	sp, 2
jmp	short near ptr loc_10CED+1
;     ***************************************************************************
nop
mov	bx, [bp+6]
mov	ax, [bx+2]
mov	[bp-8],	ax
or	ax, ax
jz	short near ptr loc_10D41+1
push	word ptr [bp-6]
push	cs
call	loc_10B8C
add	sp, 2
or	ax, ax
jz	short near ptr loc_10D41+1
push	word ptr [bp-8]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short near ptr loc_10D32+2
mov	word_1CA98, 1
push	word ptr [bp-6]
push	word ptr [bp-8]
call	far ptr	59Dh:5CEh
add	sp, 4
push	word ptr [bp-8]
call	far ptr	4B5h:3F4h
add	sp, 2
jmp	short near ptr loc_10D98+2
;     ***************************************************************************
nop
push	word ptr [bp-6]
push	word ptr [bp-8]
call	far ptr	59Dh:5CEh
jmp	short loc_10D97
;     ***************************************************************************
nop
mov	bl, [bp+8]
mov	[bp-4],	bl
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
cmp	word ptr [bx-3484h], 0
jz	short near ptr loc_10D8B+1
mov	al, [bp+8]
push	ax
push	cs
call	locret_108F4
add	sp, 2
push	ax
mov	al, [bp+8]
inc	al
push	ax
push	cs
call	locret_108F4
add	sp, 2
push	ax
push	cs
call	locret_106DE
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_10D8B+1
inc	byte ptr [bp-4]
mov	al, [bp-4]
push	ax
push	word ptr [bp-6]
push	cs
call	loc_10AE8
add	sp, 4
mov	ax, [bp-2]
mov	[bp-6],	ax
or	ax, ax
jz	short loc_10DA7
jmp	loc_10CC4
;     ***************************************************************************
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
cmp	byte ptr loc_1CB65+2, 4
jnb	short near ptr loc_10DC3+1
mov	byte ptr [bp-4], 0
mov	byte ptr [bp-2], 2
jmp	short near ptr loc_10DCB+1
;     ***************************************************************************
nop
mov	byte ptr [bp-4], 2
mov	byte ptr [bp-2], 0
mov	al, [bp-4]
add	al, 2
mov	[bp-6],	al
cmp	al, [bp-4]
jbe	short near ptr loc_10E13+1
mov	bl, [bp-4]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
add	bx, 0CB72h
mov	[bp-8],	bx
cmp	word ptr [bx+4], 0
jz	short loc_10E09
mov	al, [bp-2]
push	ax
push	bx
push	cs
call	loc_10CAE
add	sp, 4
mov	bx, [bp-8]
mov	word ptr [bx+4], 0
inc	byte ptr [bp-4]
mov	al, [bp-6]
cmp	[bp-4],	al
jb	short near ptr loc_10DD7+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp-2],	ax
push	bx
mov	bx, word_1CA9A
push	word ptr [bx+2]
call	far ptr	59Dh:7Eh
add	sp, 4
mov	[bp-4],	ax
or	ax, ax
jnz	short loc_10E4C
mov	ax, [bp-2]
mov	bx, word_1CA9A
mov	[bx+2],	ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, [bp-2]
mov	bx, [bp-4]
mov	[bx], ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	al, [bp+8]
mov	bx, [bp+6]
mov	[bx+0Ah], al
mov	byte ptr [bx+0Dh], 0FFh
mov	byte ptr [bx+0Ch], 1
mov	al, [bp+0Ah]
mov	[bx+0Bh], al
push	bx
call	far ptr	59Dh:0BEh
add	sp, 2
push	word ptr loc_1CB8A
call	far ptr	59Dh:62h
mov	bx, ax
mov	ax, [bp+6]
mov	[bx], ax
mov	bx, ax
mov	word ptr [bx], 0
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	ax, word ptr loc_1CB8A
mov	[bp-4],	ax
mov	bx, word ptr loc_1CB71+1
mov	ax, [bx]
add	ax, 1Ch
mov	[bp-2],	ax
mov	bx, [bp+6]
test	byte ptr [bx+2], 4
jz	short loc_10F06
mov	bx, [bp-4]
mov	si, [bp+6]
mov	al, [si+0Dh]
cmp	[bx+0Ah], al
jnz	short loc_10F06
push	si
push	cs
call	near ptr loc_10E17+1
add	sp, 2
mov	al, 64h	; 'd'
push	ax
mov	bx, [bp+6]
mov	al, [bx+0Dh]
push	ax
push	bx
push	cs
call	near ptr loc_10E57+1
add	sp, 6
call	far ptr	4B5h:290h
mov	ax, [bp+6]
add	ax, 1Ch
push	ax
push	word ptr [bp-2]
mov	ax, 0ACACh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, [bp+6]
test	byte ptr [bx+3], 0F0h
jz	short loc_10F40
push	bx
push	cs
call	near ptr loc_10E17+1
add	sp, 2
mov	al, 64h	; 'd'
push	ax
mov	bx, [bp-4]
mov	al, [bx+0Ah]
push	ax
push	word ptr [bp+6]
push	cs
call	near ptr loc_10E57+1
add	sp, 6
call	far ptr	4B5h:290h
push	word ptr [bp-2]
mov	ax, [bp+6]
add	ax, 1Ch
push	ax
mov	ax, 0ACDAh
jmp	short loc_10EF4
;     ***************************************************************************
nop
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
push	si
cmp	word ptr [bp+6], 0
jz	short loc_10FAF
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp-2],	ax
push	bx
push	cs
call	loc_10E98
add	sp, 2
or	ax, ax
jnz	short loc_10FA5
push	word ptr [bp+6]
push	cs
call	near ptr loc_10E17+1
add	sp, 2
mov	word ptr [bp-6], 0CB72h
cmp	word ptr loc_1CB76, 0
jnz	short loc_10F8A
mov	bx, [bp+6]
mov	si, [bp-6]
mov	[si+4],	bx
jmp	short loc_10FA1
;     ***************************************************************************
mov	bx, [bp-6]
push	word ptr [bx+4]
call	far ptr	59Dh:62h
add	sp, 2
mov	bx, ax
mov	ax, [bp+6]
mov	[bx], ax
mov	bx, ax
mov	word ptr [bx], 0
mov	ax, [bp-2]
mov	[bp+6],	ax
or	ax, ax
jnz	short loc_10F55
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ch
mov	bx, 0CB72h
mov	[bp-8],	bx
mov	bx, [bx]
mov	ax, [bx]
add	ax, 1Ch
mov	[bp-6],	ax
mov	bx, word_1CB74
mov	ax, [bx+2]
mov	[bp-4],	ax
mov	bx, ax
mov	cx, [bx]
mov	[bp-2],	cx
push	ax
push	cs
call	loc_10E98
add	sp, 2
or	ax, ax
jz	short near ptr loc_1100D+3
push	word ptr [bp-2]
push	cs
call	near ptr loc_10F47+1
add	sp, 2
mov	byte ptr loc_1CB65+2, 2
call	far ptr	4B5h:290h
push	word ptr [bp-6]
mov	ax, 0AD1Fh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word ptr [bp-4]
push	cs
call	near ptr loc_10E17+1
add	sp, 2
mov	ax, [bp-4]
mov	[bp-0Ch], ax
mov	bx, [bp-8]
mov	[bx+4],	ax
mov	bx, ax
mov	word ptr [bx], 0
mov	byte ptr [bp-0Ah], 0
mov	ax, [bp-2]
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr loc_11091+1
cmp	byte ptr [bp-0Ah], 9
jnb	short near ptr loc_11091+1
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-2],	ax
push	bx
push	cs
call	loc_10E98
add	sp, 2
or	ax, ax
jnz	short near ptr loc_11087+1
push	word ptr [bp-4]
call	far ptr	542h:7Eh
add	sp, 2
or	ax, ax
jz	short near ptr loc_11087+1
mov	bx, [bp-4]
cmp	word ptr [bx+12h], 64h ; 'd'
jb	short near ptr loc_11087+1
push	bx
push	cs
call	near ptr loc_10E17+1
add	sp, 2
mov	ax, [bp-4]
mov	bx, [bp-0Ch]
mov	[bx], ax
mov	bx, ax
mov	word ptr [bx], 0
mov	[bp-0Ch], ax
inc	byte ptr [bp-0Ah]
mov	ax, [bp-2]
mov	[bp-4],	ax
or	ax, ax
jnz	short near ptr loc_11038+2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	ax, word_1CAE5
mov	[bp-2],	ax
push	word ptr loc_1CB76
call	far ptr	59Dh:62h
mov	bx, ax
mov	ax, [bp-2]
mov	[bx], ax
mov	bx, ax
sub	ax, ax
mov	[bx], ax
mov	word_1CAE5, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	word ptr [bp-6], 0CB7Ch
mov	byte ptr [bp-8], 0
mov	bl, [bp-8]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-3551h], 0
jz	short loc_11112
mov	bl, [bp-8]
sub	bh, bh
shl	bx, 1
mov	ax, [bx-3551h]
mov	si, [bp-6]
mov	[si+4],	ax
mov	word ptr [bx-3551h], 0
mov	al, [bp-8]
add	al, 2
mov	byte ptr word_1CB6B, al
push	word_1CA9A
push	word ptr [si+2]
call	far ptr	unk_11E74
add	sp, 4
jmp	short loc_1111B
;     ***************************************************************************
mov	bx, [bp-6]
cmp	word ptr [bx+2], 0
jz	short near ptr loc_11124+1
cmp	byte ptr [bp-8], 0
jnz	short near ptr loc_11124+1
push	cs
call	loc_1109A
add	word ptr [bp-6], 14h
inc	byte ptr [bp-8]
cmp	byte ptr [bp-8], 2
jb	short near ptr loc_110D2+2
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 14h
push	si
mov	word_1CA98, 0
mov	byte ptr loc_1CB65+2, 0
mov	bx, word_1CA9A
mov	ax, [bx+1Ch]
sub	ax, 10h
mov	[bp-6],	ax
mov	cx, ax
mov	ax, [bx+1Eh]
sub	ax, 0Ah
cwd
sub	ax, dx
sar	ax, 1
mov	[bp-0Ah], ax
mov	bx, 50h	; 'P'
mul	bx
mov	dl, 3
xchg	cx, dx
shr	dx, cl
add	ax, dx
mov	[bp-2],	ax
sub	al, al
push	ax
push	cs
call	locret_108F4
add	sp, 2
mov	cx, 3
push	cx
mov	si, ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 4
mul	si
inc	ax
mov	[bp-14h], ax
mov	al, 2
push	ax
push	cs
call	locret_108F4
add	sp, 2
mov	cx, ax
mov	ax, 2
push	ax
mov	si, cx
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 3
mul	si
inc	ax
push	ax
push	word ptr [bp-14h]
push	cs
call	locret_106DE
add	sp, 4
sub	ah, ah
mov	[bp-14h], ax
sub	ax, 64h	; 'd'
neg	ax
mov	[bp-12h], ax
push	ax
push	word ptr [bp-14h]
push	cs
call	near ptr loc_107EB+3
add	sp, 4
push	word ptr [bp-2]
push	word ptr [bp-0Ah]
push	word ptr [bp-6]
push	cs
call	near ptr loc_10647+3
add	sp, 6
sub	al, al
push	ax
push	cs
call	loc_109F8
add	sp, 2
or	dx, ax
jnz	short locret_11204
mov	byte ptr loc_1CB65+2, 2
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, 2
push	ax
push	cs
call	loc_109F8
add	sp, 2
or	dx, ax
jnz	short loc_1121C
mov	byte ptr loc_1CB65+2, 6
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	al, al
push	ax
push	cs
call	near ptr loc_10A15+1
add	sp, 2
add	ax, 1
adc	dx, 0
push	dx
push	ax
mov	al, 2
push	ax
push	cs
call	near ptr loc_10A15+1
add	sp, 2
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
or	dx, dx
jl	short near ptr loc_11269+1
jg	short near ptr loc_11245+5
cmp	ax, 6
jb	short near ptr loc_11269+1
push	word ptr loc_1CB71+1
push	cs
call	near ptr loc_10C24+2
add	sp, 2
or	ax, ax
jz	short near ptr loc_11269+1
mov	word_1CA98, 1
mov	byte ptr loc_1CB65+2, 3
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	word_1CE96, 0Ch
push	cs
call	near ptr loc_110C3+1
mov	byte ptr [bp-0Ch], 0
push	word ptr [bp-2]
push	word ptr [bp-0Ah]
push	word ptr [bp-6]
push	cs
call	near ptr loc_10647+3
add	sp, 6
sub	al, al
push	ax
push	cs
call	near ptr loc_10A4D+1
add	sp, 2
or	ax, ax
jz	short near ptr loc_11298+1
jmp	near ptr loc_11402+2
;     ***************************************************************************
mov	al, 1
push	ax
push	cs
call	near ptr loc_10A4D+1
add	sp, 2
or	ax, ax
jz	short near ptr loc_112A9+1
jmp	near ptr loc_113F8+2
;     ***************************************************************************
sub	al, al
push	ax
push	cs
call	locret_108F4
add	sp, 2
mov	cx, 2
push	cx
mov	si, ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 4
mul	si
inc	ax
mov	[bp-14h], ax
mov	al, 2
push	ax
push	cs
call	locret_108F4
add	sp, 2
mov	cx, ax
mov	ax, 2
push	ax
mov	si, cx
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 3
mul	si
inc	ax
mov	[bp-12h], ax
mov	al, 1
push	ax
push	cs
call	locret_108F4
add	sp, 2
mov	cx, ax
mov	ax, 2
push	ax
mov	si, cx
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 3
mul	si
inc	ax
add	[bp-14h], ax
mov	al, 3
push	ax
push	cs
call	locret_108F4
add	sp, 2
mov	cx, ax
mov	ax, 2
push	ax
mov	si, cx
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 3
mul	si
inc	ax
add	[bp-12h], ax
push	word ptr [bp-12h]
push	word ptr [bp-14h]
push	cs
call	locret_106DE
add	sp, 4
sub	ah, ah
mov	[bp-14h], ax
sub	ax, 64h	; 'd'
neg	ax
mov	[bp-12h], ax
push	ax
push	word ptr [bp-14h]
push	cs
call	near ptr loc_107EB+3
add	sp, 4
sub	al, al
push	ax
push	cs
call	loc_109AE
add	sp, 2
or	dx, ax
jnz	short near ptr loc_11368+2
jmp	near ptr loc_111F8+1
;     ***************************************************************************
mov	al, 2
push	ax
push	cs
call	loc_109AE
add	sp, 2
or	dx, ax
jnz	short near ptr loc_1137A+1
jmp	near ptr loc_11211+1
;     ***************************************************************************
sub	al, al
push	ax
push	cs
call	near ptr loc_10A15+1
add	sp, 2
add	ax, 1
adc	dx, 0
push	dx
push	ax
mov	al, 2
push	ax
push	cs
call	near ptr loc_10A15+1
add	sp, 2
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
or	dx, dx
jl	short loc_113BB
jg	short near ptr loc_113A7+2
cmp	ax, 6
jb	short loc_113BB
push	word ptr loc_1CB71+1
push	cs
call	near ptr loc_10C24+2
add	sp, 2
or	ax, ax
jz	short loc_113BB
jmp	loc_1125F
;     ***************************************************************************
inc	byte ptr [bp-0Ch]
cmp	byte ptr [bp-0Ch], 6
jnb	short near ptr loc_113C5+2
jmp	near ptr loc_11277+1
;     ***************************************************************************
sub	al, al
push	ax
push	cs
call	near ptr loc_10A15+1
add	sp, 2
add	ax, 1
adc	dx, 0
push	dx
push	ax
mov	al, 2
push	ax
push	cs
call	near ptr loc_10A15+1
add	sp, 2
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
or	dx, dx
jl	short near ptr loc_1140C+2
jg	short loc_113F5
cmp	ax, 7
jb	short near ptr loc_1140C+2
mov	al, 3
jmp	short near ptr loc_1140F+1
;     ***************************************************************************
nop
mov	byte ptr loc_1CB65+2, 4
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	byte ptr loc_1CB65+2, 0
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, 6
mov	byte ptr loc_1CB65+2, al
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	cs
call	near ptr loc_10FB3+1
or	ax, ax
jz	short near ptr loc_11423+1
push	cs
call	near ptr loc_11137+1
push	cs
call	near ptr loc_10DAB+1
mov	byte_1CAE7, 0
or	byte ptr loc_1CB65+2, 80h
retf
;     ***************************************************************************
nop
push	cs
call	near ptr loc_11ECA+2
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
call	far ptr	4B5h:282h
mov	bx, word_13396
push	word ptr [bx+1Ah]
mov	ax, 54h	; 'T'
push	ax
mov	ax, 2Ah	; '*'
push	ax
call	far ptr	4B5h:6A4h
mov	sp, bp
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0AD50h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
mov	bx, current_ruler
push	word ptr [bx+23h]
mov	ax, 0AD6Ah
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
mov	bx, current_ruler
push	word ptr [bx+27h]
push	word ptr [bx+25h]
mov	ax, 0AD7Fh
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
mov	al, [bp+6]
sub	ah, ah
push	ax
mov	ax, 0AD95h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
push	word ptr [bp+0Ah]
push	word ptr [bp+8]
mov	ax, 0ADADh
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 0ADC2h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:9D6h
retf
;     ***************************************************************************
push	current_province
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_114E8
mov	ax, 0ADCDh
push	ax
call	loc_1309B+1
add	sp, 2
sub	ax, ax
retf
;     ***************************************************************************
nop
call	far ptr	4B5h:290h
mov	ax, 0ADDFh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:9D6h
or	ax, ax
jz	short near ptr loc_114E3+1
mov	ax, word_13396
mov	bx, current_province
mov	[bx+2],	ax
push	current_province
push	current_ruler
call	far ptr	59Dh:49Ch
add	sp, 4
mov	bx, current_ruler
mov	word ptr [bx+4], 0
mov	bx, current_ruler
mov	byte ptr [bx+22h], 0FFh
mov	ax, 7530h
push	ax
mov	bx, current_ruler
push	word ptr [bx+23h]
mov	ax, current_province
add	ax, 8
push	ax
call	far ptr	49Ch:8Ch
add	sp, 6
mov	bx, current_ruler
mov	ax, [bx+25h]
mov	dx, [bx+27h]
mov	bx, current_province
add	[bx+0Ah], ax
adc	[bx+0Ch], dx
mov	bx, current_province
cmp	word ptr [bx+0Ch], 2Dh ; '-'
jl	short near ptr loc_11576+2
jg	short near ptr loc_1156B+3
cmp	word ptr [bx+0Ah], 0C6C0h
jbe	short near ptr loc_11576+2
mov	word ptr [bx+0Ah], 0C6C0h
mov	word ptr [bx+0Ch], 2Dh ; '-'
mov	ax, 5
push	ax
mov	ax, 951Bh
sub	dx, dx
push	dx
push	ax
call	far ptr	4B5h:1F8h
add	sp, 6
push	current_province
call	far ptr	4B5h:3F4h
add	sp, 2
push	current_province
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0ADEBh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
mov	al, options_value
and	al, byte ptr word_1352C
test	al, 1
jz	short near ptr loc_115CF+1
mov	al, 6
push	ax
call	far ptr	6EBh:4F0h
jmp	short loc_115D9
;     ***************************************************************************
nop
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
add	sp, 2
mov	bx, current_province
or	byte ptr [bx+13h], 30h
mov	ax, 1
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	ax, 6
push	ax
mov	ax, 1Fh
push	ax
mov	cx, 277h
push	cx
push	ax
mov	ax, 128h
push	ax
call	far ptr	3EFh:70Ch
add	sp, 0Ah
sub	ax, ax
push	ax
mov	ax, 9Fh	; '  *'
push	ax
mov	ax, 2Ah	; '*'
push	ax
mov	ax, 20h	; ' '
push	ax
mov	ax, 25h	; '%'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	byte ptr [bp-4], 0
mov	word ptr [bp-2], 15Ch
cmp	byte ptr [bp-4], 6
jnb	short near ptr loc_1167B+1
sub	ax, ax
push	ax
mov	ax, 1Fh
push	ax
push	word ptr [bp-2]
mov	ax, 8
push	ax
push	word ptr [bp-2]
call	far ptr	3EFh:70Ch
add	sp, 0Ah
mov	ax, 6
push	ax
mov	ax, 8Fh	; '  *'
push	ax
push	word ptr [bp-2]
mov	ax, 20h	; ' '
push	ax
push	word ptr [bp-2]
call	far ptr	3EFh:70Ch
add	sp, 0Ah
mov	bl, [bp-4]
sub	bh, bh
mov	al, [bx-51D8h]
sub	ah, ah
add	[bp-2],	ax
inc	byte ptr [bp-4]
cmp	word ptr [bp-2], 257h
jb	short loc_1162B
mov	ax, 90h	; '  *'
push	ax
call	far ptr	4B5h:33Eh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
call	far ptr	4B5h:244h
mov	ax, 7
push	ax
mov	ax, 18h
push	ax
mov	ax, 2Ah	; '*'
push	ax
mov	ax, 8
push	ax
mov	ax, 25h	; '%'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 10h
push	ax
mov	ax, 26h	; '&'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 0AE2Dh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
push	cs
call	near ptr loc_115E6+2
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	cs
call	loc_1168A
mov	ax, 3
push	ax
call	far ptr	3EFh:484h
add	sp, 2
mov	bx, 0CEB2h
mov	[bp-4],	bx
mov	ax, [bx]
mov	[bp-6],	ax
mov	word ptr [bp-2], 0
mov	byte ptr [bp-8], 0
mov	al, [bp-8]
mov	cl, 7
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
mov	cl, 4
shl	ax, cl
add	ax, 24h	; '$'
push	ax
mov	ax, 26h	; '&'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, [bp-6]
add	ax, 1Ch
push	ax
mov	ax, [bp-6]
cmp	word_13396, ax
jnz	short loc_1172C
mov	ax, 0AE76h
jmp	short loc_1172F
;     ***************************************************************************
mov	ax, 0AE80h
push	ax
mov	ax, 0AE8Ah
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
mov	ax, [bp-6]
cmp	word_13396, ax
jnz	short near ptr loc_11752+2
mov	ax, 0AE98h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
jmp	short near ptr loc_11767+1
;     ***************************************************************************
nop
mov	bx, ax
mov	al, [bx+0Bh]
sub	ah, ah
push	ax
mov	ax, 0AE9Eh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	bx, [bp-6]
push	word ptr [bx+12h]
mov	al, [bx+6]
sub	ah, ah
push	ax
mov	al, [bx+5]
push	ax
mov	al, [bx+4]
push	ax
mov	ax, 0AEA2h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Ah
add	word ptr [bp-4], 2
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-6],	ax
or	ax, ax
jz	short near ptr loc_117AD+1
inc	byte ptr [bp-8]
mov	al, [bp-8]
mov	cl, 7
sub	ah, ah
div	cl
or	ah, ah
jz	short near ptr loc_117AA+1
jmp	loc_116F6
;     ***************************************************************************
jmp	short loc_117B3
;     ***************************************************************************
nop
mov	word ptr [bp-2], 1
call	far ptr	4B5h:290h
cmp	word ptr [bp-2], 0
jnz	short loc_117DA
mov	ax, 0AEAFh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:9D6h
or	ax, ax
jz	short loc_117DF
push	cs
call	near ptr loc_115E6+2
jmp	loc_116F6
;     ***************************************************************************
call	far ptr	57Ch:1FEh
sub	ax, ax
push	ax
call	far ptr	3EFh:484h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	4B5h:266h
mov	ax, 3Dh	; '='
push	ax
call	far ptr	4B5h:33Eh
add	sp, 2
mov	ax, 90h	; '  *'
push	ax
call	far ptr	4B5h:33Eh
add	sp, 2
mov	bx, [bp+6]
push	word ptr [bx+1Ah]
mov	ax, 4Ch	; 'L'
push	ax
mov	ax, 26h	; '&'
push	ax
call	far ptr	4B5h:6A4h
add	sp, 6
mov	ax, [bp+6]
add	ax, 2Ah	; '*'
push	ax
mov	ax, 0AEB8h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, [bp+6]
add	ax, 1Ch
push	ax
mov	ax, 0AEC7h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, [bp+6]
cmp	word_13396, ax
jnz	short loc_11882
mov	bx, current_ruler
cmp	byte ptr [bx+21h], 0FFh
jnz	short near ptr loc_11862+2
mov	ax, 0AEDCh
jmp	short near ptr loc_1186F+3
;     ***************************************************************************
nop
mov	al, 29h	; ')'
mul	byte ptr [bx+21h]
mov	bx, ax
mov	ax, [bx+2B34h]
add	ax, 1Ch
push	ax
mov	ax, 0AEE1h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
jmp	short near ptr loc_118B0+1
;     ***************************************************************************
nop
mov	ax, word_13396
add	ax, 2Ah	; '*'
push	ax
mov	ax, 0AEF2h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	bx, [bp+6]
mov	al, [bx+0Bh]
sub	ah, ah
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0AF01h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
mov	ax, 0AF2Bh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	bx, [bp+6]
mov	al, [bx+19h]
sub	ah, ah
sub	ax, year_value
neg	ax
inc	ax
push	ax
push	word ptr [bx+12h]
mov	ax, 0AF2Fh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
mov	ax, [bp+6]
cmp	word_13396, ax
jnz	short near ptr loc_118F2+2
mov	ax, 0AF58h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
jmp	short near ptr loc_11906+2
;     ***************************************************************************
nop
mov	bx, ax
mov	al, [bx+0Ch]
sub	ah, ah
push	ax
mov	ax, 0AF68h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	bx, [bp+6]
mov	al, [bx+6]
sub	ah, ah
push	ax
mov	al, [bx+5]
push	ax
mov	al, [bx+4]
push	ax
mov	ax, 0AF8Ch
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
jmp	short loc_1193B
;     ***************************************************************************
push	ax
push	cs
call	loc_117EC
add	sp, 2
call	far ptr	57Ch:1FEh
call	far ptr	4B5h:290h
mov	ax, 0AFC3h
push	ax
mov	ax, 0Ch
mov	dx, 60Dh
push	dx
push	ax
sub	al, al
push	ax
mov	cl, [bp+6]
push	cx
push	ax
call	far ptr	60Dh:2F6h
add	sp, 0Ch
or	ax, ax
jnz	short near ptr loc_1192D+1
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Q_21964		proc far

var_4		= word ptr -4
arg_2		= byte ptr  6
arg_4		= word ptr  0Ah
arg_8		= word ptr  0Ch

; FUNCTION CHUNK AT 196E SIZE 00000021 BYTES
; FUNCTION CHUNK AT 1991 SIZE 0000000E BYTES
; FUNCTION CHUNK AT 19AC SIZE 00000021 BYTES

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_4], 0
call	far ptr	4B5h:290h
mov	ax, 3
push	ax
mov	ax, 1
push	ax
mov	ax, 0AFCDh
push	ax
call	far ptr	3EFh:9B2h ; Q_21964
add	sp, 6
dec	ax
jz	short near ptr loc_11997+1
dec	ax
jz	short loc_119AC
dec	ax
jz	short loc_119B6
sub	ax, 0FFFCh
jz	short near ptr loc_119E5+3
jmp	short near ptr loc_119BD+2
;     ***************************************************************************
push	current_province
call	loc_1377C
add	sp, 2
mov	[bp+var_4], 1
jmp	short near ptr loc_119BD+2
;     ***************************************************************************
nop
mov	al, [bp+arg_2]
push	ax
push	cs
call	loc_11926
jmp	short near ptr loc_1199F+2
;     ***************************************************************************
push	cs
call	near ptr loc_116CB+1
mov	[bp+var_4], 0
cmp	[bp+var_4], 0
jnz	short loc_1196F
mov	ax, 1
push	ax
push	current_province
call	loc_13860+2
add	sp, 4
push	[bp+arg_4]
push	word ptr [bp+8]
mov	al, [bp+arg_2]
push	ax
push	cs
call	near ptr loc_11439+1
add	sp, 6
jmp	short loc_1196F
;     ***************************************************************************
cmp	[bp+var_4], 0
jz	short near ptr loc_119FA+2
push	[bp+arg_4]
push	word ptr [bp+8]
mov	al, [bp+arg_2]
push	ax
push	cs
call	near ptr loc_11439+1
mov	sp, bp
pop	bp
retf
Q_21964		endp

;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	bx, [bp+6]
mov	ax, [bx+1Ch]
sub	ax, 10h
mov	[bp-4],	ax
mov	cx, [bx+1Eh]
sub	cx, 0Ah
shr	cx, 1
mov	[bp-8],	cx
mov	dx, cx
mov	cl, 3
shr	ax, cl
mov	cx, 50h	; 'P'
mov	bx, ax
mov	ax, dx
mul	cx
add	bx, ax
mov	[bp-2],	bx
mov	word ptr [bp-0Ah], 6
mov	ax, 1
push	ax
push	word ptr [bp-2]
push	word ptr [bp-8]
push	word ptr [bp-4]
call	loc_20649+1
add	sp, 8
dec	word ptr [bp-0Ah]
jnz	short near ptr loc_11A35+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+6]
mov	al, [bx+17h]
mov	cl, 3
sub	ah, ah
div	cl
add	al, 21h	; '!'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_11A78
jmp	loc_11C0C
;     ***************************************************************************
call	far ptr	4B5h:290h
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0B00Dh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	al, 0Ch
push	ax
call	far ptr	6EBh:4F0h
add	sp, 2
push	word ptr [bp+6]
push	cs
call	loc_11A00
add	sp, 2
mov	al, 19h
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_11B28
mov	ax, 0B04Bh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	57Ch:126h
mov	ax, 14h
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 46h	; 'F'
push	ax
mov	bx, current_ruler
push	word ptr [bx+23h]
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, current_ruler
mov	[bx+23h], ax
mov	ax, 64h	; 'd'
cwd
push	dx
push	ax
mov	bx, current_ruler
push	word ptr [bx+27h]
push	word ptr [bx+25h]
mov	ax, 14h
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 46h	; 'F'
sub	dx, dx
push	dx
push	ax
call	far ptr	0:38B2h
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	bx, current_ruler
mov	[bx+25h], ax
mov	[bx+27h], dx
jmp	near ptr loc_11BFF+4
;     ***************************************************************************
nop
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_11BA5+1
mov	ax, 0B088h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	57Ch:15Eh
mov	ax, 7530h
push	ax
mov	ax, 2BCh
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 12Ch
push	ax
mov	ax, current_ruler
add	ax, 23h	; '#'
push	ax
call	far ptr	49Ch:8Ch
add	sp, 6
mov	ax, 0BB8h
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 7D0h
sub	dx, dx
mov	bx, current_ruler
add	[bx+25h], ax
adc	[bx+27h], dx
mov	bx, current_ruler
cmp	word ptr [bx+27h], 2Dh ; '-'
jl	short near ptr loc_11BFF+4
jg	short loc_11B99
cmp	word ptr [bx+25h], 0C6C0h
jbe	short near ptr loc_11BFF+4
mov	word ptr [bx+25h], 0C6C0h
mov	word ptr [bx+27h], 2Dh ; '-'
jmp	short near ptr loc_11BFF+4
;     ***************************************************************************
nop
mov	ax, 0B0BBh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	57Ch:15Eh
mov	ax, 5DCh
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 1F4h
mov	cl, [bp+8]
sub	ch, ch
sub	dx, dx
div	cx
inc	ax
mov	[bp-4],	ax
mov	[bp-2],	ch
cmp	cl, ch
jz	short near ptr loc_11BFF+4
mov	ax, 2710h
push	ax
push	word ptr [bp-4]
mov	bl, [bp-2]
sub	bh, bh
shl	bx, 1
mov	ax, [bx-314Eh]
add	ax, 12h
push	ax
call	far ptr	49Ch:8Ch
add	sp, 6
inc	byte ptr [bp-2]
mov	al, [bp+8]
cmp	[bp-2],	al
jb	short loc_11BDA
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
call	far ptr	4B5h:290h
mov	bx, [bp+8]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, [bp+0Ah]
add	ax, 1Ch
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0B0DBh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
call	far ptr	57Ch:126h
mov	bx, [bp+6]
push	word ptr [bx+2]
call	far ptr	59Dh:62h
add	sp, 2
mov	[bp-4],	ax
push	word ptr [bp+0Ah]
push	word_13396
call	far ptr	59Dh:7Eh
add	sp, 4
mov	[bp-2],	ax
or	ax, ax
jz	short loc_11C74
mov	bx, [bp+0Ah]
mov	ax, [bx]
mov	bx, [bp-2]
mov	[bx], ax
mov	ax, [bp+0Ah]
mov	bx, [bp-4]
mov	[bx], ax
mov	bx, ax
mov	word ptr [bx], 0
push	word ptr [bp+8]
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp+0Ah]
mov	[bx+0Ah], al
push	bx
call	far ptr	59Dh:0BEh
add	sp, 2
push	word ptr [bp+8]
push	word ptr [bp+0Ah]
call	far ptr	59Dh:1E8h
add	sp, 4
mov	bx, [bp+0Ah]
mov	byte ptr [bx+0Ch], 1
mov	byte ptr [bx+0Eh], 0
push	bx
call	far ptr	59Dh:700h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	si
push	word ptr [bp+6]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short near ptr loc_11CE8+2
mov	al, [bp+8]
push	ax
push	word ptr [bp+6]
push	cs
call	near ptr loc_11A52+2
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
cmp	byte ptr [bp+8], 1
jnz	short loc_11CF3
jmp	loc_11DAC
;     ***************************************************************************
push	word ptr [bp+6]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short near ptr loc_11D03+2
jmp	loc_11DAC
;     ***************************************************************************
push	word ptr [bp+6]
call	far ptr	525h:4Ah
add	sp, 2
mov	[bp-6],	ax
push	ax
push	current_ruler
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jz	short near ptr loc_11D24+3
jmp	loc_11DAC
;     ***************************************************************************
mov	bx, [bp-6]
mov	ax, [bx]
mov	[bp-2],	ax
mov	al, [bp+8]
sub	ah, ah
dec	ax
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
mov	ax, [bx-314Ch]
mov	[bp-4],	ax
mov	al, 14h
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
sub	ah, ah
mov	bx, [bp-4]
mov	cl, [bx+5]
sub	ch, ch
add	ax, cx
mov	bx, [bp-2]
mov	cl, [bx+5]
cmp	ax, cx
jg	short loc_11DAC
push	current_ruler
call	far ptr	525h:6
add	sp, 2
sub	ah, ah
mov	si, ax
mov	bx, [bp-6]
mov	al, [bx+si+0Eh]
shr	al, 1
mov	bx, [bp-2]
mov	cl, [bx+8]
shr	cl, 1
sub	cl, al
add	cl, 32h	; '2'
push	cx
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short loc_11DAC
push	word ptr [bp-4]
push	word ptr [bp-6]
push	word ptr [bp+6]
push	cs
call	near ptr loc_11C0F+1
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Q_21DB2		proc far

var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  6

; FUNCTION CHUNK AT 1DB8 SIZE 00000002 BYTES

push	bp
mov	bp, sp
sub	sp, 6
call	far ptr	4B5h:290h
mov	ax, 41
push	ax
mov	ax, 1
push	ax
mov	ax, 0B10Bh
push	ax
call	far ptr	3EFh:9B2h ; Q_21DB2
add	sp, 6
mov	[bp+var_4], ax
cmp	ax, 0FFFFh
jz	short near ptr loc_11E0F+1
dec	[bp+var_4]
mov	al, byte ptr [bp+var_4]
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	[bp+var_6], ax
mov	al, byte ptr [bp+var_4]
push	ax
push	current_province
call	far ptr	loc_10532+2
add	sp, 4
or	ax, ax
jz	short loc_11DB8
push	[bp+var_6]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_11DB8
jmp	short loc_11E16
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, [bp+var_6]
mov	word_13536, ax
mov	ax, 0B116h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:0A24h
mov	[bp+var_2], ax
or	ax, ax
jz	short near ptr loc_11E62+1
mov	word_1CE96, 0Ch
mov	byte ptr word_1CB6B, 0
push	[bp+var_6]
push	current_province
call	far ptr	unk_11E74
add	sp, 4
mov	al, byte ptr [bp+var_4]
mov	bx, current_ruler
mov	[bx+22h], al
mov	al, [bp+arg_0]
push	ax
push	[bp+var_6]
push	cs
call	loc_11CC0
mov	word_13536, 0
mov	ax, [bp+var_2]
mov	sp, bp
pop	bp
retf
Q_21DB2		endp

;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	word ptr [bp-2], 0CEB2h
mov	bx, [bp+6]
mov	byte ptr [bx], 0
mov	bx, [bp+8]
sub	ax, ax
mov	[bx+2],	ax
mov	[bx], ax
mov	ax, word_13396
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr loc_11EBD+2
mov	ax, [bp-4]
mov	bx, [bp-2]
add	word ptr [bp-2], 2
mov	[bx], ax
mov	bx, ax
mov	cx, [bx+12h]
sub	dx, dx
mov	si, [bp+8]
add	[si], cx
adc	[si+2],	dx
mov	si, [bp+6]
inc	byte ptr [si]
mov	cx, [bx]
mov	[bp-4],	cx
or	cx, cx
jnz	short loc_11E96
mov	bx, [bp-2]
mov	word ptr [bx], 0
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
lea	ax, [bp-6]
push	ax
lea	cx, [bp-8]
push	cx
push	cs
call	loc_11E70
add	sp, 4
mov	ax, 1
push	ax
push	current_province
call	loc_13860+2
add	sp, 4
push	word ptr [bp-4]
push	word ptr [bp-6]
mov	al, [bp-8]
push	ax
push	cs
call	near ptr loc_11439+1
add	sp, 6
call	far ptr	4B5h:290h
push	current_province
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr loc_11F25+1
mov	bx, current_ruler
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0B118h
jmp	short near ptr loc_11F30+3
;     ***************************************************************************
mov	bx, current_ruler
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0B167h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, 5
push	ax
mov	ax, 1
push	ax
call	far ptr	3EFh:998h
add	sp, 4
cmp	ax, 3
jz	short loc_11F92
ja	short near ptr loc_11F5B+1
dec	ax
jz	short near ptr loc_11F6B+1
dec	ax
jz	short loc_11F80
jmp	short loc_11F02
;     ***************************************************************************
nop
sub	ax, 4
jz	short near ptr loc_11F97+1
dec	ax
jz	short loc_11F9E
sub	ax, 0FFFAh
jz	short near ptr unk_11EF1
jmp	short loc_11F02
;     ***************************************************************************
nop
mov	al, [bp-8]
push	ax
push	cs
call	loc_11DB2
add	sp, 2
or	ax, ax
jz	short loc_11F02
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word ptr [bp-4]
push	word ptr [bp-6]
mov	al, [bp-8]
push	ax
push	cs
call	near ptr loc_11963+1
jmp	loc_11EFF
;     ***************************************************************************
nop
push	cs
call	near ptr loc_114C7+1
jmp	short near ptr loc_11F75+2
;     ***************************************************************************
push	cs
call	loc_114B6
jmp	short near ptr loc_11F75+2
;     ***************************************************************************
call	far ptr	0FA4h:22h
push	current_ruler
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short near ptr word_11FB6
jmp	loc_11F02
;     ***************************************************************************
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
call	far ptr	4B5h:290h
mov	bx, current_ruler
mov	al, [bx+22h]
sub	ah, ah
inc	ax
push	ax
mov	ax, [bp+0Ah]
add	ax, 1Ch
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	bx, [bp+8]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0B1B4h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Ah
call	far ptr	57Ch:15Eh
mov	al, 0Ah
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
mov	bx, [bp+6]
push	word ptr [bx+2]
call	far ptr	59Dh:62h
add	sp, 2
mov	[bp-4],	ax
push	word ptr [bp+0Ah]
push	word_13396
call	far ptr	59Dh:7Eh
add	sp, 4
mov	[bp-2],	ax
or	ax, ax
jz	short loc_12034
mov	bx, [bp+0Ah]
mov	ax, [bx]
mov	bx, [bp-2]
mov	[bx], ax
mov	ax, [bp+0Ah]
mov	bx, [bp-4]
mov	[bx], ax
mov	bx, ax
mov	word ptr [bx], 0
push	word ptr [bp+8]
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp+0Ah]
mov	[bx+0Ah], al
push	bx
call	far ptr	59Dh:0BEh
add	sp, 2
push	word ptr [bp+8]
push	word ptr [bp+0Ah]
call	far ptr	59Dh:1E8h
add	sp, 4
mov	bx, [bp+0Ah]
mov	byte ptr [bx+0Ch], 1
mov	byte ptr [bx+0Eh], 0
push	bx
call	far ptr	59Dh:700h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	word ptr [bp+6]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short near ptr loc_12097+1
jmp	loc_1212E
;     ***************************************************************************
push	word ptr [bp+6]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short loc_120AA
jmp	loc_1212E
;     ***************************************************************************
cmp	byte ptr [bp+8], 1
jz	short loc_1212E
push	word ptr [bp+6]
call	far ptr	525h:4Ah
add	sp, 2
mov	[bp-6],	ax
push	ax
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_1212E
push	word ptr [bp-6]
push	current_ruler
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jnz	short loc_1212E
mov	bx, [bp-6]
mov	ax, [bx]
mov	[bp-2],	ax
mov	al, [bp+8]
sub	ah, ah
dec	ax
push	ax
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, ax
shl	bx, 1
mov	ax, [bx-314Ch]
mov	[bp-4],	ax
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
sub	ah, ah
mov	bx, [bp-4]
mov	cl, [bx+5]
sub	ch, ch
add	ax, cx
mov	bx, [bp-2]
mov	cl, [bx+5]
cmp	ax, cx
jg	short loc_1212E
push	word ptr [bp-4]
push	word ptr [bp-6]
push	word ptr [bp+6]
push	cs
call	near ptr word_11FBA
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
nop
push	bp
mov	bp, sp
sub	sp, 16h
push	si
push	current_province
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short near ptr loc_1216F+1
push	current_province
call	far ptr	59Dh:428h
add	sp, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bl, al
sub	bh, bh
shl	bx, 1
mov	ax, [bx-359Eh]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	word ptr [bp-0Ch], 2DC4h
mov	byte ptr [bp-8], 0
push	word ptr [bp-0Ch]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_12195
add	word ptr [bp-0Ch], 23h ; '#'
inc	byte ptr [bp-8]
cmp	byte ptr [bp-8], 29h ; ')'
jb	short near ptr loc_12178+1
cmp	word ptr [bp-0Ch], 0
jnz	short near ptr loc_121A1+1
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
push	ax
push	current_province
push	word ptr [bp-0Ch]
call	loc_12141+1
add	sp, 6
mov	word ptr [bp-14h], 0
mov	byte ptr [bp-6], 29h ; ')'
mov	word ptr [bp-0Ch], 2DC4h
mov	word ptr [bp-16h], 29h ; ')'
push	word ptr [bp-0Ch]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short loc_121FB
mov	cl, 3
mov	bx, [bp-0Ch]
mov	si, [bx+21h]
and	si, 0FFh
shl	si, cl
mov	bl, [bx+20h]
sub	bh, bh
mov	al, [bx+si-3432h]
mov	[bp-10h], al
cmp	al, [bp-6]
jnb	short loc_121FB
mov	ax, [bp-0Ch]
mov	[bp-14h], ax
add	word ptr [bp-0Ch], 23h ; '#'
dec	word ptr [bp-16h]
jnz	short loc_121C7
cmp	word ptr [bp-14h], 0
jnz	short loc_1220D
jmp	loc_122A1
;     ***************************************************************************
mov	ax, 1
push	ax
push	word ptr [bp-14h]
push	current_province
call	loc_12141+1
add	sp, 6
mov	word ptr [bp-14h], 0
mov	byte ptr [bp-6], 0FAh ;	'  *'
mov	bx, current_province
mov	al, [bx+20h]
mov	[bp-2],	al
mov	al, [bx+21h]
mov	[bp-4],	al
mov	byte ptr [bp-12h], 0
mov	al, [bp-2]
mov	[bp-0Ah], al
mov	al, [bp-4]
mov	[bp-0Eh], al
mov	al, [bp-12h]
push	ax
lea	ax, [bp-0Eh]
push	ax
lea	ax, [bp-0Ah]
push	ax
call	far ptr	59Dh:2A8h
add	sp, 6
mov	[bp-8],	al
cmp	al, 0FFh
jz	short near ptr loc_12293+5
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	[bp-0Ch], ax
mov	cl, 3
mov	si, [bp-0Eh]
and	si, 0FFh
shl	si, cl
mov	bl, [bp-0Ah]
sub	bh, bh
mov	al, [bx+si-3432h]
mov	[bp-10h], al
cmp	al, [bp-6]
jnb	short near ptr loc_12293+5
mov	ax, [bp-0Ch]
mov	[bp-14h], ax
mov	al, [bp-10h]
mov	[bp-6],	al
inc	byte ptr [bp-12h]
cmp	byte ptr [bp-12h], 6
jb	short near ptr loc_12239+4
mov	ax, [bp-14h]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	bx, current_ruler
cmp	word ptr [bx+27h], 0
jg	short near ptr unk_122C9
jge	short near ptr unk_122BF
jmp	loc_12374
;     ***************************************************************************
cmp	word ptr [bx+25h], 2710h
jnb	short near ptr unk_122C9
jmp	loc_12374
;     ***************************************************************************
mov	word ptr [bp-4], 50h ; 'P'
push	current_province
call	far ptr	59Dh:428h
add	sp, 2
mov	word ptr [bp-6], 0CA62h
jmp	short near ptr loc_12328+1
;     ***************************************************************************
nop
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_12325
push	word ptr [bp-0Ah]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jnz	short loc_12325
push	word ptr [bp-4]
push	word ptr [bp-0Ah]
call	far ptr	loc_1290E
add	sp, 2
push	ax
call	far ptr	561h:19Ch
add	sp, 4
push	ax
mov	ax, 12Ch
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	[bp-4],	ax
add	word ptr [bp-6], 2
mov	bx, [bp-6]
mov	ax, [bx]
mov	[bp-0Ah], ax
or	ax, ax
jnz	short loc_122E2
mov	[bp-8],	ax
mov	bx, current_ruler
mov	ax, [bx]
or	ax, ax
jz	short near ptr loc_12355+2
mov	bx, ax
mov	ax, [bx+12h]
mov	cx, 64h	; 'd'
sub	dx, dx
div	cx
add	[bp-8],	ax
mov	ax, [bx]
or	ax, ax
jnz	short loc_12342
mov	bx, current_ruler
mov	bx, [bx]
cmp	word ptr [bx+12h], 2710h
jnz	short loc_1236C
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, [bp-4]
cmp	[bp-8],	ax
jnb	short loc_12364
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	current_province
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short near ptr loc_12391+2
jmp	near ptr loc_12469+1
;     ***************************************************************************
push	cs
call	near ptr loc_122A8+2
or	ax, ax
jnz	short near ptr unk_1239E
jmp	near ptr loc_12469+1
;     ***************************************************************************
mov	ax, word_13396
mov	bx, current_province
mov	[bx+2],	ax
push	current_province
push	current_ruler
call	far ptr	59Dh:49Ch
add	sp, 4
mov	bx, current_ruler
mov	byte ptr [bx+22h], 0FFh
mov	ax, 7530h
push	ax
mov	bx, current_ruler
push	word ptr [bx+23h]
mov	ax, current_province
add	ax, 8
push	ax
call	far ptr	49Ch:8Ch
add	sp, 6
mov	bx, current_ruler
mov	ax, [bx+25h]
mov	dx, [bx+27h]
mov	bx, current_province
add	[bx+0Ah], ax
adc	[bx+0Ch], dx
mov	bx, current_province
cmp	word ptr [bx+0Ch], 2Dh ; '-'
jl	short near ptr loc_12409+2
jg	short near ptr loc_12400+1
cmp	word ptr [bx+0Ah], 0C6C0h
jbe	short near ptr loc_12409+2
mov	word ptr [bx+0Ah], 0C6C0h
mov	word ptr [bx+0Ch], 2Dh ; '-'
mov	ax, 5
push	ax
mov	ax, 951Bh
sub	dx, dx
push	dx
push	ax
call	far ptr	4B5h:1F8h
add	sp, 6
push	current_province
call	far ptr	4B5h:3F4h
add	sp, 2
call	far ptr	4B5h:290h
push	current_province
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, word_13396
add	ax, 1Ch
push	ax
mov	ax, 0B20Fh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
mov	al, 6
push	ax
call	far ptr	6EBh:4F0h
add	sp, 2
mov	bx, current_province
or	byte ptr [bx+13h], 30h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	byte ptr [bp-8], 0
mov	ax, word_13396
mov	[bp-2],	ax
or	ax, ax
jz	short near ptr loc_12490+1
mov	bl, [bp-8]
sub	bh, bh
shl	bx, 1
mov	[bx-314Eh], ax
inc	byte ptr [bp-8]
mov	bx, ax
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_12478
push	cs
call	near ptr loc_12133+1
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr off_124BA
push	ax
call	far ptr	525h:64h
add	sp, 2
mov	bx, current_ruler
mov	[bx+22h], al
mov	al, [bp-8]
push	ax
push	word ptr [bp-4]
push	cs
call	near ptr loc_1207F+1
add	sp, 4
mov	al, 14h
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_124CB+1
jmp	near ptr loc_1256D+2
;     ***************************************************************************
mov	ax, 5DCh
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 1F4h
mov	cl, [bp-8]
sub	ch, ch
sub	dx, dx
div	cx
inc	ax
mov	[bp-6],	ax
mov	ax, word_13396
mov	[bp-2],	ax
or	ax, ax
jz	short near ptr loc_12511+3
mov	ax, 2710h
push	ax
push	word ptr [bp-6]
mov	ax, [bp-2]
add	ax, 12h
push	ax
call	far ptr	49Ch:8Ch
add	sp, 6
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_124F2
mov	ax, 7530h
push	ax
mov	ax, 12Ch
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 0C8h ; '  *'
push	ax
mov	ax, current_ruler
add	ax, 23h	; '#'
push	ax
call	far ptr	49Ch:8Ch
add	sp, 6
mov	ax, 1B58h
push	ax
call	far ptr	49Ch:178h
add	sp, 2
add	ax, 0BB8h
sub	dx, dx
mov	bx, current_ruler
add	[bx+25h], ax
adc	[bx+27h], dx
mov	bx, current_ruler
cmp	word ptr [bx+27h], 2Dh ; '-'
jl	short near ptr loc_1256D+2
jg	short loc_12565
cmp	word ptr [bx+25h], 0C6C0h
jbe	short near ptr loc_1256D+2
mov	word ptr [bx+25h], 0C6C0h
mov	word ptr [bx+27h], 2Dh ; '-'
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
push	word ptr [bp+6]
call	loc_23992
mov	sp, bp
or	ax, ax
jz	short loc_125B3
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
call	loc_23968+2
mov	sp, bp
or	ax, ax
jnz	short loc_125B3
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
call	loc_23A26+2
mov	sp, bp
or	ax, ax
jz	short near ptr loc_125B5+1
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	cl, 4
mov	al, [bp+8]
shl	al, cl
or	al, [bp+0Ah]
mov	bx, [bp+6]
mov	[bx+18h], al
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
push	si
mov	al, [bp+0Ah]
and	al, 1
dec	al
jnz	short loc_12602
call	func_1B720
mov	[bp-2],	al
cmp	byte ptr [bp+0Ah], 1
jnz	short near ptr loc_125F6+2
and	al, 1
dec	al
jnz	short loc_12602
mov	byte ptr [bp+0Ah], 3
jmp	short loc_12602
;     ***************************************************************************
cmp	byte ptr [bp-2], 1
jbe	short loc_12602
mov	byte ptr [bp+0Ah], 1
mov	cl, [bp+0Ah]
mov	al, 1
shl	al, cl
mov	si, [bp+8]
and	si, 0FFh
mov	cx, si
shl	si, 1
add	si, cx
shl	si, 1
shl	si, 1
add	si, cx
mov	bl, [bp+6]
sub	bh, bh
or	[bx+si-4594h], al
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, word ptr loc_1B8E3+3
cmp	byte ptr [bx+17h], 6
jnb	short near ptr loc_12636+1
inc	byte ptr [bx+17h]
push	word ptr loc_1B8E3+3
call	loc_238FA
add	sp, 2
or	ax, ax
jz	short near ptr loc_12699+1
push	word ptr loc_1B8E3+3
call	loc_23487+1
add	sp, 2
mov	bl, al
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
cmp	word ptr [bx-3486h], 0
jnz	short near ptr loc_12699+1
mov	bx, word ptr loc_1B8E3+3
mov	al, [bx+17h]
sub	ah, ah
push	ax
mov	ax, 0B252h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, 7
push	ax
mov	ax, 50h	; 'P'
push	ax
mov	ax, 18h
push	ax
mov	ax, 130h
push	ax
mov	ax, 36h	; '6'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	byte_1B8E2, 1
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
cmp	word ptr [bp+6], 0
jz	short loc_126B1
call	loc_24262
cmp	word ptr [bp+6], 0
jnz	short near ptr loc_126B8+2
jmp	loc_12776
;     ***************************************************************************
mov	word ptr [bp-2], 1
mov	ax, [bp+6]
mov	word ptr loc_1B8E3+3, ax
mov	bx, ax
mov	cx, [bx]
mov	word ptr loc_1B8E8, cx
push	ax
call	loc_24A6E
add	sp, 2
mov	cl, 4
mov	bx, [bp+6]
mov	al, [bx+18h]
shr	al, cl
mov	byte_1B8DF, al
mov	al, [bx+18h]
and	al, 0Fh
mov	byte ptr word_1B8E0, al
push	bx
call	unk_24274
add	sp, 2
call	far ptr	3EFh:79Ah
mov	[bp-4],	al
push	ax
call	far ptr	3EFh:55Ch
add	sp, 2
mov	al, [bp-4]
sub	ah, ah
sub	ax, 31h	; '1'
jl	short loc_12763
dec	ax
jle	short loc_12723
dec	ax
jz	short near ptr loc_1271D+1
dec	ax
jl	short loc_12763
dec	ax
dec	ax
jle	short loc_12723
jmp	short loc_12763
;     ***************************************************************************
mov	word ptr [bp-2], 0
mov	bl, [bp-4]
sub	bh, bh
shl	bx, 1
shl	bx, 1
call	dword ptr [bx-4E56h]
cmp	byte_1B8E2, 0
jz	short loc_1274B
call	loc_2297C
or	ax, ax
jnz	short near ptr loc_1276C+2
mov	ax, word ptr loc_1B8E8
mov	[bp+6],	ax
mov	byte_1B8E2, 0
cmp	word ptr [bp+6], 0
jz	short loc_1275E
cmp	word ptr [bp-2], 0
jz	short loc_12763
call	loc_24262
jmp	short loc_12763
;     ***************************************************************************
call	loc_24020+2
cmp	word ptr [bp+6], 0
jz	short loc_1276C
jmp	near ptr loc_126B8+2
;     ***************************************************************************
jmp	short loc_12776
;     ***************************************************************************
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	bx, [bp+6]
mov	al, [bx+12h]
and	ax, 10h
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	word ptr [bp-4], 0CB72h
cmp	byte ptr word_1B8E0+1, 1Fh
jnb	short loc_12818
call	loc_231E7+3
mov	byte ptr [bp-6], 0
mov	ax, [bp-4]
mov	[bp-2],	ax
push	word ptr [bp-2]
call	loc_2391F+3
add	sp, 2
or	ax, ax
jz	short near ptr loc_127D2+2
mov	bx, [bp-2]
cmp	word ptr [bx+8], 0
jnz	short near ptr loc_127D2+2
push	word ptr [bx+4]
push	cs
call	loc_126A0
add	sp, 2
or	ax, ax
jz	short loc_127E4
jmp	short near ptr loc_127F0+1
;     ***************************************************************************
nop
mov	al, [bp-6]
push	ax
call	loc_2B699+1
add	sp, 2
or	ax, ax
jnz	short near ptr loc_127F0+1
add	word ptr [bp-2], 0Ah
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 4
jb	short near ptr loc_127AA+1
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short near ptr loc_127F9+4
call	loc_23278+2
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short near ptr loc_1280E+4
inc	byte ptr word_1B8E0+1
cmp	byte ptr word_1B8E0+1, 1Fh
jb	short near ptr loc_1279A+2
jmp	short loc_12818
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
mov	al, 0FFh
push	ax
mov	ax, 14h
push	ax
mov	ax, 0B8FCh
push	ax
call	far ptr	561h:0A0h
add	sp, 6
sub	al, al
mov	[bp-6],	al
mov	[bp-4],	al
sub	al, al
mov	[bp-2],	al
mov	[bp-8],	al
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
push	word ptr [bp+6]
push	cs
call	near ptr loc_12572+2
add	sp, 6
or	ax, ax
jnz	short near ptr loc_1286C+5
mov	al, [bp-4]
or	al, [bp-8]
mov	bl, [bp-6]
sub	bh, bh
mov	[bx-4704h], al
inc	byte ptr [bp-6]
mov	al, [bp-8]
add	al, 10h
mov	[bp-8],	al
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 0Dh
jb	short loc_12849
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 0Ch
jb	short loc_12841
mov	al, [bp-6]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	loc_27734
push	word_1CA9A
push	cs
call	near ptr loc_1277B+1
add	sp, 2
or	ax, ax
jnz	short near ptr loc_128AA+1
call	loc_297B6
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short near ptr loc_128C1+1
push	cs
call	loc_1278A
or	ax, ax
jz	short near ptr loc_128C1+1
call	loc_25FAC+4
jmp	short near ptr loc_128C4+3
;     ***************************************************************************
nop
call	far ptr	loc_2D0CE
call	loc_22FBE
sub	ax, ax
mov	word_13532, ax
mov	word_13530, ax
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	[bp-2],	al
mov	byte ptr [bp-4], 0
mov	al, byte ptr loc_1CAAD
sub	ah, ah
shl	ax, 1
shl	ax, 1
mov	[bp-6],	ax
mov	si, [bp-6]
mov	bl, [bp-4]
sub	bh, bh
mov	al, [bp-2]
cmp	[bx+si-4D7Ah], al
jbe	short loc_12913
mov	al, byte ptr loc_1CAAD
cmp	bl, al
jnz	short loc_12922
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 4
jb	short loc_128FB
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bp-4]
mov	byte ptr loc_1CAAD, al
call	loc_23FD8
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_23A26+2
mov	sp, bp
cmp	ax, 1
sbb	al, al
and	al, 1Eh
add	al, 14h
push	ax
call	far ptr	57Ch:0DCh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	si
mov	si, word ptr loc_1B8D7+1
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, byte ptr loc_1B8D7
sub	bh, bh
mov	al, [bx+si-4594h]
and	ax, 0Ch
pop	si
retf
;     ***************************************************************************
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short loc_129A4
push	word ptr loc_1B8E3+3
push	cs
call	loc_12E1C
add	sp, 2
push	cs
call	near ptr loc_12957+1
or	ax, ax
jz	short loc_129A4
mov	al, 3
push	ax
mov	al, 1
push	ax
call	loc_25135+3
add	sp, 4
cmp	byte ptr loc_1B8D2+3, 0FFh
jz	short loc_129B0
mov	ax, 1
retf
;     ***************************************************************************
nop
sub	ax, ax
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
push	cs
call	near ptr loc_1292F+3
add	sp, 4
or	ax, ax
jz	short near ptr loc_12A16+1
mov	al, [bp+8]
push	ax
mov	cl, [bp+6]
push	cx
call	loc_237E9+1
add	sp, 4
mov	[bp-2],	ax
mov	bl, [bp+8]
sub	bh, bh
mov	cx, bx
mov	ax, bx
shl	bx, 1
add	bx, ax
shl	bx, 1
shl	bx, 1
add	bx, ax
mov	al, [bp+6]
sub	ah, ah
add	bx, ax
and	byte ptr [bx-4594h], 0DFh
push	cx
push	ax
call	unk_24648
add	sp, 4
cmp	word ptr [bp-2], 0
jz	short near ptr loc_12A16+1
push	word ptr [bp-2]
call	loc_24465+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ah
push	si
mov	bl, [bp+0Ah]
sub	bh, bh
shl	bx, 1
shl	bx, 1
add	bx, 0B296h
mov	[bp-6],	bx
cmp	byte ptr [bx], 0
jnz	short loc_12A3B
jmp	loc_12B22
;     ***************************************************************************
mov	al, [bp+6]
mov	[bp-2],	al
mov	al, [bp+8]
mov	[bp-8],	al
mov	al, [bx]
dec	al
push	ax
lea	ax, [bp-8]
push	ax
lea	ax, [bp-2]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jnz	short loc_12A63
jmp	near ptr loc_12B11+3
;     ***************************************************************************
mov	al, [bp-8]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jz	short near ptr loc_12A78+2
jmp	near ptr loc_12B11+3
;     ***************************************************************************
mov	al, 6
push	ax
mov	al, [bp-8]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jz	short loc_12A94
jmp	near ptr loc_12B11+3
;     ***************************************************************************
mov	si, [bp-8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-2]
sub	bh, bh
mov	al, [bx+si-4630h]
push	ax
call	loc_2365C
add	sp, 2
mov	[bp-0Ah], al
mov	al, [bp-8]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short near ptr unk_12AE7
mov	al, [bp-8]
push	ax
mov	al, [bp-2]
push	ax
mov	al, [bp-0Ah]
push	ax
call	loc_23686+4
add	sp, 6
mov	[bp-0Ah], al
mov	al, [bp-0Ah]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_12B11+3
mov	si, [bp-8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-2]
sub	bh, bh
or	byte ptr [bx+si-4594h],	40h
inc	word ptr [bp-6]
mov	bx, [bp-6]
cmp	byte ptr [bx], 0
jz	short loc_12B22
jmp	loc_12A3B
;     ***************************************************************************
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
mov	byte ptr [bp-6], 0
mov	byte ptr [bp-4], 0
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jz	short near ptr loc_12B96+1
mov	al, [bp-6]
push	ax
mov	cl, [bp-4]
push	cx
call	loc_237E9+1
add	sp, 4
mov	[bp-2],	ax
mov	bl, [bp-6]
sub	bh, bh
mov	cx, bx
mov	ax, cx
shl	bx, 1
add	bx, ax
shl	bx, 1
shl	bx, 1
add	bx, ax
mov	al, [bp-4]
sub	ah, ah
add	bx, ax
and	byte ptr [bx-4594h], 0DFh
push	cx
push	ax
call	unk_24648
add	sp, 4
cmp	word ptr [bp-2], 0
jz	short near ptr loc_12B96+1
push	word ptr [bp-2]
call	loc_24465+1
add	sp, 2
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 0Dh
jb	short loc_12B36
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 0Ch
jb	short near ptr byte_12B32
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	byte ptr [bp-6], 0
mov	byte ptr [bp-4], 0
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jz	short near ptr loc_12BE1+1
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
push	cs
call	loc_129B4
add	sp, 4
jmp	short near ptr loc_12C47+3
;     ***************************************************************************
mov	si, [bp-6]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-4]
sub	bh, bh
test	byte ptr [bx+si-4594h],	40h
jz	short near ptr loc_12C47+3
mov	bl, [bp-6]
mov	cx, bx
mov	ax, cx
shl	bx, 1
add	bx, ax
shl	bx, 1
shl	bx, 1
add	bx, ax
mov	al, [bp-4]
sub	ah, ah
add	bx, ax
or	byte ptr [bx-4594h], 20h
and	byte ptr [bx-4594h], 0BFh
push	cx
push	ax
call	unk_24648
add	sp, 4
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_237E9+1
add	sp, 4
or	ax, ax
jz	short near ptr loc_12C47+3
push	ax
call	loc_24465+1
add	sp, 2
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 0Dh
jnb	short near ptr loc_12C55+1
jmp	loc_12BBD
;     ***************************************************************************
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 0Ch
jnb	short near ptr loc_12C61+1
jmp	near ptr loc_12BB8+1
;     ***************************************************************************
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	si
cmp	byte ptr loc_1CAAD, 3
jnz	short near ptr loc_12C7F+1
push	cs
call	loc_12B28
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	byte ptr [bp-4], 0
mov	byte ptr [bp-2], 0
mov	al, [bp-4]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
shl	ax, 1
add	ax, cx
mov	[bp-6],	ax
mov	si, [bp-6]
mov	bl, [bp-2]
sub	bh, bh
test	byte ptr [bx+si-4594h],	20h
jz	short near ptr loc_12CD3+2
cmp	byte ptr loc_1CAAD+1, 6
jnz	short loc_12CC2
mov	al, [bp-4]
push	ax
mov	al, bl
push	ax
push	cs
call	loc_129B4
add	sp, 4
jmp	short near ptr loc_12CD3+2
;     ***************************************************************************
mov	al, byte ptr loc_1CAAD+1
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
push	cs
call	loc_12A1C
add	sp, 6
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 0Dh
jb	short loc_12C9C
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 0Ch
jb	short loc_12C84
push	cs
call	near ptr loc_12BAD+1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	word ptr [bp+6]
call	loc_23834
add	sp, 2
and	al, 3
cmp	al, 1
cmc
sbb	bx, bx
and	bx, 2
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	ax, [bx-348Ah]
mov	cx, 1
push	cx
push	cx
push	ax
push	word ptr [bp+6]
call	loc_25364
add	sp, 8
call	loc_24020+2
mov	ax, [bp+6]
add	ax, 1Ch
push	ax
mov	ax, 0B2AEh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
call	loc_25054+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	ax, 64h	; 'd'
cwd
push	dx
push	ax
push	word ptr [bp+8]
push	word ptr [bp+6]
mov	cl, [bp+0Ah]
sub	ch, ch
sub	ax, cx
cwd
push	dx
push	ax
call	far ptr	0:38B2h
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
push	di
push	si
mov	al, 1Eh
push	ax
mov	bl, [bp+6]
sub	bh, bh
mov	cx, bx
shl	bx, 1
mov	dx, [bx-355Fh]
sub	si, si
push	si
push	dx
mov	si, cx
mov	di, bx
push	cs
call	loc_12D4C
add	sp, 6
mov	[di-355Fh], ax
mov	al, 1Eh
push	ax
shl	si, 1
shl	si, 1
push	word ptr [si-3559h]
push	word ptr [si-355Bh]
push	cs
call	loc_12D4C
add	sp, 6
mov	[si-355Bh], ax
mov	[si-3559h], dx
or	dx, dx
jg	short near ptr loc_12DE8+3
jl	short loc_12DC9
cmp	word ptr [si-355Bh], 1
jnb	short near ptr loc_12DE8+3
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short near ptr loc_12DE8+3
cmp	byte ptr [bp+6], 1
cmc
sbb	al, al
and	al, 4
push	ax
cmp	byte ptr [bp+6], 1
sbb	al, al
neg	al
push	ax
call	loc_25135+3
add	sp, 4
call	loc_24239+3
call	loc_2420D+1
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jz	short loc_12E1A
sub	al, al
push	ax
push	cs
call	near ptr unk_12D76
add	sp, 2
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
cmp	word ptr [bp+6], 0
jz	short loc_12E70
mov	bx, [bp+6]
mov	al, [bx+18h]
mov	cx, ax
and	al, 0Fh
push	ax
mov	al, 4
xchg	cl, al
shr	al, cl
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jz	short loc_12E66
mov	ax, word ptr loc_1CB8A
cmp	[bp+6],	ax
jnz	short near ptr unk_12E58
mov	al, 1
push	ax
push	cs
call	near ptr unk_12D76
add	sp, 2
sub	ax, ax
push	ax
push	word ptr [bp+6]
call	loc_24751+1
add	sp, 4
call	loc_2417A+2
call	loc_241BA
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	ax, 1
push	ax
mov	ax, 1Eh
cwd
push	dx
push	ax
push	word ptr [bp+8]
push	word ptr [bp+6]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
push	ax
call	far ptr	561h:19Ch
add	sp, 4
mov	[bp-4],	ax
mov	word ptr [bp-2], 0
mov	bl, [bp+0Ah]
sub	bh, bh
shl	bx, 1
shl	bx, 1
mov	ax, [bx-355Bh]
mov	dx, [bx-3559h]
cmp	dx, [bp-2]
jl	short loc_12EC4
jg	short near ptr unk_12EBE
cmp	ax, [bp-4]
jbe	short loc_12EC4
mov	dx, [bp-2]
mov	ax, [bp-4]
sub	[bx-355Bh], ax
sbb	[bx-3559h], dx
mov	si, bx
call	loc_2420D+1
mov	ax, [si-3559h]
or	ax, [si-355Bh]
jnz	short loc_12EE6
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
call	loc_24020+2
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	bx, [bx-348Eh]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0B2C9h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	byte ptr [bp-6], 2
mov	word ptr [bp-0Ah], 2
sub	ax, ax
push	ax
mov	al, [bp-6]
push	ax
call	far ptr	loc_2B96A
add	sp, 4
mov	[bp-4],	ax
mov	[bp-2],	dx
cmp	byte ptr [bp-6], 0
jnz	short near ptr unk_12F6A
sub	ax, ax
push	ax
mov	bx, word_1CB74
push	word ptr [bx+2]
call	loc_245DB+1
add	sp, 4
add	[bp-4],	ax
adc	[bp-2],	dx
mov	al, [bp-6]
shr	al, 1
push	ax
push	word ptr [bp-2]
push	word ptr [bp-4]
push	cs
call	loc_12E74
add	sp, 6
or	ax, ax
jz	short near ptr loc_12FAD+1
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short near ptr loc_12FAD+1
cmp	byte ptr [bp-6], 1
cmc
sbb	al, al
and	al, 4
push	ax
cmp	byte ptr [bp-6], 1
sbb	al, al
neg	al
push	ax
call	loc_25135+3
add	sp, 4
mov	al, [bp-6]
push	ax
push	cs
call	loc_12EEE
add	sp, 2
sub	byte ptr [bp-6], 2
dec	word ptr [bp-0Ah]
jz	short loc_12FBA
jmp	loc_12F37
;     ***************************************************************************
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	ax, word_1CB74
mov	[bp-4],	ax
cmp	byte ptr loc_1CB65+2, 0FFh
jnz	short loc_12FD6
dec	byte ptr word_1B8E0+1
mov	al, byte ptr word_1B8E0+1
shr	al, 1
shr	al, 1
sub	ah, ah
mov	[bp-2],	ax
push	ax
mov	si, ax
call	far ptr	49Ch:178h
add	sp, 2
add	si, ax
push	si
mov	bx, [bp-4]
mov	al, [bx+16h]
sub	ah, ah
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	bx, [bp-4]
sub	[bx+16h], al
push	word ptr [bp-2]
call	far ptr	49Ch:178h
add	sp, 2
add	ax, [bp-2]
push	ax
mov	bx, [bp-4]
mov	al, [bx+17h]
sub	ah, ah
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	bx, [bp-4]
sub	[bx+17h], al
push	word ptr [bp-2]
call	far ptr	49Ch:178h
add	sp, 2
add	ax, [bp-2]
push	ax
mov	bx, [bp-4]
mov	al, [bx+18h]
sub	ah, ah
push	ax
call	far ptr	561h:18Ah
add	sp, 4
mov	bx, [bp-4]
sub	[bx+18h], al
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	al, 64h	; 'd'
mov	bx, [bp+6]
sub	al, [bx+0Bh]
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	[bp-2],	al
mov	al, 64h	; 'd'
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
sub	ah, ah
add	ax, 0Ah
mov	cl, [bp-2]
sub	ch, ch
cmp	ax, cx
jge	short near ptr loc_13090+2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	al, [bp+6]
sub	ah, ah
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 0CB72h
mov	[bp-6],	ax
mov	al, [bp+6]
and	al, 1
dec	al
jnz	short near ptr loc_130BD+2
jmp	near ptr loc_1316C+2
;     ***************************************************************************
mov	bx, [bp-6]
cmp	word ptr [bx+4], 0
jnz	short near ptr loc_130C9+2
jmp	near ptr loc_1316C+2
;     ***************************************************************************
mov	bx, [bx+4]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jnz	short near ptr loc_130D9+1
jmp	near ptr loc_1316C+2
;     ***************************************************************************
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-2],	ax
test	byte ptr [bx+2], 4
jnz	short loc_13161
test	byte ptr [bx+3], 0F0h
jnz	short loc_13161
cmp	byte ptr [bx+0Bh], 31h ; '1'
ja	short loc_13161
push	bx
push	cs
call	loc_13058
add	sp, 2
or	ax, ax
jz	short loc_13161
call	loc_24020+2
push	word ptr [bp-4]
call	loc_254AA+4
add	sp, 2
mov	al, 1
push	ax
push	word ptr [bp-4]
call	loc_23459+1
add	sp, 4
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 5Ah	; 'Z'
push	ax
cmp	byte ptr [bp+6], 1
sbb	bx, bx
and	bx, 2
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
push	word ptr [bx-348Eh]
call	far ptr	525h:6
add	sp, 2
push	ax
push	word ptr [bp-4]
call	loc_25446
add	sp, 6
call	loc_2417A+2
call	loc_241BA
mov	ax, [bp-2]
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr loc_1316C+2
jmp	near ptr loc_130D9+1
;     ***************************************************************************
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
nop
push	bp
mov	bp, sp
sub	sp, 8
mov	word ptr [bp-2], 0
mov	al, [bp+6]
and	al, 1
dec	al
jnz	short near ptr unk_13196
mov	bl, [bp+6]
and	bx, 0FEh
mov	ax, [bx-3551h]
jmp	short loc_131E0
;     ***************************************************************************
nop
mov	byte ptr [bp-4], 0
mov	al, [bp+6]
and	ax, 0FEh
mov	cx, ax
shl	ax, 1
add	ax, cx
mov	[bp-8],	ax
mov	bl, [bp-4]
sub	bh, bh
add	bx, [bp-8]
shl	bx, 1
cmp	word ptr [bx-354Bh], 0
jnz	short near ptr unk_131C6
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 6
jb	short loc_131A9
jmp	short near ptr loc_131E1+2
;     ***************************************************************************
nop
mov	bl, [bp+6]
and	bx, 0FEh
mov	ax, bx
shl	bx, 1
add	bx, ax
mov	al, [bp-4]
sub	ah, ah
add	bx, ax
shl	bx, 1
mov	ax, [bx-3533h]
mov	[bp-2],	ax
mov	ax, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	si
call	loc_2404B+1
mov	al, byte ptr word_1B8E0+1
mov	cl, 3
sub	ah, ah
div	cl
dec	ah
jnz	short loc_1321C
mov	al, 7
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	byte ptr loc_1CAAD+1, al
sub	ah, ah
push	ax
call	loc_24076+4
add	sp, 2
mov	word ptr [bp-6], 0CAA1h
mov	byte ptr [bp-4], 0
mov	al, [bp-4]
push	ax
push	cs
call	loc_13174
add	sp, 2
or	ax, ax
jnz	short loc_13242
cmp	byte ptr [bp-4], 1
jnz	short near ptr loc_1325F+3
mov	bx, [bp-6]
cmp	[bx+44h], ax
jz	short near ptr loc_1325F+3
mov	al, [bp-4]
sub	ah, ah
dec	ax
jz	short loc_1324E
dec	ax
dec	ax
jnz	short near ptr loc_1326F+1
mov	al, [bp-4]
shr	al, 1
sub	ah, ah
mov	si, ax
mov	bx, [bp-6]
mov	al, byte ptr word_1B8E0+1
cmp	[bx+si+12h], al
jbe	short near ptr loc_1326F+1
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 4
jb	short loc_13225
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	loc_29FE6+2
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	byte ptr [bp-2], 0
mov	al, [bp-2]
push	ax
push	cs
call	near ptr loc_13096+2
add	sp, 2
cmp	byte ptr [bp-2], 1
jnz	short loc_1329A
mov	al, 1
jmp	short near ptr loc_1329A+2
;     ***************************************************************************
nop
mov	al, 20h	; ' '
mov	[bp-4],	al
mov	al, [bp-2]
and	al, 1
dec	al
jnz	short near ptr loc_1330A+2
mov	al, [bp-4]
test	byte_1CAE7, al
jnz	short near ptr loc_1330A+2
mov	bl, [bp-2]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
cmp	word ptr [bx-348Ah], 0
jz	short near ptr loc_1330A+2
mov	bl, [bp-2]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
push	word ptr [bx-348Ah]
call	loc_238FA
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1330A+2
mov	al, 1Eh
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1330A+2
mov	al, [bp-2]
push	ax
call	loc_2BF47+3
add	sp, 2
or	ax, ax
jz	short near ptr loc_1330A+2
mov	al, [bp-4]
or	byte_1CAE7, al
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 4
jnb	short near ptr loc_13316+2
jmp	loc_13284
;     ***************************************************************************
push	cs
call	loc_12F28
mov	al, 28h	; '('
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1332F
push	cs
call	loc_128D6
push	cs
call	near ptr loc_12C66+2
push	cs
call	loc_12DFC
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ch
sub	ax, ax
push	ax
mov	al, [bp+6]
push	ax
call	far ptr	loc_2B96A
add	sp, 4
mov	[bp-4],	ax
mov	[bp-2],	dx
mov	bl, [bp+6]
and	bx, 0FEh
shl	bx, 1
mov	ax, [bx-355Bh]
mov	dx, [bx-3559h]
mov	[bp-0Ch], ax
mov	[bp-0Ah], dx
mov	ax, 1
push	ax
mov	ax, 1Eh
cwd
push	dx
push	ax
push	word ptr [bp-2]
push	word ptr [bp-4]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
push	ax
call	far ptr	561h:19Ch
add	sp, 4
sub	dx, dx
push	dx
push	ax
push	word ptr [bp-0Ah]
push	word ptr [bp-0Ch]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
add	ax, 1
adc	dx, 0
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
sub	al, al
mov	[bp-2],	al
mov	[bp-8],	al
mov	al, [bp-8]
push	ax
push	cs
call	near ptr loc_1333B+1
add	sp, 2
mov	[bp-6],	ax
or	dx, dx
jl	short near ptr loc_133D1+1
jg	short near ptr loc_133CA+3
cmp	ax, 0FFh
jbe	short near ptr loc_133D1+1
mov	al, 0FFh
jmp	short near ptr loc_133D1+4
;     ***************************************************************************
nop
mov	al, [bp-6]
mov	bl, [bp-2]
sub	bh, bh
mov	[bx-4736h], al
mov	al, [bp-8]
add	al, 2
mov	[bp-8],	al
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 2
jb	short near ptr options_value
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	bx, [bp+6]
mov	al, [bx+3]
and	ax, 0F0h
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
push	word ptr loc_1B8E3+3
push	word ptr [bp+6]
call	far ptr	loc_2BAE1+1
add	sp, 4
or	ax, ax
jnz	short loc_13454
push	word ptr [bp+6]
push	cs
call	near ptr word_133F4
add	sp, 2
or	ax, ax
jnz	short loc_13454
mov	al, [bp+8]
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
push	word ptr [bp+6]
mov	[bp-2],	ax
call	far ptr	loc_2BB0E
add	sp, 2
cmp	al, [bp-2]
jnb	short loc_1344E
mov	al, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	al, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
call	loc_24020+2
cmp	byte ptr [bp+8], 0
jnz	short near ptr loc_13472+1
mov	ax, 0B2F8h
push	ax
call	far ptr	3EFh:6C0h
mov	sp, bp
mov	ax, [bp+6]
add	ax, 1Ch
push	ax
mov	ax, 0B310h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	byte ptr [bp-4], 0
mov	bl, [bp-4]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	ax, [bx-348Ah]
mov	[bp-2],	ax
or	ax, ax
jz	short loc_134C0
mov	ax, [bp+6]
cmp	[bp-2],	ax
jz	short near ptr loc_134CB+3
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_134AA+2
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 4
jb	short loc_13492
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bp-4]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
push	word ptr [bp+6]
push	cs
call	near ptr loc_13487+1
mov	bl, al
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	ax, [bx-348Ch]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, [bp+6]
mov	ax, [bx+2]
mov	[bp-2],	ax
or	ax, ax
jz	short near ptr word_1352C
push	ax
call	far ptr	542h:7Eh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_13523+1
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_13509
jmp	short near ptr word_1352C
;     ***************************************************************************
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
sub	al, al
mov	[bp-8],	al
mov	[bp-6],	al
mov	al, [bp+0Ah]
mov	[bp-2],	al
mov	al, [bp+0Ch]
mov	[bp-4],	al
mov	al, [bp-6]
push	ax
lea	ax, [bp-4]
push	ax
lea	ax, [bp-2]
push	ax
push	cs
call	loc_13BEA
add	sp, 6
or	ax, ax
jz	short loc_13598
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
push	cs
call	near ptr loc_13A26+2
add	sp, 4
or	ax, ax
jz	short loc_13598
mov	ax, 1
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
push	cs
call	loc_13B7E
add	sp, 0Ah
or	ax, ax
jnz	short loc_13598
inc	byte ptr [bp-8]
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 6
jb	short near ptr loc_1353F+1
mov	al, [bp-8]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
push	word ptr [bp+6]
call	far ptr	525h:0EEh
mov	sp, bp
sub	ah, ah
push	ax
push	word ptr [bp+8]
call	far ptr	49Ch:32h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
push	word ptr [bp+8]
mov	bx, [bp+6]
push	word ptr [bx+14h]
call	far ptr	561h:18Ah
mov	bx, [bp+6]
sub	[bx+14h], ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
push	word ptr [bp+8]
mov	bx, [bp+6]
push	word ptr [bx+12h]
call	far ptr	49Ch:32h
add	sp, 4
mov	bx, [bp+6]
push	word ptr [bx+12h]
push	ax
call	far ptr	561h:18Ah
add	sp, 4
push	ax
push	word ptr [bp+6]
push	cs
call	loc_135A8
add	sp, 4
push	ax
push	word ptr [bp+6]
push	cs
call	near ptr unk_135C4
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


Flash_Target_Unit proc far
mov	ax, 0B32Eh
;     ***************************************************************************
db  50h	; P
db 0B8h	;   *
db    7
db    1
db  50h	; P
db 0B8h	;   *
db  10h
db    0
db  50h	; P
db 0B8h	;   *
db    4
db    0
db  50h	; P
db 0A0h	;   *
db 0DFh	;   *
db 0B8h	;   *
db  24h	; $
db    1
db  3Ch	; <
db    1
db 0F5h	;   *
db  1Bh
db 0C0h	;   *
db  25h	; %
db    8
db    0
db 0B1h	;   *
db    4
db  8Ah	;   *
db  16h
db 0E0h	;   *
db 0B8h	;   *
db  2Ah	; *
db 0F6h	;   *
db 0D3h	;   *
db 0E2h	;   *
db    3
db 0C2h	;   *
db  50h	; P
db 0A0h	;   *
db 0DFh	;   *
db 0B8h	;   *
db  2Ah	; *
db 0E4h	;   *
db 0D1h	;   *
db 0E0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db  50h	; P
db  9Ah	;   *
db  69h	; i
db  14h
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ch
db 0CBh	;   *
Flash_Target_Unit endp

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
cmp	byte ptr [bp+6], 4
jnz	short loc_1366C
sub	ax, ax
jmp	short loc_13676
;     ***************************************************************************
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
sub	ah, ah
mov	[bp-4],	ax
mov	bl, [bp+6]
sub	bh, bh
mov	al, [bx-4C92h]
add	al, [bp-4]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
push	cs
call	near ptr loc_137E9+1
add	sp, 4
mov	[bp-2],	ax
mov	bx, word ptr loc_1B8E3+3
mov	al, [bx+4]
mov	bx, [bp-2]
mov	cl, [bx+4]
mov	[bp-8],	cl
cmp	al, cl
jb	short near ptr loc_136B8+2
sub	al, cl
jmp	short near ptr loc_136BB+1
;     ***************************************************************************
sub	al, al
sub	ah, ah
push	ax
call	far ptr	49Ch:178h
add	sp, 2
shr	ax, 1
mov	cl, [bp+6]
sub	ch, ch
mov	dx, ax
mov	ax, 65h	; 'e'
mov	bl, [bp-8]
sub	bh, bh
sub	ax, bx
mov	bx, dx
mul	cx
mov	cx, 64h	; 'd'
sub	dx, dx
div	cx
add	bx, ax
cmp	byte ptr [bp+6], 0
jnz	short loc_136F4
mov	al, [bp+6]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, cx
push	ax
push	bx
call	far ptr	561h:18Ah
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
mov	word ptr [bp-8], 0
cmp	word ptr [bp+6], 0
jz	short loc_13752
mov	bx, [bp+6]
mov	al, [bx+16h]
sub	ah, ah
mov	[bp-6],	ax
push	bx
call	far ptr	525h:0EEh
add	sp, 2
sub	ah, ah
mov	[bp-4],	ax
mov	bx, [bp+6]
mov	al, [bx+5]
mov	[bp-2],	ax
cmp	word ptr [bx+1Ah], 0A3h	; '  *'
jnz	short loc_13740
add	word ptr [bp-2], 14h
mov	ax, [bp-2]
mov	cx, ax
shl	ax, 1
add	ax, cx
add	ax, [bp-4]
add	ax, [bp-6]
mov	[bp-8],	ax
mov	ax, [bp-8]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	bx, [bp+0Eh]
mov	ax, [bx+12h]
mov	[bp-4],	ax
mov	si, word ptr loc_1B8E3+1
mov	al, [si+18h]
mov	[bp-2],	al
cmp	si, bx
jnz	short near ptr loc_13796+2
mov	al, 6
push	ax
mov	al, [bp-2]
and	al, 0Fh
push	ax
mov	cl, 4
mov	al, [bp-2]
shr	al, cl
push	ax
push	cs
call	loc_13934
add	sp, 6
or	ax, ax
jz	short near ptr loc_13796+2
mov	byte ptr [bp+0Ah], 7
mov	ax, 12Ch
push	ax
call	far ptr	49Ch:178h
add	sp, 2
push	ax
push	word ptr [bp-4]
call	far ptr	561h:18Ah
add	sp, 4
sub	ax, [bp+6]
neg	ax
sub	ax, [bp+8]
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
shl	ax, 1
mov	bl, [bp+0Ah]
sub	bh, bh
shl	bx, 1
cwd
idiv	word ptr [bx-4C8Ah]
cwd
idiv	word ptr [bp+0Ch]
or	ax, ax
jl	short near ptr loc_137E3+2
mov	ax, 1Eh
push	ax
call	far ptr	49Ch:178h
add	sp, 2
neg	ax
dec	ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
mov	cl, 4
mov	al, [bp+6]
shl	al, cl
or	al, [bp+8]
mov	[bp-2],	al
mov	word ptr [bp-8], 0CB76h
mov	bx, [bp-8]
mov	ax, [bx]
or	ax, ax
jz	short loc_1381B
mov	bx, ax
mov	al, [bp-2]
cmp	[bx+18h], al
jz	short loc_13828
mov	ax, [bx]
or	ax, ax
jnz	short near ptr loc_1380A+1
add	word ptr [bp-8], 0Ah
cmp	word ptr [bp-8], 0CB9Eh
jb	short loc_13802
jmp	short near ptr loc_1382D+1
;     ***************************************************************************
mov	ax, bx
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	bx, [bp+6]
mov	al, [bx+18h]
mov	cx, ax
and	al, 0Fh
sub	ah, ah
mov	si, ax
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, 4
xchg	cl, bl
shr	bl, cl
sub	bh, bh
mov	al, [bx+si-4594h]
and	al, 0Fh
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
push	di
push	si
mov	si, [bp+0Ch]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+0Ah]
sub	bh, bh
and	byte ptr [bx+si-4594h],	0F0h
mov	di, [bp+8]
and	di, 0FFh
mov	ax, di
shl	di, 1
add	di, ax
shl	di, 1
shl	di, 1
add	di, ax
mov	ax, bx
mov	bl, [bp+6]
mov	cl, [bx+di-4594h]
and	cl, 0Fh
mov	dx, bx
mov	bx, ax
or	[bx+si-4594h], cl
mov	bx, dx
and	byte ptr [bx+di-4594h],	20h
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	byte ptr [bp-2], 0
push	word ptr [bp+0Ch]
push	word ptr [bp+0Ah]
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
mov	al, [bp-2]
push	ax
call	loc_249DA+2
add	sp, 0Ah
or	ax, ax
jnz	short loc_138F2
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 6
jb	short near ptr loc_138C5+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
cmp	word ptr [bp+6], 0
jz	short loc_1391E
push	word ptr [bp+6]
call	far ptr	525h:30h
mov	sp, bp
push	ax
call	far ptr	542h:0BAh
mov	sp, bp
or	ax, ax
jz	short loc_1391E
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	bx, [bp+6]
push	word ptr [bx+4]
push	cs
call	loc_138FA
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
push	si
mov	si, [bp+8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+6]
sub	bh, bh
mov	al, [bp+0Ah]
cmp	[bx+si-4630h], al
jnz	short near ptr loc_13961+1
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
push	si
mov	si, [bp+8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+6]
sub	bh, bh
mov	al, [bx+si-4594h]
and	ax, 20h
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
push	si
push	word ptr [bp+6]
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
mov	si, [bp+0Ah]
and	si, 0FFh
mov	cx, si
shl	si, 1
add	si, cx
shl	si, 1
shl	si, 1
add	si, cx
mov	bl, [bp+8]
sub	bh, bh
mov	cl, [bx+si-44F8h]
sub	ch, ch
sub	cx, ax
loop	near ptr unk_139CE
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	al, 1
push	ax
mov	al, [bp+0Ch]
push	ax
mov	al, [bp+0Ah]
push	ax
push	cs
call	loc_13934
mov	sp, bp
or	ax, ax
jz	short near ptr loc_13A22+2
mov	al, [bp+0Ch]
push	ax
mov	al, [bp+0Ah]
push	ax
push	cs
call	near ptr loc_13A26+2
mov	sp, bp
or	ax, ax
jz	short near ptr loc_13A22+2
mov	ax, 1
push	ax
mov	al, [bp+0Ch]
push	ax
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
push	cs
call	loc_13B7E
mov	sp, bp
or	ax, ax
jnz	short near ptr loc_13A22+2
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
push	si
mov	si, [bp+8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+6]
sub	bh, bh
mov	al, [bx+si-4594h]
and	ax, 0Fh
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	word ptr [bp+6]
push	cs
call	near ptr loc_13487+1
add	sp, 2
mov	[bp-4],	al
push	word ptr [bp+8]
push	cs
call	near ptr loc_13487+1
add	sp, 2
mov	[bp-6],	al
cmp	al, [bp-4]
jnz	short loc_13A7C
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
call	func_1B720
mov	[bp-2],	al
mov	al, [bp-4]
and	al, 1
dec	al
jnz	short near ptr loc_13AA1+1
mov	al, [bp-6]
and	al, 1
dec	al
jnz	short near ptr loc_13AA1+1
cmp	byte ptr [bp-2], 0
jz	short near ptr loc_13AB7+2
cmp	byte ptr [bp-2], 3
jmp	short loc_13AB7
;     ***************************************************************************
test	byte ptr [bp-4], 1
jnz	short near ptr loc_13AB7+2
push	word ptr [bp+8]
push	word ptr [bp+6]
push	cs
call	loc_13AC0
add	sp, 4
or	ax, ax
jnz	short near ptr loc_13A74+1
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Eh
push	si
push	word ptr [bp+6]
push	cs
call	near ptr loc_13487+1
add	sp, 2
mov	[bp-6],	al
push	word ptr [bp+8]
push	cs
call	near ptr loc_13487+1
add	sp, 2
mov	[bp-0Ah], al
test	byte ptr [bp-6], 1
jnz	short loc_13AF0
test	byte ptr [bp-0Ah], 1
jnz	short loc_13AF0
jmp	loc_13B77
;     ***************************************************************************
call	func_1B720
mov	[bp-2],	al
mov	al, [bp-6]
and	al, 1
dec	al
jnz	short near ptr loc_13B1D+1
mov	al, [bp-0Ah]
and	al, 1
dec	al
jnz	short near ptr loc_13B1D+1
cmp	byte ptr [bp-2], 0
jz	short loc_13B77
cmp	byte ptr [bp-2], 3
jnb	short loc_13B77
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
test	byte ptr [bp-6], 1
jnz	short loc_13B2A
mov	al, [bp-6]
jmp	short near ptr loc_13B2C+1
;     ***************************************************************************
nop
mov	al, [bp-0Ah]
mov	[bp-8],	al
test	byte ptr [bp-6], 1
jnz	short loc_13B3C
mov	al, [bp-0Ah]
jmp	short loc_13B3F
;     ***************************************************************************
nop
mov	al, [bp-6]
mov	[bp-4],	al
mov	word ptr [bp-0Ch], 0
mov	al, [bp-8]
and	ax, 0FEh
shl	ax, 1
mov	cl, [bp-2]
sub	ch, ch
add	ax, cx
mov	cx, ax
shl	ax, 1
add	ax, cx
mov	[bp-0Eh], ax
mov	si, [bp-0Eh]
mov	bx, [bp-0Ch]
mov	al, [bp-4]
cmp	[bx+si-4450h], al
jz	short near ptr loc_13B15+1
inc	word ptr [bp-0Ch]
cmp	word ptr [bp-0Ch], 3
jb	short near ptr loc_13B5E+1
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
push	cs
call	near ptr loc_137E9+1
add	sp, 4
mov	[bp-8],	ax
mov	al, [bp+0Ch]
push	ax
mov	al, [bp+0Ah]
push	ax
push	cs
call	near ptr loc_137E9+1
add	sp, 4
mov	[bp-6],	ax
push	word ptr [bp-8]
push	cs
call	near ptr loc_13487+1
add	sp, 2
mov	[bp-2],	al
push	word ptr [bp-6]
push	cs
call	near ptr loc_13487+1
add	sp, 2
cmp	al, [bp-2]
jz	short loc_13BE2
cmp	word ptr [bp+0Eh], 0
jz	short near ptr loc_13BDA+1
push	word ptr [bp-6]
push	word ptr [bp-8]
push	cs
call	loc_13AC0
add	sp, 4
or	ax, ax
jnz	short loc_13BE2
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	bx, [bp+6]
mov	al, [bx]
mov	cx, ax
and	ax, 1
mov	si, ax
shl	si, 1
add	si, ax
shl	si, 1
mov	bl, [bp+0Ah]
sub	bh, bh
mov	al, [bx+si-4C7Ah]
mov	bx, [bp+8]
add	al, [bx]
mov	[bp-4],	al
mov	al, [bp+0Ah]
mov	dl, 3
sub	ah, ah
div	dl
add	cl, ah
jz	short near ptr loc_13C4A+4
cmp	cl, 0Dh
ja	short near ptr loc_13C4A+4
cmp	byte ptr [bp-4], 0
jz	short near ptr loc_13C4A+4
cmp	byte ptr [bp-4], 0Ch
ja	short near ptr loc_13C4A+4
mov	al, cl
dec	al
mov	bx, [bp+6]
mov	[bx], al
mov	al, [bp-4]
dec	al
mov	bx, [bp+8]
mov	[bx], al
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
push	cs
call	loc_14022
mov	ax, [bp+6]
add	ax, 1Ch
push	ax
mov	ax, 0B392h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	al, [bp+8]
mov	cl, 0Ch
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
add	ax, 6
mov	cl, 3
shl	ax, cl
push	ax
mov	cl, 0Ch
mov	al, [bp+8]
sub	ah, ah
div	cl
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
shl	ax, 1
add	ax, cx
add	ax, 36h	; '6'
push	ax
call	far ptr	3EFh:434h
mov	sp, bp
mov	bx, [bp+6]
push	word ptr [bx+12h]
lea	ax, [bx+1Ch]
push	ax
mov	ax, 0B3B3h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
push	word ptr [bp+8]
call	loc_22574
mov	sp, bp
or	ax, ax
jz	short loc_13CE4
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, [bp+6]
mov	byte ptr [bx+17h], 0
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
push	bx
call	far ptr	loc_225B8
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
call	far ptr	3EFh:79Ah
mov	[bp-2],	al
sub	ah, ah
sub	ax, 30h	; '0'
jz	short near ptr unk_13D28
dec	ax
jl	short loc_13D55
dec	ax
dec	ax
jle	short loc_13D3A
sub	ax, 4
jl	short loc_13D55
dec	ax
dec	ax
jle	short near ptr loc_13D40+2
jmp	short loc_13D55
;     ***************************************************************************
nop
push	word ptr [bp+8]
push	word ptr [bp+6]
push	cs
call	near ptr loc_13CC3+1
add	sp, 4
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bp-2]
sub	al, 31h	; '1'
jmp	short loc_13D47
;     ***************************************************************************
nop
mov	al, [bp-2]
sub	al, 34h	; '4'
push	ax
mov	ax, 0B8E0h
push	ax
mov	ax, 0B8DFh
push	ax
call	loc_23BE9+1
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
push	di
push	si
push	word ptr [bp+6]
call	far ptr	525h:64h
add	sp, 2
mov	si, [bp+0Ah]
mov	cx, si
shl	si, 1
add	si, cx
shl	si, 1
shl	si, 1
add	si, cx
mov	bx, [bp+8]
sub	al, [bx+si-44F8h]
neg	al
dec	al
jnz	short loc_13DF2
sub	ax, ax
push	ax
mov	ax, 8
push	ax
mov	cx, 2
push	cx
mov	dl, [bp+8]
and	dx, 1
cmp	dx, 1
cmc
sbb	dx, dx
and	dx, ax
mov	cl, 4
mov	bx, [bp+0Ah]
shl	bx, cl
add	dx, bx
add	ax, dx
push	ax
mov	cx, [bp+8]
shl	cx, 1
shl	cx, 1
inc	cx
inc	cx
push	cx
mov	si, ax
mov	di, cx
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
push	si
push	di
call	far ptr	3EFh:434h
add	sp, 4
mov	si, [bp+0Ah]
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bx, [bp+8]
mov	al, [bx+si-44F8h]
sub	ah, ah
push	ax
mov	ax, 0B3C9h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	si
push	word ptr [bp+6]
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
mov	[bp-2],	ax
sub	ax, ax
mov	[bp-4],	ax
mov	[bp-8],	ax
mov	word ptr [bp-6], 0
mov	si, [bp-6]
mov	bx, [bp-8]
mov	al, [bp-2]
cmp	[bx+si-44F8h], al
jnz	short near ptr loc_13E89+2
test	byte ptr [bx+si-4594h],	0Fh
jz	short loc_13E4A
mov	al, 1
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-6]
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jz	short near ptr loc_13E89+2
sub	ax, ax
push	ax
mov	ax, 10h
push	ax
mov	ax, 4
push	ax
mov	al, [bp-6]
and	ax, 1
cmp	ax, 1
cmc
sbb	ax, ax
and	ax, 8
mov	cl, 4
mov	dx, [bp-4]
shl	dx, cl
add	ax, dx
push	ax
mov	ax, [bp-6]
shl	ax, 1
shl	ax, 1
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
push	word ptr [bp-4]
push	word ptr [bp-6]
push	cs
call	near ptr unk_14648
add	sp, 4
inc	word ptr [bp-6]
cmp	word ptr [bp-6], 0Dh
jb	short near ptr unk_13E1D
inc	word ptr [bp-4]
add	word ptr [bp-8], 0Dh
cmp	word ptr [bp-8], 9Ch ; '  *'
jnb	short loc_13EA5
jmp	near ptr unk_13E18
;     ***************************************************************************
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	ax, 0B3D5h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	byte ptr [bp-4], 0
mov	byte ptr [bp-2], 0
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jnz	short loc_13EEC
mov	al, [bp-4]
sub	ah, ah
push	ax
mov	al, [bp-2]
push	ax
push	word ptr [bp+6]
push	cs
call	near ptr loc_13D5B+1
add	sp, 6
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 0Dh
jb	short near ptr loc_13EC3+1
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 0Ch
jb	short near ptr loc_13EBF+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
push	cs
call	loc_13FFA
mov	byte ptr [bp-2], 0
cmp	word ptr [bp+6], 0
jz	short loc_13F73
mov	al, [bp-2]
mov	cl, 0Ch
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
add	ax, 6
mov	cl, 3
shl	ax, cl
push	ax
mov	cl, 0Ch
mov	al, [bp-2]
sub	ah, ah
div	cl
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
shl	ax, 1
add	ax, cx
add	ax, 36h	; '6'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	bx, [bp+6]
push	word ptr [bx+12h]
lea	ax, [bx+1Ch]
push	ax
mov	ax, 0B3DEh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
inc	byte ptr [bp-2]
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp+6],	ax
or	ax, ax
jnz	short near ptr loc_13F15+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
cmp	word ptr [bp+6], 0
jz	short loc_13F8A
call	far ptr	57Ch:15Eh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
call	far ptr	57Ch:126h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
cmp	byte ptr [bp+6], 4
jnb	short loc_13FD4
push	cs
call	loc_14022
mov	bl, [bp+6]
sub	bh, bh
shl	bx, 1
push	word ptr [bx-4BE0h]
call	far ptr	3EFh:6C0h
mov	sp, bp
cmp	byte ptr [bp+6], 3
jnb	short near ptr unk_13FC4
mov	ax, 0B41Eh
push	ax
call	far ptr	3EFh:6C0h
mov	sp, bp
mov	al, [bp+6]
and	al, 1
cmp	al, 1
sbb	ax, ax
neg	ax
push	ax
push	cs
call	near ptr loc_13F76+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 4
push	ax
mov	bl, byte ptr loc_1CAAD
sub	bh, bh
shl	bx, 1
push	word ptr [bx-4BD8h]
mov	ax, 28h	; '('
push	ax
mov	ax, 1F0h
push	ax
call	far ptr	4B5h:1CEh
add	sp, 8
retf
;     ***************************************************************************
nop
sub	ax, ax
push	ax
mov	ax, 64h	; 'd'
push	ax
mov	ax, 1Ah
push	ax
mov	ax, 1Ch
push	ax
mov	ax, 35h	; '5'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 0B430h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
retf

;     *************** S U B	R O U T	I N E     ***************************************


ABB		proc far
mov	ax, 7
push	ax
mov	ax, 41h	; 'A'
push	ax
mov	ax, 1Ah
push	ax
mov	ax, 83h	; '  *'
push	ax
mov	ax, 35h	; '5'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer	; Function B1
; ????
add	sp, 0Ah
mov	ax, 0B438h
push	ax
call	far ptr	3EFh:6C0h ; Function B2
; ????
add	sp, 2
retf
ABB		endp

;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


sub_3404C	proc far
mov	ax, 7
push	ax
mov	ax, 10h
push	ax
mov	ax, 2
push	ax
sub	ax, ax
push	ax
mov	ax, 67
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer	; system_graphics_top_right_white_bckgnd
add	sp, 0Ah
mov	al, byte ptr word_1B8E0+1
sub	ah, ah
push	ax
mov	ax, 0B448h
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
add	sp, 4
retf
sub_3404C	endp

;     ***************************************************************************
push	bp
mov	bp, sp
cmp	word_1CEA2, 0
jnz	short near ptr loc_140F0+2
mov	ax, 7
push	ax
mov	ax, 18h
push	ax
mov	ax, 0Ah
push	ax
sub	ax, ax
push	ax
mov	ax, 45h	; 'E'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
mov	sp, bp
mov	ax, 0B462h
push	ax
call	far ptr	3EFh:6C0h
mov	sp, bp
cmp	word ptr [bp+6], 6
jnz	short near ptr loc_140BC+2
mov	ax, 0B46Fh
push	ax
call	far ptr	3EFh:6C0h
mov	sp, bp
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 0B478h
push	ax
call	far ptr	3EFh:6C0h
mov	sp, bp
mov	ax, 1
push	ax
mov	bx, [bp+6]
shl	bx, 1
push	word ptr [bx-4B62h]
push	word_1CAF4
mov	ax, 10h
push	ax
mov	ax, 3
push	ax
mov	ax, 4
push	ax
mov	ax, 4Ch	; 'L'
push	ax
call	far ptr	0:1DBEh
jmp	short near ptr loc_140B7+1
;     ***************************************************************************
nop
mov	ax, 7
push	ax
mov	ax, 18h
push	ax
mov	ax, 0Ah
push	ax
sub	ax, ax
push	ax
mov	ax, 45h	; 'E'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
mov	sp, bp
mov	ax, 0B480h
push	ax
call	far ptr	3EFh:6C0h
mov	sp, bp
cmp	word ptr [bp+6], 6
jnz	short near ptr loc_14120+2
mov	ax, 0B48Dh
jmp	short loc_140B2
;     ***************************************************************************
mov	ax, 0B496h
push	ax
call	far ptr	3EFh:6C0h
mov	sp, bp
mov	bx, [bp+6]
shl	bx, 1
push	word ptr [bx-4B56h]
mov	ax, 400h
push	ax
mov	ax, 10h
push	ax
mov	ax, 18h
push	ax
mov	ax, 4
push	ax
mov	ax, 25Ch
push	ax
call	far ptr	0:452h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, word_1CB86
mov	ax, [bx]
mov	bx, word ptr loc_1CB71+1
mov	cx, [bx]
add	ax, 1Ch
push	ax
add	cx, 1Ch
push	cx
mov	ax, 0B4B6h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 58h	; 'X'
push	ax
mov	ax, 37h	; '7'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
sub	ax, ax
push	ax
mov	cl, 2
push	cx
call	far ptr	loc_2B96A
add	sp, 4
push	dx
push	ax
sub	ax, ax
push	ax
sub	al, al
push	ax
call	far ptr	loc_2B96A
add	sp, 4
push	dx
push	ax
mov	ax, 0B4D4h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Ah
retf
;     ***************************************************************************
nop
mov	ax, 60h	; '`'
push	ax
mov	ax, 36h	; '6'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
sub	ax, ax
push	ax
mov	cl, 2
push	cx
call	loc_2B8FA+2
add	sp, 4
sub	ah, ah
push	ax
sub	ax, ax
push	ax
mov	bx, word_1CB74
push	word ptr [bx+2]
push	cs
call	near ptr s_4618+2
add	sp, 4
sub	ah, ah
push	ax
sub	ax, ax
push	ax
sub	al, al
push	ax
call	loc_2B8FA+2
add	sp, 4
sub	ah, ah
push	ax
mov	ax, 0B4F2h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
retf
;     ***************************************************************************
nop
mov	ax, 68h	; 'h'
push	ax
mov	ax, 36h	; '6'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
push	word_1CAAB
push	word_1CAA9
push	word_1CAA7
push	word ptr loc_1CAA2+3
mov	ax, 0B517h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Ah
retf
;     ***************************************************************************
nop
mov	ax, 70h	; 'p'
push	ax
mov	ax, 38h	; '8'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
push	word ptr loc_1CAA2+1
push	word ptr unk_1CAA1
mov	ax, 0B536h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
retf
;     ***************************************************************************
nop
push	cs
call	loc_14022
mov	ax, 0B553h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
push	si
push	word ptr [bp+6]
call	far ptr	525h:30h
add	sp, 2
mov	bx, ax
mov	ax, [bx]
mov	cx, ax
add	ax, 1Ch
push	ax
mov	ax, 0B595h
push	ax
mov	si, cx
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, 7
push	ax
mov	ax, 18h
push	ax
mov	ax, 19h
push	ax
mov	ax, 0A8h ; '  *'
push	ax
mov	ax, 36h	; '6'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 0B5A5h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
cmp	si, [bp+6]
jz	short loc_142DE
mov	ax, [bp+6]
add	ax, 1Ch
push	ax
mov	ax, 0B5B2h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, 0B5BAh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
push	word ptr [bp+8]
mov	ax, 28h	; '('
push	ax
mov	ax, 12h
mul	word ptr [bp+6]
add	ax, 35h	; '5'
push	ax
call	far ptr	4B5h:6A4h
mov	sp, bp
mov	ax, 50h	; 'P'
push	ax
mov	ax, [bp+6]
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 35h	; '5'
push	ax
call	far ptr	3EFh:434h
mov	sp, bp
push	word ptr [bp+0Ah]
cmp	word ptr [bp+6], 0
jnz	short near ptr loc_14337+1
mov	ax, 0B5C3h
jmp	short near ptr loc_14339+2
;     ***************************************************************************
nop
mov	ax, 0B5C9h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
mov	ax, 0B5CEh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	word ptr [bp-4], 0
mov	word ptr [bp-6], 0CB76h
mov	bx, [bp-6]
mov	ax, [bx]
mov	bx, ax
add	ax, 1Ch
push	ax
push	word ptr [bx+1Ah]
push	word ptr [bp-4]
push	cs
call	loc_142F0
add	sp, 6
inc	word ptr [bp-4]
add	word ptr [bp-6], 14h
cmp	word ptr [bp-6], 0CB9Eh
jb	short near ptr loc_1435E+4
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	cs
call	loc_13FFA
push	cs
call	near ptr loc_14153+1
push	cs
call	locret_14346
push	cs
call	near ptr loc_14179+3
push	cs
call	loc_141BA
push	cs
call	loc_1420E
push	cs
call	near ptr loc_1423A+2
push	cs
call	near ptr loc_13FD7+1
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
push	di
push	si
mov	al, [bp+6]
sub	ah, ah
dec	ax
jz	short loc_143D0
dec	ax
jz	short near ptr loc_143D4+2
dec	ax
dec	ax
jz	short loc_143DC
sub	ax, 4
jz	short near ptr s_43E0+2
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	byte ptr [bp-2], 0
jmp	short loc_143E6
;     ***************************************************************************
mov	byte ptr [bp-2], 1
jmp	short loc_143E6
;     ***************************************************************************
mov	byte ptr [bp-2], 2
jmp	short loc_143E6
;     ***************************************************************************
mov	byte ptr [bp-2], 3
sub	ax, ax
push	ax
mov	ax, 8
push	ax
mov	cx, 2
push	cx
mov	dl, [bp+8]
and	dl, 1
cmp	dl, 1
cmc
sbb	dx, dx
and	dx, ax
mov	cl, 4
mov	bl, [bp+0Ah]
sub	bh, bh
shl	bx, cl
add	dx, bx
push	dx
mov	cl, [bp+8]
sub	ch, ch
shl	cx, 1
shl	cx, 1
inc	cx
inc	cx
push	cx
mov	si, cx
mov	di, dx
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	bl, [bp-2]
sub	bh, bh
shl	bx, 1
push	word ptr [bx-4A28h]
mov	ax, 4
push	ax
mov	ax, 8
push	ax
mov	ax, 2
push	ax
push	di
push	si
call	far ptr	0:1627h
add	sp, 0Ch
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	ax, [bp+6]
cmp	word ptr loc_1CB76, ax
jz	short loc_14460
cmp	word ptr loc_1CB8A, ax
jz	short loc_14460
sub	ax, ax
pop	bp
retf
;     ***************************************************************************
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
mov	cl, 4
mov	bx, [bp+6]
mov	al, [bx+18h]
shr	al, cl
sub	ah, ah
mov	[bp-2],	ax
mov	al, [bx+18h]
and	ax, 0Fh
mov	[bp-4],	ax
mov	al, 1
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jz	short near ptr loc_144C7+1
mov	bl, [bp-4]
sub	bh, bh
mov	cx, bx
mov	ax, bx
shl	bx, 1
add	bx, ax
shl	bx, 1
shl	bx, 1
add	bx, ax
mov	al, [bp-2]
sub	ah, ah
add	bx, ax
or	byte ptr [bx-4594h], 90h
push	cx
push	ax
push	cs
call	near ptr unk_14648
add	sp, 4
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word ptr [bp+6]
call	loc_23834
add	sp, 2
mov	[bp-6],	al
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jz	short loc_144FE
mov	al, [bp-4]
sub	ah, ah
push	ax
mov	al, [bp-2]
push	ax
push	cs
call	near ptr unk_14648
add	sp, 4
jmp	short near ptr loc_14530+5
;     ***************************************************************************
nop
sub	ax, ax
push	ax
mov	ax, 8
push	ax
mov	ax, 4
push	ax
mov	al, [bp-2]
and	al, 1
cmp	al, 1
sbb	ax, ax
and	al, 0F8h
add	ax, 10h
mov	cl, 4
mov	dl, [bp-4]
sub	dh, dh
shl	dx, cl
add	ax, dx
push	ax
mov	al, [bp-2]
sub	ah, ah
shl	ax, 1
shl	ax, 1
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	al, [bp-2]
and	al, 1
cmp	al, 1
sbb	ax, ax
and	al, 0F8h
add	ax, 10h
mov	cl, 4
mov	dl, [bp-4]
sub	dh, dh
shl	dx, cl
add	ax, dx
push	ax
mov	al, [bp-2]
sub	ah, ah
shl	ax, 1
shl	ax, 1
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 0B5E0h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
push	word ptr [bp+6]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_14590
mov	bx, [bp+6]
mov	ax, [bx+12h]
mov	cx, 64h	; 'd'
sub	dx, dx
div	cx
push	ax
mov	ax, 0B5ECh
jmp	short loc_145B3
;     ***************************************************************************
nop
mov	bx, [bp+6]
mov	ax, [bx+12h]
mov	cx, 64h	; 'd'
sub	dx, dx
div	cx
push	ax
push	bx
push	cs
call	loc_1444A
add	sp, 2
or	ax, ax
jz	short near ptr system_execute_function
mov	ax, 0B5F1h
jmp	short loc_145B3
;     ***************************************************************************
nop
mov	ax, 0B5F6h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	ax, 0B5FAh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
mov	al, [bp-6]
push	ax
push	cs
call	loc_143AE
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
sub	ax, ax
mov	[bp-2],	ax
mov	[bp-4],	ax
cmp	[bp+6],	ax
jz	short near ptr unk_14610
mov	ax, [bp+6]
cmp	[bp+8],	ax
jz	short near ptr unk_14604
mov	bx, ax
mov	ax, [bx+12h]
sub	dx, dx
add	[bp-4],	ax
adc	[bp-2],	dx
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp+6],	ax
or	ax, ax
jnz	short loc_145EF
mov	ax, [bp-4]
mov	dx, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	byte ptr [bp-2], 0
cmp	word ptr [bp+6], 0
jz	short near ptr loc_1463D+3
mov	ax, [bp+6]
cmp	[bp+8],	ax
jz	short near ptr loc_14634+1
inc	byte ptr [bp-2]
mov	bx, ax
mov	ax, [bx]
mov	[bp+6],	ax
or	ax, ax
jnz	short near ptr loc_14628+2
mov	al, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
push	si
mov	si, [bp+8]
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bx, [bp+6]
cmp	byte ptr [bx+si-4630h],	4
jnz	short loc_146B0
sub	ax, ax
push	ax
mov	si, [bp+8]
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	al, 0C0h ; '  *'
mul	byte ptr [bx+si-4630h]
push	ax
push	word_1CE98
mov	ax, 10h
push	ax
mov	ax, 4
push	ax
and	bx, 1
cmp	bx, 1
cmc
sbb	ax, ax
and	ax, 8
mov	cl, 4
mov	dx, [bp+8]
shl	dx, cl
add	ax, dx
push	ax
mov	ax, [bp+6]
shl	ax, 1
shl	ax, 1
push	ax
call	far ptr	0:1D3Fh
jmp	short near ptr loc_146F6+2
;     ***************************************************************************
nop
sub	ax, ax
push	ax
mov	si, [bp+8]
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	al, 0C0h ; '  *'
mul	byte ptr [bx+si-4630h]
push	ax
push	word_1CE98
mov	ax, 10h
push	ax
mov	ax, 4
push	ax
and	bx, 1
cmp	bx, 1
cmc
sbb	ax, ax
and	ax, 8
mov	cl, 4
mov	dx, [bp+8]
shl	dx, cl
add	ax, dx
push	ax
mov	ax, [bp+6]
shl	ax, 1
shl	ax, 1
push	ax
call	far ptr	0:1DBEh
add	sp, 0Eh
mov	si, [bp+8]
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bx, [bp+6]
test	byte ptr [bx+si-4594h],	20h
jz	short near ptr loc_1474B+1
mov	ax, 0BC88h
push	ax
mov	ax, 402h
push	ax
mov	ax, 10h
push	ax
mov	ax, 4
push	ax
mov	al, [bp+6]
and	ax, 1
cmp	ax, 1
cmc
sbb	ax, ax
and	ax, 8
mov	cl, 4
mov	dx, [bp+8]
shl	dx, cl
add	ax, dx
push	ax
mov	ax, bx
shl	ax, 1
shl	ax, 1
push	ax
call	far ptr	0:1469h
add	sp, 0Ch
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	bx, [bp+6]
cmp	word ptr [bx+12h], 64h ; 'd'
jnb	short near ptr loc_14773+1
push	bx
call	loc_22CF0
add	sp, 2
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
cmp	word ptr [bp+8], 1
sbb	al, al
and	al, 19h
add	al, 5
sub	ah, ah
push	ax
push	word ptr [bx+12h]
call	far ptr	49Ch:32h
add	sp, 4
push	ax
call	far ptr	49Ch:178h
add	sp, 2
push	ax
push	word ptr [bp+6]
mov	si, ax
call	loc_235A8
add	sp, 4
push	ax
push	word ptr [bp+6]
call	loc_235C1+3
add	sp, 4
mov	bx, [bp+6]
sub	[bx+12h], si
push	bx
call	loc_24465+1
add	sp, 2
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 12h
push	si
mov	al, [bp+0Ch]
push	ax
mov	cl, [bp+0Ah]
push	cx
mov	dl, [bp+8]
push	dx
mov	bl, [bp+6]
push	bx
call	loc_250F7+1
add	sp, 8
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_237E9+1
add	sp, 4
mov	[bp-0Eh], ax
mov	al, [bp+0Ch]
push	ax
mov	al, [bp+0Ah]
push	ax
call	loc_237E9+1
add	sp, 4
mov	[bp-0Ah], ax
push	ax
call	loc_238FA
add	sp, 2
or	ax, ax
jz	short loc_14832
push	word ptr [bp-0Eh]
call	loc_238FA
add	sp, 2
or	ax, ax
jnz	short loc_14832
mov	al, game_difficulty
sub	ah, ah
mov	[bp-0Ch], ax
jmp	short near ptr loc_14835+2
;     ***************************************************************************
nop
mov	word ptr [bp-0Ch], 1
mov	si, [bp+0Ch]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+0Ah]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
mov	si, [bp+8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+6]
mov	al, [bx+si-4630h]
mov	[bp-12h], al
push	word ptr [bp-0Eh]
call	loc_23702
add	sp, 2
mov	[bp-6],	ax
push	word ptr [bp-0Ah]
call	loc_23702
add	sp, 2
mov	[bp-4],	ax
mov	bx, [bp-0Eh]
cmp	byte ptr [bx+4], 59h ; 'Y'
jbe	short loc_1489A
sub	ax, ax
jmp	short near ptr loc_148B8+2
;     ***************************************************************************
push	word ptr [bp-0Ah]
push	word ptr [bp-0Ch]
mov	al, [bp-12h]
push	ax
push	word ptr [bp-4]
push	word ptr [bp-6]
call	loc_23759+1
add	sp, 0Ah
mov	cx, ax
shl	ax, 1
add	ax, cx
neg	ax
mov	[bp-8],	ax
push	ax
mov	bx, [bp-0Eh]
push	word ptr [bx+12h]
call	far ptr	561h:18Ah
add	sp, 4
push	ax
push	word ptr [bp-0Eh]
call	loc_235A8
add	sp, 4
push	ax
push	word ptr [bp-0Eh]
call	loc_235C1+3
add	sp, 4
mov	bx, [bp-0Eh]
mov	ax, [bp-8]
cmp	[bx+12h], ax
jnb	short loc_14920
mov	byte ptr loc_1B8D2+4, 1
sub	ax, ax
push	ax
mov	cx, 1
push	cx
push	word ptr [bp-0Ah]
push	bx
call	loc_25364
add	sp, 8
sub	ax, ax
push	ax
push	word ptr [bp-0Ah]
push	word ptr [bp-0Eh]
call	loc_2541B+3
add	sp, 6
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	[bx+12h], ax
push	bx
call	loc_24465+1
add	sp, 2
call	loc_2417A+2
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ch
push	si
mov	byte ptr [bp-8], 0
mov	al, [bp+6]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
mov	[bp-0Ch], ax
mov	al, [bp+8]
mov	[bp-4],	al
mov	al, [bp+0Ah]
mov	[bp-6],	al
mov	si, [bp-0Ch]
mov	bl, [bp-8]
sub	bh, bh
mov	al, [bx+si-4A02h]
push	ax
lea	ax, [bp-6]
push	ax
lea	ax, [bp-4]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr math_value_x2_from_x1_y1_y2
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
call	loc_239D5+1
add	sp, 8
or	ax, ax
jz	short near ptr math_value_x2_from_x1_y1_y2
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_237E9+1
add	sp, 4
cmp	ax, [bp+0Ch]
jz	short near ptr math_value_x2_from_x1_y1_y2
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
push	cs
call	locret_147C6
add	sp, 8
or	ax, ax
jnz	short loc_149D6
inc	byte ptr [bp-8]
cmp	byte ptr [bp-8], 3
jnb	short loc_149D6
jmp	near ptr unk_14951
;     ***************************************************************************
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	al, [bp+8]
mov	[bp-2],	al
mov	al, [bp+0Ah]
mov	[bp-4],	al
mov	al, [bp+6]
push	ax
lea	ax, [bp-4]
push	ax
lea	ax, [bp-2]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr loc_14A65+1
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short near ptr loc_14A65+1
push	word ptr [bp+0Eh]
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
call	loc_23B7A+4
add	sp, 0Ah
or	ax, ax
jnz	short near ptr loc_14A65+1
cmp	[bp+0Ch], ax
jz	short near ptr loc_14A5B+3
mov	si, [bp-4]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-2]
sub	bh, bh
test	byte ptr [bx+si-4594h],	80h
jnz	short near ptr loc_14A65+1
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+6]
mov	al, [bx+16h]
mov	[bp-2],	al
or	al, al
jz	short locret_14A84
dec	byte ptr [bp-2]
mov	al, [bp-2]
mov	cl, 14h
sub	ah, ah
div	cl
add	al, 2
sub	ah, ah
push	ax
mov	al, [bx+17h]
push	ax
call	far ptr	561h:19Ch
mov	bx, [bp+6]
mov	[bx+17h], al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+8]
mov	ax, [bx]
mov	[bp-2],	ax
push	bx
mov	bx, [bp+6]
push	word ptr [bx+2]
call	far ptr	59Dh:7Eh
add	sp, 4
mov	[bp-4],	ax
or	ax, ax
jnz	short loc_14AD8
mov	ax, [bp-2]
mov	bx, [bp+6]
mov	[bx+2],	ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, [bp-2]
mov	bx, [bp-4]
mov	[bx], ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
push	si
push	word ptr [bp+6]
call	far ptr	59Dh:62h
add	sp, 2
mov	[bp-2],	ax
push	word ptr [bp+8]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr unk_14B1A
mov	ax, [bp+6]
mov	bx, [bp+8]
mov	[bx], ax
mov	word ptr loc_1CB76, bx
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, [bp+8]
mov	si, [bp-2]
mov	[si], bx
mov	word ptr [bx], 0
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
push	si
mov	si, [bp+8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+6]
sub	bh, bh
mov	al, [bx+si-4630h]
push	ax
call	loc_2365C
add	sp, 2
mov	[bp-2],	al
cmp	byte ptr loc_1CAAD, 3
jz	short locret_14BA2
or	al, al
jz	short locret_14BA2
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short near ptr loc_14B8E+3
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23686+4
add	sp, 6
mov	[bp-2],	al
mov	al, [bp-2]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
cmp	byte ptr [bp+0Ah], 0FFh
jz	short near ptr loc_14BC5+3
cmp	byte ptr [bp+0Ah], 1
jnz	short near ptr loc_14BC0+2
mov	ax, [bp+8]
jmp	short loc_14BC5
;     ***************************************************************************
nop
mov	ax, [bp+6]
push	ax
jmp	short near ptr loc_14BD4+2
;     ***************************************************************************
push	word ptr [bp+6]
call	loc_24465+1
add	sp, 2
push	word ptr [bp+8]
call	loc_24465+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	bx, [bp+6]
mov	ax, word ptr loc_1B8C2+4
cmp	[bx+12h], ax
jnb	short near ptr s_4BFC+4
mov	bx, [bp+8]
mov	ax, word ptr loc_1B8C7+1
cmp	[bx+12h], ax
jnb	short near ptr s_4BFC+4
mov	al, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, [bp+6]
mov	ax, word ptr loc_1B8C2+4
cmp	[bx+12h], ax
jnb	short near ptr loc_14C0E+4
mov	al, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, [bp+8]
mov	ax, word ptr loc_1B8C7+1
cmp	[bx+12h], ax
jnb	short near ptr loc_14C23+1
sub	al, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, 0FFh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
push	word ptr [bp+0Eh]
push	word ptr [bp+0Ch]
push	word ptr [bp+8]
push	word ptr [bp+6]
push	cs
call	near ptr loc_15363+1
mov	sp, bp
mov	ax, [bp+0Ah]
mov	bx, [bp+8]
sub	[bx+12h], ax
push	word ptr [bp+0Eh]
push	bx
push	word ptr [bp+6]
push	cs
call	loc_1541E
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
mov	word ptr [bp-6], 0
push	word ptr [bp+8]
call	loc_238FA
add	sp, 2
or	ax, ax
jz	short loc_14C8A
push	word ptr [bp+6]
call	loc_238FA
add	sp, 2
or	ax, ax
jnz	short loc_14C8A
mov	al, game_difficulty
sub	ah, ah
dec	ax
add	[bp+0Ah], ax
push	word ptr [bp+6]
call	loc_23702
add	sp, 2
mov	[bp-8],	ax
push	word ptr [bp+8]
call	loc_23702
add	sp, 2
mov	[bp-2],	ax
push	word ptr [bp+8]
push	word ptr [bp+0Ah]
mov	al, byte ptr loc_1B8DB+2
push	ax
push	word ptr [bp-2]
push	word ptr [bp-8]
call	loc_23759+1
add	sp, 0Ah
neg	ax
mov	word ptr loc_1B8C2+4, ax
push	word ptr [bp+6]
mov	ax, 1
push	ax
mov	al, byte ptr loc_1B8DE
push	ax
push	word ptr [bp-8]
push	word ptr [bp-2]
call	loc_23759+1
add	sp, 0Ah
neg	ax
mov	word ptr loc_1B8C7+1, ax
push	word ptr loc_1B8C2+4
mov	bx, [bp+6]
push	word ptr [bx+12h]
call	far ptr	561h:18Ah
add	sp, 4
push	ax
push	word ptr [bp+6]
call	loc_235A8
add	sp, 4
push	ax
push	word ptr [bp+6]
call	loc_235C1+3
add	sp, 4
push	word ptr loc_1B8C7+1
mov	bx, [bp+8]
push	word ptr [bx+12h]
call	far ptr	561h:18Ah
add	sp, 4
push	ax
push	word ptr [bp+8]
call	loc_235A8
add	sp, 4
push	ax
push	word ptr [bp+8]
call	loc_235C1+3
add	sp, 4
cmp	byte ptr loc_1B8D2+4, 4
jnz	short loc_14D56
mov	al, 64h	; 'd'
mov	bx, [bp+6]
sub	al, [bx+4]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_14D56
mov	word ptr [bp-6], 1
push	word ptr [bp+8]
push	word ptr [bp+6]
push	cs
call	loc_14BE0
add	sp, 4
mov	[bp-4],	al
sub	ah, ah
or	ax, ax
jz	short near ptr loc_14D79+1
dec	ax
jz	short near ptr game_gfx_blk_bkgrnd_shape_3
dec	ax
jz	short near ptr loc_14DA3+5
sub	ax, 0FDh ; '  *'
jz	short near ptr loc_14DBA+2
jmp	short near ptr loc_14DCB+3
;     ***************************************************************************
nop
push	word ptr [bp-6]
mov	ax, 1
push	ax
push	word ptr loc_1B8C2+4
push	word ptr [bp+6]
push	word ptr [bp+8]
push	cs
call	near ptr loc_14C28+2
add	sp, 0Ah
jmp	short near ptr loc_14DCB+3
;     ***************************************************************************
push	word ptr [bp-6]
mov	ax, 1
push	ax
push	word ptr loc_1B8C7+1
push	word ptr [bp+8]
push	word ptr [bp+6]
jmp	short near ptr loc_14D8A+1
;     ***************************************************************************
nop
mov	bx, [bp+6]
mov	byte ptr [bx+16h], 64h ; 'd'
push	word ptr [bp-6]
mov	ax, 1
push	ax
push	word ptr [bx+12h]
push	bx
jmp	short near ptr loc_14D86+2
;     ***************************************************************************
mov	ax, word ptr loc_1B8C7+1
mov	bx, [bp+8]
sub	[bx+12h], ax
mov	ax, word ptr loc_1B8C2+4
mov	bx, [bp+6]
sub	[bx+12h], ax
call	loc_2417A+2
call	loc_241BA
mov	al, [bp-4]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
cmp	word ptr [bp+8], 0
jz	short loc_14DFC
cmp	byte ptr [bp+6], 1
jnz	short loc_14DF6
mov	al, 2
jmp	short near ptr loc_14DF7+1
;     ***************************************************************************
mov	al, 8
or	byte_1CAE7, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	al, [bp+6]
cmp	[bp+0Ah], al
jnz	short loc_14E20
mov	al, [bp+8]
cmp	[bp+0Ch], al
jnb	short near ptr loc_14E18+2
mov	al, 4
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, [bp+6]
cmp	[bp+0Ah], al
jnb	short near ptr unk_14E4A
test	byte ptr [bp+6], 1
jnz	short near ptr unk_14E3C
mov	al, [bp+8]
cmp	[bp+0Ch], al
jb	short near ptr unk_14E44
sub	al, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, [bp+8]
cmp	[bp+0Ch], al
ja	short near ptr unk_14E36
mov	al, 3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
test	byte ptr [bp+6], 1
jnz	short near ptr loc_14E5D+1
mov	al, [bp+8]
cmp	[bp+0Ch], al
jnb	short loc_14E66
mov	al, 5
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, [bp+8]
cmp	[bp+0Ch], al
jbe	short near ptr loc_14E57+1
mov	al, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	word ptr [bp+6]
call	loc_23487+1
add	sp, 2
mov	[bp-2],	al
push	word ptr [bp+8]
call	loc_23487+1
add	sp, 2
test	byte ptr [bp-2], 1
jz	short locret_14EB2
and	al, 1
dec	al
jz	short locret_14EB2
cmp	byte ptr [bp-2], 1
jnz	short near ptr loc_14EA1+1
mov	al, 2
jmp	short loc_14EA4
;     ***************************************************************************
nop
mov	al, 8
test	byte_1CAE7, al
jnz	short locret_14EB2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
sub	ax, ax
push	ax
call	far ptr	59Dh:320h
add	sp, 2
mov	word ptr [bp-4], 0CAF8h
jmp	short near ptr loc_14EE0+2
;     ***************************************************************************
mov	bx, ax
mov	al, [bp+6]
cmp	[bx+1Eh], al
jnz	short near ptr loc_14ED9+5
mov	byte ptr [bx+1Eh], 0FFh
add	word ptr [bp-4], 2
mov	bx, [bp-4]
mov	ax, [bx]
or	ax, ax
jnz	short loc_14ED0
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
push	si
push	word ptr [bp+8]
call	far ptr	525h:6
add	sp, 2
mov	[bp-2],	al
push	word ptr [bp+6]
call	far ptr	525h:6
add	sp, 2
mov	cl, al
mov	dx, 1
shl	dx, cl
not	dx
mov	bx, [bp+8]
and	[bx+0Ah], dx
mov	cl, [bp-2]
mov	dx, 1
shl	dx, cl
not	dx
mov	si, [bp+6]
and	[si+0Ah], dx
cmp	al, [bx+1Eh]
jnz	short loc_14F3B
mov	bx, [bp+8]
mov	byte ptr [bx+1Eh], 0FFh
mov	al, [bp-2]
push	ax
push	cs
call	near ptr s_4EB4+4
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ch
push	si
cmp	word ptr [bp+0Ah], 0
jnz	short loc_14F5C
jmp	near ptr loc_15050+1
;     ***************************************************************************
cmp	byte ptr [bp+6], 1
jnz	short loc_14F66
mov	al, 8
jmp	short loc_14F68
;     ***************************************************************************
mov	al, 2
mov	[bp-0Ah], al
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	ax, [bx-348Ah]
mov	[bp-2],	ax
or	ax, ax
jz	short near ptr unk_14FE9
mov	bx, ax
mov	al, [bx+18h]
mov	cx, ax
and	al, 0Fh
mov	[bp-6],	al
mov	bl, al
sub	bh, bh
mov	ax, bx
shl	bx, 1
add	bx, ax
shl	bx, 1
shl	bx, 1
add	bx, ax
mov	al, 4
xchg	cl, al
shr	al, cl
mov	[bp-4],	al
sub	ah, ah
mov	si, ax
and	byte ptr [bx+si-4594h],	0F0h
mov	al, [bp-0Ah]
mov	si, [bp-6]
and	si, 0FFh
mov	cx, si
shl	si, 1
add	si, cx
shl	si, 1
shl	si, 1
add	si, cx
mov	bl, [bp-4]
sub	bh, bh
or	[bx+si-4594h], al
push	word ptr [bp-2]
call	loc_24465+1
add	sp, 2
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_14F84+1
call	loc_24020+2
mov	bl, [bp+8]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	ax, [bx-348Eh]
mov	[bp-0Ch], ax
mov	bl, [bp+6]
sub	bh, bh
mov	cx, bx
shl	bx, 1
shl	bx, 1
add	bx, cx
shl	bx, 1
mov	cx, [bx-348Eh]
mov	[bp-8],	cx
mov	bx, ax
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	bx, cx
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0B610h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
push	cs
call	near ptr loc_15055+1
call	loc_2417A+2
call	loc_241BA
push	word ptr [bp-0Ch]
push	word ptr [bp-8]
push	cs
call	loc_14EF0
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, 7
push	ax
call	far ptr	6EBh:4F0h
add	sp, 2
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
add	sp, 2
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
call	loc_24020+2
cmp	word ptr [bp+0Ah], 1
sbb	bl, bl
inc	bl
sub	bh, bh
shl	bx, 1
mov	al, [bp+8]
sub	ah, ah
add	bx, ax
shl	bx, 1
push	word ptr [bx-4984h]
mov	ax, [bp+6]
add	ax, 1Ch
push	ax
mov	ax, 0B66Eh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
push	cs
call	near ptr loc_15055+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Duel_Grfx_Flash_Unit proc near
push	bp
;     ***************************************************************************
db  8Bh	;   *
db 0ECh	;   *
db  83h	;   *
db 0ECh	;   *
db    4
db 0C7h	;   *
db  46h	; F
db 0FCh	;   *
db    2
db    0
db  9Ah	;   *
db 0EEh	;   *
db    2
db  33h	; 3
db  23h	; #
db  83h	;   *
db  3Eh	; >
db  2Ch	; ,
db  35h	; 5
db    0
db  75h	; u
db  0Bh
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  9Ah	;   *
db  0Eh
db    0
db 0EBh	;   *
db    6
db 0EBh	;   *
db  1Bh
Duel_Grfx_Flash_Unit endp

;     ***************************************************************************
test	options_value, 1
jz	short loc_150E2
mov	al, 0Dh
push	ax
call	far ptr	6EBh:4F0h
jmp	short near ptr loc_150EA+1
;     ***************************************************************************
nop
mov	ax, 1
push	ax
call	far ptr	57Ch:5Eh
add	sp, 2
dec	word ptr [bp-4]
jnz	short loc_150B9
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Duel_Grfx_Flash	proc far

var_4		= word ptr -4
arg_0		= byte ptr  6
arg_2		= byte ptr  8
arg_4		= byte ptr  0Ah
arg_6		= byte ptr  0Ch

push	bp
mov	bp, sp
sub	sp, 4
mov	[bp+var_4], 8
mov	al, [bp+arg_0]
mov	byte_1B8DF, al
mov	al, [bp+arg_2]
mov	byte ptr word_1B8E0, al
push	cs
call	near ptr unk_150AE ; call 0000060E -> Duel_Grfx_Flash_Unit
; dseg:250AE
; Flash	Defender Unit
mov	al, [bp+arg_4]
mov	byte_1B8DF, al
mov	al, [bp+arg_6]
mov	byte ptr word_1B8E0, al
push	cs
call	near ptr unk_150AE ; call 0000060E -> Duel_Grfx_FLash_Unit
; dseg:250AE
; Flash	Attacker Unit
dec	[bp+var_4]
jnz	short near ptr loc_15100+3 ; Repeat 8 Times
mov	al, [bp+arg_0]
mov	byte_1B8DF, al
mov	al, [bp+arg_2]
mov	byte ptr word_1B8E0, al
mov	sp, bp
pop	bp
retf
Duel_Grfx_Flash	endp

;     ***************************************************************************
push	bp
mov	bp, sp
mov	al, [bp+6]
mov	byte ptr loc_1B8D2+3, al
mov	al, [bp+8]
mov	byte ptr loc_1CB65+2, al
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	si
push	word ptr [bp+6]
call	loc_23487+1
add	sp, 2
sub	ah, ah
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 0CB72h
mov	[bp-6],	ax
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp-2],	ax
push	bx
mov	si, [bp-6]
push	word ptr [si+4]
call	far ptr	59Dh:7Eh
add	sp, 4
mov	[bp-4],	ax
mov	ax, [bp+6]
cmp	word ptr loc_1B8E3+3, ax
jnz	short loc_15197
mov	word ptr loc_1B8E3+3, 0
cmp	word ptr loc_1B8E8, ax
jnz	short near ptr loc_151A2+1
mov	ax, [bp-2]
mov	word ptr loc_1B8E8, ax
cmp	word ptr [bp-2], 0
jnz	short near ptr loc_151F7+1
cmp	word ptr [bp-4], 0
jnz	short locret_151F2
mov	bx, [bp-6]
mov	word ptr [bx+4], 0
cmp	byte ptr [bp+8], 1
jnz	short loc_151D1
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short loc_151D1
mov	al, 2
push	ax
mov	al, 1
push	ax
push	cs
call	near ptr loc_15135+3
add	sp, 4
cmp	byte ptr [bp+8], 4
jnz	short near ptr loc_1524A+1
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short near ptr loc_1524A+1
mov	al, 6
push	ax
sub	al, al
push	ax
push	cs
call	near ptr loc_15135+3
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
nop
mov	bx, [bp-4]
jmp	short loc_15247
;     ***************************************************************************
nop
cmp	word ptr [bp-4], 0
jnz	short near ptr s_523C
mov	ax, [bp-2]
mov	bx, [bp-6]
mov	[bx+4],	ax
cmp	byte ptr [bp+8], 1
jnz	short near ptr loc_1521E+1
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short near ptr loc_1521E+1
mov	al, 1
push	ax
push	ax
push	cs
call	near ptr loc_15135+3
add	sp, 4
cmp	byte ptr [bp+8], 4
jnz	short near ptr loc_15243+1
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short near ptr loc_15243+1
mov	al, 5
push	ax
sub	al, al
push	ax
push	cs
call	near ptr loc_15135+3
add	sp, 4
jmp	short near ptr loc_15243+1
;     ***************************************************************************
nop
mov	ax, [bp-2]
mov	bx, [bp-4]
mov	[bx], ax
mov	bx, [bp+6]
mov	word ptr [bx], 0
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	bx, [bp+6]
and	byte ptr [bx+3], 0Fh
mov	al, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bx, [bp+6]
mov	cx, ax
mov	al, [bx+5]
mov	bl, 1Eh
sub	ah, ah
div	bl
sub	cl, al
add	cl, 3
mov	bx, [bp+6]
or	[bx+3],	cl
mov	al, [bp+8]
sub	ah, ah
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 0CB72h
mov	[bp-6],	ax
mov	bx, ax
cmp	word ptr [bx+6], 0
jnz	short loc_152AA
mov	bx, [bp+6]
mov	si, ax
mov	[si+6],	bx
jmp	short loc_152EB
;     ***************************************************************************
nop
push	word ptr [bp+6]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr s_52D4
mov	bx, [bp-6]
mov	ax, [bx+6]
mov	[bp-2],	ax
mov	ax, [bp+6]
mov	[bx+6],	ax
mov	bx, ax
mov	ax, [bp-2]
mov	[bx], ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bx, [bp-6]
push	word ptr [bx+6]
call	far ptr	59Dh:62h
add	sp, 2
mov	bx, ax
mov	ax, [bp+6]
mov	[bx], ax
mov	bx, ax
mov	word ptr [bx], 0
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	bx, [bp+6]
mov	al, [bx+18h]
mov	cx, ax
and	al, 0Fh
sub	ah, ah
mov	si, ax
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	ax, bx
mov	bl, 4
xchg	cl, bl
shr	bl, cl
sub	bh, bh
and	byte ptr [bx+si-4594h],	20h
mov	bx, ax
mov	byte ptr [bx+18h], 0FFh
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	cl, 4
mov	bx, [bp+6]
mov	al, [bx+18h]
mov	dx, ax
shr	al, cl
mov	[bp-2],	al
and	dl, 0Fh
mov	[bp-4],	dl
push	bx
push	cs
call	loc_152F4
add	sp, 2
mov	al, [bp-4]
sub	ah, ah
push	ax
mov	al, [bp-2]
push	ax
call	unk_24648
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
cmp	word ptr [bp+0Ah], 0
jz	short near ptr loc_1537D+2
mov	bx, [bp+6]
mov	byte ptr [bx+16h], 100
sub	ax, ax
mov	[bx+12h], ax
mov	[bx+14h], ax
push	word ptr [bp+6]
call	loc_23834
add	sp, 2
mov	[bp-2],	al
push	word ptr [bp+8]
call	loc_23487+1
add	sp, 2
mov	[bp-4],	al
mov	al, [bp-2]
push	ax
push	word ptr [bp+6]
push	cs
call	loc_1514A
add	sp, 4
cmp	word ptr [bp+0Ch], 0
jz	short loc_15404
push	word ptr [bp+6]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_153D1+1
push	word ptr [bp+6]
call	far ptr	525h:30h
add	sp, 2
mov	bx, ax
or	byte ptr [bx+7], 80h
jmp	short loc_15404
;     ***************************************************************************
nop
push	word ptr [bp+6]
call	far ptr	525h:30h
add	sp, 2
mov	bx, ax
mov	ax, [bp+6]
cmp	[bx+4],	ax
jnz	short near ptr loc_153F6+1
push	ax
call	far ptr	525h:30h
add	sp, 2
mov	bx, ax
mov	word ptr [bx+4], 0
push	word ptr [bp+6]
call	far ptr	59Dh:692h
add	sp, 2
jmp	short near ptr loc_15411+1
;     ***************************************************************************
mov	al, [bp-4]
push	ax
push	word ptr [bp+6]
push	cs
call	near ptr loc_1524E+2
add	sp, 4
push	word ptr [bp+6]
push	cs
call	loc_1532E
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
push	word ptr [bp+0Ah]
push	word ptr [bp+8]
call	loc_238FA
add	sp, 2
cmp	ax, 1
sbb	al, al
neg	al
push	ax
push	word ptr [bp+6]
push	cs
call	loc_1506E
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	al, [bp+8]
mov	bx, [bp+6]
mov	[bx+0Ah], al
mov	byte ptr [bx+0Ch], 1
mov	al, [bp+0Ah]
mov	[bx+0Bh], al
push	bx
call	far ptr	59Dh:0BEh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	si
test	byte ptr [bp+8], 3
jz	short near ptr game_data_get_general_action
mov	bx, 0CB86h
jmp	short loc_1547B
;     ***************************************************************************
mov	bx, 0CB72h
mov	[bp-4],	bx
push	word ptr [bx+4]
call	far ptr	59Dh:62h
add	sp, 2
mov	bx, ax
mov	ax, [bp+6]
mov	[bx], ax
mov	bx, ax
mov	word ptr [bx], 0
mov	si, [bp-4]
push	word ptr [si]
call	far ptr	525h:6
add	sp, 2
mov	bx, [bp+6]
mov	[bx+0Ah], al
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	si
push	word ptr [bp+6]
call	far ptr	525h:30h
add	sp, 2
mov	bx, ax
mov	ax, [bp+6]
cmp	[bx+4],	ax
jnz	short near ptr s_54DA
push	ax
call	far ptr	525h:30h
add	sp, 2
mov	bx, ax
mov	word ptr [bx+4], 0
mov	bx, [bp+6]
mov	al, [bx+18h]
mov	cx, ax
and	al, 0Fh
mov	[bp-6],	al
mov	bl, al
sub	bh, bh
mov	ax, bx
shl	bx, 1
add	bx, ax
shl	bx, 1
shl	bx, 1
add	bx, ax
mov	al, 4
xchg	cl, al
shr	al, cl
mov	[bp-4],	al
sub	ah, ah
mov	si, ax
mov	al, [bx+si-4594h]
and	al, 0Fh
mov	[bp-2],	al
push	ax
push	word ptr [bp+6]
call	loc_25149+1
add	sp, 4
mov	al, [bp-2]
push	ax
push	word ptr [bp+6]
push	cs
call	near ptr loc_15465+1
add	sp, 4
mov	si, [bp-6]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-4]
sub	bh, bh
and	byte ptr [bx+si-4594h],	0F0h
mov	al, [bp-2]
and	al, 3
cmp	al, 1
sbb	al, al
and	al, 0FDh
add	al, 4
or	[bx+si-4594h], al
push	word ptr [bp+6]
call	loc_24465+1
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ah
push	di
push	si
mov	cl, 4
mov	bx, [bp+6]
mov	al, [bx+18h]
mov	dx, ax
shr	al, cl
mov	[bp-4],	al
and	dl, 0Fh
mov	[bp-6],	dl
test	byte ptr [bx+2], 40h
jz	short near ptr loc_15590+2
mov	ax, 1
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bx
call	loc_24A6E
add	sp, 2
mov	al, [bp-6]
push	ax
mov	cl, [bp-4]
push	cx
push	ax
push	cx
call	unk_23532
add	sp, 8
mov	[bp-8],	al
mov	ax, 64h	; 'd'
push	ax
mov	cx, 0Ah
push	cx
call	far ptr	49Ch:178h
add	sp, 2
mov	bx, [bp+6]
mov	[bp-0Ah], ax
cmp	word ptr [bx+1Ah], 0A3h	; '  *'
jnz	short loc_155D2
mov	ax, 14h
jmp	short near ptr loc_155D2+2
;     ***************************************************************************
sub	ax, ax
push	bx
mov	si, ax
call	far ptr	542h:1D8h
add	sp, 2
cmp	ax, 1
cmc
sbb	ax, ax
and	ax, 14h
mov	bx, [bp+6]
mov	cx, ax
mov	ax, [bx+12h]
mov	di, 64h	; 'd'
sub	dx, dx
div	di
mov	dl, [bx+17h]
sub	dh, dh
mov	di, dx
shl	dx, 1
shl	dx, 1
add	dx, di
shl	dx, 1
mov	di, ax
mov	al, [bx+5]
sub	ah, ah
mov	bx, ax
mov	ax, dx
add	ax, bx
mov	bx, [bp+6]
mov	dl, [bx+16h]
sub	dh, dh
add	ax, dx
add	ax, di
mov	bl, [bp-8]
sub	bh, bh
inc	bx
inc	bx
sub	dx, dx
div	bx
add	cx, ax
add	si, cx
add	si, [bp-0Ah]
push	si
call	far ptr	561h:18Ah
add	sp, 4
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+6]
mov	word ptr [bx], 0
push	word ptr [bp+8]
call	loc_23487+1
add	sp, 2
push	ax
push	word ptr [bp+6]
call	loc_25250
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
cmp	byte ptr [bp+0Ah], 0FFh
jz	short loc_15682
mov	ax, 1
jmp	short near ptr loc_15682+2
;     ***************************************************************************
nop
sub	ax, ax
mov	[bp-2],	ax
push	word ptr [bp+6]
push	cs
call	loc_15566
add	sp, 2
or	ax, ax
jz	short loc_156E0
mov	al, [bp+8]
dec	al
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	[bp-4],	ax
cmp	word ptr [bp-2], 0
jz	short near ptr loc_156C7+1
mov	al, [bp+0Ah]
push	ax
push	word ptr [bp+6]
call	loc_25149+1
add	sp, 4
push	word ptr [bp+6]
call	loc_2532D+1
add	sp, 2
jmp	short loc_156CF
;     ***************************************************************************
mov	bx, [bp+6]
mov	word ptr [bx], 0
push	word ptr [bp+6]
push	word ptr [bp-4]
call	far ptr	59Dh:5CEh
add	sp, 4
jmp	short near ptr loc_15737+1
;     ***************************************************************************
nop
cmp	word ptr [bp-2], 0
jz	short loc_1570A
sub	ax, ax
push	ax
push	ax
test	byte ptr [bp+0Ah], 3
jz	short near ptr s_56F6
mov	ax, word ptr loc_1CB8A
jmp	short loc_156F9
;     ***************************************************************************
nop
mov	ax, word ptr loc_1CB76
mov	[bp-6],	ax
push	ax
push	word ptr [bp+6]
call	loc_25364
add	sp, 8
jmp	short near ptr loc_15726+1
;     ***************************************************************************
cmp	byte ptr loc_1B8D2+3, 0
jnz	short near ptr loc_15715+1
mov	ax, word ptr loc_1CB76
jmp	short near ptr loc_15718+1
;     ***************************************************************************
mov	ax, word ptr loc_1CB8A
mov	[bp-6],	ax
push	ax
push	word ptr [bp+6]
push	cs
call	near ptr loc_15648+2
add	sp, 4
sub	ax, ax
push	ax
push	word ptr [bp-6]
push	word ptr [bp+6]
call	loc_2541B+3
add	sp, 6
cmp	word ptr [bp-2], 0
jz	short loc_15748
call	loc_2417A+2
call	loc_241BA
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
push	word ptr [bp+6]
call	loc_234D6
add	sp, 2
mov	[bp-8],	ax
mov	byte ptr [bp-2], 0
mov	bx, 0CA62h
mov	[bp-6],	bx
cmp	word ptr [bx], 0
jz	short loc_15797
mov	ax, [bp-8]
cmp	[bx], ax
jz	short near ptr loc_157CF+1
mov	bx, [bx]
push	word ptr [bx+2]
push	word ptr [bp+6]
push	cs
call	near ptr loc_157DF+1
add	sp, 4
or	ax, ax
jnz	short near ptr loc_157CF+1
inc	byte ptr [bp-2]
add	word ptr [bp-6], 2
mov	bx, [bp-6]
cmp	[bx], ax
jnz	short loc_1576F
mov	byte ptr [bp-0Ah], 0
cmp	byte ptr [bp-2], 0
jz	short loc_157DC
mov	al, [bp-2]
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bl, al
sub	bh, bh
shl	bx, 1
mov	ax, [bx-359Eh]
mov	bx, [bp-6]
mov	[bx], ax
or	ax, ax
jnz	short near ptr loc_157CF+1
inc	byte ptr [bp-0Ah]
mov	al, [bp-2]
cmp	[bp-0Ah], al
jb	short near ptr loc_157A0+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	bx, [bp-6]
push	word ptr [bx]
call	far ptr	525h:64h
inc	al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
push	si
push	word ptr [bp+6]
call	far ptr	525h:30h
add	sp, 2
push	word ptr [bp+8]
mov	si, ax
call	far ptr	525h:30h
add	sp, 2
cmp	ax, si
jnz	short loc_15808
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 10h
mov	word ptr [bp-0Ch], 0CA62h
call	far ptr	525h:17Eh
sub	al, al
mov	[bp-0Ah], al
mov	[bp-6],	al
mov	bl, [bp-6]
sub	bh, bh
mov	al, [bx-3572h]
mov	[bp-10h], al
mov	bx, word_1CA9A
mov	cl, [bx+20h]
mov	[bp-4],	cl
mov	cl, [bx+21h]
mov	[bp-8],	cl
push	ax
lea	ax, [bp-8]
push	ax
lea	ax, [bp-4]
push	ax
call	far ptr	59Dh:2A8h
add	sp, 6
mov	[bp-2],	al
cmp	al, 0FFh
jz	short loc_15898
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	[bp-0Eh], ax
push	ax
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jnz	short loc_15889
mov	bx, [bp-0Eh]
push	word ptr [bx+2]
push	word ptr [bp+6]
push	cs
call	near ptr loc_157DF+1
add	sp, 4
or	ax, ax
jz	short loc_15898
mov	ax, [bp-0Eh]
mov	bx, [bp-0Ch]
add	word ptr [bp-0Ch], 2
mov	[bx], ax
inc	byte ptr [bp-0Ah]
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 6
jb	short loc_15828
mov	bx, [bp-0Ch]
mov	word ptr [bx], 0
cmp	byte ptr [bp-0Ah], 1
sbb	ax, ax
neg	ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	bx, [bp+6]
mov	al, [bx+17h]
sub	ah, ah
push	ax
mov	ax, 0B684h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
call	loc_24020+2
mov	bl, [bp+6]
sub	bh, bh
shl	bx, 1
push	word ptr [bx-4938h]
mov	ax, 0B6C2h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
cmp	word ptr [bp+8], 0
jz	short near ptr loc_15900+1
push	word ptr loc_1B8E3+3
push	cs
call	loc_158B4
add	sp, 2
cmp	byte ptr [bp+6], 1
jnz	short loc_15917
mov	ax, 88h	; '  *'
push	ax
mov	ax, 46h	; 'F'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
call	far ptr	3EFh:79Ah
mov	[bp-2],	al
sub	ah, ah
sub	ax, 0Dh
jz	short loc_1593A
sub	ax, 24h	; '$'
jl	short near ptr loc_158EC+4
dec	ax
dec	ax
jle	short near ptr loc_15940+2
sub	ax, 4
jl	short near ptr loc_158EC+4
dec	ax
dec	ax
jle	short loc_1594C
jmp	short near ptr loc_158EC+4
;     ***************************************************************************
mov	al, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bp-2]
sub	al, 30h	; '0'
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bp-2]
sub	al, 33h	; '3'
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
push	si
mov	bx, [bp+6]
mov	si, word ptr loc_1B8E3+3
mov	al, [si+4]
cmp	[bx+4],	al
ja	short loc_15990
mov	al, 6
push	ax
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jnz	short loc_15990
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
mov	al, byte_1B8DF
mov	[bp-4],	al
mov	al, byte ptr word_1B8E0
mov	[bp-6],	al
mov	al, [bp+6]
dec	al
push	ax
lea	ax, [bp-6]
push	ax
lea	cx, [bp-4]
push	cx
call	loc_23BE9+1
add	sp, 6
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_237E9+1
add	sp, 4
mov	[bp-2],	ax
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
push	word ptr [bp-2]
push	cs
call	loc_15956
add	sp, 6
or	ax, ax
jnz	short near ptr word_159EC
jmp	near ptr game_data_general_clear_spy_ruler
;     ***************************************************************************
mov	al, [bp-6]
sub	ah, ah
push	ax
mov	al, [bp-4]
push	ax
call	unk_24648
add	sp, 4
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_23865+1
add	sp, 8
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
push	word ptr [bp-2]
call	far ptr	loc_225B8
add	sp, 6
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jz	short loc_15A58
mov	ax, 1
push	ax
push	word ptr [bp-2]
call	loc_24751+1
add	sp, 4
or	ax, ax
jz	short near ptr loc_15A62+1
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word ptr [bp-2]
call	loc_24465+1
add	sp, 2
push	word ptr loc_1B8E3+3
mov	al, byte ptr word_1B8E0
push	ax
mov	cl, byte_1B8DF
push	cx
push	ax
push	cx
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_24DFF+1
add	sp, 8
push	ax
call	loc_24938
add	sp, 8
jmp	short near ptr loc_15A4F+1
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
push	si
mov	bl, [bp+6]
sub	bh, bh
mov	si, word ptr loc_1B8E3+3
mov	al, [si+17h]
cmp	[bx-4934h], al
jbe	short loc_15AB2
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	bl, [bp+6]
sub	bh, bh
mov	al, [bx-4934h]
mov	bx, si
sub	[bx+17h], al
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	al, byte_1B8DF
mov	[bp-2],	al
mov	al, byte ptr word_1B8E0
mov	[bp-4],	al
mov	al, [bp+6]
dec	al
push	ax
lea	ax, [bp-4]
push	ax
lea	ax, [bp-2]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jnz	short loc_15AF8
jmp	loc_15BA0
;     ***************************************************************************
mov	al, 3
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jnz	short near ptr loc_15B63+1
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jnz	short near ptr loc_15B63+1
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jnz	short near ptr loc_15B63+1
mov	si, [bp-4]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-2]
sub	bh, bh
mov	al, [bx+si-4630h]
push	ax
push	cs
call	loc_15A94
add	sp, 2
or	ax, ax
jz	short loc_15B80
mov	ax, 0B6EDh
jmp	short near ptr loc_15B88+3
;     ***************************************************************************
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
call	loc_239D5+1
add	sp, 8
or	ax, ax
jz	short loc_15B88
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	ax, 0B6D3h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
add	sp, 2
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	ax, word ptr loc_1B8E3+3
mov	[bp-2],	ax
mov	bx, [bp-2]
cmp	byte ptr [bx+17h], 1
ja	short loc_15BC0
jmp	near ptr loc_15CF3+1
;     ***************************************************************************
mov	ax, 1
push	ax
mov	al, 1
push	ax
push	cs
call	near ptr system_sound_warning_error_delay_after+2
add	sp, 4
mov	[bp-0Ah], al
cmp	al, 0Dh
jnz	short near ptr loc_15BD4+4
jmp	near ptr loc_15CF3+1
;     ***************************************************************************
push	ax
push	cs
call	near ptr loc_15AC7+1
add	sp, 2
or	ax, ax
jnz	short loc_15BB4
mov	al, byte_1B8DF
mov	[bp-4],	al
mov	al, byte ptr word_1B8E0
mov	[bp-8],	al
mov	al, [bp-0Ah]
dec	al
push	ax
lea	ax, [bp-8]
push	ax
lea	cx, [bp-4]
push	cx
call	loc_23BE9+1
add	sp, 6
mov	byte_1B8E2, 1
mov	al, [bp-8]
push	ax
mov	al, [bp-4]
push	ax
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
call	loc_239D5+1
add	sp, 8
or	ax, ax
jz	short loc_15C2A
jmp	loc_15CC4
;     ***************************************************************************
mov	al, byte ptr word_1B8E0
sub	ah, ah
push	ax
mov	al, byte_1B8DF
push	ax
call	unk_24648
add	sp, 4
mov	al, [bp-8]
push	ax
mov	al, [bp-4]
push	ax
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
call	loc_23865+1
add	sp, 8
mov	al, [bp-8]
push	ax
mov	al, [bp-4]
push	ax
push	word ptr [bp-2]
call	far ptr	loc_225B8
add	sp, 6
cmp	byte ptr [bp+6], 0
jz	short near ptr loc_15C7F+1
mov	al, [bp+6]
push	ax
push	cs
call	near ptr loc_15995+3
add	sp, 2
or	ax, ax
jnz	short near ptr loc_15C7F+1
mov	byte ptr [bp+6], 0
mov	al, [bp-0Ah]
dec	al
push	ax
mov	ax, 0B8E0h
push	ax
mov	cx, 0B8DFh
push	cx
call	loc_23BE9+1
add	sp, 6
push	word ptr [bp-2]
call	loc_24465+1
add	sp, 2
mov	ax, 1
push	ax
sub	ax, ax
push	ax
mov	cl, byte ptr word_1B8E0
push	cx
mov	cl, byte_1B8DF
push	cx
call	loc_238BB+1
add	sp, 8
or	ax, ax
jnz	short near ptr loc_15CC0+1
jmp	loc_15BB4
;     ***************************************************************************
jmp	short near ptr loc_15CDD+1
;     ***************************************************************************
nop
mov	al, [bp-8]
push	ax
mov	al, [bp-4]
push	ax
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
call	loc_247C5+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word ptr [bp-2]
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
mov	al, [bp-0Ah]
dec	al
push	ax
call	loc_24938
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	byte ptr [bp-4], 0
call	loc_24020+2
mov	ax, 1
push	ax
sub	ax, ax
push	ax
mov	cl, byte ptr word_1B8E0
push	cx
mov	cl, byte_1B8DF
push	cx
call	loc_238BB+1
add	sp, 8
or	ax, ax
jnz	short near ptr loc_15D29+1
mov	ax, 0B70Ah
jmp	short near ptr loc_15D2B+2
;     ***************************************************************************
nop
mov	ax, 0B745h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
jmp	short near ptr loc_15D43+2
;     ***************************************************************************
ja	short near ptr loc_15D43+2
sub	al, 0Dh
jnz	short loc_15D41
jmp	near ptr loc_15DC3+4
;     ***************************************************************************
sub	al, 24h	; '$'
jz	short loc_15DBF
call	far ptr	3EFh:79Ah
sub	ah, ah
cmp	ax, 32h	; '2'
jnz	short near ptr loc_15D37+1
mov	ax, 1
push	ax
sub	ax, ax
push	ax
mov	cl, byte ptr word_1B8E0
push	cx
mov	cl, byte_1B8DF
push	cx
call	loc_238BB+1
add	sp, 8
or	ax, ax
jnz	short near ptr loc_15D86+2
mov	ax, 0B77Dh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
push	ax
sub	al, al
push	ax
push	cs
call	near ptr system_sound_warning_error_delay_after+2
add	sp, 4
mov	[bp-4],	al
cmp	al, 0Dh
jz	short near ptr loc_15DC3+4
mov	ax, 1
push	ax
sub	ax, ax
push	ax
mov	cl, byte ptr word_1B8E0
push	cx
mov	cl, byte_1B8DF
push	cx
mov	cl, [bp-4]
dec	cl
push	cx
call	loc_249DA+2
add	sp, 0Ah
or	ax, ax
jz	short near ptr loc_15D86+2
mov	al, [bp-4]
push	ax
push	cs
call	near ptr loc_15BA7+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	ax, word_1D47E
mov	word ptr dword_1CB9A+2,	ax
push	word ptr [bp+6]
call	far ptr	525h:64h
mov	sp, bp
sub	ah, ah
mov	cx, 10Bh
mul	cx
mov	word ptr dword_1CB9A, ax
mov	ax, 28h	; '('
push	ax
mov	cx, 0CB72h
push	cx
push	word ptr dword_1CB9A+2
push	word ptr dword_1CB9A
call	far ptr	561h:7Ch
mov	sp, bp
mov	ax, 47h	; 'G'
push	ax
mov	ax, 0CAA1h
push	ax
add	word ptr dword_1CB9A, 28h ; '('
push	word ptr dword_1CB9A+2
push	word ptr dword_1CB9A
call	far ptr	561h:7Ch
mov	sp, bp
cmp	word ptr [bp+8], 0
jz	short near ptr loc_15E3B+1
mov	ax, 9Ch	; '  *'
push	ax
mov	ax, 0BA6Ch
push	ax
add	word ptr dword_1CB9A, 47h ; 'G'
push	word ptr dword_1CB9A+2
push	word ptr dword_1CB9A
call	far ptr	561h:7Ch
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_25E40		proc far		 /* DOS offset ---> 2D50:0 */

arg_0		= word ptr  6
arg_2		= word ptr  8

push	bp
mov	bp, sp
mov	ax, word_1D47E
mov	word ptr dword_1CB9A+2,	ax
push	[bp+arg_0]
call	far ptr	525h:64h
mov	sp, bp
sub	ah, ah
mov	cx, 10Bh
mul	cx
mov	word ptr dword_1CB9A, ax
mov	ax, 28h	; '('
push	ax
mov	cx, 0CB72h
push	cx
push	word ptr dword_1CB9A+2
push	word ptr dword_1CB9A
call	far ptr	561h:58h
mov	sp, bp
mov	ax, 47h	; 'G'
push	ax
mov	ax, 0CAA1h
push	ax
add	word ptr dword_1CB9A, 28h ; '('
push	word ptr dword_1CB9A+2
push	word ptr dword_1CB9A
call	far ptr	561h:58h
mov	sp, bp
cmp	[bp+arg_2], 0
jz	short near ptr loc_15EAE+2
mov	ax, 9Ch	; '  *'
push	ax
mov	ax, 0BA6Ch
push	ax
add	word ptr dword_1CB9A, 47h ; 'G'
push	word ptr dword_1CB9A+2
push	word ptr dword_1CB9A
call	far ptr	561h:58h
mov	sp, bp
pop	bp
retf
s_25E40		endp		 /* DOS offset ---> 2D50:0 */

;     ***************************************************************************
call	far ptr	0:15B3h
mov	ax, 0B791h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
add	sp, 2
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Eh
push	si
mov	byte ptr [bp-4], 0
mov	byte ptr [bp-0Ah], 2
mov	ax, 64h	; 'd'
cwd
push	dx
push	ax
sub	cx, cx
push	cx
mov	bl, [bp-4]
sub	bh, bh
mov	si, bx
shl	bx, 1
shl	bx, 1
add	bx, si
shl	bx, 1
push	word ptr [bx-348Ah]
call	loc_245DB+1
add	sp, 4
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	[bp-2],	ax
cmp	byte ptr [bp-4], 1
sbb	al, al
and	al, 0E0h
add	al, 40h	; '@'
mov	[bp-8],	al
mov	ax, 64h	; 'd'
cwd
push	dx
push	ax
sub	ax, ax
push	ax
mov	al, [bp-0Ah]
push	ax
call	far ptr	loc_2B96A
add	sp, 4
push	dx
push	ax
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	cx, ax
shl	ax, 1
add	ax, cx
shr	ax, 1
push	ax
mov	ax, 96h	; '  *'
push	ax
call	far ptr	561h:19Ch
add	sp, 4
cmp	ax, [bp-2]
jbe	short near ptr s_5F5E
mov	al, [bp-8]
mov	bx, word_1CA9A
or	[bx+12h], al
jmp	short near ptr loc_15F67+3
;     ***************************************************************************
mov	al, [bp-8]
not	al
mov	bx, word_1CA9A
and	[bx+12h], al
cmp	byte ptr [bp-4], 0
jnz	short near ptr loc_15F99+1
mov	al, [bp-4]
push	ax
call	loc_2333C
add	sp, 2
or	dx, dx
jg	short loc_15F92
jl	short loc_15F87
cmp	ax, 3Ch	; '<'
jnb	short loc_15F92
mov	bx, word_1CA9A
or	byte ptr [bx+13h], 8
jmp	short near ptr loc_15F99+1
;     ***************************************************************************
nop
mov	bx, word_1CA9A
and	byte ptr [bx+13h], 0F7h
sub	byte ptr [bp-0Ah], 2
add	byte ptr [bp-4], 2
cmp	byte ptr [bp-4], 3
jnb	short loc_15FAB
jmp	loc_15EE1
;     ***************************************************************************
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	word_13532, ax
mov	word_13530, ax
mov	byte ptr loc_1CB65+2, 0FFh
push	cs
call	loc_15EB4
push	cs
call	near ptr loc_15ED1+1
mov	al, 1
mov	byte ptr loc_1CAB1+2, al
mov	byte ptr loc_1CAB4, al
mov	ax, 1
push	ax
push	word_1CA9A
push	cs
call	near ptr loc_15DCB+1
add	sp, 4
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
call	loc_24020+2
mov	bl, [bp+6]
sub	bh, bh
shl	bx, 1
push	word ptr [bx-481Ch]
mov	ax, 0B7DFh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
jmp	short loc_16014
;     ***************************************************************************
sub	ax, 24h	; '$'
jl	short loc_16014
dec	ax
dec	ax
jle	short near ptr loc_16028+2
sub	ax, 4
jl	short loc_16014
dec	ax
dec	ax
jle	short near ptr loc_16032+2
call	far ptr	3EFh:79Ah
mov	[bp-2],	al
sub	ah, ah
sub	ax, 0Dh
jnz	short loc_16002
mov	al, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, [bp-2]
sub	al, 30h	; '0'
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bp-2]
sub	al, 33h	; '3'
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
call	loc_24020+2
mov	bx, [bp+6]
push	word ptr [bx+12h]
lea	ax, [bx+1Ch]
push	ax
mov	bx, [bp+8]
push	word ptr [bx+12h]
lea	ax, [bx+1Ch]
push	ax
mov	ax, 0B7E8h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
mov	ax, 3
push	ax
call	far ptr	57Ch:5Eh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 14h
push	si
mov	byte_1B8E2, 1
mov	si, [bp+0Ah]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+8]
sub	bh, bh
mov	al, [bx+si-4630h]
mov	byte ptr loc_1B8DE, al
mov	[bp-0Ah], bh
mov	word ptr [bp-0Eh], 0
mov	si, [bp-0Ah]
and	si, 0FFh
mov	byte ptr [bp+si-14h], 0
mov	ax, 1
push	ax
sub	ax, ax
push	ax
mov	cl, [bp+0Ah]
push	cx
mov	cl, [bp+8]
push	cx
mov	cl, [bp-0Ah]
push	cx
call	loc_249DA+2
add	sp, 0Ah
or	ax, ax
jz	short loc_160DD
mov	si, [bp-0Ah]
and	si, 0FFh
mov	byte ptr [bp+si-14h], 1
inc	word ptr [bp-0Eh]
inc	byte ptr [bp-0Ah]
cmp	byte ptr [bp-0Ah], 6
jb	short near ptr loc_160A3+2
mov	byte ptr [bp-0Ch], 0
mov	byte ptr [bp-0Ah], 0
mov	si, [bp-0Ah]
and	si, 0FFh
cmp	byte ptr [bp+si-14h], 0
jnz	short loc_160FE
jmp	near ptr loc_161DB+1
;     ***************************************************************************
mov	al, [bp+8]
mov	[bp-6],	al
mov	al, [bp+0Ah]
mov	[bp-8],	al
mov	al, [bp-0Ah]
push	ax
lea	ax, [bp-8]
push	ax
lea	ax, [bp-6]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jnz	short loc_16125
jmp	near ptr loc_161DB+1
;     ***************************************************************************
mov	al, [bp-8]
push	ax
mov	al, [bp-6]
push	ax
call	loc_237E9+1
add	sp, 4
mov	[bp-2],	ax
cmp	byte ptr [bp-0Ch], 0
jnz	short loc_16149
mov	ax, word ptr loc_1B8E3+3
cmp	[bp-2],	ax
jz	short loc_16149
jmp	near ptr loc_161DB+1
;     ***************************************************************************
mov	si, [bp-0Ah]
and	si, 0FFh
mov	byte ptr [bp+si-14h], 0
mov	si, [bp-8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-6]
sub	bh, bh
mov	al, [bx+si-4630h]
mov	byte ptr loc_1B8DB+2, al
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp-8]
push	ax
mov	al, bl
push	ax
call	loc_250F7+1
add	sp, 8
push	word ptr [bp-0Eh]
push	word ptr [bp+6]
push	word ptr [bp-2]
call	loc_24C57+1
add	sp, 6
mov	[bp-4],	al
push	ax
push	word ptr [bp+6]
push	word ptr [bp-2]
call	loc_24BA7+3
add	sp, 6
mov	si, [bp-8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-6]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
cmp	[bp-4],	bh
jz	short near ptr loc_16210+1
cmp	byte ptr [bp-4], 2
jz	short near ptr loc_16210+1
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short near ptr loc_16210+1
inc	byte ptr [bp-0Ah]
cmp	byte ptr [bp-0Ah], 6
jnb	short near ptr loc_161E6+2
jmp	locret_160EE
;     ***************************************************************************
inc	byte ptr [bp-0Ch]
cmp	byte ptr [bp-0Ch], 2
jnb	short near ptr loc_161F3+1
jmp	near ptr loc_160E6+4
;     ***************************************************************************
mov	si, [bp+0Ah]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+8]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	byte_1B8E2, 1
mov	ax, word ptr loc_1B8E3+3
mov	[bp-2],	ax
mov	si, word_1B8E0
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, byte_1B8DF
sub	bh, bh
mov	al, [bx+si-4630h]
mov	byte ptr loc_1B8DB+2, al
mov	si, [bp+0Ah]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+8]
mov	al, [bx+si-4630h]
mov	byte ptr loc_1B8DE, al
mov	al, [bp+0Ah]
push	ax
mov	al, bl
push	ax
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
call	loc_250F7+1
add	sp, 8
mov	ax, 1
push	ax
push	word ptr [bp+6]
push	word ptr [bp-2]
call	loc_24C57+1
add	sp, 6
push	ax
push	word ptr [bp+6]
push	word ptr [bp-2]
call	loc_24BA7+3
add	sp, 6
mov	si, word_1B8E0
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, byte_1B8DF
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
cmp	byte ptr [bp+0Ah], 4
jnz	short loc_162FA
mov	al, byte ptr word_1B8E0
sub	ah, ah
push	ax
mov	al, byte_1B8DF
push	ax
call	unk_24648
mov	sp, bp
mov	al, [bp+8]
push	ax
mov	cl, [bp+6]
push	cx
push	ax
push	cx
call	loc_250F7+1
mov	sp, bp
push	word ptr loc_1B8E3+3
call	loc_24465+1
mov	sp, bp
jmp	short loc_1630F
;     ***************************************************************************
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
call	loc_250F7+1
mov	byte_1B8E2, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 12h
push	si
mov	word ptr [bp-0Ah], 0
mov	byte_1B8E2, 1
mov	ax, word ptr loc_1B8E3+3
mov	[bp-2],	ax
mov	al, byte_1B8DF
mov	[bp-0Ch], al
mov	al, byte ptr word_1B8E0
mov	[bp-10h], al
mov	al, [bp+8]
mov	[bp-8],	al
mov	cl, [bp+0Ah]
mov	[bp-0Eh], cl
mov	dl, [bp+0Ch]
dec	dl
push	dx
lea	dx, [bp-0Eh]
push	dx
lea	dx, [bp-8]
push	dx
call	loc_23BE9+1
add	sp, 6
mov	si, [bp+0Ah]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+8]
sub	bh, bh
mov	al, [bx+si-4630h]
mov	byte ptr loc_1B8DE, al
mov	si, [bp-10h]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-0Ch]
mov	al, [bx+si-4630h]
mov	byte ptr loc_1B8DB+2, al
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
sub	ah, ah
inc	ax
mov	[bp-6],	ax
mov	al, byte ptr word_1B8E0
sub	ah, ah
push	ax
mov	al, byte_1B8DF
push	ax
call	unk_24648
add	sp, 4
mov	byte ptr [bp-12h], 0
cmp	byte ptr [bp-6], 0
jnz	short loc_163C9
jmp	loc_164C4
;     ***************************************************************************
mov	al, [bp+0Ah]
push	ax
mov	cl, [bp+8]
push	cx
push	ax
push	cx
call	loc_250F7+1
add	sp, 8
mov	ax, 1
push	ax
push	word ptr [bp+6]
push	word ptr [bp-2]
call	loc_24C57+1
add	sp, 6
mov	[bp-4],	al
cmp	al, 0FFh
jnz	short near ptr loc_16434+4
push	word ptr [bp+6]
push	word ptr [bp-2]
push	cs
call	near ptr loc_1603D+1
add	sp, 4
push	word ptr [bp+6]
call	loc_24465+1
add	sp, 2
mov	si, [bp+0Ah]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+8]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
inc	byte ptr [bp-12h]
mov	al, [bp-6]
cmp	[bp-12h], al
jb	short loc_163C9
jmp	loc_164C4
;     ***************************************************************************
nop
cmp	byte ptr [bp-4], 1
jnz	short near ptr loc_1644B+1
push	word ptr [bp+6]
call	loc_24465+1
add	sp, 2
jmp	short near ptr loc_164A0+2
;     ***************************************************************************
nop
mov	al, [bp+0Ah]
push	ax
mov	cl, [bp+8]
push	cx
push	word ptr [bp-2]
call	far ptr	loc_225B8
add	sp, 6
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp-10h]
push	ax
mov	al, [bp-0Ch]
push	ax
call	loc_23865+1
add	sp, 8
push	word ptr [bp-2]
call	loc_24465+1
add	sp, 2
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short near ptr loc_164A0+2
push	word ptr [bp-2]
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp+0Ch]
dec	al
push	ax
call	loc_24938
add	sp, 8
mov	si, [bp+0Ah]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+8]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, 3
push	ax
mov	al, [bp-0Eh]
push	ax
mov	al, [bp-8]
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jnz	short near ptr unk_16546
mov	al, [bp-0Eh]
push	ax
mov	al, [bp-8]
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jnz	short near ptr unk_16546
mov	al, [bp-0Eh]
push	ax
mov	al, [bp-8]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jnz	short near ptr unk_16546
mov	bx, [bp-2]
mov	al, [bx+5]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr unk_16546
mov	al, [bp-0Eh]
push	ax
mov	al, [bp-8]
push	ax
push	word ptr [bp-2]
call	far ptr	loc_225B8
add	sp, 6
mov	al, [bp-0Eh]
push	ax
mov	al, [bp-8]
push	ax
mov	al, [bp-10h]
push	ax
mov	al, [bp-0Ch]
push	ax
call	loc_23865+1
add	sp, 8
mov	word ptr [bp-0Ah], 1
push	word ptr [bp-2]
call	loc_24465+1
add	sp, 2
mov	si, [bp-10h]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-0Ch]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
cmp	word ptr [bp-0Ah], 0
jz	short near ptr loc_165A6+2
mov	si, [bp-0Eh]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-8]
and	byte ptr [bx+si-4594h],	7Fh
push	word ptr [bp-2]
mov	al, [bp-0Eh]
push	ax
mov	al, [bp-8]
push	ax
mov	al, [bp+0Ch]
dec	al
push	ax
call	loc_24938
add	sp, 8
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	si, [bp+8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+6]
sub	bh, bh
mov	al, [bx+si-4594h]
and	ax, 0Fh
mov	[bp-8],	ax
cmp	[bp-8],	bh
jnz	short loc_1660E
mov	al, byte ptr loc_1B8D2+4
push	ax
mov	al, [bp+8]
push	ax
mov	al, bl
push	ax
push	cs
call	loc_162C2
add	sp, 6
call	loc_24020+2
mov	ax, 0B7FDh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
add	sp, 2
jmp	near ptr loc_166B1+2
;     ***************************************************************************
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_237E9+1
add	sp, 4
mov	[bp-2],	ax
push	ax
push	word ptr loc_1B8E3+3
call	loc_23A4E+2
add	sp, 4
or	ax, ax
jnz	short near ptr loc_16631+4
jmp	near ptr loc_166B1+5
;     ***************************************************************************
push	word ptr loc_1B8E3+3
call	loc_23487+1
add	sp, 2
mov	[bp-4],	al
push	word ptr [bp-2]
call	loc_23487+1
add	sp, 2
mov	[bp-6],	al
mov	al, byte ptr loc_1B8D2+4
sub	ah, ah
dec	ax
jz	short near ptr loc_16663+1
dec	ax
jz	short near ptr loc_16677+1
dec	ax
dec	ax
jz	short near ptr loc_16689+1
jmp	short loc_166A0
;     ***************************************************************************
nop
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
push	word ptr [bp-2]
push	cs
call	near ptr loc_16215+1
add	sp, 6
jmp	short loc_166A0
;     ***************************************************************************
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
push	word ptr [bp-2]
push	cs
call	near ptr loc_16071+1
jmp	short near ptr loc_16672+1
;     ***************************************************************************
nop
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
push	word ptr [bp-2]
push	cs
call	near ptr loc_16316+2
add	sp, 8
push	word ptr [bp+0Ch]
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_24F4A+2
add	sp, 6
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	word ptr [bp-6], 0
mov	al, [bp+8]
push	ax
mov	cl, [bp+6]
push	cx
call	loc_237E9+1
add	sp, 4
mov	[bp-2],	ax
push	ax
call	loc_23487+1
add	sp, 2
mov	bl, [bp+8]
sub	bh, bh
mov	cx, bx
mov	ax, bx
shl	bx, 1
add	bx, ax
shl	bx, 1
shl	bx, 1
add	bx, ax
mov	al, [bp+6]
sub	ah, ah
add	bx, ax
or	byte ptr [bx-4594h], 20h
push	cx
push	ax
call	unk_24648
add	sp, 4
cmp	word ptr [bp-2], 0
jz	short loc_16742
mov	ax, 1
push	ax
push	word ptr [bp-2]
call	loc_24751+1
add	sp, 4
mov	[bp-6],	ax
mov	si, [bp+8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+6]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
mov	ax, [bp-6]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_237E9+1
add	sp, 4
mov	[bp-4],	ax
push	word ptr loc_1B8E3+3
call	loc_238FA
add	sp, 2
or	ax, ax
jz	short near ptr unk_1677E
cmp	word ptr [bp+0Ah], 1
sbb	al, al
neg	al
jmp	short loc_1679C
;     ***************************************************************************
nop
push	word ptr [bp-4]
call	loc_238FA
add	sp, 2
or	ax, ax
jz	short loc_1679A
cmp	word ptr [bp+0Ah], 1
sbb	al, al
and	al, 1
add	al, 2
jmp	short loc_1679C
;     ***************************************************************************
nop
mov	al, 0FFh
push	ax
call	loc_23F92+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
push	word ptr [bp+6]
call	loc_23487+1
add	sp, 2
mov	bl, al
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	bx, [bx-348Eh]
mov	ax, [bx]
mov	[bp-2],	ax
call	loc_24020+2
mov	ax, 0B805h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, [bp-2]
add	ax, 1Ch
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 0B80Dh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:9D6h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Eh
push	si
sub	ax, ax
mov	[bp-0Eh], ax
mov	[bp-6],	ax
mov	word ptr loc_1B8E3+1, 0
mov	al, 1
push	ax
push	cs
call	near ptr loc_15FDD+1
add	sp, 2
mov	[bp-2],	al
cmp	al, 0Dh
jnz	short near ptr loc_1682B+2
jmp	near ptr loc_1697A+1
;     ***************************************************************************
mov	al, byte_1B8DF
mov	[bp-8],	al
mov	al, byte ptr word_1B8E0
mov	[bp-0Ch], al
mov	al, [bp-2]
dec	al
push	ax
lea	ax, [bp-0Ch]
push	ax
lea	ax, [bp-8]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr unk_16813
mov	al, [bp-0Ch]
push	ax
mov	al, [bp-8]
push	ax
call	loc_237E9+1
add	sp, 4
mov	[bp-4],	ax
mov	word ptr loc_1B8E3+1, ax
or	ax, ax
jz	short near ptr loc_168BC+2
push	ax
push	word ptr loc_1B8E3+3
call	loc_23ABF+1
add	sp, 4
or	ax, ax
jz	short near ptr loc_168BC+2
push	word ptr [bp-4]
push	word ptr loc_1B8E3+3
call	loc_24E69+3
add	sp, 4
or	ax, ax
jz	short near ptr unk_16813
push	word ptr [bp-4]
push	cs
call	near ptr loc_167A2+4
add	sp, 2
or	ax, ax
jnz	short near ptr unk_168A2
jmp	near ptr unk_16813
;     ***************************************************************************
mov	ax, 1
mov	[bp-6],	ax
push	ax
push	word ptr loc_1B8E3+3
call	loc_23487+1
add	sp, 2
push	ax
call	loc_24DDF+1
add	sp, 4
cmp	byte ptr loc_1B8D2+4, 3
jz	short near ptr loc_168E4+4
push	word ptr [bp-6]
mov	al, [bp-2]
push	ax
mov	al, [bp-0Ch]
push	ax
mov	al, [bp-8]
push	ax
push	cs
call	near ptr loc_165AD+1
add	sp, 8
or	ax, ax
jnz	short near ptr loc_168E0+2
jmp	near ptr unk_16813
;     ***************************************************************************
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bp-0Ch]
push	ax
mov	al, [bp-8]
push	ax
call	loc_24B2A+2
add	sp, 4
mov	[bp-0Ah], ax
or	ax, ax
jz	short near ptr loc_16919+2
mov	al, [bp-0Ch]
push	ax
mov	al, [bp-8]
push	ax
push	cs
call	near ptr loc_166BB+1
add	sp, 4
mov	[bp-0Eh], ax
call	loc_2417A+2
call	loc_241BA
cmp	word ptr [bp-0Eh], 0
jnz	short loc_16933
push	word ptr [bp-0Ah]
mov	al, [bp-0Ch]
push	ax
mov	al, [bp-8]
push	ax
push	cs
call	loc_1674A
add	sp, 6
push	word ptr [bp-6]
push	word ptr [bp-4]
call	loc_23487+1
add	sp, 2
push	ax
push	word ptr loc_1B8E3+3
call	loc_23487+1
add	sp, 2
push	ax
call	loc_24F4A+2
add	sp, 6
mov	si, word_1B8E0
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, byte_1B8DF
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
mov	byte_1B8E2, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
call	loc_24020+2
mov	ax, 0B80Fh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:79Ah
mov	[bp-2],	al
sub	ah, ah
sub	ax, 31h	; '1'
jl	short loc_169BD
sub	ax, 3
jg	short loc_169BD
mov	al, [bp-2]
sub	al, 30h	; '0'
mov	byte ptr loc_1B8D2+4, al
push	cs
call	loc_16804
mov	word ptr loc_1B8E3+1, 0
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	di
push	si
mov	bx, [bp+6]
cmp	word ptr [bx+4], 0
jnz	short loc_169F0
mov	si, [bx+2]
mov	ax, [si+2]
mov	[bx+4],	ax
mov	[bp-2],	ax
mov	bx, [bx+2]
push	word ptr [bx+2]
push	bx
call	loc_24AA6
add	sp, 4
jmp	short near ptr loc_169FD+1
;     ***************************************************************************
push	word ptr [bx+4]
call	far ptr	59Dh:62h
add	sp, 2
mov	[bp-2],	ax
mov	byte ptr [bp-6], 0
mov	bx, 0CEB2h
mov	[bp-4],	bx
cmp	word ptr [bx], 0
jz	short near ptr loc_16A70+2
mov	bl, [bp-6]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-3390h], 0
jz	short near ptr loc_16A62+1
mov	bx, [bp-4]
push	word ptr [bx]
mov	si, [bp+6]
push	word ptr [si+2]
call	loc_24AA6
add	sp, 4
mov	bx, [bp-4]
push	word ptr [bx]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_16A52+2
mov	bx, [bp+6]
mov	ax, [bx+4]
mov	si, [bp-4]
mov	di, [si]
mov	[di], ax
mov	ax, [si]
mov	[bx+4],	ax
jmp	short near ptr loc_16A62+1
;     ***************************************************************************
nop
mov	bx, [bp-4]
mov	ax, [bx]
mov	si, [bp-2]
mov	[si], ax
mov	ax, [bx]
mov	[bp-2],	ax
inc	byte ptr [bp-6]
add	word ptr [bp-4], 2
mov	bx, [bp-4]
cmp	word ptr [bx], 0
jnz	short near ptr loc_16A0C+1
mov	bx, [bp-2]
mov	word ptr [bx], 0
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 10h
push	si
mov	byte ptr [bp-0Ch], 0FFh
sub	al, al
mov	[bp-0Ah], al
mov	[bp-2],	al
cmp	byte ptr loc_1B8FA+2, 0FFh
jnz	short loc_16A9D
jmp	near ptr unk_16B4E
;     ***************************************************************************
mov	bl, [bp-0Ah]
sub	bh, bh
mov	al, [bx-4704h]
mov	cx, ax
and	al, 0Fh
mov	[bp-10h], al
push	ax
mov	al, 4
xchg	cl, al
shr	al, cl
mov	[bp-0Eh], al
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jnz	short near ptr loc_16B3A+2
mov	si, [bp-10h]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-0Eh]
sub	bh, bh
mov	al, [bx+si-3432h]
mov	[bp-4],	al
cmp	al, [bp-0Ch]
ja	short near ptr loc_16B3A+2
mov	al, [bp-0Ch]
cmp	[bp-4],	al
jnz	short loc_16B0C
mov	si, [bp-10h]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	al, [bp-2]
cmp	[bx+si-4630h], al
jb	short near ptr loc_16B3A+2
mov	si, [bp-10h]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-0Eh]
sub	bh, bh
mov	al, [bx+si-4630h]
mov	[bp-2],	al
mov	al, [bp-4]
mov	[bp-0Ch], al
mov	al, bl
mov	[bp-6],	al
mov	al, [bp-10h]
mov	[bp-8],	al
inc	byte ptr [bp-0Ah]
mov	bl, [bp-0Ah]
sub	bh, bh
cmp	byte ptr [bx-4704h], 0FFh
jz	short near ptr unk_16B4E
jmp	loc_16A9D
;     ***************************************************************************
cmp	byte ptr [bp-0Ch], 0FFh
jz	short loc_16BBE
mov	al, [bp+6]
push	ax
mov	al, [bp-8]
push	ax
mov	cl, [bp-6]
push	cx
call	far ptr	unk_225CE
add	sp, 6
mov	al, [bp-8]
push	ax
mov	al, [bp-6]
push	ax
push	word ptr [bp+8]
call	far ptr	loc_225B8
add	sp, 6
cmp	byte ptr locret_1B8CA, 37h ; '7'
jb	short loc_16BAE
mov	bx, word ptr loc_1CB8A
cmp	word ptr [bx+12h], 3E8h
jb	short loc_16BAE
mov	al, 1
push	ax
mov	al, [bp-8]
push	ax
mov	al, [bp-6]
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jnz	short near ptr loc_16BB4+1
mov	bx, [bp+8]
cmp	word ptr [bx+12h], 5DBh
jbe	short near ptr loc_16BB4+1
mov	bx, [bp+8]
or	byte ptr [bx+2], 80h
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 12h
push	si
sub	ax, ax
push	ax
push	word ptr loc_1CB8A
call	loc_2461A
add	sp, 4
mov	[bp-10h], al
sub	ax, ax
push	ax
push	word ptr loc_1CB76
call	loc_2461A
add	sp, 4
mov	[bp-0Ah], al
mov	al, 8
sub	al, [bp-10h]
mov	cx, ax
shl	al, 1
shl	al, 1
add	al, cl
shl	al, 1
mov	[bp-6],	al
mov	byte ptr [bp-2], 0FFh
mov	byte ptr [bp-0Ch], 0
mov	al, byte ptr loc_1B8D7
mov	[bp-4],	al
mov	al, byte ptr loc_1B8D7+1
mov	[bp-8],	al
mov	al, [bp-0Ch]
push	ax
lea	ax, [bp-8]
push	ax
lea	ax, [bp-4]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr loc_16C6E+2
mov	si, [bp-8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-4]
sub	bh, bh
mov	al, [bp-2]
cmp	[bx+si-3432h], al
jnb	short near ptr loc_16C6E+2
mov	al, [bp-0Ch]
mov	[bp-12h], al
mov	si, [bp-8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	al, [bx+si-3432h]
mov	[bp-2],	al
inc	byte ptr [bp-0Ch]
cmp	byte ptr [bp-0Ch], 6
jb	short near ptr unk_16C0B
mov	byte ptr [bp-0Eh], 0
mov	al, [bp-0Eh]
push	ax
mov	al, [bp-12h]
push	ax
call	far ptr	loc_2C452+2
add	sp, 4
mov	[bp-0Ch], al
mov	al, byte ptr loc_1B8D7
mov	[bp-4],	al
mov	al, byte ptr loc_1B8D7+1
mov	[bp-8],	al
mov	al, [bp-0Ch]
push	ax
lea	ax, [bp-8]
push	ax
lea	ax, [bp-4]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr unk_16CCC
mov	al, [bp-8]
push	ax
mov	al, [bp-4]
push	ax
push	word_1CA9A
call	loc_22574
add	sp, 6
or	ax, ax
jz	short near ptr unk_16CD8
inc	byte ptr [bp-0Eh]
cmp	byte ptr [bp-0Eh], 6
jb	short near ptr loc_16C79+4
jmp	short loc_16D50
;     ***************************************************************************
nop
mov	al, [bp+8]
push	ax
mov	al, [bp-8]
push	ax
mov	al, [bp-4]
push	ax
call	far ptr	unk_225CE
add	sp, 6
mov	al, [bp-8]
push	ax
mov	al, [bp-4]
push	ax
push	word ptr [bp+6]
call	far ptr	loc_225B8
add	sp, 6
mov	bx, word ptr loc_1CB8A
cmp	word ptr [bx+12h], 3E8h
jb	short near ptr loc_16D3F+1
mov	al, [bp-6]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_16D21+2
mov	bx, [bp+6]
cmp	byte ptr [bx+5], 54h ; 'T'
jbe	short near ptr loc_16D46+1
mov	bx, [bp+6]
cmp	word ptr [bx+12h], 7CFh
jbe	short near ptr loc_16D46+1
mov	al, [bp-10h]
cmp	[bp-0Ah], al
jbe	short near ptr loc_16D46+1
mov	bx, word ptr loc_1CB76
cmp	word ptr [bx+12h], 2BCh
jbe	short near ptr loc_16D46+1
mov	bx, [bp+6]
or	byte ptr [bx+2], 80h
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	si
cmp	byte ptr [bp+6], 0
jnz	short loc_16DD1
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jnz	short loc_16DA6
mov	al, [bp+6]
push	ax
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	far ptr	unk_225CE
add	sp, 6
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
push	word ptr [bp+8]
call	far ptr	loc_225B8
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
cmp	byte ptr locret_1B8CA, 1Eh
jbe	short loc_16DBF
mov	al, [bp+6]
push	ax
push	word ptr [bp+8]
push	cs
call	near ptr unk_16BC6
add	sp, 4
or	ax, ax
jnz	short loc_16E14
push	word ptr [bp+8]
mov	al, [bp+6]
push	ax
push	cs
call	locret_16A80
add	sp, 4
or	ax, ax
jnz	short loc_16E14
mov	al, [bp+0Ah]
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bl, al
sub	bh, bh
cmp	byte ptr [bx-4704h], 0FFh
jz	short loc_16DD1
mov	al, [bp+6]
push	ax
mov	al, [bx-4704h]
mov	cx, ax
and	al, 0Fh
push	ax
mov	al, 4
xchg	cl, al
shr	al, cl
push	ax
mov	si, bx
call	far ptr	unk_225CE
add	sp, 6
mov	al, [si-4704h]
mov	bx, [bp+8]
mov	[bx+18h], al
or	byte ptr [bx+2], 80h
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	bx, [bp+8]
and	byte ptr [bx+2], 7Fh
mov	al, [bp+0Ah]
push	ax
push	bx
mov	al, [bp+6]
push	ax
push	cs
call	loc_16D58
mov	sp, bp
push	word ptr [bp+8]
call	loc_24465+1
mov	sp, bp
push	word ptr [bp+8]
call	far ptr	59Dh:700h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
mov	al, byte ptr loc_1B8D7+2
mov	byte ptr loc_1B8DB, al
mov	al, byte ptr loc_1B8DA
mov	byte ptr loc_1B8DB+1, al
sub	ax, ax
push	ax
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	far ptr	loc_2D9F0
add	sp, 6
cmp	word ptr [bp+8], 0
jz	short near ptr loc_16EA8+2
mov	bx, [bp+8]
mov	byte ptr [bx+17h], 0
mov	byte ptr [bx+18h], 0FFh
push	word ptr [bp+0Ah]
call	loc_2281E+2
add	sp, 2
or	al, al
jz	short near ptr loc_16EA8+2
push	ax
push	word ptr [bp+8]
mov	al, [bp+6]
push	ax
push	cs
call	loc_16E1A
add	sp, 6
mov	bx, [bp+8]
mov	ax, [bx]
mov	[bp+8],	ax
or	ax, ax
jnz	short loc_16E75
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
cmp	byte ptr [bp+6], 0
jnz	short locret_16EBC
mov	al, byte ptr loc_1B8D7
jmp	short loc_16EBF
;     ***************************************************************************
mov	al, byte ptr loc_1B8D7+2
mov	byte_1B8DF, al
cmp	byte ptr [bp+6], 0
jnz	short near ptr loc_16ECC+4
mov	al, byte ptr loc_1B8D7+1
mov	byte ptr word_1B8E0, al
pop	bp
retf
;     ***************************************************************************
mov	al, byte ptr loc_1B8DA
mov	byte ptr word_1B8E0, al
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	al, [bp+8]
push	ax
push	cs
call	near ptr loc_16EAD+1
add	sp, 2
mov	ax, [bp+6]
mov	[bp-6],	ax
push	ax
call	loc_23F02
add	sp, 2
push	word ptr [bp-6]
call	loc_23C55+1
add	sp, 2
mov	byte ptr [bp-2], 0
cmp	word ptr [bp-6], 0
jz	short near ptr loc_16F82+3
mov	bx, [bp-6]
mov	byte ptr [bx+18h], 0FFh
mov	al, [bp-2]
cmp	[bp+0Ah], al
jz	short near ptr loc_16F82+3
push	word ptr [bp+0Ch]
push	word ptr [bp-6]
call	loc_23CFE+2
add	sp, 4
or	ax, ax
jz	short near ptr loc_16F7E+1
push	word ptr [bp-6]
call	far ptr	59Dh:700h
add	sp, 2
mov	al, [bp+8]
push	ax
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
call	far ptr	unk_225CE
add	sp, 6
push	word ptr [bp-6]
call	loc_24465+1
add	sp, 2
mov	al, [bp-2]
push	ax
push	word ptr [bp-6]
call	loc_23C70+2
add	sp, 4
inc	byte ptr [bp-2]
mov	bx, [bp-6]
mov	ax, [bx]
mov	[bp-6],	ax
or	ax, ax
jz	short near ptr loc_16F7E+1
push	ax
call	loc_23C55+1
add	sp, 2
cmp	word ptr [bp-6], 0
jnz	short near ptr loc_16F0A+3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

s_26F8A		proc far		; DATA XREF: dseg:26FC7  t		 /* DOS offset ---> 2E64:A */
push	bp
mov	bp, sp
sub	sp, 2
mov	ax, word_1CB74
mov	bl, month_value
sub	bh, bh
shl	bx, 1
push	word ptr [bx-475Ch]
push	ax
call	far ptr	525h:18h
add	sp, 2
push	ax
push	word_1CB74
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
inc	ax
push	ax
mov	ax, 0B88Ch
push	ax
call	far ptr	3EFh:6E8h ; system_output_display_text
mov	sp, bp
pop	bp
retf
s_26F8A		endp		 /* DOS offset ---> 2E64:A */

;     ***************************************************************************
push	cs
call	s_26F8A		; *
call	loc_2404B+1
retf

;     *************** S U B	R O U T	I N E     ***************************************


game_gfx_cyan_border_hex_map_display proc far
; DATA XREF: game_build_fort_map_top_right_display+3  t
mov	ax, 4
push	ax
mov	ax, 8F52h
push	ax
sub	ax, ax
push	ax
mov	ax, 1A0h
push	ax
call	far ptr	4B5h:1CEh ; game_gfx_area_division_lines_display
add	sp, 8
retf
game_gfx_cyan_border_hex_map_display endp

;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	byte ptr [bp-4], 0
mov	byte ptr [bp-2], 0
mov	al, [bp-4]
sub	ah, ah
push	ax
mov	al, [bp-2]
push	ax
call	unk_24648
add	sp, 4
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 0Dh
jb	short loc_16FF6
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 0Ch
jb	short loc_16FF2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	byte ptr [bp-2], 0
mov	byte ptr [bp-4], 0
mov	al, [bp-2]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
shl	ax, 1
add	ax, cx
mov	[bp-6],	ax
mov	si, [bp-6]
mov	bl, [bp-4]
sub	bh, bh
cmp	byte ptr [bx+si-4630h],	6
jnz	short loc_1705B
mov	al, bl
mov	byte ptr loc_1B8D7, al
mov	al, [bp-2]
mov	byte ptr loc_1B8D7+1, al
push	word ptr loc_1CB88
call	far ptr	525h:64h
add	sp, 2
sub	ah, ah
mov	si, [bp-6]
mov	bl, [bp-4]
sub	bh, bh
mov	cl, [bx+si-44F8h]
sub	ch, ch
sub	cx, ax
loop	loc_17086
mov	al, bl
mov	byte ptr loc_1B8D7+2, al
mov	al, [bp-2]
mov	byte ptr loc_1B8DA, al
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 0Dh
jb	short loc_17041
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 0Ch
jb	short loc_17029
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
push	si
push	word_1CA9A
call	far ptr	525h:64h
add	sp, 2
mov	[bp-4],	al
mov	ax, word_1D47C
mov	word ptr dword_1CB9A+2,	ax
mov	al, 9Ch	; '  *'
mul	byte ptr [bp-4]
mov	word ptr dword_1CB9A, ax
mov	cx, 9Ch	; '  *'
push	cx
mov	dx, 0B9D0h
push	dx
push	word ptr dword_1CB9A+2
push	ax
mov	si, ax
call	far ptr	561h:58h
add	sp, 8
sub	ax, ax
push	ax
sub	cx, cx
add	si, 18FCh
adc	cx, ax
push	cx
push	si
push	word ptr loc_1CB9E
call	far ptr	0:2CCh
add	sp, 8
mov	ax, 9Ch	; '  *'
push	ax
mov	cx, 0BB08h
push	cx
push	word ptr loc_1CB9E
call	far ptr	0:25Eh
add	sp, 6
sub	al, al
push	ax
mov	ax, 9Ch	; '  *'
push	ax
mov	ax, 0BA6Ch
push	ax
call	far ptr	561h:0A0h
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 1
push	ax
push	word_1CA9A
call	loc_25E3F+1
add	sp, 4
mov	bx, word_1CA9A
mov	ax, [bx+8]
add	word ptr unk_1CAA1, ax
mov	ax, [bx+0Ah]
mov	dx, [bx+0Ch]
add	word ptr loc_1CAA2+3, ax
adc	word_1CAA7, dx
mov	word ptr [bx+8], 0
mov	bx, word_1CA9A
sub	ax, ax
mov	[bx+0Ch], ax
mov	[bx+0Ah], ax
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	word ptr [bp-6], 0CB72h
mov	bx, word_1CB74
mov	ax, [bx+2]
mov	[bp-4],	ax
push	ax
push	bx
call	loc_24AA6
add	sp, 4
mov	ax, [bp-4]
mov	[bp-0Ah], ax
mov	word ptr loc_1CB76, ax
mov	bx, ax
mov	cx, [bx]
mov	[bp-2],	cx
mov	word ptr [bx], 0
mov	byte ptr [bp-8], 0
mov	ax, [bp-2]
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr loc_171DA+2
cmp	byte ptr [bp-8], 9
jnb	short near ptr loc_171DA+2
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-2],	ax
cmp	word ptr [bx+12h], 64h ; 'd'
jb	short near ptr loc_171D1+1
push	bx
mov	bx, [bp-6]
push	word ptr [bx+2]
call	loc_24AA6
add	sp, 4
mov	ax, [bp-4]
mov	bx, [bp-0Ah]
mov	[bx], ax
mov	bx, ax
mov	word ptr [bx], 0
mov	[bp-0Ah], ax
inc	byte ptr [bp-8]
mov	ax, [bp-2]
mov	[bp-4],	ax
or	ax, ax
jnz	short loc_1719B
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
cmp	word ptr [bp+6], 0
jz	short near ptr loc_171FC+1
mov	bx, [bp+6]
mov	byte ptr [bx+18h], 0FFh
mov	byte ptr [bx+17h], 0
mov	ax, [bx]
mov	[bp+6],	ax
or	ax, ax
jnz	short loc_171E9
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Q_27202		proc far

var_E		= byte ptr -0Eh
var_C		= byte ptr -0Ch
var_A		= byte ptr -0Ah
var_8		= word ptr -8
var_6		= byte ptr -6
var_2		= byte ptr -2
arg_0		= word ptr  6

; FUNCTION CHUNK AT 7236 SIZE 00000017 BYTES
; FUNCTION CHUNK AT 7266 SIZE 0000000D BYTES
; FUNCTION CHUNK AT 72B6 SIZE 0000001D BYTES
; FUNCTION CHUNK AT 731A SIZE 0000005F BYTES

push	bp
mov	bp, sp
sub	sp, 0Eh
mov	al, 9
push	ax
mov	bx, [bp+arg_0]
push	word ptr [bx+2]
call	far ptr	59Dh:382h
add	sp, 4
mov	[bp+var_C], al
or	al, al
jnz	short near ptr loc_17224+2
mov	al, 0FFh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, word_1CA9A
mov	word_13534, ax
cmp	[bp+var_C], 8
jbe	short loc_17236
sub	al, al
jmp	short near ptr loc_17237+1
;     ***************************************************************************
mov	al, 1
mov	[bp+var_6], al
call	far ptr	60Dh:2E2h
mov	byte_1357A, 2
mov	[bp+var_2], 0
mov	ax, 1
push	ax
mov	al, 4
push	ax
mov	al, 1
push	ax
call	far ptr	60Dh:260h
add	sp, 6
mov	[bp+var_A], al
mov	[bp+var_E], 1
jmp	short loc_172DC
;     ***************************************************************************
nop
nop
inc	ax
jnz	short near ptr loc_1726B+1
jmp	near ptr loc_1732F+1
;     ***************************************************************************
dec	[bp+var_8]
mov	bx, [bp+var_8]
shl	bx, 1
mov	ax, [bx-314Eh]
push	ax
call	far ptr	542h:7Eh
add	sp, 2
or	ax, ax
jz	short loc_172DC
mov	bx, [bp+var_8]
shl	bx, 1
cmp	word ptr [bx-3390h], 0
jz	short near ptr loc_172A0+2
dec	[bp+var_2]
mov	bx, [bp+var_8]
shl	bx, 1
mov	word ptr [bx-3390h], 0
jmp	short loc_172B6
;     ***************************************************************************
nop
cmp	[bp+var_2], 9
jz	short loc_172DC
inc	[bp+var_2]
mov	bx, [bp+var_8]
shl	bx, 1
mov	word ptr [bx-3390h], 1
mov	al, [bp+var_A]
sub	ah, ah
cmp	ax, [bp+var_8]
jbe	short loc_172DC
mov	al, [bp+var_E]
dec	ax
cmp	ax, [bp+var_8]
ja	short loc_172DC
mov	ax, 1
push	ax
mov	al, 4
push	ax
mov	al, byte ptr [bp+var_8]
push	ax
call	far ptr	60Dh:0C0h
add	sp, 6
call	far ptr	4B5h:290h
mov	al, [bp+var_C]
sub	ah, ah
push	ax
mov	al, [bp+var_6]
push	ax
mov	ax, 0B8BCh
push	ax
call	far ptr	3EFh:9B2h ; Q_27202
add	sp, 6
mov	[bp+var_8], ax
or	ax, ax
jz	short near ptr loc_172FF+2
jmp	loc_17266
;     ***************************************************************************
mov	ax, 1
push	ax
mov	al, 4
push	ax
mov	bl, [bp+var_A]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-314Eh], 0
jnz	short loc_1731A
mov	al, 1
jmp	short near ptr loc_1731E+1
;     ***************************************************************************
mov	al, [bp+var_A]
inc	al
mov	[bp+var_E], al
push	ax
call	far ptr	60Dh:260h
add	sp, 6
mov	[bp+var_A], al
jmp	short loc_172DC
;     ***************************************************************************
mov	al, [bp+var_2]
mov	sp, bp
pop	bp
retf
Q_27202		endp

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
mov	word ptr [bp-2], 0CB72h
mov	bx, word_1CB74
push	word ptr [bx+2]
push	cs
call	near ptr loc_171DF+1
add	sp, 2
mov	bx, word_1CB74
push	word ptr [bx+2]
call	far ptr	525h:30h
add	sp, 2
push	ax
call	far ptr	542h:0BAh
add	sp, 2
or	ax, ax
jz	short loc_173AC
mov	bx, [bp-2]
cmp	word ptr [bx+8], 0
jnz	short loc_173AC
push	word ptr [bp-2]
push	cs
call	near ptr loc_17201+1
add	sp, 2
mov	[bp-4],	al
call	far ptr	4B5h:290h
cmp	byte ptr [bp-4], 0FFh
jz	short near ptr loc_17393+4
call	far ptr	3EFh:0A24h
or	ax, ax
jz	short near ptr loc_17375+1
mov	word_13534, 0
push	word ptr [bp-2]
push	cs
call	near ptr loc_169C1+1
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	cs
call	loc_1715A
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
cmp	word ptr [bp+6], 0
jz	short near ptr loc_17417+2
push	word ptr [bp+6]
call	loc_2391F+3
mov	sp, bp
or	ax, ax
jz	short near ptr loc_173E9+1
mov	bx, [bp+6]
cmp	word ptr [bx+8], 0
jnz	short near ptr loc_173E9+1
push	word ptr [bx+2]
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
push	word ptr [bx+4]
push	cs
call	near ptr loc_16ED6+2
mov	sp, bp
jmp	short near ptr loc_1740C+2
;     ***************************************************************************
cmp	byte ptr [bp+8], 0
jnz	short near ptr loc_173F4+1
call	loc_233A6
mov	bx, [bp+6]
push	word ptr [bx+2]
push	word ptr [bx+4]
mov	al, [bp+8]
push	ax
push	cs
call	near ptr loc_16E48+2
mov	sp, bp
cmp	byte ptr [bp+8], 2
jnz	short near ptr loc_17417+2
mov	bx, [bp+6]
push	word ptr [bx+2]
call	loc_23DF8
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	word ptr [bp-6], 0CB72h
push	word_1CB74
call	loc_22778+4
add	sp, 2
or	ax, ax
jz	short near ptr loc_1743B+1
jmp	loc_174C8
;     ***************************************************************************
push	word ptr [bp-6]
call	loc_2391F+3
add	sp, 2
or	ax, ax
jz	short near ptr loc_1745D+2
mov	bx, [bp-6]
cmp	word ptr [bx+8], 0
jnz	short near ptr loc_1745D+2
push	word ptr [bx+2]
call	loc_23EA7+3
add	sp, 2
push	word ptr [bp-6]
call	loc_2391F+3
add	sp, 2
or	ax, ax
jz	short near ptr loc_17475+2
mov	bx, [bp-6]
cmp	word ptr [bx+8], 0
jz	short near ptr loc_17485+2
mov	ax, 0CB86h
push	ax
call	loc_2391F+3
add	sp, 2
or	ax, ax
jz	short near ptr loc_17491+2
push	word ptr loc_1CB88
call	loc_23EA7+3
add	sp, 2
mov	byte ptr [bp-8], 0
mov	ax, [bp-6]
mov	[bp-2],	ax
cmp	byte ptr [bp-8], 1
sbb	al, al
and	al, 5
add	al, 5
push	ax
mov	al, [bp-8]
push	ax
push	word ptr [bp-2]
push	cs
call	near ptr loc_173B3+1
add	sp, 6
add	word ptr [bp-2], 14h
add	byte ptr [bp-8], 2
cmp	byte ptr [bp-8], 3
jb	short near ptr loc_1749C+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, [bp-6]
mov	[bp-2],	ax
mov	word ptr [bp-0Ah], 4
mov	bx, [bp-2]
mov	ax, [bx+4]
mov	[bp-4],	ax
or	ax, ax
jz	short loc_174F5
push	ax
call	loc_24465+1
add	sp, 2
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jnz	short near ptr loc_174DF+1
add	word ptr [bp-2], 0Ah
dec	word ptr [bp-0Ah]
jnz	short near ptr loc_174D1+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ch
mov	byte ptr [bp-6], 0
mov	byte ptr [bp-0Ch], 0
mov	bx, word_1CA9A
mov	al, [bx+20h]
mov	[bp-4],	al
mov	al, [bx+21h]
mov	[bp-8],	al
mov	al, [bp-0Ch]
push	ax
lea	ax, [bp-8]
push	ax
lea	ax, [bp-4]
push	ax
call	far ptr	59Dh:2A8h
add	sp, 6
mov	[bp-2],	al
cmp	al, 0FFh
jz	short loc_17587
push	ax
call	far ptr	525h:76h
add	sp, 2
mov	[bp-0Ah], ax
push	ax
call	far ptr	525h:4Ah
add	sp, 2
cmp	ax, [bp+6]
jnz	short loc_17572
push	word ptr [bp-0Ah]
call	far ptr	542h:92h
add	sp, 2
or	ax, ax
jz	short near ptr loc_17569+1
cmp	byte ptr [bp-6], 0
jz	short loc_17587
mov	ax, [bp-0Ah]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	word ptr [bp-0Ah]
call	far ptr	game_data_get_province_rulers_potrait
add	sp, 2
or	ax, ax
jz	short loc_17587
cmp	byte ptr [bp-6], 0
jnz	short near ptr loc_17569+1
inc	byte ptr [bp-0Ch]
cmp	byte ptr [bp-0Ch], 6
jnb	short loc_17593
jmp	near ptr loc_1750E+2
;     ***************************************************************************
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 2
jnb	short near ptr loc_1759D+2
jmp	near ptr loc_17509+3
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 12h
push	si
mov	byte ptr [bp-0Ah], 1
mov	byte ptr [bp-0Ch], 0
mov	al, [bp-0Ah]
sub	ah, ah
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 0CB72h
mov	[bp-6],	ax
cmp	byte ptr [bp-0Ah], 1
jnz	short near ptr loc_175D0+4
mov	al, 2
jmp	short near ptr loc_175D5+1
;     ***************************************************************************
mov	al, 8
test	byte_1CAE7, al
jz	short near ptr loc_175DD+2
jmp	loc_176B6
;     ***************************************************************************
mov	bl, [bp-0Ch]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
push	word ptr [bx-348Eh]
mov	bx, [bp-6]
push	word ptr [bx]
call	far ptr	542h:114h
add	sp, 4
or	ax, ax
jz	short loc_17606
jmp	loc_176B6
;     ***************************************************************************
cmp	byte ptr [bp-0Ah], 1
jnz	short loc_17610
mov	al, 4
jmp	short near ptr loc_17610+2
;     ***************************************************************************
mov	al, 10h
or	byte_1CAE7, al
mov	bl, [bp-0Ah]
and	bx, 0FEh
mov	ax, [bx-3551h]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr unk_1762B
jmp	loc_176B6
;     ***************************************************************************
mov	bx, [bp-6]
mov	bx, [bx+2]
mov	ax, [bx+2]
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr loc_1768F+1
push	ax
push	word ptr [bp-2]
call	loc_257E0
add	sp, 4
or	ax, ax
jz	short near ptr unk_17650
push	word ptr [bp-4]
jmp	short near ptr loc_1767A+1
;     ***************************************************************************
mov	bx, [bp-6]
push	word ptr [bx]
push	cs
call	loc_17502
add	sp, 2
or	ax, ax
jz	short near ptr loc_17666+2
mov	bx, ax
push	word ptr [bx+2]
jmp	short near ptr loc_1767A+1
;     ***************************************************************************
nop
mov	bx, [bp-6]
mov	bx, [bx]
mov	ax, [bx+2]
or	ax, ax
jnz	short loc_17660
mov	bx, word_1CA9A
push	word ptr [bx+4]
call	far ptr	59Dh:62h
add	sp, 2
mov	[bp-8],	ax
mov	ax, [bp-2]
mov	bx, [bp-8]
mov	[bx], ax
jmp	short near ptr loc_176A8+1
;     ***************************************************************************
mov	ax, [bp-2]
mov	bx, [bp-6]
mov	si, [bx+2]
mov	[si+2],	ax
push	word ptr [bx+2]
push	word ptr [bx]
call	far ptr	59Dh:49Ch
add	sp, 4
mov	bl, [bp-0Ah]
and	bx, 0FEh
mov	word ptr [bx-3551h], 0
add	byte ptr [bp-0Ch], 2
add	byte ptr [bp-0Ah], 2
cmp	byte ptr [bp-0Ah], 4
jnb	short loc_176C7
jmp	loc_175B5
;     ***************************************************************************
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	word ptr [bp-2], 0CB72h
mov	bx, word_1CA9A
push	word ptr [bx+2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_176FA+3
mov	bx, word_1CA9A
push	word ptr [bx+2]
call	loc_238FA
add	sp, 2
or	ax, ax
jnz	short loc_17727
cmp	word ptr [bp+6], 0
jz	short near ptr loc_1772E+1
mov	bx, [bp-2]
push	word ptr [bx+4]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1772E+1
mov	bx, [bp-2]
push	word ptr [bx+4]
call	loc_238FA
add	sp, 2
or	ax, ax
jz	short near ptr loc_1772E+1
mov	bx, [bp-2]
mov	word ptr [bx+8], 0
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, 0FFh
mov	byte ptr loc_1CB65+2, al
mov	byte ptr loc_1B8D2+3, al
mov	byte ptr word_1B8E0+1, 1
push	cs
call	loc_1709E
sub	ax, ax
push	ax
push	cs
call	near ptr loc_176CA+2
add	sp, 2
push	word_1CA9A
call	loc_22778+4
add	sp, 2
or	ax, ax
jnz	short near ptr loc_17765+1
push	cs
call	near ptr loc_17336+2
jmp	short near ptr loc_17776+3
;     ***************************************************************************
nop
push	cs
call	near ptr loc_1711D+1
mov	ax, 1
push	ax
push	cs
call	near ptr loc_176CA+2
add	sp, 2
push	cs
call	near ptr loc_175A2+4
sub	ax, ax
push	ax
call	far ptr	4B5h:0E6h
add	sp, 2
call	far ptr	0:15B3h
mov	word_13572, 1
push	cs
call	near ptr loc_16FE7+1
push	cs
call	loc_16FD0
mov	ax, 7
push	ax
mov	ax, 18h
push	ax
mov	ax, 1Ah
push	ax
sub	ax, ax
push	ax
mov	cx, 35h	; '5'
push	cx
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
push	cs
call	near ptr unk_16FC6
mov	ax, 1
push	ax
call	far ptr	4B5h:0E6h
add	sp, 2
push	cs
call	near ptr loc_1701D+1
mov	word_13530, 2EEh
mov	word_13532, 2333h
push	cs
call	loc_1741E
push	word_1CA9A
call	loc_22778+4
add	sp, 2
or	ax, ax
jz	short loc_177EB
call	loc_2438C
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
push	si
mov	word ptr [bp-2], 0
cmp	word ptr [bp+6], 0
jz	short near ptr unk_17834
mov	ax, [bp+6]
cmp	[bp+0Ah], ax
jz	short near ptr loc_17827+1
mov	si, [bp+8]
and	si, 0FFh
mov	bx, ax
mov	al, [bx+si+4]
sub	ah, ah
add	[bp-2],	ax
cmp	byte ptr [bp+8], 1
jnz	short near ptr loc_17827+1
cmp	word ptr [bx+1Ah], 0A3h	; '  *'
jnz	short near ptr loc_17827+1
add	word ptr [bp-2], 14h
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp+6],	ax
or	ax, ax
jnz	short near ptr loc_177FD+1
mov	ax, [bp-2]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ch
push	si
call	func_1B720
mov	[bp-4],	al
mov	word ptr [bp-8], 0
mov	byte ptr [bp-0Ah], 0
mov	al, [bp+6]
and	ax, 0FEh
shl	ax, 1
mov	cl, [bp-4]
sub	ch, ch
add	ax, cx
mov	cx, ax
shl	ax, 1
add	ax, cx
mov	[bp-0Ch], ax
mov	si, [bp-0Ch]
mov	bl, [bp-0Ah]
sub	bh, bh
mov	al, [bx+si-4450h]
mov	[bp-2],	al
cmp	al, 4
jnb	short loc_178A1
push	word ptr [bp+0Ah]
mov	al, [bp+8]
push	ax
mov	bl, [bp-2]
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
push	word ptr [bx-348Ah]
push	cs
call	near ptr loc_177EB+1
add	sp, 6
add	[bp-8],	ax
inc	byte ptr [bp-0Ah]
cmp	byte ptr [bp-0Ah], 3
jb	short near ptr loc_1786B+1
mov	ax, [bp-8]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ch
mov	byte ptr [bp-0Ah], 0
mov	al, [bp+6]
mov	[bp-6],	al
mov	al, [bp+8]
mov	[bp-8],	al
mov	al, [bp-0Ah]
push	ax
lea	ax, [bp-8]
push	ax
lea	ax, [bp-6]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jnz	short loc_178E3
jmp	loc_17998
;     ***************************************************************************
mov	al, [bp-8]
push	ax
mov	al, [bp-6]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short locret_17933
mov	ax, 1
push	ax
mov	al, [bp-8]
push	ax
mov	al, [bp-6]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_23B7A+4
add	sp, 0Ah
or	ax, ax
jnz	short near ptr loc_17916+4
jmp	loc_179A8
;     ***************************************************************************
mov	ax, 1
push	ax
push	ax
mov	al, [bp-8]
push	ax
mov	al, [bp-6]
push	ax
call	loc_238BB+1
add	sp, 8
or	ax, ax
jnz	short loc_179A8
mov	byte ptr [bp-0Ch], 0
mov	al, [bp-6]
mov	[bp-2],	al
mov	al, [bp-8]
mov	[bp-4],	al
mov	al, [bp-0Ch]
push	ax
lea	ax, [bp-4]
push	ax
lea	ax, [bp-2]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short loc_1798F
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short loc_1798F
mov	ax, 1
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_23B7A+4
add	sp, 0Ah
or	ax, ax
jz	short loc_179A8
inc	byte ptr [bp-0Ch]
cmp	byte ptr [bp-0Ch], 6
jb	short loc_17937
inc	byte ptr [bp-0Ah]
cmp	byte ptr [bp-0Ah], 6
jnb	short near ptr loc_179A3+1
jmp	near ptr loc_178B9+3
;     ***************************************************************************
jmp	short near ptr loc_179AE+2
;     ***************************************************************************
nop
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 10h
mov	bl, [bp+8]
shr	bl, 1
sub	bh, bh
mov	al, [bx-4736h]
mov	[bp-8],	al
cmp	byte ptr [bp+8], 1
sbb	bx, bx
neg	bx
mov	al, [bx-4736h]
mov	[bp-0Eh], al
mov	al, 1Fh
sub	al, byte ptr word_1B8E0+1
mov	[bp-10h], al
sub	ax, ax
push	ax
mov	cl, [bp+8]
push	cx
call	far ptr	loc_2B96A
add	sp, 4
mov	[bp-6],	ax
mov	[bp-4],	dx
sub	ax, ax
push	ax
cmp	byte ptr [bp+8], 1
sbb	al, al
and	al, 2
push	ax
call	far ptr	loc_2B96A
add	sp, 4
mov	[bp-0Ch], ax
mov	[bp-0Ah], dx
mov	bl, [bp+8]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	bx, [bx-348Ah]
mov	al, [bx+18h]
mov	[bp-2],	al
push	word ptr [bp+6]
call	loc_2580F+1
add	sp, 2
or	ax, ax
jnz	short loc_17AB2
mov	ax, 4
push	ax
mov	al, [bp-0Eh]
sub	ah, ah
push	ax
call	far ptr	561h:18Ah
add	sp, 4
push	ax
mov	al, [bp-10h]
sub	ah, ah
push	ax
call	far ptr	561h:18Ah
add	sp, 4
cmp	al, [bp-8]
jbe	short near ptr loc_17A66+2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
nop
mov	al, [bp-10h]
cmp	[bp-0Eh], al
jbe	short loc_17AB2
mov	ax, [bp-6]
mov	dx, [bp-4]
mov	cx, ax
mov	bx, dx
shl	ax, 1
rcl	dx, 1
add	ax, cx
adc	dx, bx
shl	ax, 1
rcl	dx, 1
cmp	dx, [bp-0Ah]
jg	short loc_17AB2
jl	short near ptr unk_17A92
cmp	ax, [bp-0Ch]
ja	short loc_17AB2
cmp	byte ptr [bp+8], 0
jnz	short near ptr loc_17A5D+2
mov	al, [bp-2]
and	al, 0Fh
push	ax
mov	cl, 4
mov	al, [bp-2]
shr	al, cl
push	ax
push	cs
call	loc_178B2
add	sp, 4
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
cmp	word ptr [bp+6], 0
jz	short loc_17AE9
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp-2],	ax
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
sub	ah, ah
push	ax
push	bx
call	loc_25670
add	sp, 6
mov	ax, [bp-2]
mov	[bp+6],	ax
or	ax, ax
jnz	short loc_17AC4
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
push	word ptr loc_1B8E3+3
call	loc_23834
add	sp, 2
mov	[bp-4],	al
push	word ptr loc_1B8E3+3
call	loc_2574C
add	sp, 2
mov	[bp-2],	al
push	word ptr loc_1B8E3+3
call	loc_24448+2
add	sp, 2
or	ax, ax
jz	short loc_17B5E
mov	al, [bp-4]
push	ax
mov	cl, [bp-2]
push	cx
push	word ptr loc_1B8E3+3
push	cs
call	near ptr loc_17AB7+1
add	sp, 6
cmp	byte ptr [bp-4], 1
jnz	short loc_17B40
mov	al, 2
jmp	short loc_17B42
;     ***************************************************************************
nop
mov	al, 6
push	ax
cmp	byte ptr [bp-4], 1
jnz	short near ptr unk_17B4E
mov	al, 1
jmp	short loc_17B50
;     ***************************************************************************
nop
sub	al, al
push	ax
call	loc_25135+3
add	sp, 4
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
sub	ah, ah
push	ax
push	word ptr loc_1B8E3+3
call	loc_25670
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
push	si
mov	bl, [bp+8]
sub	bh, bh
mov	cx, bx
mov	ax, cx
shl	bx, 1
add	bx, ax
shl	bx, 1
shl	bx, 1
add	bx, ax
mov	al, [bp+6]
sub	ah, ah
add	bx, ax
or	byte ptr [bx-4594h], 20h
push	cx
push	ax
call	unk_24648
add	sp, 4
cmp	word ptr loc_1B8E3+1, 0
jz	short near ptr loc_17BE2+1
mov	ax, 1
push	ax
push	word ptr [bp+0Ah]
call	loc_24751+1
add	sp, 4
or	ax, ax
jz	short near ptr loc_17BC4+2
mov	word ptr loc_1B8E3+1, 0
mov	si, [bp+8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+6]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
cmp	word ptr [bp+6], 1
sbb	al, al
and	al, 1
add	al, 2
push	ax
call	loc_23F92+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	word ptr [bp-4], 0
cmp	word ptr loc_1B8E3+1, 0
jnz	short near ptr loc_17C13+3
jmp	near ptr loc_17C96+1
;     ***************************************************************************
push	word ptr loc_1B8E3+3
call	far ptr	loc_2C166
add	sp, 2
mov	cl, 4
mov	bx, word ptr loc_1B8E3+1
mov	al, [bx+18h]
shr	al, cl
mov	byte ptr loc_1B8DB, al
mov	al, [bx+18h]
and	al, 0Fh
mov	byte ptr loc_1B8DB+1, al
mov	[bp-2],	bx
push	bx
push	word ptr loc_1B8E3+3
call	loc_23ABF+1
add	sp, 4
or	ax, ax
jz	short loc_17C60
push	word ptr [bp-2]
push	word ptr loc_1B8E3+3
call	loc_24E69+3
add	sp, 4
jmp	short near ptr loc_17C61+1
;     ***************************************************************************
nop
nop
nop
sub	ax, ax
mov	[bp-4],	ax
push	ax
push	word ptr loc_1B8E3+3
call	loc_23487+1
add	sp, 2
push	ax
call	loc_24DDF+1
add	sp, 4
mov	al, byte ptr loc_1B8DB+1
push	ax
mov	al, byte ptr loc_1B8DB
push	ax
call	loc_237E9+1
add	sp, 4
push	ax
call	loc_23487+1
add	sp, 2
mov	[bp-6],	al
mov	al, byte ptr loc_1B8DB+1
push	ax
mov	al, byte ptr loc_1B8DB
push	ax
call	loc_24B2A+2
add	sp, 4
mov	[bp-8],	ax
or	ax, ax
jz	short near ptr loc_17CC9+2
push	word ptr loc_1B8E3+1
mov	al, byte ptr loc_1B8DB+1
push	ax
mov	al, byte ptr loc_1B8DB
push	ax
push	cs
call	near ptr loc_17B75+1
add	sp, 6
call	loc_2417A+2
call	loc_241BA
push	word ptr [bp-8]
push	cs
call	loc_17BE8
add	sp, 2
mov	byte_1B8E2, 1
mov	bx, word ptr loc_1B8E3+3
mov	al, [bx+18h]
mov	bl, al
mov	cl, 4
shr	bl, cl
and	ax, 0Fh
mov	si, ax
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
push	word ptr [bp-4]
mov	al, [bp-6]
push	ax
push	word ptr loc_1B8E3+3
call	loc_23487+1
add	sp, 2
push	ax
call	loc_24F4A+2
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	ax, [bx-348Ah]
mov	[bp-4],	ax
mov	bx, word ptr loc_1B8E3+1
mov	al, [bx+18h]
mov	cl, [bp+6]
push	cx
mov	cx, ax
and	al, 0Fh
push	ax
mov	al, 4
xchg	cl, al
shr	al, cl
push	ax
call	loc_2B7A7+1
add	sp, 6
or	ax, ax
jz	short near ptr unk_17D96
mov	ax, word ptr loc_1B8E3+3
cmp	[bp-4],	ax
jz	short near ptr unk_17D96
mov	bx, [bp-4]
cmp	word ptr [bx+12h], 0BB8h
jnb	short near ptr unk_17D96
push	word ptr loc_1B8E3+1
call	loc_23702
add	sp, 2
push	word ptr [bp-4]
mov	si, ax
call	loc_23702
add	sp, 2
cmp	ax, si
jge	short near ptr unk_17D96
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 1Ah
push	si
mov	byte_1B8E2, 1
mov	si, [bp+0Ah]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+8]
sub	bh, bh
mov	al, [bx+si-4630h]
mov	byte ptr loc_1B8DE, al
push	word ptr [bp+6]
push	word ptr loc_1B8E3+3
call	loc_23ABF+1
add	sp, 4
or	ax, ax
jz	short loc_17DEE
push	word ptr [bp+6]
push	word ptr loc_1B8E3+3
call	loc_24E69+3
add	sp, 4
jmp	short near ptr loc_17DEE+2
;     ***************************************************************************
nop
sub	ax, ax
mov	[bp-0Ch], ax
push	ax
push	word ptr loc_1B8E3+3
call	loc_23487+1
add	sp, 2
mov	[bp-4],	al
push	ax
call	loc_24DDF+1
add	sp, 4
push	word ptr [bp+6]
call	loc_23487+1
add	sp, 2
mov	[bp-6],	al
mov	byte ptr [bp-10h], 0
mov	word ptr [bp-14h], 0
mov	si, [bp-10h]
and	si, 0FFh
mov	byte ptr [bp+si-1Ah], 0
mov	al, [bp+8]
mov	[bp-0Ah], al
mov	al, [bp+0Ah]
mov	[bp-0Eh], al
mov	al, [bp-10h]
push	ax
lea	ax, [bp-0Eh]
push	ax
lea	ax, [bp-0Ah]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short loc_17EBB
mov	al, [bp-0Eh]
push	ax
mov	al, [bp-0Ah]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short loc_17EBB
mov	ax, 1
push	ax
mov	al, [bp-0Eh]
push	ax
mov	al, [bp-0Ah]
push	ax
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
call	loc_23B7A+4
add	sp, 0Ah
or	ax, ax
jnz	short loc_17EBB
mov	al, [bp-4]
and	al, 0FEh
push	ax
push	cs
call	loc_17D1E
add	sp, 2
or	ax, ax
jz	short near ptr loc_17EAB+2
mov	al, [bp-0Eh]
push	ax
mov	al, [bp-0Ah]
push	ax
call	loc_237E9+1
add	sp, 4
cmp	ax, word ptr loc_1B8E3+3
jnz	short loc_17EBB
mov	si, [bp-10h]
and	si, 0FFh
mov	byte ptr [bp+si-1Ah], 1
inc	word ptr [bp-14h]
inc	byte ptr [bp-10h]
cmp	byte ptr [bp-10h], 6
jnb	short near ptr loc_17EC5+2
jmp	near ptr loc_17E22+1
;     ***************************************************************************
cmp	word ptr [bp-14h], 1
jnz	short loc_17ED2
mov	al, 3
jmp	short loc_17ED4
;     ***************************************************************************
nop
mov	al, 2
push	ax
call	far ptr	loc_2C3B1+1
add	sp, 2
mov	byte ptr [bp-12h], 0
mov	byte ptr [bp-10h], 0
mov	si, [bp-10h]
and	si, 0FFh
cmp	byte ptr [bp+si-1Ah], 0
jnz	short loc_17EF5
jmp	near ptr loc_17FD0+3
;     ***************************************************************************
mov	al, [bp+8]
mov	[bp-0Ah], al
mov	al, [bp+0Ah]
mov	[bp-0Eh], al
mov	al, [bp-10h]
push	ax
lea	ax, [bp-0Eh]
push	ax
lea	ax, [bp-0Ah]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jnz	short near ptr loc_17F1A+2
jmp	near ptr loc_17FD0+3
;     ***************************************************************************
mov	al, [bp-0Eh]
push	ax
mov	al, [bp-0Ah]
push	ax
call	loc_237E9+1
add	sp, 4
mov	[bp-2],	ax
cmp	byte ptr [bp-12h], 0
jnz	short near ptr unk_17F40
mov	ax, word ptr loc_1B8E3+3
cmp	[bp-2],	ax
jz	short near ptr unk_17F40
jmp	near ptr loc_17FD0+3
;     ***************************************************************************
mov	si, [bp-10h]
and	si, 0FFh
mov	byte ptr [bp+si-1Ah], 0
mov	si, [bp-0Eh]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-0Ah]
sub	bh, bh
mov	al, [bx+si-4630h]
mov	byte ptr loc_1B8DB+2, al
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp-0Eh]
push	ax
mov	al, bl
push	ax
call	loc_250F7+1
add	sp, 8
push	word ptr [bp-14h]
push	word ptr [bp+6]
push	word ptr [bp-2]
call	loc_24C57+1
add	sp, 6
mov	[bp-8],	al
push	ax
push	word ptr [bp+6]
push	word ptr [bp-2]
call	loc_24BA7+3
add	sp, 6
mov	si, [bp-0Eh]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-0Ah]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
cmp	[bp-8],	bh
jz	short near ptr loc_18007+1
cmp	byte ptr [bp-8], 2
jz	short near ptr loc_18007+1
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short near ptr loc_18007+1
inc	byte ptr [bp-10h]
cmp	byte ptr [bp-10h], 6
jnb	short near ptr loc_17FDE+1
jmp	near ptr loc_17EE3+2
;     ***************************************************************************
inc	byte ptr [bp-12h]
cmp	byte ptr [bp-12h], 2
jnb	short near ptr loc_17FE9+2
jmp	near ptr loc_17EE0+1
;     ***************************************************************************
mov	si, [bp+0Ah]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+8]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
push	word ptr [bp-0Ch]
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_24F4A+2
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	cl, 4
mov	bx, word ptr loc_1B8E3+1
mov	al, [bx+18h]
mov	dx, ax
shr	al, cl
and	dl, 0Fh
push	dx
push	ax
push	bx
push	cs
call	near ptr unk_17D9E
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
call	loc_24020+2
mov	bx, [bp+6]
push	word ptr [bx+12h]
lea	ax, [bx+1Ch]
push	ax
mov	bx, [bp+8]
push	word ptr [bx+12h]
lea	ax, [bx+1Ch]
push	ax
mov	ax, 0BDE8h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
mov	ax, 3
push	ax
call	far ptr	57Ch:5Eh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 1Eh
push	si
mov	word ptr [bp-10h], 0
mov	byte_1B8E2, 1
mov	ax, word ptr loc_1B8E3+3
mov	[bp-2],	ax
push	word ptr loc_1B8E3+1
push	ax
call	loc_23ABF+1
add	sp, 4
or	ax, ax
jz	short loc_180B0
push	word ptr loc_1B8E3+1
push	word ptr [bp-2]
call	loc_24E69+3
add	sp, 4
jmp	short loc_180B2
;     ***************************************************************************
nop
sub	ax, ax
mov	[bp-4],	ax
push	ax
push	word ptr [bp-2]
call	loc_23487+1
add	sp, 2
mov	[bp-6],	al
push	ax
call	loc_24DDF+1
add	sp, 4
push	word ptr loc_1B8E3+1
call	loc_23487+1
add	sp, 2
mov	[bp-8],	al
mov	cl, 4
mov	bx, word ptr loc_1B8E3+1
mov	al, [bx+18h]
mov	dx, ax
shr	al, cl
mov	[bp-18h], al
and	dl, 0Fh
mov	[bp-1Ch], dl
mov	cl, byte_1B8DF
mov	[bp-12h], cl
mov	dl, byte ptr word_1B8E0
mov	[bp-16h], dl
mov	[bp-0Eh], al
mov	al, [bp-1Ch]
mov	[bp-14h], al
push	ax
mov	bl, [bp-18h]
push	bx
push	dx
push	cx
call	loc_24DFF+1
add	sp, 8
mov	[bp-1Eh], al
push	ax
lea	ax, [bp-14h]
push	ax
lea	ax, [bp-0Eh]
push	ax
call	loc_23BE9+1
add	sp, 6
mov	si, [bp-1Ch]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-18h]
sub	bh, bh
mov	al, [bx+si-4630h]
mov	byte ptr loc_1B8DE, al
mov	si, [bp-16h]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-12h]
mov	al, [bx+si-4630h]
mov	byte ptr loc_1B8DB+2, al
mov	al, 0Ah
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
inc	al
mov	[bp-0Ch], al
mov	al, byte ptr word_1B8E0
sub	ah, ah
push	ax
mov	al, byte_1B8DF
push	ax
call	unk_24648
add	sp, 4
mov	byte ptr [bp-1Ah], 0
cmp	byte ptr [bp-0Ch], 0
jnz	short loc_18197
jmp	near ptr unk_182A6
;     ***************************************************************************
mov	al, [bp-1Ch]
push	ax
mov	cl, [bp-18h]
push	cx
push	ax
push	cx
call	loc_250F7+1
add	sp, 8
mov	ax, 1
push	ax
push	word ptr loc_1B8E3+1
push	word ptr [bp-2]
call	loc_24C57+1
add	sp, 6
mov	[bp-0Ah], al
cmp	al, 0FFh
jnz	short loc_18208
push	word ptr loc_1B8E3+1
push	word ptr [bp-2]
push	cs
call	loc_18042
add	sp, 4
push	word ptr loc_1B8E3+1
call	loc_24465+1
add	sp, 2
mov	si, [bp-1Ch]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-18h]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
inc	byte ptr [bp-1Ah]
mov	al, [bp-0Ch]
cmp	[bp-1Ah], al
jb	short loc_18197
jmp	near ptr unk_182A6
;     ***************************************************************************
cmp	byte ptr [bp-0Ah], 1
jnz	short near ptr unk_1821C
push	word ptr loc_1B8E3+1
call	loc_24465+1
add	sp, 2
jmp	short loc_18270
;     ***************************************************************************
mov	al, [bp-1Ch]
push	ax
mov	cl, [bp-18h]
push	cx
push	word ptr [bp-2]
call	far ptr	loc_225B8
add	sp, 6
mov	al, [bp-1Ch]
push	ax
mov	al, [bp-18h]
push	ax
mov	al, [bp-16h]
push	ax
mov	al, [bp-12h]
push	ax
call	loc_23865+1
add	sp, 8
push	word ptr [bp-2]
call	loc_24465+1
add	sp, 2
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short loc_18270
push	word ptr [bp-2]
mov	al, [bp-1Ch]
push	ax
mov	al, [bp-18h]
push	ax
mov	al, [bp-1Eh]
push	ax
call	loc_24938
add	sp, 8
mov	si, [bp-1Ch]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-18h]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
push	word ptr [bp-4]
mov	al, [bp-8]
push	ax
mov	al, [bp-6]
push	ax
call	loc_24F4A+2
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, 3
push	ax
mov	al, [bp-14h]
push	ax
mov	al, [bp-0Eh]
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jnz	short near ptr loc_18326+2
mov	al, [bp-14h]
push	ax
mov	al, [bp-0Eh]
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jnz	short near ptr loc_18326+2
mov	al, [bp-14h]
push	ax
mov	al, [bp-0Eh]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jnz	short near ptr loc_18326+2
mov	bx, [bp-2]
mov	al, [bx+5]
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_18326+2
mov	al, [bp-14h]
push	ax
mov	al, [bp-0Eh]
push	ax
push	word ptr [bp-2]
call	far ptr	loc_225B8
add	sp, 6
mov	al, [bp-14h]
push	ax
mov	al, [bp-0Eh]
push	ax
mov	al, [bp-16h]
push	ax
mov	al, [bp-12h]
push	ax
call	loc_23865+1
add	sp, 8
mov	word ptr [bp-10h], 1
push	word ptr [bp-2]
call	loc_24465+1
add	sp, 2
mov	si, [bp-16h]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-12h]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
push	word ptr [bp-4]
mov	al, [bp-8]
push	ax
mov	al, [bp-6]
push	ax
call	loc_24F4A+2
add	sp, 6
cmp	word ptr [bp-10h], 0
jz	short near ptr unk_1839D
mov	si, [bp-14h]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp-0Eh]
sub	bh, bh
and	byte ptr [bx+si-4594h],	7Fh
push	word ptr [bp-2]
mov	al, [bp-14h]
push	ax
mov	al, [bp-0Eh]
push	ax
mov	al, [bp-1Eh]
push	ax
call	loc_24938
add	sp, 8
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	ax, [bp+6]
cmp	[bp+8],	ax
ja	short near ptr loc_183B0+2
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
mov	word ptr [bp-6], 0
mov	al, [bp+6]
sub	ah, ah
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 0CB72h
mov	[bp-2],	ax
mov	byte ptr [bp-4], 0
mov	bx, 0CA62h
mov	[bp-8],	bx
cmp	word ptr [bx], 0
jz	short near ptr loc_1841F+1
mov	bx, [bx]
push	word ptr [bx+2]
mov	bx, [bp-2]
push	word ptr [bx+4]
call	loc_257E0
add	sp, 4
or	ax, ax
jz	short loc_18414
mov	bx, [bp-8]
mov	ax, [bx]
mov	bl, [bp-4]
sub	bh, bh
shl	bx, 1
mov	[bx-4716h], ax
inc	byte ptr [bp-4]
mov	word ptr [bp-6], 1
add	word ptr [bp-8], 2
mov	bx, [bp-8]
cmp	word ptr [bx], 0
jnz	short loc_183E5
mov	bl, [bp-4]
sub	bh, bh
shl	bx, 1
mov	word ptr [bx-4716h], 0
mov	ax, [bp-6]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
mov	al, [bp+0Ah]
sub	ah, ah
sub	dx, dx
push	dx
push	ax
push	word ptr [bp+8]
push	word ptr [bp+6]
call	far ptr	0:3818h /* math_divide_2_16bit_values*/
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
sub	ax, ax
push	ax
mov	bx, [bp+6]
push	word ptr [bx+2]
call	loc_2461A
add	sp, 4
mov	[bp-4],	al
push	ax
sub	cx, cx
push	cx
mov	bx, [bp+6]
push	word ptr [bx+2]
call	loc_245DB+1
add	sp, 4
mov	[bp-8],	ax
mov	[bp-6],	dx
push	dx
push	ax
push	cs
call	loc_18434
add	sp, 6
cmp	byte ptr [bp-4], 2
jbe	short near ptr loc_184AB+1
cmp	word ptr [bp-6], 0
jl	short near ptr loc_184AB+1
jg	short near ptr loc_1849F+1
cmp	word ptr [bp-8], 2710h
jbe	short near ptr loc_184AB+1
cmp	ax, 7D0h
jbe	short near ptr loc_184AB+1
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, 0B8EAh
mov	[bp-2],	bx
cmp	word ptr [bx], 0
jz	short near ptr unk_184E6
push	word ptr [bx]
push	cs
call	near ptr unk_18450
add	sp, 2
or	ax, ax
jnz	short near ptr unk_184DE
add	word ptr [bp-2], 2
mov	bx, [bp-2]
cmp	[bx], ax
jnz	short loc_184C3
jmp	short near ptr unk_184E6
;     ***************************************************************************
nop
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 10h
push	word ptr [bp+8]
mov	al, [bp+6]
push	ax
call	far ptr	loc_2B96A
add	sp, 4
mov	[bp-0Ch], ax
mov	[bp-0Ah], dx
push	word ptr [bp+8]
sub	al, al
push	ax
mov	al, [bp+6]
push	ax
push	cs
call	near ptr unk_1783C
add	sp, 6
mov	[bp-8],	ax
push	word ptr [bp+8]
mov	al, 1
push	ax
mov	al, [bp+6]
push	ax
push	cs
call	near ptr unk_1783C
add	sp, 6
mov	[bp-4],	ax
push	word ptr [bp+8]
mov	al, [bp+6]
push	ax
call	loc_2B8FA+2
add	sp, 4
push	ax
push	word ptr [bp-0Ah]
push	word ptr [bp-0Ch]
mov	[bp-10h], ax
push	cs
call	loc_18434
add	sp, 6
mov	[bp-6],	ax
mov	al, [bp-10h]
push	ax
mov	cx, [bp-8]
sub	dx, dx
push	dx
push	cx
push	cs
call	loc_18434
add	sp, 6
mov	[bp-8],	ax
mov	al, [bp-10h]
push	ax
mov	cx, [bp-4]
sub	dx, dx
push	dx
push	cx
push	cs
call	loc_18434
mov	cx, ax
mov	ax, [bp-6]
mov	bx, 32h	; '2'
sub	dx, dx
div	bx
add	cx, ax
add	cx, [bp-8]
mov	bl, [bp-10h]
sub	bh, bh
mov	ax, cx
mul	bx
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 1Ch
call	loc_233A6
mov	byte ptr [bp-12h], 1
mov	byte ptr [bp-1Ah], 2
sub	al, al
mov	[bp-0Ch], al
mov	[bp-1Ch], al
mov	al, [bp-0Ch]
sub	ah, ah
mov	cx, 14h
mov	bx, ax
imul	cx
add	ax, 0CB72h
mov	[bp-0Ah], ax
mov	al, 1Eh
sub	al, byte ptr word_1B8E0+1
mov	[bp-18h], al
mov	al, [bx-4736h]
mov	[bp-8],	al
mov	bl, [bp-12h]
sub	bh, bh
mov	al, [bx-4736h]
mov	[bp-16h], al
sub	ax, ax
push	ax
mov	dl, [bp-1Ch]
push	dx
push	cs
call	near ptr unk_184EC
add	sp, 4
mov	[bp-14h], ax
sub	ax, ax
push	ax
mov	al, [bp-1Ah]
push	ax
push	cs
call	near ptr unk_184EC
add	sp, 4
mov	[bp-6],	ax
cmp	byte ptr [bp-0Ch], 0
jnz	short near ptr loc_1860D+1
push	word ptr loc_1CB76
sub	al, al
jmp	short near ptr loc_18612+2
;     ***************************************************************************
nop
sub	ax, ax
push	ax
mov	al, [bp-1Ch]
push	ax
call	far ptr	loc_2B96A
add	sp, 4
mov	[bp-4],	ax
mov	[bp-2],	dx
cmp	byte ptr [bp-12h], 0
jnz	short near ptr loc_1862F+3
push	word ptr loc_1CB76
sub	al, al
jmp	short near ptr loc_18636+2
;     ***************************************************************************
nop
sub	ax, ax
push	ax
mov	al, [bp-1Ah]
push	ax
call	far ptr	loc_2B96A
add	sp, 4
mov	[bp-10h], ax
mov	[bp-0Eh], dx
mov	al, [bp-1Ch]
push	ax
mov	al, 14h
mul	byte ptr [bp-0Ch]
mov	bx, ax
push	word ptr [bx-348Ah]
push	cs
call	near ptr loc_179B4+2
add	sp, 4
or	ax, ax
jz	short loc_1866E
mov	bl, [bp-0Ch]
sub	bh, bh
mov	byte ptr [bx-4730h], 3
jmp	near ptr loc_1875B+3
;     ***************************************************************************
mov	al, [bp-18h]
cmp	[bp-8],	al
jnb	short near ptr loc_18677+2
jmp	near ptr loc_18701+1
;     ***************************************************************************
cmp	[bp-16h], al
jnb	short near ptr loc_18689+3
mov	bl, [bp-0Ch]
sub	bh, bh
mov	byte ptr [bx-4730h], 1
jmp	near ptr loc_1875B+3
;     ***************************************************************************
nop
push	word ptr [bp-6]
push	word ptr [bp-14h]
push	cs
call	near ptr unk_183A2
add	sp, 4
or	ax, ax
jz	short loc_186BA
mov	ax, [bp-10h]
mov	dx, [bp-0Eh]
cmp	[bp-2],	dx
jl	short near ptr loc_186B3+1
jg	short loc_186AF
cmp	[bp-4],	ax
jbe	short near ptr loc_186B3+1
sub	al, al
jmp	loc_18755
;     ***************************************************************************
mov	al, 5
jmp	loc_18755
;     ***************************************************************************
nop
mov	bx, [bp-0Ah]
push	word ptr [bx+4]
call	loc_2580F+1
add	sp, 2
or	ax, ax
jnz	short near ptr loc_186F4+2
mov	al, [bp-1Ch]
push	ax
push	cs
call	loc_183B6
add	sp, 2
or	ax, ax
jz	short near ptr loc_186E6+3
push	cs
call	near ptr loc_184B0+2
or	ax, ax
jz	short near ptr loc_186E6+3
cmp	byte ptr [bp-0Ch], 0
jz	short near ptr loc_1867A+4
mov	bl, [bp-0Ch]
sub	bh, bh
mov	byte ptr [bx-4730h], 5
jmp	short near ptr loc_1875B+3
;     ***************************************************************************
nop
mov	bl, [bp-0Ch]
sub	bh, bh
mov	byte ptr [bx-4730h], 2
jmp	short near ptr loc_1875B+3
;     ***************************************************************************
mov	al, [bp-18h]
cmp	[bp-16h], al
jnb	short near ptr loc_18714+1
mov	al, [bp-8]
cmp	[bp-16h], al
ja	short near ptr loc_18714+1
jmp	near ptr loc_1867A+4
;     ***************************************************************************
push	word ptr [bp-6]
push	word ptr [bp-14h]
push	cs
call	near ptr unk_183A2
add	sp, 4
or	ax, ax
jz	short loc_1873E
mov	bx, [bp-0Ah]
push	word ptr [bx+4]
call	loc_2580F+1
add	sp, 2
cmp	ax, 1
sbb	al, al
and	al, 2
jmp	short locret_18753
;     ***************************************************************************
nop
mov	bx, [bp-0Ah]
push	word ptr [bx+4]
call	loc_2580F+1
add	sp, 2
cmp	ax, 1
sbb	al, al
and	al, 3
add	al, 2
mov	bl, [bp-0Ch]
sub	bh, bh
mov	[bx-4730h], al
mov	al, [bp-1Ch]
add	al, 2
mov	[bp-1Ch], al
mov	al, [bp-1Ah]
sub	al, 2
mov	[bp-1Ah], al
dec	byte ptr [bp-12h]
inc	byte ptr [bp-0Ch]
cmp	byte ptr [bp-0Ch], 2
jnb	short near ptr loc_1877C+1
jmp	near ptr unk_185AF
;     ***************************************************************************
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	bx, [bx-348Eh]
mov	ax, [bx]
mov	[bp-2],	ax
cmp	word ptr [bp+8], 0
jz	short loc_187B4
mov	ax, 0BDF6h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
jmp	short near ptr loc_187B7+2
;     ***************************************************************************
call	loc_24020+2
mov	ax, [bp-2]
add	ax, 1Ch
push	ax
mov	ax, 0BDF8h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 10h
push	di
push	si
mov	ax, 3BD6h
push	ax
mov	ax, 407h
push	ax
mov	cx, 8
push	cx
mov	dx, 1
push	dx
cmp	[bp+6],	dx
jnz	short loc_187F0
mov	ax, 1Eh
jmp	short loc_187F3
;     ***************************************************************************
mov	ax, 56h	; 'V'
mov	cx, ax
push	ax
mov	[bp-0Ah], ax
mov	[bp-0Ch], cx
cmp	[bp+6],	dx
jnz	short loc_18806
mov	ax, 3Fh	; '?'
jmp	short loc_18809
;     ***************************************************************************
mov	ax, 35h	; '5'
mov	cx, ax
push	ax
mov	si, ax
mov	di, cx
call	far ptr	0:1469h
add	sp, 0Ch
mov	ax, 7
push	ax
mov	cx, 18h
push	cx
mov	dx, 1
push	dx
mov	bx, [bp-0Ch]
add	bx, 8
push	bx
push	si
mov	[bp-0Eh], bx
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 3BE6h
push	ax
mov	ax, 407h
push	ax
mov	cx, 8
push	cx
mov	dx, 1
push	dx
mov	bx, [bp-0Ch]
add	bx, 20h	; ' '
push	bx
push	si
mov	si, bx
call	far ptr	0:1469h
add	sp, 0Ch
mov	ax, 7
push	ax
mov	cx, 28h	; '('
push	cx
mov	cx, 0Eh
push	cx
push	word ptr [bp-0Ah]
lea	cx, [di+1]
push	cx
mov	[bp-10h], cx
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 3BDEh
push	ax
mov	ax, 407h
push	ax
mov	cx, 8
push	cx
mov	dx, 1
push	dx
push	word ptr [bp-0Ah]
lea	bx, [di+0Fh]
push	bx
mov	di, bx
call	far ptr	0:1469h
add	sp, 0Ch
mov	ax, 7
push	ax
mov	ax, 18h
push	ax
mov	ax, 1
push	ax
push	word ptr [bp-0Eh]
push	di
call	far ptr	juqiang_draw_shape_to_video_buffer
add	sp, 0Ah
mov	ax, 3BEEh
push	ax
mov	ax, 407h
push	ax
mov	cx, 8
push	cx
mov	dx, 1
push	dx
push	si
push	di
call	far ptr	0:1469h
add	sp, 0Ch
cmp	word ptr [bp+6], 0
jz	short near ptr loc_188D4+2
mov	ax, 3BC6h
jmp	short loc_188D9
;     ***************************************************************************
nop
mov	ax, 3BF6h
push	ax
mov	ax, 407h
push	ax
mov	ax, 8
push	ax
mov	ax, 2
push	ax
cmp	word ptr [bp+6], 1
jnz	short loc_188F2
mov	ax, 32h	; '2'
jmp	short near ptr loc_188F2+3
;     ***************************************************************************
nop
mov	ax, 64h	; 'd'
push	ax
cmp	word ptr [bp+6], 1
jnz	short loc_18902
mov	ax, 3Dh	; '='
jmp	short near ptr loc_18902+3
;     ***************************************************************************
nop
mov	ax, 45h	; 'E'
push	ax
call	far ptr	0:1469h
add	sp, 0Ch
push	word ptr [bp-0Eh]
push	word ptr [bp-10h]
call	far ptr	3EFh:434h
add	sp, 4
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
cmp	word ptr loc_1BE03+1, 0
jz	short near ptr loc_18933+1
call	loc_23FF8+2
cmp	byte ptr [bp+0Ah], 1
jnz	short near ptr loc_1893F+1
mov	ax, 47h	; 'G'
jmp	short near ptr loc_18942+1
;     ***************************************************************************
nop
mov	ax, 35h	; '5'
mov	[bp-6],	ax
cmp	byte ptr [bp+0Ah], 1
jnz	short near ptr loc_18950+2
mov	ax, 56h	; 'V'
jmp	short loc_18955
;     ***************************************************************************
nop
mov	ax, 1Eh
mov	[bp-8],	ax
cmp	byte ptr [bp+0Ah], 2
jnz	short near ptr loc_18973+1
mov	bl, [bp+8]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	ax, [bx-348Ah]
jmp	short loc_18977
;     ***************************************************************************
nop
mov	ax, [bp+6]
mov	[bp-2],	ax
mov	bx, [bp+6]
push	word ptr [bx+1Ah]
push	word ptr [bp-8]
push	word ptr [bp-6]
call	far ptr	4B5h:6A4h
add	sp, 6
cmp	byte ptr [bp+0Ah], 1
jnz	short near ptr loc_18996+2
sub	ax, ax
jmp	short near ptr loc_1899A+1
;     ***************************************************************************
mov	ax, 1
push	ax
push	cs
call	loc_187CE
add	sp, 2
mov	ax, 0BE68h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
cmp	byte ptr [bp+0Ah], 1
jnz	short loc_189BA
mov	ax, 0BE71h
jmp	short near ptr loc_189BA+3
;     ***************************************************************************
mov	ax, 0BE75h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, [bp-2]
add	ax, 1Ch
push	ax
mov	bl, [bp+0Ah]
sub	bh, bh
shl	bx, 1
push	word ptr [bx-4186h]
call	far ptr	3EFh:6E8h
add	sp, 4
mov	al, 8
push	ax
call	far ptr	6EBh:4F0h
add	sp, 2
mov	al, 0Fh
push	ax
call	far ptr	57Ch:7Ch
mov	word ptr loc_1BE03+1, 0
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
cmp	word ptr [bp+0Ah], 0
jz	short near ptr loc_18A1F+2
push	word ptr [bp+6]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_18A1F+2
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp+6],	ax
cmp	byte ptr [bp+8], 1
jbe	short near ptr loc_18A3B+1
mov	al, [bp+8]
dec	al
mov	[bp-4],	al
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp+6],	ax
dec	byte ptr [bp-4]
jnz	short near ptr loc_18A2B+4
mov	ax, [bp+6]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 8
mov	byte ptr [bp-6], 0
mov	byte ptr [bp-8], 1
mov	bl, [bp-6]
sub	bh, bh
shl	bx, 1
mov	ax, [bx-4708h]
mov	[bp-2],	ax
mov	bl, [bp-8]
sub	bh, bh
shl	bx, 1
mov	cx, [bx-4708h]
push	cx
push	ax
call	far ptr	loc_2BAE1+1
add	sp, 4
or	ax, ax
jnz	short loc_18A98
push	word ptr [bp-2]
call	loc_233F3+1
add	sp, 2
or	ax, ax
jnz	short loc_18A98
dec	byte ptr [bp-8]
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 2
jb	short loc_18A52
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 0Ah
cmp	byte ptr [bp+6], 1
sbb	bx, bx
neg	bx
shl	bx, 1
mov	ax, [bx-4708h]
mov	[bp-8],	ax
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	ax, [bx-348Ah]
mov	[bp-6],	ax
cmp	word ptr [bp+8], 0
jz	short near ptr loc_18AED+1
mov	bx, [bp-8]
mov	al, [bx+5]
sub	ah, ah
add	ax, 13h
mov	bx, [bp-6]
mov	cl, [bx+5]
sub	ch, ch
cmp	ax, cx
jge	short near ptr loc_18AED+1
mov	ax, bx
jmp	short loc_18AF3
;     ***************************************************************************
mov	bx, [bp-6]
mov	ax, [bx]
mov	[bp-4],	ax
cmp	word ptr [bp+8], 1
jnz	short loc_18B16
mov	ax, 4Ah	; 'J'
push	ax
mov	bx, [bp-8]
mov	al, [bx+5]
sub	ah, ah
add	ax, 14h
push	ax
call	far ptr	561h:18Ah
add	sp, 4
jmp	short near ptr loc_18B16+2
;     ***************************************************************************
mov	al, 59h	; 'Y'
mov	[bp-0Ah], al
mov	byte ptr [bp-2], 0
cmp	word ptr [bp-4], 0
jz	short near ptr loc_18B6C+1
mov	al, [bp-2]
sub	ah, ah
push	ax
mov	al, [bp-0Ah]
push	ax
call	far ptr	561h:19Ch
add	sp, 4
mov	bx, [bp-4]
cmp	al, [bx+5]
jnb	short near ptr loc_18B5E+3
mov	ax, bx
mov	bl, [bp+6]
and	bx, 0FEh
sub	bh, bh
mov	[bx-4708h], ax
mov	bx, ax
mov	al, [bx+5]
mov	bl, [bp+6]
shr	bl, 1
sub	bh, bh
mov	[bx-4734h], al
mov	[bp-2],	al
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jnz	short loc_18B25
cmp	byte ptr [bp-2], 1
sbb	ax, ax
inc	ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 10h
mov	cl, 4
mov	bx, word ptr loc_1B8F6+2
mov	al, [bx+18h]
shr	al, cl
mov	[bp-4],	al
mov	al, [bx+18h]
and	al, 0Fh
mov	[bp-6],	al
mov	bx, word ptr loc_1B8FA
mov	al, [bx+18h]
mov	dx, ax
shr	al, cl
mov	[bp-8],	al
and	dl, 0Fh
mov	[bp-0Ah], dl
mov	cl, 2
push	cx
mov	[bp-0Eh], ax
mov	[bp-10h], dx
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
sub	ah, ah
mov	cx, ax
mov	al, [bp-10h]
add	ax, cx
mov	cl, [bp-6]
sub	ch, ch
add	ax, cx
cwd
sub	ax, dx
sar	ax, 1
push	ax
mov	al, 2
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
sub	ah, ah
mov	cx, ax
mov	al, [bp-0Eh]
add	ax, cx
mov	cl, [bp-4]
sub	ch, ch
add	ax, cx
cwd
sub	ax, dx
sar	ax, 1
push	ax
call	far ptr	loc_2C0A9+3
add	sp, 4
mov	al, byte ptr loc_1B8DB+1
push	ax
mov	al, byte ptr loc_1B8DB
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jnz	short loc_18C26
mov	al, 3
push	ax
mov	al, byte ptr loc_1B8DB+1
push	ax
mov	al, byte ptr loc_1B8DB
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jnz	short loc_18C26
jmp	loc_18CB6
;     ***************************************************************************
mov	byte ptr [bp-0Ch], 6
mov	al, byte ptr loc_1B8DB
mov	[bp-4],	al
mov	al, byte ptr loc_1B8DB+1
mov	[bp-6],	al
mov	al, [bp-0Ch]
dec	al
push	ax
lea	ax, [bp-6]
push	ax
lea	ax, [bp-4]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short loc_18C7B
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jnz	short loc_18C7B
mov	al, 3
push	ax
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jz	short near ptr loc_18C80+2
dec	byte ptr [bp-0Ch]
jnz	short near ptr loc_18C29+1
jmp	short near ptr unk_18C8C
;     ***************************************************************************
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
jmp	short near ptr unk_18CB0
;     ***************************************************************************
nop
push	word_1CA9A
call	far ptr	525h:64h
add	sp, 2
mov	bl, al
sub	bh, bh
mov	al, [bx-4180h]
mov	[bp-2],	al
mov	al, [bp-6]
and	al, 0Fh
push	ax
mov	cl, 4
mov	al, [bp-6]
shr	al, cl
push	ax
call	far ptr	loc_2C0A9+3
mov	sp, bp
pop	bp
retf

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

AAA		proc far

arg_0		= byte ptr  6

push	bp
mov	bp, sp
sub	sp, 4
call	loc_24020+2	; Function ABB
; ????
mov	ax, 0BEBAh
push	ax
call	far ptr	3EFh:6C0h ; Function ACC
add	sp, 2
cmp	[bp+arg_0], 1
jbe	short near ptr loc_18CE7+1
mov	ax, 0BEBFh
push	ax
call	far ptr	3EFh:6C0h ; Function ADD
add	sp, 2
mov	sp, bp
pop	bp
retf
AAA		endp

;     ***************************************************************************
nop
mov	byte ptr [bp-4], 0
cmp	byte ptr [bp-4], 0
jnz	short loc_18CFC
cmp	byte ptr [bp+6], 1
sbb	bx, bx
neg	bx
jmp	short near ptr loc_18CFF+2
;     ***************************************************************************
mov	bl, [bp+6]
sub	bh, bh
shl	bx, 1
mov	ax, [bx-4708h]
mov	bl, [bp-4]
sub	bh, bh
shl	bx, 1
push	word ptr [bx-411Eh]
add	ax, 1Ch
push	ax
mov	ax, 0BED0h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
cmp	byte ptr [bp-4], 0
jnz	short near ptr loc_18D4C+2
test	options_value, 1
jz	short near ptr loc_18D33+3
call	far ptr	57Ch:15Eh
jmp	short near ptr loc_18D41+1
;     ***************************************************************************
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
add	sp, 2
mov	ax, 0BEDFh
push	ax
call	far ptr	3EFh:6C0h
jmp	short near ptr loc_18D56+1
;     ***************************************************************************
nop
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
add	sp, 2
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 2
jb	short near ptr loc_18CEB+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 2
call	loc_23FF8+2
mov	ax, 0BEE6h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 2
mov	byte ptr [bp-2], 0
cmp	word ptr [bp+6], 0
jz	short near ptr loc_18DDA+2
mov	al, [bp-2]
mov	cl, 0Ah
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
add	ax, 5
mov	cl, 3
shl	ax, cl
push	ax
mov	ax, 35h	; '5'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	bx, [bp+6]
push	word ptr [bx+12h]
mov	al, [bx+5]
sub	ah, ah
push	ax
lea	ax, [bx+1Ch]
push	ax
mov	al, [bp-2]
sub	ah, ah
inc	ax
push	ax
mov	ax, 0BF0Ch
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Ah
inc	byte ptr [bp-2]
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp+6],	ax
or	ax, ax
jnz	short loc_18D89
mov	word ptr loc_1BE03+1, 1
mov	al, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
push	word ptr [bx-348Ah]
call	loc_238FA
mov	sp, bp
or	ax, ax
jz	short loc_18E2B
sub	ax, ax
push	ax
mov	al, [bp+6]
push	ax
push	cs
call	loc_18782
mov	sp, bp
mov	ax, 0BF23h
push	ax
call	far ptr	3EFh:6C0h
mov	sp, bp
mov	al, 0Ah
push	ax
call	far ptr	57Ch:7Ch
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Q_28E30		proc far

var_8		= byte ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  6

push	bp
mov	bp, sp
sub	sp, 8
mov	bl, [bp+arg_0]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	ax, [bx-348Ah]
mov	[bp+var_4], ax
push	ax
call	loc_238FA
add	sp, 2
or	ax, ax
jnz	short loc_18E60
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	[bp+var_4]
push	cs
call	loc_18D68
add	sp, 2
mov	[bp+var_8], al
sub	ax, ax
push	ax
mov	al, [bp+arg_0]
push	ax
push	cs
call	loc_18782
add	sp, 4
mov	al, [bp+var_8]
sub	ah, ah
push	ax
mov	ax, 1
push	ax
mov	ax, 0BF40h
push	ax
call	far ptr	3EFh:9B2h ; Q_82E30
add	sp, 6
mov	[bp+var_2], ax
cmp	ax, 0FFFFh
jz	short near ptr loc_18E57+2
sub	ax, ax
push	ax
mov	cl, byte ptr [bp+var_2]
push	cx
push	[bp+var_4]
push	cs
call	near ptr loc_189FA+4
add	sp, 6
mov	[bp+var_6], ax
call	loc_24020+2
mov	ax, [bp+var_6]
add	ax, 1Ch
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 0BF51h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:0A24h
or	ax, ax
jz	short loc_18E6D
mov	bx, [bp+var_6]
mov	ax, bx
mov	bl, [bp+arg_0]
and	bx, 0FEh
sub	bh, bh
mov	[bx-4708h], ax
mov	bx, ax
mov	al, [bx+5]
mov	bl, [bp+arg_0]
shr	bl, 1
sub	bh, bh
mov	[bx-4734h], al
call	loc_23FF8+2
mov	ax, 1
mov	sp, bp
pop	bp
retf
Q_28E30		endp

;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	byte ptr [bp-2], 0
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	bx, [bx-348Ah]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr loc_18F86+1
mov	bx, ax
cmp	byte ptr [bx+9], 4Fh ; 'O'
jbe	short near ptr loc_18F79+2
cmp	byte ptr [bx+5], 4Ah ; 'J'
jbe	short near ptr loc_18F79+2
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_18F79+2
mov	bx, [bp-4]
mov	al, [bp-2]
cmp	[bx+9],	al
jbe	short near ptr loc_18F79+2
mov	ax, bx
mov	bl, [bp+6]
and	bx, 0FEh
sub	bh, bh
mov	[bx-4708h], ax
mov	bx, ax
mov	al, [bx+5]
mov	cx, bx
mov	bl, [bp+6]
shr	bl, 1
sub	bh, bh
mov	[bx-4734h], al
mov	bx, cx
mov	al, [bx+9]
mov	[bp-2],	al
mov	bx, [bp-4]
mov	ax, [bx]
mov	[bp-4],	ax
or	ax, ax
jnz	short near ptr loc_18F27+3
cmp	byte ptr [bp-2], 1
sbb	ax, ax
inc	ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
push	word ptr [bp+8]
mov	al, [bp+6]
push	ax
push	cs
call	loc_18782
add	sp, 4
cmp	word ptr [bp+8], 1
jnz	short near ptr loc_18FAF+1
mov	bl, 1
jmp	short near ptr loc_18FB1+1
;     ***************************************************************************
sub	bl, bl
sub	bh, bh
shl	bx, 1
push	word ptr [bx-405Eh]
mov	bl, [bp+6]
and	bx, 0FEh
mov	ax, [bx-4708h]
add	ax, 1Ch
push	ax
mov	ax, 0BF95h
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
cmp	word ptr [bp+8], 1
jnz	short loc_18FE6
mov	al, 1
jmp	short near ptr loc_18FE7+1
;     ***************************************************************************
sub	al, al
mov	[bp-4],	al
mov	al, [bp+6]
sub	ah, ah
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 0CB72h
mov	[bp-2],	ax
mov	bx, ax
push	word ptr [bx+4]
call	loc_238FA
add	sp, 2
or	ax, ax
jnz	short near ptr loc_19013+1
jmp	near ptr loc_190DF+1
;     ***************************************************************************
mov	bx, [bp-2]
cmp	word ptr [bx+8], 0
jz	short loc_19020
jmp	near ptr loc_190DF+1
;     ***************************************************************************
call	loc_24020+2
mov	ax, 0BFD5h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
cmp	word ptr [bp+8], 0
jz	short near ptr loc_1905B+2
cmp	byte ptr [bp+6], 1
sbb	bx, bx
neg	bx
shl	bx, 1
mov	ax, [bx-4708h]
add	ax, 1Ch
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 0BFDEh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	al, [bp+6]
push	ax
push	cs
call	near ptr loc_18F03+1
add	sp, 2
or	ax, ax
jz	short near ptr loc_19098+2
push	word ptr [bp+8]
mov	al, [bp+6]
push	ax
push	cs
call	near ptr loc_18F90+2
add	sp, 4
mov	al, [bp-4]
push	ax
mov	al, [bp+6]
push	ax
mov	bl, al
and	bx, 0FEh
push	word ptr [bx-4708h]
push	cs
call	near ptr loc_1891E+4
add	sp, 6
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, [bp-4]
sub	ah, ah
shl	ax, 1
add	ax, 0C088h
mov	[bp-6],	ax
push	word ptr [bp+8]
mov	al, [bp+6]
push	ax
push	cs
call	loc_18782
add	sp, 4
mov	bx, [bp-6]
push	word ptr [bx]
call	far ptr	3EFh:6C0h
add	sp, 2
call	far ptr	3EFh:9D6h
or	ax, ax
jnz	short near ptr loc_190CD+1
jmp	near ptr unk_191BC
;     ***************************************************************************
mov	al, [bp+6]
push	ax
push	cs
call	near ptr loc_18E2E+2
add	sp, 2
or	ax, ax
jz	short loc_190A7
jmp	short locret_1907A
;     ***************************************************************************
nop
push	word ptr [bp+8]
mov	al, [bp+6]
push	ax
push	cs
call	loc_18AA0
add	sp, 4
or	ax, ax
jz	short loc_1916C
mov	al, [bp-4]
push	ax
mov	al, [bp+6]
push	ax
mov	bl, al
and	bx, 0FEh
push	word ptr [bx-4708h]
push	cs
call	near ptr loc_1891E+4
add	sp, 6
cmp	byte ptr [bp+6], 1
sbb	ax, ax
and	ax, 2
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 0CB72h
push	ax
call	loc_2391F+3
add	sp, 2
or	ax, ax
jz	short near ptr loc_1912F+2
jmp	near ptr loc_19090+3
;     ***************************************************************************
call	loc_24020+2
mov	bl, [bp+6]
and	bx, 0FEh
mov	ax, [bx-4708h]
add	ax, 1Ch
push	ax
mov	ax, 0C004h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
cmp	word ptr [bp+8], 0
jz	short near ptr loc_1915B+1
mov	ax, 0C014h
jmp	short near ptr loc_1915E+1
;     ***************************************************************************
mov	ax, 0C035h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
jmp	near ptr loc_19090+3
;     ***************************************************************************
nop
cmp	word ptr [bp+8], 0
jz	short near ptr unk_191BC
cmp	byte ptr [bp+6], 1
sbb	ax, ax
and	ax, 2
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 0CB72h
push	ax
call	loc_2391F+3
add	sp, 2
or	ax, ax
jnz	short near ptr unk_191BC
call	loc_24020+2
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	bx, [bx-348Eh]
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C056h
push	ax
call	far ptr	3EFh:6E8h
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
push	di
push	si
push	cs
call	near ptr loc_18B75+3
call	loc_23FF8+2
call	loc_24020+2
call	loc_24154
mov	byte ptr [bp-6], 0
mov	bl, [bp-6]
sub	bh, bh
mov	ax, bx
mov	cx, bx
shl	bx, 1
mov	si, ax
mov	di, [bx-4708h]
mov	[bp-2],	di
mov	dl, [di+18h]
mov	[si-4732h], dl
mov	dx, bx
mov	bl, [di+18h]
mov	di, ax
mov	cl, 4
mov	[bp-8],	bx
shr	bl, cl
sub	bh, bh
mov	cl, [bp-8]
and	cx, 0Fh
mov	si, cx
shl	si, 1
add	si, cx
shl	si, 1
shl	si, 1
add	si, cx
mov	[bx+si-4594h], bh
mov	cx, 7
push	cx
mov	si, di
mov	[bp-0Ah], dx
call	far ptr	3EFh:458h
add	sp, 2
mov	ax, [bp-2]
add	ax, 1Ch
push	ax
mov	bx, [bp-2]
push	word ptr [bx+1Ah]
push	si
call	unk_242F0
add	sp, 6
mov	cl, 4
shl	di, cl
add	di, 98h	; '  *'
push	di
mov	ax, 36h	; '6'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	bx, [bp-0Ah]
mov	ax, [bx-4708h]
add	ax, 1Ch
push	ax
push	word ptr [bx-3F12h]
mov	ax, 0C0A0h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
push	di
mov	ax, 49h	; 'I'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	bx, [bp-0Ah]
mov	bx, [bx-4708h]
mov	al, [bx+5]
sub	ah, ah
push	ax
mov	ax, 0C0AFh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
sub	ax, ax
push	ax
mov	bx, [bp-2]
mov	cl, [bx+18h]
mov	dx, cx
and	cl, 0Fh
push	cx
mov	cl, 4
shr	dl, cl
push	dx
call	far ptr	loc_2D9F0
add	sp, 6
sub	ax, ax
push	ax
mov	al, [bp-6]
push	ax
push	word ptr [bp-2]
call	far ptr	loc_2D6DB+3
add	sp, 6
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 2
jnb	short near ptr loc_192D8+1
jmp	near ptr unk_191E1
;     ***************************************************************************
mov	ax, 0C0BBh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 0C0CAh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 0C0E4h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
pop	si
pop	di
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Duel_Rnd_Calc	proc far

var_6		= byte ptr -6
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= byte ptr  6
arg_2		= byte ptr  8

; FUNCTION CHUNK AT 932A SIZE 0000002A BYTES

push	bp		; saves	the current base pointer
mov	bp, sp
sub	sp, 8		; moves	the stack pointer closer
; to E400 for calculations
push	si
mov	byte ptr [bp+var_2], 0FFh ; [E400]=01DE
mov	[bp+var_6], 0	; [E3FC]=E40A
cmp	[bp+var_6], 0	; [E3FC]=E400
jnz	short near ptr loc_1931D+1
mov	al, [bp+arg_0]	; [E408]=0013
; Def RND value
jmp	short near ptr loc_1931F+2
;     ***************************************************************************
mov	al, [bp+arg_2]
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */ ; game_math_get_random_number
add	sp, 2
mov	byte ptr [bp+var_4], al
mov	bl, [bp+var_6]
sub	bh, bh
cmp	[bx-4734h], al
ja	short near ptr loc_19346+1
cmp	byte ptr [bp+var_2], 0FFh
jnz	short near ptr loc_19341+1
mov	al, bl
jmp	short loc_19344
;     ***************************************************************************
mov	al, 2
mov	byte ptr [bp+var_2], al
mov	bl, [bp+var_6]
sub	bh, bh
mov	al, [bx-4734h]
sub	al, byte ptr [bp+var_4]
sbb	cl, cl
and	al, cl
add	al, byte ptr [bp+var_4]
sub	[bx-4734h], al
mov	cl, 4
mov	ax, bx
shl	bx, cl
add	bx, 98h	; '  *'
push	bx
mov	cx, 49h	; 'I'
push	cx
mov	si, ax
call	far ptr	3EFh:434h ; Function ABC
; dseg:4324
; ???? Data and	Memory changes
add	sp, 4
mov	al, [si-4734h]	; ds:[FFFFB8CC]
sub	ah, ah
push	ax
mov	ax, 0C0F2h
push	ax
call	far ptr	3EFh:6E8h ; call 05F0:0638 -> GHI
; dseg:45D8
; ????
add	sp, 4
inc	[bp+var_6]
cmp	[bp+var_6], 2	; Checks [E3FC]	= 2 to see if both def and att have
; been calculated
jnb	short near ptr loc_19393+3 ; Jumps forward if yes
jmp	near ptr unk_19313 ; Jumps back	to dseg:29322 if no
;     ***************************************************************************
mov	ax, 14h
push	ax
call	far ptr	57Ch:5Eh ; call	0201:005E -> Function_delay
; dseg:581E
; Delay	Wait before Output
add	sp, 2
mov	al, byte ptr [bp+var_2]
pop	si
mov	sp, bp
pop	bp
retf
Duel_Rnd_Calc	endp

;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Eh
push	di
push	si
push	cs
call	near ptr unk_191C2
mov	bx, word ptr loc_1B8F6+2
mov	al, [bx+18h]
mov	[bp-0Ah], al
mov	bx, word ptr loc_1B8FA
mov	al, [bx+18h]
mov	[bp-4],	al
mov	ax, 1
push	ax
mov	al, byte_1B8CD
sub	ah, ah
push	ax
mov	cl, byte ptr game_start_new_ruler_day_born
sub	ch, ch
push	cx
mov	si, ax
mov	di, cx
call	far ptr	561h:18Ah
add	sp, 4
push	si
push	di
mov	si, ax
call	far ptr	561h:19Ch
add	sp, 4
mov	cx, si
sub	al, cl
mov	cl, 5
sub	ah, ah
div	cl
sub	ah, ah
push	ax
call	far ptr	561h:19Ch
add	sp, 4
sub	al, 14h
neg	al
mov	[bp-6],	al
push	cs
call	loc_18A44
or	ax, ax
jz	short near ptr loc_19421+1
mov	al, byte ptr game_start_new_ruler_day_born
mov	cl, 0Ah
sub	ah, ah
div	cl
jmp	short near ptr loc_19431+1
;     ***************************************************************************
mov	al, byte ptr game_start_new_ruler_day_born
cmp	byte_1B8CD, al
ja	short loc_19430
mov	al, [bp-6]
jmp	short near ptr loc_19431+1
;     ***************************************************************************
mov	al, 14h
mov	[bp-2],	al
push	cs
call	loc_18A44
or	ax, ax
jz	short near ptr loc_19447+1
mov	al, byte_1B8CD
mov	cl, 0Ah
sub	ah, ah
div	cl
jmp	short near ptr loc_19458+1
;     ***************************************************************************
mov	al, byte ptr game_start_new_ruler_day_born
cmp	byte_1B8CD, al
jnb	short near ptr loc_19454+2
mov	al, 14h
jmp	short near ptr loc_19458+1
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************


Duel_Function	proc far
mov	al, [bp-6]
mov	[bp-1],	al
mov	word_13530, 2EEh
mov	word_13532, 2333h
mov	byte ptr [bp-0Eh], 0
mov	al, [bp-0Eh]	; Duel repeat function target
sub	ah, ah
inc	ax
push	ax
mov	ax, 0C0F6h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	al, [bp-4]
and	al, 0Fh
push	ax
mov	cl, 4
mov	al, [bp-4]
shr	al, cl
push	ax
mov	al, [bp-0Ah]
and	al, 0Fh
push	ax
mov	al, [bp-0Ah]
shr	al, cl
push	ax
call	loc_250F7+1	; 26AB:0658 -> Duel_Grfx_Flash
; dseg:250F8
; Duel Grfx flash between duelers
add	sp, 8
mov	al, [bp-1]
push	ax
mov	al, [bp-2]
push	ax
push	cs
call	near ptr loc_19303+1 ; call 00000B84 ->	Duel_Rnd_Calc
; dseg:29304
; Calculate rnd	for Def/Att and	reduce
add	sp, 4
mov	[bp-0Ch], al
cmp	al, 0FFh	; See if any fighter's War == 0
jnz	short near ptr loc_194BF+1 ; If	so, jump to ...
inc	byte ptr [bp-0Eh] ; Add	+1 to Round #
cmp	byte ptr [bp-0Eh], 0Ah ; Check to see if Duel Rounds are done
jb	short near ptr loc_1946B+1 ; Exit Criteria Met,	10 Rounds or Def/Att = 0
mov	ax, 1
push	ax
call	far ptr	57Ch:96h ; Function Duel_Win_Calc
; ???? Calculate Winner, etc.
add	sp, 2
mov	al, [bp-0Ch]
pop	si
pop	di
mov	sp, bp
pop	bp
retf
Duel_Function	endp

;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	si
cmp	byte ptr [bp+8], 1
sbb	bx, bx
neg	bx
shl	bx, 1
mov	ax, [bx-4708h]
mov	bx, [bp+6]
mov	cl, [bx+5]
mov	bx, ax
mov	al, [bx+5]
cmp	al, cl
jbe	short loc_1952D
sub	ah, ah
sub	ch, ch
add	ax, cx
inc	ax
cwd
sub	ax, dx
sar	ax, 1
mov	bx, [bp+6]
mov	[bx+5],	al
mov	si, cx
call	loc_24020+2
mov	bx, [bp+6]
mov	al, [bx+5]
sub	ah, ah
push	ax
push	si
lea	ax, [bx+1Ch]
push	ax
mov	ax, 0C10Ch
push	ax
call	far ptr	3EFh:6E8h
add	sp, 8
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	cl, 4
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
mov	bx, [bx-4708h]
mov	[bp-2],	bx
mov	dl, [bx+18h]
mov	[bp-8],	dx
shr	dl, cl
mov	[bp-4],	dl
mov	dl, [bp-8]
and	dl, 0Fh
mov	[bp-6],	dl
mov	si, ax
mov	al, [si-4732h]
mov	[bx+18h], al
mov	al, [bp+6]
shl	al, 1
push	ax
mov	al, [si-4732h]
mov	dx, ax
and	al, 0Fh
push	ax
shr	dl, cl
push	dx
call	far ptr	unk_225CE
add	sp, 6
mov	al, [bp-6]
sub	ah, ah
push	ax
mov	al, [bp-4]
push	ax
call	unk_24648
add	sp, 4
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short near ptr unk_195C1
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_237E9+1
add	sp, 4
push	ax
call	loc_24465+1
add	sp, 2
push	word ptr [bp-2]
call	loc_24465+1
add	sp, 2
mov	bl, [bp+6]
sub	bh, bh
shl	bx, 1
mov	word ptr [bx-4708h], 0
cmp	word ptr [bp+8], 0
jz	short loc_195ED
mov	al, [bp+6]
push	ax
push	word ptr [bp-2]
push	cs
call	loc_194D6
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	cl, 4
mov	bl, [bp+6]
sub	bh, bh
shl	bx, 1
mov	bx, [bx-4708h]
mov	[bp-2],	bx
mov	al, [bx+18h]
mov	dx, ax
shr	al, cl
mov	[bp-4],	al
and	dl, 0Fh
mov	[bp-6],	dl
mov	byte ptr [bx+18h], 0FFh
mov	al, [bp-6]
sub	ah, ah
push	ax
mov	al, [bp-4]
push	ax
call	unk_24648
add	sp, 4
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short near ptr loc_19659+2
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_237E9+1
add	sp, 4
push	ax
call	loc_24465+1
add	sp, 2
cmp	byte ptr [bp+6], 1
sbb	al, al
and	al, 0FDh
add	al, 4
push	ax
push	word ptr [bp-2]
call	loc_25149+1
add	sp, 4
cmp	byte ptr [bp+6], 1
sbb	al, al
and	al, 2
push	ax
push	word ptr [bp-2]
call	loc_25250
mov	bl, [bp+6]
sub	bh, bh
shl	bx, 1
mov	word ptr [bx-4708h], 0
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

XYZ		proc far

var_2		= byte ptr -2
arg_0		= byte ptr  6

push	bp
mov	bp, sp
sub	sp, 2
mov	al, [bp+arg_0]
push	ax
push	cs
call	near ptr loc_18CB6+4 ; Function	AAA
; ????
;
add	sp, 2
cmp	[bp+arg_0], 1
jbe	short loc_196CA
mov	[bp+var_2], 0
sub	ax, ax
push	ax
mov	al, [bp+var_2]
push	ax
push	cs
call	loc_19532
add	sp, 4
inc	[bp+var_2]
cmp	[bp+var_2], 2
jb	short loc_196AF
mov	sp, bp
pop	bp
retf
XYZ		endp

;     ***************************************************************************
mov	ax, 1
push	ax
cmp	byte ptr [bp+6], 1
sbb	al, al
neg	al
push	ax
push	cs
call	loc_19532
add	sp, 4
mov	al, [bp+6]
push	ax
push	cs
call	near ptr loc_195F1+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	si
call	loc_24020+2
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	si, [bx-348Eh]
mov	ax, [si]
add	ax, 1Ch
push	ax
mov	si, bx
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 0C14Fh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, [si-348Ah]
mov	[bp-2],	ax
or	ax, ax
jz	short near ptr aJ_0 ; "  *ʚJ"
mov	al, 5
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 5
mov	cx, ax
sub	ah, ah
push	ax
push	word ptr [bp-2]
mov	[bp-6],	cx
call	loc_235E0
add	sp, 4
mov	al, [bp-6]
push	ax
mov	bx, [bp-2]
mov	ax, [bx+12h]
sub	dx, dx
push	dx
push	ax
call	loc_22D4C
add	sp, 6
mov	bx, [bp-2]
mov	[bx+12h], ax
push	bx
call	loc_24465+1
add	sp, 2
mov	ax, 0Ah
push	ax
call	far ptr	57Ch:5Eh
add	sp, 2
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short loc_19730
mov	al, 0Ah
push	ax
call	far ptr	57Ch:7Ch
add	sp, 2
mov	al, 2
push	ax
mov	al, [bp+6]
push	ax
mov	bl, [bp+8]
and	bx, 0FEh
push	word ptr [bx-4708h]
push	cs
call	near ptr loc_1891E+4
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
sub	ax, ax
mov	word_13532, ax
mov	word_13530, ax
call	loc_23FF8+2
mov	byte ptr [bp-6], 0
sub	ax, ax
push	ax
mov	cl, [bp-6]
push	cx
push	cs
call	near ptr loc_18FD4+2
add	sp, 4
or	ax, ax
jnz	short loc_197EC
add	byte ptr [bp-6], 2
cmp	byte ptr [bp-6], 3
jb	short near ptr unk_197CD
jmp	short near ptr unk_19830
;     ***************************************************************************
nop
mov	ax, 1
push	ax
cmp	byte ptr [bp-6], 1
sbb	al, al
and	al, 2
mov	[bp-2],	al
push	ax
push	cs
call	near ptr loc_18FD4+2
add	sp, 4
or	ax, ax
jz	short locret_19816
push	cs
call	loc_193AA	; Entry	into Duel_Function
push	ax
push	cs
call	near ptr loc_19693+1 ; Function	XYZ
; ????
;
add	sp, 2
jmp	short near ptr unk_19830
;     ***************************************************************************
nop
mov	al, [bp-6]
push	ax
push	cs
call	loc_18DEA
add	sp, 2
mov	al, [bp-6]
push	ax
mov	al, [bp-2]
push	ax
push	cs
call	loc_196EA
add	sp, 4
cmp	byte ptr loc_1B8D2+3, 0FFh
jnz	short near ptr unk_1983C
call	loc_2438C
mov	word_13530, 2EEh
mov	word_13532, 2333h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ch
push	si
cmp	word ptr [bp+0Ch], 0
jnz	short near ptr unk_1985C
jmp	near ptr unk_1994E
;     ***************************************************************************
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jnz	short near ptr unk_198B0
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jnz	short near ptr unk_198B0
mov	al, [bp+6]
push	ax
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	far ptr	unk_225CE
add	sp, 6
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
push	word ptr [bp+8]
call	far ptr	loc_225B8
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	byte ptr [bp-0Ch], 0
mov	al, 6
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	[bp-0Ah], al
mov	al, byte ptr loc_1B8D7
mov	[bp-2],	al
mov	al, byte ptr loc_1B8D7+1
mov	[bp-4],	al
mov	al, [bp-0Ah]
push	ax
lea	ax, [bp-4]
push	ax
lea	ax, [bp-2]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr unk_19925
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jnz	short near ptr unk_19925
mov	al, 3
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jnz	short near ptr unk_19925
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jz	short near ptr unk_19930
inc	byte ptr [bp-0Ch]
cmp	byte ptr [bp-0Ch], 6
jb	short loc_198B4
jmp	short near ptr unk_1994E
;     ***************************************************************************
mov	al, [bp+6]
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	far ptr	unk_225CE
add	sp, 6
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
jmp	loc_1989F
;     ***************************************************************************
mov	al, [bp+0Ah]
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
mov	bl, al
mov	[bp-0Ah], bl
sub	bh, bh
cmp	byte ptr [bx-4704h], 0FFh
jz	short near ptr unk_1994E
mov	al, [bp+6]
push	ax
mov	al, [bx-4704h]
mov	cx, ax
and	al, 0Fh
push	ax
mov	al, 4
xchg	cl, al
shr	al, cl
push	ax
mov	si, bx
call	far ptr	unk_225CE
add	sp, 6
mov	al, [si-4704h]
mov	bx, [bp+8]
mov	[bx+18h], al
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short near ptr loc_199A5+1
mov	bx, [bp+8]
or	byte ptr [bx+2], 80h
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
mov	bx, [bp+8]
and	byte ptr [bx+2], 7Fh
sub	ax, ax
push	ax
mov	al, [bp+0Ah]
push	ax
push	bx
mov	al, [bp+6]
push	ax
push	cs
call	near ptr unk_1984C
mov	sp, bp
push	word ptr [bp+8]
call	loc_24465+1
mov	sp, bp
push	word ptr [bp+8]
call	far ptr	59Dh:700h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
mov	al, byte ptr loc_1B8D7+2
mov	byte ptr loc_1B8DB, al
mov	al, byte ptr loc_1B8DA
mov	byte ptr loc_1B8DB+1, al
sub	ax, ax
push	ax
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	far ptr	loc_2D9F0
add	sp, 6
cmp	word ptr [bp+8], 0
jz	short near ptr loc_19A3C+2
mov	bx, [bp+8]
mov	byte ptr [bx+17h], 0
mov	byte ptr [bx+18h], 0FFh
push	word ptr [bp+0Ah]
call	loc_2281E+2
add	sp, 2
or	al, al
jz	short near ptr loc_19A3C+2
push	ax
push	word ptr [bp+8]
mov	al, [bp+6]
push	ax
push	cs
call	near ptr loc_199AB+1
add	sp, 6
mov	bx, [bp+8]
mov	ax, [bx]
mov	[bp+8],	ax
or	ax, ax
jnz	short loc_19A09
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	si
push	word ptr [bp+6]
call	far ptr	525h:64h
add	sp, 2
inc	al
mov	[bp-2],	al
mov	byte ptr [bp-6], 0
mov	byte ptr [bp-4], 0
mov	al, [bp-6]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
shl	ax, 1
add	ax, cx
mov	[bp-8],	ax
mov	si, [bp-8]
mov	bl, [bp-4]
sub	bh, bh
mov	al, [bp-2]
cmp	[bx+si-44F8h], al
jz	short loc_19A9E
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 0Dh
jb	short loc_19A75
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 0Ch
jb	short loc_19A5D
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
mov	al, [bp-4]
mov	byte_1B8DF, al
mov	al, [bp-6]
mov	byte ptr word_1B8E0, al
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
push	word ptr [bp+0Ch]
push	cs
call	near ptr loc_19A41+1
add	sp, 2
mov	ax, [bp+6]
mov	[bp-6],	ax
push	ax
call	loc_23F02
add	sp, 2
push	word ptr [bp-6]
call	loc_23C55+1
add	sp, 2
mov	byte ptr [bp-2], 0
cmp	word ptr [bp-6], 0
jz	short loc_19B5C
mov	bx, [bp-6]
mov	byte ptr [bx+18h], 0FFh
mov	al, [bp+0Ah]
cmp	[bp-2],	al
jz	short loc_19B5C
push	word ptr [bp+0Ch]
push	word ptr [bp-6]
call	loc_23CFE+2
add	sp, 4
or	ax, ax
jz	short loc_19B56
push	word ptr [bp-6]
call	far ptr	59Dh:700h
add	sp, 2
mov	al, [bp+8]
push	ax
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
call	far ptr	unk_225CE
add	sp, 6
push	word ptr [bp-6]
call	loc_24465+1
add	sp, 2
mov	al, [bp-2]
push	ax
push	word ptr [bp-6]
call	loc_23C70+2
add	sp, 4
inc	byte ptr [bp-2]
mov	bx, [bp-6]
mov	ax, [bx]
mov	[bp-6],	ax
or	ax, ax
jz	short loc_19B56
push	ax
call	loc_23C55+1
add	sp, 2
cmp	word ptr [bp-6], 0
jnz	short near ptr loc_19AE3+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
nop
push	bp
mov	bp, sp
test	byte ptr [bp+8], 1
jnz	short near ptr loc_19BC2+2
push	word ptr [bp+6]
call	loc_238FA
mov	sp, bp
or	ax, ax
jz	short near ptr loc_19BC2+2
mov	bl, [bp+8]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
cmp	word ptr [bx-3486h], 0
jnz	short near ptr loc_19BC2+2
mov	ax, [bp+6]
cmp	word_1CAE5, ax
jz	short near ptr loc_19BC2+2
push	word ptr [bp+0Ch]
call	loc_23EA7+3
mov	sp, bp
push	word ptr [bp+0Ch]
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
push	word ptr [bp+6]
push	cs
call	near ptr loc_19AAE+2
mov	sp, bp
push	word ptr [bp+0Ch]
call	loc_23DF8
mov	sp, bp
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	word ptr [bp+0Ch]
push	word ptr [bp+6]
mov	al, [bp+8]
push	ax
push	cs
call	loc_199DE
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	bx, [bp+8]
cmp	byte ptr [bx+18h], 0FFh
jnz	short loc_19BE9
jmp	near ptr loc_19C8A+2
;     ***************************************************************************
or	bx, bx
jnz	short loc_19BF0
jmp	near ptr loc_19C8A+2
;     ***************************************************************************
mov	bx, [bp+6]
cmp	word ptr [bx+4], 0
jnz	short near ptr loc_19C0C+2
mov	bx, [bp+8]
mov	si, [bp+6]
mov	[si+4],	bx
mov	ax, [bx]
mov	[bp-2],	ax
mov	word ptr [bx], 0
jmp	short near ptr loc_19C2E+2
;     ***************************************************************************
nop
push	word ptr [bp+8]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_19C41
mov	bx, [bp+8]
mov	ax, [bx]
mov	[bp-2],	ax
mov	si, [bp+6]
mov	ax, [si+4]
mov	[bx], ax
mov	[si+4],	bx
mov	ax, [bp-2]
mov	[bp+8],	ax
mov	bl, [bp+0Ah]
and	bx, 0FEh
mov	[bx-3551h], ax
mov	bx, [bp+6]
push	word ptr [bx+4]
call	far ptr	59Dh:62h
add	sp, 2
mov	[bp-4],	ax
cmp	word ptr [bp+8], 0
jz	short near ptr loc_19C8A+2
mov	bx, [bp+8]
cmp	byte ptr [bx+18h], 0FFh
jz	short near ptr loc_19C8A+2
mov	ax, [bx]
mov	[bp-2],	ax
mov	bl, [bp+0Ah]
and	bx, 0FEh
mov	[bx-3551h], ax
mov	ax, [bp+8]
mov	bx, [bp-4]
mov	[bx], ax
mov	bx, ax
mov	word ptr [bx], 0
mov	[bp-4],	ax
mov	ax, [bp-2]
mov	[bp+8],	ax
or	ax, ax
jnz	short near ptr loc_19C56+2
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	bx, [bp+8]
cmp	byte ptr [bx+18h], 0FFh
jnz	short loc_19CA5
jmp	near ptr loc_19D95+2
;     ***************************************************************************
mov	bx, [bp+6]
cmp	word ptr [bx+4], 0
jnz	short near ptr loc_19CC1+1
mov	bx, [bp+8]
mov	si, [bp+6]
mov	[si+4],	bx
mov	ax, [bx]
mov	[bp-2],	ax
mov	word ptr [bx], 0
jmp	short near ptr loc_19CE3+1
;     ***************************************************************************
push	word ptr [bp+8]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_19D04
mov	bx, [bp+8]
mov	ax, [bx]
mov	[bp-2],	ax
mov	si, [bp+6]
mov	ax, [si+4]
mov	[bx], ax
mov	[si+4],	bx
mov	ax, [bp-2]
mov	[bp+8],	ax
mov	bl, [bp+0Ah]
and	bx, 0FEh
mov	cx, bx
shl	bx, 1
add	bx, cx
mov	cl, [bp+0Ch]
sub	ch, ch
add	bx, cx
shl	bx, 1
mov	[bx-3533h], ax
mov	bx, [bp+6]
push	word ptr [bx+4]
call	far ptr	59Dh:62h
add	sp, 2
mov	[bp-4],	ax
cmp	word ptr [bp+8], 0
jz	short near ptr loc_19D5C+2
mov	bx, [bp+8]
cmp	byte ptr [bx+18h], 0FFh
jz	short near ptr loc_19D95+2
mov	ax, [bx]
mov	[bp-2],	ax
mov	bl, [bp+0Ah]
and	bx, 0FEh
mov	cx, bx
shl	bx, 1
add	bx, cx
mov	cl, [bp+0Ch]
sub	ch, ch
add	bx, cx
shl	bx, 1
mov	[bx-3533h], ax
mov	ax, [bp+8]
mov	bx, [bp-4]
mov	[bx], ax
mov	bx, ax
mov	word ptr [bx], 0
mov	[bp-4],	ax
mov	ax, [bp-2]
mov	[bp+8],	ax
or	ax, ax
jnz	short near ptr loc_19D1A+1
mov	bl, [bp+0Ah]
and	bx, 0FEh
mov	ax, bx
shl	bx, 1
add	bx, ax
mov	al, [bp+0Ch]
sub	ah, ah
add	bx, ax
shl	bx, 1
cmp	word ptr [bx-3533h], 0
jnz	short near ptr loc_19D95+2
mov	bl, [bp+0Ah]
and	bx, 0FEh
mov	ax, bx
shl	bx, 1
add	bx, ax
mov	al, [bp+0Ch]
sub	ah, ah
add	bx, ax
shl	bx, 1
mov	word ptr [bx-354Bh], 0
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, 9
push	ax
call	far ptr	6EBh:4F0h
add	sp, 2
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 12h
push	si
mov	word ptr [bp-4], 0
mov	al, [bp+6]
sub	ah, ah
mov	dx, ax
mov	cx, ax
shl	ax, 1
shl	ax, 1
add	ax, cx
shl	ax, 1
add	ax, 0CB72h
mov	[bp-6],	ax
mov	word ptr [bp-0Ch], 0CAA1h
mov	si, dx
call	far ptr	525h:17Eh
sub	al, al
mov	[bp-8],	al
mov	[bp-0Ah], al
and	si, 0FFFEh
mov	ax, si
shl	si, 1
add	si, ax
mov	[bp-12h], si
mov	bl, [bp-8]
sub	bh, bh
mov	si, [bx-3572h]
and	si, 0FFh
add	si, [bp-12h]
shl	si, 1
mov	bx, [bp-0Ch]
mov	ax, [bx+si+14h]
mov	[bp-0Eh], ax
or	ax, ax
jnz	short loc_19E0D
jmp	near ptr loc_19EB5+1
;     ***************************************************************************
cmp	byte ptr [bp-0Ah], 0
jnz	short loc_19E32
cmp	byte ptr word_1B8E0+1, 1
jnz	short loc_19E32
call	loc_24020+2
mov	ax, 0C166h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
push	cs
call	loc_19D9C
inc	byte ptr [bp-0Ah]
mov	bl, [bp-8]
sub	bh, bh
mov	si, [bx-3572h]
and	si, 0FFh
mov	al, [bp+6]
and	ax, 0FEh
mov	cx, ax
shl	ax, 1
add	ax, cx
add	si, ax
shl	si, 1
mov	ax, bx
mov	bx, [bp-0Ch]
mov	cx, [bx+si+2Ch]
mov	[bp-2],	cx
push	word ptr [bp-0Eh]
push	word ptr [bp-0Eh]
mov	si, ax
call	loc_2281E+2
add	sp, 2
push	ax
mov	al, [bp+6]
push	ax
push	word ptr [bp-2]
push	cs
call	near ptr loc_19B61+1
add	sp, 8
mov	al, [si-3572h]
push	ax
mov	al, [bp+6]
push	ax
push	word ptr [bp-2]
push	word ptr [bp-6]
push	cs
call	near ptr loc_19C90+2
add	sp, 8
push	word ptr [bp-2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_19EAF+2
mov	bx, [bp-2]
cmp	byte ptr [bx+18h], 0FFh
jz	short near ptr loc_19EAF+2
push	word ptr [bx]
call	loc_24465+1
add	sp, 2
mov	word ptr [bp-4], 1
inc	byte ptr [bp-8]
cmp	byte ptr [bp-8], 6
jnb	short near ptr loc_19EC0+2
jmp	loc_19DEB
;     ***************************************************************************
mov	ax, [bp-4]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
add	bx, 0CB72h
mov	[bp-8],	bx
push	word ptr [bx+2]
call	loc_2281E+2
add	sp, 2
mov	[bp-0Ah], al
mov	ax, word_1CAE5
mov	[bp-2],	ax
mov	al, byte ptr word_1B8E0+1
cmp	[bp+8],	al
jbe	short loc_19F05
jmp	near ptr unk_19FE2
;     ***************************************************************************
mov	ax, 0C182h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
cmp	byte ptr [bp+6], 1
jnz	short near ptr loc_19F7C+1
cmp	word ptr [bp-2], 0
jz	short near ptr loc_19F7C+1
cmp	byte ptr [bp-0Ah], 0
jz	short near ptr loc_19F7C+1
call	loc_24020+2
mov	ax, [bp-2]
add	ax, 1Ch
push	ax
cmp	word ptr [bp+0Ah], 0
jnz	short near ptr loc_19F39+1
mov	ax, 0C18Bh
jmp	short loc_19F3D
;     ***************************************************************************
mov	ax, 0C1ABh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
push	cs
call	loc_19D9C
mov	bx, [bp-8]
push	word ptr [bx+2]
mov	al, [bp-0Ah]
push	ax
sub	al, al
push	ax
push	word ptr [bp-2]
push	cs
call	near ptr loc_19B61+1
add	sp, 8
push	word ptr loc_1CB76
call	far ptr	59Dh:62h
add	sp, 2
mov	bx, ax
mov	ax, [bp-2]
mov	[bx], ax
mov	bx, ax
sub	ax, ax
mov	[bx], ax
mov	word_1CAE5, ax
cmp	byte ptr [bp+6], 3
jnz	short loc_19FB1
cmp	byte ptr [bp-0Ah], 0
jz	short loc_19FB1
call	loc_24020+2
mov	bx, [bp-8]
mov	bx, [bx]
mov	ax, [bx]
add	ax, 1Ch
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 0C1CFh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
push	cs
call	loc_19D9C
mov	bx, [bp-8]
push	word ptr [bx+2]
mov	al, [bp-0Ah]
push	ax
mov	al, [bp+6]
push	ax
push	word ptr [bp+0Ah]
push	cs
call	near ptr loc_19B61+1
add	sp, 8
mov	al, [bp+6]
push	ax
push	word ptr [bp+0Ah]
push	word ptr [bp-8]
push	cs
call	loc_19BD6
add	sp, 6
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
push	si
mov	word ptr [bp-4], 0
mov	word ptr [bp-8], 0CAA1h
mov	byte ptr [bp-6], 0
mov	al, [bp-6]
push	ax
call	loc_23174
add	sp, 2
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_1A01D+1
cmp	byte ptr [bp-6], 1
jnz	short near ptr loc_1A060+1
mov	bx, [bp-8]
cmp	[bx+44h], ax
jz	short near ptr loc_1A060+1
mov	al, [bp-6]
sub	ah, ah
or	ax, ax
jz	short near ptr loc_1A02E+4
dec	ax
jz	short near ptr loc_1A03E+2
dec	ax
jz	short near ptr loc_1A02E+4
dec	ax
jz	short near ptr loc_1A03E+2
jmp	short near ptr loc_1A060+1
;     ***************************************************************************
mov	al, [bp-6]
push	ax
push	cs
call	loc_19DA8
add	sp, 2
jmp	short near ptr loc_1A05B+3
;     ***************************************************************************
nop
push	word ptr [bp-2]
mov	al, [bp-6]
shr	al, 1
sub	ah, ah
mov	si, ax
mov	bx, [bp-8]
mov	al, [bx+si+12h]
push	ax
mov	al, [bp-6]
push	ax
push	cs
call	near ptr loc_19EC9+1
add	sp, 6
mov	[bp-4],	ax
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 4
jb	short near ptr loc_19FFB+2
cmp	word ptr [bp-4], 0
jz	short loc_1A075
call	loc_2438C
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	cl, 4
mov	bx, word ptr loc_1B8E3+3
mov	al, [bx+18h]
mov	dx, ax
shr	al, cl
mov	[bp-8],	al
and	dl, 0Fh
mov	[bp-0Ah], dl
mov	al, [bp+6]
and	al, 3
cmp	al, 1
sbb	al, al
neg	al
mov	[bp-4],	al
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
call	loc_237E9+1
add	sp, 4
or	ax, ax
jz	short near ptr unk_1A12A
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
mov	al, [bp-0Ah]
push	ax
mov	al, [bp-8]
push	ax
call	loc_239D5+1
add	sp, 8
or	ax, ax
jnz	short near ptr unk_1A12A
mov	ax, 1
push	ax
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
mov	al, [bp-0Ah]
push	ax
mov	al, [bp-8]
push	ax
call	loc_23B7A+4
add	sp, 0Ah
or	ax, ax
jnz	short near ptr unk_1A122
mov	bl, [bp-4]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-355Fh], 0Ah
jnb	short near ptr unk_1A116
call	loc_24020+2
mov	ax, 0C1E3h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
jmp	short near ptr unk_1A12A
;     ***************************************************************************
nop
mov	bl, [bp-4]
sub	bh, bh
shl	bx, 1
sub	word ptr [bx-355Fh], 0Ah
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	al, byte ptr word_1B8E0
push	ax
mov	al, byte_1B8DF
push	ax
call	loc_237E9+1
add	sp, 4
mov	bx, ax
mov	[bp-2],	bx
mov	al, [bx+16h]
mov	[bp-8],	al
push	bx
call	far ptr	525h:0EEh
add	sp, 2
mov	[bp-4],	al
call	loc_23FF8+2
mov	bx, [bp-2]
push	word ptr [bx+1Ah]
mov	ax, 24h	; '$'
push	ax
mov	ax, 36h	; '6'
push	ax
call	far ptr	4B5h:6A4h
add	sp, 6
mov	ax, [bp-2]
add	ax, 1Ch
push	ax
mov	ax, 0C21Eh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	bx, [bp-2]
mov	al, [bx+19h]
sub	ah, ah
sub	ax, year_value
neg	ax
inc	ax
push	ax
mov	ax, 0C230h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
push	word ptr [bp-2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short loc_1A1C6
mov	ax, 0C247h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
jmp	short loc_1A1FB
;     ***************************************************************************
nop
push	word ptr [bp-2]
call	loc_24448+2
add	sp, 2
or	ax, ax
jz	short near ptr loc_1A1D9+1
mov	ax, 0C258h
jmp	short near ptr loc_1A1DB+2
;     ***************************************************************************
mov	ax, 0C262h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	bx, [bp-2]
mov	al, [bx+0Bh]
sub	ah, ah
push	ax
mov	ax, 0C26Ah
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	byte ptr [bp-6], 0
mov	cl, 3
mov	al, [bp-6]
sub	ah, ah
mov	dx, ax
add	ax, 7
shl	ax, cl
push	ax
mov	ax, 43h	; 'C'
push	ax
mov	si, dx
call	far ptr	3EFh:434h
add	sp, 4
shl	si, 1
push	word ptr [si-3D52h]
mov	ax, 0C276h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 7
jb	short near ptr loc_1A1FB+4
mov	bx, [bp-2]
push	word ptr [bx+12h]
mov	ax, 0C279h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	al, [bp-8]
sub	ah, ah
push	ax
mov	ax, 0C285h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	al, [bp-4]
sub	ah, ah
push	ax
mov	ax, 0C28Dh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	bx, [bp-2]
mov	al, [bx+4]
sub	ah, ah
push	ax
mov	ax, 0C295h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	bx, [bp-2]
mov	al, [bx+5]
sub	ah, ah
push	ax
mov	ax, 0C29Dh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
mov	bx, [bp-2]
mov	al, [bx+6]
sub	ah, ah
push	ax
mov	ax, 0C2A5h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
call	loc_24020+2
mov	ax, 0C2BCh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	word ptr [bp-2], 0
jmp	short loc_1A31E
;     ***************************************************************************
nop
jg	short loc_1A2DC
sub	ax, 0Dh
jz	short near ptr loc_1A341+3
jmp	short loc_1A2EE
;     ***************************************************************************
nop
sub	ax, 31h	; '1'
jl	short loc_1A2EE
dec	ax
dec	ax
jle	short near ptr loc_1A323+1
sub	ax, 4
jl	short loc_1A2EE
dec	ax
dec	ax
jle	short near ptr loc_1A33A+2
call	far ptr	3EFh:79Ah
mov	[bp-4],	al
sub	ah, ah
cmp	ax, 30h	; '0'
jnz	short near ptr unk_1A2D2
push	word ptr loc_1B8E3+3
call	loc_23834
add	sp, 2
push	ax
push	cs
call	near ptr loc_1A076+4
add	sp, 2
or	ax, ax
jz	short loc_1A31E
push	cs
call	locret_1A130
mov	word ptr [bp-2], 1
push	cs
call	near ptr loc_1A2B1+1
jmp	short loc_1A2EE
;     ***************************************************************************
mov	al, [bp-4]
sub	al, 31h	; '1'
push	ax
mov	ax, 0B8E0h
push	ax
mov	ax, 0B8DFh
push	ax
call	loc_23BE9+1
add	sp, 6
jmp	short loc_1A2EE
;     ***************************************************************************
mov	al, [bp-4]
sub	al, 34h	; '4'
jmp	short near ptr loc_1A328+1
;     ***************************************************************************
nop
cmp	word ptr [bp-2], 0
jz	short near ptr loc_1A34D+2
call	loc_2438C
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 6
mov	word ptr [bp-4], 0CB72h
mov	bx, word_1CB74
mov	ax, [bx+2]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_1A36F+1
jmp	loc_1A45C
;     ***************************************************************************
push	ax
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1A386+1
mov	bx, [bp-2]
cmp	word ptr [bx+12h], 7D0h
jb	short near ptr loc_1A3B5+1
mov	bx, [bp-4]
push	word ptr [bx+2]
call	loc_2281E+2
add	sp, 2
mov	[bp-6],	al
push	word ptr [bp-2]
call	far ptr	542h:7Eh
add	sp, 2
or	ax, ax
jz	short near ptr loc_1A3AC+1
cmp	byte ptr [bp-6], 0
jnz	short near ptr loc_1A3C5+1
cmp	byte ptr [bp-6], 0
jnz	short near ptr loc_1A3B5+1
jmp	loc_1A45C
;     ***************************************************************************
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_1A36F+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
mov	al, 7
push	ax
call	far ptr	loc_2C3B1+1
add	sp, 2
mov	bx, word ptr loc_1B8E3+3
cmp	word ptr [bx], 0
jnz	short near ptr loc_1A3EE+1
push	word ptr [bp-2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1A3EE+1
mov	ax, [bp-2]
mov	word ptr loc_1B8E8, ax
push	word ptr [bp-2]
mov	bx, [bp-4]
push	word ptr [bx+2]
call	loc_24AA6
add	sp, 4
push	word ptr [bp-2]
mov	bx, [bp-4]
push	word ptr [bx+4]
call	loc_24AE4
add	sp, 4
mov	bx, [bp-2]
and	byte ptr [bx+2], 7Fh
mov	ax, 1
push	ax
mov	al, [bp-6]
push	ax
push	bx
sub	al, al
push	ax
push	cs
call	near ptr unk_1984C
add	sp, 8
push	word ptr [bp-2]
call	loc_24465+1
add	sp, 2
push	word ptr [bp-2]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jz	short near ptr loc_1A451+1
mov	bx, [bp-2]
push	word ptr [bx]
call	loc_24465+1
add	sp, 2
call	loc_2417A+2
call	loc_241BA
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
push	word ptr loc_1B8E3+3
call	loc_23834
add	sp, 2
mov	[bp-0Ah], al
and	al, 1
cmp	al, 1
sbb	bx, bx
neg	bx
shl	bx, 1
mov	ax, [bx-355Fh]
mov	[bp-6],	ax
push	word ptr loc_1B8E3+3
push	word ptr loc_1B8E3+1
call	far ptr	loc_2BAE1+1
add	sp, 4
or	ax, ax
jnz	short near ptr loc_1A4C5+1
push	word ptr loc_1B8E3+1
call	loc_233F3+1
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1A4C5+1
cmp	word ptr [bp-6], 64h ; 'd'
jbe	short loc_1A4B6
mov	ax, 64h	; 'd'
jmp	short near ptr loc_1A4BF+2
;     ***************************************************************************
nop
push	word ptr [bp-6]
call	far ptr	49Ch:178h
add	sp, 2
mov	[bp-2],	ax
jmp	short near ptr loc_1A4CA+1
;     ***************************************************************************
mov	word ptr [bp-2], 0
push	word ptr [bp-2]
push	word ptr loc_1B8E3+1
call	loc_23400+2
add	sp, 4
mov	[bp-4],	al
cmp	al, 2
jnb	short loc_1A542
push	word ptr loc_1B8E3+1
call	loc_254AA+4
add	sp, 2
mov	al, [bp-4]
push	ax
push	word ptr loc_1B8E3+1
call	loc_23459+1
add	sp, 4
push	word ptr loc_1B8E3+3
push	word ptr loc_1B8E3+1
call	far ptr	loc_2BAE1+1
add	sp, 4
or	ax, ax
jz	short near ptr unk_1A516
mov	al, 64h	; 'd'
jmp	short near ptr unk_1A523
;     ***************************************************************************
nop
mov	al, 14h
push	ax
call	far ptr	57Ch:0FAh/* game_math_get_random_number */
add	sp, 2
add	al, 50h	; 'P'
push	ax
mov	bx, word ptr loc_1B8E3+3
mov	al, [bx+0Ah]
push	ax
push	word ptr loc_1B8E3+1
call	loc_25446
add	sp, 6
call	loc_2417A+2
call	loc_241BA
mov	ax, [bp-2]
mov	cl, [bp-0Ah]
and	cl, 1
cmp	cl, 1
sbb	bx, bx
neg	bx
shl	bx, 1
sub	[bx-355Fh], ax
call	loc_24239+3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
push	bp
mov	bp, sp
sub	sp, 4
call	far ptr	525h:17Eh
mov	byte ptr [bp-2], 0
mov	bl, [bp-2]
sub	bh, bh
mov	al, [bx-3572h]
mov	[bp-4],	al
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	far ptr	loc_2C0A9+3
add	sp, 4
mov	al, [bp-4]
push	ax
mov	ax, 0B8DCh
push	ax
mov	ax, 0B8DBh
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr unk_1A5D9
mov	al, byte ptr loc_1B8DB+1
push	ax
mov	al, byte ptr loc_1B8DB
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short near ptr unk_1A5D9
mov	ax, 1
push	ax
mov	al, byte ptr loc_1B8DB+1
push	ax
mov	al, byte ptr loc_1B8DB
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_23B7A+4
add	sp, 0Ah
or	ax, ax
jz	short near ptr unk_1A5E4
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 6
jb	short near ptr unk_1A571
jmp	short near ptr Q_A5EC
;     ***************************************************************************
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Eh
call	far ptr	525h:17Eh
mov	byte ptr [bp-0Ah], 0
mov	al, [bp+6]
mov	[bp-6],	al
mov	al, [bp+8]
mov	[bp-8],	al
mov	bl, [bp-0Ah]
sub	bh, bh
mov	al, [bx-3572h]
push	ax
lea	ax, [bp-8]
push	ax
lea	ax, [bp-6]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jnz	short near ptr loc_1A62D+1
jmp	near ptr loc_1A6AF+1
;     ***************************************************************************
mov	byte ptr [bp-0Ch], 0
mov	al, [bp-6]
mov	[bp-2],	al
mov	al, [bp-8]
mov	[bp-4],	al
mov	bl, [bp-0Ch]
sub	bh, bh
mov	al, [bx-3572h]
push	ax
lea	ax, [bp-4]
push	ax
lea	ax, [bp-2]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short loc_1A6A7
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short loc_1A6A7
mov	al, 1
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jnz	short loc_1A6A7
mov	ax, 1
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_23B7A+4
add	sp, 0Ah
or	ax, ax
jz	short near ptr loc_1A6BD+1
inc	byte ptr [bp-0Ch]
cmp	byte ptr [bp-0Ch], 6
jb	short near ptr loc_1A630+2
inc	byte ptr [bp-0Ah]
cmp	byte ptr [bp-0Ah], 6
jnb	short near ptr loc_1A6BB+1
jmp	near ptr loc_1A600+1
;     ***************************************************************************
jmp	short loc_1A6D6
;     ***************************************************************************
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	far ptr	loc_2C0A9+3
add	sp, 4
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
nop
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	bx, [bx-348Ah]
mov	al, [bx+18h]
mov	[bp-2],	al
push	bx
mov	si, bx
call	loc_23702
add	sp, 2
mov	cx, ax
mov	ax, [si+12h]
mov	bx, 32h	; '2'
sub	dx, dx
div	bx
add	cx, ax
mov	[bp-6],	cx
cmp	word ptr [bp+8], 0
jz	short near ptr unk_1A73C
push	word ptr [bp+8]
call	loc_23702
add	sp, 2
mov	bx, [bp+8]
mov	cx, ax
mov	ax, [bx+12h]
mov	bx, 32h	; '2'
sub	dx, dx
div	bx
add	ax, cx
jmp	short loc_1A73F
;     ***************************************************************************
db  8Bh	;   *
db 0C1h	;   *
db  40h	; @
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db 0B0h	;   *
db    6
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  24h	; $
db  0Fh
db  50h	; P
db 0B1h	;   *
db    4
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db 0D2h	;   *
db 0E8h	;   *
db  50h	; P
db  9Ah	;   *
db    4
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  75h	; u
db  11h
db  8Bh	;   *
db  46h	; F
db 0FAh	;   *
db  39h	; 9
db  46h	; F
db 0FCh	;   *
db  7Eh	; ~
db    9
db 0B8h	;   *
db    1
db    0
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jnz	short loc_1A7C0
mov	al, 6
push	ax
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
call	far ptr	loc_2C3F4
add	sp, 6
or	ax, ax
jz	short loc_1A7C0
mov	bx, [bp+6]
cmp	byte ptr [bx+17h], 2
ja	short loc_1A7B8
cmp	byte ptr [bx+16h], 14h
jbe	short loc_1A7C0
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
cmp	word ptr [bp+6], 0
jz	short loc_1A810
mov	bx, [bp+6]
mov	al, [bx+18h]
mov	cx, ax
and	al, 0Fh
push	ax
mov	al, 4
xchg	cl, al
shr	al, cl
push	ax
push	bx
push	cs
call	loc_1A778
add	sp, 6
or	ax, ax
jz	short near ptr unk_1A7FA
mov	bx, [bp+6]
cmp	word ptr [bx+12h], 1388h
ja	short loc_1A808
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp+6],	ax
or	ax, ax
jnz	short near ptr unk_1A7D2
jmp	short loc_1A810
;     ***************************************************************************
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	far ptr	loc_2C0A9+3
add	sp, 4
cmp	byte_1B8D1, 1
jnz	short loc_1A8AA
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
push	word ptr [bp+6]
push	cs
call	loc_1A778
add	sp, 6
or	ax, ax
jz	short loc_1A860
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jnz	short loc_1A860
jmp	loc_1A945
;     ***************************************************************************
db  8Bh	;   *
db  1Eh
db  8Ah	;   *
db 0CBh	;   *
db  8Ah	;   *
db  47h	; G
db  18h
db  8Bh	;   *
db 0C8h	;   *
db  24h	; $
db  0Fh
db  50h	; P
db 0B0h	;   *
db    4
db  86h	;   *
db 0C8h	;   *
db 0D2h	;   *
db 0E8h	;   *
db  50h	; P
db  9Ah	;   *
db 0ACh	;   *
db    2
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    4
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  50h	; P
db 0A0h	;   *
db 0DCh	;   *
db 0B8h	;   *
db  50h	; P
db 0A0h	;   *
db 0DBh	;   *
db 0B8h	;   *
db  50h	; P
db  9Ah	;   *
db  8Ch	;   *
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    8
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db 0AEh	;   *
db    0
db 0A0h	;   *
db 0DCh	;   *
db 0B8h	;   *
db  50h	; P
db 0A0h	;   *
db 0DBh	;   *
db 0B8h	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db 0BFh	;   *
db 0FCh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db 0A0h	;   *
db 0D8h	;   *
db 0B8h	;   *
db  50h	; P
db 0A0h	;   *
db 0D7h	;   *
db 0B8h	;   *
db  50h	; P
db  9Ah	;   *
db 0BAh	;   *
db    4
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  50h	; P
db  2Ah	; *
db 0C0h	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db  1Ah
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  31h	; 1
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db 0FFh
db  76h	; v
db    6
db  0Eh
db 0E8h	;   *
db 0A0h	;   *
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  75h	; u
db  1Bh
db  8Bh	;   *
db  1Eh
db  76h	; v
db 0CBh	;   *
db  8Ah	;   *
db  47h	; G
db  18h
db  8Bh	;   *
db 0C8h	;   *
db  24h	; $
db  0Fh
db  50h	; P
db 0B0h	;   *
db    4
db  86h	;   *
db 0C8h	;   *
db 0D2h	;   *
db 0E8h	;   *
db  50h	; P
db  9Ah	;   *
db 0ACh	;   *
db    2
db 0E0h	;   *
db  2Bh	; +
db 0EBh	;   *
db 0AAh	;   *
db  90h	;   *
db 0B0h	;   *
db    6
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db 0F4h	;   *
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  34h	; 4
db  9Ah	;   *
db  34h	; 4
db    5
db  72h	; r
db  2Bh	; +
db  0Bh
db 0C0h	;   *
db  74h	; t
db  2Bh	; +
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db  44h	; D
db    2
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  17h
db 0B0h	;   *
db  28h	; (
db  50h	; P
db  9Ah	;   *
db 0DCh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db    8
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0BEh	;   *
db    5
db  72h	; r
db  2Bh	; +
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	si
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	far ptr	loc_2C0A9+3
add	sp, 4
mov	bx, word ptr loc_1CB8A
mov	[bp-4],	bx
mov	al, [bx+18h]
mov	[bp-2],	al
push	word ptr [bp+6]
call	loc_24448+2
add	sp, 2
or	ax, ax
jz	short near ptr loc_1A9C9+1
mov	bx, [bp+6]
cmp	word ptr [bx+12h], 7D0h
jnb	short near ptr loc_1A9C9+1
mov	ax, 1
push	ax
sub	ax, ax
push	ax
mov	cl, [bp+0Ah]
push	cx
mov	cl, [bp+8]
push	cx
call	loc_238BB+1
add	sp, 8
or	ax, ax
jz	short near ptr loc_1A9C9+1
mov	bx, [bp+6]
push	word ptr [bx]
push	cs
call	loc_1A7C6
add	sp, 2
or	ax, ax
jz	short near ptr loc_1A9C9+1
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
push	word ptr [bp+6]
call	loc_2B828
add	sp, 6
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db 0B0h	;   *
db    6
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db    4
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db  75h	; u
db    1
db 0A0h	;   *
db 0D8h	;   *
db 0B8h	;   *
db  50h	; P
db 0A0h	;   *
db 0D7h	;   *
db 0B8h	;   *
db  50h	; P
db  9Ah	;   *
db 0F8h	;   *
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  75h	; u
db  1Ah
db 0B0h	;   *
db    6
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db 0F4h	;   *
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db  47h	; G
db    1
db 0B0h	;   *
db    6
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db 0F4h	;   *
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  75h	; u
db  1Eh
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db  81h	;   *
db  7Fh	; 
db  12h
db 0D0h	;   *
db    7
db  73h	; s
db  14h
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  76h	; v
db 0FCh	;   *
db  8Bh	;   *
db  44h	; D
db  12h
db  39h	; 9
db  47h	; G
db  12h
db  76h	; v
db    6
db 0F6h	;   *
db  47h	; G
db    2
db  80h	;   *
db  75h	; u
db  1Fh
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0FAh	;   *
db    7
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  20h
db  8Bh	;   *
db  5Eh	; ^
db    6
db 0F6h	;   *
db  47h	; G
db    2
db  80h	;   *
db  75h	; u
db    7
db  80h	;   *
db  3Eh	; >
db 0D1h	;   *
db 0B8h	;   *
db    1
db  75h	; u
db  10h
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  24h	; $
db  0Fh
db  50h	; P
db 0B1h	;   *
db    4
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db 0D2h	;   *
db 0E8h	;   *
db 0E9h	;   *
db 0DAh	;   *
db    0
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db  8Ah	;   *
db  0Eh
db 0D8h	;   *
db 0B8h	;   *
db  51h	; Q
db  8Ah	;   *
db  0Eh
db 0D7h	;   *
db 0B8h	;   *
db  51h	; Q
db  9Ah	;   *
db  8Ch	;   *
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    8
db  0Bh
db 0C0h	;   *
db  74h	; t
db  5Ah	; Z
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db  8Ch	;   *
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    8
db  0Bh
db 0C0h	;   *
db  74h	; t
db  17h
db 0B0h	;   *
db    6
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db 0F4h	;   *
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  75h	; u
db  2Ah	; *
db 0B0h	;   *
db    2
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db  88h	;   *
db    0
db  72h	; r
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  75h	; u
db  13h
db 0A0h	;   *
db 0D8h	;   *
db 0B8h	;   *
db  50h	; P
db 0A0h	;   *
db 0D7h	;   *
db 0B8h	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db  7Ch	; |
db 0FAh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  75h	; u
db  6Ch	; l
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db  8Ch	;   *
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    8
db  0Bh
db 0C0h	;   *
db  75h	; u
db  13h
db 0A0h	;   *
db 0D8h	;   *
db 0B8h	;   *
db  50h	; P
db 0A0h	;   *
db 0D7h	;   *
db 0B8h	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db 0E0h	;   *
db 0FAh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  75h	; u
db  40h	; @
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db  8Ch	;   *
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    8
db  0Bh
db 0C0h	;   *
db  75h	; u
db  17h
db 0B0h	;   *
db    1
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db    4
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  10h
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db 0ACh	;   *
db    2
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    4
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 12h
mov	bx, [bp+6]
mov	al, [bx+18h]
mov	cx, ax
and	al, 0Fh
mov	[bp-0Ch], al
push	ax
mov	dl, 4
xchg	cl, dl
shr	dl, cl
mov	[bp-0Ah], dl
push	dx
push	ax
push	dx
call	unk_23532
add	sp, 8
mov	[bp-12h], al
mov	bx, [bp+6]
mov	ax, [bx+12h]
mov	[bp-2],	ax
push	bx
call	loc_24448+2
add	sp, 2
cmp	ax, 1
sbb	ax, ax
and	ax, 0FED4h
add	ax, 320h
mov	cl, [bp-12h]
sub	ch, ch
mul	cx
mov	[bp-10h], ax
cmp	word ptr [bp-2], 64h ; 'd'
jnb	short loc_1ABDC
push	word ptr [bp+6]
call	loc_23834
add	sp, 2
test	al, 0Ch
jnz	short loc_1ABD4
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jz	short loc_1ABDC
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
db  8Bh	;   *
db  46h	; F
db 0FEh	;   *
db  39h	; 9
db  46h	; F
db 0F0h	;   *
db  76h	; v
db  6Ah	; j
db 0C6h	;   *
db  46h	; F
db 0F2h	;   *
db    0
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  88h	;   *
db  46h	; F
db 0F8h	;   *
db 0B9h	;   *
db    1
db    0
db  51h	; Q
db  2Bh	; +
db 0C9h	;   *
db  51h	; Q
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  88h	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F2h	;   *
db  50h	; P
db  9Ah	;   *
db  8Ch	;   *
db    2
db  75h	; u
db  24h	; $
db  83h	;   *
db 0C4h	;   *
db  0Ah
db  0Bh
db 0C0h	;   *
db  74h	; t
db  38h	; 8
db  8Ah	;   *
db  46h	; F
db 0F2h	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  9Ah	;   *
db 0BAh	;   *
db    8
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  20h
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  9Ah	;   *
db 0BAh	;   *
db    4
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db 0D8h	;   *
db  8Bh	;   *
db  46h	; F
db 0FEh	;   *
db  8Bh	;   *
db 0C8h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    3
db 0C1h	;   *
db  39h	; 9
db  47h	; G
db  12h
db  77h	; w
db  8Fh	;   *
db 0FEh	;   *
db  46h	; F
db 0F2h	;   *
db  80h	;   *
db  7Eh	; ~
db 0F2h	;   *
db    6
db  72h	; r
db  9Ah	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
call	far ptr	525h:17Eh
mov	byte ptr [bp-2], 0
mov	al, [bp-2]
push	ax
mov	al, byte ptr loc_1CAAD+1
push	ax
call	far ptr	loc_2C452+2
add	sp, 4
mov	[bp-4],	al
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
call	far ptr	loc_2C0A9+3
add	sp, 4
mov	al, [bp-4]
push	ax
mov	ax, 0B8DCh
push	ax
mov	ax, 0B8DBh
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr loc_1ACB8+1
mov	bx, [bp+6]
mov	al, [bx+17h]
push	ax
mov	al, byte ptr loc_1B8DB+1
push	ax
mov	al, byte ptr loc_1B8DB
push	ax
call	far ptr	loc_2C2F2+2
add	sp, 6
or	ax, ax
jz	short near ptr loc_1ACC3+1
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 6
jb	short near ptr loc_1AC62+1
jmp	short loc_1ACCC
;     ***************************************************************************
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	byte ptr [bp-6], 0
mov	al, [bp+6]
mov	[bp-2],	al
mov	al, [bp+8]
mov	[bp-4],	al
mov	al, [bp-6]
push	ax
lea	ax, [bp-4]
push	ax
lea	ax, [bp-2]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr loc_1AD6C+1
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jz	short near ptr loc_1AD6C+1
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short near ptr loc_1AD6C+1
mov	ax, 1
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_23B7A+4
add	sp, 0Ah
or	ax, ax
jz	short near ptr loc_1AD6C+1
mov	al, [bp-4]
push	ax
mov	cl, [bp-2]
push	cx
call	loc_237E9+1
add	sp, 4
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	far ptr	loc_2C34D+3
add	sp, 6
or	ax, ax
jnz	short loc_1AD7C
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 6
jnb	short near ptr loc_1AD78+1
jmp	loc_1ACDC
;     ***************************************************************************
db 0EBh	;   *
db    9
db  90h	;   *
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 10h
mov	cl, 4
mov	bx, [bp+8]
mov	al, [bx+18h]
mov	dx, ax
shr	al, cl
mov	[bp-4],	al
and	dl, 0Fh
mov	[bp-8],	dl
push	bx
call	loc_23834
add	sp, 2
mov	[bp-0Ah], al
and	al, 3
cmp	al, 1
cmc
sbb	al, al
and	al, 2
mov	[bp-2],	al
cmp	byte ptr [bp+6], 1
jnz	short near ptr unk_1ADC8
mov	al, 4
jmp	short near ptr unk_1ADCA
;     ***************************************************************************
db  90h	;   *
db 0B0h	;   *
db  10h
db  88h	;   *
db  46h	; F
db 0F2h	;   *
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db 0FFh
db  76h	; v
db    8
db  9Ah	;   *
db 0CAh	;   *
db    9
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  88h	;   *
db  46h	; F
db 0F4h	;   *
db 0F6h	;   *
db  46h	; F
db    6
db    1
db  75h	; u
db  11h
db  8Ah	;   *
db  5Eh	; ^
db    6
db 0D0h	;   *
db 0EBh	;   *
db  2Ah	; *
db 0FFh
db  80h	;   *
db 0BFh	;   *
db 0D0h	;   *
db 0B8h	;   *
db    3
db  75h	; u
db    3
db 0E9h	;   *
db  3Dh	; =
db    2
db  8Ah	;   *
db  46h	; F
db    6
db  24h	; $
db    1
db 0FEh	;   *
db 0C8h	;   *
db  75h	; u
db  0Bh
db 0A0h	;   *
db 0E7h	;   *
db 0CAh	;   *
db  84h	;   *
db  46h	; F
db 0F2h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db  29h	; )
db    2
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db  3Ah	; :
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db  91h	;   *
db    0
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db  88h	;   *
db    0
db  72h	; r
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  4Eh	; N
db  8Ah	;   *
db  5Eh	; ^
db 0FEh	;   *
db  2Ah	; *
db 0FFh
db  8Bh	;   *
db 0C3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db    3
db 0D8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db  9Fh	;   *
db  76h	; v
db 0CBh	;   *
db  81h	;   *
db  7Fh	; 
db  12h
db 0E8h	;   *
db    3
db  73h	; s
db  34h	; 4
db  8Bh	;   *
db  5Eh	; ^
db    8
db  81h	;   *
db  7Fh	; 
db  12h
db 0B8h	;   *
db  0Bh
db  76h	; v
db  2Ah	; *
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db 0ACh	;   *
db    2
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    4
db  8Ah	;   *
db  5Eh	; ^
db 0FEh	;   *
db  2Ah	; *
db 0FFh
db  8Bh	;   *
db 0C3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db    3
db 0D8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db  87h	;   *
db  76h	; v
db 0CBh	;   *
db 0A3h	;   *
db 0E4h	;   *
db 0B8h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db 0FFh
db  76h	; v
db    8
db  9Ah	;   *
db 0BEh	;   *
db    5
db  72h	; r
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db 0A7h	;   *
db    1
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db 0FFh
db  76h	; v
db    8
db  0Eh
db 0E8h	;   *
db 0ADh	;   *
db 0FDh	;   *
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db  8Eh	;   *
db    1
db 0B0h	;   *
db    6
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db    4
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  75h	; u
db  6Eh	; n
db  80h	;   *
db  7Eh	; ~
db    6
db    0
db  75h	; u
db  2Bh	; +
db 0B0h	;   *
db    6
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db 0F4h	;   *
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  75h	; u
db  51h	; Q
db 0A0h	;   *
db 0D8h	;   *
db 0B8h	;   *
db  50h	; P
db 0A0h	;   *
db 0D7h	;   *
db 0B8h	;   *
db  50h	; P
db  9Ah	;   *
db 0F8h	;   *
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  3Dh	; =
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db 0FFh
db  76h	; v
db    8
db  9Ah	;   *
db 0C2h	;   *
db    2
db  72h	; r
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  26h	; &
db 0FFh
db  76h	; v
db    8
db  0Eh
db 0E8h	;   *
db  47h	; G
db 0FCh	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  18h
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db 0FFh
db  76h	; v
db    8
db  9Ah	;   *
db    8
db    1
db  72h	; r
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db 0B0h	;   *
db    6
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db    4
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  75h	; u
db  69h	; i
db 0FFh
db  76h	; v
db    8
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db  50h	; P
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  75h	; u
db  52h	; R
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db  44h	; D
db    2
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  3Eh	; >
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db  4Eh	; N
db 0FDh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  2Bh	; +
db 0FFh
db  76h	; v
db    8
db  9Ah	;   *
db 0BEh	;   *
db    5
db  72h	; r
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db 0A2h	;   *
db    0
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db 0FFh
db  76h	; v
db    8
db  0Eh
db 0E8h	;   *
db 0A8h	;   *
db 0FCh	;   *
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db  89h	;   *
db    0
db 0FFh
db  76h	; v
db    8
db  9Ah	;   *
db 0FAh	;   *
db    7
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  27h	; '
db  8Bh	;   *
db  5Eh	; ^
db    8
db  83h	;   *
db  3Fh	; ?
db    0
db  74h	; t
db  1Fh
db  81h	;   *
db  7Fh	; 
db  12h
db 0B8h	;   *
db  0Bh
db  72h	; r
db  5Eh	; ^
db 0A0h	;   *
db 0E1h	;   *
db 0B8h	;   *
db  38h	; 8
db  46h	; F
db 0F4h	;   *
db  76h	; v
db  10h
db 0FFh
db  36h	; 6
db  9Ah	;   *
db 0CAh	;   *
db  9Ah	;   *
db  0Ch
db    2
db  57h	; W
db  22h	; "
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  46h	; F
db  8Bh	;   *
db  5Eh	; ^
db    8
db  83h	;   *
db  7Fh	; 
db  12h
db  64h	; d
db  72h	; r
db  3Dh	; =
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  2Ah	; *
db 0E4h	;   *
db  3Dh	; =
db    8
db    0
db  74h	; t
db  23h	; #
db  77h	; w
db  3Eh	; >
db 0FEh	;   *
db 0C8h	;   *
db  7Ch	; |
db  3Ah	; :
db 0FEh	;   *
db 0C8h	;   *
db  7Eh	; ~
db    9
db  2Ch	; ,
db    2
db  74h	; t
db  15h
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  53h	; S
db  0Eh
db 0E8h	;   *
db  2Bh	; +
db 0F9h	;   *
db 0E9h	;   *
db  0Ch
db 0FFh
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  53h	; S
db  0Eh
db 0E8h	;   *
db 0E7h	;   *
db 0F7h	;   *
db 0E9h	;   *
db 0FCh	;   *
db 0FEh	;   *
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db 0ACh	;   *
db    2
db 0E0h	;   *
db  2Bh	; +
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
call	loc_24020+2
mov	ax, [bp+6]
add	ax, 1Ch
push	ax
push	word ptr [bp+6]
call	far ptr	525h:30h
add	sp, 2
mov	bx, ax
mov	ax, [bx]
add	ax, 1Ch
push	ax
mov	ax, 0C2DCh
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *

;     *************** S U B	R O U T	I N E     ***************************************

; Attributes: bp-based frame

Flash_AI_Unit	proc far

var_4		= word ptr -4
arg_0		= byte ptr  6
arg_2		= byte ptr  8

push	bp
mov	bp, sp
sub	sp, 4
mov	al, [bp+arg_2]
mov	byte ptr word_1B8E0, al
mov	cl, 1
push	cx
push	ax
mov	al, [bp+arg_0]
mov	byte_1B8DF, al
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jnz	short loc_1B0B2
mov	[bp+var_4], 4
call	loc_2361C+2
mov	ax, 3
push	ax
call	far ptr	57Ch:5Eh ; wait	function
add	sp, 2
dec	[bp+var_4]
jnz	short near ptr loc_1B09A+2
mov	sp, bp
pop	bp
retf
Flash_AI_Unit	endp

;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Eh
push	word ptr [bp+6]
call	loc_23487+1
add	sp, 2
mov	[bp-2],	al
mov	bx, [bp+6]
mov	ax, [bx+12h]
mov	[bp-4],	ax
mov	word ptr loc_1B8E3+1, 0
call	far ptr	525h:17Eh
mov	byte ptr [bp-0Ch], 0
mov	bl, [bp-0Ch]
sub	bh, bh
mov	al, [bx-3572h]
mov	[bp-0Eh], al
mov	cl, 4
mov	bx, [bp+6]
mov	dl, [bx+18h]
shr	dl, cl
mov	[bp-8],	dl
mov	cl, [bx+18h]
and	cl, 0Fh
mov	[bp-0Ah], cl
mov	cx, 1
push	cx
push	cx
mov	cl, [bp-0Ah]
push	cx
mov	cl, dl
push	cx
push	ax
call	loc_249DA+2
add	sp, 0Ah
or	ax, ax
jz	short near ptr unk_1B167
mov	al, [bp-0Eh]
push	ax
lea	ax, [bp-0Ah]
push	ax
lea	ax, [bp-8]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr unk_1B167
mov	al, [bp-0Ah]
push	ax
mov	al, [bp-8]
push	ax
call	loc_237E9+1
add	sp, 4
mov	[bp-6],	ax
mov	bl, [bp-2]
shr	bl, 1
sub	bh, bh
cmp	byte ptr [bx-4730h], 2
jz	short near ptr unk_1B176
mov	ax, [bp-4]
mov	cx, ax
shl	ax, 1
add	ax, cx
mov	bx, [bp-6]
cmp	ax, [bx+12h]
ja	short near ptr unk_1B176
inc	byte ptr [bp-0Ch]
cmp	byte ptr [bp-0Ch], 6
jnb	short near ptr unk_1B173
jmp	near ptr loc_1B0E1+1
;     ***************************************************************************
db 0EBh	;   *
db  0Fh
db  90h	;   *
db  8Bh	;   *
db  46h	; F
db 0FAh	;   *
db 0A3h	;   *
db 0E4h	;   *
db 0B8h	;   *
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	cl, 4
mov	bx, [bp+6]
mov	al, [bx+18h]
mov	dx, ax
shr	al, cl
mov	[bp-2],	al
and	dl, 0Fh
mov	[bp-4],	dl
cmp	byte ptr [bp+8], 1
jnz	short near ptr loc_1B1AF+1
mov	al, cl
jmp	short loc_1B1B2
;     ***************************************************************************
db  90h	;   *
db 0B0h	;   *
db  10h
db  88h	;   *
db  46h	; F
db 0FAh	;   *
db  53h	; S
db  9Ah	;   *
db 0B0h	;   *
db    2
db  56h	; V
db  25h	; %
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db 0A5h	;   *
db    0
db  8Ah	;   *
db  5Eh	; ^
db    8
db 0D0h	;   *
db 0EBh	;   *
db  2Ah	; *
db 0FFh
db  80h	;   *
db 0BFh	;   *
db 0D0h	;   *
db 0B8h	;   *
db    3
db  75h	; u
db    3
db 0E9h	;   *
db  8Bh	;   *
db    0
db 0FFh
db  76h	; v
db    6
db  0Eh
db 0E8h	;   *
db  81h	;   *
db 0F9h	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  7Dh	; }
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0FAh	;   *
db    7
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  27h	; '
db 0F6h	;   *
db  46h	; F
db    8
db    1
db  75h	; u
db  21h	; !
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0A0h	;   *
db    6
db  72h	; r
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  0Eh
db  8Ah	;   *
db  5Eh	; ^
db    8
db 0D0h	;   *
db 0EBh	;   *
db  2Ah	; *
db 0FFh
db  80h	;   *
db 0BFh	;   *
db 0D0h	;   *
db 0B8h	;   *
db    4
db  74h	; t
db  47h	; G
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  9Ah	;   *
db  3Ah	; :
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  21h	; !
db 0FFh
db  76h	; v
db    6
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  9Ah	;   *
db  50h	; P
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  0Ah
db  8Bh	;   *
db  5Eh	; ^
db    6
db  81h	;   *
db  7Fh	; 
db  12h
db 0B8h	;   *
db  0Bh
db  72h	; r
db  12h
db  8Ah	;   *
db  46h	; F
db    8
db  24h	; $
db    1
db 0FEh	;   *
db 0C8h	;   *
db  75h	; u
db  12h
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  84h	;   *
db    6
db 0E7h	;   *
db 0CAh	;   *
db  74h	; t
db    9
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	word ptr [bp+6]
call	loc_23487+1
add	sp, 2
push	ax
push	word ptr [bp+6]
push	cs
call	loc_1B18A
add	sp, 4
or	ax, ax
jz	short loc_1B2BA
push	word ptr [bp+6]
call	loc_24448+2
add	sp, 2
cmp	ax, 1
sbb	al, al
and	al, 1
add	al, 9
push	ax
call	far ptr	loc_2C3B1+1
add	sp, 2
call	loc_27AEC+2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db  3Ah	; :
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  32h	; 2
db  83h	;   *
db  3Eh	; >
db 0E4h	;   *
db 0B8h	;   *
db    0
db  75h	; u
db  0Eh
db 0FFh
db  76h	; v
db    6
db  0Eh
db 0E8h	;   *
db 0DAh	;   *
db 0FDh	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  1Dh
db 0B0h	;   *
db    5
db  50h	; P
db  9Ah	;   *
db 0B2h	;   *
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    2
db 0C6h	;   *
db    6
db 0D6h	;   *
db 0B8h	;   *
db    4
db  9Ah	;   *
db  96h	;   *
db    8
db  7Eh	; ~
db  27h	; '
db 0C7h	;   *
db    6
db 0E4h	;   *
db 0B8h	;   *
db    0
db    0
db 0EBh	;   *
db 0B2h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 14h
push	word ptr [bp+6]
call	loc_23834
add	sp, 2
mov	[bp-0Eh], al
and	al, 3
cmp	al, 1
sbb	cl, cl
and	cl, 2
mov	[bp-2],	cl
cmp	al, 1
cmc
sbb	al, al
and	al, 2
mov	[bp-6],	al
mov	bx, [bp+6]
mov	ax, [bx+12h]
mov	[bp-4],	ax
mov	ax, 1
push	ax
push	ax
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
call	loc_238BB+1
add	sp, 8
or	ax, ax
jnz	short loc_1B355
jmp	loc_1B466
;     ***************************************************************************
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  66h	; f
db    3
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    2
db  83h	;   *
db  3Eh	; >
db 0E4h	;   *
db 0B8h	;   *
db    0
db  75h	; u
db    3
db 0E9h	;   *
db 0EAh	;   *
db    1
db  8Bh	;   *
db  1Eh
db 0E4h	;   *
db 0B8h	;   *
db  8Bh	;   *
db  47h	; G
db  12h
db  89h	;   *
db  46h	; F
db 0ECh	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0FAh	;   *
db    7
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db  96h	;   *
db    0
db  81h	;   *
db  7Eh	; ~
db 0FCh	;   *
db 0B8h	;   *
db  0Bh
db  77h	; w
db    3
db 0E9h	;   *
db  8Ch	;   *
db    0
db 0B0h	;   *
db    6
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db 0F4h	;   *
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  75h	; u
db  0Fh
db 0B0h	;   *
db    5
db  50h	; P
db  9Ah	;   *
db 0DCh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  43h	; C
db  8Ah	;   *
db  5Eh	; ^
db 0FEh	;   *
db 0D0h	;   *
db 0EBh	;   *
db  2Ah	; *
db 0FFh
db  80h	;   *
db 0BFh	;   *
db 0D0h	;   *
db 0B8h	;   *
db    2
db  74h	; t
db  35h	; 5
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db  88h	;   *
db    0
db  72h	; r
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  40h	; @
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  9Ah	;   *
db  3Ah	; :
db    0
db  72h	; r
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db    7
db  80h	;   *
db  3Eh	; >
db 0D2h	;   *
db 0B8h	;   *
db    1
db  75h	; u
db  29h	; )
db 0F6h	;   *
db  46h	; F
db 0F2h	;   *
db    3
db  74h	; t
db  23h	; #
db 0B0h	;   *
db    5
db  50h	; P
db  9Ah	;   *
db 0B2h	;   *
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    2
db 0C6h	;   *
db    6
db 0D6h	;   *
db 0B8h	;   *
db    4
db  9Ah	;   *
db  96h	;   *
db    8
db  7Eh	; ~
db  27h	; '
db 0C7h	;   *
db    6
db 0E4h	;   *
db 0B8h	;   *
db    0
db    0
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db 0FFh
db  76h	; v
db 0ECh	;   *
db 0FFh
db  76h	; v
db 0FCh	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0A8h	;   *
db    0
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  17h
db 0B0h	;   *
db    4
db  50h	; P
db  9Ah	;   *
db 0B2h	;   *
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    2
db 0C6h	;   *
db    6
db 0D6h	;   *
db 0B8h	;   *
db    3
db  9Ah	;   *
db  20h
db    4
db  7Eh	; ~
db  27h	; '
db 0EBh	;   *
db 0C6h	;   *
db  81h	;   *
db  7Eh	; ~
db 0FCh	;   *
db 0F4h	;   *
db    1
db  73h	; s
db  0Bh
db  8Bh	;   *
db  46h	; F
db 0ECh	;   *
db  39h	; 9
db  46h	; F
db 0FCh	;   *
db  73h	; s
db    3
db 0E9h	;   *
db 0FAh	;   *
db    0
db 0C6h	;   *
db    6
db 0D6h	;   *
db 0B8h	;   *
db    2
db  9Ah	;   *
db  40h	; @
db    8
db  7Eh	; ~
db  27h	; '
db 0EBh	;   *
db 0A8h	;   *
db  8Bh	;   *
db  46h	; F
db    6
db  39h	; 9
db    6
db  76h	; v
db 0CBh	;   *
db  74h	; t
db    3
db 0E9h	;   *
db 0E2h	;   *
db    0
db 0A0h	;   *
db 0D8h	;   *
db 0B8h	;   *
db  50h	; P
db 0A0h	;   *
db 0D7h	;   *
db 0B8h	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db  74h	; t
db 0F1h	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db 0CCh	;   *
db    0
db 0A0h	;   *
db 0DCh	;   *
db 0B8h	;   *
db  50h	; P
db 0A0h	;   *
db 0DBh	;   *
db 0B8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db  60h	; `
db    3
db 0AAh	;   *
db  24h	; $
db  83h	;   *
db 0C4h	;   *
db    8
db  88h	;   *
db  46h	; F
db 0EEh	;   *
db 0C6h	;   *
db  46h	; F
db 0F4h	;   *
db    0
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0EEh	;   *
db  50h	; P
db  9Ah	;   *
db  54h	; T
db    6
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    4
db  88h	;   *
db  46h	; F
db 0F0h	;   *
db  8Ah	;   *
db  46h	; F
db    8
db  88h	;   *
db  46h	; F
db 0F8h	;   *
db  8Ah	;   *
db  46h	; F
db  0Ah
db  88h	;   *
db  46h	; F
db 0F6h	;   *
db  8Ah	;   *
db  46h	; F
db 0F0h	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  9Ah	;   *
db 0BAh	;   *
db    8
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  3Ch	; <
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  9Ah	;   *
db 0F8h	;   *
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  75h	; u
db  28h	; (
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  9Ah	;   *
db  7Eh	; ~
db    0
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  14h
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  9Ah	;   *
db  3Ah	; :
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  0Ch
db 0FEh	;   *
db  46h	; F
db 0F4h	;   *
db  80h	;   *
db  7Eh	; ~
db 0F4h	;   *
db    3
db  72h	; r
db  84h	;   *
db 0EBh	;   *
db  2Fh	; /
db  90h	;   *
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  9Ah	;   *
db 0ACh	;   *
db    2
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    4
db 0C7h	;   *
db    6
db 0E4h	;   *
db 0B8h	;   *
db    0
db    0
db 0B0h	;   *
db    4
db  50h	; P
db  9Ah	;   *
db 0B2h	;   *
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    2
db 0C6h	;   *
db    6
db 0D6h	;   *
db 0B8h	;   *
db    3
db  9Ah	;   *
db  20h
db    4
db  7Eh	; ~
db  27h	; '
db 0E9h	;   *
db 0C0h	;   *
db 0FEh	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
push	word ptr [bp+6]
call	loc_24448+2
mov	sp, bp
or	ax, ax
jz	short loc_1B590
call	far ptr	loc_2BB60
or	ax, ax
jz	short loc_1B590
mov	al, 8
push	ax
call	far ptr	loc_2C3B1+1
mov	sp, bp
call	loc_2A45E+2
mov	word ptr loc_1B8E3+1, 0
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
push	word ptr [bp+6]
mov	al, [bp+8]
push	ax
push	cs
call	near ptr loc_1AD88+2
mov	sp, bp
mov	ax, 1
push	ax
mov	bx, [bp+6]
mov	cl, [bx+18h]
mov	dx, cx
and	cl, 0Fh
push	cx
mov	cl, 4
shr	dl, cl
push	dx
call	far ptr	loc_2D9F0
mov	sp, bp
mov	ax, 1
push	ax
mov	al, [bp+8]
push	ax
push	word ptr [bp+6]
call	far ptr	loc_2D6DB+3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	word ptr [bp+6]
push	cs
call	loc_1B044
add	sp, 2
mov	bx, [bp+6]
mov	al, [bx+18h]
mov	cx, ax
and	al, 0Fh
mov	[bp-4],	al
push	ax
mov	al, 4
xchg	cl, al
shr	al, cl
mov	[bp-2],	al
push	ax
push	cs
call	near ptr loc_1B073+1
add	sp, 4
mov	al, [bp+8]
push	ax
push	word ptr [bp+6]
push	cs
call	near ptr loc_1B595+1
add	sp, 4
or	ax, ax
jnz	short near ptr loc_1B691+3
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
push	word ptr [bp+6]
push	cs
call	loc_1B270
add	sp, 6
or	ax, ax
jnz	short near ptr loc_1B691+3
cmp	byte ptr [bp+8], 0
jnz	short near ptr loc_1B65F+1
cmp	byte ptr word_1B8E0+1, 5
jbe	short near ptr loc_1B65F+1
push	ax
push	word ptr loc_1CB76
call	loc_2461A
add	sp, 4
cmp	al, 0Ah
jnb	short near ptr loc_1B65F+1
push	word_1CA9A
call	loc_234F6
add	sp, 2
or	ax, ax
jz	short near ptr loc_1B65F+1
call	loc_2A354
push	word ptr [bp+6]
push	cs
call	locret_1B55A
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1B691+3
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
push	word ptr [bp+6]
push	cs
call	loc_1B306
add	sp, 6
or	ax, ax
jnz	short near ptr loc_1B691+3
mov	al, 6
push	ax
call	far ptr	loc_2C3B1+1
add	sp, 2
call	loc_2262A
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
add	bx, 0CB72h
mov	[bp-6],	bx
cmp	word ptr [bx+4], 0
jz	short near ptr loc_1B717+3
call	loc_28591+3
mov	bx, [bp-6]
mov	ax, [bx+4]
mov	[bp-4],	ax
or	ax, ax
jz	short near ptr loc_1B717+3
mov	bx, [bp-4]
mov	word ptr loc_1B8E3+3, bx
mov	ax, [bx]
mov	word ptr loc_1B8E8, ax
push	bx
call	loc_24A6E
add	sp, 2
mov	word ptr loc_1B8E3+1, 0
mov	al, [bp+6]
push	ax
push	word ptr loc_1B8E3+3
push	cs
call	near ptr loc_1B5D4+2
add	sp, 4
call	loc_2297C
or	ax, ax
jnz	short loc_1B712
mov	byte_1B8E2, 0
mov	ax, word ptr loc_1B8E8
mov	[bp-4],	ax
or	ax, ax
jnz	short near ptr loc_1B6CD+1
jmp	short near ptr loc_1B717+3
;     ***************************************************************************
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	al, byte_1CAE7
mov	[bp-2],	al
test	al, 2
jz	short near ptr loc_1B73B+1
test	byte ptr [bp-2], 8
jz	short near ptr loc_1B73B+1
mov	al, 3
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db 0F6h	;   *
db  46h	; F
db 0FEh	;   *
db    2
db  74h	; t
db    6
db 0B0h	;   *
db    1
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db 0F6h	;   *
db  46h	; F
db 0FEh	;   *
db    8
db  74h	; t
db    6
db 0B0h	;   *
db    2
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  2Ah	; *
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	bx, [bx-348Ah]
cmp	word ptr [bx+12h], 0BB8h
jnb	short loc_1B7A2
mov	ax, 1
push	ax
sub	ax, ax
push	ax
mov	cl, [bx+18h]
mov	dx, cx
and	cl, 0Fh
push	cx
mov	cl, 4
shr	dl, cl
push	dx
call	loc_238BB+1
add	sp, 8
or	ax, ax
jz	short loc_1B7A2
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	byte ptr [bp-6], 0
mov	al, [bp+6]
mov	[bp-2],	al
mov	al, [bp+8]
mov	[bp-4],	al
mov	al, [bp-6]
push	ax
lea	ax, [bp-4]
push	ax
lea	ax, [bp-2]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short loc_1B80F
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short loc_1B80F
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_237E9+1
add	sp, 4
mov	bl, [bp+0Ah]
sub	bh, bh
mov	cx, bx
shl	bx, 1
shl	bx, 1
add	bx, cx
shl	bx, 1
cmp	[bx-348Ah], ax
jz	short loc_1B81A
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 6
jb	short near ptr loc_1B7B0+2
jmp	short loc_1B822
;     ***************************************************************************
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 14h
mov	al, [bp+8]
mov	[bp-6],	al
mov	al, [bp+0Ah]
mov	[bp-0Ah], al
mov	byte ptr [bp-0Ch], 0
call	far ptr	525h:17Eh
mov	byte ptr [bp-14h], 6
mov	byte ptr [bp-0Eh], 0
mov	al, [bp+8]
mov	[bp-4],	al
mov	al, [bp+0Ah]
mov	[bp-8],	al
mov	bl, [bp-0Eh]
sub	bh, bh
mov	al, [bx-3572h]
mov	[bp-10h], al
push	ax
lea	ax, [bp-8]
push	ax
lea	ax, [bp-4]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr loc_1B8BB+1
mov	bx, [bp+6]
mov	al, [bx+17h]
push	ax
mov	al, [bp-8]
push	ax
mov	al, [bp-4]
push	ax
call	far ptr	loc_2C2F2+2
add	sp, 6
or	ax, ax
jnz	short near ptr loc_1B8BB+1
mov	al, [bp-8]
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-0Ah]
push	ax
mov	al, [bp-6]
push	ax
call	unk_23532
add	sp, 8
mov	[bp-2],	al
cmp	al, [bp-14h]
jnb	short near ptr loc_1B8BB+1
mov	[bp-14h], al
mov	al, [bp-10h]
mov	[bp-12h], al
inc	byte ptr [bp-0Eh]
cmp	byte ptr [bp-0Eh], 6
jb	short loc_1B84B
cmp	byte ptr [bp-14h], 6
jz	short loc_1B8EB
mov	al, [bp-12h]
push	ax
lea	ax, [bp+0Ah]
push	ax
lea	ax, [bp+8]
push	ax
call	loc_23BE9+1
add	sp, 6
inc	byte ptr [bp-0Ch]
cmp	byte ptr [bp-0Ch], 3
jnb	short loc_1B8EB
jmp	near ptr loc_1B83D+1
;     ***************************************************************************
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db 0ACh	;   *
db    2
db 0E0h	;   *
db  2Bh	; +
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ch
push	si
push	cs
call	near ptr loc_1B71C+4
mov	[bp-4],	al
sub	al, al
mov	[bp-0Ah], al
mov	[bp-8],	al
mov	al, [bp+6]
and	ax, 0FEh
shl	ax, 1
mov	cl, [bp-4]
sub	ch, ch
add	ax, cx
mov	cx, ax
shl	ax, 1
add	ax, cx
mov	[bp-0Ch], ax
mov	si, [bp-0Ch]
mov	bl, [bp-8]
sub	bh, bh
mov	al, [bx+si-4450h]
cmp	al, 4
jnb	short loc_1B958
push	word ptr [bp+8]
mov	bl, al
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
push	word ptr [bx-348Ah]
call	loc_2461A
add	sp, 4
add	[bp-0Ah], al
inc	byte ptr [bp-8]
cmp	byte ptr [bp-8], 3
jb	short near ptr loc_1B929+1
mov	al, [bp-0Ah]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Eh
push	si
push	cs
call	near ptr loc_1B71C+4
mov	[bp-4],	al
sub	ax, ax
mov	[bp-6],	ax
mov	[bp-8],	ax
mov	byte ptr [bp-0Ch], 0
mov	al, [bp+6]
and	ax, 0FEh
shl	ax, 1
mov	cl, [bp-4]
sub	ch, ch
add	ax, cx
mov	cx, ax
shl	ax, 1
add	ax, cx
mov	[bp-0Eh], ax
mov	si, [bp-0Eh]
mov	bl, [bp-0Ch]
sub	bh, bh
mov	al, [bx+si-4450h]
cmp	al, 4
jnb	short near ptr loc_1B9CA+3
push	word ptr [bp+8]
mov	bl, al
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
push	word ptr [bx-348Ah]
call	loc_245DB+1
add	sp, 4
add	[bp-8],	ax
adc	[bp-6],	dx
inc	byte ptr [bp-0Ch]
cmp	byte ptr [bp-0Ch], 3
jb	short near ptr unk_1B99C
mov	ax, [bp-8]
mov	dx, [bp-6]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 10h
push	si
sub	ax, ax
push	ax
push	word ptr [bp+6]
call	loc_23487+1
add	sp, 2
mov	[bp-6],	al
push	ax
push	cs
call	near ptr loc_1B8FA+2
add	sp, 4
mov	[bp-0Ah], al
mov	al, [bp+0Ah]
push	ax
mov	cl, [bp+8]
push	cx
push	ax
push	cx
call	unk_23532
add	sp, 8
mov	[bp-10h], al
push	word ptr [bp+6]
call	loc_23702
add	sp, 2
mov	[bp-0Ch], ax
cmp	byte ptr [bp-6], 2
jnz	short loc_1BA32
sub	bx, bx
jmp	short near ptr loc_1BA33+2
;     ***************************************************************************
db 0BBh	;   *
db    2
db    0
db  8Bh	;   *
db 0C3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db    3
db 0D8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db  87h	;   *
db  76h	; v
db 0CBh	;   *
db  89h	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  9Ah	;   *
db 0D2h	;   *
db    3
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  8Bh	;   *
db  5Eh	; ^
db    6
db  81h	;   *
db  7Fh	; 
db  12h
db 0B8h	;   *
db  0Bh
db  76h	; v
db    4
db 0B0h	;   *
db    2
db 0EBh	;   *
db    2
db  2Ah	; *
db 0C0h	;   *
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db  8Ah	;   *
db  46h	; F
db 0F0h	;   *
db  2Ah	; *
db 0E4h	;   *
db 0B9h	;   *
db 0E8h	;   *
db    3
db 0F7h	;   *
db 0E1h	;   *
db  89h	;   *
db  46h	; F
db 0F2h	;   *
db  53h	; S
db  9Ah	;   *
db 0FAh	;   *
db    7
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  5Bh	; [
db 0FFh
db  76h	; v
db    6
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db  50h	; P
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  75h	; u
db  44h	; D
db  80h	;   *
db  7Eh	; ~
db 0FAh	;   *
db    2
db  75h	; u
db    7
db  80h	;   *
db  3Eh	; >
db 0D1h	;   *
db 0B8h	;   *
db    1
db  74h	; t
db  2Fh	; /
db  8Bh	;   *
db  46h	; F
db 0FCh	;   *
db  39h	; 9
db  46h	; F
db 0F4h	;   *
db  7Ch	; |
db  0Eh
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  76h	; v
db 0F8h	;   *
db  8Bh	;   *
db  44h	; D
db  12h
db  39h	; 9
db  47h	; G
db  12h
db  73h	; s
db  21h	; !
db  80h	;   *
db  7Eh	; ~
db 0F6h	;   *
db    2
db  76h	; v
db  1Bh
db  8Ah	;   *
db  46h	; F
db 0F0h	;   *
db  38h	; 8
db  46h	; F
db 0FEh	;   *
db  72h	; r
db  0Bh
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db  46h	; F
db 0F2h	;   *
db  39h	; 9
db  47h	; G
db  12h
db  73h	; s
db    8
db 0B8h	;   *
db    1
db    0
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  2Bh	; +
db 0C0h	;   *
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
push	si
mov	bx, [bp+6]
test	byte ptr [bx+2], 4
jz	short near ptr loc_1BB02+4
mov	bx, [bp+8]
mov	si, [bp+6]
mov	al, [si+0Dh]
cmp	[bx+0Ah], al
jnz	short near ptr loc_1BB02+4
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
push	si
push	word ptr [bp+6]
call	loc_24448+2
add	sp, 2
cmp	ax, 1
sbb	al, al
and	al, 0F6h
add	al, 14h
mov	bx, [bp+6]
mov	cx, ax
mov	al, [bx+0Bh]
sub	ah, ah
shl	ax, 1
mov	si, 3
cwd
idiv	si
add	cl, al
mov	al, [bx+7]
mov	bl, 3
sub	ah, ah
div	bl
add	cl, al
mov	[bp-2],	cl
mov	bx, [bp+6]
cmp	byte ptr [bx+0Bh], 64h ; 'd'
jnz	short loc_1BB58
add	byte ptr [bp-2], 0Fh
mov	al, [bp-2]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ch
mov	word ptr loc_1B8E3+1, 0
push	word ptr loc_1B8E3+3
call	loc_23834
add	sp, 2
mov	bl, al
mov	[bp-0Ch], bl
shr	bl, 1
and	bx, 0FEh
mov	ax, [bx-355Fh]
mov	[bp-6],	ax
cmp	ax, 32h	; '2'
jnb	short near ptr loc_1BB90+2
jmp	near ptr loc_1BC4D+1
;     ***************************************************************************
db  50h	; P
db 0B8h	;   *
db  64h	; d
db    0
db  50h	; P
db  9Ah	;   *
db  8Ah	;   *
db    1
db  61h	; a
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db 0B8h	;   *
db  1Eh
db    0
db  50h	; P
db 0FFh
db  76h	; v
db 0FAh	;   *
db  9Ah	;   *
db 0B0h	;   *
db    1
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db    2
db 0B9h	;   *
db    3
db    0
db  99h	;   *
db 0F7h	;   *
db 0F9h	;   *
db  50h	; P
db  9Ah	;   *
db  8Ah	;   *
db    1
db  61h	; a
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  89h	;   *
db  46h	; F
db 0FAh	;   *
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  24h	; $
db    1
db  3Ch	; <
db    1
db 0F5h	;   *
db  1Bh
db 0DBh	;   *
db  83h	;   *
db 0E3h	;   *
db    2
db  8Bh	;   *
db 0C3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db    3
db 0D8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db  87h	;   *
db  76h	; v
db 0CBh	;   *
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db  69h	; i
db  50h	; P
db  9Ah	;   *
db 0D8h	;   *
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  40h	; @
db 0FFh
db  36h	; 6
db 0E6h	;   *
db 0B8h	;   *
db 0FFh
db  76h	; v
db 0FCh	;   *
db  0Eh
db 0E8h	;   *
db 0E5h	;   *
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  75h	; u
db  3Ch	; <
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db 0F6h	;   *
db  47h	; G
db    3
db 0F0h	;   *
db  75h	; u
db  33h	; 3
db  53h	; S
db  0Eh
db 0E8h	;   *
db 0FCh	;   *
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db  88h	;   *
db  46h	; F
db 0F8h	;   *
db  3Ah	; :
db  46h	; F
db 0FEh	;   *
db  73h	; s
db  15h
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  2Ah	; *
db  46h	; F
db 0F8h	;   *
db    4
db  61h	; a
db  50h	; P
db  9Ah	;   *
db 0DCh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  0Eh
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0A7h	;   *
db 0EBh	;   *
db  0Eh
db  8Bh	;   *
db  46h	; F
db 0FCh	;   *
db 0A3h	;   *
db 0E4h	;   *
db 0B8h	;   *
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
push	si
push	cs
call	near ptr loc_1B71C+4
mov	byte ptr [bp-8], 0
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
mov	[bp-0Ah], ax
mov	si, [bp-0Ah]
mov	bl, [bp-8]
sub	bh, bh
mov	al, [bx+si-4444h]
cmp	al, 4
jnb	short loc_1BCC2
mov	bl, al
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	ax, [bx-348Ah]
mov	[bp-2],	ax
or	ax, ax
jz	short loc_1BCC2
mov	al, 6
push	ax
mov	bx, [bp-2]
mov	al, [bx+18h]
mov	cx, ax
and	al, 0Fh
push	ax
mov	al, 4
xchg	cl, al
shr	al, cl
push	ax
call	far ptr	loc_2C3F4
add	sp, 6
or	ax, ax
jz	short loc_1BCCE
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_1BC94+1
inc	byte ptr [bp-8]
cmp	byte ptr [bp-8], 3
jb	short near ptr loc_1BC6C+2
jmp	short near ptr loc_1BCD2+4
;     ***************************************************************************
db  90h	;   *
db 0B8h	;   *
db    1
db    0
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  2Bh	; +
db 0C0h	;   *
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jnz	short loc_1BD2A
mov	bx, [bp+6]
mov	al, [bx+17h]
push	ax
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	far ptr	loc_2C2F2+2
add	sp, 6
or	ax, ax
jnz	short loc_1BD2A
mov	al, byte ptr loc_1B8D7+1
push	ax
mov	al, byte ptr loc_1B8D7
push	ax
call	far ptr	loc_2C0A9+3
add	sp, 4
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  9Ah	;   *
db  7Eh	; ~
db    1
db  25h	; %
db    5
db 0C6h	;   *
db  46h	; F
db 0FAh	;   *
db    0
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db 0A0h	;   *
db 0AEh	;   *
db 0CAh	;   *
db  50h	; P
db  9Ah	;   *
db  54h	; T
db    6
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    4
db  88h	;   *
db  46h	; F
db 0F8h	;   *
db 0B1h	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Ah	;   *
db  47h	; G
db  18h
db 0D2h	;   *
db 0E8h	;   *
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db  8Ah	;   *
db  47h	; G
db  18h
db  24h	; $
db  0Fh
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  9Ah	;   *
db 0BAh	;   *
db    8
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  32h	; 2
db 0B0h	;   *
db    6
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  9Ah	;   *
db 0F4h	;   *
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  1Bh
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Ah	;   *
db  47h	; G
db  17h
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  9Ah	;   *
db 0F4h	;   *
db    4
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  0Bh
db 0FEh	;   *
db  46h	; F
db 0FAh	;   *
db  80h	;   *
db  7Eh	; ~
db 0FAh	;   *
db    6
db  72h	; r
db  85h	;   *
db 0EBh	;   *
db  0Ah
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db 0E9h	;   *
db  60h	; `
db 0FFh
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	word ptr [bp+6]
mov	al, [bp+8]
push	ax
push	cs
call	near ptr loc_1B968+2
add	sp, 4
mov	[bp-4],	ax
mov	[bp-2],	dx
sub	ax, ax
push	ax
cmp	byte ptr [bp+8], 1
sbb	al, al
and	al, 2
push	ax
push	cs
call	near ptr loc_1B968+2
add	sp, 4
cmp	dx, [bp-2]
jg	short locret_1BE00
jl	short near ptr loc_1BDF8+1
cmp	ax, [bp-4]
ja	short locret_1BE00
mov	ax, 1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+6]
mov	al, [bx+4]
mov	[bp-4],	al
mov	cl, [bx+5]
mov	[bp-2],	cl
sub	ch, ch
push	cx
sub	ah, ah
push	ax
call	far ptr	561h:18Ah
add	sp, 4
cmp	ax, 46h	; 'F'
jbe	short near ptr game_start_new_ruler_change_what+2
sub	al, al
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db  9Ch	;   *
db    1
db  61h	; a
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  3Dh	; =
db  32h	; 2
db    0
db  73h	; s
db    7
db 0B0h	;   *
db    1
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  80h	;   *
db  7Eh	; ~
db 0FCh	;   *
db  46h	; F
db  76h	; v
db    6
db 0B0h	;   *
db    2
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  80h	;   *
db  7Eh	; ~
db 0FEh	;   *
db  46h	; F
db  76h	; v
db    6
db 0B0h	;   *
db    3
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  38h	; 8
db  46h	; F
db 0FCh	;   *
db  76h	; v
db    6
db 0B0h	;   *
db    4
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db 0B0h	;   *
db    5
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
mov	al, 4
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_23934
mov	sp, bp
or	ax, ax
jnz	short near ptr game_start_new_ruler_everything_ok+2
cmp	byte ptr loc_1CAAD, 3
jz	short near ptr game_start_new_ruler_everything_ok+2
mov	ax, 1
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, word ptr loc_1B8E3+1
mov	al, [bx+18h]
mov	cx, ax
and	al, 0Fh
push	ax
mov	al, 4
xchg	cl, al
shr	al, cl
push	ax
push	cs
call	loc_1BE7E
add	sp, 4
or	ax, ax
jz	short loc_1BF44
push	word ptr [bp+6]
call	loc_23834
add	sp, 2
test	al, 0Ch
jz	short near ptr loc_1BEDF+1
mov	al, 6
jmp	short loc_1BEEA
;     ***************************************************************************
db  90h	;   *
db 0FFh
db  76h	; v
db    6
db  0Eh
db 0E8h	;   *
db  1Fh
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db 0FFh
db  36h	; 6
db 0E4h	;   *
db 0B8h	;   *
db  0Eh
db 0E8h	;   *
db  11h
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db  81h	;   *
db  7Eh	; ~
db    8
db 0F4h	;   *
db    1
db  73h	; s
db    8
db  8Bh	;   *
db  46h	; F
db    8
db  39h	; 9
db  46h	; F
db  0Ah
db  77h	; w
db  14h
db 0A1h	;   *
db  76h	; v
db 0CBh	;   *
db  39h	; 9
db  46h	; F
db    6
db  75h	; u
db  14h
db  80h	;   *
db  7Eh	; ~
db 0FCh	;   *
db    3
db  75h	; u
db    6
db  80h	;   *
db  7Eh	; ~
db 0FEh	;   *
db    2
db  74h	; t
db    8
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  8Bh	;   *
db  46h	; F
db    8
db  39h	; 9
db  46h	; F
db  0Ah
db  76h	; v
db  16h
db  8Ah	;   *
db  5Eh	; ^
db 0FCh	;   *
db  2Ah	; *
db 0FFh
db  8Ah	;   *
db  87h	;   *
db 0FCh	;   *
db 0C2h	;   *
db  50h	; P
db  9Ah	;   *
db 0DCh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0DAh	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 16h
push	si
mov	byte ptr [bp-0Ah], 0
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
mov	ax, [bx-348Eh]
mov	[bp-8],	ax
mov	[bp-14h], ax
cmp	byte ptr [bp+6], 1
jnz	short near ptr loc_1BF75+3
sub	bx, bx
jmp	short near ptr loc_1BF7A+1
;     ***************************************************************************
db 0BBh	;   *
db    2
db    0
db  8Bh	;   *
db 0C3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db    3
db 0D8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db  87h	;   *
db  72h	; r
db 0CBh	;   *
db  89h	;   *
db  46h	; F
db 0F2h	;   *
db  89h	;   *
db  46h	; F
db 0EAh	;   *
db  80h	;   *
db  7Eh	; ~
db    6
db    1
db  75h	; u
db    5
db 0BBh	;   *
db    2
db    0
db 0EBh	;   *
db    2
db  2Bh	; +
db 0DBh	;   *
db  8Bh	;   *
db 0C3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db    3
db 0D8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db  87h	;   *
db  72h	; r
db 0CBh	;   *
db  89h	;   *
db  46h	; F
db 0F0h	;   *
db 0FFh
db  76h	; v
db 0EAh	;   *
db  9Ah	;   *
db    6
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Ah	;   *
db 0D8h	;   *
db  2Ah	; *
db 0FFh
db  8Bh	;   *
db  76h	; v
db 0ECh	;   *
db  8Ah	;   *
db  40h	; @
db  0Eh
db  88h	;   *
db  46h	; F
db 0FAh	;   *
db 0FFh
db  76h	; v
db 0F0h	;   *
db  9Ah	;   *
db    6
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  2Ah	; *
db 0E4h	;   *
db  8Bh	;   *
db 0F0h	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db  8Ah	;   *
db  40h	; @
db  0Eh
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db 0FFh
db  76h	; v
db 0F2h	;   *
db  9Ah	;   *
db    6
db    0
db  25h	; %
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db  3Ah	; :
db  47h	; G
db    9
db  75h	; u
db    6
db 0C6h	;   *
db  46h	; F
db 0F6h	;   *
db  32h	; 2
db 0EBh	;   *
db  3Dh	; =
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  38h	; 8
db  46h	; F
db 0FCh	;   *
db  73h	; s
db  35h	; 5
db  8Ah	;   *
db  47h	; G
db    6
db  8Bh	;   *
db  76h	; v
db 0F2h	;   *
db  8Ah	;   *
db  4Ch	; L
db    6
db  8Bh	;   *
db  1Fh
db  8Ah	;   *
db  57h	; W
db    8
db  8Bh	;   *
db 0D8h	;   *
db  8Ah	;   *
db 0C1h	;   *
db 0B1h	;   *
db    3
db  2Ah	; *
db 0E4h	;   *
db 0F6h	;   *
db 0F1h	;   *
db  2Ch	; ,
db  64h	; d
db 0F6h	;   *
db 0D8h	;   *
db  8Bh	;   *
db 0C8h	;   *
db  8Ah	;   *
db 0C2h	;   *
db  8Bh	;   *
db 0D1h	;   *
db 0B1h	;   *
db    3
db  2Ah	; *
db 0E4h	;   *
db 0F6h	;   *
db 0F1h	;   *
db  2Ah	; *
db 0D0h	;   *
db  8Ah	;   *
db 0C3h	;   *
db  2Ah	; *
db 0E4h	;   *
db 0F6h	;   *
db 0F1h	;   *
db  2Ah	; *
db 0D0h	;   *
db  88h	;   *
db  56h	; V
db 0F6h	;   *
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  9Ah	;   *
db 0DCh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	byte ptr [bp-6], 0
mov	al, [bp+6]
mov	[bp-2],	al
mov	al, [bp+8]
mov	[bp-4],	al
mov	al, [bp-6]
push	ax
lea	ax, [bp-4]
push	ax
lea	ax, [bp-2]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr loc_1C08F+3
mov	ax, 1
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_23B7A+4
add	sp, 0Ah
or	ax, ax
jnz	short loc_1C09E
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 6
jb	short locret_1C04E
jmp	short near ptr loc_1C0A3+3
;     ***************************************************************************
db  90h	;   *
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
mov	al, [bp+6]
mov	byte ptr loc_1B8DB, al
mov	al, [bp+8]
mov	byte ptr loc_1B8DB+1, al
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ah
mov	byte ptr [bp-8], 0
mov	al, [bp+8]
mov	[bp-4],	al
mov	al, [bp+0Ah]
mov	[bp-6],	al
mov	al, [bp-8]
push	ax
lea	ax, [bp-6]
push	ax
lea	ax, [bp-4]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
;     ***************************************************************************
word_3C0EA	dw 5774h		; DATA XREF: dseg:loc_13598  w
word_3C0EC	dw 468Ah		; DATA XREF: dseg:350E  w
db 0FAh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db 0F8h	;   *
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  43h	; C
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  8Ah	;   *
db  46h	; F
word_3C106	dw 50FAh		; DATA XREF: game_spy_rival_tigers_select_rulers_display-FFBB  r
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
dword_3C114	dd 33084E9Ah		; DATA XREF: dseg:35C9  w dseg:35CD  w
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db  0Ah
db  0Bh
db 0C0h	;   *
db  74h	; t
db  23h	; #
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
word_3C128	dw 0BA9Ah		; DATA XREF: dseg:3547  w dseg:35E3  r ...
db    4
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  20h
db    7
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  75h	; u
db  0Fh
db 0FEh	;   *
db  46h	; F
word_3C145	dw 80F8h		; DATA XREF: dseg:3580  r
; game_diplomacy_threaten_check:loc_13AB7  w
dw 0F87Eh
word_3C149	dw 7306h		; DATA XREF: dseg:3BC2  w
dd 0FF79E903h
db 0EBh	;   *
db  0Fh
db  90h	;   *
db  8Bh	;   *
db  46h	; F
db 0FEh	;   *
db 0A3h	;   *
db 0E4h	;   *
db 0B8h	;   *
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
dword_3C15C	dd 90CB5DE5h		; DATA XREF: game_diplomacy_threaten_check:loc_13B7E  r
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 1Ah
push	si
mov	word ptr loc_1B8E3+1, 0

loc_3C173:				; DATA XREF: dseg:loc_13D66  r		 /* DOS offset ---> 3383:3 */
push	word ptr [bp+6]

loc_3C176:				; DATA XREF: dseg:355D  r		 /* DOS offset ---> 3383:6 */
; dseg:loc_135A8  r ...
call	loc_23487+1

loc_3C17B:		 /* DOS offset ---> 3383:B */
add	sp, 2

loc_3C17E:				; DATA XREF: dseg:loc_136C9  r		 /* DOS offset ---> 3383:E */
mov	[bp-4],	al
mov	cl, 4
mov	bx, [bp+6]

loc_3C186:				; DATA XREF: game_advisor_display_sub-FFBA  r		 /* DOS offset ---> 3384:6 */
; game_advisor_display_sub-FFA4  r
mov	al, [bx+18h]

loc_3C189:				; DATA XREF: dseg:35DD  r		 /* DOS offset ---> 3384:9 */
; dseg:loc_1370C  r
mov	dx, ax

loc_3C18B:				; DATA XREF: dseg:35EC  r		 /* DOS offset ---> 3384:B */
shr	al, cl
mov	[bp-0Eh], al

loc_3C190:				; DATA XREF: game_advisor_display_sub:loc_13600  r		 /* DOS offset ---> 3385:0 */
and	dl, 0Fh
mov	[bp-12h], dl
cmp	byte ptr [bp-4], 1
jnz	short near ptr loc_1C19E+2
mov	al, 2
jmp	short near ptr loc_1C1A1+1
;     ***************************************************************************
db 0B0h	;   *
db    8
db  88h	;   *
db  46h	; F
db 0E6h	;   *
db  80h	;   *
db  7Eh	; ~
db 0FCh	;   *
db    1
db  75h	; u
db    5
db 0B0h	;   *
db    1
db 0EBh	;   *
db    3
db  90h	;   *
db 0B0h	;   *
db  20h
db  88h	;   *
db  46h	; F
db 0FAh	;   *
db  53h	; S
db  9Ah	;   *
db    4
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  88h	;   *
db  46h	; F
db 0ECh	;   *
db 0A8h	;   *
db  0Ah
db  74h	; t
db  27h	; '
db  38h	; 8
db  46h	; F
db 0E6h	;   *
db  75h	; u
db  22h	; "
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  84h	;   *
db    6
db 0E7h	;   *
db 0CAh	;   *
db  74h	; t
db  19h
db  8Ah	;   *
db  46h	; F
db 0EEh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F2h	;   *
db  50h	; P
db 0FFh
db  76h	; v
db    6
db  0Eh
db 0E8h	;   *
db 0DCh	;   *
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db    2
db    1
db  9Ah	;   *
db  7Eh	; ~
db    1
db  25h	; %
db    5
db  2Ah	; *
db 0C0h	;   *
db  88h	;   *
db  46h	; F
db 0F0h	;   *
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db  8Ah	;   *
db  46h	; F
db 0F2h	;   *
db  88h	;   *
db  46h	; F
db 0F6h	;   *
db  8Ah	;   *
db  46h	; F
db 0EEh	;   *
db  88h	;   *
db  46h	; F
db 0F4h	;   *
db  8Ah	;   *
db  5Eh	; ^
db 0F0h	;   *
db  2Ah	; *
db 0FFh
db  8Ah	;   *
db  87h	;   *
db  8Eh	;   *
db 0CAh	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  9Ah	;   *
db 0BAh	;   *
db    8
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db 0AFh	;   *
db    0
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  9Ah	;   *
db 0F8h	;   *
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db  98h	;   *
db    0
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0EEh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F2h	;   *
db  50h	; P
db  9Ah	;   *
db  4Eh	; N
db    8
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db  0Ah
db  0Bh
db 0C0h	;   *
db  75h	; u
db  78h	; x
db  8Bh	;   *
db  76h	; v
db 0F4h	;   *
db  81h	;   *
db 0E6h	;   *
db 0FFh
db    0
db  8Bh	;   *
db 0C6h	;   *
db 0D1h	;   *
db 0E6h	;   *
db    3
db 0F0h	;   *
db 0D1h	;   *
db 0E6h	;   *
db 0D1h	;   *
db 0E6h	;   *
db    3
db 0F0h	;   *
db  8Ah	;   *
db  5Eh	; ^
db 0F6h	;   *
db  2Ah	; *
db 0FFh
db 0F6h	;   *
db  80h	;   *
db  6Ch	; l
db 0BAh	;   *
db  80h	;   *
db  74h	; t
db  13h
db 0B0h	;   *
db  14h
db 0F6h	;   *
db  26h	; &
db 0B3h	;   *
db  33h	; 3
db  50h	; P
db  9Ah	;   *
db 0DCh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  46h	; F
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  9Ah	;   *
db 0BAh	;   *
db    4
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  89h	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  9Ah	;   *
db 0FAh	;   *
db    7
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  39h	; 9
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  8Ah	;   *
db  4Eh	; N
db 0F6h	;   *
db  51h	; Q
db  50h	; P
db  51h	; Q
db  9Ah	;   *
db    2
db    2
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    8
db  88h	;   *
db  46h	; F
db 0EAh	;   *
db  3Ah	; :
db  46h	; F
db 0FEh	;   *
db  76h	; v
db  0Ch
db  8Bh	;   *
db  46h	; F
db 0F8h	;   *
db 0A3h	;   *
db 0E4h	;   *
db 0B8h	;   *
db  8Ah	;   *
db  46h	; F
db 0EAh	;   *
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db 0FEh	;   *
db  46h	; F
db 0F0h	;   *
db  80h	;   *
db  7Eh	; ~
db 0F0h	;   *
db    6
db  73h	; s
db    3
db 0E9h	;   *
db  18h
db 0FFh
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  90h	;   *
db  8Bh	;   *
db  46h	; F
db 0F8h	;   *
db 0A3h	;   *
db 0E4h	;   *
db 0B8h	;   *
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
push	si
mov	si, [bp+8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+6]
sub	bh, bh
mov	bl, [bx+si-4630h]
mov	al, [bp+0Ah]
cmp	[bx-3CFCh], al
ja	short near ptr loc_1C345+3
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jnz	short near ptr loc_1C345+3
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short near ptr loc_1C34A+1
mov	ax, 1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	byte ptr [bp-6], 0
mov	al, [bp+6]
mov	[bp-2],	al
mov	al, [bp+8]
mov	[bp-4],	al
mov	al, [bp-6]
push	ax
lea	ax, [bp-4]
push	ax
lea	ax, [bp-2]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr loc_1C396+2
mov	bx, [bp+0Ah]
mov	al, [bx+17h]
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
push	cs
call	loc_1C2F4
add	sp, 6
or	ax, ax
jz	short near ptr loc_1C3A3+1
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 6
jb	short near ptr loc_1C359+1
jmp	short near ptr loc_1C3A9+1
;     ***************************************************************************
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
mov	ax, 7
push	ax
mov	ax, 8
push	ax
mov	ax, 19h
push	ax
mov	ax, 0A0h ; '  *'
push	ax
mov	ax, 36h	; '6'
push	ax
call	far ptr	juqiang_draw_shape_to_video_buffer
mov	sp, bp
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
push	word ptr [bx-3C80h]
mov	bx, ax
mov	al, [bx-3C6Ah]
sub	ah, ah
push	ax
mov	ax, 0C36Dh
push	ax
call	far ptr	3EFh:6E8h
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	byte ptr [bp-6], 0
mov	al, [bp+6]
mov	[bp-2],	al
mov	al, [bp+8]
mov	[bp-4],	al
mov	al, [bp-6]
push	ax
lea	ax, [bp-4]
push	ax
lea	ax, [bp-2]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr loc_1C437+3
mov	al, [bp+0Ah]
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jnz	short loc_1C446
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 6
jb	short loc_1C3FE
jmp	short loc_1C44E
;     ***************************************************************************
db  90h	;   *
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
push	si
cmp	byte ptr [bp+6], 6
jnz	short loc_1C46C
mov	bl, [bp+8]
sub	bh, bh
mov	al, [bx-3572h]
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  8Bh	;   *
db  76h	; v
db    6
db  81h	;   *
db 0E6h	;   *
db 0FFh
db    0
db  8Bh	;   *
db 0C6h	;   *
db 0D1h	;   *
db 0E6h	;   *
db    3
db 0F0h	;   *
db 0D1h	;   *
db 0E6h	;   *
db  8Ah	;   *
db  5Eh	; ^
db    8
db  2Ah	; *
db 0FFh
db  8Ah	;   *
db  80h	;   *
db 0A2h	;   *
db 0C3h	;   *
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  9Ah	;   *
db 0D2h	;   *
db    3
db 0C5h	;   *
db  23h	; #
db 0B8h	;   *
db 0C6h	;   *
db 0C3h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
call	loc_23FF8+2
sub	al, al
mov	[bp-6],	al
mov	[bp-2],	al
mov	bx, 0CEB2h
mov	[bp-4],	bx
cmp	word ptr [bx], 0
jz	short loc_1C513
mov	bl, [bp-6]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-3390h], 0
jz	short near ptr unk_1C504
mov	al, [bp-2]
mov	cl, 0Ah
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
add	ax, 6
mov	cl, 3
shl	ax, cl
push	ax
mov	ax, 36h	; '6'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	bx, [bp-4]
mov	bx, [bx]
push	word ptr [bx+12h]
lea	ax, [bx+1Ch]
push	ax
mov	ax, 0C3E8h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 6
inc	byte ptr [bp-2]
inc	byte ptr [bp-6]
add	word ptr [bp-4], 2
mov	bx, [bp-4]
cmp	word ptr [bx], 0
jnz	short near ptr loc_1C4B9+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	byte ptr [bp-2], 0
cmp	word ptr [bp+6], 0
jz	short near ptr loc_1C553+1
push	word ptr [bp+6]
call	far ptr	542h:1D8h
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1C547+1
mov	ax, [bp+6]
mov	bl, [bp-2]
sub	bh, bh
shl	bx, 1
mov	[bx-314Eh], ax
inc	byte ptr [bp-2]
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp+6],	ax
or	ax, ax
jnz	short near ptr loc_1C526+2
mov	al, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
call	loc_23FF8+2
mov	ax, 24h	; '$'
push	ax
mov	ax, 36h	; '6'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 0C3FAh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 2
mov	bl, [bp+6]
mov	[bp-4],	bl
sub	bh, bh
shl	bx, 1
mov	ax, [bx-314Eh]
mov	[bp-2],	ax
or	ax, ax
jz	short near ptr loc_1C5FA+1
mov	al, [bp+6]
sub	ah, ah
add	ax, 5
mov	[bp-6],	ax
mov	al, [bp-4]
sub	ah, ah
cmp	[bp-6],	ax
jle	short near ptr loc_1C5FA+1
mov	cl, 5
div	cl
mov	al, ah
sub	ah, ah
mov	cl, 4
shl	ax, cl
add	ax, 34h	; '4'
push	ax
mov	ax, 35h	; '5'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	bx, [bp-2]
push	word ptr [bx+12h]
mov	al, [bx+5]
sub	ah, ah
push	ax
lea	ax, [bx+1Ch]
push	ax
mov	al, [bp-4]
sub	ah, ah
inc	ax
push	ax
mov	ax, 0C41Fh
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Ah
inc	byte ptr [bp-4]
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_1C5A1+2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 16h
push	word ptr [bp+6]
push	cs
call	loc_1C518
add	sp, 2
mov	[bp-0Ch], al
cmp	al, 5
jbe	short loc_1C61C
sub	al, al
jmp	short near ptr loc_1C61C+2
;     ***************************************************************************
db  90h	;   *
db 0B0h	;   *
db    1
db  88h	;   *
db  46h	; F
db 0ECh	;   *
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db 0B1h	;   *
db    5
db  2Ah	; *
db 0E4h	;   *
db 0F6h	;   *
db 0F1h	;   *
db  88h	;   *
db  46h	; F
db 0F6h	;   *
db 0B8h	;   *
db  31h	; 1
db 0C4h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db  80h	;   *
db  7Eh	; ~
db 0F4h	;   *
db    0
db  75h	; u
db  0Bh
db  9Ah	;   *
db 0D2h	;   *
db    3
db 0C5h	;   *
db  23h	; #
db 0B8h	;   *
db  3Ah	; :
db 0C4h	;   *
db 0E9h	;   *
db  57h	; W
db    1
db  8Ah	;   *
db  46h	; F
db    8
db  24h	; $
db    1
db  3Ch	; <
db    1
db  1Ah
db 0C0h	;   *
db 0F6h	;   *
db 0D8h	;   *
db  88h	;   *
db  46h	; F
db 0F8h	;   *
db 0C6h	;   *
db  46h	; F
db 0EAh	;   *
db    0
db  8Ah	;   *
db  46h	; F
db 0EAh	;   *
db  8Bh	;   *
db 0C8h	;   *
db 0D0h	;   *
db 0E0h	;   *
db 0D0h	;   *
db 0E0h	;   *
db    2
db 0C1h	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db 0F0h	;   *
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db  9Ah	;   *
db 0D2h	;   *
db    3
db 0C5h	;   *
db  23h	; #
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0ECh	;   *
db  50h	; P
db 0B8h	;   *
db  5Dh	; ]
db 0C4h	;   *
db  50h	; P
db  9Ah	;   *
db 0B2h	;   *
db    9
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    6
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db 0BEh	;   *
db    0
db  40h	; @
db  75h	; u
db    3
db 0E9h	;   *
db  0Dh
db    1
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db  87h	;   *
db 0B0h	;   *
db 0CEh	;   *
db  89h	;   *
db  46h	; F
db 0FAh	;   *
db 0B8h	;   *
db  64h	; d
db    0
db  50h	; P
db  8Ah	;   *
db  5Eh	; ^
db 0F8h	;   *
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db 0FFh
db 0B7h	;   *
db 0A1h	;   *
db 0CAh	;   *
db  9Ah	;   *
db  8Ah	;   *
db    1
db  61h	; a
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  89h	;   *
db  46h	; F
db 0F0h	;   *
db  9Ah	;   *
db 0D2h	;   *
db    3
db 0C5h	;   *
db  23h	; #
db 0FFh
db  76h	; v
db 0F0h	;   *
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db 0B8h	;   *
db  6Ah	; j
db 0C4h	;   *
db  50h	; P
db  9Ah	;   *
db 0B2h	;   *
db    9
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    6
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  3Dh	; =
db 0FFh
db 0FFh
db  75h	; u
db    3
db 0E9h	;   *
db  7Ah	; z
db 0FFh
db 0B8h	;   *
db  7Fh	; 
db 0C4h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db  9Ah	;   *
db  24h	; $
db  0Ah
db 0EFh	;   *
db    3
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db  62h	; b
db 0FFh
db 0C6h	;   *
db    6
db 0E2h	;   *
db 0B8h	;   *
db    1
db  8Bh	;   *
db  46h	; F
db 0FEh	;   *
db  8Ah	;   *
db  5Eh	; ^
db 0F8h	;   *
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db  29h	; )
db  87h	;   *
db 0A1h	;   *
db 0CAh	;   *
db  50h	; P
db 0FFh
db  76h	; v
db 0FAh	;   *
db  9Ah	;   *
db 0D2h	;   *
db    0
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  88h	;   *
db  46h	; F
db 0F2h	;   *
db  3Ch	; <
db    2
db  73h	; s
db  6Ah	; j
db 0FFh
db  76h	; v
db 0FAh	;   *
db  9Ah	;   *
db  6Eh	; n
db    0
db  44h	; D
db  25h	; %
db  83h	;   *
db 0C4h	;   *
db    2
db  8Ah	;   *
db  46h	; F
db 0F2h	;   *
db  50h	; P
db 0FFh
db  76h	; v
db 0FAh	;   *
db  9Ah	;   *
db  2Ah	; *
db    1
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db 0FFh
db  36h	; 6
db 0E6h	;   *
db 0B8h	;   *
db 0FFh
db  76h	; v
db 0FAh	;   *
db  9Ah	;   *
db 0C2h	;   *
db    3
db  72h	; r
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  17h
db 0B0h	;   *
db  64h	; d
db 0EBh	;   *
db  20h
db  90h	;   *
db 0FEh	;   *
db  46h	; F
db 0EAh	;   *
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  38h	; 8
db  46h	; F
db 0EAh	;   *
db  77h	; w
db    3
db 0E9h	;   *
db 0FCh	;   *
db 0FEh	;   *
db 0E9h	;   *
db 0F5h	;   *
db 0FEh	;   *
db  90h	;   *
db 0B0h	;   *
db  14h
db  50h	; P
db  9Ah	;   *
db 0FAh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db    4
db  50h	; P
db  50h	; P
db  8Bh	;   *
db  1Eh
db 0E6h	;   *
db 0B8h	;   *
db  8Ah	;   *
db  47h	; G
db  0Ah
db  50h	; P
db 0FFh
db  76h	; v
db 0FAh	;   *
db  9Ah	;   *
db    6
db    0
db  44h	; D
db  25h	; %
db  83h	;   *
db 0C4h	;   *
db    6
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  9Ah	;   *
db 0D2h	;   *
db    3
db 0C5h	;   *
db  23h	; #
db  8Bh	;   *
db  46h	; F
db 0FAh	;   *
db    5
db  1Ch
db    0
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db 0B8h	;   *
db  81h	;   *
db 0C4h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
push	word ptr loc_1B8E3+3
call	loc_23834
add	sp, 2
mov	[bp-4],	al
push	word ptr loc_1B8E3+3
call	loc_24448+2
add	sp, 2
or	ax, ax
jnz	short loc_1C7DA
push	cs
call	near ptr loc_1C489+1
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
db 0F6h	;   *
db  46h	; F
db 0FCh	;   *
db    1
db  74h	; t
db    6
db 0A1h	;   *
db  8Ah	;   *
db 0CBh	;   *
db 0EBh	;   *
db    4
db  90h	;   *
db 0A1h	;   *
db  76h	; v
db 0CBh	;   *
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db 0FFh
db  76h	; v
db 0FEh	;   *
db  0Eh
db 0E8h	;   *
db    9
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  80h	;   *
db  3Eh	; >
db 0D5h	;   *
db 0B8h	;   *
db 0FFh
db  75h	; u
db    5
db  9Ah	;   *
db  3Ch	; <
db    7
db 0C5h	;   *
db  23h	; #
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, [bp+6]
mov	ax, [bx+2]
mov	[bp-2],	ax
or	ax, ax
jz	short loc_1C840
push	ax
call	far ptr	542h:7Eh
add	sp, 2
or	ax, ax
jnz	short near ptr loc_1C836+2
mov	bx, [bp-2]
mov	ax, [bx]
mov	[bp-2],	ax
or	ax, ax
jnz	short near ptr loc_1C81B+2
jmp	short loc_1C840
;     ***************************************************************************
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
push	si
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
mov	cx, [bx-314Eh]
mov	[bp-2],	cx
push	cx
mov	si, ax
call	far ptr	542h:7Eh
add	sp, 2
cmp	ax, 1
sbb	ax, ax
and	al, 0FCh
add	ax, 7
push	ax
call	far ptr	3EFh:458h
add	sp, 2
mov	al, [bp+6]
mov	cl, 5
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
mov	cl, 4
shl	ax, cl
add	ax, 34h	; '4'
push	ax
mov	ax, 36h	; '6'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	bx, [bp-2]
push	word ptr [bx+12h]
mov	al, [bx+5]
sub	ah, ah
push	ax
lea	ax, [bx+1Ch]
push	ax
lea	ax, [si+1]
push	ax
mov	ax, 0C49Ch
push	ax
call	far ptr	3EFh:6E8h
add	sp, 0Ah
cmp	word ptr [bp+8], 0
jz	short loc_1C90E
mov	al, [bp+6]
mov	cl, 5
sub	ah, ah
div	cl
mov	al, ah
sub	ah, ah
mov	cl, 4
shl	ax, cl
add	ax, 34h	; '4'
push	ax
mov	ax, 35h	; '5'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 0C4B2h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	bl, [bp+6]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-3390h], 0
jz	short loc_1C902
mov	ax, 0C4B7h
jmp	short loc_1C905
;     ***************************************************************************
db 0B8h	;   *
db 0B9h	;   *
db 0C4h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db 0B8h	;   *
db 0BBh	;   *
db 0C4h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
call	loc_23FF8+2
mov	ax, 24h	; '$'
push	ax
mov	ax, 36h	; '6'
push	ax
call	far ptr	3EFh:434h
add	sp, 4
mov	ax, 0C4C0h
push	ax
call	far ptr	3EFh:6E8h
add	sp, 2
mov	al, [bp+6]
dec	al
mov	[bp-2],	al
push	word ptr [bp+8]
mov	al, [bp-2]
push	ax
push	cs
call	loc_1C846
add	sp, 4
inc	byte ptr [bp-2]
mov	bl, [bp-2]
sub	bh, bh
shl	bx, 1
cmp	word ptr [bx-314Eh], 0
jz	short near ptr unk_1C97B
mov	al, [bp-2]
mov	cl, 5
sub	ah, ah
div	cl
or	ah, ah
jnz	short near ptr loc_1C94E+1
mov	al, [bp-2]
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Ch
cmp	byte ptr [bp+6], 5
jbe	short near ptr loc_1C98F+3
sub	al, al
jmp	short near ptr loc_1C98F+5
;     ***************************************************************************
db 0B0h	;   *
db    1
db  88h	;   *
db  46h	; F
db 0FAh	;   *
db  9Ah	;   *
db 0E2h	;   *
db    2
db  0Dh
db    6
db 0C6h	;   *
db  46h	; F
db 0FEh	;   *
db    0
db 0B8h	;   *
db    1
db    0
db  50h	; P
db 0B0h	;   *
db    1
db  50h	; P
db  0Eh
db 0E8h	;   *
db  75h	; u
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    4
db  88h	;   *
db  46h	; F
db 0F6h	;   *
db 0C6h	;   *
db  46h	; F
db 0F4h	;   *
db    1
db 0E9h	;   *
db  85h	;   *
db    0
db  40h	; @
db  75h	; u
db    3
db 0E9h	;   *
db 0DCh	;   *
db    0
db 0FFh
db  4Eh	; N
db 0F8h	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db  8Bh	;   *
db  87h	;   *
db 0B2h	;   *
db 0CEh	;   *
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db  7Eh	; ~
db    0
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  63h	; c
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db  83h	;   *
db 0BFh	;   *
db  70h	; p
db 0CCh	;   *
db    0
db  74h	; t
db  10h
db 0FEh	;   *
db  4Eh	; N
db 0FEh	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0C7h	;   *
db  87h	;   *
db  70h	; p
db 0CCh	;   *
db    0
db    0
db 0EBh	;   *
db  25h	; %
db  8Ah	;   *
db  46h	; F
db    8
db  38h	; 8
db  46h	; F
db 0FEh	;   *
db  74h	; t
db  3Fh	; ?
db 0FFh
db  76h	; v
db 0FCh	;   *
db  9Ah	;   *
db  7Eh	; ~
db    0
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  0Eh
db 0FEh	;   *
db  46h	; F
db 0FEh	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0C7h	;   *
db  87h	;   *
db  70h	; p
db 0CCh	;   *
db    1
db    0
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  2Ah	; *
db 0E4h	;   *
db  3Bh	; ;
db  46h	; F
db 0F8h	;   *
db  76h	; v
db  18h
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  48h	; H
db  3Bh	; ;
db  46h	; F
db 0F8h	;   *
db  77h	; w
db  0Fh
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db  0Ch
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  9Ah	;   *
db 0D2h	;   *
db    3
db 0C5h	;   *
db  23h	; #
db 0B8h	;   *
db 0E1h	;   *
db 0C4h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db  8Ah	;   *
db  46h	; F
db    6
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db 0FFh
db  76h	; v
db  0Ah
db  9Ah	;   *
db 0B2h	;   *
db    9
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    6
db  89h	;   *
db  46h	; F
db 0F8h	;   *
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db  4Bh	; K
db 0FFh
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  8Ah	;   *
db  5Eh	; ^
db 0F6h	;   *
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db  83h	;   *
db 0BFh	;   *
db 0B2h	;   *
db 0CEh	;   *
db    0
db  75h	; u
db    5
db 0B0h	;   *
db    1
db 0EBh	;   *
db    6
db  90h	;   *
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db 0FEh	;   *
db 0C0h	;   *
db  88h	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db  8Fh	;   *
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  88h	;   *
db  46h	; F
db 0F6h	;   *
db 0EBh	;   *
db 0A4h	;   *
db  90h	;   *
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
cmp	byte ptr [bp+6], 0
jnz	short loc_1CAB0
mov	al, byte ptr loc_1B8D7
jmp	short near ptr loc_1CAB1+2
;     ***************************************************************************
db 0A0h	;   *
db 0D9h	;   *
db 0B8h	;   *
db 0A2h	;   *
db 0DFh	;   *
db 0B8h	;   *
db  80h	;   *
db  7Eh	; ~
db    6
db    0
db  75h	; u
db    8
db 0A0h	;   *
db 0D8h	;   *
db 0B8h	;   *
db 0A2h	;   *
db 0E0h	;   *
db 0B8h	;   *
db  5Dh	; ]
db 0CBh	;   *
db 0A0h	;   *
db 0DAh	;   *
db 0B8h	;   *
db 0A2h	;   *
db 0E0h	;   *
db 0B8h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Eh
push	si
mov	word ptr [bp-8], 0CB72h
sub	ax, ax
push	ax
push	word ptr loc_1CB76
call	loc_2461A
add	sp, 4
mov	[bp-0Eh], al
cmp	al, 0Ah
jb	short near ptr word_1CAF0+1
jmp	near ptr loc_1CC77+2
;     ***************************************************************************
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db 0FFh
db  77h	; w
db    2
db  9Ah	;   *
db 0C6h	;   *
db    1
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db  73h	; s
db    1
db 0B0h	;   *
db  0Ah
db  2Ah	; *
db  46h	; F
db 0F2h	;   *
db  88h	;   *
db  46h	; F
db 0F6h	;   *
db 0B8h	;   *
db 0EAh	;   *
db 0C4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db 0B0h	;   *
db    1
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db 0FFh
db  77h	; w
db    2
db  9Ah	;   *
db  82h	;   *
db    3
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    4
db  50h	; P
db  0Eh
db 0E8h	;   *
db  56h	; V
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    6
db  0Ah
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db  3Eh	; >
db    1
db  9Ah	;   *
db 0D2h	;   *
db    3
db 0C5h	;   *
db  23h	; #
db  9Ah	;   *
db  24h	; $
db  0Ah
db 0EFh	;   *
db    3
db  0Bh
db 0C0h	;   *
db  74h	; t
db 0CAh	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db 0FFh
db  77h	; w
db    2
db  9Ah	;   *
db  5Ah	; Z
db    2
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  2Ah	; *
db 0C0h	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db  49h	; I
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db  0Eh
db 0E8h	;   *
db  3Ch	; <
db 0F9h	;   *
db  2Ah	; *
db 0C0h	;   *
db  88h	;   *
db  46h	; F
db 0F4h	;   *
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db 0BBh	;   *
db 0B2h	;   *
db 0CEh	;   *
db  89h	;   *
db  5Eh	; ^
db 0FCh	;   *
db  83h	;   *
db  3Fh	; ?
db    0
db  75h	; u
db    3
db 0E9h	;   *
db 0F0h	;   *
db    0
db  8Ah	;   *
db  5Eh	; ^
db 0F4h	;   *
db  2Ah	; *
db 0FFh
db 0D1h	;   *
db 0E3h	;   *
db  83h	;   *
db 0BFh	;   *
db  70h	; p
db 0CCh	;   *
db    0
db  75h	; u
db    3
db 0E9h	;   *
db 0CDh	;   *
db    0
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db 0FFh
db  37h	; 7
db  9Ah	;   *
db    6
db    0
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db 0FFh
db  77h	; w
db    2
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db 0FFh
db  37h	; 7
db  9Ah	;   *
db 0B0h	;   *
db    0
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db 0ADh	;   *
db    0
db  8Bh	;   *
db  1Eh
db 0E6h	;   *
db 0B8h	;   *
db  83h	;   *
db  3Fh	; ?
db    0
db  75h	; u
db  19h
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db 0FFh
db  37h	; 7
db  9Ah	;   *
db 0D8h	;   *
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db    8
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db  8Bh	;   *
db    7
db 0A3h	;   *
db 0E8h	;   *
db 0B8h	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db 0FFh
db  37h	; 7
db  8Bh	;   *
db  76h	; v
db 0F8h	;   *
db 0FFh
db  74h	; t
db    2
db  9Ah	;   *
db    6
db    0
db 0AAh	;   *
db  24h	; $
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db 0FFh
db  37h	; 7
db 0FFh
db  74h	; t
db    4
db  9Ah	;   *
db  44h	; D
db    0
db 0AAh	;   *
db  24h	; $
db  83h	;   *
db 0C4h	;   *
db    4
db  2Ah	; *
db 0C0h	;   *
db  50h	; P
db 0A0h	;   *
db 0E0h	;   *
db 0B8h	;   *
db  50h	; P
db 0A0h	;   *
db 0DFh	;   *
db 0B8h	;   *
db  50h	; P
db  9Ah	;   *
db  5Eh	; ^
db    0
db  57h	; W
db  22h	; "
db  83h	;   *
db 0C4h	;   *
db    6
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db 0FFh
db  37h	; 7
db  9Ah	;   *
db  16h
db    8
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db 0FFh
db  37h	; 7
db  9Ah	;   *
db    0
db    7
db  9Dh	;   *
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db 0FFh
db  37h	; 7
db  9Ah	;   *
db  22h	; "
db    0
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db 0FFh
db  37h	; 7
db  9Ah	;   *
db 0D8h	;   *
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  0Fh
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db  8Bh	;   *
db  1Fh
db 0FFh
db  37h	; 7
db  9Ah	;   *
db  16h
db    8
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db 0FEh	;   *
db  46h	; F
db 0FEh	;   *
db  83h	;   *
db  46h	; F
db 0FCh	;   *
db    2
db 0FEh	;   *
db  46h	; F
db 0F4h	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db  83h	;   *
db  3Fh	; ?
db    0
db  74h	; t
db    3
db 0E9h	;   *
db  10h
db 0FFh
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db 0FFh
db  77h	; w
db    2
db  9Ah	;   *
db 0A8h	;   *
db    1
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  9Ah	;   *
db  3Ch	; <
db    7
db 0C5h	;   *
db  23h	; #
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
call	loc_24020+2
push	word ptr loc_1B8E3+3
call	loc_23834
add	sp, 2
dec	al
jz	short loc_1CCAE
push	word ptr loc_1B8E3+3
call	loc_24448+2
add	sp, 2
or	ax, ax
jnz	short loc_1CCAE
mov	ax, 0C4F4h
jmp	short loc_1CCDD
;     ***************************************************************************
db 0FFh
db  36h	; 6
db 0E6h	;   *
db 0B8h	;   *
db  9Ah	;   *
db    4
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db 0FEh	;   *
db 0C8h	;   *
db  74h	; t
db    6
db 0B8h	;   *
db  24h	; $
db 0C5h	;   *
db 0EBh	;   *
db  1Ah
db  90h	;   *
db 0FFh
db  36h	; 6
db 0E6h	;   *
db 0B8h	;   *
db  9Ah	;   *
db 0FAh	;   *
db    7
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db    6
db 0B8h	;   *
db  57h	; W
db 0C5h	;   *
db 0EBh	;   *
db    4
db  90h	;   *
db 0B8h	;   *
db  8Ah	;   *
db 0C5h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db  9Ah	;   *
db  9Ah	;   *
db    7
db 0EFh	;   *
db    3
db  2Ah	; *
db 0E4h	;   *
db  3Dh	; =
db  32h	; 2
db    0
db  74h	; t
db  2Ah	; *
db  77h	; w
db 0F2h	;   *
db  2Ch	; ,
db  0Dh
db  74h	; t
db  28h	; (
db  2Ch	; ,
db  24h	; $
db  75h	; u
db 0EAh	;   *
db 0FFh
db  36h	; 6
db 0E6h	;   *
db 0B8h	;   *
db  9Ah	;   *
db    4
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db 0FEh	;   *
db 0C8h	;   *
db  75h	; u
db    8
db  0Eh
db 0E8h	;   *
db 0BCh	;   *
db 0FDh	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  0Eh
db 0E8h	;   *
db  72h	; r
db 0F7h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  0Eh
db 0E8h	;   *
db  8Ch	;   *
db 0FAh	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
mov	bl, [bp+6]
sub	bh, bh
mov	ax, bx
shl	bx, 1
shl	bx, 1
add	bx, ax
shl	bx, 1
push	word ptr [bx-348Ch]
call	far ptr	525h:64h
add	sp, 2
mov	[bp-2],	al
mov	ax, 0C5BAh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	bx, 0CA62h
mov	[bp-6],	bx
cmp	word ptr [bx], 0
jz	short near ptr loc_1CD9E+2
push	word ptr [bx]
call	far ptr	525h:64h
add	sp, 2
mov	[bp-8],	ax
cmp	al, [bp-2]
jnz	short near ptr loc_1CD75+1
mov	ax, 2
jmp	short loc_1CD78
;     ***************************************************************************
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db  9Ah	;   *
db  58h	; X
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  2Ah	; *
db 0E4h	;   *
db  40h	; @
db  50h	; P
db 0B8h	;   *
db 0D3h	;   *
db 0C5h	;   *
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db  83h	;   *
db  46h	; F
db 0FAh	;   *
db    2
db  8Bh	;   *
db  5Eh	; ^
db 0FAh	;   *
db  83h	;   *
db  3Fh	; ?
db    0
db  75h	; u
db 0BFh	;   *
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db  9Ah	;   *
db  58h	; X
db    4
db 0EFh	;   *
db    3
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 2
mov	bx, 0CA62h
mov	[bp-2],	bx
cmp	word ptr [bx], 0
jz	short loc_1CDE2
push	word ptr [bx]
call	far ptr	525h:64h
add	sp, 2
sub	al, [bp+6]
cmp	al, 0FFh
jz	short near ptr loc_1CDDB+1
add	word ptr [bp-2], 2
mov	bx, [bp-2]
cmp	word ptr [bx], 0
jnz	short near ptr loc_1CDBC+1
jmp	short loc_1CDE2
;     ***************************************************************************
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	bx, [bp+6]
mov	ax, [bx]
mov	[bp-4],	ax
or	bx, bx
jnz	short near ptr loc_1CDFD+2
jmp	near ptr loc_1CE93+1
;     ***************************************************************************
db 0B1h	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Ah	;   *
db  47h	; G
db  18h
db 0D2h	;   *
db 0E8h	;   *
db 0A2h	;   *
db 0DFh	;   *
db 0B8h	;   *
db  8Ah	;   *
db  47h	; G
db  18h
db  24h	; $
db  0Fh
db 0A2h	;   *
db 0E0h	;   *
db 0B8h	;   *
db  9Ah	;   *
db 0D2h	;   *
db    3
db 0C5h	;   *
db  23h	; #
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  0Eh
db 0E8h	;   *
db    3
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  46h	; F
db    6
db    5
db  1Ch
db    0
db  50h	; P
db 0B8h	;   *
db 0D7h	;   *
db 0C5h	;   *
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0B8h	;   *
db  29h	; )
db    0
db  50h	; P
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  9Ah	;   *
db  98h	;   *
db    9
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db 0A1h	;   *
db 0E6h	;   *
db 0B8h	;   *
db  39h	; 9
db  46h	; F
db    6
db  75h	; u
db    6
db  83h	;   *
db  7Eh	; ~
db 0FEh	;   *
db 0FFh
db  74h	; t
db  36h	; 6
db 0FFh
db  76h	; v
db 0FEh	;   *
db  0Eh
db 0E8h	;   *
db  4Dh	; M
db 0FFh
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db  1Dh
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db 0FFh
db  76h	; v
db 0FEh	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  10h
db    1
db  56h	; V
db  25h	; %
db  83h	;   *
db 0C4h	;   *
db    6
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db  89h	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  83h	;   *
db  7Eh	; ~
db    6
db    0
db  74h	; t
db    3
db 0E9h	;   *
db  73h	; s
db 0FFh
db 0EBh	;   *
db    6
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
mov	ax, word ptr loc_1B8E3+3
mov	[bp-4],	ax
call	loc_24020+2
mov	ax, 0C5F2h
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
push	word ptr [bp-4]
call	loc_23834
add	sp, 2
mov	[bp-8],	al
push	word ptr [bp-4]
call	loc_23487+1
add	sp, 2
mov	[bp-6],	al
push	word ptr [bp-4]
call	loc_2580F+1
add	sp, 2
or	ax, ax
jz	short near ptr loc_1CEFE+2
mov	ax, 0C5FBh
push	ax
call	far ptr	3EFh:6C0h
add	sp, 2
mov	ax, 1
push	ax
call	far ptr	57Ch:96h
add	sp, 2
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db 0FFh
db  76h	; v
db 0FCh	;   *
db  9Ah	;   *
db 0FAh	;   *
db    7
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  57h	; W
db 0B8h	;   *
db  0Bh
db 0C6h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db  9Ah	;   *
db 0D6h	;   *
db    9
db 0EFh	;   *
db    3
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db  93h	;   *
db    0
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db 0FFh
db  76h	; v
db 0FCh	;   *
db  0Eh
db 0E8h	;   *
db 0B4h	;   *
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  7Dh	; }
db 0C6h	;   *
db    6
db 0E2h	;   *
db 0B8h	;   *
db    1
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  24h	; $
db    1
db  3Ch	; <
db    1
db  1Ah
db 0C9h	;   *
db  80h	;   *
db 0E1h	;   *
db    4
db  80h	;   *
db 0C1h	;   *
db    2
db  51h	; Q
db  3Ch	; <
db    1
db  1Ah
db 0C0h	;   *
db 0FEh	;   *
db 0C0h	;   *
db  50h	; P
db  9Ah	;   *
db  98h	;   *
db    6
db 0AAh	;   *
db  24h	; $
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  9Ah	;   *
db 0D2h	;   *
db    3
db 0C5h	;   *
db  23h	; #
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db 0B1h	;   *
db 0FDh	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db 0B8h	;   *
db  1Fh
db 0C6h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db 0B8h	;   *
db  29h	; )
db    0
db  50h	; P
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  9Ah	;   *
db  98h	;   *
db    9
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  3Dh	; =
db 0FFh
db 0FFh
db  74h	; t
db  20h
db  50h	; P
db  0Eh
db 0E8h	;   *
db  0Dh
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0C0h	;   *
db 0C6h	;   *
db    6
db 0E2h	;   *
db 0B8h	;   *
db    1
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db 0FFh
db  76h	; v
db 0FEh	;   *
db 0FFh
db  76h	; v
db 0FCh	;   *
db  9Ah	;   *
db  10h
db    1
db  56h	; V
db  25h	; %
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
test	byte ptr [bp+0Ah], 80h
jz	short loc_1CFCE
mov	al, 0FFh
jmp	short near ptr loc_1CFD5+4
;     ***************************************************************************
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db    4
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db  80h	;   *
db  66h	; f
db  0Ah
db  7Fh	; 
db  83h	;   *
db  7Eh	; ~
db    6
db    0
db  75h	; u
db    3
db 0E9h	;   *
db 0E1h	;   *
db    0
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Bh	;   *
db    7
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  53h	; S
db  9Ah	;   *
db 0B0h	;   *
db    2
db  56h	; V
db  25h	; %
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db 0ADh	;   *
db    0
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0CAh	;   *
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  7Ah	; z
db  8Ah	;   *
db  5Eh	; ^
db  0Ah
db  2Ah	; *
db 0FFh
db  8Bh	;   *
db 0C3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db    3
db 0D8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db  83h	;   *
db 0BFh	;   *
db  7Ah	; z
db 0CBh	;   *
db    0
db  75h	; u
db  64h	; d
db 0B1h	;   *
db    4
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Ah	;   *
db  47h	; G
db  18h
db 0D2h	;   *
db 0E8h	;   *
db 0A2h	;   *
db 0DFh	;   *
db 0B8h	;   *
db  8Ah	;   *
db  47h	; G
db  18h
db  24h	; $
db  0Fh
db 0A2h	;   *
db 0E0h	;   *
db 0B8h	;   *
db  9Ah	;   *
db 0D2h	;   *
db    3
db 0C5h	;   *
db  23h	; #
db  8Ah	;   *
db  46h	; F
db  0Ah
db  50h	; P
db  0Eh
db 0E8h	;   *
db 0DCh	;   *
db 0FCh	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  46h	; F
db    6
db    5
db  1Ch
db    0
db  50h	; P
db 0B8h	;   *
db  3Eh	; >
db 0C6h	;   *
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0B8h	;   *
db  29h	; )
db    0
db  50h	; P
db 0B8h	;   *
db    1
db    0
db  50h	; P
db 0B8h	;   *
db  45h	; E
db 0C6h	;   *
db  50h	; P
db  9Ah	;   *
db 0B2h	;   *
db    9
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    6
db  89h	;   *
db  46h	; F
db 0FAh	;   *
db  3Dh	; =
db 0FFh
db 0FFh
db  74h	; t
db 0ACh	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db  2Dh	; -
db 0FDh	;   *
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  75h	; u
db 0A0h	;   *
db 0EBh	;   *
db  12h
db  90h	;   *
db  90h	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0ECh	;   *
db    1
db  56h	; V
db  25h	; %
db  83h	;   *
db 0C4h	;   *
db    2
db  2Ah	; *
db 0E4h	;   *
db  89h	;   *
db  46h	; F
db 0FAh	;   *
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db 0FFh
db  76h	; v
db 0FAh	;   *
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db  10h
db    1
db  56h	; V
db  25h	; %
db  83h	;   *
db 0C4h	;   *
db    6
db 0EBh	;   *
db  0Fh
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db 0FFh
db  76h	; v
db    6
db  9Ah	;   *
db 0B0h	;   *
db    7
db 0AAh	;   *
db  24h	; $
db  83h	;   *
db 0C4h	;   *
db    4
db  8Bh	;   *
db  46h	; F
db 0FEh	;   *
db  89h	;   *
db  46h	; F
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db  1Fh
db 0FFh
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 14h
push	si
mov	word ptr [bp-0Eh], 0CAA1h
cmp	byte ptr loc_1B8D2+3, 1
jnz	short near ptr loc_1D0E4+2
sub	al, al
jmp	short loc_1D0E8
;     ***************************************************************************
db  90h	;   *
db 0B0h	;   *
db    2
db  88h	;   *
db  46h	; F
db 0FAh	;   *
db  80h	;   *
db  3Eh	; >
db 0D5h	;   *
db 0B8h	;   *
db    1
db  75h	; u
db    4
db 0B0h	;   *
db    2
db 0EBh	;   *
db    2
db  2Ah	; *
db 0C0h	;   *
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db  9Ah	;   *
db    0
db    0
db  72h	; r
db  2Bh	; +
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db  2Bh	; +
db 0C0h	;   *
db 0A3h	;   *
db  32h	; 2
db  35h	; 5
db 0A3h	;   *
db  30h	; 0
db  35h	; 5
db 0C6h	;   *
db  46h	; F
db 0F0h	;   *
db    0
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  25h	; %
db 0FEh	;   *
db    0
db 0D1h	;   *
db 0E0h	;   *
db  8Ah	;   *
db  4Eh	; N
db 0FCh	;   *
db  2Ah	; *
db 0EDh	;   *
db    3
db 0C1h	;   *
db  8Bh	;   *
db 0C8h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    3
db 0C1h	;   *
db  89h	;   *
db  46h	; F
db 0EEh	;   *
db  8Bh	;   *
db  76h	; v
db 0EEh	;   *
db  8Ah	;   *
db  5Eh	; ^
db 0F0h	;   *
db  2Ah	; *
db 0FFh
db  8Ah	;   *
db  80h	;   *
db 0B0h	;   *
db 0BBh	;   *
db  88h	;   *
db  46h	; F
db 0F4h	;   *
db  3Ch	; <
db    4
db  72h	; r
db    3
db 0E9h	;   *
db 0C6h	;   *
db    0
db  8Ah	;   *
db 0D8h	;   *
db  8Bh	;   *
db 0C3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db 0D1h	;   *
db 0E3h	;   *
db    3
db 0D8h	;   *
db 0D1h	;   *
db 0E3h	;   *
db  81h	;   *
db 0C3h	;   *
db  72h	; r
db 0CBh	;   *
db  89h	;   *
db  5Eh	; ^
db 0F8h	;   *
db  83h	;   *
db  7Fh	; 
db    4
db    0
db  74h	; t
db  1Ah
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db 0FFh
db  77h	; w
db    4
db  0Eh
db 0E8h	;   *
db  59h	; Y
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    6
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db 0C7h	;   *
db  47h	; G
db    4
db    0
db    0
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  24h	; $
db    1
db 0FEh	;   *
db 0C8h	;   *
db  75h	; u
db  3Dh	; =
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db 0D0h	;   *
db 0E8h	;   *
db  2Ah	; *
db 0E4h	;   *
db  8Bh	;   *
db 0F0h	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0F2h	;   *
db 0A0h	;   *
db 0E1h	;   *
db 0B8h	;   *
db  38h	; 8
db  40h	; @
db  12h
db  77h	; w
db  29h	; )
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db    4
db  80h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  8Bh	;   *
db  76h	; v
db 0F4h	;   *
db  81h	;   *
db 0E6h	;   *
db 0FFh
db    0
db  83h	;   *
db 0E6h	;   *
db 0FEh	;   *
db 0FFh
db  70h	; p
db  0Eh
db  0Eh
db 0E8h	;   *
db  16h
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    6
db  8Bh	;   *
db  5Eh	; ^
db 0F2h	;   *
db 0C7h	;   *
db  40h	; @
db  0Eh
db    0
db    0
db 0EBh	;   *
db  4Eh	; N
db  90h	;   *
db 0F6h	;   *
db  46h	; F
db 0F4h	;   *
db    1
db  75h	; u
db  47h	; G
db 0C6h	;   *
db  46h	; F
db 0F6h	;   *
db    0
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  25h	; %
db 0FEh	;   *
db    0
db  8Bh	;   *
db 0C8h	;   *
db 0D1h	;   *
db 0E0h	;   *
db    3
db 0C1h	;   *
db  89h	;   *
db  46h	; F
db 0ECh	;   *
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db    4
db  80h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  8Ah	;   *
db  5Eh	; ^
db 0F6h	;   *
db  2Ah	; *
db 0FFh
db    3
db  5Eh	; ^
db 0ECh	;   *
db 0D1h	;   *
db 0E3h	;   *
db    3
db  5Eh	; ^
db 0F2h	;   *
db 0FFh
db  77h	; w
db  2Ch	; ,
db  8Bh	;   *
db 0F3h	;   *
db  0Eh
db 0E8h	;   *
db 0CFh	;   *
db 0FDh	;   *
db  83h	;   *
db 0C4h	;   *
db    6
db  2Bh	; +
db 0C0h	;   *
db  89h	;   *
db  44h	; D
db  14h
db  89h	;   *
db  44h	; D
db  2Ch	; ,
db 0FEh	;   *
db  46h	; F
db 0F6h	;   *
db  80h	;   *
db  7Eh	; ~
db 0F6h	;   *
db    6
db  72h	; r
db 0CCh	;   *
db 0FEh	;   *
db  46h	; F
db 0F0h	;   *
db  80h	;   *
db  7Eh	; ~
db 0F0h	;   *
db    3
db  73h	; s
db    3
db 0E9h	;   *
db  18h
db 0FFh
db 0C7h	;   *
db    6
db  30h	; 0
db  35h	; 5
db 0EEh	;   *
db    2
db 0C7h	;   *
db    6
db  32h	; 2
db  35h	; 5
db  33h	; 3
db  23h	; #
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Eh
mov	cl, 4
mov	bl, [bp+8]
sub	bh, bh
shl	bx, 1
mov	bx, [bx-4708h]
mov	[bp-2],	bx
mov	al, [bx+18h]
shr	al, cl
mov	[bp-6],	al
mov	[bp-8],	al
mov	al, [bx+18h]
and	al, 0Fh
mov	[bp-0Ah], al
mov	[bp-0Ch], al
mov	al, [bp+6]
push	ax
lea	ax, [bp-0Ah]
push	ax
lea	ax, [bp-6]
push	ax
call	loc_23BE9+1
add	sp, 6
cmp	byte ptr [bp+8], 1
jnz	short loc_1D27E
mov	al, [bp-6]
cmp	byte ptr loc_1B8DB, al
jnz	short loc_1D27E
mov	al, [bp-0Ah]
cmp	byte ptr loc_1B8DB+1, al
jnz	short loc_1D27E
sub	ax, ax
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db 0FFh
db  76h	; v
db 0FEh	;   *
db  9Ah	;   *
db  48h	; H
db    0
db  57h	; W
db  22h	; "
db  83h	;   *
db 0C4h	;   *
db    6
db  80h	;   *
db  7Eh	; ~
db    8
db    1
db  1Ah
db 0C0h	;   *
db  24h	; $
db 0FDh	;   *
db    4
db    4
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  9Ah	;   *
db 0F8h	;   *
db    9
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  9Ah	;   *
db 0F8h	;   *
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  19h
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  9Ah	;   *
db 0BAh	;   *
db    4
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  50h	; P
db  9Ah	;   *
db  16h
db    8
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db 0B9h	;   *
db    8
db    0
db  51h	; Q
db 0B9h	;   *
db    4
db    0
db  51h	; Q
db  8Ah	;   *
db  4Eh	; N
db 0FAh	;   *
db  80h	;   *
db 0E1h	;   *
db    1
db  80h	;   *
db 0F9h	;   *
db    1
db  1Bh
db 0C9h	;   *
db  80h	;   *
db 0E1h	;   *
db 0F8h	;   *
db  83h	;   *
db 0C1h	;   *
db  10h
db  8Bh	;   *
db 0D1h	;   *
db 0B1h	;   *
db    4
db  8Ah	;   *
db  5Eh	; ^
db 0F6h	;   *
db  2Ah	; *
db 0FFh
db 0D3h	;   *
db 0E3h	;   *
db    3
db 0D3h	;   *
db  52h	; R
db  8Ah	;   *
db  56h	; V
db 0FAh	;   *
db  2Ah	; *
db 0F6h	;   *
db 0D1h	;   *
db 0E2h	;   *
db 0D1h	;   *
db 0E2h	;   *
db  52h	; R
db  9Ah	;   *
db  78h	; x
db    3
db    0
db    0
db  83h	;   *
db 0C4h	;   *
db  0Ah
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  24h	; $
db    1
db  3Ch	; <
db    1
db  1Bh
db 0C0h	;   *
db  24h	; $
db 0F8h	;   *
db    5
db  10h
db    0
db 0B1h	;   *
db    4
db  8Ah	;   *
db  56h	; V
db 0F6h	;   *
db  2Ah	; *
db 0F6h	;   *
db 0D3h	;   *
db 0E2h	;   *
db    3
db 0C2h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  2Ah	; *
db 0E4h	;   *
db 0D1h	;   *
db 0E0h	;   *
db 0D1h	;   *
db 0E0h	;   *
db  50h	; P
db  9Ah	;   *
db  34h	; 4
db    4
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db 0B8h	;   *
db  60h	; `
db 0C6h	;   *
db  50h	; P
db  9Ah	;   *
db 0C0h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    2
db 0FFh
db  76h	; v
db 0FEh	;   *
db  9Ah	;   *
db 0D8h	;   *
db    1
db  42h	; B
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  14h
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
db  8Bh	;   *
db  47h	; G
db  12h
db 0B9h	;   *
db  64h	; d
db    0
db  2Bh	; +
db 0D2h	;   *
db 0F7h	;   *
db 0F1h	;   *
db  50h	; P
db 0B8h	;   *
db  69h	; i
db 0C6h	;   *
db 0EBh	;   *
db  24h	; $
db  90h	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
db  8Bh	;   *
db  47h	; G
db  12h
db 0B9h	;   *
db  64h	; d
db    0
db  2Bh	; +
db 0D2h	;   *
db 0F7h	;   *
db 0F1h	;   *
db  50h	; P
db  53h	; S
db  9Ah	;   *
db 0FAh	;   *
db    7
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db    5
db 0B8h	;   *
db  6Eh	; n
db 0C6h	;   *
db 0EBh	;   *
db    3
db 0B8h	;   *
db  73h	; s
db 0C6h	;   *
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    6
db 0EFh	;   *
db    3
db  83h	;   *
db 0C4h	;   *
db    4
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db  5Eh	; ^
db    7
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    6
db 0B8h	;   *
db  14h
db    0
db  50h	; P
db  9Ah	;   *
db  5Eh	; ^
db    0
db  7Ch	; |
db    5
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 4
mov	cl, 4
mov	bx, [bp+6]
mov	al, [bx+18h]
mov	dx, ax
shr	al, cl
mov	[bp-2],	al
and	dl, 0Fh
mov	[bp-4],	dl
mov	al, [bp+0Ah]
push	ax
mov	cl, [bp+8]
push	cx
push	bx
call	far ptr	loc_225B8
add	sp, 6
mov	al, [bp+0Ah]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp-4]
push	ax
mov	cl, [bp-2]
push	cx
call	loc_23865+1
add	sp, 8
mov	al, [bp-4]
sub	ah, ah
push	ax
mov	al, [bp-2]
push	ax
call	unk_24648
add	sp, 4
push	word ptr [bp+6]
call	loc_24465+1
add	sp, 2
mov	ax, 1
push	ax
call	far ptr	57Ch:5Eh
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 8
push	si
mov	byte ptr [bp-8], 0
mov	al, [bp+6]
mov	[bp-4],	al
mov	al, [bp+8]
mov	[bp-6],	al
mov	al, [bp-8]
push	ax
lea	ax, [bp-6]
push	ax
lea	ax, [bp-4]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short loc_1D4DC
mov	al, 6
push	ax
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jnz	short loc_1D4DC
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_23A26+2
add	sp, 4
or	ax, ax
jz	short loc_1D4DC
mov	ax, 1
push	ax
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
mov	al, [bp+0Ch]
push	ax
mov	al, [bp+0Ah]
push	ax
call	loc_23B7A+4
add	sp, 0Ah
or	ax, ax
jnz	short loc_1D4DC
mov	al, [bp-6]
push	ax
mov	al, [bp-4]
push	ax
call	loc_237E9+1
add	sp, 4
mov	[bp-2],	ax
mov	bx, ax
mov	si, word ptr loc_1B8E3+3
mov	al, [si+4]
cmp	[bx+4],	al
jnb	short loc_1D4DC
mov	al, 32h	; '2'
push	ax
call	far ptr	57Ch:0DCh
add	sp, 2
or	ax, ax
jnz	short loc_1D4EE
inc	byte ptr [bp-8]
cmp	byte ptr [bp-8], 6
jnb	short near ptr loc_1D4E7+1
jmp	loc_1D43D
;     ***************************************************************************
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  2Ah	; *
db 0E4h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db 0F8h	;   *
db    9
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  8Ah	;   *
db  4Eh	; N
db    6
db  51h	; Q
db  8Ah	;   *
db  56h	; V
db 0FAh	;   *
db  52h	; R
db  8Ah	;   *
db  56h	; V
db 0FCh	;   *
db  52h	; R
db  9Ah	;   *
db  36h	; 6
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    8
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  8Ah	;   *
db  4Eh	; N
db    6
db  51h	; Q
db 0FFh
db  76h	; v
db 0FEh	;   *
db  9Ah	;   *
db  48h	; H
db    0
db  57h	; W
db  22h	; "
db  83h	;   *
db 0C4h	;   *
db    6
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    6
db  50h	; P
db  9Ah	;   *
db  3Ah	; :
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  19h
db 0B8h	;   *
db    1
db    0
db  50h	; P
db 0FFh
db  76h	; v
db 0FEh	;   *
db  9Ah	;   *
db    2
db    0
db  75h	; u
db  24h	; $
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  11h
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db 0FFh
db  76h	; v
db 0FEh	;   *
db  9Ah	;   *
db  16h
db    8
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db 0FFh
db  36h	; 6
db 0E6h	;   *
db 0B8h	;   *
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  8Ah	;   *
db  4Eh	; N
db    6
db  51h	; Q
db  50h	; P
db  51h	; Q
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db  60h	; `
db    3
db 0AAh	;   *
db  24h	; $
db  83h	;   *
db 0C4h	;   *
db    8
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    1
db  75h	; u
db  24h	; $
db  83h	;   *
db 0C4h	;   *
db    8
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0Eh
push	si
mov	cl, 4
mov	bx, [bp+6]
mov	al, [bx+18h]
shr	al, cl
mov	[bp-6],	al
mov	[bp-0Ch], al
mov	cl, [bx+18h]
and	cl, 0Fh
mov	[bp-0Ah], cl
mov	[bp-0Eh], cl
mov	dl, 6
push	dx
push	cx
push	ax
call	loc_23934
add	sp, 6
or	ax, ax
jz	short near ptr unk_1D60A
sub	ax, ax
mov	[bp-8],	ax
cmp	ax, 1
sbb	al, al
neg	al
mov	[bp-2],	al
mov	al, [bp+8]
push	ax
lea	ax, [bp-0Ah]
push	ax
lea	cx, [bp-6]
push	cx
call	loc_23BE9+1
add	sp, 6
mov	bx, [bp+6]
mov	al, [bx+17h]
push	ax
mov	al, [bp-0Ah]
push	ax
mov	al, [bp-6]
push	ax
call	far ptr	loc_2C2F2+2
add	sp, 6
or	ax, ax
jz	short near ptr loc_1D63A+2
sub	ax, ax
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
db  8Ah	;   *
db  46h	; F
db 0F2h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  9Ah	;   *
db  3Ah	; :
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db 0A6h	;   *
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F2h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  9Ah	;   *
db  8Ch	;   *
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    8
db  3Dh	; =
db    1
db    0
db  1Bh
db 0C0h	;   *
db  40h	; @
db 0EBh	;   *
db  8Bh	;   *
db  90h	;   *
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  50h	; P
db  9Ah	;   *
db 0B2h	;   *
db    5
db 0E0h	;   *
db  2Bh	; +
db  83h	;   *
db 0C4h	;   *
db    2
db  8Bh	;   *
db  76h	; v
db 0F6h	;   *
db  81h	;   *
db 0E6h	;   *
db 0FFh
db    0
db  8Bh	;   *
db 0C6h	;   *
db 0D1h	;   *
db 0E6h	;   *
db    3
db 0F0h	;   *
db 0D1h	;   *
db 0E6h	;   *
db 0D1h	;   *
db 0E6h	;   *
db    3
db 0F0h	;   *
db  8Ah	;   *
db  5Eh	; ^
db 0FAh	;   *
db  2Ah	; *
db 0FFh
db  8Ah	;   *
db  98h	;   *
db 0D0h	;   *
db 0B9h	;   *
db  8Ah	;   *
db  87h	;   *
db  78h	; x
db 0C6h	;   *
db  8Bh	;   *
db  5Eh	; ^
db    6
db  28h	; (
db  47h	; G
db  17h
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  53h	; S
db  0Eh
db 0E8h	;   *
db  49h	; I
db 0FDh	;   *
db  83h	;   *
db 0C4h	;   *
db    6
db  83h	;   *
db  7Eh	; ~
db 0F8h	;   *
db    0
db  74h	; t
db  17h
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F2h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0F4h	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db  9Ah	;   *
db 0FDh	;   *
db  83h	;   *
db 0C4h	;   *
db    8
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  2Bh	; +
db 0C0h	;   *
db  50h	; P
db  8Ah	;   *
db  4Eh	; N
db 0F6h	;   *
db  51h	; Q
db  8Ah	;   *
db  4Eh	; N
db 0FAh	;   *
db  51h	; Q
db  9Ah	;   *
db  8Ch	;   *
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    8
db  0Bh
db 0C0h	;   *
db  74h	; t
db  1Ah
db 0FFh
db  76h	; v
db    6
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  9Ah	;   *
db 0E8h	;   *
db    1
db  75h	; u
db  24h	; $
db  83h	;   *
db 0C4h	;   *
db    8
db 0E9h	;   *
db  32h	; 2
db 0FFh
db 0C6h	;   *
db    6
db 0E2h	;   *
db 0B8h	;   *
db    1
db 0B8h	;   *
db    1
db    0
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 14h
push	si
mov	bx, [bp+6]
mov	al, [bx+17h]
mov	[bp-12h], al
mov	bx, [bp+6]
mov	al, [bx+18h]
mov	cx, ax
and	al, 0Fh
mov	[bp-0Eh], al
mov	bl, al
sub	bh, bh
mov	ax, bx
shl	bx, 1
add	bx, ax
shl	bx, 1
shl	bx, 1
add	bx, ax
mov	al, 4
xchg	cl, al
shr	al, cl
mov	[bp-0Ah], al
sub	ah, ah
mov	si, ax
mov	al, [bx+si-3432h]
mov	[bp-10h], al
or	al, al
jnz	short loc_1D726
jmp	near ptr loc_1D7C7+3
;     ***************************************************************************
db 0C6h	;   *
db  46h	; F
db 0ECh	;   *
db 0FFh
db  88h	;   *
db  66h	; f
db 0F8h	;   *
db  8Ah	;   *
db  46h	; F
db 0F6h	;   *
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db  8Ah	;   *
db  46h	; F
db 0F2h	;   *
db  88h	;   *
db  46h	; F
db 0FAh	;   *
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0FAh	;   *
db  50h	; P
db  8Dh	;   *
db  46h	; F
db 0FCh	;   *
db  50h	; P
db  9Ah	;   *
db 0BAh	;   *
db    8
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  47h	; G
db  8Bh	;   *
db  76h	; v
db 0FAh	;   *
db  81h	;   *
db 0E6h	;   *
db 0FFh
db    0
db  8Bh	;   *
db 0C6h	;   *
db 0D1h	;   *
db 0E6h	;   *
db    3
db 0F0h	;   *
db 0D1h	;   *
db 0E6h	;   *
db 0D1h	;   *
db 0E6h	;   *
db    3
db 0F0h	;   *
db  8Ah	;   *
db  5Eh	; ^
db 0FCh	;   *
db  2Ah	; *
db 0FFh
db  8Ah	;   *
db  80h	;   *
db 0CEh	;   *
db 0CBh	;   *
db  88h	;   *
db  46h	; F
db 0FEh	;   *
db  3Ah	; :
db  46h	; F
db 0F0h	;   *
db  72h	; r
db  17h
db  8Ah	;   *
db  46h	; F
db 0F0h	;   *
db  38h	; 8
db  46h	; F
db 0FEh	;   *
db  75h	; u
db  1Bh
db 0B0h	;   *
db  32h	; 2
db  50h	; P
db  9Ah	;   *
db 0DCh	;   *
db    0
db  7Ch	; |
db    5
db  83h	;   *
db 0C4h	;   *
db    2
db  0Bh
db 0C0h	;   *
db  74h	; t
db  0Ch
db  8Ah	;   *
db  46h	; F
db 0FEh	;   *
db  88h	;   *
db  46h	; F
db 0F0h	;   *
db  8Ah	;   *
db  46h	; F
db 0F8h	;   *
db  88h	;   *
db  46h	; F
db 0ECh	;   *
db 0FEh	;   *
db  46h	; F
db 0F8h	;   *
db  80h	;   *
db  7Eh	; ~
db 0F8h	;   *
db    6
db  72h	; r
db  8Ch	;   *
db  83h	;   *
db  7Eh	; ~
db  0Ah
db    0
db  74h	; t
db  0Dh
db  8Ah	;   *
db  46h	; F
db 0ECh	;   *
db  50h	; P
db 0FFh
db  76h	; v
db    6
db  0Eh
db 0E8h	;   *
db 0DEh	;   *
db 0FDh	;   *
db 0EBh	;   *
db  0Ch
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0ECh	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db  60h	; `
db 0FAh	;   *
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db  24h	; $
db 0FFh
db  8Bh	;   *
db  5Eh	; ^
db    6
db  8Ah	;   *
db  46h	; F
db 0EEh	;   *
db  38h	; 8
db  47h	; G
db  17h
db  73h	; s
db    9
db 0B8h	;   *
db    1
db    0
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	byte ptr [bp-4], 0
mov	byte ptr [bp-2], 0
mov	al, [bp-4]
sub	ah, ah
mov	cx, ax
shl	ax, 1
add	ax, cx
shl	ax, 1
shl	ax, 1
add	ax, cx
mov	[bp-6],	ax
mov	si, [bp-6]
mov	bl, [bp-2]
sub	bh, bh
cmp	byte ptr [bx+si-4630h],	3
jnz	short near ptr loc_1D82E+2
mov	si, [bp-4]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	byte ptr [bx+si-3432h],	0FBh ; '  *'
inc	byte ptr [bp-2]
cmp	byte ptr [bp-2], 0Dh
jb	short near ptr loc_1D806+3
inc	byte ptr [bp-4]
cmp	byte ptr [bp-4], 0Ch
jb	short loc_1D7F1
pop	si
mov	sp, bp
pop	bp
retf
;     ***************************************************************************
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
mov	byte ptr [bp-6], 0
mov	al, [bp+0Ah]
mov	[bp-2],	al
mov	al, [bp+0Ch]
mov	[bp-4],	al
mov	al, [bp-6]
push	ax
lea	ax, [bp-4]
push	ax
lea	ax, [bp-2]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jz	short near ptr loc_1D890+2
mov	al, [bp-4]
push	ax
mov	al, [bp-2]
push	ax
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_239D5+1
add	sp, 8
or	ax, ax
jnz	short loc_1D89E
inc	byte ptr [bp-6]
cmp	byte ptr [bp-6], 6
jb	short loc_1D852
jmp	short loc_1D8A6
;     ***************************************************************************
db  90h	;   *
db 0B8h	;   *
db    1
db    0
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db  2Bh	; +
db 0C0h	;   *
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 6
push	si
mov	byte ptr [bp-4], 0
mov	si, [bp+8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+6]
sub	bh, bh
mov	bl, [bx+si-4630h]
mov	al, [bx-3980h]
mov	[bp-6],	al
mov	al, [bp+8]
push	ax
mov	al, [bp+6]
push	ax
call	loc_23968+2
add	sp, 4
or	ax, ax
jz	short near ptr loc_1D8F1+1
add	byte ptr [bp-6], 6
cmp	word ptr [bp+0Ah], 0
jnz	short loc_1D8FB
jmp	locret_1D9E4
;     ***************************************************************************
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    6
db  50h	; P
db  9Ah	;   *
db 0F8h	;   *
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  75h	; u
db    3
db 0E9h	;   *
db 0D2h	;   *
db    0
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    6
db  50h	; P
db  9Ah	;   *
db 0BAh	;   *
db    4
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    4
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db 0FFh
db  36h	; 6
db 0E6h	;   *
db 0B8h	;   *
db  50h	; P
db  9Ah	;   *
db  80h	;   *
db    2
db  56h	; V
db  25h	; %
db  83h	;   *
db 0C4h	;   *
db    4
db  0Bh
db 0C0h	;   *
db  74h	; t
db  34h	; 4
db 0B8h	;   *
db    1
db    0
db  50h	; P
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    6
db  50h	; P
db  9Ah	;   *
db  8Ch	;   *
db    5
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    8
db  0Bh
db 0C0h	;   *
db  74h	; t
db    5
db 0B0h	;   *
db  0Ah
db 0EBh	;   *
db  26h	; &
db  90h	;   *
db 0FFh
db  76h	; v
db 0FEh	;   *
db  9Ah	;   *
db 0FAh	;   *
db    7
db 0C5h	;   *
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    2
db  3Dh	; =
db    1
db    0
db  1Ah
db 0C0h	;   *
db  24h	; $
db 0FAh	;   *
db    4
db    7
db 0EBh	;   *
db  0Fh
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
db  8Bh	;   *
db  47h	; G
db  12h
db 0B9h	;   *
db 0D0h	;   *
db    7
db  2Bh	; +
db 0D2h	;   *
db 0F7h	;   *
db 0F1h	;   *
db    4
db    3
db  88h	;   *
db  46h	; F
db 0FCh	;   *
db 0B0h	;   *
db    1
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    6
db  50h	; P
db  9Ah	;   *
db    4
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    6
db  0Bh
db 0C0h	;   *
db  74h	; t
db  27h	; '
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    6
db  50h	; P
db  8Bh	;   *
db  1Eh
db 0E6h	;   *
db 0B8h	;   *
db  8Ah	;   *
db  47h	; G
db  18h
db  8Bh	;   *
db 0C8h	;   *
db  24h	; $
db  0Fh
db  50h	; P
db 0B0h	;   *
db    4
db  86h	;   *
db 0C8h	;   *
db 0D2h	;   *
db 0E8h	;   *
db  50h	; P
db  9Ah	;   *
db 0A6h	;   *
db    6
db  33h	; 3
db  23h	; #
db  83h	;   *
db 0C4h	;   *
db    8
db  0Bh
db 0C0h	;   *
db  75h	; u
db  26h	; &
db  8Ah	;   *
db  46h	; F
db    8
db  50h	; P
db  8Ah	;   *
db  46h	; F
db    6
db  50h	; P
db  8Bh	;   *
db  1Eh
db 0E6h	;   *
db 0B8h	;   *
db  8Ah	;   *
db  47h	; G
db  18h
db  8Bh	;   *
db 0C8h	;   *
db  24h	; $
db  0Fh
db  50h	; P
db 0B0h	;   *
db    4
db  86h	;   *
db 0C8h	;   *
db 0D2h	;   *
db 0E8h	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db  6Fh	; o
db 0FEh	;   *
db  83h	;   *
db 0C4h	;   *
db    8
db  0Bh
db 0C0h	;   *
db  74h	; t
db    4
db  80h	;   *
db  46h	; F
db 0FCh	;   *
db    5
db  8Ah	;   *
db  46h	; F
db 0FCh	;   *
db    2
db  46h	; F
db 0FAh	;   *
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
;     ***************************************************************************
push	bp
mov	bp, sp
sub	sp, 0B4h
push	si
mov	al, 0FAh ; '  *'
push	ax
mov	cx, 9Ch	; '  *'
push	cx
mov	cx, 0CBCEh
push	cx
call	far ptr	561h:0A0h
add	sp, 6
push	cs
call	near ptr loc_1D7E4+2
mov	si, [bp+8]
and	si, 0FFh
mov	ax, si
shl	si, 1
add	si, ax
shl	si, 1
shl	si, 1
add	si, ax
mov	bl, [bp+6]
sub	bh, bh
mov	byte ptr [bx+si-3432h],	0FAh ; '  *'
lea	ax, [bp-0B1h]
mov	[bp-0Ah], ax
mov	bl, byte ptr loc_1B8DB+1
mov	ax, bx
shl	bl, 1
add	bl, al
shl	bl, 1
shl	bl, 1
add	bl, al
add	bl, byte ptr loc_1B8DB
lea	si, [bp-0B2h]
mov	[bp-0B4h], si
mov	[si], bl
sub	bh, bh
mov	[bx-3432h], bh
mov	bx, [bp-0B4h]
mov	al, [bx]
mov	cl, 0Dh
mov	dx, ax
sub	ah, ah
div	cl
mov	[bp-0Ch], ah
mov	al, dl
sub	ah, ah
div	cl
mov	[bp-0Eh], al
mov	bl, dl
sub	bh, bh
mov	al, [bx-3432h]
mov	[bp-6],	al
mov	[bp-10h], bh
mov	al, [bp-0Ch]
mov	[bp-12h], al
mov	al, [bp-0Eh]
mov	[bp-16h], al
mov	al, [bp-10h]
push	ax
lea	ax, [bp-16h]
push	ax
lea	ax, [bp-12h]
push	ax
call	loc_23BE9+1
add	sp, 6
or	ax, ax
jnz	short near ptr loc_1DAA5+1
jmp	loc_1DB4E
;     ***************************************************************************
db  8Ah	;   *
db  46h	; F
db    6
db  38h	; 8
db  46h	; F
db 0EEh	;   *
db  75h	; u
db  0Bh
db  8Ah	;   *
db  46h	; F
db    8
db  38h	; 8
db  46h	; F
db 0EAh	;   *
db  75h	; u
db    3
db 0E9h	;   *
db 0C5h	;   *
db    0
db  8Ah	;   *
db  46h	; F
db 0EAh	;   *
db  8Bh	;   *
db 0C8h	;   *
db 0D0h	;   *
db 0E0h	;   *
db    2
db 0C1h	;   *
db 0D0h	;   *
db 0E0h	;   *
db 0D0h	;   *
db 0E0h	;   *
db    2
db 0C1h	;   *
db    2
db  46h	; F
db 0EEh	;   *
db  88h	;   *
db  46h	; F
db 0ECh	;   *
db  2Ah	; *
db 0E4h	;   *
db    5
db 0CEh	;   *
db 0CBh	;   *
db  89h	;   *
db  46h	; F
db 0FEh	;   *
db  8Bh	;   *
db 0D8h	;   *
db  80h	;   *
db  3Fh	; ?
db 0FAh	;   *
db  75h	; u
db  71h	; q
db 0FFh
db  76h	; v
db  0Ah
db  8Ah	;   *
db  46h	; F
db 0EAh	;   *
db  50h	; P
db  8Ah	;   *
db  46h	; F
db 0EEh	;   *
db  50h	; P
db  0Eh
db 0E8h	;   *
db 0C0h	;   *
db 0FDh	;   *
db  83h	;   *
db 0C4h	;   *
db    6
db    2
db  46h	; F
db 0FAh	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0FEh	;   *
db  88h	;   *
db    7
db  8Bh	;   *
db  46h	; F
db 0F6h	;   *
db  89h	;   *
db  46h	; F
db 0F8h	;   *
db  48h	; H
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  8Dh	;   *
db  86h	;   *
db  4Eh	; N
db 0FFh
db  39h	; 9
db  46h	; F
db 0FCh	;   *
db  73h	; s
db    6
db  8Dh	;   *
db  46h	; F
db 0E9h	;   *
db  89h	;   *
db  46h	; F
db 0FCh	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0FCh	;   *
db  8Ah	;   *
db    7
db  8Bh	;   *
db  76h	; v
db 0F8h	;   *
db  88h	;   *
db    4
db  8Ah	;   *
db  1Fh
db  2Ah	; *
db 0FFh
db  8Bh	;   *
db  76h	; v
db 0FEh	;   *
db  8Ah	;   *
db    4
db  38h	; 8
db  87h	;   *
db 0CEh	;   *
db 0CBh	;   *
db  76h	; v
db  0Bh
db  8Bh	;   *
db  46h	; F
db 0FCh	;   *
db 0FFh
db  4Eh	; N
db 0FCh	;   *
db  89h	;   *
db  46h	; F
db 0F8h	;   *
db 0EBh	;   *
db 0CDh	;   *
db  8Ah	;   *
db  46h	; F
db 0ECh	;   *
db  8Bh	;   *
db  5Eh	; ^
db 0F8h	;   *
db  88h	;   *
db    7
db 0FFh
db  46h	; F
db 0F6h	;   *
db  8Dh	;   *
db  46h	; F
db 0EAh	;   *
db  39h	; 9
db  46h	; F
db 0F6h	;   *
db  72h	; r
db    7
db  8Dh	;   *
db  86h	;   *
db  4Eh	; N
db 0FFh
db  89h	;   *
db  46h	; F
db 0F6h	;   *
db 0FEh	;   *
db  46h	; F
db 0F0h	;   *
db  80h	;   *
db  7Eh	; ~
db 0F0h	;   *
db    6
db  73h	; s
db    3
db 0E9h	;   *
db  25h	; %
db 0FFh
db 0FFh
db  86h	;   *
db  4Ch	; L
db 0FFh
db  8Dh	;   *
db  46h	; F
db 0EAh	;   *
db  39h	; 9
db  86h	;   *
db  4Ch	; L
db 0FFh
db  72h	; r
db    8
db  8Dh	;   *
db  86h	;   *
db  4Eh	; N
db 0FFh
db  89h	;   *
db  86h	;   *
db  4Ch	; L
db 0FFh
db  8Bh	;   *
db  86h	;   *
db  4Ch	; L
db 0FFh
db  39h	; 9
db  46h	; F
db 0F6h	;   *
db  74h	; t
db    3
db 0E9h	;   *
db 0DCh	;   *
db 0FEh	;   *
db 0EBh	;   *
db    9
db  90h	;   *
db 0B8h	;   *
db    1
db    0
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  2Bh	; +
db 0C0h	;   *
db  5Eh	; ^
db  8Bh	;   *
db 0E5h	;   *
db  5Dh	; ]
db 0CBh	;   *
db  90h	;   *
db    0
db    0
db 0A6h	;   *
db  2Fh	; /
db 0C1h	;   *
db  0Ah
db  6Ah	; j
db  0Ch
db 0DCh	;   *
db  0Ch
db  88h	;   *
db  0Dh
db 0FAh	;   *
db  0Dh
db  78h	; x
db  0Eh
db  2Fh	; /
db  0Fh
db  8Bh	;   *
db  0Fh
db    0
db    0
db  2Bh	; +
db  10h
db  21h	; !
db    5
db  8Eh	;   *
db    5
db 0F7h	;   *
db    5
db  16h
db    6
db    0
db    0
db  66h	; f
db  16h
db    0
db  17h
db  96h	;   *
db  17h
db 0C6h	;   *
db  17h
db    0
db    0
db 0FDh	;   *
db    6
db 0ACh	;   *
db    7
db  57h	; W
db    8
db  86h	;   *
db    8
db    0
db    0
db  5Ah	; Z
db  1Dh
db 0F3h	;   *
db  1Dh
db  23h	; #
db  1Eh
db    0
db    0
db  53h	; S
db  1Eh
db  32h	; 2
db  14h
db 0BDh	;   *
db  14h
db 0DBh	;   *
db  14h
db    0
db    0
db 0F8h	;   *
db  14h
db 0ECh	;   *
db    2
db  87h	;   *
db    3
db  1Ah
db    4
db    0
db    0
db 0ADh	;   *
db    4
db  2Bh	; +
db  15h
db  96h	;   *
db  15h
db 0CBh	;   *
db  15h
db    0
db    0
db    0
db  16h
db 0EFh	;   *
db    5
db  48h	; H
db    6
db    0
db    0
db    0
db    0
db  98h	;   *
db    6
db  84h	;   *
db  1Bh
db 0EAh	;   *
db  1Bh
db  72h	; r
db  1Ch
db    0
db    0
db 0FAh	;   *
db  1Ch
db 0BAh	;   *
db  10h
db  75h	; u
db  11h
db  2Eh	; .
db  12h
db 0E7h	;   *
db  12h
db 0C6h	;   *
db  13h
db  21h	; !
db  18h
db  84h	;   *
db  18h
db 0E7h	;   *
db  18h
db    0
db    0
db    0
db    0
db 0FBh	;   *
db  0Fh
db  48h	; H
db  10h
db  70h	; p
db  10h
db    0
db    0
db    0
db    0
db 0E7h	;   *
db    8
db  2Ah	; *
db    9
db  5Dh	; ]
db    9
db    0
db    0
db    0
db    0
db  7Eh	; ~
db  17h
db 0AEh	;   *
db  17h
db    0
db    0
db    0
db    0
db 0DAh	;   *
db  17h
db  3Dh	; =
db    8
db  59h	; Y
db    8
db  73h	; s
db    8
db  86h	;   *
db    8
db 0C2h	;   *
db    8
db 0C3h	;   *
db  1Ah
db    2
db  1Bh
db  28h	; (
db  1Bh
db    0
db    0
db    0
db    0
db 0B1h	;   *
db    1
db    8
db    2
db  45h	; E
db    2
db    0
db    0
db    0
db    0
db  61h	; a
db    9
db 0B3h	;   *
db    9
db 0DDh	;   *
db    9
db    0
db    0
db    0
db    0
db 0FAh	;   *
db  18h
db 0A9h	;   *
db  19h
db  32h	; 2
db  1Ah
db    0
db    0
db    0
db    0
db  31h	; 1
db  61h	; a
db  0Eh
db    0
db    0
db  1Ch
db  80h	;   *
db  51h	; Q
db  54h	; T
db  14h
db  15h
db  0Ch
db  88h	;   *
db  13h
db    2
db  64h	; d
db    2
db  17h
db    2
db    2
db  19h
db    1
db    5
db    1
db  0Ah
db    0
db    0
db  4Eh	; N
db    0
db 0DAh	;   *
db 0F9h	;   *
db  25h	; %
db  15h
db    0
db 0B8h	;   *
db  0Bh
db    2
db  19h
db    6
db 0E2h	;   *
db    5
db    4
db    2
db    1
db  21h	; !
db  21h	; !
db  0Eh
db    0
db    0
db  19h
db    2
db 0D4h	;   *
db 0C2h	;   *
db  26h	; &
db  18h
db  0Ch
db  94h	;   *
db  11h
db    2
db  41h	; A
db    3
db    0
db    0
db    0
db    2
db    1
db  85h	;   *
db  81h	;   *
db  0Ah
db    0
db    0
db  4Eh	; N
db  80h	;   *
db 0DAh	;   *
db 0F9h	;   *
db  15h
db  13h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  21h	; !
db  21h	; !
db  0Ch
db    0
db    0
db  9Fh	;   *
db  80h	;   *
db  53h	; S
db 0AAh	;   *
db  5Ah	; Z
db  1Ah
db    0
db  88h	;   *
db  13h
db    2
db  1Eh
db    3
db  10h
db    3
db    4
db  1Eh
db    1
db  31h	; 1
db  21h	; !
db    6
db    0
db    1
db  8Bh	;   *
db  40h	; @
db  71h	; q
db  42h	; B
db  11h
db  15h
db  0Ch
db  88h	;   *
db  13h
db    2
db  11h
db    6
db  0Ch
db    1
db    1
db  14h
db    1
db  13h
db  11h
db  0Ah
db    0
db    0
db  96h	;   *
db  80h	;   *
db 0FFh
db 0FFh
db  21h	; !
db    3
db    0
db 0D0h	;   *
db    7
db    2
db  64h	; d
db    3
db  14h
db    3
db    3
db    1
db    1
db  21h	; !
db  22h	; "
db    7
db    0
db    0
db  83h	;   *
db  8Dh	;   *
db  74h	; t
db  65h	; e
db  17h
db  17h
db    0
db  88h	;   *
db  13h
db    0
db  9Ch	;   *
db    3
db  14h
db    3
db    2
db    5
db    1
db  24h	; $
db  25h	; %
db    9
db    2
db    3
db    6
db    2
db  62h	; b
db  62h	; b
db  15h
db  15h
db 0E8h	;   *
db 0E0h	;   *
db  15h
db    2
db  2Bh	; +
db    2
db  0Ah
db    1
db    1
db    3
db    1
db  31h	; 1
db  61h	; a
db  0Eh
db    0
db    0
db  1Ch
db  80h	;   *
db  41h	; A
db  92h	;   *
db    1
db  3Bh	; ;
db    0
db  64h	; d
db  19h
db    2
db  64h	; d
db    2
db  1Eh
db    2
db    1
db  1Eh
db    1
db 0B1h	;   *
db  22h	; "
db    2
db    0
db    0
db 0C5h	;   *
db    5
db  6Eh	; n
db  8Bh	;   *
db  17h
db  0Eh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  31h	; 1
db  21h	; !
db  0Eh
db    0
db    0
db  1Dh
db    0
db  41h	; A
db  70h	; p
db  1Ah
db 0F9h	;   *
db    0
db 0CCh	;   *
db  12h
db    2
db  3Ch	; <
db    3
db    0
db    0
db    0
db    2
db    1
db  32h	; 2
db  21h	; !
db  0Ch
db    0
db    0
db  9Ah	;   *
db    4
db  61h	; a
db  71h	; q
db  1Bh
db  1Bh
db    0
db 0E4h	;   *
db  16h
db    2
db  5Dh	; ]
db    6
db    1
db    9
db  0Ah
db  14h
db    1
db 0A6h	;   *
db    6
db    0
db    0
db    0
db    0
db    0
db  0Bh
db    0
db 0F8h	;   *
db 0F6h	;   *
db 0A8h	;   *
db 0F8h	;   *
db 0B0h	;   *
db    9
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db 0C8h	;   *
db 0F7h	;   *
db 0C8h	;   *
db 0D6h	;   *
db    0
db    6
db    3
db    4
db    0
db    0
db    0
db    0
db    0
db 0C5h	;   *
db 0FFh
db  17h
db  45h	; E
db 0C9h	;   *
db    0
db 0F3h	;   *
db 0D4h	;   *
db    0
db    1
db    2
db 0C1h	;   *
db  82h	;   *
db 0F3h	;   *
db 0F1h	;   *
db 0A9h	;   *
db 0B9h	;   *
db  58h	; X
db  16h
db 0F9h	;   *
db 0C9h	;   *
db    0
db    0
db    1
db  80h	;   *
db 0C0h	;   *
db 0C2h	;   *
db 0F7h	;   *
db 0D1h	;   *
db  13h
db    2
db  1Ch
db 0C5h	;   *
db 0CAh	;   *
db    0
db    3
db    0
db    0
db    0
db 0C5h	;   *
db 0FFh
db  36h	; 6
db  23h	; #
db 0A6h	;   *
db    6
db    0
db    0
db    0
db    0
db    0
db  0Bh
db    0
db 0F8h	;   *
db 0F6h	;   *
db 0A8h	;   *
db 0F8h	;   *
db 0B0h	;   *
db    9
db    1
db 0DFh	;   *
db    0
db    0
db    0
db    0
db  80h	;   *
db 0C8h	;   *
db 0F7h	;   *
db 0C8h	;   *
db  16h
db    0
db  0Ah
db    3
db    4
db    0
db    0
db    0
db    0
db    0
db 0C5h	;   *
db 0FFh
db  17h
db  45h	; E
db 0F2h	;   *
db  50h	; P
db 0F4h	;   *
db  31h	; 1
db 0FFh
db 0F0h	;   *
db  11h
db 0F8h	;   *
db  32h	; 2
db  18h
db  16h
db  97h	;   *
db  97h	;   *
db  99h	;   *
db  99h	;   *
db  9Bh	;   *
db  9Bh	;   *
db  92h	;   *
db    0
db 0C0h	;   *
db    0
db 0F0h	;   *
db  0Ch
db  32h	; 2
db  18h
db  16h
db  97h	;   *
db  97h	;   *
db  99h	;   *
db  99h	;   *
db  9Bh	;   *
db  9Bh	;   *
db  92h	;   *
db 0F0h	;   *
db    7
db  3Eh	; >
db  24h	; $
db  18h
db  3Ch	; <
db  0Ch
db  0Ah
db  3Eh	; >
db  30h	; 0
db  31h	; 1
db  3Eh	; >
db  18h
db  16h
db  3Ch	; <
db  0Ch
db  0Ah
db  9Eh	;   *
db  40h	; @
db  18h
db  16h
db  3Eh	; >
db  0Ch
db  0Ah
db  9Ch	;   *
db  3Eh	; >
db  24h	; $
db  18h
db  3Ch	; <
db  0Ch
db  0Ah
db  3Eh	; >
db  30h	; 0
db  31h	; 1
db  3Eh	; >
db  18h
db  16h
db  3Ch	; <
db  0Ch
db  0Ah
db  9Eh	;   *
db  40h	; @
db  18h
db  16h
db  3Eh	; >
db  0Ch
db  0Ah
db  9Ch	;   *
db  3Eh	; >
db 0C0h	;   *
db 0BEh	;   *
db 0F2h	;   *
db  50h	; P
db 0FFh
db 0F4h	;   *
db 0DCh	;   *
db 0FEh	;   *
db 0F8h	;   *
db    0
db 0C0h	;   *
db    0
db  60h	; `
db  60h	; `
db 0F0h	;   *
db  0Ch
db  39h	; 9
db  24h	; $
db  18h
db  37h	; 7
db  0Ch
db  0Ah
db  39h	; 9
db  30h	; 0
db  31h	; 1
db  39h	; 9
db  18h
db  16h
db  37h	; 7
db  0Ch
db  0Ah
db  97h	;   *
db  3Bh	; ;
db  18h
db  16h
db  39h	; 9
db  0Ch
db  0Ah
db  97h	;   *
db  39h	; 9
db  24h	; $
db  18h
db  37h	; 7
db  0Ch
db  0Ah
db  39h	; 9
db  30h	; 0
db  31h	; 1
db  39h	; 9
db  18h
db  16h
db  37h	; 7
db  0Ch
db  0Ah
db  97h	;   *
db  3Bh	; ;
db  18h
db  16h
db  39h	; 9
db  0Ch
db  0Ah
db  97h	;   *
db  39h	; 9
db 0C0h	;   *
db 0BEh	;   *
db 0FFh
db 0F4h	;   *
db  9Fh	;   *
db 0FEh	;   *
db 0F0h	;   *
db  14h
db 0F8h	;   *
db    0
db 0C0h	;   *
db    0
db 0D0h	;   *
db  26h	; &
db  18h
db  16h
db  8Bh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  8Dh	;   *
db  8Fh	;   *
db  8Fh	;   *
db  86h	;   *
db 0D1h	;   *
db 0F0h	;   *
db    5
db  2Bh	; +
db  24h	; $
db  18h
db  2Bh	; +
db  0Ch
db  0Ah
db  2Bh	; +
db  18h
db  16h
db 0F0h	;   *
db  14h
db  1Fh
db  0Ch
db  0Ah
db  7Fh	; 
db  1Fh
db  60h	; `
db  5Ch	; \
db 0F0h	;   *
db    5
db    0
db  48h	; H
db    0
db  1Fh
db  0Ch
db  0Ah
db  7Fh	; 
db  1Fh
db  60h	; `
db  5Ch	; \
db  1Fh
db 0C0h	;   *
db 0BEh	;   *
db 0FFh
db 0F2h	;   *
db 0B9h	;   *
db 0F4h	;   *
db 0B4h	;   *
db 0FDh	;   *
db 0F0h	;   *
db  20h
db 0F8h	;   *
db  2Fh	; /
db  18h
db  16h
db  92h	;   *
db  92h	;   *
db  8Fh	;   *
db  92h	;   *
db  34h	; 4
db  0Ch
db  0Ah
db  92h	;   *
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  8Fh	;   *
db  92h	;   *
db  92h	;   *
db  8Fh	;   *
db  92h	;   *
db  34h	; 4
db  0Ch
db  0Ah
db  92h	;   *
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  8Fh	;   *
db  92h	;   *
db  92h	;   *
db  8Fh	;   *
db  92h	;   *
db  34h	; 4
db  0Ch
db  0Ah
db  92h	;   *
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  8Fh	;   *
db  92h	;   *
db  92h	;   *
db  8Fh	;   *
db  92h	;   *
db  34h	; 4
db  0Ch
db  0Ah
db  92h	;   *
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  8Fh	;   *
db  92h	;   *
db  92h	;   *
db  8Fh	;   *
db  92h	;   *
db  34h	; 4
db  0Ch
db  0Ah
db  92h	;   *
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  8Fh	;   *
db  92h	;   *
db  92h	;   *
db  8Fh	;   *
db  92h	;   *
db  34h	; 4
db  0Ch
db  0Ah
db  92h	;   *
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  8Fh	;   *
db  92h	;   *
db  92h	;   *
db  8Fh	;   *
db  92h	;   *
db  34h	; 4
db  0Ch
db  0Ah
db  92h	;   *
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  8Fh	;   *
db  92h	;   *
db  92h	;   *
db  8Fh	;   *
db  92h	;   *
db  34h	; 4
db  0Ch
db  0Ah
db  92h	;   *
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  8Dh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  8Fh	;   *
db  92h	;   *
db  8Fh	;   *
db  8Dh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  8Fh	;   *
db  8Dh	;   *
db  8Bh	;   *
db  88h	;   *
db  86h	;   *
db  8Dh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  8Fh	;   *
db  92h	;   *
db  8Fh	;   *
db  8Dh	;   *
db  8Bh	;   *
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  8Fh	;   *
db  8Fh	;   *
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db 0F2h	;   *
db 0B9h	;   *
db 0FFh
db 0F4h	;   *
db    5
db 0FDh	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db  10h
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  10h
db  18h
db  16h
db    0
db  30h	; 0
db    0
db  10h
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  10h
db  30h	; 0
db  18h
db  70h	; p
db    0
db  30h	; 0
db    0
db  10h
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  10h
db  18h
db  16h
db    0
db  30h	; 0
db    0
db  10h
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  10h
db  30h	; 0
db  18h
db  70h	; p
db    0
db  30h	; 0
db    0
db  13h
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  13h
db  18h
db  16h
db    0
db  30h	; 0
db    0
db  13h
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  13h
db  30h	; 0
db  18h
db  73h	; s
db    0
db  30h	; 0
db    0
db  13h
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  13h
db  18h
db  16h
db    0
db  30h	; 0
db    0
db  13h
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  13h
db  30h	; 0
db  18h
db  73h	; s
db    0
db  30h	; 0
db    0
db  15h
db  18h
db  16h
db  73h	; s
db  75h	; u
db  77h	; w
db  7Ah	; z
db  77h	; w
db  75h	; u
db  73h	; s
db  75h	; u
db  73h	; s
db  75h	; u
db  77h	; w
db  75h	; u
db  73h	; s
db  70h	; p
db  6Eh	; n
db  75h	; u
db  73h	; s
db  75h	; u
db  77h	; w
db  7Ah	; z
db  77h	; w
db  75h	; u
db  73h	; s
db    0
db  18h
db    0
db  0Bh
db  18h
db  16h
db  6Bh	; k
db  6Bh	; k
db  0Bh
db  30h	; 0
db  18h
db    0
db  30h	; 0
db    0
db 0FFh
db 0F4h	;   *
db  72h	; r
db 0FCh	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db  17h
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  17h
db  18h
db  16h
db    0
db  30h	; 0
db    0
db  17h
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  17h
db  30h	; 0
db  18h
db  77h	; w
db    0
db  30h	; 0
db    0
db  17h
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  17h
db  18h
db  16h
db    0
db  30h	; 0
db    0
db  17h
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  17h
db  30h	; 0
db  18h
db  77h	; w
db    0
db  30h	; 0
db    0
db  1Ah
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  1Ah
db  18h
db  16h
db    0
db  30h	; 0
db    0
db  1Ah
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  1Ah
db  30h	; 0
db  18h
db  7Ah	; z
db    0
db  30h	; 0
db    0
db  1Ah
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  1Ah
db  18h
db  16h
db    0
db  30h	; 0
db    0
db  1Ah
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  1Ah
db  30h	; 0
db  18h
db  7Ah	; z
db    0
db  30h	; 0
db    0
db  1Ch
db  18h
db  16h
db  7Ah	; z
db  7Ch	; |
db  7Eh	; ~
db  81h	;   *
db  7Eh	; ~
db  7Ch	; |
db  7Ah	; z
db  7Ch	; |
db  7Ah	; z
db  7Ch	; |
db  7Eh	; ~
db  7Ch	; |
db  7Ah	; z
db  77h	; w
db  75h	; u
db  7Ch	; |
db  7Ah	; z
db  7Ch	; |
db  7Eh	; ~
db  81h	;   *
db  7Eh	; ~
db  7Ch	; |
db  7Ah	; z
db    0
db  18h
db    0
db  12h
db  18h
db  16h
db  72h	; r
db  72h	; r
db  12h
db  30h	; 0
db  18h
db    0
db  30h	; 0
db    0
db 0FFh
db 0F4h	;   *
db 0FDh	;   *
db 0FCh	;   *
db 0F0h	;   *
db    0
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  25h	; %
db  68h	; h
db  18h
db  25h	; %
db  10h
db    0
db  10h
db  28h	; (
db  30h	; 0
db  10h
db    8
db  30h	; 0
db  18h
db  10h
db  28h	; (
db  30h	; 0
db 0D2h	;   *
db  70h	; p
db  30h	; 0
db  25h	; %
db  68h	; h
db  18h
db  25h	; %
db  10h
db    0
db  10h
db  28h	; (
db  30h	; 0
db  10h
db    8
db  30h	; 0
db  18h
db  10h
db    8
db    8
db 0D0h	;   *
db  68h	; h
db  18h
db  25h	; %
db  50h	; P
db  25h	; %
db    8
db  10h
db    8
db  10h
db    8
db  10h
db 0D2h	;   *
db  20h
db  18h
db  48h	; H
db  25h	; %
db    8
db    8
db  28h	; (
db  30h	; 0
db    0
db 0FFh
db 0F2h	;   *
db  82h	;   *
db 0F4h	;   *
db    9
db 0FCh	;   *
db 0F0h	;   *
db  11h
db 0F8h	;   *
db  28h	; (
db  30h	; 0
db  2Dh	; -
db  86h	;   *
db  88h	;   *
db  8Bh	;   *
db  8Dh	;   *
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  2Bh	; +
db  30h	; 0
db  2Dh	; -
db  88h	;   *
db  8Bh	;   *
db  88h	;   *
db  86h	;   *
db  8Bh	;   *
db  8Dh	;   *
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  2Bh	; +
db  30h	; 0
db  2Dh	; -
db  86h	;   *
db  88h	;   *
db  86h	;   *
db  88h	;   *
db  8Bh	;   *
db  8Dh	;   *
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  2Bh	; +
db  30h	; 0
db  2Dh	; -
db  88h	;   *
db  8Bh	;   *
db  88h	;   *
db  8Bh	;   *
db  8Dh	;   *
db  86h	;   *
db  86h	;   *
db  28h	; (
db  60h	; `
db  5Ch	; \
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db  92h	;   *
db  92h	;   *
db  8Fh	;   *
db  92h	;   *
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db  8Dh	;   *
db  8Fh	;   *
db  8Dh	;   *
db  8Dh	;   *
db  92h	;   *
db  8Fh	;   *
db  8Dh	;   *
db  2Fh	; /
db  60h	; `
db  5Ch	; \
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db  92h	;   *
db  92h	;   *
db  8Fh	;   *
db  92h	;   *
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db  8Dh	;   *
db  8Fh	;   *
db  8Dh	;   *
db  8Dh	;   *
db  92h	;   *
db  8Fh	;   *
db  8Dh	;   *
db  2Fh	; /
db  60h	; `
db  5Ch	; \
db 0F2h	;   *
db  82h	;   *
db 0FFh
db 0F4h	;   *
db  9Eh	;   *
db 0FBh	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db  23h	; #
db  30h	; 0
db  2Dh	; -
db  81h	;   *
db  83h	;   *
db  86h	;   *
db  88h	;   *
db  2Ah	; *
db  18h
db  16h
db  88h	;   *
db  26h	; &
db  30h	; 0
db  2Dh	; -
db  83h	;   *
db  86h	;   *
db  83h	;   *
db  81h	;   *
db  86h	;   *
db  88h	;   *
db  2Ah	; *
db  18h
db  16h
db  88h	;   *
db  26h	; &
db  30h	; 0
db  2Dh	; -
db  81h	;   *
db  83h	;   *
db  81h	;   *
db  83h	;   *
db  86h	;   *
db  88h	;   *
db  2Ah	; *
db  18h
db  16h
db  88h	;   *
db  26h	; &
db  30h	; 0
db  2Dh	; -
db  83h	;   *
db  86h	;   *
db  83h	;   *
db  86h	;   *
db  88h	;   *
db  81h	;   *
db  81h	;   *
db  23h	; #
db  60h	; `
db  5Ch	; \
db  2Ah	; *
db  30h	; 0
db  2Dh	; -
db  8Dh	;   *
db  8Dh	;   *
db  8Ah	;   *
db  8Dh	;   *
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  2Ah	; *
db  30h	; 0
db  2Dh	; -
db  88h	;   *
db  8Ah	;   *
db  88h	;   *
db  88h	;   *
db  8Dh	;   *
db  8Ah	;   *
db  88h	;   *
db  2Ah	; *
db  60h	; `
db  5Ch	; \
db  2Ah	; *
db  30h	; 0
db  2Dh	; -
db  8Dh	;   *
db  8Dh	;   *
db  8Ah	;   *
db  8Dh	;   *
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  2Ah	; *
db  30h	; 0
db  2Dh	; -
db  88h	;   *
db  8Ah	;   *
db  88h	;   *
db  88h	;   *
db  8Dh	;   *
db  8Ah	;   *
db  88h	;   *
db  2Ah	; *
db  60h	; `
db  5Ch	; \
db 0FFh
db 0F4h	;   *
db 0C7h	;   *
db 0FAh	;   *
db 0F0h	;   *
db  16h
db 0F8h	;   *
db  10h
db 0C0h	;   *
db 0C1h	;   *
db  70h	; p
db  70h	; p
db  10h
db 0C0h	;   *
db 0BEh	;   *
db  10h
db 0C0h	;   *
db 0C1h	;   *
db  70h	; p
db  70h	; p
db  10h
db 0C0h	;   *
db 0BEh	;   *
db  70h	; p
db  73h	; s
db  75h	; u
db  70h	; p
db  70h	; p
db  73h	; s
db  75h	; u
db  77h	; w
db 0FFh
db 0F4h	;   *
db 0A8h	;   *
db 0FAh	;   *
db 0F0h	;   *
db  19h
db 0F8h	;   *
db  17h
db 0C0h	;   *
db 0C1h	;   *
db  77h	; w
db  77h	; w
db  17h
db 0C0h	;   *
db 0BEh	;   *
db  17h
db 0C0h	;   *
db 0C1h	;   *
db  77h	; w
db  77h	; w
db  17h
db 0C0h	;   *
db 0BEh	;   *
db  77h	; w
db  7Ah	; z
db  7Ch	; |
db  77h	; w
db  77h	; w
db  7Ah	; z
db  7Ch	; |
db  7Eh	; ~
db 0FFh
db 0F2h	;   *
db 0AAh	;   *
db 0F4h	;   *
db  63h	; c
db 0FBh	;   *
db 0F0h	;   *
db  25h	; %
db 0F8h	;   *
db 0D0h	;   *
db  4Ah	; J
db  18h
db  16h
db 0ACh	;   *
db 0AAh	;   *
db 0A8h	;   *
db 0AAh	;   *
db 0ACh	;   *
db 0AAh	;   *
db 0A8h	;   *
db 0AAh	;   *
db 0ACh	;   *
db 0AAh	;   *
db 0A8h	;   *
db  4Ah	; J
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  4Ch	; L
db  18h
db  16h
db 0AFh	;   *
db 0ACh	;   *
db 0AAh	;   *
db 0ACh	;   *
db 0AFh	;   *
db 0ACh	;   *
db 0AAh	;   *
db 0FDh	;   *
db 0ACh	;   *
db 0AFh	;   *
db 0B1h	;   *
db 0AFh	;   *
db  4Ch	; L
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db 0D1h	;   *
db  4Ch	; L
db  18h
db  16h
db 0AFh	;   *
db 0B1h	;   *
db 0AFh	;   *
db  51h	; Q
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db 0D0h	;   *
db 0F4h	;   *
db  8Bh	;   *
db 0FAh	;   *
db 0F0h	;   *
db  16h
db 0F8h	;   *
db  4Ah	; J
db  18h
db  16h
db 0AAh	;   *
db 0A8h	;   *
db 0AAh	;   *
db    0
db  18h
db    0
db  4Ah	; J
db  18h
db  16h
db  48h	; H
db  30h	; 0
db  2Dh	; -
db 0D3h	;   *
db 0F2h	;   *
db 0AAh	;   *
db 0FFh
db 0F4h	;   *
db 0B4h	;   *
db 0FAh	;   *
db 0F0h	;   *
db  25h	; %
db 0F8h	;   *
db 0D0h	;   *
db  29h	; )
db  18h
db  16h
db  90h	;   *
db  99h	;   *
db  90h	;   *
db  89h	;   *
db  90h	;   *
db  99h	;   *
db  90h	;   *
db  8Bh	;   *
db  92h	;   *
db  9Bh	;   *
db  92h	;   *
db  8Bh	;   *
db  92h	;   *
db  9Bh	;   *
db  92h	;   *
db  8Dh	;   *
db  94h	;   *
db  9Ch	;   *
db  94h	;   *
db  8Dh	;   *
db  94h	;   *
db  9Ch	;   *
db  94h	;   *
db  8Dh	;   *
db  94h	;   *
db  9Ch	;   *
db  94h	;   *
db  8Dh	;   *
db  94h	;   *
db  9Ch	;   *
db  94h	;   *
db 0D1h	;   *
db 0F4h	;   *
db    6
db 0FAh	;   *
db 0F0h	;   *
db  25h	; %
db 0D0h	;   *
db  1Dh
db  18h
db  16h
db  7Dh	; }
db  7Dh	; }
db  7Dh	; }
db    0
db  18h
db    0
db  1Dh
db  18h
db  16h
db  1Dh
db  30h	; 0
db  2Dh	; -
db  1Fh
db  18h
db  16h
db  7Fh	; 
db  7Fh	; 
db  7Fh	; 
db    0
db  18h
db    0
db  1Fh
db  18h
db  16h
db  1Fh
db  30h	; 0
db  2Dh	; -
db 0D1h	;   *
db 0FFh
db 0F4h	;   *
db 0FEh	;   *
db 0FAh	;   *
db 0F0h	;   *
db    7
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  1Bh
db  48h	; H
db  1Bh
db  30h	; 0
db  18h
db  10h
db  28h	; (
db  30h	; 0
db 0D3h	;   *
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  1Bh
db  48h	; H
db  1Bh
db  30h	; 0
db  18h
db  10h
db  28h	; (
db  30h	; 0
db 0D3h	;   *
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  1Bh
db  68h	; h
db  18h
db  1Bh
db  10h
db    0
db  10h
db  28h	; (
db  30h	; 0
db  10h
db  28h	; (
db  18h
db  10h
db    0
db  10h
db  28h	; (
db  30h	; 0
db 0D1h	;   *
db 0FFh
db 0F2h	;   *
db  64h	; d
db 0F4h	;   *
db  45h	; E
db 0FAh	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  39h	; 9
db  18h
db  19h
db  39h	; 9
db  18h
db  16h
db  97h	;   *
db  94h	;   *
db  97h	;   *
db  94h	;   *
db  92h	;   *
db  34h	; 4
db  90h	;   *
db  8Eh	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  39h	; 9
db  18h
db  19h
db  39h	; 9
db  18h
db  16h
db  97h	;   *
db  94h	;   *
db  97h	;   *
db  94h	;   *
db  92h	;   *
db  34h	; 4
db  90h	;   *
db  8Eh	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  39h	; 9
db  18h
db  19h
db  39h	; 9
db  18h
db  16h
db  97h	;   *
db  99h	;   *
db  9Ch	;   *
db  9Eh	;   *
db  9Ch	;   *
db  9Eh	;   *
db 0A0h	;   *
db  3Eh	; >
db  30h	; 0
db  2Dh	; -
db  37h	; 7
db  18h
db  16h
db  99h	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  39h	; 9
db  18h
db  19h
db  39h	; 9
db  18h
db  16h
db  97h	;   *
db  94h	;   *
db  97h	;   *
db  94h	;   *
db  92h	;   *
db  34h	; 4
db  90h	;   *
db  8Eh	;   *
db  3Eh	; >
db  18h
db  16h
db 0A0h	;   *
db  9Eh	;   *
db  9Ch	;   *
db  9Eh	;   *
db 0A0h	;   *
db  9Eh	;   *
db  9Ch	;   *
db  9Eh	;   *
db 0A0h	;   *
db  9Eh	;   *
db  9Ch	;   *
db  3Eh	; >
db  30h	; 0
db  2Dh	; -
db  3Ch	; <
db  18h
db  16h
db  9Eh	;   *
db 0A0h	;   *
db 0A3h	;   *
db 0A0h	;   *
db  9Eh	;   *
db  40h	; @
db  30h	; 0
db  2Dh	; -
db  3Ch	; <
db  18h
db  16h
db  9Eh	;   *
db 0A0h	;   *
db 0A3h	;   *
db 0A5h	;   *
db 0A3h	;   *
db  40h	; @
db  60h	; `
db  5Ch	; \
db  3Eh	; >
db  18h
db  16h
db 0A0h	;   *
db  9Eh	;   *
db  9Ch	;   *
db  9Eh	;   *
db 0A0h	;   *
db  9Eh	;   *
db  9Ch	;   *
db  9Eh	;   *
db 0A0h	;   *
db  9Eh	;   *
db  9Ch	;   *
db  3Eh	; >
db  30h	; 0
db  2Dh	; -
db  3Ch	; <
db  18h
db  16h
db  9Eh	;   *
db 0A0h	;   *
db 0A3h	;   *
db 0A0h	;   *
db  9Eh	;   *
db  40h	; @
db  30h	; 0
db  2Dh	; -
db  3Ch	; <
db  18h
db  16h
db  9Eh	;   *
db 0A0h	;   *
db 0A3h	;   *
db 0A5h	;   *
db 0A3h	;   *
db  45h	; E
db  60h	; `
db  5Ch	; \
db 0F2h	;   *
db  64h	; d
db 0FFh
db 0F4h	;   *
db  6Ch	; l
db 0F9h	;   *
db 0F0h	;   *
db  39h	; 9
db 0F8h	;   *
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  2Fh	; /
db  18h
db  16h
db  34h	; 4
db  18h
db  19h
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  8Fh	;   *
db  92h	;   *
db  8Fh	;   *
db  8Dh	;   *
db  2Fh	; /
db  90h	;   *
db  8Eh	;   *
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  2Fh	; /
db  18h
db  16h
db  34h	; 4
db  18h
db  19h
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  8Fh	;   *
db  92h	;   *
db  8Fh	;   *
db  8Dh	;   *
db  2Fh	; /
db  90h	;   *
db  8Eh	;   *
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  2Fh	; /
db  18h
db  16h
db  34h	; 4
db  18h
db  19h
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  94h	;   *
db  97h	;   *
db  99h	;   *
db  97h	;   *
db  99h	;   *
db  9Bh	;   *
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  32h	; 2
db  18h
db  16h
db  94h	;   *
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  2Fh	; /
db  18h
db  16h
db  34h	; 4
db  18h
db  19h
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  8Fh	;   *
db  92h	;   *
db  8Fh	;   *
db  8Dh	;   *
db  2Fh	; /
db  90h	;   *
db  8Eh	;   *
db  39h	; 9
db  18h
db  16h
db  9Bh	;   *
db  99h	;   *
db  97h	;   *
db  99h	;   *
db  9Bh	;   *
db  99h	;   *
db  97h	;   *
db  99h	;   *
db  9Bh	;   *
db  99h	;   *
db  97h	;   *
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  37h	; 7
db  18h
db  16h
db  99h	;   *
db  9Bh	;   *
db  9Eh	;   *
db  9Bh	;   *
db  99h	;   *
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db  37h	; 7
db  18h
db  16h
db  99h	;   *
db  9Bh	;   *
db  9Eh	;   *
db 0A0h	;   *
db  9Eh	;   *
db  3Bh	; ;
db  60h	; `
db  5Ch	; \
db  39h	; 9
db  18h
db  16h
db  9Bh	;   *
db  99h	;   *
db  97h	;   *
db  99h	;   *
db  9Bh	;   *
db  99h	;   *
db  97h	;   *
db  99h	;   *
db  9Bh	;   *
db  99h	;   *
db  97h	;   *
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  37h	; 7
db  18h
db  16h
db  99h	;   *
db  9Bh	;   *
db  9Eh	;   *
db  9Bh	;   *
db  99h	;   *
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db  37h	; 7
db  18h
db  16h
db  99h	;   *
db  9Bh	;   *
db  9Eh	;   *
db 0A0h	;   *
db  9Eh	;   *
db  40h	; @
db  60h	; `
db  5Ch	; \
db 0FFh
db 0F4h	;   *
db  53h	; S
db 0F8h	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db  18h
db 0C0h	;   *
db 0C1h	;   *
db  18h
db 0C0h	;   *
db 0BEh	;   *
db  11h
db 0C0h	;   *
db 0C1h	;   *
db  11h
db 0C0h	;   *
db 0BEh	;   *
db  75h	; u
db  1Ah
db  60h	; `
db  5Ch	; \
db  73h	; s
db  18h
db 0C0h	;   *
db 0C1h	;   *
db  18h
db 0C0h	;   *
db 0BEh	;   *
db  71h	; q
db  73h	; s
db  15h
db 0C0h	;   *
db 0C1h	;   *
db  15h
db 0C0h	;   *
db 0BEh	;   *
db  71h	; q
db  73h	; s
db  15h
db 0C0h	;   *
db 0C1h	;   *
db  15h
db  60h	; `
db  5Ch	; \
db  71h	; q
db 0FFh
db 0F4h	;   *
db  24h	; $
db 0F8h	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db  1Fh
db 0C0h	;   *
db 0C1h	;   *
db  1Fh
db 0C0h	;   *
db 0BEh	;   *
db  18h
db 0C0h	;   *
db 0C1h	;   *
db  18h
db 0C0h	;   *
db 0BEh	;   *
db  7Ch	; |
db  21h	; !
db  60h	; `
db  5Ch	; \
db  7Ah	; z
db  1Fh
db 0C0h	;   *
db 0C1h	;   *
db  1Fh
db 0C0h	;   *
db 0BEh	;   *
db  78h	; x
db  7Ah	; z
db  1Ch
db 0C0h	;   *
db 0C1h	;   *
db  1Ch
db 0C0h	;   *
db 0BEh	;   *
db  78h	; x
db  7Ah	; z
db  1Ch
db 0C0h	;   *
db 0C1h	;   *
db  1Ch
db  60h	; `
db  5Ch	; \
db  78h	; x
db 0FFh
db 0F2h	;   *
db  75h	; u
db 0F4h	;   *
db  1Fh
db 0F8h	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db    0
db  30h	; 0
db    0
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  97h	;   *
db  9Ch	;   *
db  9Bh	;   *
db  96h	;   *
db  3Ah	; :
db  60h	; `
db  61h	; a
db  3Ah	; :
db 0C0h	;   *
db 0BEh	;   *
db    0
db 0C0h	;   *
db    0
db 0FFh
db 0F4h	;   *
db    5
db 0F8h	;   *
db 0F0h	;   *
db  25h	; %
db 0F8h	;   *
db    0
db  30h	; 0
db    0
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  92h	;   *
db  97h	;   *
db  96h	;   *
db  91h	;   *
db  35h	; 5
db  60h	; `
db  61h	; a
db  35h	; 5
db 0C0h	;   *
db 0BEh	;   *
db    0
db 0C0h	;   *
db    0
db 0FFh
db 0F4h	;   *
db  6Fh	; o
db 0F8h	;   *
db 0F0h	;   *
db  39h	; 9
db 0F8h	;   *
db  34h	; 4
db 0C0h	;   *
db 0BEh	;   *
db  28h	; (
db 0C0h	;   *
db 0C1h	;   *
db  28h	; (
db 0C0h	;   *
db 0BEh	;   *
db    0
db 0C0h	;   *
db    0
db 0FFh
db 0F4h	;   *
db  88h	;   *
db 0F8h	;   *
db 0F0h	;   *
db  2Fh	; /
db 0F8h	;   *
db    0
db  0Ch
db    0
db  41h	; A
db  0Ch
db  0Ah
db  9Ch	;   *
db  9Bh	;   *
db  9Ch	;   *
db  9Bh	;   *
db  97h	;   *
db  90h	;   *
db    0
db  60h	; `
db    0
db    0
db  0Ch
db    0
db  41h	; A
db  0Ch
db  0Ah
db  9Ch	;   *
db  9Bh	;   *
db  9Ch	;   *
db  9Bh	;   *
db  97h	;   *
db  90h	;   *
db    0
db  60h	; `
db    0
db    0
db  0Ch
db    0
db  41h	; A
db  0Ch
db  0Ah
db  9Ch	;   *
db  9Bh	;   *
db  9Ch	;   *
db  9Bh	;   *
db  97h	;   *
db  90h	;   *
db  8Fh	;   *
db  90h	;   *
db  97h	;   *
db  9Bh	;   *
db  9Ch	;   *
db  9Bh	;   *
db  97h	;   *
db  90h	;   *
db    0
db 0C0h	;   *
db    0
db 0FFh
db 0F4h	;   *
db 0B5h	;   *
db 0F8h	;   *
db 0F0h	;   *
db    0
db  70h	; p
db  30h	; 0
db  1Bh
db  20h
db  90h	;   *
db  20h
db 0C0h	;   *
db    0
db  68h	; h
db  90h	;   *
db  1Bh
db 0FFh
db 0F2h	;   *
db  61h	; a
db 0F4h	;   *
db 0CBh	;   *
db 0F7h	;   *
db 0F0h	;   *
db  0Ch
db 0F8h	;   *
db  24h	; $
db  30h	; 0
db  2Dh	; -
db  8Bh	;   *
db  8Ah	;   *
db  86h	;   *
db  89h	;   *
db  86h	;   *
db  87h	;   *
db  89h	;   *
db  8Bh	;   *
db  90h	;   *
db  93h	;   *
db  90h	;   *
db  30h	; 0
db  60h	; `
db  5Ch	; \
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db  8Bh	;   *
db  30h	; 0
db  90h	;   *
db  91h	;   *
db  30h	; 0
db  18h
db  16h
db  8Eh	;   *
db  2Eh	; .
db  30h	; 0
db  2Dh	; -
db  8Ch	;   *
db  8Bh	;   *
db  89h	;   *
db  27h	; '
db  60h	; `
db  5Ch	; \
db  86h	;   *
db  8Bh	;   *
db  24h	; $
db  30h	; 0
db  2Dh	; -
db  86h	;   *
db  27h	; '
db  60h	; `
db  5Ch	; \
db  86h	;   *
db  24h	; $
db 0C0h	;   *
db 0C1h	;   *
db  24h	; $
db  90h	;   *
db  8Eh	;   *
db    0
db  30h	; 0
db    0
db 0F2h	;   *
db  61h	; a
db 0FFh
db 0F4h	;   *
db  8Ah	;   *
db 0F7h	;   *
db 0F0h	;   *
db  11h
db 0F8h	;   *
db  24h	; $
db  30h	; 0
db  2Dh	; -
db  8Bh	;   *
db  8Ah	;   *
db  86h	;   *
db  89h	;   *
db  86h	;   *
db  87h	;   *
db  89h	;   *
db  87h	;   *
db  8Bh	;   *
db  2Ch	; ,
db  60h	; `
db  5Ch	; \
db  87h	;   *
db  26h	; &
db  60h	; `
db  61h	; a
db  26h	; &
db  60h	; `
db  5Ch	; \
db  25h	; %
db  60h	; `
db  61h	; a
db  25h	; %
db 0C0h	;   *
db 0BEh	;   *
db  24h	; $
db  60h	; `
db  5Ch	; \
db  83h	;   *
db  84h	;   *
db  80h	;   *
db  84h	;   *
db  7Dh	; }
db  7Bh	; {
db  7Bh	; {
db  1Bh
db  90h	;   *
db  8Eh	;   *
db    0
db  30h	; 0
db    0
db 0FFh
db 0F4h	;   *
db  57h	; W
db 0F7h	;   *
db 0F0h	;   *
db  0Eh
db 0F8h	;   *
db  18h
db  30h	; 0
db  2Dh	; -
db  7Fh	; 
db  7Eh	; ~
db  7Ah	; z
db  7Dh	; }
db  7Ah	; z
db  7Bh	; {
db  7Dh	; }
db  78h	; x
db  7Bh	; {
db  1Dh
db  60h	; `
db  5Ch	; \
db  1Fh
db  90h	;   *
db  8Eh	;   *
db  1Dh
db  30h	; 0
db  2Dh	; -
db  1Ch
db 0C0h	;   *
db 0BEh	;   *
db  1Dh
db  60h	; `
db  5Ch	; \
db  1Fh
db  30h	; 0
db  2Dh	; -
db  80h	;   *
db  1Fh
db  60h	; `
db  5Ch	; \
db  7Dh	; }
db  7Bh	; {
db  7Dh	; }
db  7Fh	; 
db  73h	; s
db  74h	; t
db  76h	; v
db  18h
db  90h	;   *
db  8Eh	;   *
db    0
db  30h	; 0
db    0
db 0FFh
db 0F2h	;   *
db  75h	; u
db 0F4h	;   *
db  1Fh
db 0F7h	;   *
db 0F0h	;   *
db  0Ch
db 0F8h	;   *
db  31h	; 1
db  30h	; 0
db  2Dh	; -
db  31h	; 1
db  18h
db  16h
db  92h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  8Dh	;   *
db  8Ah	;   *
db  8Ch	;   *
db  8Dh	;   *
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  16h
db  32h	; 2
db  48h	; H
db  44h	; D
db  32h	; 2
db  18h
db  16h
db  31h	; 1
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  91h	;   *
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db  28h	; (
db  18h
db  16h
db  8Ah	;   *
db  8Ch	;   *
db  8Dh	;   *
db  8Fh	;   *
db  92h	;   *
db  31h	; 1
db  30h	; 0
db  2Dh	; -
db  31h	; 1
db  18h
db  16h
db  92h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  8Dh	;   *
db  8Ah	;   *
db  8Ch	;   *
db  8Dh	;   *
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  16h
db  36h	; 6
db  60h	; `
db  5Ch	; \
db  98h	;   *
db  39h	; 9
db 0C0h	;   *
db 0BEh	;   *
db 0F2h	;   *
db  75h	; u
db 0FFh
db 0F4h	;   *
db 0CFh	;   *
db 0F6h	;   *
db 0F0h	;   *
db  11h
db 0F8h	;   *
db  28h	; (
db 0C0h	;   *
db 0C1h	;   *
db  88h	;   *
db  28h	; (
db  60h	; `
db  61h	; a
db  28h	; (
db  30h	; 0
db  2Dh	; -
db  25h	; %
db  18h
db  16h
db  28h	; (
db  18h
db  19h
db  28h	; (
db  30h	; 0
db  2Dh	; -
db  80h	;   *
db  83h	;   *
db  86h	;   *
db  28h	; (
db 0C0h	;   *
db 0C1h	;   *
db  28h	; (
db 0C0h	;   *
db 0BEh	;   *
db  2Ah	; *
db  60h	; `
db  5Ch	; \
db  8Fh	;   *
db  31h	; 1
db 0C0h	;   *
db 0BEh	;   *
db 0FFh
db 0F4h	;   *
db 0A5h	;   *
db 0F6h	;   *
db 0F0h	;   *
db  0Eh
db 0F8h	;   *
db  21h	; !
db  48h	; H
db  44h	; D
db  23h	; #
db  18h
db  16h
db  25h	; %
db  60h	; `
db  5Ch	; \
db  86h	;   *
db  85h	;   *
db  80h	;   *
db  81h	;   *
db  80h	;   *
db  7Ch	; |
db  21h	; !
db  48h	; H
db  44h	; D
db  23h	; #
db  18h
db  16h
db  25h	; %
db  60h	; `
db  5Ch	; \
db  86h	;   *
db  85h	;   *
db  86h	;   *
db  88h	;   *
db  21h	; !
db 0C0h	;   *
db 0BEh	;   *
db 0FFh
db 0F2h	;   *
db  64h	; d
db 0F4h	;   *
db  51h	; Q
db 0F6h	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db 0D0h	;   *
db    0
db  18h
db    0
db  28h	; (
db  18h
db  16h
db  8Bh	;   *
db  8Bh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  92h	;   *
db  94h	;   *
db  2Fh	; /
db  0Ch
db  0Ah
db  8Dh	;   *
db  2Fh	; /
db  18h
db  19h
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  28h	; (
db  18h
db  16h
db  8Bh	;   *
db  8Bh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  2Dh	; -
db  0Ch
db  0Ah
db  8Bh	;   *
db  26h	; &
db  18h
db  16h
db  88h	;   *
db  8Bh	;   *
db  28h	; (
db  30h	; 0
db  2Dh	; -
db 0D1h	;   *
db 0F4h	;   *
db  21h	; !
db 0F6h	;   *
db 0F0h	;   *
db    7
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  97h	;   *
db  94h	;   *
db  92h	;   *
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  92h	;   *
db  8Fh	;   *
db  8Dh	;   *
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  97h	;   *
db  94h	;   *
db  92h	;   *
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  92h	;   *
db  8Fh	;   *
db  8Dh	;   *
db  2Bh	; +
db  0Ch
db  0Ah
db  86h	;   *
db  28h	; (
db  18h
db  16h
db 0F4h	;   *
db 0CEh	;   *
db 0F5h	;   *
db 0F0h	;   *
db  1Bh
db    0
db  18h
db    0
db  28h	; (
db  18h
db  16h
db  8Bh	;   *
db  8Bh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  92h	;   *
db  94h	;   *
db  2Fh	; /
db  0Ch
db  0Ah
db  8Dh	;   *
db  2Fh	; /
db  18h
db  19h
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  28h	; (
db  18h
db  16h
db  8Bh	;   *
db  8Bh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  2Dh	; -
db  0Ch
db  0Ah
db  8Bh	;   *
db  26h	; &
db  18h
db  16h
db  88h	;   *
db  8Bh	;   *
db  28h	; (
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  2Dh	; -
db  0Ch
db  0Ah
db  8Bh	;   *
db  26h	; &
db  18h
db  16h
db  88h	;   *
db  8Bh	;   *
db  28h	; (
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  16h
db  32h	; 2
db  0Ch
db  0Ah
db  8Fh	;   *
db  2Dh	; -
db  18h
db  16h
db  8Fh	;   *
db  92h	;   *
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  16h
db  32h	; 2
db  0Ch
db  0Ah
db  8Fh	;   *
db  2Dh	; -
db  18h
db  16h
db  8Fh	;   *
db  92h	;   *
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db 0F4h	;   *
db  6Bh	; k
db 0F5h	;   *
db 0F0h	;   *
db    7
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  97h	;   *
db  94h	;   *
db  92h	;   *
db  92h	;   *
db  94h	;   *
db  8Fh	;   *
db  8Dh	;   *
db  8Dh	;   *
db  92h	;   *
db  8Fh	;   *
db  8Dh	;   *
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  97h	;   *
db  94h	;   *
db  92h	;   *
db  92h	;   *
db  94h	;   *
db  8Fh	;   *
db  8Dh	;   *
db  8Dh	;   *
db  92h	;   *
db  8Fh	;   *
db  8Dh	;   *
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db 0F4h	;   *
db  26h	; &
db 0F5h	;   *
db 0F0h	;   *
db  1Bh
db    0
db  18h
db    0
db  28h	; (
db  18h
db  16h
db  8Bh	;   *
db  8Bh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  92h	;   *
db  94h	;   *
db  2Fh	; /
db  0Ch
db  0Ah
db  8Dh	;   *
db  2Fh	; /
db  18h
db  19h
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  28h	; (
db  18h
db  16h
db  8Bh	;   *
db  8Bh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  2Dh	; -
db  0Ch
db  0Ah
db  8Bh	;   *
db  26h	; &
db  18h
db  16h
db  88h	;   *
db  8Bh	;   *
db  28h	; (
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  2Dh	; -
db  0Ch
db  0Ah
db  8Bh	;   *
db  26h	; &
db  18h
db  16h
db  88h	;   *
db  8Bh	;   *
db  28h	; (
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  2Dh	; -
db  0Ch
db  0Ah
db  8Bh	;   *
db  26h	; &
db  18h
db  16h
db  88h	;   *
db  8Bh	;   *
db  28h	; (
db  30h	; 0
db  2Dh	; -
db 0F4h	;   *
db  17h
db 0F5h	;   *
db 0F0h	;   *
db  1Bh
db  34h	; 4
db  0Ch
db  0Ah
db  99h	;   *
db  9Bh	;   *
db  9Eh	;   *
db  40h	; @
db  90h	;   *
db  91h	;   *
db  40h	; @
db  60h	; `
db  5Ch	; \
db    0
db  60h	; `
db    0
db 0FFh
db 0F4h	;   *
db  68h	; h
db 0F4h	;   *
db 0F0h	;   *
db  18h
db 0F8h	;   *
db 0D0h	;   *
db  17h
db 0C0h	;   *
db 0C1h	;   *
db  17h
db  90h	;   *
db  8Eh	;   *
db  1Ah
db  30h	; 0
db  2Dh	; -
db  17h
db 0C0h	;   *
db 0C1h	;   *
db  17h
db  90h	;   *
db  8Eh	;   *
db  15h
db  30h	; 0
db  2Dh	; -
db 0D1h	;   *
db  17h
db 0C0h	;   *
db 0BEh	;   *
db  7Ah	; z
db  77h	; w
db  7Ah	; z
db  17h
db 0C0h	;   *
db 0C1h	;   *
db  17h
db  90h	;   *
db  8Eh	;   *
db  1Ah
db  30h	; 0
db  2Dh	; -
db  17h
db 0C0h	;   *
db 0C1h	;   *
db  17h
db  90h	;   *
db  8Eh	;   *
db  15h
db  30h	; 0
db  2Dh	; -
db  17h
db  90h	;   *
db  8Eh	;   *
db  15h
db  30h	; 0
db  2Dh	; -
db  17h
db  90h	;   *
db  8Eh	;   *
db  15h
db  30h	; 0
db  2Dh	; -
db  17h
db  90h	;   *
db  8Eh	;   *
db  15h
db  30h	; 0
db  2Dh	; -
db  17h
db 0C0h	;   *
db 0BEh	;   *
db  7Ah	; z
db  77h	; w
db  7Ah	; z
db  17h
db 0C0h	;   *
db 0C1h	;   *
db  17h
db  90h	;   *
db  8Eh	;   *
db  1Ah
db  30h	; 0
db  2Dh	; -
db  17h
db 0C0h	;   *
db 0C1h	;   *
db  17h
db  90h	;   *
db  8Eh	;   *
db  15h
db  30h	; 0
db  2Dh	; -
db  17h
db  90h	;   *
db  8Eh	;   *
db  15h
db  30h	; 0
db  2Dh	; -
db  17h
db  90h	;   *
db  8Eh	;   *
db  15h
db  30h	; 0
db  2Dh	; -
db  17h
db 0C0h	;   *
db 0C1h	;   *
db  17h
db  60h	; `
db  5Ch	; \
db    0
db  60h	; `
db    0
db 0FFh
db 0F4h	;   *
db 0FEh	;   *
db 0F4h	;   *
db 0F0h	;   *
db  39h	; 9
db 0F8h	;   *
db 0D0h	;   *
db  34h	; 4
db  18h
db  0Ch
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0A2h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db  94h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0A2h	;   *
db  9Bh	;   *
db  92h	;   *
db  99h	;   *
db 0D3h	;   *
db  34h	; 4
db  18h
db  0Ch
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0A2h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db  99h	;   *
db  9Eh	;   *
db 0A5h	;   *
db  9Eh	;   *
db 0A7h	;   *
db  9Eh	;   *
db 0A5h	;   *
db  9Eh	;   *
db  94h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0A2h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db  97h	;   *
db  9Eh	;   *
db 0A5h	;   *
db  9Eh	;   *
db 0A7h	;   *
db  9Eh	;   *
db 0A5h	;   *
db  9Eh	;   *
db  94h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0A2h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db  94h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0A2h	;   *
db  9Bh	;   *
db  92h	;   *
db  99h	;   *
db  94h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0A2h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0D0h	;   *
db  34h	; 4
db  18h
db  0Ch
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0A2h	;   *
db  9Bh	;   *
db  45h	; E
db  0Ch
db  0Ah
db 0A2h	;   *
db  9Eh	;   *
db  99h	;   *
db 0D3h	;   *
db 0D0h	;   *
db  34h	; 4
db  18h
db  0Ch
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0A2h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db  97h	;   *
db  9Eh	;   *
db 0A5h	;   *
db  9Eh	;   *
db 0A7h	;   *
db  9Eh	;   *
db 0A5h	;   *
db  9Eh	;   *
db 0D1h	;   *
db  34h	; 4
db  18h
db  0Ch
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0A2h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db  94h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0A2h	;   *
db  9Bh	;   *
db  92h	;   *
db  99h	;   *
db  94h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0A2h	;   *
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0D0h	;   *
db  34h	; 4
db  18h
db  0Ch
db  9Bh	;   *
db 0A0h	;   *
db  9Bh	;   *
db 0A2h	;   *
db  9Bh	;   *
db  45h	; E
db  0Ch
db  0Ah
db 0A2h	;   *
db  9Eh	;   *
db  99h	;   *
db 0D2h	;   *
db  34h	; 4
db 0C0h	;   *
db 0C1h	;   *
db  34h	; 4
db  60h	; `
db  5Ch	; \
db    0
db  60h	; `
db    0
db 0FFh
db 0F4h	;   *
db  4Ah	; J
db 0F3h	;   *
db 0F0h	;   *
db  18h
db 0F8h	;   *
db 0D0h	;   *
db  10h
db 0C0h	;   *
db 0C1h	;   *
db  10h
db  90h	;   *
db  8Eh	;   *
db  13h
db  30h	; 0
db  2Dh	; -
db  10h
db 0C0h	;   *
db 0C1h	;   *
db  10h
db  90h	;   *
db  8Eh	;   *
db  0Eh
db  30h	; 0
db  2Dh	; -
db 0D1h	;   *
db  10h
db 0C0h	;   *
db 0BEh	;   *
db  73h	; s
db  70h	; p
db  73h	; s
db  10h
db 0C0h	;   *
db 0C1h	;   *
db  10h
db  90h	;   *
db  8Eh	;   *
db  13h
db  30h	; 0
db  2Dh	; -
db  10h
db 0C0h	;   *
db 0C1h	;   *
db  10h
db  90h	;   *
db  8Eh	;   *
db  0Eh
db  30h	; 0
db  2Dh	; -
db  10h
db  90h	;   *
db  8Eh	;   *
db  0Eh
db  30h	; 0
db  2Dh	; -
db  10h
db  90h	;   *
db  8Eh	;   *
db  0Eh
db  30h	; 0
db  2Dh	; -
db  10h
db  90h	;   *
db  8Eh	;   *
db  0Eh
db  30h	; 0
db  2Dh	; -
db  10h
db 0C0h	;   *
db 0BEh	;   *
db  73h	; s
db  70h	; p
db  73h	; s
db  10h
db 0C0h	;   *
db 0C1h	;   *
db  10h
db  90h	;   *
db  8Eh	;   *
db  13h
db  30h	; 0
db  2Dh	; -
db  10h
db 0C0h	;   *
db 0C1h	;   *
db  10h
db  90h	;   *
db  8Eh	;   *
db  0Eh
db  30h	; 0
db  2Dh	; -
db  10h
db  90h	;   *
db  8Eh	;   *
db  0Eh
db  30h	; 0
db  2Dh	; -
db  10h
db  90h	;   *
db  8Eh	;   *
db  0Eh
db  30h	; 0
db  2Dh	; -
db  10h
db 0C0h	;   *
db 0C1h	;   *
db  10h
db  60h	; `
db  5Ch	; \
db    0
db  60h	; `
db    0
db 0FFh
db 0F4h	;   *
db 0F6h	;   *
db 0F3h	;   *
db 0F0h	;   *
db    0
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  1Bh
db  20h
db  18h
db  10h
db  30h	; 0
db  48h	; H
db  20h
db  18h
db  30h	; 0
db  30h	; 0
db  20h
db  18h
db  10h
db    0
db  10h
db  68h	; h
db  30h	; 0
db  1Bh
db 0D3h	;   *
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  1Bh
db  68h	; h
db  18h
db  1Bh
db  10h
db    0
db  10h
db  28h	; (
db  30h	; 0
db 0D3h	;   *
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  1Bh
db  20h
db  18h
db  10h
db  30h	; 0
db  48h	; H
db  20h
db  18h
db  30h	; 0
db  30h	; 0
db  20h
db  18h
db  10h
db    0
db  10h
db  68h	; h
db  30h	; 0
db  1Bh
db 0D1h	;   *
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  1Bh
db  20h
db  18h
db  10h
db    0
db  10h
db  68h	; h
db  30h	; 0
db  1Bh
db 0D2h	;   *
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  1Bh
db  68h	; h
db  18h
db  1Bh
db  10h
db    0
db  10h
db  28h	; (
db  30h	; 0
db 0D3h	;   *
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  1Bh
db  20h
db  18h
db  10h
db  30h	; 0
db  48h	; H
db  20h
db  18h
db  30h	; 0
db  30h	; 0
db  20h
db  18h
db  10h
db    0
db  10h
db  68h	; h
db  30h	; 0
db  1Bh
db 0D1h	;   *
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  1Bh
db  30h	; 0
db  18h
db  10h
db    0
db  10h
db  68h	; h
db  30h	; 0
db  1Bh
db 0D1h	;   *
db  20h
db 0C0h	;   *
db  20h
db  78h	; x
db  70h	; p
db  18h
db  1Bh
db  68h	; h
db  30h	; 0
db  1Bh
db 0F2h	;   *
db  64h	; d
db 0FFh
db 0F2h	;   *
db 0A0h	;   *
db 0F4h	;   *
db  64h	; d
db 0F2h	;   *
db 0F0h	;   *
db  20h
db 0F8h	;   *
db  3Ah	; :
db  18h
db  16h
db  93h	;   *
db  96h	;   *
db  98h	;   *
db  3Ah	; :
db  48h	; H
db  44h	; D
db  3Ah	; :
db  18h
db  16h
db  9Ah	;   *
db  93h	;   *
db  96h	;   *
db  98h	;   *
db  3Ah	; :
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  3Ah	; :
db  18h
db  16h
db  93h	;   *
db  96h	;   *
db  98h	;   *
db  3Ah	; :
db  48h	; H
db  44h	; D
db  3Ah	; :
db  18h
db  16h
db  9Dh	;   *
db  9Ah	;   *
db  98h	;   *
db  96h	;   *
db  98h	;   *
db  96h	;   *
db  33h	; 3
db  30h	; 0
db  2Dh	; -
db  3Ah	; :
db  18h
db  16h
db  93h	;   *
db  96h	;   *
db  98h	;   *
db  3Ah	; :
db  48h	; H
db  44h	; D
db  3Ah	; :
db  18h
db  16h
db  9Ah	;   *
db  93h	;   *
db  96h	;   *
db  98h	;   *
db  3Ah	; :
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  3Ah	; :
db  18h
db  16h
db  93h	;   *
db  96h	;   *
db  98h	;   *
db  3Ah	; :
db  48h	; H
db  44h	; D
db  3Ah	; :
db  18h
db  16h
db  9Dh	;   *
db  9Ah	;   *
db  98h	;   *
db  96h	;   *
db  98h	;   *
db  96h	;   *
db  33h	; 3
db  30h	; 0
db  2Dh	; -
db  3Bh	; ;
db  18h
db  16h
db  94h	;   *
db  97h	;   *
db  99h	;   *
db  3Bh	; ;
db  48h	; H
db  44h	; D
db  3Bh	; ;
db  18h
db  16h
db  9Bh	;   *
db  94h	;   *
db  97h	;   *
db  99h	;   *
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  3Bh	; ;
db  18h
db  16h
db  94h	;   *
db  97h	;   *
db  99h	;   *
db  3Bh	; ;
db  48h	; H
db  44h	; D
db  3Bh	; ;
db  18h
db  16h
db  9Eh	;   *
db  9Bh	;   *
db  99h	;   *
db  97h	;   *
db  99h	;   *
db  97h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  3Bh	; ;
db  18h
db  16h
db  94h	;   *
db  97h	;   *
db  99h	;   *
db  3Bh	; ;
db  48h	; H
db  44h	; D
db  3Bh	; ;
db  18h
db  16h
db  9Bh	;   *
db  94h	;   *
db  97h	;   *
db  99h	;   *
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  3Bh	; ;
db  18h
db  16h
db  94h	;   *
db  97h	;   *
db  99h	;   *
db  3Bh	; ;
db  48h	; H
db  44h	; D
db  3Bh	; ;
db  18h
db  16h
db  9Eh	;   *
db  9Bh	;   *
db  99h	;   *
db  97h	;   *
db  99h	;   *
db  97h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db 0F2h	;   *
db 0A0h	;   *
db 0FFh
db 0F4h	;   *
db 0F1h	;   *
db 0F1h	;   *
db 0F0h	;   *
db  20h
db 0F8h	;   *
db 0D0h	;   *
db    0
db 0C0h	;   *
db    0
db 0D7h	;   *
db 0F4h	;   *
db  8Eh	;   *
db 0F1h	;   *
db 0F0h	;   *
db  2Ah	; *
db  23h	; #
db  30h	; 0
db  2Dh	; -
db  83h	;   *
db  28h	; (
db  18h
db  16h
db  88h	;   *
db  21h	; !
db  30h	; 0
db  2Dh	; -
db  83h	;   *
db  83h	;   *
db  28h	; (
db  18h
db  16h
db  88h	;   *
db  21h	; !
db  30h	; 0
db  2Dh	; -
db  83h	;   *
db  83h	;   *
db  28h	; (
db  18h
db  16h
db  88h	;   *
db  21h	; !
db  30h	; 0
db  2Dh	; -
db  83h	;   *
db  83h	;   *
db  28h	; (
db  18h
db  16h
db  88h	;   *
db  21h	; !
db  30h	; 0
db  2Dh	; -
db  83h	;   *
db  83h	;   *
db  28h	; (
db  18h
db  16h
db  88h	;   *
db  21h	; !
db  30h	; 0
db  2Dh	; -
db  83h	;   *
db  83h	;   *
db  28h	; (
db  18h
db  16h
db  88h	;   *
db  21h	; !
db  30h	; 0
db  2Dh	; -
db  28h	; (
db  18h
db  16h
db  83h	;   *
db  81h	;   *
db  88h	;   *
db  83h	;   *
db  81h	;   *
db  88h	;   *
db  83h	;   *
db  81h	;   *
db  88h	;   *
db  83h	;   *
db  81h	;   *
db  88h	;   *
db  83h	;   *
db  21h	; !
db  30h	; 0
db  2Dh	; -
db 0FFh
db 0F4h	;   *
db  95h	;   *
db 0F1h	;   *
db 0F0h	;   *
db  20h
db 0F8h	;   *
db  27h	; '
db  30h	; 0
db  2Dh	; -
db  87h	;   *
db  2Ch	; ,
db  18h
db  16h
db  8Ch	;   *
db  25h	; %
db  30h	; 0
db  2Dh	; -
db  87h	;   *
db  87h	;   *
db  2Ch	; ,
db  18h
db  16h
db  8Ch	;   *
db  25h	; %
db  30h	; 0
db  2Dh	; -
db  87h	;   *
db  87h	;   *
db  2Ch	; ,
db  18h
db  16h
db  8Ch	;   *
db  25h	; %
db  30h	; 0
db  2Dh	; -
db  87h	;   *
db  87h	;   *
db  2Ch	; ,
db  18h
db  16h
db  8Ch	;   *
db  25h	; %
db  30h	; 0
db  2Dh	; -
db  87h	;   *
db  87h	;   *
db  2Ch	; ,
db  18h
db  16h
db  8Ch	;   *
db  25h	; %
db  30h	; 0
db  2Dh	; -
db  87h	;   *
db  87h	;   *
db  2Ch	; ,
db  18h
db  16h
db  8Ch	;   *
db  25h	; %
db  30h	; 0
db  2Dh	; -
db  2Ch	; ,
db  18h
db  16h
db  87h	;   *
db  85h	;   *
db  8Ch	;   *
db  87h	;   *
db  85h	;   *
db  8Ch	;   *
db  87h	;   *
db  85h	;   *
db  8Ch	;   *
db  87h	;   *
db  85h	;   *
db  8Ch	;   *
db  87h	;   *
db  25h	; %
db  30h	; 0
db  2Dh	; -
db 0F4h	;   *
db 0ECh	;   *
db 0F0h	;   *
db 0F0h	;   *
db  2Ah	; *
db  7Ch	; |
db  7Ch	; |
db  21h	; !
db  18h
db  16h
db  81h	;   *
db  1Ah
db  30h	; 0
db  2Dh	; -
db  7Ch	; |
db  7Ch	; |
db  21h	; !
db  18h
db  16h
db  81h	;   *
db  1Ah
db  30h	; 0
db  2Dh	; -
db  7Ch	; |
db  7Ch	; |
db  21h	; !
db  18h
db  16h
db  81h	;   *
db  1Ah
db  30h	; 0
db  2Dh	; -
db  7Ch	; |
db  7Ch	; |
db  21h	; !
db  18h
db  16h
db  81h	;   *
db  1Ah
db  30h	; 0
db  2Dh	; -
db  7Ch	; |
db  7Ch	; |
db  21h	; !
db  18h
db  16h
db  81h	;   *
db  1Ah
db  30h	; 0
db  2Dh	; -
db  7Ch	; |
db  7Ch	; |
db  21h	; !
db  18h
db  16h
db  81h	;   *
db  1Ah
db  30h	; 0
db  2Dh	; -
db  21h	; !
db  18h
db  16h
db  7Ch	; |
db  7Ah	; z
db  81h	;   *
db  7Ch	; |
db  7Ah	; z
db  81h	;   *
db  7Ch	; |
db  7Ah	; z
db  81h	;   *
db  7Ch	; |
db  7Ah	; z
db  81h	;   *
db  7Ch	; |
db  1Ah
db  30h	; 0
db  2Dh	; -
db 0FFh
db 0F4h	;   *
db 0BBh	;   *
db 0F1h	;   *
db 0F0h	;   *
db  1Bh
db 0D0h	;   *
db  68h	; h
db  18h
db  1Bh
db    8
db  28h	; (
db  30h	; 0
db    8
db    8
db  28h	; (
db  18h
db    8
db  28h	; (
db  30h	; 0
db    8
db    8
db  28h	; (
db  18h
db    8
db  28h	; (
db  30h	; 0
db    8
db    8
db  28h	; (
db  18h
db    8
db  28h	; (
db  30h	; 0
db    8
db    8
db  28h	; (
db  18h
db    8
db  28h	; (
db  30h	; 0
db    8
db    8
db  28h	; (
db  18h
db    8
db  28h	; (
db  30h	; 0
db    8
db    8
db  28h	; (
db  18h
db    8
db  28h	; (
db  30h	; 0
db    8
db    8
db  28h	; (
db  18h
db    8
db  28h	; (
db  30h	; 0
db  28h	; (
db  0Ch
db    8
db    8
db    8
db    8
db    8
db    8
db    8
db 0D1h	;   *
db 0FFh
db 0F2h	;   *
db  75h	; u
db 0F4h	;   *
db 0C1h	;   *
db 0F0h	;   *
db 0F0h	;   *
db  0Ch
db 0F8h	;   *
db  33h	; 3
db  60h	; `
db  5Ch	; \
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  93h	;   *
db  90h	;   *
db  93h	;   *
db  92h	;   *
db  90h	;   *
db  30h	; 0
db  60h	; `
db  5Ch	; \
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db  92h	;   *
db  37h	; 7
db  90h	;   *
db  8Eh	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  38h	; 8
db  60h	; `
db  5Ch	; \
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  95h	;   *
db  93h	;   *
db  97h	;   *
db  92h	;   *
db  97h	;   *
db  92h	;   *
db  90h	;   *
db  8Fh	;   *
db  90h	;   *
db  38h	; 8
db  60h	; `
db  5Ch	; \
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  95h	;   *
db  33h	; 3
db  60h	; `
db  5Ch	; \
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  90h	;   *
db  30h	; 0
db  60h	; `
db  5Ch	; \
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db  92h	;   *
db  30h	; 0
db 0C0h	;   *
db 0C1h	;   *
db  30h	; 0
db 0C0h	;   *
db 0BEh	;   *
db 0F2h	;   *
db  75h	; u
db 0FFh
db 0F4h	;   *
db  76h	; v
db 0F0h	;   *
db 0F0h	;   *
db  11h
db 0F8h	;   *
db  2Bh	; +
db 0C0h	;   *
db 0BEh	;   *
db  89h	;   *
db  27h	; '
db  60h	; `
db  5Ch	; \
db  86h	;   *
db  24h	; $
db 0C0h	;   *
db 0C1h	;   *
db  84h	;   *
db  24h	; $
db  60h	; `
db  5Ch	; \
db  83h	;   *
db  24h	; $
db 0C0h	;   *
db 0C1h	;   *
db  84h	;   *
db  24h	; $
db 0C0h	;   *
db 0BEh	;   *
db  29h	; )
db 0C0h	;   *
db 0C1h	;   *
db  29h	; )
db  60h	; `
db  5Ch	; \
db  86h	;   *
db  27h	; '
db 0C0h	;   *
db 0BEh	;   *
db 0FFh
db 0F4h	;   *
db  4Eh	; N
db 0F0h	;   *
db 0F0h	;   *
db  0Eh
db 0F8h	;   *
db  24h	; $
db  60h	; `
db  5Ch	; \
db  23h	; #
db  30h	; 0
db  2Dh	; -
db  82h	;   *
db  21h	; !
db  60h	; `
db  5Ch	; \
db  80h	;   *
db  7Fh	; 
db  7Dh	; }
db  7Bh	; {
db  7Ch	; |
db  7Dh	; }
db  1Fh
db  30h	; 0
db  2Dh	; -
db  80h	;   *
db  1Fh
db  60h	; `
db  5Ch	; \
db  7Dh	; }
db  1Bh
db 0C0h	;   *
db 0BEh	;   *
db  1Dh
db  60h	; `
db  5Ch	; \
db  1Fh
db  30h	; 0
db  2Dh	; -
db  80h	;   *
db  1Fh
db 0C0h	;   *
db 0BEh	;   *
db  1Ah
db  60h	; `
db  5Ch	; \
db  7Fh	; 
db  18h
db 0C0h	;   *
db 0BEh	;   *
db 0F0h	;   *
db  20h
db  6Ch	; l
db 0FFh
db 0F2h	;   *
db 0A0h	;   *
db 0F4h	;   *
db  6Eh	; n
db 0F0h	;   *
db 0F0h	;   *
db  1Eh
db 0F8h	;   *
db 0D0h	;   *
db    0
db  48h	; H
db    0
db  3Bh	; ;
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  3Bh	; ;
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  3Bh	; ;
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  3Bh	; ;
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  39h	; 9
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  39h	; 9
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  39h	; 9
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  39h	; 9
db  18h
db  0Ch
db 0D1h	;   *
db 0F0h	;   *
db  20h
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  32h	; 2
db  18h
db  16h
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  32h	; 2
db  18h
db  16h
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  16h
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  16h
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  37h	; 7
db  18h
db  16h
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  37h	; 7
db  18h
db  16h
db  36h	; 6
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  36h	; 6
db  18h
db  16h
db  36h	; 6
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  36h	; 6
db  18h
db  16h
db 0F0h	;   *
db  1Eh
db    0
db  48h	; H
db    0
db  3Bh	; ;
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  3Bh	; ;
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  3Bh	; ;
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  3Bh	; ;
db  18h
db  0Ch
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  3Bh	; ;
db  18h
db  16h
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  3Bh	; ;
db  18h
db  16h
db  9Bh	;   *
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db  3Bh	; ;
db  48h	; H
db  44h	; D
db    0
db  30h	; 0
db    0
db 0FFh
db 0F4h	;   *
db 0B5h	;   *
db 0EFh	;   *
db 0F0h	;   *
db  1Eh
db 0F8h	;   *
db 0D0h	;   *
db    0
db  48h	; H
db    0
db  34h	; 4
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  34h	; 4
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  32h	; 2
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  32h	; 2
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  30h	; 0
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  30h	; 0
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  32h	; 2
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  32h	; 2
db  18h
db  0Ch
db 0D1h	;   *
db 0F0h	;   *
db  20h
db  2Bh	; +
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Bh	; +
db  18h
db  16h
db  2Bh	; +
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Bh	; +
db  18h
db  16h
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Dh	; -
db  18h
db  16h
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Dh	; -
db  18h
db  16h
db  30h	; 0
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  30h	; 0
db  18h
db  16h
db  30h	; 0
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  30h	; 0
db  18h
db  16h
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db 0F0h	;   *
db  1Eh
db    0
db  48h	; H
db    0
db  34h	; 4
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  34h	; 4
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  32h	; 2
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  32h	; 2
db  18h
db  0Ch
db  31h	; 1
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  31h	; 1
db  18h
db  16h
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  32h	; 2
db  18h
db  16h
db  94h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  48h	; H
db  44h	; D
db    0
db  30h	; 0
db    0
db 0FFh
db 0F4h	;   *
db 0FCh	;   *
db 0EEh	;   *
db 0F0h	;   *
db  1Eh
db 0F8h	;   *
db 0D0h	;   *
db    0
db  48h	; H
db    0
db  34h	; 4
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  34h	; 4
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  32h	; 2
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  32h	; 2
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  30h	; 0
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  30h	; 0
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  32h	; 2
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  32h	; 2
db  18h
db  0Ch
db 0D1h	;   *
db 0F0h	;   *
db  20h
db  2Bh	; +
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Bh	; +
db  18h
db  16h
db  2Bh	; +
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Bh	; +
db  18h
db  16h
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Dh	; -
db  18h
db  16h
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Dh	; -
db  18h
db  16h
db  30h	; 0
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  30h	; 0
db  18h
db  16h
db  30h	; 0
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  30h	; 0
db  18h
db  16h
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Fh	; /
db  18h
db  16h
db 0F0h	;   *
db  1Eh
db    0
db  48h	; H
db    0
db  34h	; 4
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  34h	; 4
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  32h	; 2
db  18h
db  0Ch
db    0
db  48h	; H
db    0
db  32h	; 2
db  18h
db  0Ch
db  31h	; 1
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  31h	; 1
db  18h
db  16h
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  32h	; 2
db  18h
db  16h
db  94h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  48h	; H
db  44h	; D
db    0
db  30h	; 0
db    0
db 0FFh
db 0F4h	;   *
db 0BFh	;   *
db 0EDh	;   *
db 0F0h	;   *
db  11h
db 0F8h	;   *
db  34h	; 4
db  18h
db  0Ch
db  97h	;   *
db  97h	;   *
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  0Ch
db  97h	;   *
db  97h	;   *
db    0
db  18h
db    0
db  37h	; 7
db  18h
db  0Ch
db  99h	;   *
db  99h	;   *
db    0
db  18h
db    0
db  37h	; 7
db  18h
db  0Ch
db  99h	;   *
db  99h	;   *
db    0
db  18h
db    0
db  3Bh	; ;
db  18h
db  0Ch
db  9Eh	;   *
db  9Eh	;   *
db    0
db  18h
db    0
db  3Bh	; ;
db  18h
db  0Ch
db  9Eh	;   *
db  9Eh	;   *
db    0
db  18h
db    0
db  39h	; 9
db  18h
db  0Ch
db  9Bh	;   *
db  9Bh	;   *
db    0
db  18h
db    0
db  39h	; 9
db  18h
db  0Ch
db  9Bh	;   *
db  9Bh	;   *
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  0Ch
db  97h	;   *
db  97h	;   *
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  0Ch
db  97h	;   *
db  97h	;   *
db    0
db  18h
db    0
db  37h	; 7
db  18h
db  0Ch
db  99h	;   *
db  99h	;   *
db    0
db  18h
db    0
db  37h	; 7
db  18h
db  0Ch
db  99h	;   *
db  99h	;   *
db    0
db  18h
db    0
db  3Bh	; ;
db  18h
db  0Ch
db  9Eh	;   *
db  9Eh	;   *
db    0
db  18h
db    0
db  3Bh	; ;
db  18h
db  0Ch
db  9Eh	;   *
db  9Eh	;   *
db    0
db  18h
db    0
db  3Eh	; >
db  18h
db  0Ch
db 0A0h	;   *
db 0A0h	;   *
db    0
db  18h
db    0
db  3Eh	; >
db  18h
db  0Ch
db 0A0h	;   *
db 0A0h	;   *
db    0
db  18h
db    0
db 0D0h	;   *
db    0
db  18h
db    0
db  3Eh	; >
db  18h
db  0Ch
db 0A0h	;   *
db 0A3h	;   *
db    0
db  18h
db    0
db  3Eh	; >
db  18h
db  0Ch
db 0A0h	;   *
db 0A3h	;   *
db 0D1h	;   *
db 0D0h	;   *
db    0
db  18h
db    0
db  39h	; 9
db  18h
db  0Ch
db  9Bh	;   *
db  9Eh	;   *
db    0
db  18h
db    0
db  39h	; 9
db  18h
db  0Ch
db  9Bh	;   *
db  9Eh	;   *
db 0D1h	;   *
db  34h	; 4
db  18h
db  0Ch
db  97h	;   *
db  97h	;   *
db    0
db  18h
db    0
db  34h	; 4
db  18h
db  0Ch
db  97h	;   *
db  97h	;   *
db    0
db  18h
db    0
db  37h	; 7
db  18h
db  0Ch
db  99h	;   *
db  99h	;   *
db    0
db  18h
db    0
db  37h	; 7
db  18h
db  0Ch
db  99h	;   *
db  99h	;   *
db    0
db  18h
db    0
db  3Bh	; ;
db  18h
db  0Ch
db  99h	;   *
db  9Bh	;   *
db  99h	;   *
db  97h	;   *
db  92h	;   *
db  94h	;   *
db  99h	;   *
db  94h	;   *
db  34h	; 4
db  30h	; 0
db  18h
db  34h	; 4
db  48h	; H
db  44h	; D
db    0
db  30h	; 0
db    0
db 0FFh
db 0F4h	;   *
db 0BCh	;   *
db 0EDh	;   *
db 0F0h	;   *
db    0
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  11h
db  68h	; h
db  18h
db  1Bh
db  10h
db  30h	; 0
db  30h	; 0
db  28h	; (
db  18h
db  10h
db 0D7h	;   *
db 0D0h	;   *
db  70h	; p
db  48h	; H
db  11h
db  30h	; 0
db  18h
db  30h	; 0
db  30h	; 0
db  48h	; H
db  1Bh
db 0D3h	;   *
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  11h
db  68h	; h
db  18h
db  1Bh
db  10h
db  30h	; 0
db  30h	; 0
db  28h	; (
db  18h
db  10h
db 0D2h	;   *
db  68h	; h
db  18h
db  1Bh
db    8
db    0
db  28h	; (
db  30h	; 0
db  28h	; (
db  18h
db    8
db    8
db 0F2h	;   *
db 0A0h	;   *
db 0FFh
db 0F2h	;   *
db  57h	; W
db 0F4h	;   *
db 0A4h	;   *
db 0ECh	;   *
db 0F0h	;   *
db  16h
db 0F8h	;   *
db    0
db  18h
db    0
db  28h	; (
db  18h
db  16h
db  8Bh	;   *
db  8Bh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  8Dh	;   *
db  8Dh	;   *
db  2Fh	; /
db  24h	; $
db  22h	; "
db  32h	; 2
db  0Ch
db  0Ah
db  2Dh	; -
db  18h
db  16h
db  8Bh	;   *
db  8Dh	;   *
db  2Dh	; -
db  0Ch
db  0Ah
db  8Fh	;   *
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  28h	; (
db  18h
db  16h
db  8Bh	;   *
db  8Bh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  8Dh	;   *
db  8Dh	;   *
db  2Fh	; /
db  24h	; $
db  22h	; "
db  32h	; 2
db  0Ch
db  0Ah
db  37h	; 7
db  18h
db  16h
db  94h	;   *
db  92h	;   *
db  32h	; 2
db  0Ch
db  0Ah
db  94h	;   *
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db 0F4h	;   *
db  78h	; x
db 0ECh	;   *
db 0F0h	;   *
db    7
db    0
db  18h
db    0
db  3Eh	; >
db  18h
db  16h
db 0A0h	;   *
db 0A3h	;   *
db  43h	; C
db  30h	; 0
db  2Dh	; -
db 0A0h	;   *
db  3Eh	; >
db  24h	; $
db  22h	; "
db  39h	; 9
db  0Ch
db  0Ah
db  3Bh	; ;
db  18h
db  16h
db  9Eh	;   *
db  9Bh	;   *
db  99h	;   *
db  37h	; 7
db  0Ch
db  0Ah
db  92h	;   *
db  34h	; 4
db  18h
db  19h
db  34h	; 4
db  18h
db  0Ch
db 0F4h	;   *
db  3Bh	; ;
db 0ECh	;   *
db 0F0h	;   *
db  16h
db  28h	; (
db  18h
db  16h
db  8Bh	;   *
db  8Bh	;   *
db  8Bh	;   *
db  8Dh	;   *
db  8Dh	;   *
db  8Dh	;   *
db  8Fh	;   *
db  2Dh	; -
db  0Ch
db  0Ah
db  8Bh	;   *
db  28h	; (
db  18h
db  16h
db  86h	;   *
db  28h	; (
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db 0F2h	;   *
db  57h	; W
db 0FFh
db 0F4h	;   *
db  47h	; G
db 0ECh	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db  1Ch
db  60h	; `
db  5Ch	; \
db  7Ah	; z
db  78h	; x
db  7Ah	; z
db  7Ch	; |
db  7Ah	; z
db  78h	; x
db  7Ah	; z
db  73h	; s
db  75h	; u
db  78h	; x
db  77h	; w
db  7Ch	; |
db  7Ah	; z
db  19h
db  30h	; 0
db  2Dh	; -
db  7Ah	; z
db  1Ch
db  60h	; `
db  5Ch	; \
db 0FFh
db 0F4h	;   *
db 0BBh	;   *
db 0EBh	;   *
db 0F0h	;   *
db  1Eh
db 0F8h	;   *
db  17h
db 0C0h	;   *
db 0BEh	;   *
db  75h	; u
db  77h	; w
db  75h	; u
db  0Eh
db  60h	; `
db  5Ch	; \
db  70h	; p
db  73h	; s
db  72h	; r
db  17h
db 0C0h	;   *
db 0C1h	;   *
db  17h
db  30h	; 0
db  2Dh	; -
db  75h	; u
db  17h
db  60h	; `
db  5Ch	; \
db 0FFh
db 0F4h	;   *
db  0Ah
db 0EDh	;   *
db 0F0h	;   *
db    9
db 0D0h	;   *
db  20h
db  30h	; 0
db  64h	; d
db  18h
db  1Bh
db    4
db    0
db 0F4h	;   *
db 0AFh	;   *
db 0ECh	;   *
db  44h	; D
db    7
db 0F4h	;   *
db 0F8h	;   *
db 0ECh	;   *
db  64h	; d
db  30h	; 0
db  1Bh
db 0D3h	;   *
db 0D0h	;   *
db 0F4h	;   *
db 0F0h	;   *
db 0ECh	;   *
db  20h
db  30h	; 0
db  64h	; d
db  18h
db  1Bh
db    4
db  20h
db  30h	; 0
db  24h	; $
db  0Ch
db    4
db 0F4h	;   *
db  94h	;   *
db 0ECh	;   *
db  64h	; d
db  18h
db    7
db 0D1h	;   *
db 0D0h	;   *
db 0F4h	;   *
db 0DAh	;   *
db 0ECh	;   *
db  20h
db  30h	; 0
db  64h	; d
db  18h
db  1Bh
db    4
db    0
db 0F4h	;   *
db  82h	;   *
db 0ECh	;   *
db  44h	; D
db    7
db 0F4h	;   *
db 0CBh	;   *
db 0ECh	;   *
db  64h	; d
db  30h	; 0
db  1Bh
db 0D1h	;   *
db 0FFh
db 0F2h	;   *
db  91h	;   *
db 0F4h	;   *
db  97h	;   *
db 0EBh	;   *
db 0F0h	;   *
db  1Eh
db 0F8h	;   *
db 0D0h	;   *
db  39h	; 9
db  18h
db  16h
db  39h	; 9
db  0Ch
db  0Ah
db  97h	;   *
db  39h	; 9
db  18h
db  16h
db  9Ch	;   *
db  99h	;   *
db  39h	; 9
db  0Ch
db  0Ah
db  97h	;   *
db  39h	; 9
db  18h
db  16h
db  9Ch	;   *
db 0D1h	;   *
db 0D0h	;   *
db  39h	; 9
db  0Ch
db  0Ah
db  97h	;   *
db  99h	;   *
db  97h	;   *
db  34h	; 4
db  18h
db  16h
db    0
db  18h
db    0
db  39h	; 9
db  0Ch
db  0Ah
db  97h	;   *
db  99h	;   *
db  97h	;   *
db  34h	; 4
db  18h
db  16h
db    0
db  18h
db    0
db 0D1h	;   *
db 0D0h	;   *
db  39h	; 9
db  18h
db  16h
db  39h	; 9
db  0Ch
db  0Ah
db  97h	;   *
db  39h	; 9
db  18h
db  16h
db  9Ch	;   *
db  99h	;   *
db  39h	; 9
db  0Ch
db  0Ah
db  97h	;   *
db  39h	; 9
db  18h
db  16h
db  9Ch	;   *
db 0D1h	;   *
db 0D0h	;   *
db  3Eh	; >
db  0Ch
db  0Ah
db  9Ch	;   *
db  9Eh	;   *
db  9Ch	;   *
db  39h	; 9
db  18h
db  16h
db    0
db  18h
db    0
db  3Eh	; >
db  0Ch
db  0Ah
db  9Ch	;   *
db  9Eh	;   *
db  9Ch	;   *
db  39h	; 9
db  18h
db  16h
db    0
db  18h
db    0
db 0D1h	;   *
db 0F2h	;   *
db  91h	;   *
db 0FFh
db 0F4h	;   *
db 0ECh	;   *
db 0EAh	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db 0D0h	;   *
db  18h
db  30h	; 0
db  2Dh	; -
db  78h	; x
db  78h	; x
db  78h	; x
db  7Ah	; z
db  7Ah	; z
db  7Ah	; z
db  7Ah	; z
db  7Ch	; |
db    0
db  18h
db    0
db  1Ah
db  18h
db  16h
db  1Ch
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  1Ah
db  18h
db  16h
db  1Ch
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  1Ah
db  18h
db  16h
db  1Ch
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  1Ah
db  18h
db  16h
db 0D1h	;   *
db 0FFh
db 0F4h	;   *
db 0B7h	;   *
db 0EAh	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db 0D0h	;   *
db  11h
db  30h	; 0
db  2Dh	; -
db  71h	; q
db  71h	; q
db  71h	; q
db  73h	; s
db  73h	; s
db  73h	; s
db  73h	; s
db  75h	; u
db    0
db  18h
db    0
db  13h
db  18h
db  16h
db  15h
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  13h
db  18h
db  16h
db  15h
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  13h
db  18h
db  16h
db  15h
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  13h
db  18h
db  16h
db 0D1h	;   *
db 0FFh
db 0F4h	;   *
db 0A0h	;   *
db 0EBh	;   *
db 0F0h	;   *
db    0
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  0Ch
db  48h	; H
db  16h
db  10h
db    8
db 0D1h	;   *
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  0Ch
db  68h	; h
db  18h
db  16h
db  10h
db  30h	; 0
db  30h	; 0
db  28h	; (
db  18h
db  10h
db 0D1h	;   *
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  0Ch
db  48h	; H
db  16h
db  10h
db    8
db 0D1h	;   *
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  0Ch
db  68h	; h
db  18h
db  16h
db  10h
db  30h	; 0
db  30h	; 0
db  28h	; (
db  18h
db  10h
db 0D1h	;   *
db 0FFh
db 0F2h	;   *
db  64h	; d
db 0F4h	;   *
db 0A4h	;   *
db 0EAh	;   *
db 0F0h	;   *
db    7
db 0F8h	;   *
db 0D0h	;   *
db  34h	; 4
db  18h
db  16h
db  97h	;   *
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  37h	; 7
db  18h
db  16h
db  94h	;   *
db  97h	;   *
db  94h	;   *
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  32h	; 2
db  18h
db  16h
db  94h	;   *
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  30h	; 0
db  18h
db  16h
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  32h	; 2
db  18h
db  16h
db  94h	;   *
db  92h	;   *
db  94h	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  92h	;   *
db  32h	; 2
db  18h
db  16h
db  94h	;   *
db  30h	; 0
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db 0D1h	;   *
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  39h	; 9
db  18h
db  16h
db  97h	;   *
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  9Ch	;   *
db  39h	; 9
db  18h
db  16h
db  97h	;   *
db  99h	;   *
db  97h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  32h	; 2
db  18h
db  16h
db  90h	;   *
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  94h	;   *
db  32h	; 2
db  18h
db  16h
db  90h	;   *
db  92h	;   *
db  94h	;   *
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  39h	; 9
db  18h
db  16h
db  97h	;   *
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  9Ch	;   *
db  39h	; 9
db  18h
db  16h
db  97h	;   *
db  99h	;   *
db  97h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  3Eh	; >
db  30h	; 0
db  2Dh	; -
db  3Eh	; >
db  18h
db  16h
db  9Ch	;   *
db  3Eh	; >
db  30h	; 0
db  2Dh	; -
db 0A0h	;   *
db  3Eh	; >
db  18h
db  16h
db  9Ch	;   *
db  99h	;   *
db  97h	;   *
db  39h	; 9
db  60h	; `
db  5Ch	; \
db 0F2h	;   *
db  64h	; d
db 0FFh
db 0F4h	;   *
db  4Eh	; N
db 0EAh	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db 0D0h	;   *
db  2Fh	; /
db  18h
db  16h
db  92h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  32h	; 2
db  18h
db  16h
db  8Fh	;   *
db  92h	;   *
db  8Fh	;   *
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db  2Dh	; -
db  18h
db  16h
db  8Fh	;   *
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db    0
db  18h
db    0
db  2Bh	; +
db  18h
db  16h
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db  2Dh	; -
db  18h
db  16h
db  8Fh	;   *
db  8Dh	;   *
db  8Fh	;   *
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  8Dh	;   *
db  2Dh	; -
db  18h
db  16h
db  8Fh	;   *
db  2Bh	; +
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db 0D1h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  97h	;   *
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  94h	;   *
db  92h	;   *
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db  2Dh	; -
db  18h
db  16h
db  8Bh	;   *
db  2Dh	; -
db  30h	; 0
db  2Dh	; -
db  8Fh	;   *
db  2Dh	; -
db  18h
db  16h
db  8Bh	;   *
db  8Dh	;   *
db  8Fh	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  97h	;   *
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  94h	;   *
db  92h	;   *
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  39h	; 9
db  18h
db  16h
db  97h	;   *
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  9Bh	;   *
db  39h	; 9
db  18h
db  16h
db  97h	;   *
db  94h	;   *
db  92h	;   *
db  34h	; 4
db  60h	; `
db  5Ch	; \
db 0FFh
db 0F4h	;   *
db  1Eh
db 0E9h	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db 0D0h	;   *
db  1Fh
db 0C0h	;   *
db 0BEh	;   *
db  78h	; x
db  15h
db  60h	; `
db  5Ch	; \
db  7Ah	; z
db  13h
db 0C0h	;   *
db 0BEh	;   *
db 0D1h	;   *
db  18h
db  60h	; `
db  5Ch	; \
db  7Ah	; z
db  1Ch
db 0C0h	;   *
db 0BEh	;   *
db  18h
db  60h	; `
db  5Ch	; \
db  7Ah	; z
db  1Ch
db 0C0h	;   *
db 0BEh	;   *
db  18h
db  60h	; `
db  5Ch	; \
db  7Ah	; z
db  1Ch
db 0C0h	;   *
db 0BEh	;   *
db  18h
db  60h	; `
db  5Ch	; \
db  7Ah	; z
db  1Ch
db 0C0h	;   *
db 0BEh	;   *
db 0FFh
db 0F4h	;   *
db 0EEh	;   *
db 0E8h	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db 0D0h	;   *
db  18h
db 0C0h	;   *
db 0BEh	;   *
db  71h	; q
db  0Eh
db  60h	; `
db  5Ch	; \
db  73h	; s
db  0Ch
db 0C0h	;   *
db 0BEh	;   *
db 0D1h	;   *
db  11h
db  60h	; `
db  5Ch	; \
db  73h	; s
db  15h
db 0C0h	;   *
db 0BEh	;   *
db  11h
db  60h	; `
db  5Ch	; \
db  73h	; s
db  15h
db 0C0h	;   *
db 0BEh	;   *
db  11h
db  60h	; `
db  5Ch	; \
db  73h	; s
db  15h
db 0C0h	;   *
db 0BEh	;   *
db  11h
db  60h	; `
db  5Ch	; \
db  73h	; s
db  15h
db 0C0h	;   *
db 0BEh	;   *
db 0FFh
db 0F2h	;   *
db  8Ch	;   *
db 0F4h	;   *
db  82h	;   *
db 0E9h	;   *
db 0F0h	;   *
db  0Ch
db 0F8h	;   *
db  40h	; @
db  20h
db  1Eh
db  40h	; @
db  10h
db  0Eh
db  43h	; C
db  60h	; `
db  5Ch	; \
db  40h	; @
db  10h
db  0Eh
db 0A0h	;   *
db 0A0h	;   *
db  43h	; C
db 0C0h	;   *
db 0BEh	;   *
db  40h	; @
db  20h
db  1Eh
db  40h	; @
db  10h
db  0Eh
db  43h	; C
db  60h	; `
db  5Ch	; \
db  40h	; @
db  10h
db  0Eh
db 0A0h	;   *
db 0A0h	;   *
db  43h	; C
db  90h	;   *
db  8Eh	;   *
db  45h	; E
db  30h	; 0
db  18h
db 0F2h	;   *
db  8Ch	;   *
db 0FFh
db 0F4h	;   *
db  8Eh	;   *
db 0E8h	;   *
db 0F0h	;   *
db  1Dh
db 0F8h	;   *
db  25h	; %
db  20h
db  1Eh
db  25h	; %
db  10h
db  0Eh
db  28h	; (
db  60h	; `
db  5Ch	; \
db  25h	; %
db  10h
db  0Eh
db  85h	;   *
db  85h	;   *
db  28h	; (
db 0C0h	;   *
db 0BEh	;   *
db  25h	; %
db  20h
db  1Eh
db  25h	; %
db  10h
db  0Eh
db  28h	; (
db  60h	; `
db  5Ch	; \
db  25h	; %
db  10h
db  0Eh
db  85h	;   *
db  85h	;   *
db  28h	; (
db  90h	;   *
db  8Eh	;   *
db  26h	; &
db  30h	; 0
db  18h
db 0FFh
db 0F4h	;   *
db  80h	;   *
db 0E9h	;   *
db 0F0h	;   *
db  0Ch
db  68h	; h
db  30h	; 0
db  1Bh
db  20h
db  90h	;   *
db  20h
db  20h
db  28h	; (
db  10h
db    8
db    8
db    8
db  28h	; (
db  20h
db  28h	; (
db  10h
db    8
db    8
db    8
db  28h	; (
db  30h	; 0
db  20h
db  90h	;   *
db  20h
db  20h
db  28h	; (
db  10h
db    8
db    8
db    8
db    8
db    8
db    8
db  28h	; (
db  30h	; 0
db 0FFh
db 0F2h	;   *
db  46h	; F
db 0F4h	;   *
db  29h	; )
db 0E9h	;   *
db 0F0h	;   *
db  20h
db 0F8h	;   *
db 0D0h	;   *
db  40h	; @
db  60h	; `
db  5Ch	; \
db  3Eh	; >
db  30h	; 0
db  2Dh	; -
db 0A3h	;   *
db  3Ch	; <
db  60h	; `
db  5Ch	; \
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db 0A0h	;   *
db  39h	; 9
db 0C0h	;   *
db 0BEh	;   *
db  3Ch	; <
db  30h	; 0
db  2Dh	; -
db  9Bh	;   *
db  9Ch	;   *
db  9Eh	;   *
db  40h	; @
db  60h	; `
db  5Ch	; \
db  3Eh	; >
db  30h	; 0
db  2Dh	; -
db 0A3h	;   *
db  3Ch	; <
db  60h	; `
db  5Ch	; \
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db 0A0h	;   *
db  39h	; 9
db 0C0h	;   *
db 0BEh	;   *
db 0FDh	;   *
db  38h	; 8
db  30h	; 0
db  2Dh	; -
db  99h	;   *
db  9Bh	;   *
db  9Eh	;   *
db  3Eh	; >
db  60h	; `
db  5Ch	; \
db  3Ch	; <
db  60h	; `
db  61h	; a
db  3Ch	; <
db  30h	; 0
db  2Dh	; -
db  9Ch	;   *
db  9Eh	;   *
db 0A0h	;   *
db 0A5h	;   *
db 0A0h	;   *
db  3Eh	; >
db  18h
db  16h
db  9Ch	;   *
db  9Bh	;   *
db  9Ch	;   *
db  40h	; @
db  60h	; `
db  5Ch	; \
db  9Eh	;   *
db 0D1h	;   *
db  3Ch	; <
db  30h	; 0
db  2Dh	; -
db  9Bh	;   *
db  99h	;   *
db  9Bh	;   *
db  3Ch	; <
db 0C0h	;   *
db 0C1h	;   *
db  3Ch	; <
db  60h	; `
db  5Ch	; \
db    0
db  60h	; `
db    0
db 0F2h	;   *
db  46h	; F
db 0FFh
db 0F4h	;   *
db 0C8h	;   *
db 0E8h	;   *
db 0F0h	;   *
db  34h	; 4
db 0F8h	;   *
db    0
db    6
db    0
db 0FEh	;   *
db 0D0h	;   *
db  40h	; @
db  60h	; `
db  5Ch	; \
db  3Eh	; >
db  30h	; 0
db  2Dh	; -
db 0A3h	;   *
db  3Ch	; <
db  60h	; `
db  5Ch	; \
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db 0A0h	;   *
db  39h	; 9
db 0C0h	;   *
db 0BEh	;   *
db  3Ch	; <
db  30h	; 0
db  2Dh	; -
db  9Bh	;   *
db  9Ch	;   *
db  9Eh	;   *
db  40h	; @
db  60h	; `
db  5Ch	; \
db  3Eh	; >
db  30h	; 0
db  2Dh	; -
db 0A3h	;   *
db  3Ch	; <
db  60h	; `
db  5Ch	; \
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db 0A0h	;   *
db  39h	; 9
db 0C0h	;   *
db 0BEh	;   *
db 0FDh	;   *
db  38h	; 8
db  30h	; 0
db  2Dh	; -
db  99h	;   *
db  9Bh	;   *
db  9Eh	;   *
db  3Eh	; >
db  60h	; `
db  5Ch	; \
db  3Ch	; <
db  60h	; `
db  61h	; a
db  3Ch	; <
db  30h	; 0
db  2Dh	; -
db  9Ch	;   *
db  9Eh	;   *
db 0A0h	;   *
db 0A5h	;   *
db 0A0h	;   *
db  3Eh	; >
db  18h
db  16h
db  9Ch	;   *
db  9Bh	;   *
db  9Ch	;   *
db  40h	; @
db  60h	; `
db  5Ch	; \
db  9Eh	;   *
db 0D1h	;   *
db  3Ch	; <
db  30h	; 0
db  2Dh	; -
db  9Bh	;   *
db  99h	;   *
db  9Bh	;   *
db  3Ch	; <
db 0C0h	;   *
db 0C1h	;   *
db  3Ch	; <
db  60h	; `
db  5Ch	; \
db    0
db  60h	; `
db    0
db 0FFh
db 0F4h	;   *
db  65h	; e
db 0E8h	;   *
db 0F0h	;   *
db  39h	; 9
db 0F8h	;   *
db    0
db  0Ch
db    0
db 0FEh	;   *
db 0D0h	;   *
db  40h	; @
db  60h	; `
db  5Ch	; \
db  3Eh	; >
db  30h	; 0
db  2Dh	; -
db 0A3h	;   *
db  3Ch	; <
db  60h	; `
db  5Ch	; \
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db 0A0h	;   *
db  39h	; 9
db 0C0h	;   *
db 0BEh	;   *
db  3Ch	; <
db  30h	; 0
db  2Dh	; -
db  9Bh	;   *
db  9Ch	;   *
db  9Eh	;   *
db  40h	; @
db  60h	; `
db  5Ch	; \
db  3Eh	; >
db  30h	; 0
db  2Dh	; -
db 0A3h	;   *
db  3Ch	; <
db  60h	; `
db  5Ch	; \
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db 0A0h	;   *
db  39h	; 9
db 0C0h	;   *
db 0BEh	;   *
db 0FDh	;   *
db  38h	; 8
db  30h	; 0
db  2Dh	; -
db  99h	;   *
db  9Bh	;   *
db  9Eh	;   *
db  3Eh	; >
db  60h	; `
db  5Ch	; \
db  3Ch	; <
db  60h	; `
db  61h	; a
db  3Ch	; <
db  30h	; 0
db  2Dh	; -
db  9Ch	;   *
db  9Eh	;   *
db 0A0h	;   *
db 0A5h	;   *
db 0A0h	;   *
db  3Eh	; >
db  18h
db  16h
db  9Ch	;   *
db  9Bh	;   *
db  9Ch	;   *
db  40h	; @
db  60h	; `
db  5Ch	; \
db  9Eh	;   *
db 0D1h	;   *
db  3Ch	; <
db  30h	; 0
db  2Dh	; -
db  9Bh	;   *
db  99h	;   *
db  9Bh	;   *
db  3Ch	; <
db 0C0h	;   *
db 0C1h	;   *
db  3Ch	; <
db  60h	; `
db  5Ch	; \
db    0
db  60h	; `
db    0
db 0FFh
db 0F2h	;   *
db  64h	; d
db 0F4h	;   *
db  7Ch	; |
db 0E7h	;   *
db 0F0h	;   *
db  11h
db 0F8h	;   *
db    0
db  18h
db    0
db  2Bh	; +
db  18h
db  16h
db  90h	;   *
db  94h	;   *
db  95h	;   *
db  94h	;   *
db  90h	;   *
db  8Bh	;   *
db  2Dh	; -
db  60h	; `
db  5Ch	; \
db  30h	; 0
db  30h	; 0
db  2Dh	; -
db  8Fh	;   *
db  30h	; 0
db 0C0h	;   *
db 0C1h	;   *
db  30h	; 0
db 0C0h	;   *
db 0BEh	;   *
db 0D0h	;   *
db 0F4h	;   *
db  5Ch	; \
db 0E7h	;   *
db 0F0h	;   *
db  11h
db  34h	; 4
db  60h	; `
db  5Ch	; \
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  97h	;   *
db  30h	; 0
db  60h	; `
db  5Ch	; \
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db  94h	;   *
db  2Dh	; -
db 0C0h	;   *
db 0BEh	;   *
db  30h	; 0
db  30h	; 0
db  2Dh	; -
db  8Fh	;   *
db  90h	;   *
db  92h	;   *
db  34h	; 4
db  60h	; `
db  5Ch	; \
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  97h	;   *
db  30h	; 0
db  60h	; `
db  5Ch	; \
db  2Fh	; /
db  30h	; 0
db  2Dh	; -
db  94h	;   *
db  2Dh	; -
db 0C0h	;   *
db 0BEh	;   *
db 0FDh	;   *
db  2Ch	; ,
db  30h	; 0
db  2Dh	; -
db  8Dh	;   *
db  8Fh	;   *
db  92h	;   *
db  32h	; 2
db  60h	; `
db  5Ch	; \
db  30h	; 0
db  60h	; `
db  61h	; a
db  30h	; 0
db  30h	; 0
db  2Dh	; -
db  90h	;   *
db  92h	;   *
db  94h	;   *
db  99h	;   *
db  94h	;   *
db  32h	; 2
db  18h
db  16h
db  90h	;   *
db  8Fh	;   *
db  90h	;   *
db  34h	; 4
db  60h	; `
db  5Ch	; \
db  92h	;   *
db 0F4h	;   *
db  68h	; h
db 0E7h	;   *
db 0F0h	;   *
db  1Bh
db  30h	; 0
db  30h	; 0
db  2Dh	; -
db  30h	; 0
db  18h
db  16h
db  90h	;   *
db  30h	; 0
db  60h	; `
db  5Ch	; \
db  30h	; 0
db  18h
db  16h
db  90h	;   *
db  90h	;   *
db  90h	;   *
db  90h	;   *
db  90h	;   *
db  30h	; 0
db  30h	; 0
db  2Dh	; -
db  90h	;   *
db  30h	; 0
db  18h
db  16h
db  90h	;   *
db  30h	; 0
db  60h	; `
db  5Ch	; \
db  30h	; 0
db  18h
db  16h
db  90h	;   *
db  90h	;   *
db  90h	;   *
db  30h	; 0
db  30h	; 0
db  2Dh	; -
db  8Fh	;   *
db 0D1h	;   *
db 0F4h	;   *
db 0E3h	;   *
db 0E6h	;   *
db 0F0h	;   *
db  11h
db  30h	; 0
db  30h	; 0
db  2Dh	; -
db  8Fh	;   *
db  8Dh	;   *
db  8Fh	;   *
db  30h	; 0
db 0C0h	;   *
db 0C1h	;   *
db  30h	; 0
db 0C0h	;   *
db 0BEh	;   *
db 0F2h	;   *
db  64h	; d
db 0FFh
db 0F4h	;   *
db 0CFh	;   *
db 0E6h	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db  24h	; $
db 0C0h	;   *
db 0C1h	;   *
db  24h	; $
db  60h	; `
db  5Ch	; \
db  86h	;   *
db  89h	;   *
db  26h	; &
db  30h	; 0
db  2Dh	; -
db  89h	;   *
db  28h	; (
db  0Ch
db  0Ah
db  86h	;   *
db  28h	; (
db  18h
db  19h
db  28h	; (
db  90h	;   *
db  8Eh	;   *
db 0D0h	;   *
db 0F4h	;   *
db 0B2h	;   *
db 0E6h	;   *
db 0F0h	;   *
db  1Bh
db  2Bh	; +
db 0C0h	;   *
db 0BEh	;   *
db  29h	; )
db  60h	; `
db  5Ch	; \
db  28h	; (
db  60h	; `
db  61h	; a
db  28h	; (
db  60h	; `
db  5Ch	; \
db  26h	; &
db  60h	; `
db  61h	; a
db  26h	; &
db 0C0h	;   *
db 0BEh	;   *
db  8Bh	;   *
db  29h	; )
db  60h	; `
db  5Ch	; \
db  28h	; (
db  60h	; `
db  61h	; a
db  28h	; (
db  60h	; `
db  5Ch	; \
db  26h	; &
db  60h	; `
db  61h	; a
db 0FDh	;   *
db  26h	; &
db 0C0h	;   *
db 0BEh	;   *
db  89h	;   *
db  88h	;   *
db  86h	;   *
db  24h	; $
db  60h	; `
db  5Ch	; \
db  83h	;   *
db 0F4h	;   *
db 0DBh	;   *
db 0E6h	;   *
db 0F0h	;   *
db  1Bh
db  29h	; )
db  30h	; 0
db  2Dh	; -
db  29h	; )
db  18h
db  16h
db  86h	;   *
db  28h	; (
db  60h	; `
db  5Ch	; \
db  29h	; )
db  18h
db  16h
db  89h	;   *
db  89h	;   *
db  86h	;   *
db  88h	;   *
db  88h	;   *
db  28h	; (
db  30h	; 0
db  2Dh	; -
db  89h	;   *
db  29h	; )
db  18h
db  16h
db  86h	;   *
db  28h	; (
db  60h	; `
db  5Ch	; \
db  29h	; )
db  18h
db  16h
db  89h	;   *
db  89h	;   *
db  86h	;   *
db  28h	; (
db  30h	; 0
db  2Dh	; -
db  86h	;   *
db 0D1h	;   *
db 0F4h	;   *
db  56h	; V
db 0E6h	;   *
db 0F0h	;   *
db  1Bh
db  26h	; &
db 0C0h	;   *
db 0BEh	;   *
db  29h	; )
db  60h	; `
db  5Ch	; \
db  86h	;   *
db  28h	; (
db 0C0h	;   *
db 0BEh	;   *
db 0FFh
db 0F4h	;   *
db  46h	; F
db 0E6h	;   *
db 0F0h	;   *
db  18h
db 0F8h	;   *
db  18h
db 0C0h	;   *
db 0BEh	;   *
db  1Dh
db  60h	; `
db  5Ch	; \
db  7Fh	; 
db  24h	; $
db 0C0h	;   *
db 0BEh	;   *
db  78h	; x
db 0D0h	;   *
db 0F4h	;   *
db  34h	; 4
db 0E6h	;   *
db 0F0h	;   *
db  18h
db  24h	; $
db  60h	; `
db  5Ch	; \
db  83h	;   *
db  81h	;   *
db  7Fh	; 
db  1Dh
db 0C0h	;   *
db 0BEh	;   *
db  1Fh
db  60h	; `
db  5Ch	; \
db  21h	; !
db  30h	; 0
db  2Dh	; -
db  83h	;   *
db  24h	; $
db  60h	; `
db  5Ch	; \
db  83h	;   *
db  81h	;   *
db  7Fh	; 
db  1Dh
db 0C0h	;   *
db 0BEh	;   *
db 0FDh	;   *
db  1Ch
db  60h	; `
db  5Ch	; \
db  80h	;   *
db  21h	; !
db 0C0h	;   *
db 0BEh	;   *
db  7Fh	; 
db  7Eh	; ~
db  7Fh	; 
db 0F4h	;   *
db  63h	; c
db 0E6h	;   *
db 0F0h	;   *
db  20h
db  18h
db  30h	; 0
db  2Dh	; -
db  18h
db  18h
db  16h
db  78h	; x
db  18h
db  60h	; `
db  5Ch	; \
db  18h
db  18h
db  16h
db  78h	; x
db  78h	; x
db  78h	; x
db  78h	; x
db  78h	; x
db  18h
db  30h	; 0
db  2Dh	; -
db  78h	; x
db  18h
db  18h
db  16h
db  78h	; x
db  18h
db  60h	; `
db  5Ch	; \
db  18h
db  18h
db  16h
db  78h	; x
db  78h	; x
db  78h	; x
db  13h
db  30h	; 0
db  2Dh	; -
db  7Fh	; 
db 0D1h	;   *
db 0F4h	;   *
db 0DEh	;   *
db 0E5h	;   *
db 0F0h	;   *
db  20h
db  1Fh
db 0C0h	;   *
db 0BEh	;   *
db  86h	;   *
db  6Ch	; l
db 0FFh
db 0F2h	;   *
db  50h	; P
db 0F4h	;   *
db 0FDh	;   *
db 0E5h	;   *
db 0F0h	;   *
db  16h
db 0F8h	;   *
db  39h	; 9
db  60h	; `
db  5Ch	; \
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  9Bh	;   *
db  3Bh	; ;
db  48h	; H
db  44h	; D
db  3Ch	; <
db  18h
db  16h
db  39h	; 9
db  60h	; `
db  5Ch	; \
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  97h	;   *
db  99h	;   *
db  97h	;   *
db  34h	; 4
db 0C0h	;   *
db 0BEh	;   *
db  39h	; 9
db  60h	; `
db  5Ch	; \
db  39h	; 9
db  30h	; 0
db  2Dh	; -
db  9Bh	;   *
db  3Bh	; ;
db  48h	; H
db  44h	; D
db  3Ch	; <
db  18h
db  16h
db  39h	; 9
db  60h	; `
db  5Ch	; \
db  99h	;   *
db  38h	; 8
db  30h	; 0
db  2Dh	; -
db  36h	; 6
db  18h
db  16h
db  98h	;   *
db  39h	; 9
db 0C0h	;   *
db 0BEh	;   *
db 0F2h	;   *
db  50h	; P
db 0FFh
db 0F4h	;   *
db  7Eh	; ~
db 0E5h	;   *
db 0F0h	;   *
db  16h
db 0F8h	;   *
db  30h	; 0
db 0C0h	;   *
db 0C1h	;   *
db  30h	; 0
db 0C0h	;   *
db 0BEh	;   *
db  30h	; 0
db  60h	; `
db  5Ch	; \
db  2Fh	; /
db  60h	; `
db  61h	; a
db  2Fh	; /
db  60h	; `
db  5Ch	; \
db  8Dh	;   *
db  30h	; 0
db 0C0h	;   *
db 0C1h	;   *
db  90h	;   *
db  30h	; 0
db  60h	; `
db  5Ch	; \
db  8Fh	;   *
db  32h	; 2
db  30h	; 0
db  2Dh	; -
db  8Fh	;   *
db  31h	; 1
db  60h	; `
db  5Ch	; \
db 0FFh
db 0F4h	;   *
db  58h	; X
db 0E5h	;   *
db 0F0h	;   *
db  16h
db 0F8h	;   *
db  2Dh	; -
db 0C0h	;   *
db 0BEh	;   *
db  86h	;   *
db  8Bh	;   *
db  84h	;   *
db  89h	;   *
db  86h	;   *
db  2Bh	; +
db  60h	; `
db  5Ch	; \
db  88h	;   *
db  2Dh	; -
db 0C0h	;   *
db 0BEh	;   *
db 0FFh
db 0F2h	;   *
db 0B9h	;   *
db 0F4h	;   *
db  40h	; @
db 0E5h	;   *
db 0F0h	;   *
db    7
db 0F8h	;   *
db  34h	; 4
db  18h
db  16h
db  96h	;   *
db  97h	;   *
db  99h	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  96h	;   *
db  97h	;   *
db  99h	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  96h	;   *
db  97h	;   *
db  99h	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  96h	;   *
db  97h	;   *
db  99h	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  96h	;   *
db  97h	;   *
db  99h	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  96h	;   *
db  97h	;   *
db  94h	;   *
db  94h	;   *
db  92h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  3Bh	; ;
db  18h
db  16h
db  99h	;   *
db  97h	;   *
db  94h	;   *
db  94h	;   *
db  92h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db    0
db  30h	; 0
db    0
db  34h	; 4
db  18h
db  16h
db  92h	;   *
db  94h	;   *
db  97h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  3Bh	; ;
db  18h
db  16h
db  99h	;   *
db  9Bh	;   *
db  9Eh	;   *
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db  40h	; @
db  60h	; `
db  5Ch	; \
db 0F2h	;   *
db 0B9h	;   *
db 0FFh
db 0F4h	;   *
db  84h	;   *
db 0E4h	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db  1Fh
db  30h	; 0
db  0Ch
db    0
db  18h
db    0
db  1Fh
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  1Fh
db  30h	; 0
db  0Ch
db    0
db  18h
db    0
db  1Fh
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  1Fh
db  30h	; 0
db  0Ch
db  7Fh	; 
db  81h	;   *
db    0
db  18h
db    0
db  21h	; !
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  21h	; !
db  30h	; 0
db  0Ch
db    0
db  18h
db    0
db  21h	; !
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  21h	; !
db  30h	; 0
db  0Ch
db  81h	;   *
db  83h	;   *
db    0
db  18h
db    0
db  23h	; #
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  23h	; #
db  30h	; 0
db  0Ch
db    0
db  18h
db    0
db  23h	; #
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  23h	; #
db  30h	; 0
db  0Ch
db  81h	;   *
db  83h	;   *
db    0
db  18h
db    0
db  23h	; #
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  23h	; #
db  30h	; 0
db  0Ch
db    0
db  18h
db    0
db  23h	; #
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  23h	; #
db  60h	; `
db  5Ch	; \
db 0FFh
db 0F4h	;   *
db 0FCh	;   *
db 0E3h	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db  18h
db  30h	; 0
db  0Ch
db    0
db  18h
db    0
db  18h
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  18h
db  30h	; 0
db  0Ch
db    0
db  18h
db    0
db  18h
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  18h
db  30h	; 0
db  0Ch
db  78h	; x
db  7Ah	; z
db    0
db  18h
db    0
db  1Ah
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  1Ah
db  30h	; 0
db  0Ch
db    0
db  18h
db    0
db  1Ah
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  1Ah
db  30h	; 0
db  0Ch
db  7Ah	; z
db  7Ch	; |
db    0
db  18h
db    0
db  1Ch
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  1Ch
db  30h	; 0
db  0Ch
db    0
db  18h
db    0
db  1Ch
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  1Ch
db  30h	; 0
db  0Ch
db  7Ah	; z
db  7Ch	; |
db    0
db  18h
db    0
db  1Ch
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  1Ch
db  30h	; 0
db  0Ch
db    0
db  18h
db    0
db  1Ch
db  0Ch
db  0Ah
db    0
db  0Ch
db    0
db    0
db  30h	; 0
db    0
db  1Ch
db  60h	; `
db  5Ch	; \
db 0FFh
db 0F4h	;   *
db  92h	;   *
db 0E4h	;   *
db 0F0h	;   *
db    0
db 0D0h	;   *
db  70h	; p
db  30h	; 0
db  0Ch
db  68h	; h
db  18h
db  1Bh
db  10h
db  20h
db  30h	; 0
db    8
db  20h
db  18h
db  10h
db  28h	; (
db  30h	; 0
db  10h
db    8
db 0D2h	;   *
db  70h	; p
db  30h	; 0
db  0Ch
db  68h	; h
db  18h
db  1Bh
db  10h
db  20h
db  30h	; 0
db    8
db  20h
db  18h
db  10h
db  28h	; (
db  30h	; 0
db  30h	; 0
db  18h
db  48h	; H
db  11h
db    8
db    8
db 0FFh
db 0F2h	;   *
db  57h	; W
db 0F4h	;   *
db  86h	;   *
db 0E3h	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db 0D0h	;   *
db  28h	; (
db  18h
db  16h
db  86h	;   *
db  88h	;   *
db  8Bh	;   *
db  28h	; (
db  30h	; 0
db  2Dh	; -
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  8Bh	;   *
db  88h	;   *
db  88h	;   *
db  8Bh	;   *
db  28h	; (
db  60h	; `
db  5Ch	; \
db  28h	; (
db  18h
db  16h
db  86h	;   *
db  88h	;   *
db  8Bh	;   *
db  28h	; (
db  30h	; 0
db  2Dh	; -
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  8Bh	;   *
db  88h	;   *
db  88h	;   *
db  8Bh	;   *
db  2Dh	; -
db  60h	; `
db  5Ch	; \
db 0D1h	;   *
db 0F4h	;   *
db 0AEh	;   *
db 0E3h	;   *
db 0F0h	;   *
db  0Ch
db  34h	; 4
db  18h
db  16h
db  96h	;   *
db  97h	;   *
db  99h	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  96h	;   *
db  97h	;   *
db  99h	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  96h	;   *
db  97h	;   *
db  99h	;   *
db  97h	;   *
db  94h	;   *
db  94h	;   *
db  92h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db 0F4h	;   *
db  32h	; 2
db 0E3h	;   *
db 0F0h	;   *
db  1Bh
db  2Fh	; /
db  18h
db  16h
db  8Dh	;   *
db  8Bh	;   *
db  88h	;   *
db  88h	;   *
db  8Bh	;   *
db  28h	; (
db  60h	; `
db  5Ch	; \
db 0F4h	;   *
db  7Ah	; z
db 0E3h	;   *
db 0F0h	;   *
db  0Ch
db  34h	; 4
db  18h
db  16h
db  96h	;   *
db  97h	;   *
db  99h	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  34h	; 4
db  18h
db  16h
db  96h	;   *
db  97h	;   *
db  99h	;   *
db  37h	; 7
db  30h	; 0
db  2Dh	; -
db  36h	; 6
db  18h
db  16h
db  94h	;   *
db  92h	;   *
db  96h	;   *
db  94h	;   *
db  92h	;   *
db  94h	;   *
db  97h	;   *
db  34h	; 4
db  30h	; 0
db  2Dh	; -
db  3Bh	; ;
db  18h
db  16h
db  99h	;   *
db  9Bh	;   *
db  9Eh	;   *
db  3Bh	; ;
db  30h	; 0
db  2Dh	; -
db  40h	; @
db  60h	; `
db  5Ch	; \
db 0F2h	;   *
db  57h	; W
db 0FFh
db 0F4h	;   *
db 0ADh	;   *
db 0E2h	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db 0D0h	;   *
db  1Ch
db 0C0h	;   *
db 0C1h	;   *
db  1Ch
db  90h	;   *
db  8Eh	;   *
db  1Ah
db  30h	; 0
db  2Dh	; -
db  1Ch
db 0C0h	;   *
db 0C1h	;   *
db  1Ch
db  90h	;   *
db  8Eh	;   *
db  1Ah
db  30h	; 0
db  2Dh	; -
db 0D1h	;   *
db  1Fh
db 0C0h	;   *
db 0BEh	;   *
db  81h	;   *
db  23h	; #
db 0C0h	;   *
db 0C1h	;   *
db  23h	; #
db 0C0h	;   *
db 0BEh	;   *
db  7Fh	; 
db  21h	; !
db 0C0h	;   *
db 0C0h	;   *
db  23h	; #
db 0C0h	;   *
db 0BEh	;   *
db  23h	; #
db  60h	; `
db  5Ch	; \
db  77h	; w
db 0FFh
db 0F4h	;   *
db  7Dh	; }
db 0E2h	;   *
db 0F0h	;   *
db  1Bh
db 0F8h	;   *
db 0D0h	;   *
db  15h
db 0C0h	;   *
db 0C1h	;   *
db  15h
db  90h	;   *
db  8Eh	;   *
db  13h
db  30h	; 0
db  2Dh	; -
db  15h
db 0C0h	;   *
db 0C1h	;   *
db  15h
db  90h	;   *
db  8Eh	;   *
db  13h
db  30h	; 0
db  2Dh	; -
db 0D1h	;   *
db  18h
db 0C0h	;   *
db 0BEh	;   *
db  7Ah	; z
db  1Ch
db 0C0h	;   *
db 0C1h	;   *
db  1Ch
db 0C0h	;   *
db 0BEh	;   *
db  78h	; x
db  1Ah
db 0C0h	;   *
db 0C0h	;   *
db  1Ch
db 0C0h	;   *
db 0BEh	;   *
db  1Ch
db  60h	; `
db  5Ch	; \
db  70h	; p
db 0FFh
db 0F4h	;   *
db  6Bh	; k
db 0E3h	;   *
db 0F0h	;   *
db    7
db 0D0h	;   *
db  68h	; h
db  30h	; 0
db  1Bh
db  20h
db  90h	;   *
db  20h
db  60h	; `
db  28h	; (
db  18h
db    8
db  28h	; (
db  0Ch
db    8
db    8
db    8
db  28h	; (
db  30h	; 0
db  20h
db  90h	;   *
db  20h
db  60h	; `
db  28h	; (
db  18h
db    8
db  28h	; (
db  0Ch
db    8
db    8
db    8
db 0D1h	;   *
db 0D0h	;   *
db  68h	; h
db  30h	; 0
db  1Bh
db    0
db  28h	; (
db  0Ch
db    8
db    8
db    8
db  28h	; (
db  30h	; 0
db    0
db  28h	; (
db  0Ch
db    8
db    8
db    8
db  28h	; (
db  30h	; 0
db    0
db    8
db  20h
db  90h	;   *
db  20h
db  60h	; `
db  28h	; (
db  18h
db    8
db  28h	; (
db  0Ch
db    8
db    8
db    8
db 0D1h	;   *
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  4Dh	; M
db  53h	; S
db  20h
db  52h	; R
db  75h	; u
db  6Eh	; n
db  2Dh	; -
db  54h	; T
db  69h	; i
db  6Dh	; m
db  65h	; e
db  20h
db  4Ch	; L
db  69h	; i
db  62h	; b
db  72h	; r
db  61h	; a
db  72h	; r
db  79h	; y
db  20h
db  2Dh	; -
db  20h
db  43h	; C
db  6Fh	; o
db  70h	; p
db  79h	; y
db  72h	; r
db  69h	; i
db  67h	; g
db  68h	; h
db  74h	; t
db  20h
db  28h	; (
db  63h	; c
db  29h	; )
db  20h
db  31h	; 1
db  39h	; 9
db  39h	; 9
db  30h	; 0
db  2Ch	; ,
db  20h
db  4Dh	; M
db  69h	; i
db  63h	; c
db  72h	; r
db  6Fh	; o
db  73h	; s
db  6Fh	; o
db  66h	; f
db  74h	; t
db  20h
db  43h	; C
db  6Fh	; o
db  72h	; r
db  70h	; p
db  18h
db    0
db    0
db    0
db 0BCh	;   *
db    0
db  0Bh
db  0Fh
db    3
db    6
db  0Ah
db    1
db    4
db    5
db  0Bh
db    8
db    0
db  0Fh
db    2
db  0Eh
db  0Ch
db    9
db  0Dh
db    7
db 0E3h	;   *
db    5
db    0
db    0
db  5Fh	; _
db  5Bh	; [
db  5Fh	; _
db  3Ch	; <
db  41h	; A
db  63h	; c
db    0
db    0
db    1
db 0FFh
db    0
db    1
db    1
db    0
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  9Bh	;   *
db  67h	; g
db    0
db  43h	; C
db  61h	; a
db  6Fh	; o
db  20h
db  43h	; C
db  61h	; a
db  6Fh	; o
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db    7
db    0
db    0
db  55h	; U
db  46h	; F
db  63h	; c
db  64h	; d
db  64h	; d
db  55h	; U
db    1
db  64h	; d
db    1
db 0FFh
db    0
db  32h	; 2
db    2
db    0
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db 0A1h	;   *
db 0A1h	;   *
db    0
db  4Ch	; L
db  69h	; i
db  75h	; u
db  20h
db  42h	; B
db  65h	; e
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  6Ah	; j
db    9
db    0
db    0
db  57h	; W
db  5Ah	; Z
db  59h	; Y
db  3Ch	; <
db  4Bh	; K
db  5Ah	; Z
db    2
db  64h	; d
db    1
db 0FFh
db    0
db  64h	; d
db    4
db    0
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  9Ch	;   *
db  6Ah	; j
db    0
db  53h	; S
db  75h	; u
db  6Eh	; n
db  20h
db  4Ah	; J
db  69h	; i
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0B4h	;   *
db    3
db    0
db    0
db  46h	; F
db  51h	; Q
db  46h	; F
db  28h	; (
db  19h
db  50h	; P
db    3
db    0
db    1
db 0FFh
db    0
db  28h	; (
db    8
db    0
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  91h	;   *
db    3
db    0
db  59h	; Y
db  75h	; u
db  61h	; a
db  6Eh	; n
db  20h
db  53h	; S
db  68h	; h
db  61h	; a
db  6Fh	; o
db    0
db    0
db    0
db    0
db    0
db    0
db  91h	;   *
db    7
db    0
db    0
db  45h	; E
db  50h	; P
db  32h	; 2
db  28h	; (
db  2Bh	; +
db  51h	; Q
db    4
db  64h	; d
db    1
db 0FFh
db    0
db  4Bh	; K
db  10h
db    0
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  9Ah	;   *
db    5
db    0
db  59h	; Y
db  75h	; u
db  61h	; a
db  6Eh	; n
db  20h
db  53h	; S
db  68h	; h
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0EFh	;   *
db  0Bh
db    0
db    0
db  36h	; 6
db  5Fh	; _
db  57h	; W
db  58h	; X
db  59h	; Y
db  56h	; V
db    5
db    0
db    1
db 0FFh
db    0
db  2Dh	; -
db  20h
db    0
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  9Ch	;   *
db  8Ch	;   *
db    0
db  4Dh	; M
db  61h	; a
db  20h
db  54h	; T
db  65h	; e
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C2h	;   *
db  0Ah
db    0
db    0
db  55h	; U
db  2Dh	; -
db  5Ah	; Z
db  53h	; S
db  59h	; Y
db  1Eh
db    6
db    0
db    1
db 0FFh
db    0
db  4Bh	; K
db  40h	; @
db    0
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  89h	;   *
db  9Ch	;   *
db    0
db  4Ch	; L
db  69h	; i
db  75h	; u
db  20h
db  59h	; Y
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  66h	; f
db    7
db    0
db    0
db  4Ah	; J
db  49h	; I
db  44h	; D
db  50h	; P
db  37h	; 7
db  19h
db    7
db    0
db    1
db 0FFh
db    0
db  1Eh
db  80h	;   *
db    0
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  8Eh	;   *
db 0A0h	;   *
db    0
db  4Ch	; L
db  69h	; i
db  75h	; u
db  20h
db  42h	; B
db  69h	; i
db  61h	; a
db  6Fh	; o
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  12h
db    8
db    0
db    0
db  37h	; 7
db  5Ah	; Z
db  2Ch	; ,
db  28h	; (
db  22h	; "
db  5Fh	; _
db    8
db    0
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    1
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  8Bh	;   *
db  86h	;   *
db    0
db  44h	; D
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db  20h
db  5Ah	; Z
db  68h	; h
db  75h	; u
db  6Fh	; o
db    0
db    0
db    0
db    0
db    0
db    0
db  89h	;   *
db    3
db    0
db    0
db  46h	; F
db  4Bh	; K
db  48h	; H
db  4Fh	; O
db  49h	; I
db  45h	; E
db    9
db    0
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    2
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  99h	;   *
db  40h	; @
db    0
db  47h	; G
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db  73h	; s
db  75h	; u
db  6Eh	; n
db  20h
db  5Ah	; Z
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db 0F5h	;   *
db  0Eh
db    0
db    0
db  3Eh	; >
db  33h	; 3
db  4Eh	; N
db  4Dh	; M
db  3Bh	; ;
db  32h	; 2
db  0Ah
db    0
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    0
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  84h	;   *
db  84h	;   *
db    0
db  54h	; T
db  61h	; a
db  6Fh	; o
db  20h
db  51h	; Q
db  75h	; u
db  69h	; i
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db  37h	; 7
db    5
db    0
db    0
db  35h	; 5
db  33h	; 3
db  32h	; 2
db  30h	; 0
db  37h	; 7
db  38h	; 8
db  0Bh
db    0
db    1
db 0FFh
db    0
db  5Ah	; Z
db    0
db    0
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  95h	;   *
db  28h	; (
db    0
db  48h	; H
db  61h	; a
db  69h	; i
db  20h
db  46h	; F
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A9h	;   *
db  13h
db    0
db    0
db  52h	; R
db  23h	; #
db  57h	; W
db  51h	; Q
db  55h	; U
db  2Ah	; *
db  0Ch
db    0
db    1
db 0FFh
db    0
db    5
db    0
db    0
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  99h	;   *
db  43h	; C
db    0
db  4Bh	; K
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db  20h
db  52h	; R
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db  3Fh	; ?
db    9
db    0
db    0
db  3Ch	; <
db  30h	; 0
db  30h	; 0
db  28h	; (
db  2Bh	; +
db  2Fh	; /
db  0Dh
db  64h	; d
db    1
db 0FFh
db    0
db  14h
db    0
db    0
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  98h	;   *
db  0Ah
db    0
db  57h	; W
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  4Ch	; L
db  61h	; a
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db  4Bh	; K
db  0Fh
db    0
db    0
db  38h	; 8
db  12h
db  17h
db  18h
db  1Eh
db  21h	; !
db  0Eh
db    0
db    1
db 0FFh
db    0
db  50h	; P
db    0
db    0
db  10h
db  27h	; '
db 0E8h	;   *
db    3
db  0Ah
db    0
db    0
db  97h	;   *
db  68h	; h
db  9Bh	;   *
db  4Ch	; L
db  69h	; i
db  75h	; u
db  20h
db  59h	; Y
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Eh
db  0Eh
db    0
db    0
db  23h	; #
db  29h	; )
db  26h	; &
db  37h	; 7
db  28h	; (
db  39h	; 9
db    8
db  52h	; R
db    1
db 0FFh
db    0
db  41h	; A
db    0
db    0
db  88h	;   *
db  13h
db 0F4h	;   *
db    1
db  0Ah
db    0
db    0
db  93h	;   *
db  5Ah	; Z
db    0
db  58h	; X
db  75h	; u
db  20h
db  52h	; R
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  99h	;   *
db  0Bh
db    0
db    0
db  29h	; )
db  32h	; 2
db  28h	; (
db  24h	; $
db  18h
db  3Bh	; ;
db    8
db  52h	; R
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    0
db  88h	;   *
db  13h
db 0F4h	;   *
db    1
db  0Ah
db    0
db    0
db  94h	;   *
db 0A5h	;   *
db    0
db  4Ch	; L
db  69h	; i
db  20h
db  4Ah	; J
db  75h	; u
db  65h	; e
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  80h	;   *
db  14h
db    0
db    0
db  28h	; (
db  35h	; 5
db  34h	; 4
db  3Ch	; <
db  2Fh	; /
db  2Ah	; *
db    6
db  55h	; U
db    1
db 0FFh
db    0
db  46h	; F
db    0
db    0
db  88h	;   *
db  13h
db 0F4h	;   *
db    1
db  0Ah
db    0
db    0
db 0AAh	;   *
db 0DAh	;   *
db  80h	;   *
db  47h	; G
db  61h	; a
db  6Fh	; o
db  20h
db  50h	; P
db  65h	; e
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  59h	; Y
db  16h
db    0
db    0
db  46h	; F
db  32h	; 2
db  5Ah	; Z
db  55h	; U
db  54h	; T
db  1Eh
db    6
db  64h	; d
db    1
db 0FFh
db    0
db  4Bh	; K
db  40h	; @
db    0
db  88h	;   *
db  13h
db 0F4h	;   *
db    1
db  0Ah
db    0
db    0
db  9Eh	;   *
db  9Eh	;   *
db    0
db  4Ch	; L
db  69h	; i
db  75h	; u
db  20h
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  31h	; 1
db  3Fh	; ?
db  41h	; A
db  4Eh	; N
db  34h	; 4
db  39h	; 9
db    9
db  64h	; d
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    2
db 0D0h	;   *
db    7
db 0C8h	;   *
db    0
db  0Ah
db    0
db    0
db 0A0h	;   *
db  3Fh	; ?
db    0
db  47h	; G
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db  73h	; s
db  75h	; u
db  6Eh	; n
db  20h
db  59h	; Y
db  75h	; u
db  65h	; e
db    0
db    0
db    0
db    0
db 0DFh	;   *
db    3
db    0
db    0
db  5Ah	; Z
db  2Eh	; .
db  4Eh	; N
db  3Eh	; >
db  38h	; 8
db  3Dh	; =
db    3
db  50h	; P
db    1
db 0FFh
db    0
db  2Dh	; -
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A0h	;   *
db  82h	;   *
db    0
db  54h	; T
db  69h	; i
db  61h	; a
db  6Eh	; n
db  20h
db  46h	; F
db  65h	; e
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    4
db    0
db    0
db  3Fh	; ?
db  3Ch	; <
db  32h	; 2
db  45h	; E
db  26h	; &
db  29h	; )
db    3
db  64h	; d
db    1
db 0FFh
db    0
db  28h	; (
db    8
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A6h	;   *
db    2
db    0
db  59h	; Y
db  75h	; u
db  61h	; a
db  6Eh	; n
db  20h
db  58h	; X
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  35h	; 5
db    4
db    0
db    0
db  37h	; 7
db  39h	; 9
db  34h	; 4
db  35h	; 5
db  28h	; (
db  2Bh	; +
db    3
db  64h	; d
db    1
db 0FFh
db    0
db  28h	; (
db    8
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A5h	;   *
db    6
db    0
db  59h	; Y
db  75h	; u
db  61h	; a
db  6Eh	; n
db  20h
db  54h	; T
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  60h	; `
db    4
db    0
db    0
db  40h	; @
db  44h	; D
db  34h	; 4
db  4Bh	; K
db  2Fh	; /
db  28h	; (
db    3
db  64h	; d
db    1
db 0FFh
db    0
db  28h	; (
db    8
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0AAh	;   *
db    4
db    0
db  59h	; Y
db  75h	; u
db  61h	; a
db  6Eh	; n
db  20h
db  53h	; S
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db  8Bh	;   *
db    4
db    0
db    0
db  50h	; P
db  20h
db  2Ah	; *
db  27h	; '
db  28h	; (
db  2Bh	; +
db    3
db  52h	; R
db    1
db 0FFh
db    0
db  23h	; #
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Ah	;   *
db  13h
db    0
db  47h	; G
db  75h	; u
db  6Fh	; o
db  20h
db  54h	; T
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0B6h	;   *
db    4
db    0
db    0
db  1Bh
db  5Ah	; Z
db  33h	; 3
db  41h	; A
db  32h	; 2
db  51h	; Q
db    3
db  55h	; U
db    1
db 0FFh
db    0
db  1Eh
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Bh	;   *
db  2Bh	; +
db    0
db  59h	; Y
db  61h	; a
db  6Eh	; n
db  20h
db  4Ch	; L
db  69h	; i
db  61h	; a
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db 0E1h	;   *
db    4
db    0
db    0
db  20h
db  29h	; )
db  25h	; %
db  35h	; 5
db  26h	; &
db  29h	; )
db    3
db  50h	; P
db    1
db 0FFh
db    0
db  29h	; )
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0AAh	;   *
db 0DBh	;   *
db  8Fh	;   *
db  47h	; G
db  61h	; a
db  6Fh	; o
db  20h
db  47h	; G
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ch
db    5
db    0
db    0
db  1Eh
db  4Ah	; J
db  34h	; 4
db  3Fh	; ?
db  2Eh	; .
db  34h	; 4
db    3
db  44h	; D
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Fh	;   *
db 0D5h	;   *
db  80h	;   *
db  47h	; G
db  61h	; a
db  6Fh	; o
db  20h
db  4Ch	; L
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  62h	; b
db    5
db    0
db    0
db  21h	; !
db  44h	; D
db  33h	; 3
db  34h	; 4
db  30h	; 0
db  2Fh	; /
db    3
db  46h	; F
db    1
db 0FFh
db    0
db  19h
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Fh	;   *
db  12h
db  8Ch	;   *
db  4Ah	; J
db  69h	; i
db  61h	; a
db  6Fh	; o
db  20h
db  43h	; C
db  68h	; h
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  6Eh	; n
db  0Bh
db    0
db    0
db  10h
db  4Ah	; J
db  10h
db  20h
db  13h
db  11h
db  0Bh
db  51h	; Q
db    1
db 0FFh
db    0
db  55h	; U
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A7h	;   *
db    4
db  90h	;   *
db  50h	; P
db  61h	; a
db  6Eh	; n
db  20h
db  46h	; F
db  65h	; e
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Dh	;   *
db    5
db    0
db    0
db  50h	; P
db  48h	; H
db  47h	; G
db  5Ah	; Z
db  4Fh	; O
db  44h	; D
db    3
db  56h	; V
db    1
db 0FFh
db    0
db  29h	; )
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Ch	;   *
db  4Eh	; N
db    0
db  53h	; S
db  68h	; h
db  65h	; e
db  6Eh	; n
db  20h
db  50h	; P
db  65h	; e
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0B8h	;   *
db    5
db    0
db    0
db  20h
db  41h	; A
db  15h
db  16h
db  20h
db  12h
db    3
db  46h	; F
db    1
db 0FFh
db    0
db  14h
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Dh	;   *
db 0C2h	;   *
db  86h	;   *
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  47h	; G
db  79h	; y
db  6Fh	; o
db  6Bh	; k
db  75h	; u
db    0
db    0
db    0
db    0
db 0CCh	;   *
db  0Fh
db    0
db    0
db  54h	; T
db  3Dh	; =
db  4Ch	; L
db  4Bh	; K
db  46h	; F
db  3Fh	; ?
db    3
db  55h	; U
db    1
db 0FFh
db    0
db  2Dh	; -
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Ch	;   *
db  69h	; i
db    0
db  4Ah	; J
db  75h	; u
db  20h
db  53h	; S
db  68h	; h
db  6Fh	; o
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Eh
db    6
db    0
db    0
db  51h	; Q
db  3Ah	; :
db  41h	; A
db  4Bh	; K
db  32h	; 2
db  3Ch	; <
db    0
db  48h	; H
db    1
db 0FFh
db    0
db  28h	; (
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Ah	;   *
db  7Ch	; |
db    0
db  43h	; C
db  68h	; h
db  65h	; e
db  6Eh	; n
db  20h
db  47h	; G
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db  39h	; 9
db    6
db    0
db    0
db  3Ch	; <
db  5Ah	; Z
db  47h	; G
db  58h	; X
db  4Fh	; O
db  51h	; Q
db    0
db  5Fh	; _
db    1
db 0FFh
db    0
db    1
db    0
db    0
db 0D0h	;   *
db    7
db 0C8h	;   *
db    0
db  0Ah
db    0
db    0
db  9Eh	;   *
db  15h
db    0
db  58h	; X
db  69h	; i
db  61h	; a
db  68h	; h
db  6Fh	; o
db  75h	; u
db  20h
db  59h	; Y
db  75h	; u
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db  64h	; d
db    6
db    0
db    0
db  3Bh	; ;
db  5Dh	; ]
db  47h	; G
db  55h	; U
db  43h	; C
db  50h	; P
db    0
db  5Fh	; _
db    1
db 0FFh
db    0
db    1
db    0
db    0
db 0D0h	;   *
db    7
db 0C8h	;   *
db    0
db  0Ah
db    0
db    0
db  9Dh	;   *
db  19h
db    0
db  58h	; X
db  69h	; i
db  61h	; a
db  68h	; h
db  6Fh	; o
db  75h	; u
db  20h
db  44h	; D
db  75h	; u
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db  8Fh	;   *
db    6
db    0
db    0
db  32h	; 2
db  48h	; H
db  46h	; F
db  4Eh	; N
db  3Eh	; >
db  44h	; D
db    0
db  5Fh	; _
db    1
db 0FFh
db    0
db    1
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A9h	;   *
db  60h	; `
db    0
db  43h	; C
db  61h	; a
db  6Fh	; o
db  20h
db  48h	; H
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0BAh	;   *
db    6
db    0
db    0
db  34h	; 4
db  3Bh	; ;
db  3Ch	; <
db  47h	; G
db  3Fh	; ?
db  37h	; 7
db    0
db  64h	; d
db    1
db 0FFh
db    0
db    1
db    1
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0AFh	;   *
db  61h	; a
db    0
db  43h	; C
db  61h	; a
db  6Fh	; o
db  20h
db  41h	; A
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0E5h	;   *
db    6
db    0
db    0
db  40h	; @
db  54h	; T
db  3Fh	; ?
db  53h	; S
db  3Dh	; =
db  4Dh	; M
db    0
db  62h	; b
db    1
db 0FFh
db    0
db    1
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A8h	;   *
db  66h	; f
db    0
db  43h	; C
db  61h	; a
db  6Fh	; o
db  20h
db  52h	; R
db  65h	; e
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0E7h	;   *
db    7
db    0
db    0
db  26h	; &
db  2Ch	; ,
db  29h	; )
db  2Dh	; -
db  28h	; (
db  2Ah	; *
db    0
db  50h	; P
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Fh	;   *
db 0FBh	;   *
db  92h	;   *
db  59h	; Y
db  75h	; u
db  65h	; e
db  20h
db  4Ah	; J
db  69h	; i
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  3Bh	; ;
db    7
db    0
db    0
db  53h	; S
db  63h	; c
db  5Bh	; [
db  64h	; d
db  5Ch	; \
db  32h	; 2
db    1
db  64h	; d
db    1
db 0FFh
db    0
db  32h	; 2
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A2h	;   *
db  1Eh
db    0
db  47h	; G
db  75h	; u
db  61h	; a
db  6Eh	; n
db  20h
db  59h	; Y
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  63h	; c
db  23h	; #
db  5Ah	; Z
db  1Eh
db  54h	; T
db    1
db  64h	; d
db    1
db 0FFh
db    0
db  32h	; 2
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A8h	;   *
db  78h	; x
db    0
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  46h	; F
db  65h	; e
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db 0BCh	;   *
db    7
db    0
db    0
db  56h	; V
db  1Eh
db  2Eh	; .
db  28h	; (
db  2Bh	; +
db  3Eh	; >
db    7
db  55h	; U
db    1
db 0FFh
db    0
db  23h	; #
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Bh	;   *
db  0Ch
db    0
db  4Bh	; K
db  75h	; u
db  61h	; a
db  69h	; i
db  20h
db  4Ch	; L
db  69h	; i
db  61h	; a
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db  6Ch	; l
db  0Ah
db    0
db    0
db  3Bh	; ;
db  1Bh
db  4Ah	; J
db  44h	; D
db  39h	; 9
db  41h	; A
db    4
db  64h	; d
db    1
db 0FFh
db    0
db  4Bh	; K
db  10h
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A3h	;   *
db 0B1h	;   *
db    0
db  59h	; Y
db  75h	; u
db  61h	; a
db  6Eh	; n
db  20h
db  59h	; Y
db  69h	; i
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  68h	; h
db    8
db    0
db    0
db  52h	; R
db  1Fh
db  4Dh	; M
db  48h	; H
db  46h	; F
db  34h	; 4
db    7
db  52h	; R
db    1
db 0FFh
db    0
db  23h	; #
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Dh	;   *
db  0Bh
db    0
db  4Bh	; K
db  75h	; u
db  61h	; a
db  69h	; i
db  20h
db  59h	; Y
db  75h	; u
db  65h	; e
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  34h	; 4
db  3Eh	; >
db  2Fh	; /
db  43h	; C
db  3Dh	; =
db  42h	; B
db    0
db  5Fh	; _
db    1
db 0FFh
db    0
db    2
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0AAh	;   *
db  65h	; e
db    0
db  43h	; C
db  61h	; a
db  6Fh	; o
db  20h
db  43h	; C
db  68h	; h
db  75h	; u
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  14h
db    9
db    0
db    0
db  5Fh	; _
db  2Ah	; *
db  3Eh	; >
db  37h	; 7
db  36h	; 6
db  41h	; A
db    8
db  50h	; P
db    1
db 0FFh
db    0
db  0Fh
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  93h	;   *
db  0Eh
db    0
db  4Ah	; J
db  69h	; i
db  61h	; a
db  20h
db  58h	; X
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  55h	; U
db  14h
db    0
db    0
db  35h	; 5
db  37h	; 7
db  3Eh	; >
db  50h	; P
db  42h	; B
db  32h	; 2
db 0FFh
db    0
db    1
db 0FFh
db    0
db  30h	; 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  9Eh	;   *
db 0A2h	;   *
db  80h	;   *
db  57h	; W
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  4Bh	; K
db  61h	; a
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db 0BEh	;   *
db    8
db    0
db    0
db  50h	; P
db  28h	; (
db  2Eh	; .
db  32h	; 2
db  35h	; 5
db  33h	; 3
db    7
db  50h	; P
db    1
db 0FFh
db    0
db  19h
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Ah	;   *
db  24h	; $
db    0
db  48h	; H
db  61h	; a
db  69h	; i
db  20h
db  53h	; S
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  5Dh	; ]
db  18h
db    0
db    0
db  4Eh	; N
db  17h
db  35h	; 5
db  33h	; 3
db  2Fh	; /
db  26h	; &
db 0FFh
db    0
db    1
db 0FFh
db    0
db  37h	; 7
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0A9h	;   *
db  2Dh	; -
db    0
db  58h	; X
db  75h	; u
db  20h
db  4Ah	; J
db  69h	; i
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  97h	;   *
db  0Ah
db    0
db    0
db  30h	; 0
db  41h	; A
db  2Bh	; +
db  33h	; 3
db  2Ah	; *
db  2Bh	; +
db    7
db  50h	; P
db    1
db 0FFh
db    0
db  19h
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  98h	;   *
db  3Eh	; >
db    0
db  48h	; H
db  75h	; u
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  5Ah	; Z
db  68h	; h
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db  82h	;   *
db  15h
db    0
db    0
db  3Ah	; :
db  3Dh	; =
db  33h	; 3
db  3Fh	; ?
db  32h	; 2
db  36h	; 6
db 0FFh
db    0
db    1
db 0FFh
db    0
db  50h	; P
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A0h	;   *
db  1Ah
db  80h	;   *
db  4Ah	; J
db  69h	; i
db  61h	; a
db  20h
db  48h	; H
db  75h	; u
db  61h	; a
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  47h	; G
db  0Dh
db    0
db    0
db  19h
db  64h	; d
db  0Fh
db  0Ah
db    5
db  5Ah	; Z
db    8
db  3Eh	; >
db    1
db 0FFh
db    0
db  2Dh	; -
db    0
db    0
db  88h	;   *
db  13h
db 0F4h	;   *
db    1
db  0Ah
db    0
db    0
db  9Bh	;   *
db 0A3h	;   *
db    0
db  4Ch	; L
db  75h	; u
db  20h
db  42h	; B
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  50h	; P
db  26h	; &
db  47h	; G
db  49h	; I
db  47h	; G
db  44h	; D
db  0Dh
db  46h	; F
db    1
db 0FFh
db    0
db  5Fh	; _
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A4h	;   *
db  36h	; 6
db    0
db  59h	; Y
db  75h	; u
db  20h
db  46h	; F
db  61h	; a
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  95h	;   *
db    9
db    0
db    0
db  54h	; T
db  3Ch	; <
db  57h	; W
db  58h	; X
db  57h	; W
db  4Ch	; L
db    2
db  59h	; Y
db    1
db 0FFh
db    0
db  5Fh	; _
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  97h	;   *
db  80h	;   *
db    0
db  43h	; C
db  68h	; h
db  65h	; e
db  6Eh	; n
db  67h	; g
db  20h
db  50h	; P
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C0h	;   *
db    9
db    0
db    0
db  58h	; X
db  5Eh	; ^
db  5Dh	; ]
db  5Ah	; Z
db  5Ah	; Z
db  61h	; a
db    2
db  64h	; d
db    1
db 0FFh
db    0
db  64h	; d
db    4
db    0
db  88h	;   *
db  13h
db 0F4h	;   *
db    1
db  0Ah
db    0
db    0
db 0AFh	;   *
db  6Dh	; m
db    0
db  53h	; S
db  75h	; u
db  6Eh	; n
db  20h
db  43h	; C
db  65h	; e
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  16h
db  0Ah
db    0
db    0
db  3Ah	; :
db  58h	; X
db  49h	; I
db  50h	; P
db  4Ch	; L
db  45h	; E
db    2
db  58h	; X
db    1
db 0FFh
db    0
db  5Ah	; Z
db    0
db    0
db 0D0h	;   *
db    7
db 0C8h	;   *
db    0
db  0Ah
db    0
db    0
db  96h	;   *
db  3Bh	; ;
db    0
db  48h	; H
db  75h	; u
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  47h	; G
db  61h	; a
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  52h	; R
db  2Eh	; .
db  4Eh	; N
db  33h	; 3
db  4Bh	; K
db  4Ah	; J
db 0FFh
db    0
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0ACh	;   *
db  23h	; #
db    0
db  48h	; H
db  61h	; a
db  6Eh	; n
db  20h
db  53h	; S
db  75h	; u
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  41h	; A
db  0Ah
db    0
db    0
db  2Fh	; /
db  3Ah	; :
db  33h	; 3
db  4Ah	; J
db  34h	; 4
db  36h	; 6
db    2
db  56h	; V
db    1
db 0FFh
db    0
db  5Fh	; _
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Ch	;   *
db 0D2h	;   *
db  99h	;   *
db  48h	; H
db  61h	; a
db  69h	; i
db  20h
db  44h	; D
db  61h	; a
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0EDh	;   *
db  0Ah
db    0
db    0
db  4Fh	; O
db  2Ah	; *
db  3Fh	; ?
db  38h	; 8
db  32h	; 2
db  35h	; 5
db    2
db  53h	; S
db    1
db 0FFh
db    0
db  5Ah	; Z
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Fh	;   *
db  25h	; %
db    0
db  48h	; H
db  61h	; a
db  6Eh	; n
db  20h
db  5Ah	; Z
db  65h	; e
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  49h	; I
db  0Eh
db    0
db    0
db  1Fh
db  3Eh	; >
db  37h	; 7
db  3Dh	; =
db  2Bh	; +
db  3Ah	; :
db    4
db  4Ch	; L
db    1
db 0FFh
db    0
db  4Bh	; K
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Bh	;   *
db  30h	; 0
db    0
db  4Ah	; J
db  69h	; i
db  6Eh	; n
db  20h
db  4Ch	; L
db  69h	; i
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  43h	; C
db  0Bh
db    0
db    0
db  4Dh	; M
db  4Bh	; K
db  45h	; E
db  43h	; C
db  41h	; A
db  35h	; 5
db    7
db  51h	; Q
db    1
db 0FFh
db    0
db  14h
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Bh	;   *
db  47h	; G
db    0
db  43h	; C
db  61h	; a
db  69h	; i
db  20h
db  4Dh	; M
db  61h	; a
db  6Fh	; o
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C6h	;   *
db  0Ch
db    0
db    0
db  46h	; F
db  57h	; W
db  48h	; H
db  4Fh	; O
db  4Ah	; J
db  39h	; 9
db    6
db  59h	; Y
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  96h	;   *
db  39h	; 9
db    0
db  59h	; Y
db  61h	; a
db  6Eh	; n
db  20h
db  59h	; Y
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Bh	; +
db  2Ch	; ,
db  2Dh	; -
db  3Bh	; ;
db  34h	; 4
db  36h	; 6
db    2
db  55h	; U
db    1
db 0FFh
db    0
db  5Ah	; Z
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Bh	;   *
db 0EBh	;   *
db  9Ah	;   *
db  5Ah	; Z
db  68h	; h
db  75h	; u
db  20h
db  5Ah	; Z
db  68h	; h
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  29h	; )
db  2Bh	; +
db  28h	; (
db  27h	; '
db  20h
db  35h	; 5
db 0FFh
db    0
db    1
db 0FFh
db    0
db  28h	; (
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db  9Fh	;   *
db 0ABh	;   *
db  99h	;   *
db  48h	; H
db  61h	; a
db  6Eh	; n
db  20h
db  58h	; X
db  69h	; i
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Ah
db  0Ch
db    0
db    0
db  27h	; '
db  20h
db  39h	; 9
db  3Dh	; =
db  20h
db  1Fh
db    7
db  4Eh	; N
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Ah	;   *
db 0C3h	;   *
db  95h	;   *
db  53h	; S
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db  20h
db  5Ah	; Z
db  68h	; h
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db 0FDh	;   *
db  12h
db    0
db    0
db  3Fh	; ?
db  47h	; G
db  43h	; C
db  42h	; B
db  3Bh	; ;
db  45h	; E
db  0Bh
db  4Eh	; N
db    1
db 0FFh
db    0
db  23h	; #
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Bh	;   *
db  1Ch
db  97h	;   *
db  58h	; X
db  69h	; i
db  6Eh	; n
db  20h
db  50h	; P
db  69h	; i
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0F7h	;   *
db  0Fh
db    0
db    0
db  1Bh
db  24h	; $
db  34h	; 4
db  26h	; &
db  28h	; (
db  36h	; 6
db    8
db  50h	; P
db    1
db 0FFh
db    0
db  41h	; A
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Dh	;   *
db 0ABh	;   *
db  92h	;   *
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  5Ah	; Z
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0D8h	;   *
db  15h
db    0
db    0
db  4Dh	; M
db  2Ah	; *
db  35h	; 5
db  49h	; I
db  3Dh	; =
db  32h	; 2
db 0FFh
db    0
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A2h	;   *
db  3Ch	; <
db    0
db  48h	; H
db  75h	; u
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  51h	; Q
db  75h	; u
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db  74h	; t
db  0Eh
db    0
db    0
db  22h	; "
db  47h	; G
db  3Ah	; :
db  33h	; 3
db  30h	; 0
db  3Fh	; ?
db    5
db  54h	; T
db    1
db 0FFh
db    0
db  14h
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0AFh	;   *
db  25h	; %
db  9Fh	;   *
db  48h	; H
db  6Fh	; o
db  75h	; u
db  20h
db  58h	; X
db  75h	; u
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h	; E
db  0Ch
db    0
db    0
db  1Ah
db  3Fh	; ?
db  33h	; 3
db  3Ch	; <
db  2Eh	; .
db  1Fh
db    7
db  53h	; S
db    1
db 0FFh
db    0
db  28h	; (
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A9h	;   *
db 0BCh	;   *
db  97h	;   *
db  44h	; D
db  65h	; e
db  6Eh	; n
db  67h	; g
db  20h
db  59h	; Y
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Ch
db  0Dh
db    0
db    0
db  15h
db  54h	; T
db  2Ch	; ,
db  3Bh	; ;
db  24h	; $
db  39h	; 9
db    7
db  50h	; P
db    1
db 0FFh
db    0
db  0Fh
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0AEh	;   *
db  92h	;   *
db    0
db  57h	; W
db  65h	; e
db  6Eh	; n
db  20h
db  50h	; P
db  69h	; i
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Fh
db  42h	; B
db  42h	; B
db  32h	; 2
db  20h
db  3Ah	; :
db 0FFh
db    0
db    1
db 0FFh
db    0
db  37h	; 7
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0ADh	;   *
db  42h	; B
db    0
db  47h	; G
db  61h	; a
db  6Fh	; o
db  20h
db  44h	; D
db  69h	; i
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  41h	; A
db  4Ch	; L
db  4Bh	; K
db  49h	; I
db  4Bh	; K
db  46h	; F
db 0FFh
db    0
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0ABh	;   *
db 0CDh	;   *
db  83h	;   *
db  4Ch	; L
db  69h	; i
db  20h
db  59h	; Y
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  22h	; "
db  10h
db    0
db    0
db  31h	; 1
db  56h	; V
db  35h	; 5
db  47h	; G
db  39h	; 9
db  35h	; 5
db    6
db  50h	; P
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0AAh	;   *
db  46h	; F
db    0
db  57h	; W
db  75h	; u
db  20h
db  4Ch	; L
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Eh	; .
db  16h
db    0
db    0
db  3Eh	; >
db  40h	; @
db  3Eh	; >
db  43h	; C
db  37h	; 7
db  38h	; 8
db 0FFh
db    0
db    1
db 0FFh
db    0
db  5Ah	; Z
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A0h	;   *
db 0CCh	;   *
db  91h	;   *
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  58h	; X
db  75h	; u
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db 0CAh	;   *
db  0Eh
db    0
db    0
db  22h	; "
db  23h	; #
db  42h	; B
db  33h	; 3
db  21h	; !
db  1Eh
db    7
db  50h	; P
db    1
db 0FFh
db    0
db  46h	; F
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A9h	;   *
db  72h	; r
db  8Fh	;   *
db  4Ch	; L
db  69h	; i
db  75h	; u
db  20h
db  50h	; P
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  4Dh	; M
db  10h
db    0
db    0
db  1Fh
db  5Bh	; [
db  21h	; !
db  47h	; G
db  29h	; )
db  53h	; S
db    8
db  58h	; X
db    1
db 0FFh
db    0
db  3Ah	; :
db    0
db    0
db 0D0h	;   *
db    7
db 0C8h	;   *
db    0
db  0Ah
db    0
db    0
db  9Bh	;   *
db  1Dh
db    0
db  48h	; H
db  75h	; u
db  20h
db  58h	; X
db  69h	; i
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  21h	; !
db  4Eh	; N
db  41h	; A
db  47h	; G
db  38h	; 8
db  49h	; I
db 0FFh
db    0
db    1
db 0FFh
db    0
db  5Ah	; Z
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0AAh	;   *
db  9Ch	;   *
db  99h	;   *
db  5Ah	; Z
db  68h	; h
db  75h	; u
db  20h
db  52h	; R
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FBh	;   *
db  11h
db    0
db    0
db  48h	; H
db  2Ch	; ,
db  43h	; C
db  3Eh	; >
db  40h	; @
db  33h	; 3
db 0FFh
db    0
db    1
db 0FFh
db    0
db  5Ah	; Z
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0A1h	;   *
db 0C0h	;   *
db  8Ah	;   *
db  44h	; D
db  69h	; i
db  6Eh	; n
db  67h	; g
db  20h
db  46h	; F
db  65h	; e
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db 0F3h	;   *
db  0Dh
db    0
db    0
db  27h	; '
db  4Bh	; K
db  28h	; (
db  42h	; B
db  3Ch	; <
db  43h	; C
db 0FFh
db    0
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0ACh	;   *
db  65h	; e
db  9Bh	;   *
db  5Ah	; Z
db  68h	; h
db  75h	; u
db  20h
db  4Ch	; L
db  69h	; i
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0DAh	;   *
db  16h
db    0
db    0
db  4Fh	; O
db  10h
db  18h
db  37h	; 7
db  2Fh	; /
db  38h	; 8
db 0FFh
db    0
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  97h	;   *
db  56h	; V
db    0
db  5Ah	; Z
db  68h	; h
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db  20h
db  59h	; Y
db  61h	; a
db  6Fh	; o
db    0
db    0
db    0
db    0
db    0
db    0
db 0A7h	;   *
db  12h
db    0
db    0
db  1Eh
db  3Bh	; ;
db  2Ah	; *
db  3Fh	; ?
db  25h	; %
db  44h	; D
db    8
db  4Fh	; O
db    1
db 0FFh
db    0
db  3Ah	; :
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  92h	;   *
db  11h
db    0
db  47h	; G
db  75h	; u
db  6Fh	; o
db  20h
db  53h	; S
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A1h	;   *
db  0Fh
db    0
db    0
db  36h	; 6
db  4Ah	; J
db  35h	; 5
db  38h	; 8
db  35h	; 5
db  34h	; 4
db    4
db  50h	; P
db    1
db 0FFh
db    0
db  46h	; F
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A3h	;   *
db  2Dh	; -
db  93h	;   *
db  59h	; Y
db  75h	; u
db  65h	; e
db  20h
db  4Ah	; J
db  69h	; i
db  6Fh	; o
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  23h	; #
db  46h	; F
db  27h	; '
db  4Ah	; J
db  37h	; 7
db  3Bh	; ;
db    5
db  58h	; X
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0ADh	;   *
db 0BDh	;   *
db  9Ah	;   *
db  43h	; C
db  68h	; h
db  65h	; e
db  6Eh	; n
db  67h	; g
db  20h
db  59h	; Y
db  69h	; i
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db  28h	; (
db  13h
db    0
db    0
db  28h	; (
db  35h	; 5
db  31h	; 1
db  2Ah	; *
db  32h	; 2
db  29h	; )
db 0FFh
db    0
db    1
db 0FFh
db    0
db  1Eh
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0A8h	;   *
db  45h	; E
db  9Bh	;   *
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  4Eh	; N
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Eh	; .
db  24h	; $
db  3Eh	; >
db  32h	; 2
db  2Ah	; *
db  36h	; 6
db    7
db  50h	; P
db    1
db 0FFh
db    0
db  19h
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A0h	;   *
db 0C9h	;   *
db  89h	;   *
db  4Ch	; L
db  75h	; u
db  20h
db  47h	; G
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db  0Fh
db    0
db    0
db  0Dh
db  13h
db  0Fh
db  0Ch
db  12h
db  20h
db  0Ah
db  46h	; F
db    1
db 0FFh
db    0
db  46h	; F
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  91h	;   *
db  17h
db  9Eh	;   *
db  43h	; C
db  61h	; a
db  6Fh	; o
db  20h
db  42h	; B
db  61h	; a
db  6Fh	; o
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  4Fh	; O
db  11h
db    0
db    0
db  4Eh	; N
db  25h	; %
db  5Bh	; [
db  55h	; U
db  52h	; R
db  46h	; F
db  0Ah
db  51h	; Q
db    1
db 0FFh
db    0
db  31h	; 1
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A5h	;   *
db  6Bh	; k
db    0
db  53h	; S
db  75h	; u
db  6Eh	; n
db  20h
db  47h	; G
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  76h	; v
db  0Fh
db    0
db    0
db  44h	; D
db  5Fh	; _
db  47h	; G
db  4Bh	; K
db  3Eh	; >
db  46h	; F
db  0Eh
db  55h	; U
db    1
db 0FFh
db    0
db  5Fh	; _
db    0
db    0
db 0D0h	;   *
db    7
db 0C8h	;   *
db    0
db  0Ah
db    0
db    0
db 0A6h	;   *
db  6Fh	; o
db    0
db  54h	; T
db  61h	; a
db  69h	; i
db  73h	; s
db  68h	; h
db  69h	; i
db  20h
db  43h	; C
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db  7Ah	; z
db  11h
db    0
db    0
db  33h	; 3
db  48h	; H
db  36h	; 6
db  37h	; 7
db  39h	; 9
db  35h	; 5
db  0Eh
db  52h	; R
db    1
db 0FFh
db    0
db  4Bh	; K
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Ah	;   *
db 0E7h	;   *
db  95h	;   *
db  5Ah	; Z
db  68h	; h
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db  20h
db  59h	; Y
db  69h	; i
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db 0A5h	;   *
db  11h
db    0
db    0
db  12h
db  3Dh	; =
db  15h
db  2Ch	; ,
db  27h	; '
db  29h	; )
db    4
db  50h	; P
db    1
db 0FFh
db    0
db  46h	; F
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Ch	;   *
db  92h	;   *
db  81h	;   *
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  58h	; X
db  75h	; u
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db 0A3h	;   *
db  10h
db    0
db    0
db  4Eh	; N
db  25h	; %
db  2Ah	; *
db  2Eh	; .
db  31h	; 1
db  3Ch	; <
db    3
db  51h	; Q
db    1
db 0FFh
db    0
db  23h	; #
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  91h	;   *
db 0AEh	;   *
db    0
db  43h	; C
db  68h	; h
db  65h	; e
db  6Eh	; n
db  20h
db  5Ah	; Z
db  68h	; h
db  65h	; e
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  18h
db  40h	; @
db  1Ah
db  22h	; "
db  1Ch
db  2Bh	; +
db    8
db  4Eh	; N
db    1
db 0FFh
db    0
db  37h	; 7
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A0h	;   *
db  8Ch	;   *
db  81h	;   *
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Fh	; o
db  20h
db  43h	; C
db  65h	; e
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  78h	; x
db  10h
db    0
db    0
db  3Ah	; :
db  49h	; I
db  46h	; F
db  43h	; C
db  44h	; D
db  34h	; 4
db    6
db  54h	; T
db    1
db 0FFh
db    0
db  46h	; F
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  92h	;   *
db  45h	; E
db    0
db  57h	; W
db  75h	; u
db  20h
db  59h	; Y
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0D2h	;   *
db  12h
db    0
db    0
db  5Bh	; [
db  1Bh
db  2Bh	; +
db  33h	; 3
db  22h	; "
db  34h	; 4
db    8
db  50h	; P
db    1
db 0FFh
db    0
db  37h	; 7
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  96h	;   *
db 0A7h	;   *
db    0
db  4Ch	; L
db  69h	; i
db  20h
db  52h	; R
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  51h	; Q
db  12h
db    0
db    0
db  43h	; C
db  58h	; X
db  48h	; H
db  5Fh	; _
db  4Ah	; J
db  48h	; H
db    6
db  5Ch	; \
db    1
db 0FFh
db    0
db  46h	; F
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A9h	;   *
db  76h	; v
db    0
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  52h	; R
db  65h	; e
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db  24h	; $
db  11h
db    0
db    0
db  29h	; )
db  40h	; @
db  33h	; 3
db  1Eh
db  19h
db  0Ch
db    3
db  4Eh	; N
db    1
db 0FFh
db    0
db  0Fh
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Fh	;   *
db    5
db  91h	;   *
db  4Dh	; M
db  61h	; a
db  20h
db  59h	; Y
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Dh	; -
db  32h	; 2
db  2Bh	; +
db  42h	; B
db  2Fh	; /
db  34h	; 4
db 0FFh
db    0
db    1
db 0FFh
db    0
db  28h	; (
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  9Ch	;   *
db  95h	;   *
db  88h	;   *
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Fh	; o
db  20h
db  46h	; F
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Ah	; *
db  14h
db    0
db    0
db  41h	; A
db  3Fh	; ?
db  48h	; H
db  50h	; P
db  38h	; 8
db  36h	; 6
db 0FFh
db    0
db    1
db 0FFh
db    0
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0A7h	;   *
db  16h
db    0
db  58h	; X
db  69h	; i
db  61h	; a
db  68h	; h
db  6Fh	; o
db  75h	; u
db  20h
db  45h	; E
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db  26h	; &
db  12h
db    0
db    0
db  12h
db  5Bh	; [
db  39h	; 9
db  45h	; E
db  30h	; 0
db  51h	; Q
db    3
db  58h	; X
db    1
db 0FFh
db    0
db  2Dh	; -
db    0
db    0
db 0D0h	;   *
db    7
db 0C8h	;   *
db    0
db  0Ah
db    0
db    0
db 0A1h	;   *
db  91h	;   *
db    0
db  57h	; W
db  65h	; e
db  6Eh	; n
db  20h
db  43h	; C
db  68h	; h
db  6Fh	; o
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  53h	; S
db  13h
db    0
db    0
db  4Ah	; J
db  19h
db  49h	; I
db  47h	; G
db  4Ah	; J
db  34h	; 4
db  0Ah
db  50h	; P
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  96h	;   *
db 0D8h	;   *
db  86h	;   *
db  43h	; C
db  68h	; h
db  65h	; e
db  6Eh	; n
db  20h
db  44h	; D
db  65h	; e
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  38h	; 8
db  46h	; F
db  24h	; $
db  2Dh	; -
db  2Fh	; /
db  29h	; )
db  0Eh
db  53h	; S
db    1
db 0FFh
db    0
db  5Fh	; _
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A5h	;   *
db  4Dh	; M
db  99h	;   *
db  43h	; C
db  68h	; h
db  65h	; e
db  6Eh	; n
db  20h
db  57h	; W
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  30h	; 0
db  17h
db    0
db    0
db  1Eh
db  42h	; B
db  24h	; $
db  1Ah
db  1Ah
db  2Dh	; -
db    4
db  49h	; I
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A1h	;   *
db 0E5h	;   *
db  88h	;   *
db  43h	; C
db  68h	; h
db  65h	; e
db  6Eh	; n
db  20h
db  4Ch	; L
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  23h	; #
db  3Dh	; =
db  26h	; &
db  3Eh	; >
db  2Fh	; /
db  33h	; 3
db 0FFh
db    0
db    1
db 0FFh
db    0
db  4Bh	; K
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0AFh	;   *
db  2Ah	; *
db  85h	;   *
db  43h	; C
db  68h	; h
db  65h	; e
db  6Eh	; n
db  67h	; g
db  20h
db  59h	; Y
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0B1h	;   *
db  17h
db    0
db    0
db  34h	; 4
db  55h	; U
db  46h	; F
db  4Ah	; J
db  47h	; G
db  45h	; E
db 0FFh
db    0
db    1
db 0FFh
db    0
db  5Ah	; Z
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0A3h	;   *
db  52h	; R
db    0
db  5Ah	; Z
db  68h	; h
db  6Fh	; o
db  75h	; u
db  20h
db  54h	; T
db  61h	; a
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  50h	; P
db  46h	; F
db  32h	; 2
db  37h	; 7
db  1Eh
db  43h	; C
db    3
db  53h	; S
db    1
db 0FFh
db    0
db  2Dh	; -
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  99h	;   *
db 0BBh	;   *
db    0
db  46h	; F
db  65h	; e
db  6Eh	; n
db  67h	; g
db  20h
db  4Ah	; J
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0ABh	;   *
db  14h
db    0
db    0
db  46h	; F
db  24h	; $
db  4Ch	; L
db  38h	; 8
db  28h	; (
db  16h
db    6
db  52h	; R
db    1
db 0FFh
db    0
db  46h	; F
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Eh	;   *
db  28h	; (
db  8Fh	;   *
db  44h	; D
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db  20h
db  48h	; H
db  65h	; e
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Ch	; ,
db  15h
db    0
db    0
db  51h	; Q
db  1Bh
db  58h	; X
db  53h	; S
db  4Ch	; L
db  4Ah	; J
db 0FFh
db    0
db    1
db 0FFh
db    0
db  37h	; 7
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0A2h	;   *
db    1
db    0
db  59h	; Y
db  69h	; i
db  20h
db  4Ah	; J
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  88h	;   *
db  18h
db    0
db    0
db  35h	; 5
db  3Bh	; ;
db  33h	; 3
db  3Ah	; :
db  2Fh	; /
db  3Fh	; ?
db    8
db  64h	; d
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    1
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  95h	;   *
db  42h	; B
db  88h	;   *
db  44h	; D
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db  20h
db  4Dh	; M
db  69h	; i
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db  13h
db    0
db    0
db  2Fh	; /
db  35h	; 5
db  2Ch	; ,
db  38h	; 8
db  25h	; %
db  37h	; 7
db    8
db  4Bh	; K
db    1
db 0FFh
db    0
db  28h	; (
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Ch	;   *
db 0CBh	;   *
db  88h	;   *
db  4Ch	; L
db  69h	; i
db  20h
db  53h	; S
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  45h	; E
db  5Ah	; Z
db  3Dh	; =
db  2Ah	; *
db  37h	; 7
db  50h	; P
db  0Bh
db  45h	; E
db    1
db 0FFh
db    0
db    5
db    0
db    0
db 0D0h	;   *
db    7
db 0C8h	;   *
db    0
db  0Ah
db    0
db    0
db 0A7h	;   *
db  73h	; s
db    0
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  58h	; X
db  69h	; i
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db 0D4h	;   *
db  13h
db    0
db    0
db  4Fh	; O
db  2Ah	; *
db  2Eh	; .
db  33h	; 3
db  40h	; @
db  3Eh	; >
db 0FFh
db    0
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db  98h	;   *
db  2Fh	; /
db    0
db  58h	; X
db  75h	; u
db  20h
db  59h	; Y
db  6Fh	; o
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  7Eh	; ~
db  13h
db    0
db    0
db  4Eh	; N
db  29h	; )
db  4Dh	; M
db  4Eh	; N
db  4Bh	; K
db  30h	; 0
db  0Ah
db  52h	; R
db    1
db 0FFh
db    0
db  37h	; 7
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A5h	;   *
db  8Fh	;   *
db    0
db  4Dh	; M
db  69h	; i
db  20h
db  5Ah	; Z
db  68h	; h
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  17h
db  3Dh	; =
db  0Dh
db  0Bh
db  0Dh
db  35h	; 5
db  0Ah
db  53h	; S
db    1
db 0FFh
db    0
db  37h	; 7
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0AAh	;   *
db 0EDh	;   *
db  9Ch	;   *
db  4Dh	; M
db  69h	; i
db  20h
db  46h	; F
db  61h	; a
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  57h	; W
db  15h
db    0
db    0
db  14h
db  44h	; D
db  11h
db  24h	; $
db  27h	; '
db  23h	; #
db  0Ch
db  55h	; U
db    1
db 0FFh
db    0
db    7
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Eh	;   *
db 0BDh	;   *
db  88h	;   *
db  57h	; W
db  75h	; u
db  61h	; a
db  69h	; i
db  20h
db  47h	; G
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  21h	; !
db  46h	; F
db  3Dh	; =
db  32h	; 2
db  2Fh	; /
db  33h	; 3
db 0FFh
db    0
db    1
db 0FFh
db    0
db  23h	; #
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db  9Fh	;   *
db  95h	;   *
db  90h	;   *
db  4Ah	; J
db  69h	; i
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  59h	; Y
db  69h	; i
db  71h	; q
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    3
db  16h
db    0
db    0
db  15h
db  52h	; R
db  29h	; )
db  38h	; 8
db  2Ah	; *
db  2Eh	; .
db    8
db  52h	; R
db    1
db 0FFh
db    0
db  41h	; A
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  99h	;   *
db 0B4h	;   *
db    0
db  46h	; F
db  61h	; a
db  6Eh	; n
db  20h
db  43h	; C
db  68h	; h
db  6Fh	; o
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  15h
db    0
db    0
db  2Fh	; /
db  34h	; 4
db  35h	; 5
db  3Ch	; <
db  30h	; 0
db  37h	; 7
db 0FFh
db    0
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0A1h	;   *
db  1Ah
db  98h	;   *
db  4Dh	; M
db  61h	; a
db  6Fh	; o
db  20h
db  47h	; G
db  61h	; a
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0ADh	;   *
db  15h
db    0
db    0
db  47h	; G
db  48h	; H
db  41h	; A
db  23h	; #
db  35h	; 5
db  45h	; E
db 0FFh
db    0
db    1
db 0FFh
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0ACh	;   *
db  75h	; u
db  91h	;   *
db  4Dh	; M
db  65h	; e
db  6Eh	; n
db  67h	; g
db  20h
db  44h	; D
db  61h	; a
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Eh	; .
db  4Dh	; M
db  41h	; A
db  42h	; B
db  33h	; 3
db  3Bh	; ;
db    6
db  50h	; P
db    1
db 0FFh
db    0
db  46h	; F
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A7h	;   *
db 0FCh	;   *
db  8Fh	;   *
db  59h	; Y
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  48h	; H
db  75h	; u
db  61h	; a
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db 0D6h	;   *
db  14h
db    0
db    0
db  2Ah	; *
db  32h	; 2
db  1Fh
db  3Ah	; :
db  2Ah	; *
db  22h	; "
db    6
db  4Eh	; N
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0AEh	;   *
db 0CAh	;   *
db  88h	;   *
db  4Ch	; L
db  69h	; i
db  75h	; u
db  20h
db  47h	; G
db  75h	; u
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Fh	; /
db  57h	; W
db  35h	; 5
db  3Dh	; =
db  2Bh	; +
db  37h	; 7
db    6
db  50h	; P
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0ADh	;   *
db  9Bh	;   *
db    0
db  4Ch	; L
db  65h	; e
db  69h	; i
db  20h
db  54h	; T
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    5
db  17h
db    0
db    0
db  30h	; 0
db  40h	; @
db  44h	; D
db  35h	; 5
db  34h	; 4
db  40h	; @
db 0FFh
db    0
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db  9Ch	;   *
db 0C5h	;   *
db  8Eh	;   *
db  4Ch	; L
db  69h	; i
db  75h	; u
db  20h
db  44h	; D
db  61h	; a
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  32h	; 2
db  18h
db    0
db    0
db  55h	; U
db  1Dh
db  46h	; F
db  48h	; H
db  4Dh	; M
db  3Eh	; >
db 0FFh
db    0
db    1
db 0FFh
db    0
db  23h	; #
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0B1h	;   *
db    7
db    0
db  57h	; W
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  43h	; C
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  21h	; !
db  37h	; 7
db  3Dh	; =
db  32h	; 2
db  31h	; 1
db  34h	; 4
db  0Ch
db  50h	; P
db    1
db 0FFh
db    0
db  46h	; F
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A0h	;   *
db 0A3h	;   *
db  92h	;   *
db  4Ch	; L
db  69h	; i
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  47h	; G
db  61h	; a
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Ch
db  52h	; R
db  33h	; 3
db  3Fh	; ?
db  37h	; 7
db  32h	; 2
db 0FFh
db    0
db    1
db 0FFh
db    0
db  5Ah	; Z
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A5h	;   *
db 0B7h	;   *
db    0
db  4Ch	; L
db  69h	; i
db  6Eh	; n
db  67h	; g
db  20h
db  43h	; C
db  61h	; a
db  6Fh	; o
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  4Dh	; M
db  2Dh	; -
db  46h	; F
db  49h	; I
db  37h	; 7
db  2Eh	; .
db 0FFh
db    0
db    1
db 0FFh
db    0
db  2Dh	; -
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A4h	;   *
db  30h	; 0
db  9Ch	;   *
db  4Ch	; L
db  75h	; u
db  20h
db  4Bh	; K
db  61h	; a
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  3Ch	; <
db  21h	; !
db  3Bh	; ;
db  44h	; D
db  30h	; 0
db  2Fh	; /
db 0FFh
db    0
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A7h	;   *
db 0F0h	;   *
db  8Ah	;   *
db  4Ch	; L
db  75h	; u
db  20h
db  59h	; Y
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  18h
db  28h	; (
db  26h	; &
db  38h	; 8
db  1Fh
db  22h	; "
db    8
db  51h	; Q
db    1
db 0FFh
db    0
db  3Ah	; :
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Eh	;   *
db 0B3h	;   *
db  85h	;   *
db  48h	; H
db  75h	; u
db  20h
db  5Ah	; Z
db  68h	; h
db  65h	; e
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Dh
db  50h	; P
db  21h	; !
db  45h	; E
db  2Bh	; +
db  2Ch	; ,
db 0FFh
db    0
db    1
db 0FFh
db    0
db  5Ah	; Z
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A5h	;   *
db 0B9h	;   *
db    0
db  4Ch	; L
db  69h	; i
db  20h
db  59h	; Y
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  19h
db  43h	; C
db  34h	; 4
db  46h	; F
db  35h	; 5
db  36h	; 6
db    6
db  52h	; R
db    1
db 0FFh
db    0
db  46h	; F
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A2h	;   *
db 0A4h	;   *
db  89h	;   *
db  4Ch	; L
db  69h	; i
db  6Eh	; n
db  67h	; g
db  20h
db  42h	; B
db  61h	; a
db  6Fh	; o
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0AFh	;   *
db  16h
db    0
db    0
db  21h	; !
db  2Dh	; -
db  2Bh	; +
db  29h	; )
db  2Ah	; *
db  2Ch	; ,
db 0FFh
db    0
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0A1h	;   *
db  3Bh	; ;
db  8Ah	;   *
db  57h	; W
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  4Bh	; K
db  75h	; u
db  61h	; a
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db 0B3h	;   *
db  18h
db    0
db    0
db  4Eh	; N
db  1Dh
db  55h	; U
db  49h	; I
db  4Ch	; L
db  45h	; E
db 0FFh
db    0
db    1
db 0FFh
db    0
db  0Fh
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db  9Dh	;   *
db  0Dh
db    0
db  48h	; H
db  75h	; u
db  61h	; a
db  20h
db  58h	; X
db  69h	; i
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db  86h	;   *
db  17h
db    0
db    0
db  39h	; 9
db  45h	; E
db  3Bh	; ;
db  44h	; D
db  36h	; 6
db  3Bh	; ;
db 0FFh
db    0
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  9Dh	;   *
db 0F5h	;   *
db  92h	;   *
db  4Ch	; L
db  69h	; i
db  20h
db  54h	; T
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  28h	; (
db  38h	; 8
db  2Dh	; -
db  44h	; D
db  38h	; 8
db  36h	; 6
db 0FFh
db    0
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0A1h	;   *
db  2Dh	; -
db  83h	;   *
db  4Ch	; L
db  69h	; i
db  20h
db  44h	; D
db  69h	; i
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  5Bh	; [
db  17h
db    0
db    0
db  21h	; !
db  45h	; E
db  29h	; )
db  2Bh	; +
db  25h	; %
db  28h	; (
db    4
db  50h	; P
db    1
db 0FFh
db    0
db  46h	; F
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Bh	;   *
db 0CCh	;   *
db  8Ah	;   *
db  4Ch	; L
db  69h	; i
db  20h
db  46h	; F
db  65h	; e
db  6Eh	; n
db  67h	; g
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  29h	; )
db  43h	; C
db  13h
db  17h
db  25h	; %
db  24h	; $
db    4
db  48h	; H
db    1
db 0FFh
db    0
db  3Ch	; <
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db 0A0h	;   *
db  3Dh	; =
db  88h	;   *
db  4Ch	; L
db  65h	; e
db  69h	; i
db  20h
db  42h	; B
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0DCh	;   *
db  17h
db    0
db    0
db  19h
db  2Bh	; +
db  29h	; )
db  0Fh
db  13h
db  37h	; 7
db 0FFh
db    0
db    1
db 0FFh
db    0
db  2Ch	; ,
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  9Bh	;   *
db 0F4h	;   *
db  86h	;   *
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  4Dh	; M
db  69h	; i
db  61h	; a
db  6Fh	; o
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  46h	; F
db  3Dh	; =
db  2Ah	; *
db  29h	; )
db  27h	; '
db  2Fh	; /
db 0FFh
db    0
db    1
db 0FFh
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0A3h	;   *
db  69h	; i
db  95h	;   *
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  59h	; Y
db  75h	; u
db  65h	; e
db    0
db    0
db    0
db    0
db    0
db    0
db  5Fh	; _
db  19h
db    0
db    0
db  35h	; 5
db  42h	; B
db  37h	; 7
db  34h	; 4
db  2Fh	; /
db  35h	; 5
db 0FFh
db    0
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A6h	;   *
db 0BBh	;   *
db  8Bh	;   *
db  4Ch	; L
db  75h	; u
db  20h
db  4Ah	; J
db  69h	; i
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Eh
db  44h	; D
db  27h	; '
db  14h
db  10h
db  0Fh
db 0FFh
db    0
db    1
db 0FFh
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0AEh	;   *
db  84h	;   *
db  9Ch	;   *
db  59h	; Y
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  51h	; Q
db  69h	; i
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  3Fh	; ?
db  1Dh
db  49h	; I
db  46h	; F
db  42h	; B
db  29h	; )
db 0FFh
db    0
db    1
db 0FFh
db    0
db  23h	; #
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db  9Dh	;   *
db 0D0h	;   *
db  88h	;   *
db  4Ch	; L
db  69h	; i
db  20h
db  47h	; G
db  75h	; u
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  52h	; R
db  13h
db  4Ah	; J
db  5Fh	; _
db  4Ch	; L
db  35h	; 5
db 0FFh
db    0
db    1
db 0FFh
db    0
db  4Ah	; J
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db 0ADh	;   *
db  19h
db  98h	;   *
db  57h	; W
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  4Ch	; L
db  65h	; e
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0DEh	;   *
db  18h
db    0
db    0
db  43h	; C
db  1Eh
db  1Fh
db  1Ch
db  1Ch
db  39h	; 9
db    8
db  55h	; U
db    1
db 0FFh
db    0
db  41h	; A
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  90h	;   *
db  6Fh	; o
db  94h	;   *
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  4Ah	; J
db  69h	; i
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Bh	; +
db  39h	; 9
db  26h	; &
db  19h
db  24h	; $
db  37h	; 7
db 0FFh
db    0
db    1
db 0FFh
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db  9Dh	;   *
db 0FAh	;   *
db  9Ah	;   *
db  53h	; S
db  6Fh	; o
db  6Eh	; n
db  67h	; g
db  20h
db  58h	; X
db  69h	; i
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  32h	; 2
db  4Bh	; K
db  4Bh	; K
db  36h	; 6
db  3Dh	; =
db  44h	; D
db    8
db  4Ch	; L
db    1
db 0FFh
db    0
db  14h
db    0
db    0
db 0E8h	;   *
db    3
db  64h	; d
db    0
db  0Ah
db    0
db    0
db  9Ah	;   *
db  75h	; u
db  9Bh	;   *
db  5Ah	; Z
db  68h	; h
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  58h	; X
db  69h	; i
db  75h	; u
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  4Dh	; M
db  1Ch
db  4Ah	; J
db  49h	; I
db  41h	; A
db  42h	; B
db 0FFh
db    0
db    1
db 0FFh
db    0
db  5Ah	; Z
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A4h	;   *
db 0B8h	;   *
db  96h	;   *
db  4Ch	; L
db  75h	; u
db  20h
db  46h	; F
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  3Ah	; :
db  37h	; 7
db  31h	; 1
db  3Ah	; :
db  2Ah	; *
db  34h	; 4
db 0FFh
db    0
db    1
db 0FFh
db    0
db  3Ah	; :
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db    0
db  99h	;   *
db 0E9h	;   *
db  93h	;   *
db  48h	; H
db  75h	; u
db  61h	; a
db  6Eh	; n
db  67h	; g
db  20h
db  57h	; W
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  19h
db  49h	; I
db  3Ch	; <
db  4Ch	; L
db  40h	; @
db  4Ah	; J
db 0FFh
db    0
db    1
db 0FFh
db    0
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  9Fh	;   *
db 0DDh	;   *
db  80h	;   *
db  4Ch	; L
db  75h	; u
db  20h
db  51h	; Q
db  69h	; i
db  61h	; a
db  6Eh	; n
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0B5h	;   *
db  19h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0E0h	;   *
db  19h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Bh
db  1Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  36h	; 6
db  1Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  61h	; a
db  1Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Ch	;   *
db  1Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0B7h	;   *
db  1Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0E2h	;   *
db  1Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Dh
db  1Bh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  38h	; 8
db  1Bh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  63h	; c
db  1Bh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Eh	;   *
db  1Bh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0B9h	;   *
db  1Bh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0E4h	;   *
db  1Bh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Fh
db  1Ch
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  3Ah	; :
db  1Ch
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  65h	; e
db  1Ch
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	;   *
db  1Ch
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0BBh	;   *
db  1Ch
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0E6h	;   *
db  1Ch
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  11h
db  1Dh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  3Ch	; <
db  1Dh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  67h	; g
db  1Dh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  92h	;   *
db  1Dh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0BDh	;   *
db  1Dh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0E8h	;   *
db  1Dh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  13h
db  1Eh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  3Eh	; >
db  1Eh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  69h	; i
db  1Eh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  94h	;   *
db  1Eh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0BFh	;   *
db  1Eh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0EAh	;   *
db  1Eh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  15h
db  1Fh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h	; @
db  1Fh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  6Bh	; k
db  1Fh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  96h	;   *
db  1Fh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C1h	;   *
db  1Fh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0ECh	;   *
db  1Fh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  17h
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  42h	; B
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  6Dh	; m
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  98h	;   *
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C3h	;   *
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0EEh	;   *
db  20h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  19h
db  21h	; !
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  44h	; D
db  21h	; !
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  6Fh	; o
db  21h	; !
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  9Ah	;   *
db  21h	; !
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C5h	;   *
db  21h	; !
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0F0h	;   *
db  21h	; !
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Bh
db  22h	; "
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  46h	; F
db  22h	; "
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  71h	; q
db  22h	; "
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  9Ch	;   *
db  22h	; "
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C7h	;   *
db  22h	; "
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0F2h	;   *
db  22h	; "
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Dh
db  23h	; #
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  48h	; H
db  23h	; #
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  73h	; s
db  23h	; #
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  9Eh	;   *
db  23h	; #
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C9h	;   *
db  23h	; #
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0F4h	;   *
db  23h	; #
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Fh
db  24h	; $
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  4Ah	; J
db  24h	; $
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  75h	; u
db  24h	; $
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A0h	;   *
db  24h	; $
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0CBh	;   *
db  24h	; $
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0F6h	;   *
db  24h	; $
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  21h	; !
db  25h	; %
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  4Ch	; L
db  25h	; %
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  77h	; w
db  25h	; %
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A2h	;   *
db  25h	; %
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0CDh	;   *
db  25h	; %
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0F8h	;   *
db  25h	; %
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  23h	; #
db  26h	; &
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  4Eh	; N
db  26h	; &
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  79h	; y
db  26h	; &
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A4h	;   *
db  26h	; &
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0CFh	;   *
db  26h	; &
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FAh	;   *
db  26h	; &
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  25h	; %
db  27h	; '
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  50h	; P
db  27h	; '
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  7Bh	; {
db  27h	; '
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A6h	;   *
db  27h	; '
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0D1h	;   *
db  27h	; '
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FCh	;   *
db  27h	; '
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  27h	; '
db  28h	; (
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  52h	; R
db  28h	; (
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  7Dh	; }
db  28h	; (
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A8h	;   *
db  28h	; (
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0D3h	;   *
db  28h	; (
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FEh	;   *
db  28h	; (
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  29h	; )
db  29h	; )
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  54h	; T
db  29h	; )
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  7Fh	; 
db  29h	; )
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0AAh	;   *
db  29h	; )
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0D5h	;   *
db  29h	; )
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Ah	; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Bh	; +
db  2Ah	; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  56h	; V
db  2Ah	; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  81h	;   *
db  2Ah	; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0ACh	;   *
db  2Ah	; *
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  8Ah	;   *
db  19h
db  16h
db  10h
db    8
db    0
db  58h	; X
db    0
db 0DCh	;   *
db  2Eh	; .
db 0E3h	;   *
db    5
db  32h	; 2
db    0
db 0FFh
db    8
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  83h	;   *
db    0
db  2Dh	; -
db  2Eh	; .
db    0
db    0
db  32h	; 2
db    0
db 0FFh
db    8
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0AEh	;   *
db    0
db  80h	;   *
db  30h	; 0
db  6Ah	; j
db    9
db  32h	; 2
db    0
db 0FFh
db    4
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0D9h	;   *
db    0
db  73h	; s
db  2Eh	; .
db 0B4h	;   *
db    3
db  32h	; 2
db    0
db 0FFh
db    9
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    4
db    1
db  3Ah	; :
db  30h	; 0
db    0
db    0
db  32h	; 2
db    0
db 0FFh
db    8
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  2Fh	; /
db    1
db  8Bh	;   *
db  2Fh	; /
db    0
db    0
db  32h	; 2
db    0
db 0FFh
db    8
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  5Ah	; Z
db    1
db  24h	; $
db  32h	; 2
db    0
db    0
db  32h	; 2
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  85h	;   *
db    1
db  5Dh	; ]
db  30h	; 0
db  66h	; f
db    7
db  32h	; 2
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0B0h	;   *
db    1
db 0FFh
db  2Eh	; .
db  12h
db    8
db  32h	; 2
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0DBh	;   *
db    1
db  0Ah
db  2Eh	; .
db    0
db    0
db  32h	; 2
db    0
db 0FFh
db    3
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    6
db    2
db 0D1h	;   *
db  2Fh	; /
db    0
db    0
db  32h	; 2
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  31h	; 1
db    2
db  96h	;   *
db  2Eh	; .
db    0
db    0
db  32h	; 2
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  5Ch	; \
db    2
db 0B9h	;   *
db  2Eh	; .
db    0
db    0
db  32h	; 2
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  87h	;   *
db    2
db 0E9h	;   *
db  30h	; 0
db    0
db    0
db  32h	; 2
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0B2h	;   *
db    2
db  75h	; u
db  31h	; 1
db    0
db    0
db  32h	; 2
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  32h	; 2
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db  8Ah	;   *
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  0Ah
db    5
db    5
db    5
db    1
db  32h	; 2
db    8
db    1
db  37h	; 7
db    0
db    6
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db 0BCh	;   *
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  0Ah
db    5
db    5
db    5
db    2
db  32h	; 2
db 0DDh	;   *
db    0
db  43h	; C
db    0
db    5
db    0
db    0
db    0
db    0
db 0DBh	;   *
db    1
db    0
db    0
db    0
db    0
db 0E8h	;   *
db    3
db 0A8h	;   *
db  61h	; a
db    0
db    0
db 0E8h	;   *
db    3
db    9
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  37h	; 7
db  23h	; #
db  1Eh
db  0Ah
db    4
db  32h	; 2
db 0AEh	;   *
db    0
db  49h	; I
db    0
db    4
db    1
db    0
db    0
db    0
db  83h	;   *
db    0
db    0
db    0
db    0
db    0
db 0E8h	;   *
db    3
db 0A8h	;   *
db  61h	; a
db    0
db    0
db 0E8h	;   *
db    3
db    1
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  32h	; 2
db  37h	; 7
db  1Eh
db  0Ah
db    0
db  32h	; 2
db  91h	;   *
db    0
db  51h	; Q
db    0
db    3
db    1
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db 0EBh	;   *
db    9
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db 0BCh	;   *
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  19h
db  0Fh
db    0
db    5
db    1
db  32h	; 2
db  94h	;   *
db    0
db  6Bh	; k
db    0
db    3
db    2
db    1
db    0
db    0
db 0D9h	;   *
db    0
db    0
db    0
db  9Fh	;   *
db  0Eh
db 0E8h	;   *
db    3
db  70h	; p
db  11h
db    1
db    0
db  88h	;   *
db  13h
db    3
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  32h	; 2
db  32h	; 2
db  32h	; 2
db  0Fh
db    3
db  32h	; 2
db 0C6h	;   *
db    0
db  6Bh	; k
db    0
db    5
db    1
db    2
db    0
db    0
db  31h	; 1
db    2
db    0
db    0
db    0
db    0
db 0E8h	;   *
db    3
db  30h	; 0
db  75h	; u
db    0
db    0
db 0B0h	;   *
db    4
db  0Bh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  41h	; A
db  37h	; 7
db  32h	; 2
db  0Fh
db    3
db  32h	; 2
db 0AEh	;   *
db    0
db  6Bh	; k
db    0
db    4
db    2
db    2
db    0
db    0
db  5Ch	; \
db    2
db    0
db    0
db    0
db    0
db 0E8h	;   *
db    3
db 0A8h	;   *
db  61h	; a
db    0
db    0
db  20h
db    3
db  0Ch
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  41h	; A
db  41h	; A
db  32h	; 2
db  0Ah
db    2
db  32h	; 2
db 0E7h	;   *
db    0
db  7Fh	; 
db    0
db    6
db    2
db    3
db    0
db    0
db  58h	; X
db    0
db    0
db    0
db 0F9h	;   *
db  10h
db 0E8h	;   *
db    3
db  40h	; @
db  9Ch	;   *
db    0
db    0
db 0ACh	;   *
db  0Dh
db    0
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  3Ch	; <
db  3Ch	; <
db  1Eh
db  14h
db    2
db  32h	; 2
db 0C4h	;   *
db    0
db  8Eh	;   *
db    0
db    5
db    2
db    4
db  22h	; "
db  2Fh	; /
db 0B0h	;   *
db    1
db    0
db    0
db  84h	;   *
db  16h
db 0E8h	;   *
db    3
db  50h	; P
db 0C3h	;   *
db    0
db    0
db  40h	; @
db  1Fh
db    8
db 0FFh
db    0
db    1
db 0FFh
db 0FFh
db  41h	; A
db  2Dh	; -
db  32h	; 2
db  1Eh
db    6
db  32h	; 2
db 0A6h	;   *
db    0
db  91h	;   *
db    0
db    4
db    3
db    5
db  45h	; E
db  2Fh	; /
db 0DDh	;   *
db    2
db    0
db    0
db    0
db    0
db 0F4h	;   *
db    1
db 0A8h	;   *
db  61h	; a
db    0
db    0
db  94h	;   *
db  11h
db    8
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  2Dh	; -
db  23h	; #
db  23h	; #
db  0Fh
db    3
db  32h	; 2
db  8Ch	;   *
db    0
db  89h	;   *
db    0
db    3
db    3
db    5
db    0
db    0
db    8
db    3
db    0
db    0
db  34h	; 4
db  19h
db 0F4h	;   *
db    1
db 0A8h	;   *
db  61h	; a
db    0
db    0
db 0C4h	;   *
db    9
db    8
db 0FFh
db    0
db    1
db 0FFh
db 0FFh
db  2Dh	; -
db  28h	; (
db  1Eh
db  14h
db    4
db  32h	; 2
db  72h	; r
db    0
db  8Bh	;   *
db    0
db    2
db    4
db    6
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db  60h	; `
db    9
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  14h
db  19h
db  14h
db  0Ah
db    3
db  32h	; 2
db  4Ch	; L
db    0
db  97h	;   *
db    0
db    1
db    4
db    6
db    0
db    0
db  2Fh	; /
db    1
db    0
db    0
db 0D0h	;   *
db  11h
db 0E8h	;   *
db    3
db 0A8h	;   *
db  61h	; a
db    0
db    0
db 0FCh	;   *
db    8
db    5
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  2Dh	; -
db  28h	; (
db  28h	; (
db  1Eh
db    1
db  32h	; 2
db  38h	; 8
db    0
db  73h	; s
db    0
db    0
db    4
db    7
db    0
db    0
db    0
db    0
db    0
db    0
db    7
db  18h
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db  20h
db    3
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  0Ah
db    5
db    5
db  14h
db    1
db  32h	; 2
db  11h
db    0
db  49h	; I
db    0
db    0
db    3
db    7
db    0
db    0
db    6
db    2
db    0
db    0
db    0
db    0
db 0E8h	;   *
db    3
db 0B8h	;   *
db  88h	;   *
db    0
db    0
db 0DCh	;   *
db    5
db  0Ah
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  32h	; 2
db  37h	; 7
db  19h
db  0Fh
db    2
db  32h	; 2
db 0E7h	;   *
db    0
db 0A1h	;   *
db    0
db    6
db    3
db    8
db    0
db    0
db    0
db    0
db    0
db    0
db 0C8h	;   *
db  0Dh
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db 0D0h	;   *
db    7
db 0FFh
db 0FFh
db    0
db    1
db 0FFh
db 0FFh
db  32h	; 2
db  2Dh	; -
db  14h
db  0Ah
db    4
db  32h	; 2
db 0BEh	;   *
db    0
db 0AFh	;   *
db    0
db    5
db    3
db    9
db    0
db    0
db    0
db    0
db    0
db    0
db 0E9h	;   *
db    8
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db 0C4h	;   *
db    9
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  32h	; 2
db  28h	; (
db  0Ah
db  0Ah
db    3
db  32h	; 2
db 0DAh	;   *
db    0
db 0BFh	;   *
db    0
db    6
db    4
db    9
db    0
db    0
db    4
db    1
db    0
db    0
db  18h
db  0Bh
db 0E8h	;   *
db    3
db  40h	; @
db  9Ch	;   *
db    0
db    0
db  28h	; (
db  23h	; #
db    4
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  32h	; 2
db  32h	; 2
db  28h	; (
db  14h
db    4
db  32h	; 2
db 0A5h	;   *
db    0
db 0BFh	;   *
db    0
db    4
db    4
db  0Ah
db    0
db    0
db  85h	;   *
db    1
db    0
db    0
db  7Ch	; |
db  12h
db 0E8h	;   *
db    3
db 0C8h	;   *
db 0AFh	;   *
db    0
db    0
db  40h	; @
db  1Fh
db    7
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  41h	; A
db  41h	; A
db  28h	; (
db  1Eh
db    3
db  32h	; 2
db  7Eh	; ~
db    0
db 0BBh	;   *
db    0
db    3
db    4
db  0Ah
db    0
db    0
db 0AEh	;   *
db    0
db    0
db    0
db  9Dh	;   *
db  0Dh
db 0E8h	;   *
db    3
db  50h	; P
db 0C3h	;   *
db    0
db    0
db  70h	; p
db  17h
db    2
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  41h	; A
db  37h	; 7
db  28h	; (
db  14h
db    4
db  32h	; 2
db  9Ch	;   *
db    0
db 0E5h	;   *
db    0
db    4
db    5
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db 0CEh	;   *
db  10h
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db  88h	;   *
db  13h
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  37h	; 7
db  28h	; (
db  0Ah
db  0Fh
db    3
db  32h	; 2
db 0ACh	;   *
db    0
db  15h
db    1
db    5
db    5
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db  64h	; d
db  19h
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  32h	; 2
db  28h	; (
db    5
db  0Ah
db    1
db  32h	; 2
db  8Ah	;   *
db    0
db    5
db    1
db    4
db    6
db  0Ah
db    0
db    0
db  87h	;   *
db    2
db    0
db    0
db    0
db    0
db 0E8h	;   *
db    3
db 0A8h	;   *
db  61h	; a
db    0
db    0
db 0ACh	;   *
db  0Dh
db  0Dh
db 0FFh
db    0
db    1
db 0FFh
db 0FFh
db  37h	; 7
db  32h	; 2
db  1Eh
db  0Ah
db    3
db  32h	; 2
db 0FEh	;   *
db    0
db 0C5h	;   *
db    0
db    7
db    3
db  0Bh
db    0
db    0
db    0
db    0
db    0
db    0
db 0F1h	;   *
db  0Ch
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db 0DCh	;   *
db    5
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  28h	; (
db  1Eh
db  0Ah
db    5
db    1
db  32h	; 2
db    4
db    1
db 0E9h	;   *
db    0
db    7
db    4
db  0Bh
db    0
db    0
db    0
db    0
db    0
db    0
db  72h	; r
db  0Dh
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db 0BCh	;   *
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  0Fh
db  19h
db    5
db    5
db    0
db  32h	; 2
db 0F7h	;   *
db    0
db  15h
db    1
db    7
db    5
db  0Bh
db    0
db    0
db    0
db    0
db    0
db    0
db    9
db  19h
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db  20h
db    3
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  0Fh
db  19h
db    5
db    5
db    4
db  32h	; 2
db 0E4h	;   *
db    0
db 0F0h	;   *
db    0
db    6
db    5
db  0Bh
db    0
db    0
db 0B2h	;   *
db    2
db    0
db    0
db    0
db    0
db 0E8h	;   *
db    3
db  30h	; 0
db  75h	; u
db    0
db    0
db 0DCh	;   *
db    5
db  0Eh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  32h	; 2
db  32h	; 2
db  14h
db  0Ah
db    0
db  32h	; 2
db 0CAh	;   *
db    0
db 0EDh	;   *
db    0
db    5
db    4
db  0Bh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db 0B8h	;   *
db  0Bh
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  23h	; #
db  23h	; #
db    5
db    5
db    3
db  32h	; 2
db  56h	; V
db    0
db 0BDh	;   *
db    0
db    2
db    5
db  0Ch
db    1
db  32h	; 2
db  5Eh	; ^
db    3
db    0
db    0
db  9Bh	;   *
db  0Ch
db 0F4h	;   *
db    1
db 0A8h	;   *
db  61h	; a
db    0
db    0
db 0B8h	;   *
db  0Bh
db    6
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  41h	; A
db  3Ch	; <
db  1Eh
db  0Fh
db    0
db  32h	; 2
db  36h	; 6
db    0
db 0B1h	;   *
db    0
db    1
db    5
db  0Ch
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db 0B8h	;   *
db  0Bh
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  23h	; #
db  23h	; #
db    5
db  0Ah
db    1
db  32h	; 2
db  6Ah	; j
db    0
db 0E5h	;   *
db    0
db    3
db    5
db  0Ch
db    0
db    0
db  33h	; 3
db    3
db    0
db    0
db    0
db    0
db 0F4h	;   *
db    1
db 0A8h	;   *
db  61h	; a
db    0
db    0
db 0C4h	;   *
db    9
db    6
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  37h	; 7
db  37h	; 7
db  1Eh
db  0Fh
db    0
db  32h	; 2
db  4Bh	; K
db    0
db 0E7h	;   *
db    0
db    2
db    6
db  0Ch
db 0BBh	;   *
db  31h	; 1
db  5Ah	; Z
db    1
db    0
db    0
db  93h	;   *
db    8
db 0E8h	;   *
db    3
db 0B8h	;   *
db  88h	;   *
db    0
db    0
db 0ACh	;   *
db  0Dh
db    6
db 0FFh
db    0
db    1
db 0FFh
db 0FFh
db  41h	; A
db  3Ch	; <
db  1Eh
db  14h
db    4
db  32h	; 2
db  2Dh	; -
db    0
db 0DFh	;   *
db    0
db    1
db    6
db  0Ch
db    0
db    0
db    0
db    0
db    0
db    0
db 0C4h	;   *
db  0Bh
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db 0DCh	;   *
db    5
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  1Eh
db  28h	; (
db    5
db    5
db    3
db  32h	; 2
db  41h	; A
db    0
db  13h
db    1
db    2
db    7
db  0Ch
db    0
db    0
db    0
db    0
db    0
db    0
db  3Dh	; =
db    8
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db  20h
db    3
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  19h
db  23h	; #
db    5
db    5
db    1
db  32h	; 2
db  12h
db    0
db  1Bh
db    1
db    1
db    7
db  0Ch
db    0
db    0
db    0
db    0
db    0
db    0
db  70h	; p
db  0Ch
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db  52h	; R
db    3
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  23h	; #
db  23h	; #
db    5
db    5
db    2
db  32h	; 2
db  30h	; 0
db    0
db  3Bh	; ;
db    1
db    2
db    8
db  0Ch
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db  58h	; X
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  0Ah
db    5
db    5
db    0
db    1
db  32h	; 2
db 0D2h	;   *
db    0
db  35h	; 5
db    1
db    6
db    6
db  0Dh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db  26h	; &
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  0Ah
db    5
db    0
db    0
db    0
db  32h	; 2
db 0A3h	;   *
db    0
db  41h	; A
db    1
db    5
db    6
db  0Dh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db  58h	; X
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  0Ah
db    5
db    0
db    0
db    0
db  32h	; 2
db  83h	;   *
db    0
db  47h	; G
db    1
db    4
db    7
db  0Dh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db  8Ah	;   *
db    2
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  0Fh
db    5
db    5
db    5
db    0
db  32h	; 2
db  68h	; h
db    0
db  21h	; !
db    1
db    3
db    6
db  0Dh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  64h	; d
db    0
db 0D0h	;   *
db    7
db    0
db    0
db  20h
db    3
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db  0Fh
db    5
db    5
db    0
db    1
db  32h	; 2
db  5Dh	; ]
db    0
db  53h	; S
db    1
db    3
db    7
db  0Dh
db    0
db  39h	; 9
db    0
db 0B1h	;   *
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    8
db    0
db 0B2h	;   *
db 0FFh
db    9
db    0
db 0B0h	;   *
db    0
db    1
db    0
db 0B2h	;   *
db 0FFh
db    9
db    0
db 0B0h	;   *
db    1
db  5Fh	; _
db    5
db    4
db    4
db    0
db 0B2h	;   *
db    0
db  33h	; 3
db    0
db 0B0h	;   *
db 0FFh
db 0FFh
db    2
db    0
db 0B2h	;   *
db    0
db  0Ah
db    0
db 0B0h	;   *
db  44h	; D
db  69h	; i
db  73h	; s
db  6Bh	; k
db  20h
db  49h	; I
db  2Fh	; /
db  4Fh	; O
db  20h
db  65h	; e
db  72h	; r
db  72h	; r
db  6Fh	; o
db  72h	; r
db    7
db    7
db  10h
db    0
db 0B2h	;   *
db    0
db  20h
db    0
db 0B0h	;   *
db    6
db    0
db    0
db    0
db  4Fh	; O
db  50h	; P
db  4Ch	; L
db  44h	; D
db  52h	; R
db  56h	; V
db  0Ah
db    0
db 0B2h	;   *
db    0
db    9
db    0
db 0B0h	;   *
db    7
db    1
db    0
db 0B2h	;   *
db    0
db  0Eh
db    0
db 0B0h	;   *
db  1Bh
db  4Dh	; M
db  30h	; 0
db    8
db  20h
db    8
db    0
db  25h	; %
db  73h	; s
db  20h
db  28h	; (
db  25h	; %
db  64h	; d
db  2Dh	; -
db  25h	; %
db  64h	; d
db  29h	; )
db  3Fh	; ?
db  20h
db    0
db  20h
db  28h	; (
db  59h	; Y
db  2Fh	; /
db  4Eh	; N
db  29h	; )
db  3Fh	; ?
db  20h
db    0
db  59h	; Y
db    0
db  4Eh	; N
db    0
db  4Fh	; O
db  4Bh	; K
db  23h	; #
db    0
db 0B2h	;   *
db    0
db  1Ah
db    0
db 0B0h	;   *
db  11h
db  12h
db  13h
db  14h
db  15h
db  16h
db  17h
db  10h
db  11h
db  12h
db  13h
db  14h
db  15h
db  16h
db  17h
db    0
db    0
db    0
db    0
aRf		db 1Bh,'RF',0
aSpring		db 'Spring',0
aSummer		db 'Summer',0
aAutumn		db 'Autumn',0
aWinter		db 'Winter',0
aB7_25		db 1Bh,'B7'
db    1
aC0_22		db 1Bh,'C0'
db    1
a3s3dAd		db ' %3s %3d AD',0
aSB0C7		db '%s',1Bh,'B0',1Bh,'C7'
db    1
db    0
db  9Ch	;   *
db  34h	; 4
db 0A3h	;   *
db  34h	; 4
db 0AAh	;   *
db  34h	; 4
db 0B1h	;   *
db  34h	; 4
db 0B0h	;   *
db    1
db  10h
db    2
db 0C0h	;   *
db    0
db 0F0h	;   *
db    0
db 0C0h	;   *
db    0
db    0
db    0
db 0B0h	;   *
db    1
db 0F0h	;   *
db    0
db  10h
db    2
db  80h	;   *
db    1
db    0
db    0
db 0C0h	;   *
db    6
db    0
db  0Fh
db    0
db  12h
db 0C0h	;   *
db  15h
aJan_0		db 'Jan',0
aFeb_0		db 'Feb',0
aMar_0		db 'Mar',0
aApr_0		db 'Apr',0
aMay_0		db 'May',0
aJun_0		db 'Jun',0
aJul_0		db 'Jul',0
aAug_0		db 'Aug',0
aSep_0		db 'Sep',0
aOct_0		db 'Oct',0
aNov_0		db 'Nov',0
aDec_0		db 'Dec',0
db    1
db 0A8h	;   *
db    0
db 0B2h	;   *
db    0
db  0Bh
db    0
a1990_02_19	db '  *1990.02.19',0Ah,0
db '  *',0
db '(',0
db 0B0h	;   *
db 0FFh
db    0
db 0FFh
db 0FFh
db    4
db    0
db 0B2h	;   *
db    0
db  0Ah
db    0
db 0B0h	;   *
db    1
db    0
db    0
db    0
aBEnding_dat	db 'B:ENDING.DAT',0
db    0
aBGrpdata_dat	db 'B:GRPDATA.DAT',0
aBHexdata_dat	db 'B:HEXDATA.DAT',0
aBKaodata_dat	db 'B:KAODATA.DAT',0
aBMontage_dat	db 'B:MONTAGE.DAT',0
aBOpening_dat	db 'B:OPENING.DAT',0
aAPackdata_dat	db 'A:PACKDATA.DAT',0
db    0
aBScenario_dat	db 'B:SCENARIO.DAT',0
db    0
aATaiki_dat	db 'A:TAIKI.DAT',0
aAMain_exe	db 'A:MAIN.EXE',0
db    0
db  7Ch	; |
db  35h	; 5
db  8Ah	;   *
db  35h	; 5
db  98h	;   *
db  35h	; 5
db 0A6h	;   *
db  35h	; 5
db 0B4h	;   *
db  35h	; 5
db 0C2h	;   *
db  35h	; 5
db 0D0h	;   *
db  35h	; 5
db 0E0h	;   *
db  35h	; 5
db 0F0h	;   *
db  35h	; 5
db 0FCh	;   *
db  35h	; 5
db 0FCh	;   *
db  34h	; 4
db    0
db  35h	; 5
db    4
db  35h	; 5
db    8
db  35h	; 5
db  0Ch
db  35h	; 5
db  10h
db  35h	; 5
db  14h
db  35h	; 5
db  18h
db  35h	; 5
db  1Ch
db  35h	; 5
db  20h
db  35h	; 5
db  24h	; $
db  35h	; 5
db  28h	; (
db  35h	; 5
aHitAnyKey_	db 'Hit any key.',0
db    0
aC2_10		db 1Bh,'C2'
db    1
aSC6		db '%s,',1Bh,'C6'
db    1
aSC7_2		db ' %s',1Bh,'C7'
db    1
aHasComeOutOfHi	db ' has come',0Ah
db 'out of hidingand returned',0
db  0Ah
aTheEnemyMayHav	db 'The enemy may have known he was a spy',0
db    0
db    1
db    2
db    1
db    0
db    0
db    0
db    2
db    2
db    2
db    1
db    0
db    1
aS_3		db '%s',0
aSAppointWhomAs	db '%s, appoint whom as governor',0Ah
db 'of Province %2d ',0
a3d_BDCD	db '%3d. ',1Bh,'B%d',1Bh,'C%d'
db    1
a13sB0		db '%-13s',1Bh,'B0',0
a3d_CD		db '%3d. ',1Bh,'C%d'
db    1
a13s		db '%-13s',0
db '  ---',0
aBDCD		db 1Bh,'B%d',1Bh,'C%d'
db    1
a5dB0		db '%5d',1Bh,'B0',0
a5d_1		db '%5d',0
db '*',0
db ' ',0
align 2
aInt_0		db 'Int',0
aWar_0		db 'War',0
aChr_0		db 'Chr',0
aMen_0		db 'Men',0
aLoy_0		db 'Loy',0
aWeap		db 'Weap',0
aPC6		db 1Bh,'=(P',1Bh,'C6'
db    1
aGeneral_0	db '#  General       ',0
a777773777DD?	db '"7#7',27h,'7+7/73777 (%d-%d)? ',0
db  0Ah
a0ViewNextPage	db '(0: View next page)',0
db    0
db    0
aC7_15		db 1Bh,'=  ',1Bh,'C7'
db    1
aB0_19		db 1Bh,'B0'
db    1
db    0
aM_allocErr	db 'm_alloc err:',0
aF_allocErr	db 'f_alloc err:',0
aChoukiseg	db 'choukiseg',0
aHexseg		db 'hexseg',0
aPacseg		db 'pacseg',0
aChikeiseg	db 'chikeiseg',0
aWarseg		db 'warseg',0
aMapcopy_seg	db 'mapcopy_seg',0
aTheFightingRes	db 1Bh,'=,;The fighting resumes in Province',1Bh,'C2'
db    1
a2d_0		db ' %2d',0
aGrpseg		db 'grpseg',0
aREoC7		db 1Bh,'*',1Bh,'R ',1Bh,'Eo',1Bh,'C7'
db    1
db    0
aInsertDiskBInD	db 'Insert disk "B" in drive B and hit any key',0
aInsertDiskC6	db 'Insert disk ',1Bh,'C6'
db    1
aBC7		db 'B',1Bh,'C7'
db    1
aInDriveBAndHit	db ' in drive B and hit any key',0
aWrongDiskW	db 'Wrong Disk',7,1Bh,'W',0
aC2_11		db 1Bh,'C2'
db    1
aWrongDiskC7	db 'Wrong Disk',1Bh,'C7'
db    1
aW_2		db 7,1Bh,'W',0
aREoC7_0	db 1Bh,'*',1Bh,'R ',1Bh,'Eo',1Bh,'C7'
db    1
db    0
aInsertDiskCInD	db 'Insert disk "C" in drive B and hit any key',0
aInsertDiskC6_0	db 'Insert disk ',1Bh,'C6'
db    1
aCC7		db 'C',1Bh,'C7'
db    1
aInDriveBAndH_0	db ' in drive B and hit any key',0
aWrongDiskW_1	db 'Wrong Disk',7,1Bh,'W',0
aC2_12		db 1Bh,'C2'
db    1
aWrongDiskC7_0	db 'Wrong Disk',1Bh,'C7'
db    1
aW_3		db 7,1Bh,'W',0
db 0F0h	;   *
db    1
db 0EBh	;   *
db    6
db  16h
db    2
db 0EBh	;   *
db    6
db  3Ch	; <
db    2
db 0EBh	;   *
db    6
db  62h	; b
db    2
db 0EBh	;   *
db    6
db  88h	;   *
db    2
db 0EBh	;   *
db    6
db 0AEh	;   *
db    2
db 0EBh	;   *
db    6
db 0E8h	;   *
db    2
db 0EBh	;   *
db    6
db  4Ch	; L
db    3
db 0EBh	;   *
db    6
db  62h	; b
db    3
db 0EBh	;   *
db    6
db  78h	; x
db    3
db 0EBh	;   *
db    6
db  9Eh	;   *
db    3
db 0EBh	;   *
db    6
db 0C4h	;   *
db    3
db 0EBh	;   *
db    6
db 0FEh	;   *
db    3
db 0EBh	;   *
db    6
db  24h	; $
db    4
db 0EBh	;   *
db    6
db  4Ah	; J
db    4
db 0EBh	;   *
db    6
db 0CAh	;   *
db    4
db 0EBh	;   *
db    6
db 0EFh	;   *
db 0F2h	;   *
db  0Fh
db    3
db    3
db  40h	; @
db    0
db 0F2h	;   *
db  52h	; R
db  0Bh
db  0Bh
db    0
db 0DCh	;   *
db    5
db    2
db  81h	;   *
db    6
db  64h	; d
db    2
db    2
db    1
db    1
db  31h	; 1
db  63h	; c
db  0Eh
db    0
db    0
db  1Ch
db  80h	;   *
db  51h	; Q
db  51h	; Q
db 0FAh	;   *
db 0FAh	;   *
db  0Ch
db  40h	; @
db  1Fh
db    2
db 0CEh	;   *
db  0Fh
db  17h
db    6
db    6
db    1
db    1
db  3Fh	; ?
db  3Fh	; ?
db  0Fh
db    0
db    0
db  40h	; @
db    0
db 0F0h	;   *
db  50h	; P
db  0Bh
db  0Bh
db    0
db 0F4h	;   *
db    1
db    2
db  81h	;   *
db  0Ah
db  64h	; d
db    0
db    0
db    1
db    1
db 0E0h	;   *
db 0F0h	;   *
db  0Fh
db    3
db    3
db  40h	; @
db    0
db 0F2h	;   *
db  52h	; R
db  0Bh
db  0Bh
db    0
db  10h
db  27h	; '
db    1
db  81h	;   *
db  0Ah
db  64h	; d
db  0Dh
db    2
db    1
db    1
db  31h	; 1
db  21h	; !
db  0Eh
db    0
db    0
db  1Ch
db    0
db  61h	; a
db 0A2h	;   *
db  0Bh
db 0FBh	;   *
db    0
db  9Ch	;   *
db  18h
db    2
db  9Ch	;   *
db  0Fh
db    0
db    0
db    0
db    2
db    1
db    2
db  62h	; b
db    6
db    0
db    0
db  47h	; G
db    3
db 0F3h	;   *
db  95h	;   *
db 0CBh	;   *
db 0EBh	;   *
db  71h	; q
db    4
db 0B2h	;   *
db    0
db  0Bh
db    0
db 0B0h	;   *
db  85h	;   *
db  81h	;   *
db  0Ah
db    0
db    0
db  4Eh	; N
db  80h	;   *
db 0DAh	;   *
db 0F9h	;   *
db  15h
db  13h
db  0Bh
db    0
db 0B2h	;   *
db    0
db  0Bh
db    0
db 0B0h	;   *
db  2Fh	; /
db  3Eh	; >
db  0Eh
db    0
db    0
db  43h	; C
db    0
db 0F5h	;   *
db  43h	; C
db  64h	; d
db 0F7h	;   *
db    0
db 0F4h	;   *
db    1
db    2
db  81h	;   *
db  0Ah
db  64h	; d
db    0
db    0
db    1
db    0
db  0Dh
db  11h
db  0Eh
db    1
db    0
db  5Eh	; ^
db    0
db  85h	;   *
db 0D2h	;   *
db  51h	; Q
db  71h	; q
db  21h	; !
db    0
db 0B2h	;   *
db    0
db  0Bh
db    0
db 0B0h	;   *
db  34h	; 4
db 0A5h	;   *
db    1
db    3
db    2
db    0
db    0
db 0A0h	;   *
db 0F0h	;   *
db 0B6h	;   *
db  58h	; X
db    0
db  10h
db  27h	; '
db    2
db    0
db    0
db  9Ch	;   *
db  0Ah
db  0Ah
db    0
db    1
db  31h	; 1
db  22h	; "
db    2
db    1
db    2
db  43h	; C
db    5
db  6Eh	; n
db  8Bh	;   *
db  17h
db  0Ch
db  21h	; !
db    0
db 0B2h	;   *
db    0
db  0Bh
db    0
db 0B0h	;   *
db  2Fh	; /
db  30h	; 0
db  0Eh
db    0
db    0
db  40h	; @
db    0
db 0FDh	;   *
db 0F7h	;   *
db  0Fh
db 0FFh
db    0
db 0F4h	;   *
db    1
db    2
db  81h	;   *
db  0Ah
db  64h	; d
db    0
db    0
db    1
db    0
db  24h	; $
db  25h	; %
db    9
db    2
db    3
db    6
db    2
db  62h	; b
db  62h	; b
db  15h
db  15h
db 0E8h	;   *
db 0A0h	;   *
db  0Fh
db    2
db 0D8h	;   *
db  0Fh
db  0Ah
db    1
db    1
db    3
db    1
db  2Fh	; /
db  3Eh	; >
db  0Eh
db    0
db    0
db  43h	; C
db    0
db 0F1h	;   *
db 0F6h	;   *
db  65h	; e
db 0F7h	;   *
db    0
db 0F4h	;   *
db    1
db    2
db  81h	;   *
db  0Ah
db  64h	; d
db    0
db    0
db    1
db    0
db  85h	;   *
db  81h	;   *
db  0Ah
db    0
db    0
db  4Eh	; N
db  80h	;   *
db 0DAh	;   *
db 0F9h	;   *
db  15h
db  13h
db  4Dh	; M
db    0
db 0B2h	;   *
db    0
db  0Bh
db    0
db 0B0h	;   *
db  71h	; q
db  32h	; 2
db    2
db    1
db    2
db 0C0h	;   *
db    0
db  6Eh	; n
db  8Bh	;   *
db  17h
db  0Ch
db    0
db  20h
db  4Eh	; N
db    2
db  9Ch	;   *
db  0Bh
db    0
db    0
db    0
db    0
db    1
db  55h	; U
db  55h	; U
db 0AAh	;   *
db 0AAh	;   *
db 0AAh	;   *
db  55h	; U
db 0AAh	;   *
db 0FFh
db 0FFh
db  55h	; U
db 0FFh
db 0FFh
db  88h	;   *
db  77h	; w
db  55h	; U
db  22h	; "
db 0DDh	;   *
db 0AAh	;   *
db 0FFh
db 0AAh	;   *
db    0
db 0FFh
db  55h	; U
db    0
db 0FFh
db 0FFh
db 0AAh	;   *
db 0FFh
db 0FFh
db  55h	; U
db 0FFh
db  55h	; U
db 0AAh	;   *
db 0FFh
db 0AAh	;   *
db  55h	; U
db 0AAh	;   *
db    0
db 0FFh
db  55h	; U
db    0
db 0FFh
db 0FFh
db  88h	;   *
db 0DDh	;   *
db 0FFh
db  22h	; "
db  77h	; w
db 0FFh
db 0AAh	;   *
db 0FFh
db 0FFh
db  55h	; U
db 0FFh
db 0FFh
db    0
db 0AAh	;   *
db 0FFh
db    0
db  55h	; U
db 0AAh	;   *
db 0FFh
db    0
db  55h	; U
db 0FFh
db    0
db  55h	; U
db 0AAh	;   *
db    0
db 0AAh	;   *
db  55h	; U
db    0
db  55h	; U
db 0FFh
db 0AAh	;   *
db 0AAh	;   *
db 0FFh
db  55h	; U
db    0
db  55h	; U
db 0AAh	;   *
db    0
db 0AAh	;   *
db  55h	; U
db  55h	; U
db    0
db 0AAh	;   *
db 0AAh	;   *
db    0
db  55h	; U
db    0
db 0FFh
db 0AAh	;   *
db    0
db 0FFh
db  55h	; U
db  22h	; "
db  88h	;   *
db  22h	; "
db  88h	;   *
db  22h	; "
db  88h	;   *
db  81h	;   *
db  56h	; V
db  3Fh	; ?
db  15h
db    2
db 0AEh	;   *
db 0AAh	;   *
db 0B6h	;   *
db    0
db    0
db    0
db    0
db 0AAh	;   *
db 0AAh	;   *
db  55h	; U
db  55h	; U
db  55h	; U
db 0AAh	;   *
db 0EAh	;   *
db 0EAh	;   *
db    0
db    0
db    0
db    0
db  88h	;   *
db  88h	;   *
db    0
db    0
db    0
db    0
db  55h	; U
db 0DDh	;   *
db 0FFh
db  55h	; U
db  77h	; w
db 0FFh
db 0FFh
db  88h	;   *
db 0DDh	;   *
db 0FFh
db  22h	; "
db  77h	; w
db  24h	; $
db  55h	; U
db  77h	; w
db 0DDh	;   *
db  77h	; w
db 0DDh	;   *
db 0AAh	;   *
db 0FFh
db 0FFh
db  55h	; U
db 0FFh
db 0FFh
db  77h	; w
db  77h	; w
db    0
db    0
db    0
db    0
db 0EBh	;   *
db 0EBh	;   *
db    0
db    0
db    0
db    0
db  44h	; D
db    0
db 0BBh	;   *
db  11h
db    0
db 0EEh	;   *
db 0B2h	;   *
db  61h	; a
db  61h	; a
db  61h	; a
db  61h	; a
db  61h	; a
db  22h	; "
db  77h	; w
db  88h	;   *
db  55h	; U
db 0FFh
db  22h	; "
db 0D6h	;   *
db 0D1h	;   *
db  4Bh	; K
db  7Dh	; }
db  64h	; d
db  2Ah	; *
db 0D6h	;   *
db    0
db 0B2h	;   *
db 0FFh
db  24h	; $
db    0
db 0B0h	;   *
db  0Fh
db 0F0h	;   *
db  3Fh	; ?
db 0FCh	;   *
db  7Fh	; 
db 0FEh	;   *
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  7Fh	; 
db 0FEh	;   *
db  3Fh	; ?
db 0FCh	;   *
db  0Fh
db 0F0h	;   *
db    0
db    3
db    0
db  0Fh
db    0
db 0FFh
db  3Fh	; ?
db 0FFh
db    0
db 0FFh
db    0
db  0Fh
db    0
db    3
db    0
db    0
db    7
db  1Fh
db  3Fh	; ?
db  7Fh	; 
db  7Fh	; 
db 0FFh
db 0FFh
db 0FFh
db 0E0h	;   *
db 0F8h	;   *
db 0FCh	;   *
db 0FEh	;   *
db 0FEh	;   *
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  7Fh	; 
db  7Fh	; 
db  3Fh	; ?
db  1Fh
db    7
db 0FFh
db 0FFh
db 0FFh
db 0FEh	;   *
db 0FEh	;   *
db 0FCh	;   *
db 0F8h	;   *
db 0E0h	;   *
db 0C0h	;   *
db    0
db 0F0h	;   *
db    0
db 0FFh
db    0
db 0FFh
db 0FCh	;   *
db 0FFh
db    0
db 0F0h	;   *
db    0
db 0C0h	;   *
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    1
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    3
db    2
db    5
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    4
db    6
db    8
db    7
db 0FFh
db  0Eh
db 0FFh
db 0FFh
db  0Ah
db    9
db  10h
db  0Fh
db  17h
db  0Dh
db  0Ch
db  0Bh
db  13h
db  12h
db  1Bh
db  11h
db  18h
db 0FFh
db  1Dh
db  1Ch
db  1Eh
db  14h
db  15h
db  1Ah
db  19h
db 0FFh
db  20h
db  1Fh
db  27h	; '
db  16h
db  25h	; %
db  24h	; $
db 0FFh
db 0FFh
db  22h	; "
db  21h	; !
db  28h	; (
db  26h	; &
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  23h	; #
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    6
db    6
db    6
db    2
db    2
db    2
db    2
db    5
db    2
db    2
db    4
db    4
db    3
db    5
aYue		db 'Yue',0
align 4
aBing		db 'Bing',0
align 2
aJi		db 'Ji',0
align 4
aQing		db 'Qing',0
align 2
aYong		db 'Yong',0
align 2
aSi		db 'Si',0
db    0
db    0
db    0
aYou		db 'You',0
align 4
aLiang		db 'Liang',0
aXu		db 'Xu',0
align 4
aYu		db 'Yu',0
db    0
db    0
db    0
aJing		db 'Jing',0
align 2
aYang		db 'Yang',0
align 2
aYi		db 'Yi',0
align 4
aJiao		db 'Jiao',0
align 2
aC0_23		db 1Bh,'C0'
db    1
aB7_26		db 1Bh,'B7'
db    1
aReESC7		db 1Bh,'RE',1Bh,'=&E%s',1Bh,'C7'
db    1
aB0_20		db 1Bh,'B0'
db    1
db    0
aWillTheDeadEve	db 'Will the dead',0Ah
db 'ever be avenged?',0
aAtLastWeVeAchi	db 'At last we',27h,'ve',0Ah
db 'achieved our',0Ah
db 'long-cherished hope!',0
aItWasALongPain	db 'It was a long,',0Ah
db 'painful journey.',0
aCongratulation	db ',',0Ah
db 'Congratulations!',0Ah
db 'You unified China!',0
align 2
aS_4		db '  *<  *<'
db  19h
aChoukiseg_0	db '=choukiseg',0
aHexseg_0	db 'hexseg',0
aPacseg_0	db 'pacseg',0
aGrpseg_0	db 'grpseg',0
aWarseg_0	db 'warseg',0
aChikeiseg_0	db 'chikeiseg',0
aMapcopy_seg_0	db 'mapcopy_seg',0
aInsertDiskBI_0	db 'Insert disk "B" in drive B and hit any key',0
aInsertDiskC6_1	db 'Insert disk ',1Bh,'C6'
db    1
aBC7_0		db 'B',1Bh,'C7'
db    1
aInDriveBAndH_1	db ' in drive B and hit any key',0
aReC7		db 1Bh,'RE',1Bh,'C7'
db    1
aEchinaWasUnifi	db 1Bh,'=&EChina was unified',0Ah
db 'in ',1Bh,'C6'
db    1
aDC7		db '%d',1Bh,'C7'
db    1
db '!',0
db 0FFh
db  77h	; w
db    2
db 0B2h	;   *
db    0
db  73h	; s
db    1
db 0B0h	;   *
aC3_1		db 1Bh,'C3'
db    1
aSSOfProvinceDH	db '%s, %s of',0Ah
db 'Province %d has become a free general3',0
db '  *',0
db  11h
db    0
aChooseSSSucces	db '  * Choose %s',27h,'s successor',0 ; Changed ' Choose %s's successor.' to
; 'Choose %s's successor '
;
; Something was	off, can't recall now
aC2_13		db 1Bh,'C2'
db    1
aSC7_3		db '%s',1Bh,'C7'
db    1
aHasBeenInstall	db ' has been installed',0Ah
db 'as the new ruler.F',0
db '  *',0
db  12h
db    0
db 0B0h	;   *
aManSCruelFate_	db 'Man',27h,'s cruel fate...',0Ah
db 'Our loyal ',1Bh,'C2'
db    1
aSC7_4		db '%s',1Bh,'C7'
db    1
aHasDied_	db ' has died.',0
aC2_14		db 1Bh,'C2'
db    1
aSC7_5		db '%s',1Bh,'C7'
db    1
aHasDied_HisDre	db ' has died.',0Ah
db 'His dreams remain unfulfilled.',0
db  0Ah
aC2_15		db 1Bh,'C2'
db    1
aSSC7_0		db '%s',27h,'s',1Bh,'C7'
db    1
aClanHasBeenDes	db ' clan has been destroyed!',0
a@m@t		db ':@m@  *',0
db '  *',0
db ' ',0
db '  */',0
aSJointArmy	db 27h,'s joint army ',0
aTriumphedW	db 'triumphed!',1Bh,'W',0
aWasCrushedW	db 'was crushed!',1Bh,'W',0
db 0Ah,0
db ' ',0
db 0Ah,0
db 0Ah,0
db 0Ah,0
align 2
db 0FDh	;   *
a@ASFoodHasRunO	db '@',0Ah
db 'A',27h,'s food has run out',0
db    0
db    0
aSCommander	db 27h,'s commander',0
aSCommander_0	db 27h,'s commander',0
aWasBroughtDown	db ' was brought down!',0
aWasLost	db ' was lost!',0
aWasPowerlessBe	db ' was powerless before us!',0
aWasDestroyed	db ' was destroyed!',0
aSurrenderedThe	db ' surrendered the castle to us!',0
aWasForcedToSur	db ' was forced to surrender the castle!',0
aB0_21		db 1Bh,'B0',0
aB7FC0		db 1Bh,'B7',1Bh,'=#F',1Bh,'C0'
db    1
a2d_S		db '%2d. %s',0
aC2_16		db 1Bh,'C2'
db    1
db    0
aRegular	db 'Regular ',0
aJoint		db 'Joint ',0
aArmy12s	db 'army: %-12s',0
aC7_16		db 1Bh,'C7'
db    1
aB0S12sSC2	db 1Bh,'B0',1Bh,'=-S%-12s',1Bh,'=*S',1Bh,'C2'
db    1
aM0_1		db 1Bh,'M0',0
aSruler		db 1Bh,'=+SRuler',0
aC7_17		db 1Bh,'C7'
db    1
aB0S12s		db 1Bh,'B0',1Bh,'=-S%-12s',0
aC7_18		db 1Bh,'C7'
db    1
aFree		db 'Free      ',0
aSSC7_1		db '%s',27h,'s',1Bh,'C7'
db    1
aSfollower	db 1Bh,'=+Sfollower  ',0
aR_0		db 1Bh,'=+`',1Bh,'R`',0
aC6_3		db 1Bh,'C6'
db    1
aAgeC7		db 'Age',1Bh,'C7'
db    1
a6dC6		db '%6d',0Ah
db 1Bh,'C6'
db    1
aMenC7		db 'Men',1Bh,'C7'
db    1
a6dC4		db '%6d',0Ah
db 1Bh,'C4'
db    1
aIntC7		db 'Int',1Bh,'C7'
db    1
a6dC4_0		db '%6d',0Ah
db 1Bh,'C4'
db    1
aWarC7		db 'War',1Bh,'C7'
db    1
a6dC4_1		db '%6d',0Ah
db 1Bh,'C4'
db    1
aChrC7		db 'Chr',1Bh,'C7'
db    1
a6d		db '%6d',0
aWeGaveC4	db 'We gave ',1Bh,'C4'
db    1
aSC6_0		db '%s ',1Bh,'C6'
db    1
aUGoldAndLuFood	db '%u gold and',0Ah
db '%lu food ',1Bh,'C7'
db    1
aAsThanksForHis	db 'as thanks for his help',0Ah
db 0Ah,0
aC4_1		db 1Bh,'C4'
db    1
aSC7_6		db '%s',1Bh,'C7'
db    1
aGaveC2		db ' gave',0Ah
db 1Bh,'C2'
db    1
aSC6_1		db '%s',1Bh,'C6'
db    1
aUGoldAndLuFo_0	db ' %u gold and',0Ah
db '%lu food',1Bh,'C7'
db    1
aAsThanksForThe	db ' as thanks for',0Ah
db 'the cooperation',0Ah
db 0Ah,0
align 2
aC0_24		db 1Bh,'C0'
db    1
aB7_27		db 1Bh,'B7'
db    1
aRs		db 1Bh,'RS',0
aC0_25		db 1Bh,'C0'
db    1
aB7_28		db 1Bh,'B7'
db    1
aRz		db 1Bh,'RZ',0
aB0_22		db 1Bh,'B0'
db    1
aC7_19		db 1Bh,'C7'
db    1
db    0
aC7_20		db 1Bh,'C7'
db    1
a5pSHasAMysteri	db 1Bh,'=5P%s has a',0Ah
db 'mysterious past',0
aILlProveWorthy	db 'I',27h,'ll prove worthy',0Ah
db 'of her',0
aILlNeverForget	db 'I',27h,'ll never forget',0Ah
db 'Thank you',0
aC6_4		db 1Bh,'C6'
db    1
aSSLoyaltyNow10	db 0Ah
db '%s',27h,'s loyalty now 100',0
aC3_2		db 1Bh,'C3'
db    1
aSSLoyaltyDidNo	db 0Ah
db '%s',27h,'s loyalty did',0Ah
db 'not change',0
aC7_21		db 1Bh,'C7'
db    1
db    0
db    0
db 0A8h	;   *
db  43h	; C
db 0C1h	;   *
db  43h	; C
aGiveABeautiful	db 'Give a beautiful woman',0
aPlunder?	db 'Plunder?',0
aContinue?	db 'Continue?',0
aLetThePeopleBe	db 'Let the people be...',0
aNoBeautifulWom	db 'No beautiful women here...',0Ah
db 'Let',27h,'s give up.',0
aNoOneHasTouche	db 'No one has touched',0Ah
db 'this body.',0
aIAmNotOld_	db 'I am not old.',0
aWeFoundABeauti	db 'We found a beautiful woman!',0
aThereWereNoBea	db 'There were no beautiful women!',0
aAllTheBeautifu	db 'All the beautiful women',0Ah
db 'are already married!',0
aHeBarelyLooked	db 'He barely looked',0Ah
db 'at me.',0
aIFeltALittleSo	db 'I felt a little',0Ah
db 'sorry...',0
db  0Ah
aC6_5		db 1Bh,'C6'
db    1
db    0
db  0Ah
aC3_3		db 1Bh,'C3'
db    1
db    0
db  39h	; 9
db  44h	; D
db  42h	; B
db  44h	; D
db  4Ch	; L
db  44h	; D
db  61h	; a
db  44h	; D
db  8Bh	;   *
db  44h	; D
db 0A9h	;   *
db  44h	; D
db 0B7h	;   *
db  44h	; D
db 0D3h	;   *
db  44h	; D
db 0F2h	;   *
db  44h	; D
db  1Fh
db  45h	; E
db  37h	; 7
db  45h	; E
aMyLoyalSuccess	db 'My loyal successor',0Ah
db 'will see to your',0Ah
db 'defeat!',0
aMySpiritWillHa	db 'My spirit will haunt',0Ah
db 'you and bring',0Ah
db 'misfortune!',0
aISWillGiveMyLi	db 'I, %s, will',0Ah
db 'give my life to avenge',0Ah
db '%s',27h,'s death!',0
aISSwearThatThe	db 'I, %s, swear',0Ah
db 'that the murderers of',0Ah
db '%s will pay!',0
aSTheGhostOfSHa	db '%s, the ghost of %s',0Ah
db 'has appeared, hungry for blood!',0
aB0_23		db 1Bh,'B0'
db    1
aC7_22		db 1Bh,'C7'
db    1
db    0
db    0
db  72h	; r
db  45h	; E
db  9Eh	;   *
db  45h	; E
db 0CDh	;   *
db  45h	; E
db 0FCh	;   *
db  45h	; E
aC2_17		db 1Bh,'C2'
db    1
aSC7_7		db '%s',1Bh,'C7'
db    1
aHasGoneIntoExi	db ' has',0Ah
db 'gone into exile',0
aC2_18		db 1Bh,'C2'
db    1
aSC7_8		db '%s',1Bh,'C7'
db    1
aWasSetFree	db ' was set free',0
aC6_6		db 1Bh,'C6'
db    1
a1_setFree2_beh	db '1.Set free 2.Behead',0Ah
db 1Bh,'C7'
db    1
aDoWhatWithC2	db 'Do what with ',1Bh,'C2'
db    1
aSC7_9		db '%s',1Bh,'C7'
db    1
a12?		db ' (1-2)? ',0
aC6_7		db 1Bh,'C6'
db    1
a1_recruit2_set	db '1.Recruit 2.Set free 3.Behead',0Ah
db 1Bh,'C7'
db    1
aSDoWhich?13	db '%s, do which? (1-3) ',0
aSendWhere	db 'Send where',0
db    0
db    0
db    8
aMengDeSNewTrea	db 'Meng De',27h,'s new treatise',0
aSunTzuSWarManu	db 0Ah			; Change: Sun Tzu's War Manual
db 'Sun Tzu',27h,'s war manual',0
db    0
db    0
db    5
aBookOfHeavena	db 'Book of Heaven  *'
db    6
db 0B2h	;   *
db    0
db    8
db    0
db 0B0h	;   *
db    1
aLuminousSword	db 8,'Luminous sword'   ; Change: Luminous Sword
db  10h
db    0
db 0B2h	;   *
db    0
db    8
db    0
db 0B0h	;   *
db    1
db    8
aSwordOfTrust	db 'Sword of Trust'
db  10h
db    0
db 0B2h	;   *
db    0
db    8
db    0
db 0B0h	;   *
db    1
db    5
aSevenStarsSwor	db 'Seven Stars Sword',0
db    0
db    0
db    0
db    0
db    1
db  0Ah
aBlackDragonSwo	db 'Black Dragon Sword',0
db    0
db    0
db    0
db    2
db  0Ah
aPrincessFuRong	db 'Princess Fu Rong ',0
db    0
db    0
db    0
db    0
db    2
db    5
aPrincessDaQiao	db 'Princess Da Qiao',0
db    0
db    0
db    0
db    0
db    0
db    2
db    5
aPrincessXiaoQi	db 'Princess Xiao Qiao',0
db    0
db    0
db    0
db    2
db  0Ah
aPrincessChuShi	db 'Princess Chu Shi',0
db    0
db    0
db    0
db    0
db    0
db    2
db    8
aPrincessGongYa	db 'Princess Gong Yao',0
db    0
db    0
db    0
db    0
db    3
db    0
aTheRedHare	db 'The Red Hare  *',0
db '  *',0
db 0Ah,0
db 0B0h	;   *
db    3
db    0
aBlackLightning	db 'Black Lightning',0
db    0
db    0
db    0
db    0
db    0
db    0
db    4
db    0
aHuaTuoSMedical	db 'Hua Tuo',27h,'s medical book' ; Change: Hua Tuo's Medical Book
db    5
db    0
aHereditarySeal	db 'Hereditary seal',0
db    0
db    0
db    0
db    0
db    0
db    0
aSC7_10		db 27h,'s',1Bh,'C7'
db    1
aIntellect	db ' intellect',0
aSC7_11		db 27h,'s',1Bh,'C7'
db    1
aWarAbility	db ' war ability',0
aSC7_12		db 27h,'s',1Bh,'C7'
db    1
aCharm		db ' charm',0
aC7_23		db 1Bh,'C7'
db    1
aWillNeverBeCap	db ' will never be',0Ah
db 'captured in battle',0
aC2_19		db 1Bh,'C2'
db    1
aSS_0		db '%s%s',0
aDidNotChange	db ' did not change',0
aIncreasedByC6	db ' increased by ',1Bh,'C6'
db    1
aDC7_0		db '%d',1Bh,'C7'
db    1
db    0
db  0Ah
aThisShallRende	db 'This shall render devoted service',0
db 0ACh	;   *
db  48h	; H
db 0BDh	;   *
db  48h	; H
db 0D0h	;   *
db  48h	; H
db 0DDh	;   *
db  48h	; H
aGiveToWhom	db 'Give to whom',0
db  0Ah
aC4_2		db 1Bh,'C4'
db    1
aSC7_13		db '%s',1Bh,'C7'
db    1
db  20h
db    0
a5fnowWeWillNoL	db 1Bh,'=5FNow we will no longer',0Ah
db 'fear sickness',0
a5ftrustAndChar	db 1Bh,'=5FTrust and charm have',0Ah
db 'reached their maximum',0
aB7_29		db 1Bh,'B7'
db    1
aVC0		db 1Bh,'=$V',1Bh,'C0'
db    1
aSC7_14		db '%s',1Bh,'C7'
db    1
aB0_24		db 1Bh,'B0'
db    1
aM0_2		db 1Bh,'M0',0
align 2
db 0AFh	;   *
db  92h	;   *
db 0D0h	;   *
db  94h	;   *
db 0D2h	;   *
db  96h	;   *
db  93h	;   *
db  98h	;   *
db  16h
db  9Ah	;   *
db 0A8h	;   *
db  9Bh	;   *
db  31h	; 1
db  9Dh	;   *
db    1
db  9Fh	;   *
db 0E0h	;   *
db 0A1h	;   *
db  62h	; b
db 0A4h	;   *
db 0FCh	;   *
db 0A6h	;   *
db  44h	; D
db 0A9h	;   *
db 0BCh	;   *
db 0ABh	;   *
db 0A3h	;   *
db 0ADh	;   *
db  48h	; H
db 0AFh	;   *
db  4Eh	; N
db 0B1h	;   *
aC2_20		db 1Bh,'C2'
db    1
aB0_25		db 1Bh,'B0'
db    1
aSC7_15		db '%s,',1Bh,'C7'
db    1
aWeVeFoundC6	db ' we',27h,'ve found',0Ah
db 1Bh,'C6'
db    1
aSC7_16		db '%s',1Bh,'C7'
db    1
db  0Ah
aInTheCapturedC	db 'in the captured castle',0
db  19h
a2d_1		db '2d',0
aDongZhuoSeizes	db 'Dong Zhuo seizes Loyang  ',0
aRivalsStruggle	db 'Rivals struggle for power',0
aAgedLiuBeiHide	db 'Aged Liu Bei hides       ',0
aCaoCaoCovetsCh	db 'Cao Cao covets China     ',0
aNationBreaksIn	db 'Nation breaks in 3 pieces',0
aTheThreeWayCon	db 'The three-way contest    ',0
aCaoCao		db 'Cao Cao',0
aLiuBei		db 'Liu Bei',0
aSunJian	db 'Sun Jian',0
aYuanShao	db 'Yuan Shao',0
aYuanShu	db 'Yuan Shu',0
aMaTeng		db 'Ma Teng',0
aLiuYan		db 'Liu Yan',0
aLiuBiao	db 'Liu Biao',0
aDongZhuo	db 'Dong Zhuo',0
aGongsunZan	db 'Gongsun Zan',0
aTaoQuian	db 'Tao Quian',0
aNewRuler	db 'New Ruler',0
aCaoCao_0	db 'Cao Cao',0
aLiuBei_0	db 'Liu Bei',0
aSunCe		db 'Sun Ce',0
aYuanShao_0	db 'Yuan Shao',0
aYuanShu_0	db 'Yuan Shu',0
aMaTeng_0	db 'Ma Teng',0
aLiuZhang	db 'Liu Zhang',0
aLiuBiao_0	db 'Liu Biao',0
aLuBu		db 'Lu Bu',0
aGongsunZan_0	db 'Gongsun Zan',0
aLiJue		db 'Li Jue',0
aNewRuler_0	db 'New Ruler',0
aCaoCao_1	db 'Cao Cao',0
aLiuBei_1	db 'Liu Bei',0
aSunQuan	db 'Sun Quan',0
aYuanShao_1	db 'Yuan Shao',0
aLiuZhang_0	db 'Liu Zhang',0
aMaTeng_1	db 'Ma Teng',0
aZhangLu	db 'Zhang Lu',0
aLiuBiao_1	db 'Liu Biao',0
aNewRuler_1	db 'New Ruler',0
db    0
db    0
db    0
aCaoCao_2	db 'Cao Cao',0
aLiuBei_2	db 'Liu Bei',0
aSunQuan_0	db 'Sun Quan',0
aMaTeng_2	db 'Ma Teng',0
aLiuZhang_1	db 'Liu Zhang',0
aJinXuan	db 'Jin Xuan',0
aHanXuan	db 'Han Xuan',0
aZhaoFan	db 'Zhao Fan',0
aLiuDu		db 'Liu Du',0
aZhangLu_0	db 'Zhang Lu',0
aNewRuler_2	db 'New Ruler',0
align 2
aCaoCao_3	db 'Cao Cao',0
aLiuBei_3	db 'Liu Bei',0
aSunQuan_1	db 'Sun Quan',0
aMengHuo	db 'Meng Huo',0
aNewRuler_3	db 'New Ruler='
db    4
db 0B2h	;   *
db    0
db    8
db    0
db 0B0h	;   *
aCaoPi		db 'Cao Pi',0
aLiuBei_4	db 'Liu Bei',0
aSunQuan_2	db 'Sun Quan',0
aMengHuo_0	db 'Meng Huo',0
aNewRuler_4	db 'New Ruler*',0
db '  *',0
db 9,0
db 0B0h	;   *
db  4Eh	; N
db  4Ah	; J
db  68h	; h
db  4Ah	; J
db  82h	;   *
db  4Ah	; J
db  9Ch	;   *
db  4Ah	; J
db 0B6h	;   *
db  4Ah	; J
db 0D0h	;   *
db  4Ah	; J
db  0Ch
db  0Ch
db    9
db  0Bh
db    5
db    5
db  12h
db    0
db 0B2h	;   *
db    0
db  1Ch
db    0
db 0B0h	;   *
db 0EAh	;   *
db  4Ah	; J
db 0F2h	;   *
db  4Ah	; J
db 0FAh	;   *
db  4Ah	; J
db    3
db  4Bh	; K
db  0Dh
db  4Bh	; K
db  16h
db  4Bh	; K
db  1Eh
db  4Bh	; K
db  26h	; &
db  4Bh	; K
db  2Fh	; /
db  4Bh	; K
db  39h	; 9
db  4Bh	; K
db  45h	; E
db  4Bh	; K
db  4Fh	; O
db  4Bh	; K
db  59h	; Y
db  4Bh	; K
db  61h	; a
db  4Bh	; K
db  69h	; i
db  4Bh	; K
db  70h	; p
db  4Bh	; K
db  7Ah	; z
db  4Bh	; K
db  83h	;   *
db  4Bh	; K
db  8Bh	;   *
db  4Bh	; K
db  95h	;   *
db  4Bh	; K
db  9Eh	;   *
db  4Bh	; K
db 0A4h	;   *
db  4Bh	; K
db 0B0h	;   *
db  4Bh	; K
db 0B7h	;   *
db  4Bh	; K
db 0C1h	;   *
db  4Bh	; K
db 0C9h	;   *
db  4Bh	; K
db 0D1h	;   *
db  4Bh	; K
db 0DAh	;   *
db  4Bh	; K
db 0E4h	;   *
db  4Bh	; K
db 0EEh	;   *
db  4Bh	; K
db 0F6h	;   *
db  4Bh	; K
db 0FFh
db  4Bh	; K
db    8
db  4Ch	; L
db  12h
db  4Ch	; L
db  13h
db  4Ch	; L
db  14h
db  4Ch	; L
db  15h
db  4Ch	; L
db  1Dh
db  4Ch	; L
db  25h	; %
db  4Ch	; L
db  2Eh	; .
db  4Ch	; L
db  36h	; 6
db  4Ch	; L
db  40h	; @
db  4Ch	; L
db  49h	; I
db  4Ch	; L
db  52h	; R
db  4Ch	; L
db  5Bh	; [
db  4Ch	; L
db  62h	; b
db  4Ch	; L
db  6Bh	; k
db  4Ch	; L
db  75h	; u
db  4Ch	; L
db  76h	; v
db  4Ch	; L
db  7Eh	; ~
db  4Ch	; L
db  86h	;   *
db  4Ch	; L
db  8Fh	;   *
db  4Ch	; L
db  98h	;   *
db  4Ch	; L
db 0A2h	;   *
db  4Ch	; L
db 0A3h	;   *
db  4Ch	; L
db 0A4h	;   *
db  4Ch	; L
db 0A5h	;   *
db  4Ch	; L
db 0A6h	;   *
db  4Ch	; L
db 0A7h	;   *
db  4Ch	; L
db 0A8h	;   *
db  4Ch	; L
db 0A9h	;   *
db  4Ch	; L
db 0B0h	;   *
db  4Ch	; L
db 0B8h	;   *
db  4Ch	; L
db 0C1h	;   *
db  4Ch	; L
db 0CAh	;   *
db  4Ch	; L
db 0D4h	;   *
db  4Ch	; L
db 0D5h	;   *
db  4Ch	; L
db 0D6h	;   *
db  4Ch	; L
db 0D7h	;   *
db  4Ch	; L
db 0D8h	;   *
db  4Ch	; L
db 0D9h	;   *
db  4Ch	; L
db 0DAh	;   *
db  4Ch	; L
aGC6		db 1Bh,'="G',1Bh,'C6'
db    1
a1_scenarioC7	db '1.Scenario: ',1Bh,'C7'
db    1
aD_S		db '%d.%s',0
aC6_8		db 1Bh,'C6'
db    1
aG2_ruler	db 1Bh,'=$G2.Ruler:',0
aC7_24		db 1Bh,'C7'
db    1
aS_5		db '%s  ',0
aC7_25		db 1Bh,'C7'
db    1
aS_6		db '%s  ',0
aC7_26		db 1Bh,'C7'
db    1
aB0_26		db 1Bh,'B0'
db    1
a2d_2		db '%2d',0
aM4C0		db 1Bh,'M4',1Bh,'C0'
db    1
aB0_27		db 1Bh,'B0'
db    1
a2d_3		db '%2d',0
aB7C0		db 1Bh,'B7',1Bh,'C0'
db    1
aS_7		db '%s',0
aB7C0_0		db 1Bh,'B7',1Bh,'C0'
db    1
aSB0C7_0	db '%s',1Bh,'B0',1Bh,'C7'
db    1
db    0
aM0B0		db 1Bh,'M0',1Bh,'B0'
db    1
aS_8		db '%s',0
aM0B0_0		db 1Bh,'M0',1Bh,'B0'
db    1
aSC7_17		db '%s',1Bh,'C7'
db    1
db    0
aB7C0_1		db 1Bh,'B7',1Bh,'C0'
db    1
aS_9		db '%s',0
aC1_4		db 1Bh,'C1'
db    1
aS_10		db '%s',0
aSB0C7_1	db '%s',1Bh,'B0',1Bh,'C7'
db    1
db    0
aReturnWhere	db 'Return where',0
aHowManyPlayers	db 'How many players',0
aPlayerDPlayWho	db 'Player %d, play whom (%d-%d)? ',0
a0ViewNextPag_0	db 0Ah
db '(0: View next page)',0
aB7C0_2		db 1Bh,'B7',1Bh,'C0'
db    1
aD_SB0C4	db '%d. %s ',1Bh,'B0',1Bh,'C4'
db    1
aDA_d_C7	db '%d A.D.',1Bh,'C7'
db    1
db    0
aD_SC4		db '%d. %s ',1Bh,'C4'
db    1
aDA_d_C7_0	db '%d A.D.',1Bh,'C7'
db    1
db    0
db 0BDh	;   *
db 0C2h	;   *
db 0C9h	;   *
db 0D0h	;   *
db 0D7h	;   *
db 0DCh	;   *
db  1Bh
db  3Dh	; =
a3WhichScenario	db '3:Which scenario',0
align 2
db  80h	;   *
db    9
db  95h	;   *
db  0Ah
db  24h	; $
db    1
db 0F5h	;   *
db  0Bh
db  9Ah	;   *
db    1
db 0F5h	;   *
db  0Bh
db 0EEh	;   *
db    1
db 0F5h	;   *
db  0Bh
db  1Bh
db  3Dh	; =
db  29h	; )
db  3Dh	; =
db  1Bh
db  52h	; R
db  3Dh	; =
a1_StartNewGame	db '1. Start new game',0Ah
db 0Ah
db '2. Load data',0Ah
db 0Ah
db '3. Quit game',0
a2?selectWhich	db 1Bh,'=2?Select which',0
a4?areYouSure	db 1Bh,'=4?Are you sure',0
aC7_27		db 1Bh,'C7'
db    1
aPonWithTheGame	db 1Bh,'=,POn with the game...',1Bh,'W',0
align 2
aMale		db 'Male',0
aFemale		db 'Female',0
aInt_1		db 'Int',0
aWar_1		db 'War',0
aChr_1		db 'Chr',0
aEnterMonthBorn	db 'Enter month born',0
align 2
db  6Eh	; n
db  4Fh	; O
db  73h	; s
db  4Fh	; O
db  7Ah	; z
db  4Fh	; O
db  7Eh	; ~
db  4Fh	; O
db  82h	;   *
db  4Fh	; O
db  3Ch	; <
db  50h	; P
db  32h	; 2
db  3Ch	; <
db  37h	; 7
db  4Bh	; K
db  41h	; A
db  4Bh	; K
db  37h	; 7
db  41h	; A
db  32h	; 2
db  50h	; P
db  46h	; F
db  3Ch	; <
db  46h	; F
db  46h	; F
db  2Dh	; -
db  55h	; U
aEnterDayBorn	db 'Enter day born',0
aEnterAge	db 'Enter age',0
aC6_9		db 1Bh,'C6'
db    1
a1_S2_SC7	db '1. %s 2. %s',1Bh,'C7'
db    1
db 0Ah,0
aEnterSex	db 'Enter sex',0
aB7C0_3		db 1Bh,'B7',1Bh,'C0'
db    1
db    0
a3dB0C7		db '%3d',1Bh,'B0',1Bh,'C7'
db    1
db    0
a3dC7		db '%3d',1Bh,'C7'
db    1
db    0
aPleaseSetAbili	db 'Please set abilities.',0Ah
db 0Ah
db ' 4 - 6 : ability selection',0Ah
db ' 8 : plus',0Ah
db ' 2 : minus',0
aEbonusG50	db 1Bh,'=*eBonus',1Bh,'=+g50',0
aB7C0_4		db 1Bh,'B7',1Bh,'C0'
db    1
a3dB0C7_0	db '%3d',1Bh,'B0',1Bh,'C7'
db    1
aG2d		db 1Bh,'=+g%2d',0
aC5_1		db 1Bh,'C5'
db    1
a3dC7_0		db '%3d',1Bh,'C7'
db    1
aG2d_0		db 1Bh,'=+g%2d',0
aIsThis		db 'Is this ',0
aResetAbilities	db 'Reset abilities.',0Ah
db 0Ah
db ' 4 - 6 : ability selection',0Ah
db ' 8 : plus',0Ah
db ' 2 : minus',0
aAddFollower	db 'Add follower',0
a0sage2d	db 1Bh,'=0SAge %2d,',0
aSNone		db 1Bh,'=/S none',0
aRuleWhichProvi	db 'Rule which province',0
aIsEverythingOk	db 'Is everything OK',0
aChangeWhat	db 'Change what',0
aC4_3		db 1Bh,'C4'
db    1
aRNewRulerData	db 1Bh,'="R<New Ruler Data>',0
aC6_10		db 1Bh,'C6'
db    1
aRg1_general2_b	db 1Bh,'RG1.General:',0Ah
db 0Ah
db '2.Birthday:',0Ah
db 0Ah
db '3.Sex:',0Ah
db 0Ah
db '4.Ability:',0Ah
db 0Ah
db 0Ah
db '5.Home:',0Ah
db 0Ah
db '6.Follower:',1Bh,'C7'
db    1
db    0
db    0
aView		db 'View',0
aDonTView	db 'Don',27h,'t view',0
aBeginner	db 'Beginner',0
aMedium		db 'Medium',0
aHard		db 'Hard',0
aHistoryMode	db 'History mode',0
aFictionMode	db 'Fiction mode',0
aC0_26		db 1Bh,'C0'
db    1
aB7_30		db 1Bh,'B7'
db    1
aScenario	db 'Scenario',0
aSetup		db 'Setup',0
aC0_27		db 1Bh,'C0'
db    1
aB7_31		db 1Bh,'B7'
db    1
aMaking		db 'Making',0
aC0_28		db 1Bh,'C0'
db    1
aB7_32		db 1Bh,'B7'
db    1
aRuler		db 'Ruler',0
aB0_28		db 1Bh,'B0'
db    1
aC7_28		db 1Bh,'C7'
db    1
aM0_3		db 1Bh,'M0',0
align 2
db  92h	;   *
db  51h	; Q
db  97h	;   *
db  51h	; Q
db 0A2h	;   *
db  51h	; Q
db 0ABh	;   *
db  51h	; Q
db 0B2h	;   *
db  51h	; Q
db 0B7h	;   *
db  51h	; Q
db 0C4h	;   *
db  51h	; Q
aEverything	db 'Everything ',0
aC6_11		db 1Bh,'C6'
db    1
a3_gameLevelC7	db '3.Game level: ',1Bh,'C7'
db    1
aS_11		db '%s',0
aC6_12		db 1Bh,'C6'
db    1
a1_S2_S3_SC7	db '1.%s 2.%s 3.%s',1Bh,'C7'
db    1
db  0Ah
db    0
aSelectGameLeve	db 'Select game level',0
aC6_13		db 1Bh,'C6'
db    1
a4_otherProvinc	db '4.Other provinces',27h,' wars: ',1Bh,'C7'
db    1
aS_12		db '%s',0
aViewOtherProvi	db 'View other provinces',27h,' wars',0
aC6_14		db 1Bh,'C6'
db    1
a5_gameModeC7	db '5.Game mode: ',1Bh,'C7'
db    1
aS_13		db '%s',0
aC6_15		db 1Bh,'C6'
db    1
a1_S2_SC7_0	db '1.%s 2.%s',1Bh,'C7'
db    1
db  0Ah
db    0
aSelectGameMode	db 'Select game mode',0
db    0
db    2
db    1
db    3
db    6
db    4
db    5
db    9
db 0FFh
db    0
db    2
db    1
db    3
db    6
db    4
db    5
db    9
db 0FFh
db    0
db    2
db    1
db    3
db    4
db    5
db 0FFh
db 0FFh
db 0FFh
db    0
db    2
db    1
db    4
db    3
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    2
db    1
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    2
db    1
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db  16h
db    6
db 0B2h	;   *
db    0
db  1Ch
db    0
db 0B0h	;   *
db  5Fh	; _
db    0
db  5Fh	; _
db    0
aC4_4		db 1Bh,'C4'
db    1
aCC7_0		db '%c',1Bh,'C7'
db    1
db    0
db  5Fh	; _
db    0
aC4_5		db 1Bh,'C4'
db    1
aCC7_1		db '%c',1Bh,'C7'
db    1
db    0
aGeneral_1	db 'General',0
aFollower	db 'Follower',0
aChooseSName_	db 'Choose %s name.',0
aIsThis_0	db 'Is this ',0
aEbonusG2d	db 1Bh,'=*eBonus',1Bh,'=+g%2d',0
a4sRsSSS3d5d5d	db 1Bh,'=4S',1Bh,'RS%s  %s  %s',0Ah
db '%3d%5d%5d',0
aNone		db 'none',0
aSS_2		db 1Bh,'=&S%s',0
aWD		db 1Bh,'=&W%d',0
aAge2d		db 1Bh,'=&]Age %2d',0
aSS_1		db 1Bh,'=(S%s',0
aS2d		db 1Bh,'=-S%2d',0
db    0
aR9reinsertGame	db 1Bh,'R=',1Bh,'=+9Reinsert game Disk A into drive ',1Bh,'C2A',1Bh,'C7',0Ah
db 0Ah,0
aPressAnyKeyToC	db 'Press any key to continue',0
aWrongDiskW_0	db 'Wrong Disk',7,1Bh,'W',0
aC2_21		db 1Bh,'C2'
db    1
aWrongDiskC7_1	db 'Wrong Disk',1Bh,'C7'
db    1
db    7
aW_4		db 1Bh,'W',0
aR?InsertYourSa	db 1Bh,'R?',1Bh,'=+=Insert your save game',0Ah
db 'disk into drive ',1Bh,'C2A',1Bh,'C7',0
aRPressAnyKeyTo	db 1Bh,'R<',0Ah
db 0Ah
db 'Press any key to continue',0
aRPleaseEnterFu	db 1Bh,'R>',1Bh,'=+<Please enter full path',0Ah
db 'name of saved data:',0
aC2_22		db 1Bh,'C2'
db    1
aSC7_18		db '%s',1Bh,'C7'
db    1
aCouldNotBeOpen	db 1Bh,'=-=Could not be opened! ',0
aC2_23		db 1Bh,'=->',1Bh,'C2'
db    1
aSaveHeaderErro	db 'Save header error! ',7,1Bh,'C7'
db    1
db    0
aNeededText	db ' < Needed Text >',0
db  0Ah
aNeededText_0	db ' < Needed Text >',0
db    0
aGovernor	db 'governor',0
aGeneral_2	db 'general',0
aC2_24		db 1Bh,'C2'             ; Changed: Province %d: C6 %s's C7 %s C2 %s C7 has died
db    1
aSC7_19		db '%s',1Bh,'C7'
db    1
aProvince2dSSC6	db ', Province %2d',27h,'s',0Ah
db '%s',0Ah
db 1Bh,'C6'
db    1
aSC7_20		db ' %s',1Bh,'C7'
db    1
aHasDied	db 'has died',0
aC3_4		db 1Bh,'C3'
db    1
aProvinceDIsNow	db 'Province %d is now empty',0
aAStarHasFallen	db 'A star has fallen from the sky...',0Ah,0
aBringingAnEvil	db 'bringing an evil omen to ',1Bh,'C2'
db    1
aSC7_21		db '%s',1Bh,'C7'
db    1
db    0
db    0
db    0
db    0
db  10h
db  40h	; @
db  1Fh
db 0ADh	;   *
db    2
db 0B2h	;   *
db    0
db  0Fh
db    0
db 0B0h	;   *
db 0BFh	;   *
db    0
db  6Ah	; j
db    0
db 0C7h	;   *
db    0
db  6Dh	; m
db    0
db 0C9h	;   *
db    0
db    3
db    0
db 0CEh	;   *
db    0
db  10h
db    0
db 0D1h	;   *
db    0
db  4Ah	; J
db    0
db 0D3h	;   *
db    0
db  58h	; X
db    0
db 0D5h	;   *
db    0
db  59h	; Y
db    0
db 0DAh	;   *
db    0
db 0A4h	;   *
db    0
db 0E9h	;   *
db    0
db  4Dh	; M
db    0
aC2_25		db 1Bh,'C2'
db    1
aSC7_22		db '%s',1Bh,'C7'
db    1
aC6_16		db ', ',1Bh,'C6'
db    1
aSC7_23		db '%s',1Bh,'C7'
db    1
aHasDied_0	db 'has died',0
aC2_26		db 1Bh,'C2'
db    1
aSC7_24		db '%s,',1Bh,'C7'
db    1
aC6_17		db ' ',1Bh,'C6'
db    1
aSC7_25		db '%s',0Ah
db 1Bh,'C7'
db    1
aHasJoinedYourF	db 'has joined your followers',0Ah
db 'in Province %2d',0
aC2_27		db 1Bh,'C2'
db    1
aSC7_26		db '%s',1Bh,'C7'
db    1
aWangYunHasBrou	db ', Wang Yun has brought a',0Ah
db 'beautiful woman named Diao Chan',0
aC7_29		db 0Ah
db 1Bh,'C7'
db    1
aYouCanMeetDiao	db 'You can meet Diao Chan using',1Bh,'C6'
db    1
aCommand18	db ' command 18',0
aC2_28		db 1Bh,'C2'
db    1
aSC7_27		db '%s,',1Bh,'C7'
db    1
aProvince2dSC3	db ' Province %2d',27h,'s',0Ah
db 1Bh,'C3'
db    1
aSC7_28		db '%s',1Bh,'C7'
db    1
aHasLeftUsToBec	db ' has left us to',0Ah
db 'become a free general',0
aSomeoneTricked	db 'Someone tricked ',1Bh,'C3'
db    1
aSC7_29		db '%s',0Ah
db 1Bh,'C7'
db    1
aOfProvince2dIn	db 'of Province %2d into rising up',0Ah
db 'against ',1Bh,'C2'
db    1
aS_14		db '%s!',0Ah,0
aC3_5		db 1Bh,'C3'
db    1
aSC7_30		db '%s ',1Bh,'C7'
db    1
aOfProvince2dHa	db 'of Province %2d has',0Ah
db 'started a rebellion!',0Ah,0
aC2_29		db 1Bh,'C2'
db    1
aSC7_31		db '%s ',1Bh,'C7'
db    1
aHasOverthrownT	db 'has overthrown the',0Ah
db 'ruler and taken power',0
db    0
db  1Fh
db    0
db  10h
db  98h	;   *
db  3Ah	; :
db    3
db 0FEh	;   *
db    1
db 0B2h	;   *
db    0
db  0Eh
db    0
db 0B0h	;   *
aC2_30		db 1Bh,'C2'
db    1
aThePeopleAreRi	db 'The people are rioting!',0
align 4
db 0FFh
db    0
db    0
db 0FFh
db    0
db 0FFh
db    0
db    0
db 0FFh
db    0
db  55h	; U
db 0FFh
db 0FFh
db    0
db 0FFh
db 0FFh
db 0FFh
db    0
db 0FFh
db 0FFh
db    0
db 0FFh
db 0FFh
db 0DDh	;   *
db 0FFh
db 0FFh
db  77h	; w
db 0FFh
aC6_18		db 1Bh,'C6'
db    1
aEpidemicIsSpre	db 'Epidemic is spreading!',0
aC2_31		db 1Bh,'C2'
db    1
aLocustsHaveEat	db 'Locusts have eaten everything in sight!',0
aC5_2		db 1Bh,'C5'
db    1
aATyphoonHasCau	db 'A typhoon has caused great destruction!',0
aC5_3		db 1Bh,'C5'
db    1
aATerribleFlood	db 'A terrible flood has ruined homes',0Ah
db 'and fields throughout the land!',0
align 2
db    5
db    6
db    7
db    9
db  0Ah
db  0Bh
db  0Dh
db  14h
db  17h
db  18h
db  1Ah
db  1Bh
db  1Eh
db  1Fh
db  20h
db  21h	; !
aC2_32		db 1Bh,'C2'
db    1
db  41h	; A
aTerribleLocust	db ' terrible locust plague',0Ah
db 'has hit Province %d!',0
aC6_19		db 1Bh,'C6'
db    1
aEpidemicHasBro	db 'Epidemic has broken out in',0Ah
db 'Province %d!',0
db    5
db    0
db  1Fh
db  1Dh
db    0
db  0Ah
db  68h	; h
db    1
db 0B2h	;   *
db    0
db  16h
db    0
db 0B0h	;   *
db  94h	;   *
db    9
db 0A7h	;   *
db  0Eh
db 0FEh	;   *
db    9
db 0A7h	;   *
db  0Eh
db  28h	; (
db    8
db 0A7h	;   *
db  0Eh
db 0DCh	;   *
db    8
db 0A7h	;   *
db  0Eh
db  10h
db    0
db 0B2h	;   *
db    0
db  5Eh	; ^
db    0
db 0B0h	;   *
db  10h
db    1
db 0C1h	;   *
db  14h
db  90h	;   *
db    3
db 0E2h	;   *
db  14h
db 0E4h	;   *
db    3
db  21h	; !
db  15h
db  62h	; b
db    5
db  78h	; x
db  15h
db  7Eh	; ~
db  0Bh
db 0D1h	;   *
db  15h
db  32h	; 2
db  0Ch
db  94h	;   *
db  16h
db    4
db  10h
db  65h	; e
db  17h
db    4
db    0
db  6Ch	; l
db  18h
db  0Eh
db    1
db  78h	; x
db  18h
db  0Ch
db    1
db  8Ch	;   *
db  18h
db 0D0h	;   *
db    3
db 0A0h	;   *
db  18h
db    6
db    0
db 0E6h	;   *
db  18h
db  32h	; 2
db    4
db 0FAh	;   *
db  18h
db  3Eh	; >
db    1
db  49h	; I
db  19h
db 0D2h	;   *
db    6
db  63h	; c
db  19h
db  88h	;   *
db    2
db 0D9h	;   *
db  19h
db  58h	; X
db    2
db  14h
db  1Ah
db  22h	; "
db  0Eh
db  47h	; G
db  1Ah
db  20h
db    3
db  31h	; 1
db  1Bh
db  64h	; d
db    8
db  72h	; r
db  1Bh
db  1Bh
db  4Dh	; M
db  30h	; 0
aRulerInExileSN	db 'Ruler-in-exile %s',0Ah
db 'now plotting strategy',0
aThisMonthSOrde	db 0Ah
db 'This month',27h,'s orders complete',0
aB7_33		db 1Bh,'B7'
db    1
aC0_29		db 1Bh,'C0'
db    1
a3dB0		db '%3d',1Bh,'B0'
db    1
aC7_30		db 1Bh,'C7'
db    1
aM0_4		db 1Bh,'M0',0
aSYourOrdersFor	db '%s, your orders for',0Ah
db 'Province %d (%d-%d)? ',0
aM0SPlottingStr	db 1Bh,'M0%s plotting strategy.',0
align 2
aMC6		db 1Bh,'=(M',1Bh,'C6'
db    1
db  23h	; #
aRuler_0	db '    Ruler'
db    6
db    1
db 0B2h	;   *
db  20h
db    8
db    0
db 0B0h	;   *
aHosTru		db 'Hos  Tru',0
aPC6_0		db 1Bh,'=(P',1Bh,'C6'
db    1
aRuler_1	db '#  Ruler'
db  19h
db    0
db 0B2h	;   *
db  20h
db    8
db    0
db 0B0h	;   *
aHosTru_0	db 'Hos  Tru',0
aC7_31		db 1Bh,'C7'
db    1
a2dM0CD		db '%2d',1Bh,'M0',1Bh,'C%d'
db    1
db    0
aM4C0_0		db 1Bh,'M4',1Bh,'C0'
db    1
a2dM0CD_0	db '%2d',1Bh,'M0',1Bh,'C%d'
db    1
db    0
a12sC7		db '%-12s',1Bh,'C7'
db    1
a4d4d		db '%4d %4d',0
aNoNegotiationP	db 'No negotiation partners',0
a4f0ViewNextPag	db 1Bh,'=4F(0: View next page)',1Bh,'=3F',0
a4f0ViewNextP_0	db 1Bh,'=4F(0: View next page)',1Bh,'=3F',0
aC2_33		db 1Bh,'C2'
db    1
aSC7_32		db '%s,',1Bh,'C7'
db    1
aC4_6		db ' ',1Bh,'C4'
db    1
aSC7_33		db '%s',1Bh,'C7'
db    1
aHasBrokenYourA	db ' has',0Ah
db 'broken your alliance',0
aHeEscaped	db 'He escaped!',0
aC6_20		db 1Bh,'C6'
db    1
aSC7_34		db '%s',1Bh,'C7'
db    1
aWasCapturedByC	db ' was',0Ah
db 'captured by ',1Bh,'C2'
db    1
aSC7_35		db '%s!',1Bh,'C7'
db    1
db    0
aC2_34		db 1Bh,'C2'
db    1
aSC7_36		db '%s,',1Bh,'C7'
db    1
aC6_21		db ' ',1Bh,'C6'
db    1
aSC7_37		db '%s',1Bh,'C7'
db    1
aOfProvince2d_0	db ' of',0Ah
db 'Province %2d has brought',0Ah
db 1Bh,'C6'
db    1
aDGoldC7	db '%d gold',1Bh,'C7'
db    1
aAndC6		db ' and ',1Bh,'C6'
db    1
aLuFoodC7	db '%lu food',1Bh,'C7'
db    1
db    0
aC2_35		db 1Bh,'C2'
db    1
aSC7_38		db '%s ',1Bh,'C7'
db    1
aHasUnwiselyBro	db 'has unwisely',0Ah
db 'brought a false letter',0
db  48h	; H
db    5
db  30h	; 0
db  11h
db 0E4h	;   *
db    4
db  30h	; 0
db  11h
db  7Eh	; ~
db    4
db  30h	; 0
db  11h
aSendWhomAsRein	db 'Send whom as reinforcements',0
aSendWhomAsJoin	db 'Send whom as joint',0Ah
db 'invasion forces',0
align 2
db 0A2h	;   *
db  5Ch	; \
db 0BEh	;   *
db  5Ch	; \
db    4
db    5
db    0
db    0
db    0
db    0
db  50h	; P
db    0
db    2
db    0
db    0
db  11h
db  70h	; p
db    0
db    0
db  72h	; r
db    0
db    0
db  81h	;   *
db    0
db    0
db  40h	; @
db  80h	;   *
db 0DEh	;   *
db    1
db 0B2h	;   *
db    0
db  0Ch
db    0
db 0B0h	;   *
db  10h
db  70h	; p
db    0
db  1Ch
db  20h
db    0
db  3Eh	; >
db  50h	; P
db    0
db  7Fh	; 
db 0DCh	;   *
db    0
db  67h	; g
db 0DCh	;   *
db    0
db    7
db 0ECh	;   *
db    0
db    6
db  0Ch
db    0
db    6
db  0Ch
db  17h
db    0
db 0B2h	;   *
db    0
db    8
db    0
db 0B0h	;   *
db  60h	; `
db    0
db    2
db  20h
db    0
db  11h
db  60h	; `
db    0
db    0
db  62h	; b
db    0
db    0
db 0C1h	;   *
db    0
db    0
db  60h	; `
db  80h	;   *
db  11h
db    0
db 0B2h	;   *
db    0
db  0Dh
db    0
db 0B0h	;   *
db  0Ah
db    0
db    0
db    0
db  40h	; @
db    0
db  0Eh
db  88h	;   *
db    0
db  4Eh	; N
db    0
db    0
db  81h	;   *
db    0
db    1
db    2
db  10h
db    0
db 0B2h	;   *
db    0
db  0Eh
db    0
db 0B0h	;   *
db  0Eh
db    8
db    0
db    4
db  38h	; 8
db    0
db  0Ah
db  7Ch	; |
db    0
db  3Bh	; ;
db 0FEh	;   *
db    0
db  3Bh	; ;
db 0E6h	;   *
db    0
db  37h	; 7
db 0E0h	;   *
db    0
db  30h	; 0
db  60h	; `
db    0
db  30h	; 0
db  60h	; `
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    6
db    0
db    0
db    4
db  40h	; @
db    0
db    6
db  88h	;   *
db    0
db  46h	; F
db    0
db    0
db  83h	;   *
db    0
db    1
db    6
db  2Eh	; .
db    0
db 0B2h	;   *
db    0
db  0Ah
db    0
db 0B0h	;   *
db  30h	; 0
db  70h	; p
db    0
db  3Eh	; >
db 0F8h	;   *
db    0
db  3Fh	; ?
db  70h	; p
db    0
db  7Fh	; 
db 0FEh	;   *
db    0
db 0FFh
db 0FFh
db    0
db 0FFh
db 0FFh
db  80h	;   *
db 0EFh	;   *
db 0FFh
db 0C0h	;   *
db  0Fh
db 0FEh	;   *
db 0C0h	;   *
db  0Fh
db  1Eh
db    0
db  0Eh
db  0Eh
db    0
db    0
db  0Eh
db  0Ch
db    0
db  1Fh
db  7Ch	; |
db    0
db  0Eh
db 0FCh	;   *
db    0
db  7Fh	; 
db 0FEh	;   *
db    0
db 0FFh
db 0FFh
db    1
db 0FFh
db 0FFh
db    3
db 0FFh
db 0F7h	;   *
db    3
db  7Fh	; 
db 0F0h	;   *
db    0
db  78h	; x
db 0F0h	;   *
db    0
db  70h	; p
db  70h	; p
db    0
db    1
db    2
db    1
db    2
db    0
db    1
db    2
db    1
db    1
db    1
db    2
db  48h	; H
db    0
db 0B2h	;   *
db    0
db  78h	; x
db    0
db 0B0h	;   *
aC3_6		db 1Bh,'C3'
db    1
db  0Ah
db    0
aC6_22		db 1Bh,'C6'
db    1
aSC7_39		db '%s',1Bh,'C7'
db    1
aWasSeenPlottin	db ' was seen',0Ah
db 'plotting with ',1Bh,'C2'
db    1
aSSC7_2		db '%s',27h,'s',0Ah
db 1Bh,'C7'
db    1
aMessenger___	db 'messenger...',0
aASecretLetterT	db 'A secret letter to',1Bh,'C6'
db    1
aSC7_40		db ' %s',1Bh,'C7'
db    1
aFromC2		db 0Ah
db 'from',1Bh,'C2'
db    1
aSC7_41		db ' %s',1Bh,'C7'
db    1
aHasArrived_	db ' has arrived.',0
db    0
aBUNotHomeProvi	db 'b^  *^Not home province',0
aNoOneCanDoThat	db 'No one can do that now',0
aNotEnoughGold	db 'Not enough gold  *',0
db '  * ',8,0
db '  *',0
aC6_23		db 1Bh,'C6'
db    1
a2d_C1		db '%2d.',1Bh,'C1'
db    1
aS_15		db '%s',0
aC6_24		db 1Bh,'C6'
db    1
a2d_C7		db '%2d.',1Bh,'C7'
db    1
aS_16		db '%s',0
aRest		db 'Rest',0
aMove_0		db 'Move',0
aSend		db 'Send',0
aWar_2		db 'War',0
aMilit		db 'Milit',0
aPerson		db 'Person',0
aDiplom		db 'Diplom',0
aSpy		db 'Spy',0
aView_0		db 'View',0
aCultiv		db 'Cultiv',0
aFlood		db 'Flood',0
aReward		db 'Reward',0
aGive		db 'Give',0
aMerch		db 'Merch',0
aTax		db 'Tax',0
aMap		db 'Map',0
aDeleg		db 'Deleg',0
aExile		db 'Exile',0
aAdvice		db 'Advice',0
aOther		db 'Other',0
aC6_25		db 1Bh,'C6'
db    1
a2d_C1_0	db '%2d.',1Bh,'C1'
db    1
aS_17		db '%s',0
aC6_26		db 1Bh,'C6'
db    1
a2d_C1_1	db '%2d.',1Bh,'C1'
db    1
aS_18		db '%s',0
aC6_27		db 1Bh,'C6'
db    1
a2d_C1_2	db '%2d.',1Bh,'C1'
db    1
aS_19		db '%s',0
aC6_28		db 1Bh,'C6'
db    1
a2d_C1_3	db '%2d.',1Bh,'C1'
db    1
aS_20		db '%s',0
aC6_29		db 1Bh,'C6'
db    1
a2d_C1_4	db '%2d.',1Bh,'C1'
db    1
aS_21		db '%s',0
db  3Dh	; =
db  5Fh	; _
db  42h	; B
db  5Fh	; _
db  47h	; G
db  5Fh	; _
db  4Ch	; L
db  5Fh	; _
db  50h	; P
db  5Fh	; _
db  56h	; V
db  5Fh	; _
db  5Dh	; ]
db  5Fh	; _
db  64h	; d
db  5Fh	; _
db  68h	; h
db  5Fh	; _
db  6Dh	; m
db  5Fh	; _
db  74h	; t
db  5Fh	; _
db  7Ah	; z
db  5Fh	; _
db  81h	;   *
db  5Fh	; _
db  86h	;   *
db  5Fh	; _
db  8Ch	;   *
db  5Fh	; _
db  90h	;   *
db  5Fh	; _
db  94h	;   *
db  5Fh	; _
db  9Ah	;   *
db  5Fh	; _
db 0A0h	;   *
db  5Fh	; _
db 0A7h	;   *
db  5Fh	; _
aC0_30		db 1Bh,'C0'
db    1
aB7_34		db 1Bh,'B7'
db    1
aRs_0		db 1Bh,'RS',0
aC7_32		db 1Bh,'C7'
db    1
aB0_29		db 1Bh,'B0'
db    1
db    0
aPtravelerS	db 1Bh,'=)PTraveler: %s',0
aPdoctorS	db 1Bh,'=)PDoctor: %s',0
aPadvisorS	db 1Bh,'=)PAdvisor: %s',0
aReadTheLetterB	db ' read the letter',0Ah
db 'but let it pass through.',0
aReadTheLette_0	db ' read the',0Ah
db 'letter but let it pass',0Ah
db 'through.',0
aSeizedTheSecre	db ' seized the',0Ah
db 'secret letter and',0Ah
db 'exposed our plot!',0
aSeizedTheSec_0	db ' seized',0Ah
db 'the secret letter!',0
aAlmostImprison	db ' almost imprisoned',0Ah
db 'our messenger!',0
aAlmostImpris_0	db ' almost',0Ah
db 'imprisoned our messenger!',0
aTheEnemyAlmost	db 'The enemy almost captured our ruler!',0
aC5_4		db 1Bh,'C5'
db    1
aPopC7		db 'Pop',1Bh,'C7'
db    1
a6d00C6		db '%6d00  ',1Bh,'C6'
db    1
aGoldC7_0	db 'Gold',1Bh,'C7'
db    1
a8uC4		db '%8u  ',1Bh,'C4'
db    1
aLoyC7		db 'Loy',1Bh,'C7'
db    1
a6d_0		db '%6d',0
aC5_6		db 1Bh,'C5'
db    1
aMenC7_0	db 'Men',1Bh,'C7'
db    1
a8luC6		db '%8lu  ',1Bh,'C6'
db    1
aFoodC7_0	db 'Food',1Bh,'C7'
db    1
a8luC4		db '%8lu  ',1Bh,'C4'
db    1
aLandC7		db 'Land',1Bh,'C7'
db    1
a5d_2		db '%5d',0
aC3_7		db 1Bh,'C3'
db    1
aGeneralsC7_0	db 'Generals',1Bh,'C7'
db    1
a3dC6		db '%3d  ',1Bh,'C6'
db    1
aRateC7		db 'Rate ',1Bh,'C7'
db    1
a7dC4		db '%7d  ',1Bh,'C4'
db    1
aFloodC7	db 'Flood',1Bh,'C7'
db    1
a4d_1		db '%4d',0
aC3_8		db 1Bh,'C3'
db    1
aFreeGenC7	db 'Free gen',1Bh,'C7'
db    1
a3dC6_0		db '%3d  ',1Bh,'C6'
db    1
aHorsesC7	db 'Horses',1Bh,'C7'
db    1
a6dC4_2		db '%6d  ',1Bh,'C4'
db    1
aFortsC7	db 'Forts',1Bh,'C7'
db    1
a4d_2		db '%4d',0
aRiB7C0		db 1Bh,'RI',1Bh,'B7',1Bh,'C0'
db    1
a2d_S_0		db '%2d. %s',0
aEmpty		db ' (empty)',0
aC2_36		db 1Bh,'C2'
db    1
aRulerC0	db 0Ah
db 'Ruler: ',1Bh,'C0'
db    1
aS_22		db '%s',0Ah,0
aTrust3d	db 'Trust: %3d',0Ah,0
aC1_5		db 1Bh,'C1'
db    1
aGovernorC0	db 'Governor: ',1Bh,'C0'
db    1
aS_23		db '%s',0
aC3_9		db 0Ah
db 1Bh,'C3'
db    1
aAdvisorC0	db 'Advisor: ',1Bh,'C0'
db    1
aS_24		db '%s',0
aM0B0_1		db 1Bh,'M0',1Bh,'B0'
db    1
aC7_33		db 1Bh,'C7'
db    1
db    0
aSendMessenger	db 'Send messenger',0
align 2
aBb		db '  *b  *',0
aG		db 'g',0
aHjmlj:
unicode	0, <hjml  *>
aM4M0		db 1Bh,'M4*',1Bh,'M0',0
aNoRulerCanCarr	db 'No ruler can carry out this trick',0
a4f0ViewNextP_1	db 1Bh,'=4F(0: View next page)',1Bh,'=3F',0
db  44h	; D
db  6Fh	; o
aThisToWhomAndW	db ' this to whom and whom',0
align 2
aC5_5		db 1Bh,'C5'
db    1
a1_Intellect4_M	db '1. Intellect      4. Men',0Ah
db '2. War ability    5. Loyalty',0Ah
db '3. Charm',1Bh,'C7'
db    1
db  0Ah
aListAccordingT	db 'List according to which data',0
aRul		db 'Rul',0
aGov		db 'Gov',0
aAdv		db 'Adv',0
aAct		db 'Act',0
aFree_0		db 'Free',0
aOC2		db 1Bh,'=)O',1Bh,'C2'
db    1
db    0
aNone_0		db 'none',0
aMarrS		db '(Marr: %s)',0
aRuler_2	db 'Ruler',0
aC3_10		db 1Bh,'C3'
db    1
aFree_1		db 'Free',0
aSSC7_3		db '%s',27h,'s',1Bh,'C7'
db    1
aCohort		db ' cohort',0
aC7_34		db 1Bh,'C7'
db    1
a12s_1		db '%-12s',0
aORoC5		db 1Bh,'=+O',1Bh,'RO',1Bh,'C5'
db    1
aArmTrnMenC7	db 'Arm',0Ah
db 0Ah
db 'Trn',0Ah
db 0Ah
db 'Men',1Bh,'C7'
db    1
aTRt5d5d5dRC6	db 1Bh,'=+T',1Bh,'RT%5d',0Ah
db 0Ah
db '%5d',0Ah
db 0Ah
db '%5d',1Bh,'=+[',1Bh,'R[',1Bh,'C6'
db    1
aRnkSerAgeC7	db 'Rnk',0Ah
db 0Ah
db 'Ser',0Ah
db 0Ah
db 'Age',1Bh,'C7'
db    1
a_R_		db 1Bh,'=+_',1Bh,'R_',0
db  20h
db  2Dh	; -
db  2Dh	; -
db  2Dh	; -
db  0Ah
db  0Ah
db ' ---',0
db  20h
aS3d		db '%s',0Ah
db 0Ah
db '%3d',0
db  0Ah
db  0Ah
a4dEReC4	db '%4d',1Bh,'=)e',1Bh,'Re',1Bh,'C4'
db    1
aLoyIntWarChrC7	db 'Loy  ',0Ah
db 0Ah
db 'Int  ',0Ah
db 0Ah
db 'War  ',0Ah
db 0Ah
db 'Chr',1Bh,'C7'
db    1
aJRj		db 1Bh,'=)j',1Bh,'Rj',0
db ' ---',0
a4d_3		db '%4d',0
db  0Ah
db  0Ah
a4d4d4d		db '%4d',0Ah
db 0Ah
db '%4d',0Ah
db 0Ah
db '%4d',0
db  98h	;   *
db  63h	; c
db  9Ch	;   *
db  63h	; c
db 0A0h	;   *
db  63h	; c
db 0A4h	;   *
db  63h	; c
db 0A8h	;   *
db  63h	; c
aViewWhom	db 'View whom',0
db  68h	; h
db  20h
db  28h	; (
db  28h	; (
db  20h
db  68h	; h
db  20h
db  20h
db  20h
db  30h	; 0
db  60h	; `
db  28h	; (
db  38h	; 8
db  38h	; 8
aRank		db ' Rank',0
aC1_6		db 1Bh,'C1'
db    1
aGeneral_3	db 'General',0
aC2_37		db 1Bh,'C2'
db    1
aLoy_1		db 'Loy',0
aC3_11		db 1Bh,'C3'
db    1
aInt_2		db 'Int',0
aWar_3		db 'War',0
aChr_2		db 'Chr',0
aC0_31		db 1Bh,'C0'
db    1
aMen_1		db 'Men',0
aRank_0		db 'Rank',0
aC1_7		db 1Bh,'C1'
db    1
aGeneral_4	db 'General',0
aC2_38		db 1Bh,'C2'
db    1
aSer		db 'Ser',0
aC3_12		db 1Bh,'C3'
db    1
aTrn_0		db 'Trn',0
aArm		db 'Arm',0
aWeap_0		db 'Weap',0
aC0_32		db 1Bh,'C0'
db    1
aMen_2		db 'Men',0
db ' # ',0
aC1_8		db 1Bh,'C1'
db    1
aGovernor_0	db 'Governor',0
aC4_7		db 1Bh,'C4'
db    1
aGold		db 'Gold',0
aFood		db 'Food',0
aC2_39		db 1Bh,'C2'
db    1
aMen_3		db 'Men',0
aC4_8		db 1Bh,'C4'
db    1
aLoy_2		db 'Loy',0
aC3_13		db 1Bh,'C3'
db    1
aGen		db 'Gen',0
aB7_35		db 1Bh,'B7'
db    1
aC0_33		db 1Bh,'C0'
db    1
db    0
aB0_30		db 1Bh,'B0'
db    1
aC7_35		db 1Bh,'C7'
db    1
db    0
db    0
db 0C7h	;   *
db  64h	; d
db 0CCh	;   *
db  64h	; d
db 0D8h	;   *
db  64h	; d
db 0E0h	;   *
db  64h	; d
db 0E8h	;   *
db  64h	; d
db 0ECh	;   *
db  64h	; d
db 0F0h	;   *
db  64h	; d
db 0F8h	;   *
db  64h	; d
db 0FDh	;   *
db  64h	; d
db    9
db  65h	; e
db  11h
db  65h	; e
db  19h
db  65h	; e
db  1Dh
db  65h	; e
db  22h	; "
db  65h	; e
db  2Ah	; *
db  65h	; e
db  2Eh	; .
db  65h	; e
db  3Bh	; ;
db  65h	; e
db  44h	; D
db  65h	; e
db  49h	; I
db  65h	; e
db  51h	; Q
db  65h	; e
db  59h	; Y
db  65h	; e
db  25h	; %
db    0
db  2Ch	; ,
db    0
db  37h	; 7
db    0
db  3Ch	; <
db    0
db  41h	; A
db    0
db  45h	; E
db    0
db  4Ah	; J
db    0
db  25h	; %
db    0
db  2Ch	; ,
db    0
db  37h	; 7
db    0
db  3Bh	; ;
db    0
db  3Fh	; ?
db    0
db  44h	; D
db    0
db  4Ah	; J
db    0
db  25h	; %
db    0
db  2Ah	; *
db    0
db  34h	; 4
db    0
db  3Ah	; :
db    0
db  42h	; B
db    0
db  47h	; G
db    0
db  4Bh	; K
db    0
aCD		db 1Bh,'C%d'
db    1
a2d_4		db '%2d',0
aC2_40		db 1Bh,'C2'
db    1
aAtWarC7	db ' At War',1Bh,'C7'
db    1
db 0C2h	;   *
db    6
db 0B2h	;   *
db  20h
db    8
db    0
db 0B0h	;   *
db  2Dh	; -
db  2Dh	; -
db  2Dh	; -
db  20h
db  20h
db  2Dh	; -
db  2Dh	; -
db  2Dh	; -
db  2Dh	; -
db  2Dh	; -
db  20h
db  20h
db  2Dh	; -
db  2Dh	; -
db  2Dh	; -
db  2Dh	; -
db  2Dh	; -
db  20h
db  2Dh	; -
db  2Dh	; -
db  20h
db  20h
db  20h
db  2Dh	; -
db    0
db  20h
db  25h	; %
db  2Dh	; -
db  31h	; 1
db  32h	; 2
db  73h	; s
db  25h	; %
db  35h	; 5
db  75h	; u
db  25h	; %
db  37h	; 7
db  6Ch	; l
db  75h	; u
db  25h	; %
db  37h	; 7
db  6Ch	; l
db  75h	; u
db  25h	; %
db  33h	; 3
db  75h	; u
db  20h
db  25h	; %
db  33h	; 3
db  75h	; u
aC7_36		db 1Bh,'C7'
db    1
db    0
aViewNext	db 'View next',0
aC2_41		db 1Bh,'C2'
db    1
aRul_0		db 'Rul',0
aC5_7		db 1Bh,'C5'
db    1
aGov_0		db 'Gov',0
aC4_9		db 1Bh,'C4'
db    1
aAdv_0		db 'Adv',0
aAct_0		db 'Act',0
aC3_14		db 1Bh,'C3'
db    1
aFree_2		db 'Free',0
a4s		db '%-4s',0
aCD_0		db 1Bh,'C%d'
db    1
a12sC7_0	db '%-12s ',1Bh,'C7'
db    1
db    0
db '--- ',0
a3d_3		db '%3d ',0
a4d4d3d		db '%4d %4d %3d ',0
a3d3d5d		db '%3d %3d %5d ',0
a5d_3		db '%5d',0
aViewNext_0	db 'View next',0
db  28h	; (
db  66h	; f
db  30h	; 0
db  66h	; f
db  38h	; 8
db  66h	; f
db  40h	; @
db  66h	; f
db  44h	; D
db  66h	; f
aC1def		db 1Bh,'C1Def',0
aC1rnf		db 1Bh,'C1Rnf',0
aC2att		db 1Bh,'C2Att',0
aC2jnt		db 1Bh,'C2Jnt',0
aC2_42		db 1Bh,'C2'
db    1
aAtWar		db 'At War',0
aC2_43		db 1Bh,'C2'
db    1
aRulerC3	db 'Ruler    ',1Bh,'C3'
db    1
aGenC5		db 'Gen   ',1Bh,'C5'
db    1
aMenC6		db 'Men',1Bh,'C6'
db    1
aGoldFoodC7	db '   Gold   Food',1Bh,'C7'
db    1
db    0
a4sC712s2d6lu	db '%4s  ',1Bh,'C7%-12s %2d %6lu',0Ah,0
a5d7lu		db '%5d %7lu',0
db    0
db  9Eh	;   *
db  66h	; f
db 0A5h	;   *
db  66h	; f
db 0ACh	;   *
db  66h	; f
db 0B3h	;   *
db  66h	; f
db  2Dh	; -
db  2Dh	; -
db  2Dh	; -
db    0
db  30h	; 0
db    1
db  64h	; d
db    1
db  9Ch	;   *
db    1
db 0C4h	;   *
db    1
db    4
db    2
db  34h	; 4
db    2
db  6Fh	; o
db    2
db  58h	; X
db    0
db  60h	; `
db    0
db  70h	; p
db    0
db  78h	; x
db    0
db  80h	;   *
db    0
db  88h	;   *
db    0
aRiB7C0_0	db 1Bh,'RI',1Bh,'B7',1Bh,'C0'
db    1
a2d_S_1		db '%2d. %s',0
aC2_44		db 1Bh,'C2'
db    1
db  0Ah
aRulerC0_0	db 'Ruler: ',1Bh,'C0'
db    1
aS_25		db '%s',0Ah,0
aTrust3dC7	db 'Trust: %3d',1Bh,'C7'
db    1
db  0Ah
db    0
aC1_9		db 1Bh,'C1'
db    1
aGovernorC0_0	db 'Governor: ',1Bh,'C0'
db    1
aS_26		db '%s',0
db  0Ah
aC3_15		db 1Bh,'C3'
db    1
aAdvisorC0_0	db 'Advisor: ',1Bh,'C0'
db    1
aS_27		db '%s',0
aB0_31		db 1Bh,'B0'
db    1
aC7_37		db 1Bh,'C7'
db    1
aM0_5		db 1Bh,'M0',0
aC7_38		db 1Bh,'C7'
db    1
aViewAnotherPro	db 'View another province',0
aFull		db 'Full',0
aIntnl		db 'Intnl',0
aMilit_0	db 'Milit',0
aPers		db 'Pers',0
aB7_36		db 1Bh,'B7'
db    1
aC3_16		db 1Bh,'C3'
db    1
aSelfRuleC0	db 'Self rule: ',1Bh,'C0'
db    1
db    0
aC7_39		db 1Bh,'C7'
db    1
aB0_32		db 1Bh,'B0'
db    1
db    0
aC6_30		db 1Bh,'C6'
db    1
a1_OtherProvinc	db '1. Other provinces  4. Summary 2',0Ah
db '2. GeneralsG'
db    2
db 0B2h	;   *
db  20h
db    9
db    0
db 0B0h	;   *
db  35h	; 5
db  2Eh	; .
aDataOrder3_Sum	db ' Data order',0Ah
db '3. Summary 1',0Ah
db 1Bh,'C7'
db    1
aViewWhat	db 'View what',0
db    0
db 0C8h	;   *
db  67h	; g
db 0CDh	;   *
db  67h	; g
db 0D3h	;   *
db  67h	; g
db 0D9h	;   *
db  67h	; g
aWhoWillSpy	db 'Who will spy',0
aWhichProvince	db 'Which province',0
aPleaseReinsert	db 'Please reinsert game Disk A into drive ',1Bh,'C2A',1Bh,'C7',0
db  0Ah
aHitAnyKeyToCon	db 0Ah
db 'Hit any key to continue',0Ah
db 0Ah,0
aWrongDiskW_2	db 'Wrong Disk',7,1Bh,'W',0
aC2_45		db 1Bh,'C2'
db    1
aWrongDiskC7_2	db 'Wrong Disk',1Bh,'C7'
db    1
db    7
aW_5		db 1Bh,'W',0
aInsertYourSave	db 'Insert your save game disk into drive ',1Bh,'C2A',1Bh,'C7',0
db  0Ah
aHitAnyKeyToC_0	db 'Hit any key to continue',0
aPleaseEnterFul	db 'Please enter full pathname',0Ah
db 'for save game data:',0
a3freplaceExist	db 1Bh,'=3FReplace existing file',0
aC2_46		db 1Bh,'C2'
db    1
aCouldNotCreate	db 'Could not create %s! ',1Bh,'C7'
db    1
db    0
db    0
aMoveWhom	db 'Move whom',0
aTakeHowMuchGol	db 0Ah
db 'Take how much gold',0
aTakeHowMuchFoo	db 0Ah
db 'Take how much food (0-%lu)? ',0
aAbandonThisPro	db 0Ah
db 'Abandon this province',0
aMoveWhere	db 'Move where',0
aTheGoodsArrive	db 'The goods arrived safely',0
aTheGoodsWereDe	db 'The goods were',0Ah
db 'delivered safely',0
aTheGoodsWereSt	db 'The goods were stolen',0Ah
db 'by ',0
aTheGoodsWere_0	db 'The goods were stolen',0Ah
db 'by ',0
aMountainBandit	db 'mountain bandits',0
aSGoons		db 27h,'s goons',0
aMountainBand_0	db 'mountain bandits',0
aSGoons_0	db 27h,'s goons',0
aSendHowMuchGol	db 0Ah
db 'Send how much gold',0
aSendHowMuchFoo	db 0Ah
db 'Send how much food? (0-%lu) ',0
aSendGoods	db 0Ah
db 'Send goods',0
aSendWhere_0	db 'Send where',0
aWhoWillSupervi	db 'Who will supervise',0
aCanTSendGoods	db 'Can',27h,'t send goods',0
a1d_12s6d	db '%1d.%-12s%6d',0
aC2_47		db 1Bh,'=*[',1Bh,'C2'
db    1
aTargetC7	db 'Target: ',1Bh,'C7'
db    1
a2d_5		db '%2d',0
aC2_48		db 1Bh,'=+[',1Bh,'C2'
db    1
aRulerC7_0	db 'Ruler:  ',1Bh,'C7'
db    1
a12s_2		db '%-12s',0
aC5_8		db 1Bh,'=,[',1Bh,'C5'
db    1
aMenC7_1	db 'Men:    ',1Bh,'C7'
db    1
aU		db '%u',0
aSendWhom_0	db 'Send whom',0
aWhoWillCommand	db 'Who will command',0
aC2_49		db 1Bh,'C2'
db    1
a12sC7_1	db '%-12s',1Bh,'C7'
db    1
db    0
aBringHowMuchGo	db 'Bring how much gold ',0
align 2
aC6_31		db 1Bh,'=-[',1Bh,'C6'
db    1
aGoldC7_1	db 'Gold:   ',1Bh,'C7'
db    1
aD		db '%d',0
aBringHowMuchFo	db 'Bring how much food (0-%lu)?',0Ah
db '(Need %u for 1 month) ',0
a_C6		db 1Bh,'=.[',1Bh,'C6'
db    1
aFoodC7_1	db 'Food:   ',1Bh,'C7'
db    1
aLu		db '%lu',0
aSendReinforcem	db 'Send reinforcements',0
aInvade		db 'Invade',0
aC4_10		db 0Ah
db 1Bh,'C4'
db    1
aSSArmyC7	db '%s',27h,'s army',1Bh,'C7'
db    1
aMayInvadeWithU	db ' may',0Ah
db 'invade with us',0
aC4neighboringE	db 1Bh,'C4Neighboring enemy provinces:',0Ah,0
aC6D		db 1Bh,'C6%d ',0
aNone_1		db '<None>',0
db  0Ah
aC7invadeWhichP	db 0Ah
db 1Bh,'C7Invade which province? ',0
aCanTInvadeThat	db 'Can',27h,'t invade that province this month.',0
aWeWillSeizeThe	db 'We will seize the',0Ah
db 'advantage in war',0
aTheMenHaveDril	db 'The men have',0Ah
db 'drilled enough',0
db    0
db 0BCh	;   *
db  6Ch	; l
db 0DFh	;   *
db  6Ch	; l
aWhoWillTrainTh	db 'Who will train the men',0
aStartTraining	db 'Start training',0
aC6_32		db 0Ah
db 1Bh,'C6'
db    1
aSkillHasImprov	db 'Skill has improved.',0
aC3_17		db 0Ah
db 1Bh,'C3'
db    1
aSkillDidNotImp	db 'Skill did not improve.',0
aAssignHowManyM	db 0Ah
db 'Assign how many men',0
aC5_9		db 1Bh,'C5'
db    1
aRemainingMenLu	db 'Remaining men:%lu',0Ah
db 1Bh,'C7'
db    1
db    0
aChangeWhom	db 'Change whom',0
db 0Ah,0
aC7_40		db 0Ah
db 1Bh,'C7'
db    1
aSendHomeLuMen	db 'Send home %lu men ',0
aC7_41		db 1Bh,'C7'
db    1
db    0
aWhoWillReassig	db 'Who will reassign',0
aWhoWillHireMen	db 'Who will hire men',0
aHireHowMany100	db 0Ah
db 'Hire how many 100s of men',0
aNotEnoughFood	db 'Not enough food',0
aCanTHireMoreMe	db 'Can',27h,'t hire more men',0
aC5_10		db 1Bh,'C5'
db    1
a1_hire2_reassi	db '1.Hire',0Ah
db '2.Reassign',0Ah
db '3.Train',1Bh,'C7'
db    1
aChooseWhich	db 0Ah
db 'Choose which',0
db    8
db    5
db  78h	; x
db  15h
db  64h	; d
db    3
db  78h	; x
db  15h
db  28h	; (
db    0
db  78h	; x
db  15h
aIDoubtWeLlFind	db 'I doubt we',27h,'ll find',0Ah
db 'anyone good',0
aWeNeedAFewGood	db 'We need a few good men',0
aHeWillNotEasil	db 'He will not',0Ah
db 'easily join us',0
aHeShouldBeHono	db 'He should be',0Ah
db 'honored...',0
aC7_42		db 1Bh,'C7'
db    1
aPS		db 1Bh,'=,P%s',0
aP12sM0		db 1Bh,'=-P%-12s',1Bh,'M0',0
db    0
db  54h	; T
db  6Eh	; n
db  73h	; s
db  6Eh	; n
db  8Ah	;   *
db  6Eh	; n
db 0A5h	;   *
db  6Eh	; n
aDismissWhom	db 'Dismiss whom',0
aDismissC3	db 0Ah
db 'Dismiss ',1Bh,'C3'
db    1
aSC7_42		db '%s',1Bh,'C7'
db    1
db    0
aC3_18		db 0Ah
db 1Bh,'C3'
db    1
aSHasBeenDismis	db '%s has been dismissed',1Bh,'C7'
db    1
db    0
aNoAdvisor	db 'No advisor',0
aRemoveC4	db 'Remove ',1Bh,'C4'
db    1
aSC7_43		db '%s',1Bh,'C7'
db    1
aFromAdvisorPos	db ' from',0Ah
db 'advisor position',0
aSIsNoLongerAdv	db 0Ah
db '%s is no',0Ah
db 'longer advisor',0
aWhichProvinceS	db 'Which province',27h,'s generals',0
aC6_33		db 1Bh,'C6'
db    1
a1_General2_Adv	db '1. General',0Ah
db '2. Advisor',1Bh,'C7'
db    1
aDismissWhich	db 0Ah
db 'Dismiss which',0
db    4
db    2
db 0D1h	;   *
db  15h
db  96h	;   *
db    1
db 0D1h	;   *
db  15h
aAppointAsGover	db 'Appoint as governor',0
aAppointAsAdvis	db 'Appoint as advisor',0
aHeCanTBecomeAd	db 'He can',27h,'t become advisor',0
aC6_34		db 1Bh,'C6'
db    1
aHeIsAlreadyAdv	db 'He is already advisor',0
aGovernor_1	db 'governor',0
aAdvisor	db 'advisor',0
aC6_35		db 0Ah
db 1Bh,'C6'
db    1
aSC7_44		db '%s',1Bh,'C7'
db    1
aIsNowS		db ' is now %s',0
aB7_37		db 1Bh,'B7'
db    1
aC3_19		db 1Bh,'C3'
db    1
aAdvisorC0_1	db 'Advisor:',1Bh,'C0'
db    1
aSB0		db ' %s',1Bh,'B0'
db    1
aM0_6		db 1Bh,'M0',0
aCannotAppoint	db 'Cannot appoint',0
aC6_36		db 1Bh,'C6'
db    1
a1_Governor2_Ad	db '1. Governor',0Ah
db '2. Advisor',0Ah
db 1Bh,'C7'
db    1
aAppointWhich	db 'Appoint which',0
aNoOtherProvinc	db 'No other provinces',0
aWhichProvinc_0	db 'Which province',0
aNowC4		db 'Now ',1Bh,'C4'
db    1
aSC7_45		db '%s',1Bh,'C7'
db    1
aIsAdvisor	db ' is advisor',0Ah,0
aAdvisorPositio	db 'Advisor position now empty',0Ah,0
aWhichProvinc_1	db 'Which province',27h,'s generals',0
aSuccess	db 'Success! ',0
aHasJoinedOurFo	db ' has',0Ah
db 'joined our followers',0
aHasJoinedOur_0	db ' has',0Ah
db 'joined our followers',0
aDoesNotCareToJ	db ' does not care to join us',0
aDoesNotCareT_0	db ' does not',0Ah
db 'care to join us',0
aWhoWillSearch	db 'Who will search',0
aSearch		db 'Search',0
aIsNearby	db ' is nearby',0
aIsNearby_0	db ' is nearby',0
aWeFoundNoProsp	db 'We found no prospects',0
aWeFoundNoPro_0	db 'We found no prospects',0
aC6_37		db 1Bh,'C6'
db    1
a1_specialVisit	db '1.Special Visit  3.Gold',0Ah
db '2.Horse  *',9,'  * ',0Ah,0
a4_letterC7	db '  *4.Letter',0Ah
db 1Bh,'C7'
db    1
aWhichMethod	db 'Which method',0
aNoHorses	db 'No horses',0
aRecruit	db 'Recruit',0
db ' ',0
aSendWhomAsMess	db 'Send whom as messenger',0
aWhichProvinc_2	db 'Which province',27h,'s generals',0
aNoFreeGenerals	db 'No free generals',0
aNoGeneralsToRe	db 'No generals to recruit',0
aC1_10		db 1Bh,'C1'
db    1
a1_recruit3_app	db '1.Recruit   3.Appoint',0Ah
db '2.Search    4.Dismiss',1Bh,'C7'
db    1
aSelectWhich	db 0Ah
db 'Select which',0
aC5_11		db 1Bh,'C5'
db    1
a1_recruitC13_a	db '1.Recruit   ',1Bh,'C13.Appoint',0Ah
db 1Bh,'C52.Search    ',1Bh,'C14.Dismiss',1Bh,'C7'
db    1
aSelectWhich_0	db 0Ah
db 'Select which',0
aC1_11		db 1Bh,'C1'
db    1
a1_recruitC53_a	db '1.Recruit   ',1Bh,'C53.Appoint',0Ah
db 1Bh,'C12.Search    ',1Bh,'C54.Dismiss',1Bh,'C7'
db    1
aSelectWhich_1	db 0Ah
db 'Select which',0
aC5_12		db 1Bh,'C5'
db    1
a1_recruit3_a_0	db '1.Recruit   3.Appoint',0Ah
db '2.Search    4.Dismiss',1Bh,'C7'
db    1
aSelectWhich_2	db 0Ah
db 'Select which',0
align 2
db  58h	; X
db  0Ah
db 0D1h	;   *
db  15h
db 0D0h	;   *
db    7
db 0D1h	;   *
db  15h
db  1Ah
db    4
db 0D1h	;   *
db  15h
db 0C2h	;   *
db    2
db 0D1h	;   *
db  15h
aTheyWonTSubmit	db 'They won',27h,'t submit ',0Ah
db 'so easily.',0
aThisWillAvertS	db 'This will avert',0Ah
db 'senseless bloodshed.',0
aARefusalWouldD	db 'A refusal would',0Ah
db 'disgrace us.',0
aThisMarriageWo	db 'This marriage would',0Ah
db 'cement things nicely.',0
aTheyLlProbably	db 'They',27h,'ll probably',0Ah
db 'refuse.',0
aThisIsOurBestC	db 'This is our best',0Ah
db 'chance for victory.',0
aThisAllianceIs	db 'This alliance is',0Ah
db 'doomed to failure.',0
aThisAlliance_0	db 'This alliance is',0Ah
db 'bound to succeed.',0
aSendWhomAsMe_1	db 'Send whom as messenger',0
db 0ACh	;   *
db  73h	; s
db 0CAh	;   *
db  73h	; s
db 0EFh	;   *
db  73h	; s
db  0Ch
db  74h	; t
db  36h	; 6
db  74h	; t
db  4Fh	; O
db  74h	; t
db  74h	; t
db  74h	; t
db  98h	;   *
db  74h	; t
aWellDone	db 'Well done! ',0
aWellDone_0	db 'Well done! ',0
aHasSubmittedTo	db 0Ah
db 'has submitted to us!',0
aScornedOurAtte	db ' scorned our',0Ah
db 'attempt to scare him',0
aScornedOurAt_0	db ' scorned our',0Ah
db 'attempt to scare him',0
aThreatenWhom	db 'Threaten whom',0
aCanTThreatenHi	db 'Can',27h,'t threaten him. ',0
aWhichRuler	db 'Which ruler',0
aYourAllianceWi	db 0Ah
db 'Your alliance with ',1Bh,'C2'
db    1
aSC7_46		db '%s',1Bh,'C7'
db    1
aIsBroken	db 0Ah
db 'is broken',0
aOfferHowMuch_0	db 0Ah
db 'Offer how much gold',0
aSuccess_0	db 'Success! ',0
aAcceptedOurTri	db ' accepted',0Ah
db 'our tribute gift',0
aOurGiftArrived	db 'Our gift arrived safely',0Ah,0
aWasPleased	db ' was pleased',0
aDaredToRefuseO	db ' dared to refuse our',0Ah
db 'tribute gift',0
aRefusedOurTrib	db ' refused',0Ah
db 'our tribute gift',0
aOfferGoldToWho	db 'Offer gold to whom',0
aIsDelightedToM	db ' is delighted',0Ah
db 'to marry your daughter',0
aCongratulati_0	db 'Congratulations on your',0Ah
db 'daughter',27h,'s marriage!',0
aIsNotAMarrying	db ' is not a',0Ah
db 'marrying man',0
aSaidHeWasFlatt	db ' said',0Ah
db 'he was flattered, but...',0
aYouHaveNoDaugh	db 'You have no daughters',0
aYourDaughterIs	db 'Your daughter is already married',0
aOfferYourDaugh	db 'Offer your daughter to whom',0
aHasAgreedToAJo	db ' has agreed to a',0Ah
db 'joint invasion',0
aAgreedToInvade	db ' agreed to ',0Ah
db 'invade with us',0
aRejectedOurJoi	db ' rejected our joint',0Ah
db 'invasion plan',0
aItSAPityBut	db 'It',27h,'s a pity, but ',0
aRefusesToInvad	db 0Ah
db 'refuses to invade with us',0
aC4neighborin_0	db 1Bh,'C4Neighboring enemy provinces:',0Ah
db 1Bh,'C6',0
aD_0		db '%d ',0
aNone_2		db '<None>',0
aC7invadeWhic_0	db 0Ah
db 0Ah
db 1Bh,'C7Invade which province? ',0
aWeVeAlreadyPro	db 'We',27h,'ve already promised to invade',0Ah
db 'Province ',1Bh,'C6'
db    1
a2dC7		db '%2d',1Bh,'C7'
db    1
aWithC4		db ' with ',1Bh,'C4'
db    1
aSC7_47		db '%s',1Bh,'C7'
db    1
aShouldWeCancel	db 0Ah
db 'Should we cancel',0
aPlanJointInvas	db 'Plan joint invasion with whom',0
aSuccess_1	db 'Success! ',0
aHasAgreedToAll	db ' has agreed',0Ah
db 'to ally with us',0
aHurrayWeHaveSe	db 'Hurray! We have sealed',0Ah
db 'the alliance',0
align 2
aRefusesToAllyW	db ' refuses to ally',0Ah
db 'with us',0
aRefusesToAll_0	db ' refuses to',0Ah
db 'ally with us',0
aAllyWithWhom	db 'Ally with whom',0
aC1_12		db 1Bh,'C1'
db    1
a1_Alliance	db '1. Alliance'
db  1Eh
db    7
db 0B2h	;   *
db  20h
db    8
db    0
db 0B0h	;   *
db  1Bh
db  43h	; C
db  35h	; 5
db  34h	; 4
db  2Eh	; .
aGiftC12_JointI	db ' Gift',0Ah
db 1Bh,'C1',9,9,'2. Joint invasion  5. Cancel alliance',0Ah
db 9,9,'3. MarriageC',0
db '  * ',8,0
db 0B0h	;   *
db  36h	; 6
db  2Eh	; .
db  20h
aThreatenC7	db 'Threaten',1Bh,'C7'
db    1
aSelectWhich_3	db 0Ah
db 'Select which',0
aC1_13		db 1Bh,'C1'
db    1
a1_Alliance_0	db '1. Alliance,',0
db '  * ',8,0
db 0B0h	;   *
a4_Gift2_Join_0	db '4. Gift',0Ah
db 9,9,9,'2. Joint invasion  ',1Bh,'C55. Cancel alliance',0Ah
db 1Bh,'C1',9,9,9,'3. MarriageE',0
db '  * ',8,0
db 0B0h	;   *
db  36h	; 6
db  2Eh	; .
db  20h
aThreatenC7_0	db 'Threaten',1Bh,'C7'
db    1
db  0Ah
aSelectWhich_4	db 'Select which',0
aC5_13		db 1Bh,'C5'
db    1
a1_Alliance_1	db '1. Alliance,',0
db '  * ',8,0
db 0B0h	;   *
a4_Gift2_JointI	db '4. Gift',0Ah
db 9,9,9,'2. Joint invasion  5. Cancel alliance',0Ah
db 9,9,9,1Bh,'C13. MarriageB',0
db '  * ',8,0
db 0B0h	;   *
db  1Bh
aC56_ThreatenC7	db 'C56. Threaten',1Bh,'C7'
db    1
aSelectWhich_5	db 0Ah
db 'Select which',0
aC5_14		db 1Bh,'C5'
db    1
a1_Alliance_2	db '1. Alliance/',0
db '  * ',8,0
db 0B0h	;   *
a4_Gift2_Join_1	db '4. Gift',0Ah
db 9,9,9,'2. Joint invasion  5. Cancel alliance',0Ah
db 9,9,9,'3. Marriage?',0
db '  * ',8,0
db 0B0h	;   *
a6_ThreatenC7	db '6. Threaten',1Bh,'C7'
db    1
aSelectWhich_6	db 0Ah
db 'Select which',0
align 2
db 0D4h	;   *
db  0Bh
db  94h	;   *
db  16h
db 0BCh	;   *
db    9
db  94h	;   *
db  16h
db 0AEh	;   *
db    5
db  94h	;   *
db  16h
db 0E8h	;   *
db    3
db  94h	;   *
db  16h
db 0ECh	;   *
db    1
db  94h	;   *
db  16h
db  6Ch	; l
db    1
db  94h	;   *
db  16h
; aThinkAgain_(int)
aThinkAgain___i	db 'Think again...I',0Ah
db 'doubt it will succeed',0
aAnInterestingP	db 'An interesting plan...',0Ah
db 'let',27h,'s try it and see',0
aItSAShameButIt	db 'It',27h,'s a shame but',0Ah
db 'it can',27h,'t go well',0
aBoldPlan___war	db 'Bold plan...war will',0Ah
db 'go well for us',0
aImpossible___t	db 'Impossible...there',27h,'s no',0Ah
db 'way it can succeed',0
aCleverPlan___h	db 'Clever plan...he',0Ah
db 'will surely revolt',0
aStopNow___iFea	db 'Stop now...I fear',0Ah
db 'this will end badly',0
aTheyWillSurely	db 'They will surely',0Ah
db 'fall for our plot',0
aHiddenGenerals	db 'Hidden generals where',0
aWhichProvinc_3	db 'Which province',27h,'s generals',0
aNoHiddenGenera	db 'No hidden generals in that province',0
aNoFollowersInT	db 'No followers in that province',0
aSendWhomAsMe_0	db 'Send whom as messenger',0
align 2
db  22h	; "
db  7Bh	; {
db  48h	; H
db  7Bh	; {
db  74h	; t
db  7Bh	; {
db  96h	;   *
db  7Bh	; {
db 0BAh	;   *
db  7Bh	; {
db 0E5h	;   *
db  7Bh	; {
db    9
db  7Ch	; |
db  2Fh	; /
db  7Ch	; |
db  52h	; R
db  7Ch	; |
db  68h	; h
db  7Ch	; |
db  82h	;   *
db  7Ch	; |
db 0A6h	;   *
db  7Ch	; |
aHasBegunToDist	db ' has begun to',0Ah
db 'distrust ',0
db    0
db    0
aFailure	db 'Failure! ',0
aIHaveNoExcuse_	db 'I have no excuse...',0Ah,0
aWeWereDetected	db 'We were detected',0
aSendFalseLette	db 'Send false letter to whom',0
aSuccess_2	db 'Success! ',0
aWillSwitchSide	db ' will',0Ah
db 'switch sides without fail.',0
aHaHaHa		db 'Ha ha ha! ',0
aWillSwitchToOu	db ' will',0Ah
db 'switch to our side.',0
aFailure_0	db 'Failure! ',0
aPromptlyRefuse	db ' promptly refused.',0
aIsALoyalMan_He	db ' is a loyal',0Ah
db 'man. He promptly refused',0Ah
db 'us.',0
aInviteWhom	db 'Invite whom',0
aSuccess_3	db 'Success! ',0
aWillStartARevo	db ' will start a revolt',0
aWillStartARe_0	db 0Ah
db 'will start a revolt',0
aFailure_1	db 'Failure! ',0
aFailure_2	db 'Failure! ',0
aTurnedUsDown	db 0Ah
db 'turned us down',0
aTurnedUsDown_0	db 0Ah
db 'turned us down',0
aApproachWhichP	db 'Approach which province',27h,'s',0Ah
db 'governor',0
aP6sM0		db 1Bh,'=-P%-6s',1Bh,'M0',0
aS_28		db '%s ',0
aHurrayThoseFoo	db 'Hurray! Those fools',0Ah
db 'will surely start a war!',0
aWeSucceededBut	db 'We succeeded, but don',27h,'t',0Ah
db 'raise your hopes too high.',0
aThoseFoolsAreH	db 'Those fools are',0Ah
db 'headed for war!',0
aWeSucceededB_0	db 'We succeeded, but',0Ah
db 'I have my doubts...',0
aTheEnemySuspec	db 'The enemy suspects us',0Ah
db 'If only we had gotten a bit further...',0
aWeWereSeenThro	db 'We were seen through',0Ah
db 'It was a total failure!',0
aTheEnemySusp_0	db 'The enemy suspects us',0Ah
db 'Our chances are slim.',0
aIWasSeenThroug	db 'I was seen through',0Ah
db 'I failed my mission.',0
aSuccess_4	db 'Success! ',0
aWasCaughtByOur	db 0Ah
db 'was caught by our plan!',0
aSuccess_5	db 'Success! ',0
aWasCaughtByO_0	db 0Ah
db 'was caught by our plan!',0
aSawThroughOurR	db ' saw through',0Ah
db 'our ruse.',0
align 4
aSendWhomToS	db ' Send whom to %s',0
aWithdrawWhom	db 'Withdraw whom',0
aWeCalledBackC6	db ' We called back ',0Ah
db 1Bh,'C6'
db    1
aSC7_48		db '%s',1Bh,'C7'
db    1
db    0
aHeIsTrustworth	db 'He is trustworthy',0
aDonTWorryHeSTr	db 'Don',27h,'t worry, he',27h,'s',0Ah
db 'trustworthy',0
aItSTerrible	db 'It',27h,'s terrible, ',0
aLeftUsForTheEn	db ' left us',0Ah
db 'for the enemy',0
aJoinedTheEnemy	db 0Ah
db 'joined the enemy',0
aVerifyWhom	db 'Verify whom',0
aWhoWillHide	db 'Who will hide',0
aHideThisGenera	db 0Ah
db 'Hide this general?',0
aC3_20		db 0Ah
db 1Bh,'C3'
db    1
aSC7_49		db '%s',1Bh,'C7'
db    1
aDesertedAndFle	db ' deserted and fled',0
aHeMustHaveBeen	db 0Ah
db 'He must have been a hidden enemy general!',0
aC6_38		db 0Ah
db 1Bh,'C6'
db    1
aWellHidden_	db 'Well hidden.',0
aHideWhere	db 'Hide where',0
aC1_14		db 1Bh,'C1'
db    1
a1_Hide2_Verify	db '1. Hide 2. Verify ',1Bh,'C53. Withdraw',1Bh,'C7'
db    1
aSelectWhich_7	db 0Ah
db 'Select which',0
aC5_15		db 1Bh,'C5'
db    1
a1_Hide2_Veri_0	db '1. Hide 2. Verify 3. Withdraw',1Bh,'C7'
db    1
aSelectWhich_8	db 0Ah
db 'Select which',0
align 2
db 0A0h	;   *
db  0Fh
db  65h	; e
db  17h
db  9Eh	;   *
db  0Dh
db  65h	; e
db  17h
db  24h	; $
db  0Ch
db  65h	; e
db  17h
db  1Bh
db  43h	; C
db  35h	; 5
db    1
a1_InfiltrateC1	db '1. Infiltrate     ',1Bh,'C14. Betrayal    ',0Ah
db '2. Rival tigers   5. Forged letter',0Ah
db 9,9,'3. Tiger and wolf',1Bh,'C7'
db    1
db  0Ah
aWhichTactic	db 'Which tactic',0
aC5_16		db 1Bh,'C5'
db    1
a1_Infiltrate4_	db '1. Infiltrate     4. Betrayal    ',0Ah
db 1Bh,'C12. Rival tigers   ',1Bh,'C55. Forged letter',0Ah
db 9,9,'3. Tiger and wolf',1Bh,'C7'
db    1
aWhichTactic_0	db 0Ah
db 'Which tactic',0
aC5_17		db 1Bh,'C5'
db    1
a1_Infiltrate_0	db '1. Infiltrate     4. Betrayal    ',0Ah
db '2. Rival tigers   5. Forged letter',0Ah
db 9,9,'3. Tiger and wolf',1Bh,'C7'
db    1
aWhichTactic_1	db 0Ah
db 'Which tactic',0
align 2
db 0C4h	;   *
db  0Fh
db  65h	; e
db  17h
db  52h	; R
db  0Ah
db  65h	; e
db  17h
db  0Eh
db    6
db  65h	; e
db  17h
db  74h	; t
db    4
db  65h	; e
db  17h
db  46h	; F
db    2
db  65h	; e
db  17h
db  1Bh
db  43h	; C
db  35h	; 5
db    1
a1_otherProvinc	db '1.Other provinces 4.Summary 2',0Ah
db 9,9,'2.Generals  *',8,'  * ',8,0
db 0B0h	;   *
a5_territory3_s	db '5.Territory',0Ah
db '3.Summary 1       6.Data order',1Bh,'C7'
db    1
db  0Ah
aViewWhat8	db 'View what8',0
db '  *',0
aT		db 'T',0
db 0B0h	;   *
aRichHarvestsBr	db 'Rich harvests bring',0Ah
db 'rich tax collections.',0
aWithThatYouCan	db 'With that you can',27h,'t',0Ah
db 'hope for results, but...',0
aWhoWillDevelop	db 'Who will develop land',0
db  0Ah
aUseHowMuchGold	db 'Use how much gold',0
aDevelopLand	db 'Develop land',0
aC6_39		db 0Ah
db 1Bh,'C6'
db    1
aLandValueHasIn	db 'Land value has increased to %d',0
db  0Ah
aC3_21		db 1Bh,'C3'
db    1
aOurEffortsHadN	db 'Our efforts had no effect',0
a0dzdnoGold	db '0  *Z  *No gold!',0
align 2
aDamsWillProtec	db 'Dams will protect',0Ah
db 'against flood damage.',0
aThisPlanWonTWo	db 'This plan won',27h,'t work!',0Ah
db 'Change your thinking.',0
aWhoWillSuper_0	db 'Who will supervise',0
db  0Ah
aUseHowMuchGo_0	db 'Use how much gold',0
aImproveFloodCo	db 'Improve flood control',0
db  0Ah
aC6_40		db 1Bh,'C6'
db    1
aFloodControlNo	db 'Flood control now %d.',0
db  0Ah
aC3_22		db 1Bh,'C3'
db    1
aOurEffortsFail	db 'Our efforts failed.',0
db  0Eh
db  85h	;   *
db  36h	; 6
db  85h	;   *
aNoGold		db 'No gold!',0
align 2
aTheMoreHeLearn	db 'The more he learns, the',0Ah
db 'better advice he',27h,'ll give.',0
aYouCanTHopeFor	db 'You can',27h,'t hope',0Ah
db 'for more improvement.',0
aGraduallyYouWi	db 'Gradually you will win',0Ah
db 'his loyalty.',0
aThatWillNotEar	db 'That will not earn',0Ah
db 'his loyalty.',0
aFailed		db ' failed!',0
db 0E0h	;   *
db  85h	;   *
db  12h
db  86h	;   *
db  37h	; 7
db  86h	;   *
db  5Bh	; [
db  86h	;   *
aWorked		db ' worked!',0
aGiveWritingsTo	db 'Give writings to whom',0
aGiveWritings	db 'Give writings',0
aC6_41		db 1Bh,'C6'
db    1
aSSIntellectHas	db 0Ah
db '%s',27h,'s intellect has risen',0
aC3_23		db 1Bh,'C3'
db    1
aRewardHadNoEff	db 0Ah
db 'Reward had no effect',0
aC6_42		db 1Bh,'C6'
db    1
aSSLoyaltyNowD	db 0Ah
db '%s',27h,'s loyalty now %d',0
aC3_24		db 1Bh,'C3'
db    1
aSSLoyaltyDid_0	db 0Ah
db '%s',27h,'s loyalty did not change',0
aGiveHorseToWho	db 'Give horse to whom',0
aGiveHorse	db 'Give horse',0
aGiveGoldToWhom	db 'Give gold to whom',0
aGiveHowMuchGol	db 'Give how much gold',0
aGiveGold	db 'Give gold',0
aC1_15		db 1Bh,'C1'
db    1
aD_S_0		db '%d.%s',0Ah,0
aC6_43		db 1Bh,'C6'
db    1
aD_S_1		db '%d.%s',0Ah,0
aGold_0		db 'Gold',0
aHorse		db 'Horse',0
aWritings	db 'Writings',0
aC7_43		db 1Bh,'C7'
db    1
aGiveWhat	db 'Give what',0
aNoHorses_0	db 'No horses!',0
aNoAdvisorHere	db 'No advisor here!',0
db  8Eh	;   *
db  87h	;   *
db  93h	;   *
db  87h	;   *
db  99h	;   *
db  87h	;   *
aNoGeneralsTo_0	db 'No generals to reward!',0
align 2
aLoyalPeopleWon	db 'Loyal people',0Ah
db 'won',27h,'t rebel.',0
aThePeopleWillC	db 'The people',0Ah
db 'will celebrate!',0
aThePeopleWillS	db 'The people will swear',0Ah
db 'loyalty to you.',0
aThisWillNotWin	db 'This will not win ',0Ah
db 'the people',27h,'s hearts.',0
aNoFood		db 'No food!',0
aWhoWillGive	db 'Who will give',0
aGiveHowMuchFoo	db 0Ah
db 'Give how much food',0
aGive_0		db 'Give',0
aC6_44		db 1Bh,'C6'
db    1
aPeopleSLoyalty	db 0Ah
db 'People',27h,'s loyalty is now %d.',0
aC3_25		db 1Bh,'C3'
db    1
aPeopleSLoyal_0	db 0Ah
db 'People',27h,'s loyalty did not change.',0
db 0EAh	;   *
db  87h	;   *
db    4
db  88h	;   *
db  1Fh
db  88h	;   *
db  45h	; E
db  88h	;   *
aCanTBuyMoreWea	db 'Can',27h,'t buy more weapons',0
aBuyHowMany100s	db 0Ah
db 'Buy how many 100s of weapons',0
aC6_46		db 0Ah
db 1Bh,'C6'
db    1
aSSWeaponsNowDA	db '%s',27h,'s weapons now %d',0Ah
db 'Arms level now %d',0
aBuyHowManyHors	db 'Buy how many horses',0
aC6_45		db 0Ah
db 1Bh,'C6'
db    1
aYouNowHaveDHor	db 'You now have %d horses',1Bh,'C7'
db    1
db    0
a6d_1		db '%6d',0
a3d_4		db '%3d',0
aC6_47		db 0Ah
db 1Bh,'C6'
db    1
aGoldNowUFoodNo	db 'Gold now:%u    Food now:%lu',1Bh,'C7'
db    1
db    0
a6d_2		db '%6d',0
a8lu		db '%8lu',0
aBuyHowMuchFood	db 'Buy how much food? (1-%lu) ',0
aSellHowMuchFoo	db 'Sell how much food? (%lu-%lu) ',0
aCanTSellMoreFo	db 'Can',27h,'t sell more food',0
aCanTBuyMoreHor	db 'Can',27h,'t buy more horses',0
aCanTBuyMoreFoo	db 'Can',27h,'t buy more food',0
aNoMerchantsHer	db 'No merchants here',0
aC5_18		db 1Bh,'C5'
db    1
a1_SellFood3_Bu	db '1. Sell food 3. Buy horses',0Ah
db '2. Buy food  4. Buy weapons',1Bh,'C7'
db    1
aSelectWhich_9	db 0Ah
db 'Select which',0
aWhoWillGoToMar	db 'Who will go to market',0
db 0C8h	;   *
db    2
db 0FAh	;   *
db  18h
db  26h	; &
db    2
db 0FAh	;   *
db  18h
db 0DAh	;   *
db    0
db 0FAh	;   *
db  18h
db 0C0h	;   *
db    0
db 0FAh	;   *
db  18h
aImposeSpecialT	db 'Impose special tax',0
aC6_48		db 0Ah
db 1Bh,'C6'
db    1
aWeCollectedUGo	db 'We collected %u gold and %u food',1Bh,'C7'
db    1
db    0
aCanTImposeSpec	db 'Can',27h,'t impose special tax in fall',0
aAlreadyCollect	db 'Already collected special tax',0
aManyProudDiver	db 'Many proud, diverse',0Ah
db 'races live here...',0Ah
db 'causing frequent riots',0Ah
db 'and rebellions. Land',0Ah
db 'lush and fertile.',0
aTheBaseFromWhi	db 'The base from which',0Ah
db 'the Huns were repulsed.',0Ah
db 'Plains to the north,',0Ah
db 'hills to the south.',0
aLocationNorthO	db 'Location north of the',0Ah
db 'Yellow River attracted',0Ah
db 'many fishermen. A rich',0Ah
db 'and powerful land.',0
aEastOfMt_Taish	db 'East of Mt. Taishan,',0Ah
db 'this province wields',0Ah
db 'great influence.',0Ah
db 'The salt trade thrives,',0Ah
db 'and Santou merchants',0Ah
db 'are famous.',0
aThisLandIsCros	db 'This land is crossed',0Ah
db 'by the Saisui River.',0Ah
db 'Since long ago,',0Ah
db 'a nation of wealth.',0
aContainsRichSo	db 'Contains rich soil and',0Ah
db 'Loyang, the capital of',0Ah
db 'the Later Han Dynasty.',0Ah
db 'Many armored forts.',0
aAWellArmedLand	db 'A well-armed land,',0Ah
db 'encircled by battle',0Ah
db 'towers. Changan, capital',0Ah
db 'of the Early Han',0Ah
db 'Dynasty, is here.',0
aEntranceToTheS	db 'Entrance to the Silk',0Ah
db 'Road, this land has',0Ah
db 'attracted diverse',0Ah
db 'races. The Yellow River',0Ah
db 'flows to the south,',0Ah
db 'mountains lie to the',0Ah
db 'north.',0
aTracesOfTheAnc	db 'Traces of the ancient',0Ah
db 'lands Sai and So remain',0Ah
db 'here. Many land routes',0Ah
db 'cross this area, making',0Ah
db 'the land easy to invade',0Ah
db 'and hard to defend.',0
aACulturalMecca	db 'A cultural mecca, known',0Ah
db 'for producing great',0Ah
db 'literary and military',0Ah
db 'scholars like Confucius',0Ah
db 'and the founder of',0Ah
db 'the Han Dynasty.',0
aAMajorYangtzeR	db 'A major Yangtze River',0Ah
db 'port. The people have',0Ah
db 'long enjoyed tranquil',0Ah
db 'prosperity. Many able',0Ah
db 'men remain unemployed.',0
aTheLandWhereGo	db 'The land where Go and',0Ah
db 'Etsu once battled for',0Ah
db 'supremacy. The Yangtze',0Ah
db 'River guards the north.',0Ah
db 'Great expansion',0Ah
db 'expected.',0
aAFertileLandPr	db 'A fertile land, protec-',0Ah
db 'ted by its steepness.',0Ah
db 'Contains upper Yangtze',0Ah
db 'River. Few people live',0Ah
db 'in the southern,',0Ah
db 'undeveloped region.',0
aChinaSSouthern	db 'China',27h,'s southernmost',0Ah
db 'region was late to',0Ah
db 'colonize. The land',27h,'s',0Ah
db 'flatness makes it hard',0Ah
db 'to defend.',0
align 2
db  30h	; 0
db  8Bh	;   *
db  95h	;   *
db  8Bh	;   *
db 0EAh	;   *
db  8Bh	;   *
db  41h	; A
db  8Ch	;   *
db 0B5h	;   *
db  8Ch	;   *
db    3
db  8Dh	;   *
db  5Ch	; \
db  8Dh	;   *
db 0BFh	;   *
db  8Dh	;   *
db  42h	; B
db  8Eh	;   *
db 0CBh	;   *
db  8Eh	;   *
db  49h	; I
db  8Fh	;   *
db 0B8h	;   *
db  8Fh	;   *
db  2Dh	; -
db  90h	;   *
db 0AEh	;   *
db  90h	;   *
db  1Fh
db 0FFh
db 0FFh
db 0F8h	;   *
db  7Fh	; 
db 0FFh
db 0FFh
db 0FEh	;   *
db    2
db  0Dh
db 0B2h	;   *
db 0FFh
db  30h	; 0
db    0
db 0B0h	;   *
db  7Fh	; 
db 0FFh
db 0FFh
db 0FEh	;   *
db  1Fh
db 0FFh
db 0FFh
db 0F8h	;   *
aC6_49		db 1Bh,'C6'
db    1
db    0
a2d_6		db '%2d',0
aC7_44		db 1Bh,'C7'
db    1
db    0
db  44h	; D
db  17h
db  55h	; U
db  14h
db 0D8h	;   *
db 0AAh	;   *
db  44h	; D
db  77h	; w
db  55h	; U
db    5
db 0C1h	;   *
db 0AAh	;   *
db  22h	; "
db  22h	; "
db  66h	; f
db    0
db  22h	; "
db 0BBh	;   *
db    0
db  35h	; 5
db  77h	; w
db    0
db  44h	; D
db  22h	; "
db    4
db  2Eh	; .
db  1Ch
db    2
db  57h	; W
db  2Eh	; .
db    1
db  13h
db  4Bh	; K
db    1
db  23h	; #
db  91h	;   *
db  3Dh	; =
db  1Ch
db  3Ch	; <
db 0FEh	;   *
db  1Ah
db  5Eh	; ^
db 0B5h	;   *
db  11h
db 0B5h	;   *
db 0AAh	;   *
db    0
db  11h
db  55h	; U
db    0
db    0
db 0AAh	;   *
db    0
db    0
db  55h	; U
db    0
db    0
db 0AAh	;   *
db    0
db    0
db  2Ah	; *
db    0
db  2Ah	; *
db    0
db    0
db    0
db    0
db  7Eh	; ~
db  2Ah	; *
db    0
db  66h	; f
db  22h	; "
db  2Ah	; *
db    0
db  2Ah	; *
db    0
db  24h	; $
db    0
db  2Ah	; *
db  7Eh	; ~
db  7Eh	; ~
db  22h	; "
db  7Eh	; ~
db  66h	; f
db    1
db    2
db    1
db    0
db    0
db    0
db    2
db    2
db    2
db    1
db    0
db    1
db  1Bh
db  3Dh	; =
db  31h	; 1
db  56h	; V
db  1Bh
db  52h	; R
db  56h	; V
db    0
aB7_38		db 1Bh,'B7'
db    1
aC0_34		db 1Bh,'C0'
db    1
aBuildFortWhere	db 'Build fort where',0Ah
db '(0:Enter  RET:Cancel)',0
aDonTBuild	db 0Ah
db 0Ah
db 'Don',27h,'t build',0
aC3_26		db 0Ah
db 1Bh,'C3'
db    1
aCanTBuildHere_	db 'Can',27h,'t build here.',1Bh,'W',0
aBuildFort	db 0Ah
db 'Build fort',0
aYouNowHaveC2	db 'You now have ',1Bh,'C2'
db    1
aDC0_2		db '%d',1Bh,'C0'
db    1
aForts		db ' forts',0
aC0_35		db 1Bh,'C0'
db    1
aV2d_SVC1	db 1Bh,'= V%2d. %s',1Bh,'="V',1Bh,'C1'
db    1
aBuilderSC7	db 'Builder:%s',1Bh,'C7'
db    1
aM0_7		db 1Bh,'M0',0
aWhoWillBuildTh	db 'Who will build the fort',0
aB7_39		db 1Bh,'B7'
db    1
db    0
aB0_33		db 1Bh,'B0'
db    1
db    0
aB0_34		db 1Bh,'B0'
db    1
aC7_45		db 1Bh,'C7'
db    1
db    0
aHitAnyKey__0	db 'Hit any key.',0
aRgGS		db 1Bh,'RG',1Bh,'=*G%s',0
aBuildFort_0	db 'Build fort',0
aGiveOrdersToIn	db 'Give orders to invade',0
aInvadeWhere	db 'Invade where',0
aGiveOrdersToSe	db 'Give orders to send goods',0
aSendWhere_1	db 'Send where',0
aFullAuthority	db 'Full authority',0
aInternalAffair	db 'Internal affairs',0
aMilitaryAffair	db 'Military affairs',0
aPersonnel	db 'Personnel',0
aC6_50		db 1Bh,'C6'
db    1
a1_S2_S3_S4_S	db '1. %s',0Ah
db '2. %s',0Ah
db '3. %s',0Ah
db '4. %s',0Ah,0
aC7_46		db 1Bh,'C7'
db    1
aChooseWhichPol	db 'Choose which policy',0
aOrdersC6	db 'Orders:',1Bh,'C6'
db    1
aSC7_50		db '%s',0Ah
db 1Bh,'C7'
db    1
aSendToC4	db 'Send to:',1Bh,'C4'
db    1
db    0
aNone_3		db ' none',0
aProvince2d	db ' Province %2d',0
aC7_48		db 0Ah
db 1Bh,'C7'
db    1
aInvadeC2	db 'Invade:',1Bh,'C2'
db    1
db    0
aNone_4		db ' none',0
aProvince2d_0	db ' Province %2d',0
aC7_47		db 1Bh,'C7'
db    1
db  0Ah
db    0
db  1Eh
db  93h	;   *
db  2Dh	; -
db  93h	;   *
db  3Eh	; >
db  93h	;   *
db  4Fh	; O
db  93h	;   *
aNoOtherProvi_0	db 'No other provinces',0
aSendOrdersWher	db 'Send orders where',0
aSelfRule	db 'self rule',0
aDirectRule	db 'direct rule',0
aProvince2dNowU	db 0Ah
db 'Province %2d now under ',1Bh,'C6'
db    1
aSC7_51		db '%s',1Bh,'C7'
db    1
db 0Ah,0
a1_SelfRule2_Di	db '1. Self rule 2. Direct rule',0Ah
db 'Choose which',0
aProvince2dOrde	db 0Ah
db 'Province %2d orders executed',0
db  6Ch	; l
db    1
db 0D9h	;   *
db  19h
db  0Ch
db    0
db 0D9h	;   *
db  19h
aCanTAbandonAGe	db 'Can',27h,'t abandon a general at war',0
aGoIntoExile	db 'Go into exile',0
db 0Ah,0
aTakeAllGeneral	db 'Take all generals',0
aC2SC7HasGoneIn	db 0Ah
db 1Bh,'C2%s',1Bh,'C7 has gone into exile',0
db    0
aSimaHui	db 'Sima Hui',0
aXuZijiang	db 'Xu Zijiang',0
aHuaTuo		db 'Hua Tuo',0
aSimaHui_0	db 'Sima Hui',0
aXuZijiang_0	db 'Xu Zijiang',0
aHuaTuo_0	db 'Hua Tuo',0
aTheOtherRulers	db 'The other rulers don',27h,'t',0Ah
db 'trust Cao Cao.',0
aGoodMenFollowH	db 'Good men follow humbly,',0Ah
db 'and fight mercilessly.',0
aTheHanDynastyH	db 'The Han Dynasty has',0Ah
db 'decayed beyond repair.',0
aLuBuSStrengthA	db 'Lu Bu',27h,'s strength and',0Ah
db 'loyalty are unequaled.',0
aLuBuIsStrongBu	db 'Lu Bu is strong, but he',0Ah
db 'can',27h,'t be trusted.',0
aHanSRoyalFamil	db 'Han',27h,'s royal family can',0Ah
db 'rise again.',0
aChaoYunLikesBe	db 'Chao Yun likes being',0Ah ; Changed: Zhao Yun
db 'in danger.',0
aItIsWiseNotToA	db 'It is wise not to',0Ah
db 'always listen to',0Ah
db 'wise men',0
aICanSayNothing	db 'I can say nothing',0Ah
db 'right now.',0
aOnceYouHaveCon	db 'Once you have conquered',0Ah
db 'China, conquer Europe',0Ah
db 'with Koei',27h,'s L',27h,'EMPEREUR.',0
aFightPiratesAn	db 'Fight pirates and search',0Ah
db 'for treasure in Koei',27h,'s',0Ah
db 'UNCHARTED WATERS.',0
aUtmostRespectC	db 'Utmost respect comes to',0Ah
db 'the possesor of the Seal.',0
aSeekOutTheHidd	db 'Seek out the Hidden',0Ah
db 'Dragon',27h,'s or the Phoenix',0Ah
db 'Fledgling',27h,'s wisdom.',0
aReadingCanOfte	db 'Reading can often',0Ah
db 'increase wisdom.',0
aDonTTradeQuali	db 'Don',27h,'t trade quality',0Ah
db 'for quantity.',0
aYouNeedSoldier	db 'You need soldiers and',0Ah
db 'food to take the land.',0
aDonTNeglectYou	db 'Don',27h,'t neglect your',0Ah
db 'people',27h,'s needs.',0
aICannotHelpYou	db 'I cannot help you now.',0
db    2
db  95h	;   *
db  0Bh
db  95h	;   *
db  16h
db  95h	;   *
db  1Eh
db  95h	;   *
db  27h	; '
db  95h	;   *
db  32h	; 2
db  95h	;   *
db 0B2h	;   *
db    0
db 0BFh	;   *
db    0
db  1Ch
db    0
db  3Ah	; :
db  95h	;   *
db  60h	; `
db  95h	;   *
db  8Fh	;   *
db  95h	;   *
db 0BAh	;   *
db  95h	;   *
db 0E6h	;   *
db  95h	;   *
db  10h
db  96h	;   *
db  33h	; 3
db  96h	;   *
db  53h	; S
db  96h	;   *
db  7Fh	; 
db  96h	;   *
db  9Ch	;   *
db  96h	;   *
db 0E2h	;   *
db  96h	;   *
db  24h	; $
db  97h	;   *
db  56h	; V
db  97h	;   *
db  96h	;   *
db  97h	;   *
db 0B9h	;   *
db  97h	;   *
db 0DBh	;   *
db  97h	;   *
db    8
db  98h	;   *
db  2Bh	; +
db  98h	;   *
aEveryoneIsHeal	db 'Everyone is healthy. I',0Ah
db 'have a few aches but...',0
aDonTWorryILlCu	db 'Don',27h,'t worry, I',27h,'ll cure',0Ah
db 'all your wounded',0
aNoDoctorHere	db 'No doctor here',0
db  78h	; x
db  98h	;   *
db 0A7h	;   *
db  98h	;   *
aLooksLikeADang	db ' looks like',0Ah
db 'a dangerous one',0
aSAmbitionIsHig	db 27h,'s ambition',0Ah
db 'is high...be wary',0
aCanTBeTrusted	db 'can',27h,'t be',0Ah
db 'trusted',0
aIsPlanningSome	db 'is planning',0Ah
db 'some kind of trick',0
db  1Ch
db  99h	;   *
db  2Dh	; -
db  99h	;   *
aTheShadowOfDea	db 'The shadow of death is',0Ah
db 'near ',0
aIHopeNothingBa	db 'I hope nothing bad',0Ah
db 'happens to ',0
db  50h	; P
db  99h	;   *
db  6Dh	; m
db  99h	;   *
db 0A0h	;   *
db    3
db  47h	; G
db  1Ah
db  34h	; 4
db    3
db  47h	; G
db  1Ah
db 0D8h	;   *
db    2
db  47h	; G
db  1Ah
db  7Ch	; |
db    2
db  47h	; G
db  1Ah
aTheGreatSage	db 'The great sage',0Ah,0
aLivesNearby	db ' lives nearby',0
aTheScholar	db 'The scholar ',0
aLivesHereInObs	db 0Ah
db 'lives here in obscurity',0
aHasHisEyesOn	db ' has his eyes',0Ah
db 'on ',0
aWillSoonBeInva	db ' will soon be',0Ah
db 'invaded by ',0
align 2
aNoTravelers	db 'No travelers',0
db  30h	; 0
db    6
db  47h	; G
db  1Ah
db  0Ch
db    4
db  47h	; G
db  1Ah
aCanTBeTruste_0	db ' can',27h,'t be',0Ah
db 'trusted',0
aMayBePlottingS	db ' may be',0Ah
db 'plotting something',0
aIsSpreadingDis	db ' is spreading',0Ah
db 'discontent at the palace',0
db  26h	; &
db  9Ah	;   *
db  38h	; 8
db  9Ah	;   *
aDespisesTheRul	db ' despises the ruler',0
aIsAGenius	db ' is a genius',0
aIsBraveButUnju	db ' is brave but unjust',0
aInProvince	db ' in Province ',0Ah,0
db    0
db  8Eh	;   *
db    1
db  47h	; G
db  1Ah
db  78h	; x
db    1
db  47h	; G
db  1Ah
db  62h	; b
db    1
db  47h	; G
db  1Ah
db  7Eh	; ~
db  9Ah	;   *
db  92h	;   *
db  9Ah	;   *
db  9Fh	;   *
db  9Ah	;   *
aIsRunningLowOn	db ' is running',0Ah
db 'low on food',0
aHasLittleFood_	db ' has little food.',0Ah ; Changed: Let's press our 0A advantage
db 'Let',27h,'s press our advantage',0
aHasBuiltUpItsA	db ' has built up',0Ah
db 'its army, so watch out',0
aIsAMenaceLetSW	db ' is a menace',0Ah
db 'Let',27h,'s work out a plot...',0
aNowWeLlSurelyW	db 0Ah
db 'now, we',27h,'ll surely win',0
aSLeaderIsInexp	db 27h,'s leader',0Ah
db 'is inexperienced',0
aLetSNotBeCarel	db 0Ah
db 'Let',27h,'s not be careless',0
aIsQuicklyGathe	db ' is quickly',0Ah
db 'gathering men of talent',0
aIfWeInvadeProv	db 'If we invade Province ',0
aManyGeneralsHa	db 'Many generals have assembled',0Ah ; Changed: assembled 20 in
db 'in ',0
aProvince	db 'Province ',0
db 0C4h	;   *
db  0Bh
db  47h	; G
db  1Ah
db  6Ah	; j
db  0Bh
db  47h	; G
db  1Ah
db    8
db  0Bh
db  47h	; G
db  1Ah
db 0BEh	;   *
db  0Ah
db  47h	; G
db  1Ah
db 0D6h	;   *
db  9Ah	;   *
db 0EEh	;   *
db  9Ah	;   *
db  1Ah
db  9Bh	;   *
db  3Fh	; ?
db  9Bh	;   *
db  65h	; e
db  9Bh	;   *
db  7Ch	; |
db  9Bh	;   *
db  97h	;   *
db  9Bh	;   *
db 0AEh	;   *
db  9Bh	;   *
aIHaveNoAdviceF	db 'I have no advice for you',0Ah
db 'Do as you see fit',0
aIHaveNothingTo	db 'I have nothing to say',0
aNoAdvisorHer_0	db 'No advisor here',0
db    0
db  22h	; "
db  0Ch
db  47h	; G
db  1Ah
db 0C4h	;   *
db    9
db  47h	; G
db  1Ah
db 0A2h	;   *
db    8
db  47h	; G
db  1Ah
db  34h	; 4
db  9Ch	;   *
db  5Fh	; _
db  9Ch	;   *
db  1Bh
db  43h	; C
db  25h	; %
db  64h	; d
db  31h	; 1
db  2Eh	; .
aAdviceCD2_Rumo	db ' Advice',0Ah
db 1Bh,'C%d2. Rumors',0Ah
db 1Bh,'C%d3. Healing',1Bh,'C7'
db    1
db  0Ah
db    0
aSelectWhich_10	db 'Select which',0
db    0
aC5_19		db 1Bh,'C5'
db    1
aThisWillEndThe	db '<This will end the game for all players>',0Ah
db 1Bh,'C7'
db    1
aAreYouSure	db 'Are you sure',0
aC6_51		db 1Bh,'C6'
db    1
aQuntilNextTime	db 1Bh,'=,QUntil next time...',1Bh,'W',0
aQuitPlayer	db 'Quit player',0
aSeeWhatHappens	db 0Ah
db 'See what happens',0
aC6_52		db 1Bh,'C6'
db    1
aQuntilNextTi_0	db 1Bh,'=,QUntil next time...',1Bh,'W',0
aFromNowOnTheCo	db 0Ah
db 'From now on, the computer',0Ah
db 'will play %s.',1Bh,'W',0
aGraphicsAre	db 'graphics are',0
aMusicIs	db 'music is',0
aSoundEffectsAr	db 'sound effects are',0
aOn		db '<On>',0
aOff		db '<Off>',0
aSC4		db '%s ',1Bh,'C4'
db    1
aSC7_52		db '%s ',1Bh,'C7'
db    1
db  0Ah
db    0
a1_on2_off	db '1.On 2.Off',0
db    0
db  95h	;   *
db  9Dh	;   *
db 0A2h	;   *
db  9Dh	;   *
db 0ABh	;   *
db  9Dh	;   *
aDoesnTAppear	db 'doesn',27h,'t appear',0
aFast		db 'fast',0
aMedium_0	db 'medium',0
aSlow		db 'slow',0
aDisplaySpeedIs	db 'Display speed is ',1Bh,'C4'
db    1
aSC7_53		db '<%s>',1Bh,'C7'
db    1
aC6_53		db 0Ah
db 1Bh,'C6'
db    1
db    0
aD_S_2		db '%d.%s ',0
aC7_49		db 0Ah
db 1Bh,'C7'
db    1
aChangeToWhat	db 'Change to what',0
db 0EAh	;   *
db  9Dh	;   *
db 0F9h	;   *
db  9Dh	;   *
db 0FEh	;   *
db  9Dh	;   *
db    5
db  9Eh	;   *
aMessageWaitIsC	db 'Message wait is ',1Bh,'C4'
db    1
aDC7_1		db '%d',1Bh,'C7'
db    1
aC7_50		db 0Ah
db 1Bh,'C7'
db    1
db    0
aChangeToWhat_0	db 'Change to what',0
aC6_54		db 1Bh,'C6'
db    1
a1_messageWait2	db '1.Message wait',0Ah
db '2.Messenger speed',0Ah
db 1Bh,'C7'
db    1
aChooseWhich_0	db 'Choose which',0
aOn_0		db '<On>',0
aOff_0		db '<Off>',0
aHexWarIsC4	db 'HEX war is ',1Bh,'C4'
db    1
aSC7_54		db '%s',1Bh,'C7'
db    1
db  0Ah
db    0
a1_on2_off_0	db '1.ON 2.OFF',0       ; Changed: 1. On 2. Off
aSomeProvincesN	db 'Some provinces now in battle',0Ah
db 'Try again later',1Bh,'W',0
db    0
db 0B5h	;   *
db  9Eh	;   *
db 0BAh	;   *
db  9Eh	;   *
a1_Wait		db '1. Wait  *',0Dh,'  * ',0Bh,0
db 0B0h	;   *
a5_Save2_Graphi	db '5. Save',0Ah
db '2. Graphics       6. HEX war',0Ah
db 9,9,9,'3. Music0',0
db '  * ',0Ah,0
db 0B0h	;   *
a7_QuitPlayer4_	db '7. Quit Player',0Ah
db '4. Sound effects  8. Quit Game',1Bh,'C7'
db    1
aChooseWhich_1	db 0Ah
db 'Choose which',0
a1_Waitf	db '1. WaitF',0
db '  * ',0Bh,0
db 0B0h	;   *
a5_Save2_Grap_0	db '5. Save',0Ah
db '2. Graphics       6. HEX war',0Ah
db 9,9,9,1Bh,'C13. Music3',0
db 0B2h	;   *
db  20h
db 0Ah,0
db 0B0h	;   *
aCD7_QuitPlayer	db 1Bh,'C%d7. Quit Player',0Ah
db '4. Sound effects  8. Quit Game',0Ah,0
aC7_51		db 1Bh,'C7'
db    1
aChooseWhich_2	db 'Choose which',0
aSoundDriverOrS	db 'Sound driver or synthesizer card',0Ah
db 'not installed.',0
aC6_55		db 1Bh,'C6'
db    1
db  23h	; #
db  20h
db  20h
db  52h	; R
db  75h	; u
db  6Ch	; l
db  7Eh	; ~
db    0
db 0B2h	;   *
db  20h
db    8
db    0
db 0B0h	;   *
db  50h	; P
db  72h	; r
db  76h	; v
db  2Fh	; /
db  47h	; G
db  65h	; e
db  6Eh	; n
db  2Fh	; /
db  4Dh	; M
db  65h	; e
db  6Eh	; n
db    0
aM4C0_1		db 1Bh,'M4',1Bh,'C0'
db    1
a2dM0C7		db '%2d ',1Bh,'M0',1Bh,'C7'
db    1
a12s2d2d5u	db '%-12s%2d/%2d/%5u',0
aNoExiledRulers	db 'No exiled rulers',1Bh,'W',0
aUndiscoveredGe	db 'Undiscovered generals',0Ah
db '  Province %2d: %s (%3d/%3d/%3d)',0
aFreeGeneralsPr	db 'Free generals',0Ah
db '  Province %2d: %s (%3d/%3d/%3d)',0
aC6_56		db 1Bh,'C6'
db    1
aRulerPrvGenIfl	db '# Ruler      Prv/Gen/Ifl',0
aD_1		db '%d ',0
aM4C0_2		db 1Bh,'M4',1Bh,'C0'
db    1
a2dM0C7_0	db '%2d ',1Bh,'M0',1Bh,'C7'
db    1
a12s2d3d3d	db '%-12s%2d/%3d/%3d',0
aSimaHui_1	db 'Sima Hui',0
aXuZijiang_1	db 'Xu Zijiang',0
aHuaTuo_1	db 'Hua Tuo',0
a12sProvince2d	db '%-12s: Province %2d',0
db 0Ah,0
db  62h	; b
db 0A1h	;   *
db  6Bh	; k
db 0A1h	;   *
db  76h	; v
db 0A1h	;   *
db  70h	; p
aB7_40		db ' (  ',1Bh,'B7'
db    1
aC0_36		db 1Bh,'C0'
db    1
aRnkC1		db 'Rnk    ',1Bh,'C1'
db    1
aGeneralC2	db 'General     ',1Bh,'C2'
db    1
aComC4		db 'Com ',1Bh,'C4'
db    1
aDutyVrtAmbC0	db 'Duty Vrt Amb  ',1Bh,'C0'
db    1
aMenB0		db 'Men',1Bh,'B0'
db    1
aC7_52		db 1Bh,'C7'
db    1
db    0
aC2_50		db 1Bh,'C2'
db    1
aRul_1		db 'Rul',0
aC5_20		db 1Bh,'C5'
db    1
aGov_1		db 'Gov',0
aC4_11		db 1Bh,'C4'
db    1
aAdv_1		db 'Adv',0
aC7_53		db 1Bh,'C7'
db    1
aAct_1		db 'Act',0
aC3_27		db 1Bh,'C3'
db    1
aFree_3		db 'Free',0
a9sCD		db '%-9s',1Bh,'C%d'
db    1
a12sC7_2	db '%-12s',1Bh,'C7'
db    1
db    0
a5d_4		db '%5d',0
a4d5d4d		db '%4d%5d%4d',0
a6d_3		db '%6d',0
aViewNext?	db 'View next?',0
align 2
db 0E8h	;   *
db 0A1h	;   *
db 0F0h	;   *
db 0A1h	;   *
db 0F8h	;   *
db 0A1h	;   *
db    0
db 0A2h	;   *
db    8
db 0A2h	;   *
aWhichProvinc_4	db 'Which province',0
aC5_21		db 1Bh,'C5'
db    1
a1_Compatibilit	db '1. Compatibility     4. Special generals',0Ah
db '2. Influence'
db  1Eh
db    2
db 0B2h	;   *
db  20h
db    9
db    0
db 0B0h	;   *
a5_FreeGenerals	db '5. Free generals',0Ah
db '3. Exiled rulers     6. Undisc. generals',0Ah
db 1Bh,'C7'
db    1
aViewWhat_0	db 'View what',0
align 2
db 0DAh	;   *
db    2
db  85h	;   *
db  1Fh
db    0
db    2
db  85h	;   *
db  1Fh
db  1Ch
db    1
db  85h	;   *
db  1Fh
db    4
db    0
db  85h	;   *
db  1Fh
db  30h	; 0
db    4
db  85h	;   *
db  1Fh
db 0B4h	;   *
db    5
db  85h	;   *
db  1Fh
db  14h
db    5
db  85h	;   *
db  1Fh
db  68h	; h
db    3
db  85h	;   *
db  1Fh
db 0A2h	;   *
db    7
db  85h	;   *
db  1Fh
db  1Ah
db    9
db  85h	;   *
db  1Fh
db 0CCh	;   *
db    8
db  85h	;   *
db  1Fh
db 0BCh	;   *
db    6
db  85h	;   *
db  1Fh
db  18h
db    6
db  85h	;   *
db  1Fh
db  0Ch
db    2
db 0FEh	;   *
db  1Bh
db  92h	;   *
db    1
db 0FEh	;   *
db  1Bh
db  0Ch
db    2
db 0FEh	;   *
db  1Bh
db  10h
db    1
db 0FEh	;   *
db  1Bh
db 0B2h	;   *
db    0
db 0FEh	;   *
db  1Bh
db  0Ch
db    2
db 0FEh	;   *
db  1Bh
db  10h
db    1
db 0FEh	;   *
db  1Bh
db 0B2h	;   *
db    0
db 0FEh	;   *
db  1Bh
db  92h	;   *
db    1
db 0FEh	;   *
db  1Bh
db  10h
db    1
db 0FEh	;   *
db  1Bh
db  92h	;   *
db    1
db 0FEh	;   *
db  1Bh
db  0Ch
db    2
db 0FEh	;   *
db  1Bh
db  92h	;   *
db    1
db 0FEh	;   *
db  1Bh
db  10h
db    1
db 0FEh	;   *
db  1Bh
db 0B2h	;   *
db    0
db 0FEh	;   *
db  1Bh
aC2_51		db 1Bh,'C2'
db    1
aSC7_55		db '%s,',1Bh,'C7'
db    1
aOurFollowerC6	db ' our follower ',1Bh,'C6'
db    1
aSC7_56		db '%s',1Bh,'C7'
db    1
aHasJoinedC2	db ' has',0Ah
db 'joined ',1Bh,'C2'
db    1
aSC7_57		db '%s',1Bh,'C7'
db    1
db  2Eh	; .
db    0
aC2_52		db 1Bh,'C2'
db    1
aSSC7_4		db '%s',27h,'s',1Bh,'C7'
db    1
aFollowerC6_0	db ' follower ',1Bh,'C6'
db    1
aSC7_58		db '%s ',1Bh,'C7'
db    1
aHasJoinedC2_0	db 'has',0Ah
db 'joined ',1Bh,'C2'
db    1
aSC7_59		db '%s',1Bh,'C7'
db    1
db  2Eh	; .
db    0
db    0
db  56h	; V
db 0A3h	;   *
db  91h	;   *
db 0A3h	;   *
db  1Bh
aC2_53		db 'C2'
db    1
aSC7_60		db '%s ',1Bh,'C7'
db    1
aHasGoneIntoE_0	db 'has gone into exile',0
align 2
db 0B0h	;   *
db    7
db 0F8h	;   *
db  1Ch
db  42h	; B
db    6
db 0F8h	;   *
db  1Ch
db    4
db    1
db 0F8h	;   *
db  1Ch
db 0A2h	;   *
db    5
db 0F8h	;   *
db  1Ch
db  52h	; R
db    0
db 0F8h	;   *
db  1Ch
aC2_54		db 1Bh,'C2'
db    1
aSC7_61		db '%s ',1Bh,'C7'
db    1
aOfProvince2d_1	db 'of Province %2d',0Ah
db 'has invaded Province %2d!',0
align 2
aSArmyHasInvade	db 27h,'s army',0Ah
db 'has invaded. Can you',0Ah
db 'send reinforcements',0
aIfYouSwitchSid	db 'If you switch sides',0Ah
db 'when we invade,',0Ah
db 'we',27h,'ll reward you.',0
aAGreatHeroLike	db 'A great hero like',0Ah
db 'you should lead,',0Ah
db 'not follow...',0
aPlansToAttack_	db ' plans to',0Ah
db 'attack. You should',0Ah
db 'strike first...',0
aAsWeAgreedYouL	db 'As we agreed,',0Ah
db 'you',27h,'ll switch sides',0Ah
db 'when we invade...',0
aSurrenderNowOr	db 'Surrender now,',0Ah
db 'or we',27h,'ll have',0Ah
db 'to invade...',0
aPleaseAcceptOu	db 'Please accept our',0Ah
db 'gift of %d gold.',0
aPleaseAccept_0	db 'Please accept our',0Ah
db 'princess in marriage.',0
aLetSLaunchAJoi	db 'Let',27h,'s launch a',0Ah
db 'joint attack on',0Ah
db 'Province %2d.',0
aLetSAllyAndEnj	db 'Let',27h,'s ally and',0Ah
db 'enjoy friendship',0Ah
db 'and cooperation.',0
aIBegYouPersona	db 'I beg you',0Ah
db 'personally,',0Ah
db 'please join us.',0
aWillAFineHorse	db 'Will a fine',0Ah
db 'horse persuade you',0Ah
db 'to join us?',0
aJoinUsAndWeLlG	db 'Join us and we',27h,'ll',0Ah
db 'give you 100 gold.',0
aIfYouJoinUsOur	db 'If you join us, our',0Ah
db 'strength will be',0Ah
db 'unstoppable.',0
db    4
db 0A6h	;   *
db  2Ah	; *
db 0A6h	;   *
db  55h	; U
db 0A6h	;   *
db  7Ah	; z
db 0A6h	;   *
aB7C1		db 1Bh,'B7',1Bh,'C1'
db    1
aYRySC0B0	db 1Bh,'=)Y',1Bh,'RY%s,',1Bh,'C0',1Bh,'B0'
db    1
aM4_0		db 1Bh,'M4',0
aB7_41		db 1Bh,'B7'
db    1
a0C2		db 1Bh,'=0]',1Bh,'C2'
db    1
a12sB0		db '%12s',1Bh,'B0',0
a0C2_0		db 1Bh,'=0]',1Bh,'C2'
db    1
a12sC7_3	db '%12s',1Bh,'C7'
db    1
aM0_8		db 1Bh,'M0'
db    1
db    0
db    0
db 0E4h	;   *
db    0
db  2Ah	; *
db  1Eh
db 0C6h	;   *
db    0
db  2Ah	; *
db  1Eh
db 0B8h	;   *
db    0
db  2Ah	; *
db  1Eh
db 0A6h	;   *
db    0
db  2Ah	; *
db  1Eh
db  98h	;   *
db    0
db  2Ah	; *
db  1Eh
db  2Eh	; .
db    0
db  2Ah	; *
db  1Eh
db  6Ah	; j
db    0
db  2Ah	; *
db  1Eh
db  5Ch	; \
db    0
db  2Ah	; *
db  1Eh
db  8Ah	;   *
db    0
db  2Ah	; *
db  1Eh
db  4Eh	; N
db    0
db  2Ah	; *
db  1Eh
db 0F2h	;   *
db    0
db  2Ah	; *
db  1Eh
db    8
db    1
db  2Ah	; *
db  1Eh
aSendReinforc_0	db 'Send reinforcements',0Ah
db 'from where',0
aCancel		db 0Ah
db 'Cancel',0
aC6_57		db 1Bh,'C6'
db    1
aSC7_62		db '%s',1Bh,'C7'
db    1
aWasCaptured_1	db ' was captured',0
aSetFree	db 'Set free',0
aRecruit_0	db 'Recruit',0
aC6_58		db 1Bh,'C6'
db    1
a1_S2_beheadC7	db '1.%s 2.Behead',0Ah
db 1Bh,'C7'
db    1
aChooseWhich12?	db 'Choose which (1-2)? ',0
aC6_59		db 1Bh,'C6'
db    1
a1_Accept2_Refu	db '1. Accept 2. Refuse 3. Imprison',1Bh,'C7'
db    1
aChooseWhich_3	db 0Ah
db 'Choose which',0
aC3_28		db 1Bh,'C3'
db    1
aJointInvasionI	db 'Joint invasion in progress.',0
aC2_55		db 1Bh,'C2'
db    1
aSC7_63		db '%s,',1Bh,'C7'
db    1
aCD_1		db ' ',1Bh,'C%d'
db    1
aSC7_64		db '%s',1Bh,'C7'
db    1
aHasBroughtASec	db ' has brought',0Ah
db 'a secret letter.',0Ah,0
a5fhitAnyKey_	db 1Bh,'=5FHit any key.',0
aC2_56		db 1Bh,'C2'
db    1
aS_29		db '%s,',0
aSSC7_5		db ' %s',27h,'s',1Bh,'C7'
db    1
aFollowerC6_1	db ' follower',0Ah
db 1Bh,'C6'
db    1
aSC7_65		db '%s ',1Bh,'C7'
db    1
aWasCaughtCarry	db 'was caught carrying a',0Ah
db 'secret letter through our land',0Ah,0
aSC7_66		db ' %s',1Bh,'C7'
db    1
aWasCaughtCar_0	db ' was',0Ah
db 'caught carrying a secret',0Ah
db 'letter through our land',0Ah,0
aReadLetter	db 'Read letter',0
aC6_60		db 1Bh,'C6'
db    1
a1_LetLetterPas	db '1. Let letter pass',0Ah
db '2. Seize letter',0Ah
db '3. Imprison messenger',0Ah
db 1Bh,'C7'
db    1
aChooseWhich_4	db 'Choose which',0
align 2
aYRyC2		db 1Bh,'=*Y',1Bh,'RY',1Bh,'C2'
db    1
aSC7_67		db '%s,',1Bh,'C7'
db    1
db    0
aWeVeCaughtC2	db ' we',27h,'ve',0Ah
db 'caught',1Bh,'C2'
db    1
aSSC7_6		db ' %s',27h,'s',0Ah
db 1Bh,'C7'
db    1
aFollowerC6_2	db 'follower ',1Bh,'C6'
db    1
aSC7_68		db '%s',0Ah
db 1Bh,'C7'
db    1
aTransportingDG	db 'transporting',0Ah
db '%d gold and',0Ah
db '%lu food',0Ah,0
aWeVeCaughtC2_0	db ' we',27h,'ve',0Ah
db 'caught ',1Bh,'C2'
db    1
aSC7_69		db '%s',1Bh,'C7'
db    1
aTransporting_0	db 0Ah
db 'transporting',0Ah
db '%d gold and',0Ah
db '%lu food',0Ah,0
aC4_12		db 1Bh,'C4'
db    1
a1_Seize2_SetFr	db '1. Seize 2. Set free 3. Imprison',1Bh,'C7'
db    1
aChooseWhich_5	db 0Ah
db 'Choose which',0
aGeneral_5	db 'general',0
aGenerals	db 'generals',0
aSC2		db '%s, ',1Bh,'C2'
db    1
aSSC7_7		db '%s',27h,'s',1Bh,'C7'
db    1
aArmyHasInvaded	db ' army',0Ah
db 'has invaded!',1Bh,'C7'
db    1
aW_6		db 1Bh,'W',0
aWeEstimateThat	db 'We estimate that ',1Bh,'C2'
db    1
aSSArmyC7_0	db '%s',27h,'s army',1Bh,'C7'
db    1
aHasBroughtC3	db 0Ah
db 'has brought ',1Bh,'C3'
db    1
aDSC5		db '%d %s,',0Ah
db 9,9,1Bh,'C5'
db    1
aUMenC7		db '%u men ',1Bh,'C7'
db    1
aAndC6_0	db 'and ',1Bh,'C6'
db    1
aLuFoodC7_0	db ' %lu food',1Bh,'C7'
db    1
db    0
aRequestReinfor	db 0Ah
db 'Request reinforcements',0
db  0Dh
db 0AAh	;   *
db  15h
db 0AAh	;   *
aC2_57		db 1Bh,'C2'
db    1
aSHasSentC4	db '%s has sent',0Ah
db 1Bh,'C4'
db    1
aSC7_70		db '%s',1Bh,'C7'
db    1
aC7_54		db 1Bh,'C7'
db    1
aC6_61		db 0Ah
db 1Bh,'C6'
db    1
aUC7		db '%u',1Bh,'C7'
db    1
aSoldiersWC7	db ' soldiers',1Bh,'W',1Bh,'C7'
db    1
db    0
aC4_13		db 1Bh,'C4'
db    1
aSC7_71		db '%s',1Bh,'C7'
db    1
aAndC2		db ' and ',1Bh,'C2'
db    1
aSC7_72		db '%s',1Bh,'C7'
db    1
db  20h
db    9
db    9
db    9
db    9
aHaveAttackedPr	db 'have',0Ah
db 'attacked Province %2d',1Bh,'W',0
aLaunchJointAtt	db 'Launch joint attack',0Ah
db 'from where',0
aC2_58		db 1Bh,'C2'
db    1
aSC4_0		db '%s, ',1Bh,'C4'
db    1
aOurAllySC7	db 'our ally',0Ah
db '%s ',1Bh,'C7'
db    1
aHasAttackedPro	db 'has attacked Province %2d',1Bh,'W',0
aNoProvincesCan	db 'No provinces can',0Ah
db 'launch an attack now',0
aSendTroopsAsPr	db 0Ah
db 'Send troops as promised',0
aC2_59		db 1Bh,'C2'
db    1
aSC7_73		db '%s ',1Bh,'C7'
db    1
aHasSentC6	db 'has sent ',1Bh,'C6'
db    1
aSC7_74		db '%s',1Bh,'C7'
db    1
aToC4		db 0Ah
db 'to ',1Bh,'C4'
db    1
aSC7_75		db '%s',1Bh,'C7'
db    1
aToRequestReinf	db ' to',0Ah
db 'request reinforcements',1Bh,'W',0
aAskWhomForRein	db 'Ask whom for reinforcements',0
aStruggleThroug	db 0Ah
db 'Struggle through by ourselves',0
aNoOneCanSendRe	db 'No one can send reinforcements',0
aSendWhomAsMe_2	db 'Send whom as messenger',0
aNoGeneralCanLe	db 'No general can leave the field now',0
align 2
aC6_62		db 1Bh,'C6'
db    1
aSC7_76		db '%s ',1Bh,'C7'
db    1
aOfC2		db ' of',1Bh,'C2'       ; Changed: C7 of 20 C2
db    1
aSSC7_8		db '%s',27h,'s',0Ah
db 1Bh,'C7'
db    1
aArmyWasHiddenW	db 'army was hidden!',1Bh,'W',0
aC6_63		db 1Bh,'C6'
db    1
aSC7_77		db '%s',1Bh,'C7'
db    1
aOfC2_0		db ' of ',1Bh,'C2'
db    1
aSSC7_9		db '%s',27h,'s',0Ah
db 1Bh,'C7'
db    1
aArmyHadASecret	db 'army had a secret pact',0Ah
db 'to switch sides!',1Bh,'W',0
aTheGovernorOfC	db 'The governor',0Ah
db 'of ',1Bh,'C2'
db    1
aSSC7_10	db '%s',27h,'s',0Ah
db 1Bh,'C7'
db    1
aArmyWasHidde_0	db 'army was hidden!',1Bh,'W',0
align 2
aB0_35		db 1Bh,'B0'
db    1
aU12sC3		db 1Bh,'=*U%-12s ',1Bh,'C3'
db    1
aExile_0	db '(exile)',0
aUC6		db 1Bh,'=,U',1Bh,'C6'
db    1
aGoldC7_2	db 'Gold',1Bh,'C7'
db    1
a10d		db '%10d',0
aUC6_0		db 1Bh,'=-U',1Bh,'C6'
db    1
aFoodC7_2	db 'Food',1Bh,'C7'
db    1
a10lu_0		db '%10lu',0
db  1Bh
db  3Dh	; =
db  2Eh	; .
db  55h	; U
aC3_29		db 1Bh,'C3'
db    1
aGeneralsC7_1	db 'Generals',1Bh,'C7'
db    1
a6d_4		db '%6d',0
aUC5		db 1Bh,'=/U',1Bh,'C5'
db    1
aMenC7_2	db 'Men',1Bh,'C7'
db    1
a11lu		db '%11lu',0
aRestHere	db 0Ah
db 'Rest here',0
aCanTSettleHere	db 'Can',27h,'t settle here',0
aSettleHere	db 'Settle here',0
aC6_64		db 0Ah
db 1Bh,'C6'
db    1
aSHasSettledInP	db '%s has settled in Province %2d',1Bh,'C7'
db    1
db    0
db    0
db  1Fh
db    1
db  10h
db  40h	; @
db  1Fh
db    1
db  7Dh	; }
db  0Bh
db 0B2h	;   *
db    0
db  0Eh
db    0
db 0B0h	;   *
db  70h	; p
db  20h
db  20h
db  20h
db  20h
aB7_42		db 1Bh,'B7'
db    1
aC0_37		db 1Bh,'C0'
db    1
aRankC1		db 'Rank    ',1Bh,'C1'
db    1
aGeneralC2_0	db '  General   ',1Bh,'C2'
db    1
aLoyC4		db 'Loy ',1Bh,'C4'
db    1
aIntWarChrC0	db 'Int War Chr  ',1Bh,'C0'
db    1
aMenB0_0	db 'Men',1Bh,'B0'
db    1
aC7_55		db 1Bh,'C7'
db    1
db    0
aC2_60		db 1Bh,'C2'
db    1
aRuler_3	db 'Ruler',0
aC3_30		db 1Bh,'C3'
db    1
aExile_1	db 'exile',0
a6sC7		db '%6s',1Bh,'C7'
db    1
a12s_3		db ' %-12s',0
db '  ---',0
a5d_5		db '%5d',0
a4d4d4d6d	db '%4d%4d%4d%6d',0
aSeeNext	db 'See next',0
aC7_56		db 1Bh,'C7'
db    1
a_fSC7		db 1Bh,'=.F%s',1Bh,'C7'
db    1
db    0
a0f12sC2	db 1Bh,'=0F%-12s',1Bh,'C2'
db    1
aORo		db 1Bh,'=)O',1Bh,'RO',0
aNone_5		db 'None',0
aRulerMarrS	db 'Ruler (Marr: %s)',0
aC7_57		db 1Bh,'C7'
db    1
aOSC7		db 1Bh,'=)O%s',1Bh,'C7'
db    1
db    0
aSSRoC7		db '%s',27h,'s',0Ah
db 1Bh,'RO',1Bh,'C7'
db    1
aFollowerOC5	db 'follower',1Bh,'=,O',1Bh,'C5'
db    1
aM0loyC7	db 1Bh,'M0Loy',1Bh,'C7'
db    1
a4d_4		db '%4d',0
aM0_9		db 1Bh,'M0',0
a_oC5		db 1Bh,'=.O',1Bh,'C5'
db    1
aMenC7_3	db 'Men',1Bh,'C7'
db    1
a6dC6_0		db '%6d',1Bh,'=,[',1Bh,'C6'
db    1
aAgeC7_0	db 'Age',1Bh,'C7'
db    1
a4dC6		db '%4d',1Bh,'C6'
db    1
db    0
a_SerC7		db 1Bh,'=.[Ser',1Bh,'C7'
db    1
db ' ---',0
aC3_31		db 1Bh,'=)^',1Bh,'C3'
db    1
aExileC7	db 'Exile',1Bh,'C7'
db    1
a_C6_0		db 1Bh,'=.[',1Bh,'C6'
db    1
aSerC7		db 'Ser',1Bh,'C7'
db    1
a4d_5		db '%4d',0
aEC4		db 1Bh,'=*e',1Bh,'C4'
db    1
aIntC7_0	db 'Int',1Bh,'C7'
db    1
a4dEC4		db '%4d',1Bh,'=,e',1Bh,'C4'
db    1
aWarC7_0	db 'War',1Bh,'C7'
db    1
a4d_eC4		db '%4d',1Bh,'=.e',1Bh,'C4'
db    1
aChrC7_0	db 'Chr',1Bh,'C7'
db    1
a4d_6		db '%4d',0
aViewWhom_0	db 'View whom',0
aC6_65		db 1Bh,'C6'
db    1
a1_thisProvince	db '1.This province',0Ah
db '2.Generals',0Ah
db '3.List of generals',0Ah
db 1Bh,'C7'
db    1
aViewWhat_1	db 'View what',0
aC2_61		db 1Bh,'C2'
db    1
aSC7_78		db '%s,',1Bh,'C7'
db    1
aWeVeBeenAttack	db ' we',27h,'ve been attacked',0Ah
db 'by the Yellow Turban rebels!',0Ah,0
aC3_32		db 1Bh,'C3'
db    1
aWeHeldBackTheR	db 'We held back the rebels,',0Ah
db 'but exhausted our gold and food',0
aC4_14		db 1Bh,'C4'
db    1
aTheWeaklingsLe	db 'The weaklings left their',0Ah
db 'gold and food and ran',0
aC5_22		db 1Bh,'C5'
db    1
aTheRebelsHaveS	db 'The rebels have surrendered',0
aC2_62		db 1Bh,'C2'
db    1
aSC6_2		db '%s, ',1Bh,'C6'
db    1
aSC7_79		db '%s',1Bh,'C7'
db    1
aWasCapturedB_0	db ' was',0Ah
db ' captured by ',1Bh,'C2'
db    1
aSC7_80		db '%s!',1Bh,'C7'
db    1
db    0
aMoveWhere_0	db 'Move where',0
db 0Ah,0
aC5_23		db 1Bh,'C5'
db    1
a1_move4_rest2_	db '1.Move    4.Rest',0Ah
db '2.View    5.Other',0Ah
db 1Bh,'C13.Settle',1Bh,'C7'
db    1
aSYourOrders?15	db 0Ah
db '%s, your orders? (1-5) ',0
aC5_24		db 1Bh,'C5'
db    1
a1_move4_rest_0	db '1.Move    4.Rest',0Ah
db '2.View    5.Other',0Ah
db '3.Settle',1Bh,'C7'
db    1
aSYourOrders?_0	db 0Ah
db '%s, your orders? (1-5) ',0
db    0
aC2_63		db 1Bh,'C2'
db    1
aSC7_0		db '%s,',1Bh,'C7'
db    1
aWeVeCapturedRu	db ' we',27h,'ve captured ruler-in-exile',0Ah
db 1Bh,'C2'
db    1
aSSC7		db '%s',27h,'s ',1Bh,'C7'
db    1
aFollowerC6	db 'follower ',1Bh,'C6'
db    1
aSC7_1		db '%s',1Bh,'C7'
db    1
aInProvince2d	db 0Ah
db 'in Province %2d',0
aC2_9		db 1Bh,'C2'
db    1
aSC7		db '%s',1Bh,'C7'
db    1
aHasSettledInC6	db ' has settled in ',1Bh,'C6'
db    1
aProvince2dC7	db 'Province %2d',1Bh,'C7'
db    1
db    0
db  1Fh
db    1
db  10h
db  40h	; @
db  1Fh
db    1
db  1Ch
db    4
db 0B2h	;   *
db    0
db  0Eh
db    0
db 0B0h	;   *
db  0Ah
aMobilityNowC2	db 'Mobility now',1Bh,'C2'
db    1
a2dC0		db '%2d',1Bh,'C0'
db    1
aW_1		db 1Bh,'W',0
align 2
db  48h	; H
db    4
db  8Bh	;   *
db  25h	; %
db 0B0h	;   *
db    9
db 0FDh	;   *
db  25h	; %
db 0BAh	;   *
db    0
db  57h	; W
db  22h	; "
db  84h	;   *
db  0Ah
db  84h	;   *
db  29h	; )
db 0FEh	;   *
db    7
db  48h	; H
db  2Ch	; ,
db  7Ch	; |
db    1
db 0D2h	;   *
db  2Ch	; ,
db    6
db    9
db  0Ah
db    0
db    1
db    3
db    6
db  0Ah
db    0
db    1
db    2
db  0Ah
db    5
db    7
db    8
db  0Ah
db    5
db    6
db    0
db    0
db    4
db    5
db    6
db    0
db    4
db    5
db    0
db    0
db    2
db    3
db    0
db    0
db    1
db    2
db    3
db    0
db    1
db    2
db    0
db    0
aB7_24		db 1Bh,'B7'
db    1
aC0_21		db 1Bh,'C0'
db    1
aSBurnedToDeath	db '%s burned',0Ah
db 'to death',0
aC0_20		db 1Bh,'C0'
db    1
aB7_23		db 1Bh,'B7'
db    1
aSSArmyHasRunOu	db '%s',27h,'s army has',0Ah
db 'run out of food',1Bh,'C7'
db    1
aB0_18		db 1Bh,'B0'
db    1
db    0
db    0
aAsPerTheSecret	db 'As per the secret pact',0Ah,0
aC2_8		db 1Bh,'C2'
db    1
aSC0_7		db '%s ',1Bh,'C0'
db    1
aSwitchedSides_	db 'switched',0Ah
db 'sides.',1Bh,'W',0
align 2
db  3Fh	; ?
db 0FFh
db 0FFh
db 0FCh	;   *
db  7Fh	; 
db 0FFh
db 0FFh
db 0FEh	;   *
db 0E4h	;   *
db    0
db 0B2h	;   *
db 0FFh
db  30h	; 0
db    0
db 0B0h	;   *
db  7Fh	; 
db 0FFh
db 0FFh
db 0FEh	;   *
db  3Fh	; ?
db 0FFh
db 0FFh
db 0FCh	;   *
db  50h	; P
db  5Ah	; Z
db  46h	; F
db  3Ch	; <
db    0
db  32h	; 2
db  14h
db    0
db  0Ah
db    0
db  0Ah
db    0
db  0Ch
db    0
db  0Ah
db    0
db    8
db    0
db  0Fh
db    0
db  14h
db    0
db    5
db    0
db    1
db    2
db    1
db    0
db    0
db    0
db    2
db    2
db    2
db    1
db    0
db    1
aSPositionWhere	db '%s:',0Ah
db 'Position where?',0Ah
db '(0 = enter) ',0
aC2_7		db 1Bh,'C2'
db    1
aB0_17		db 1Bh,'B0'
db    1
a12s5dC7	db '%-12s:%5d',1Bh,'C7'
db    1
db    0
aC7_13		db 1Bh,'C7'
db    1
aB0_16		db 1Bh,'B0'
db    1
a2d		db '%2d',0
aC7_14		db 1Bh,'C7'
db    1
aB0_14		db 1Bh,'B0'
db    1
db    0
aC7_12		db 1Bh,'C7'
db    1
aB0_15		db 1Bh,'B0'
db    1
a12s5d_0	db '%-12s:%5d',0
aItWorked	db 'It worked!',0
aOops		db 'Oops!',0
aCaughtFire	db 'Caught fire!',0
aFireballFailed	db 'Fireball failed',0
db    0
db    0
db 0F0h	;   *
db 0B3h	;   *
db 0FBh	;   *
db 0B3h	;   *
db    1
db 0B4h	;   *
db  0Eh
db 0B4h	;   *
db  1Fh
db  88h	;   *
db  90h	;   *
db  89h	;   *
db  44h	; D
db  8Bh	;   *
db  2Ah	; *
db  8Dh	;   *
aWRw		db 1Bh,'=#W',1Bh,'RW',0
a1vRvC0		db 1Bh,'=1V',1Bh,'RV',1Bh,'C0'
db    1
aB7_22		db 1Bh,'B7'
db    1
db    0
aC0_19		db 1Bh,'C0'
db    1
aB7_21		db 1Bh,'B7'
db    1
aCDC7		db 1Bh,'=!c%d',1Bh,'C7'
db    1
aB0_13		db 1Bh,'B0'
db    1
aM0_0		db 1Bh,'M0',0
aC0_18		db 1Bh,'C0'
db    1
aB7_20		db 1Bh,'B7'
db    1
aE_0		db 1Bh,'=!e',0
aNoWind_0	db ' No wind',0
aWind_0		db '  Wind ',0
aC0_17		db 1Bh,'C0'
db    1
aB7_19		db 1Bh,'B7'
db    1
aE		db 1Bh,'=!e',0
aNoWind		db ' No wind',0
aWind		db '  Wind ',0
db 0ABh	;   *
db 0B3h	;   *
db  3Bh	; ;
db 0B4h	;   *
db  1Bh
db 0B3h	;   *
db  5Bh	; [
db 0B5h	;   *
db 0EBh	;   *
db 0B5h	;   *
db 0CBh	;   *
db 0B4h	;   *
db  28h	; (
db 0BDh	;   *
db 0C8h	;   *
db 0BCh	;   *
db 0F8h	;   *
db 0BCh	;   *
db 0B8h	;   *
db 0BDh	;   *
db  58h	; X
db 0BDh	;   *
db  88h	;   *
db 0BDh	;   *
aB0_12		db 1Bh,'B0'
db    1
aC5_0		db 1Bh,'C5'
db    1
aU12sC2		db 1Bh,'=$U%-12s',1Bh,'C2'
db    1
aC12s		db 1Bh,'=$c%12s',0
aC7_11		db 1Bh,'C7'
db    1
aB0_11		db 1Bh,'B0'
db    1
a6luC4menC7	db '%6lu  ',1Bh,'C4Men',1Bh,'C7'
db    1
a10lu		db '%10lu',0
aC7_10		db 1Bh,'C7'
db    1
aB0_10		db 1Bh,'B0'
db    1
a3d3dC4		db '%3d/%3d  ',1Bh,'C4'
db    1
aGeneralsC7	db 'Generals',1Bh,'C7'
db    1
a5d_0		db '%5d',0
aC7_9		db 1Bh,'C7'
db    1
aB0_9		db 1Bh,'B0'
db    1
a7luC6		db '%7lu  ',1Bh,'C6'
db    1
aFoodC7		db 'Food',1Bh,'C7'
db    1
db  25h	; %
db  39h	; 9
db  6Ch	; l
db  75h	; u
db    0
aC7_8		db 1Bh,'C7'
db    1
aB0_8		db 1Bh,'B0'
db    1
a5dC6		db '%5d  ',1Bh,'C6'
db    1
aGoldC7		db 'Gold',1Bh,'C7'
db    1
a9d		db '%9d',0
aC1_3		db 1Bh,'C1'
db    1
a1_Move4_View2_	db '1. Move    4. View',0Ah
db '2. Attack  5. Strategy',0Ah
db '3. Wait    6. Flee ',0
aC0_16		db 1Bh,'C0'
db    1
aB7_18		db 1Bh,'B7'
db    1
a4vS		db 1Bh,'=4V%s,',0
db  0Ah
aYourOrders	db 'your orders',0
db  0Ah
aForS		db 'for %s',0
a16?		db ' (1-6)? ',0
a12s_0		db '%-12s',0
a12s		db '%12s',0
aC7_7		db 1Bh,'C7'
db    1
aB0_7		db 1Bh,'B0'
db    1
db    0
db    0
db 'Ȼ'
db 0F8h	;   *
aXB0		db '  *(  *X  *',1Bh,'B0'
db    1
aC7_6		db 1Bh,'C7'
db    1
aM4		db 1Bh,'M4',0
aO3d_0		db 'o%3d',0
a3d_2		db '+%3d',0
a4d_0		db '%4d',0
aM0		db 1Bh,'M0',0
align 2
db    1
db    3
db    0
db    1
db    2
db    1
db    2
db    5
db    0
db    3
db    4
db    3
db    4
db    5
db    2
db    4
db    5
aSHasBetrayedS	db '%s has betrayed',0Ah
db '%s!',0
aWasCaptured_0	db 'was',0Ah
db 'captured',0
aWasCapturedByT	db 'was',0Ah
db 'captured by the enemy',0
aWasKilled	db 'was',0Ah
db 'killed',0
aWasKilledByThe	db 'was',0Ah
db 'killed by the enemy',0
aC2_6		db 1Bh,'C2'
db    1
aSC0_6		db '%s ',1Bh,'C0'
db    1
aS_2		db '%s',0
a1KVC0		db '$  *1  *K  *V  *',1Bh,'C0'
db    1
aB7_17		db 1Bh,'B7'
db    1
a6vMobilityC1	db 1Bh,'=6V(mobility ',1Bh,'C1'
db    1
aDC0_1		db '%d',1Bh,'C0'
db    1
db ')',0
aStartWhere	db 'Start where',0
aWhichDirecti_0	db 'Which direction',0
aS?_0		db '%s?  ',0
aJ		db '    ****'
db    2
db    3
db    3
db    0
db    5
db    3
db    3
db  0Ah
aC0_15		db 1Bh,'C0'
db    1
aB7_16		db 1Bh,'B7'
db    1
aCanTMoveThere	db 'Can',27h,'t move there',0
db  0Ah
aC0_14		db 1Bh,'C0'
db    1
aB7_15		db 1Bh,'B7'
db    1
aNotEnoughMobil	db 'Not enough mobility',0
aC1_2		db 1Bh,'C1'
db    1
a1_normalMoveC5	db '1.Normal move',0Ah
db 1Bh,'C52.Move enemy',0Ah
db 1Bh,'C0'
db    1
aChooseWhich?_4	db 'Choose which? (1-2) ',0
aC1_1		db 1Bh,'C1'
db    1
a1_normalMove2_	db '1.Normal move',0Ah
db '2.Move enemy',0Ah
db 1Bh,'C0'
db    1
aChooseWhich?_3	db 'Choose which? (1-2) ',0
db  0Ah
db  0Ah
aCannotMoveEnem	db 'Cannot move enemy',0
aC2_5		db 1Bh,'C2'
db    1
aB0_6		db 1Bh,'B0'
db    1
aToBeContinuedN	db 1Bh,'=,:To be continued next month...',1Bh,'C7'
db    1
aW_0		db 1Bh,'W',0
db    0
aAttackWhere	db 'Attack where',0
aWhichDirection	db 'Which direction',0
aS?		db '%s? ',0
aS1cDS3cD	db '·Ϸ%s ',1Bh,'=1c%d',0Ah
db 0Ah
db '%s ',1Bh,'=3c%d',0
aMissed		db 'Missed!',0
aBetray		db 'Betray',0Ah,0
a?		db '?',0
aC1_0		db 1Bh,'C1'
db    1
a1_Normal2_Simu	db '1. Normal',0Ah
db '2. Simultaneous',0Ah
db '3. Fireball',0Ah
db '4. Charge',0Ah
db 1Bh,'C0'
db    1
aWhichAttack?14	db 'Which attack? (1-4) ',0
aJan		db 'Jan',0
aFeb		db 'Feb',0
aMar		db 'Mar',0
aApr		db 'Apr',0
aMay		db 'May',0
aJun		db 'Jun',0
aJul		db 'Jul',0
aAug		db 'Aug',0
aSep		db 'Sep',0
aOct		db 'Oct',0
aNov		db 'Nov',0
aDec		db 'Dec',0
aB7_14		db 1Bh,'B7'
db    1
aC0_13		db 1Bh,'C0'
db    1
aV2d_5sS	db 1Bh,'=!V%2d.%-5s %s',0
aDHLPTXADISendW	db '\  *`  *d  *h  *l  *p  *t  *x  *|    *******Send whom_'
db    5
db '  *',0
db 9,0
db '  *'
db 0FFh
db    0
db    0
db    0
db    0
db 0FFh
db    0
db 0FFh
db    8
db    0
db '  *',0
db 0Bh,0
db '  *'
db    1
db    1
db    0
db '  *',0
db  1Ah
db    0
db '  *'
db 0FFh
db    1
db    0
db '  *',0
aI		db '  *'
db    2
db '  *'
db    1
db    0
db    0
db    0
db    5
db    1
db    0
db    1
db    1
db    1
db    0
db    1
db 0FFh
db    0
db 0FFh
db 0FFh
db    0
db    1
db    3
db    0
db    3
db 0FFh
db    2
db    3
db 0FFh
db    1
db    2
db    3
db    2
db 0FFh
db 0FFh
db    1
db    2
;     ***************************************************************************
jmp	dword ptr [bp+si+7Fh]
;     ***************************************************************************
dec	dx
stosb
;     ***************************************************************************
db 0FEh	;   *
;     ***************************************************************************
stosb
jg	short near ptr loc_1AF45+1
push	bp
clc
;     ***************************************************************************
db    0
db    0
;     ***************************************************************************
jg	short loc_1AF4C
dec	dx
repne push es
add	bh, [bx+60h]
push	sp
call	near ptr loc_1AEF4+2
jg	short near ptr loc_1AF56+2
dec	ax
rol	byte ptr loc_17EFF+3, cl
pusha
push	ax
test	al, 0
add	[bp+si+7Fh], ch
dec	dx
stosb
;     ***************************************************************************
db 0FEh	;   *
;     ***************************************************************************
stosb
pusha
pusha
inc	ax
;     ***************************************************************************
db    0
db    0
db    0
;     ***************************************************************************
pop	di
jg	short loc_1AF5B
;     ***************************************************************************
db 0FEh	;   *
db 0FEh	;   *
;     ***************************************************************************
stosb
pop	di
jnz	short near ptr loc_1AF73+3
clc
add	al, bh
pop	di
push	5Fh ; '_'
test	byte ptr loc_15FF9+1, 74h
pop	di
call	near ptr unk_1A726
pop	di
push	0D65Fh
push	es
cli
pop	di
jo	short loc_1AF8E
test	al, 0
clc
pop	di
jg	short near ptr loc_1AF7E+1
;     ***************************************************************************
db 0FEh	;   *
db 0FEh	;   *
;     ***************************************************************************
stosb
inc	ax
pusha
inc	ax
;     ***************************************************************************
db    0
db    0
db    0
;     ***************************************************************************
push	5Fh ; '_'
pop	di
stosb
;     ***************************************************************************
db 0FEh	;   *
db 0FEh	;   *
;     ***************************************************************************
pusha
pop	di
push	bp
add	al, bh
add	[bx+si+5Fh], ah
dec	dx
add	dh, dh
push	es
pusha
pop	di
push	sp
add	al, ch
add	[bx+si+5Fh], ah
dec	ax
add	dl, dh
push	es
pusha
pop	di
push	ax
add	[bx+si+6A00h], ch
pop	di
pop	di
stosb
;     ***************************************************************************
db 0FEh	;   *
db 0FEh	;   *
;     ***************************************************************************
pusha
inc	ax
inc	ax
;     ***************************************************************************
db    0
db    0
db    0
;     ***************************************************************************
pop	di
push	4Ah ; 'J'
;     ***************************************************************************
db 0FEh	;   *
;     ***************************************************************************
stosb
stosb
pop	di
jg	short loc_1AFCC
clc
clc
add	[bx+7Fh], bl
dec	dx
idiv	dl
add	bl, [bx+7Fh]
push	sp
call	near ptr loc_1B07C+2
pop	di
jg	short near ptr loc_1AFD0+1
setalc
cli
add	bl, [bx+7Fh]
push	ax
test	al, 0F8h
add	[bx+6Ah], bl
dec	dx
;     ***************************************************************************
db 0FEh	;   *
;     ***************************************************************************
stosb
stosb
inc	ax
pusha
inc	ax
fild	word ptr [bx+si]
mov	dl, 0
adc	al, 0
mov	al, 40h	; '@'
or	[bx+si], al
and	al, al
adc	[si], al
adc	[si-77D0h], al
xor	al, dl
xor	[bx+si+64h], cl
arpl	[bx+di], bx
insb
db	66h
ja	short near ptr loc_1AFF1+1
jbe	short near ptr loc_1AFB0+1
jg	short near ptr loc_1B037+3
neg	word ptr [bp+di]
add	[bp+si+0CFFh], dh
add	[bx+si-81h], dh
;     ***************************************************************************
db 0FFh
db 0FEh	;   *
;     ***************************************************************************
aas
;     ***************************************************************************
db 0FFh
db 0FFh
db 0FCh	;   *
db    0
;     ***************************************************************************
sbb	[bx+si], al
add	[bp+0],	bh
add	bx, bx
add	byte ptr [bx], 18h
loopne	loc_1AFF5
sbb	[bx+si], bh
add	[bx+si], bl
;     ***************************************************************************
db    0
db    0
;     ***************************************************************************
sbb	[bx+si], al
add	[bx+si], bl
;     ***************************************************************************
db    0
db    0
;     ***************************************************************************
sbb	[bx+si], al
add	[bx+si], bl
;     ***************************************************************************
db    0
db    0
;     ***************************************************************************
sbb	[bx+si], al
add	[bx+si], bl
sub	ax, [bx+si]
mov	dl, 0
push	ss
add	[bx+si-781h], dh
add	[si+0],	bh
add	[bx+0],	ch
add	[bp+di-40h], ah
add	[bx+si-10h], ah
add	[bx+si+3Ch], ah
;     ***************************************************************************
db    0
db    0
;     ***************************************************************************
sldt	word ptr [bx+si]
add	ax, ax
;     ***************************************************************************
db    0
db    0
;     ***************************************************************************
mov	al, byte ptr loc_10019+2
mov	dl, 0
push	ss
add	[bx+si-1E1h], dh
;     ***************************************************************************
db    0
db    0
;     ***************************************************************************
db	3Eh
add	[bx+si], al
test	byte ptr [bx+si], 3
mov	byte ptr [bx+si], 0Fh
push	es
add	[si], bh
push	es
add	al, dh
add	[bp+di], al
rol	byte ptr [bx+si], 5
sbb	[bx+si], al
mov	dl, 0
sbb	[bx+si], al
mov	al, 18h
;     ***************************************************************************
db    0
db    0
;     ***************************************************************************
sbb	[bx+si], al
add	[bx+si], bl
;     ***************************************************************************
db    0
db    0
;     ***************************************************************************
sbb	[bx+si], al
add	[bx+si], bl
;     ***************************************************************************
db    0
db    0
;     ***************************************************************************
sbb	[bx+si], al
add	[bx+si], bl
add	[si], bl
sbb	[bx+si], bh
pop	es
sbb	al, ah
add	bx, bx
add	byte ptr [bx+si], 7Eh ;	'~'
;     ***************************************************************************
db    0
db    0
;     ***************************************************************************
sbb	[bp+si], ah
add	[bp+si+0F00h], dh
add	[bx+si+0A0h], dh
add	ax, ax
add	[bx], cl
add	[bx+si+3Ch], ah
add	[bx+si-10h], ah
add	[bp+di-40h], ah
add	[bx+0],	ch
add	[si+0],	bh
add	[bx-8],	bh
sbb	[bx+si], al
mov	dl, 0
push	ss
add	[bx+si+5], dh
add	[bp+di], al
rol	byte ptr [bx+si], 0
lock add [bx+si], al
cmp	al, 6
add	[bx], cl
push	es
add	[bp+di], al
mov	byte ptr [bx+si], 0
test	byte ptr [bx+si], 0
db	3Eh
add	[bx], bl
;     ***************************************************************************
db 0FEh	;   *
;     ***************************************************************************
sbb	ax, [bx+si]
mov	dl, 0
or	al, 0
mov	al, 25h	; '%'
jnb	short near ptr loc_1B0C2+2
and	ax, 0A64h
or	ah, [di]
jnb	short loc_1B0CB
and	ax, 64h
;     ***************************************************************************
db    0
;     ***************************************************************************
or	al, [bx+si]
sbb	ax, [bp+di+32h]
;     ***************************************************************************
db    1
aSC0		db '%s,',1Bh,'C0'
db    1
db    0
db    1
db    0
Challenge	db 'I,',1Bh,'C2'
db    1
aSC0_4		db '%s,',0Ah
db 1Bh,'C0'
db    1
aChallengeYouTo	db 'challenge you',0Ah
db 'to combat!',0
aC3_0		db 1Bh,'C3'
db    1
aSC0_3		db '%s',1Bh,'C0'
db    1
aWillGladlyFigh	db 0Ah
db 'will gladly',0Ah
db 'fight you!',0Ah,0
aC1		db 1Bh,'C1'
db    1
aSC0_2		db '%s',1Bh,'C0'
db    1
db  0Ah
aIsACoward	db 'is a coward!',0
aC0_12		db 1Bh,'C0'
db    1
aB7_13		db 1Bh,'B7'
db    1
db    0
aRv		db 1Bh,'RV',0
aR		db 1Bh,'R`',0
db    0
db    6
;     ***************************************************************************
mov	si, 0BE2Dh
push	ax
mov	si, 6666h
push	6767h
db	65h, 66h, 67h, 66h, 67h
mov	gs:[bp+67h], ah
db	66h, 66h
jnz	short near ptr loc_1B1BF+1
db	64h
push	bp
db	65h, 67h
push	bp
db	66h, 66h, 67h, 66h, 66h
push	si
db	66h, 66h, 67h
push	di
db	65h
jz	short loc_1B1C3
db	66h, 65h, 67h, 66h, 67h
ja	short loc_1B1D3
outsb
;     ***************************************************************************
db    0
aWasCaptured	db 'was',0Ah
db 'captured',0
dw 421Bh
db  37h	; 7
db    1
db    0
aC0_11		db 1Bh,'C0'
db    1
db  53h	; S
db  74h	; t
db  61h	; a
db  6Ch	; l
db  65h	; e
db  6Dh	; m
db  61h	; a
db  74h	; t
db  65h	; e
db  21h	; !
dw 571Bh
db    0
dw 431Bh
db  32h	; 2
db    1
db  25h	; %
db  73h	; s
db  1Bh
db  43h	; C
db  30h	; 0
db    1
db  20h
db  25h	; %
db  73h	; s
db  21h	; !
db    0
db  0Ah
db  0Ah
db    0
dw 0BEA9h
dw 0BEADh
aC6_2		db 1Bh,'C6'
db    1
aB0_5		db 1Bh,'B0'
db    1
db  1Bh
db  3Dh	; =
db  24h	; $
db  55h	; U
aName_1		db ' # Name'
db  11h
db    1
db 0B2h	;   *
db  20h
db  0Ah
db    0
db 0B0h	;   *
aWarMen_1	db 'War  Men',0
aC7_5		db 1Bh,'C7'
db    1
a2d12s3d5d_1	db '%2d %-12s: %3d %5d',0
aTheEnemyRefuse	db ' the enemy',0Ah
db 'refuses to fight!',0
aWhoWillFight	db ' who will',0Ah
db 'fight ',0
db ' ',0
aChallengedPers	db 'challenged',0Ah
db 'personal combat!',0
aAcceptedAPerso	db 'accepted a',0Ah
db 'personal combat',0Ah
db 'challenge!',0
aSHasSW		db '%s',0Ah
db 'has %s',1Bh,'W',0
align 2
db  53h	; S
db 0BFh	;   *
db  6Fh	; o
db 0BFh	;   *
aSuggestPersona	db ' suggest',0Ah
db 'personal combat',0
db  20h
aAcceptTheChall	db 'accept the',0Ah
db 'challenge',0
aC0_10		db 1Bh,'C0'
db    1
aB7_11		db 1Bh,'B7'
db    1
db    0
aChallengesUsTo	db ' challenges',0Ah
db 'us to personal combat.',0Ah
db 1Bh,'W',0
aC2_2		db 1Bh,'C2'
db    1
aB7_10		db 1Bh,'B7'
db    1
aSC0_1		db '%s',1Bh,'C0'
db    1
db 0Ah,0
aHasAgreedToPer	db 'has agreed to',0Ah
db 'personal combat.',1Bh,'W',0
aHasSuggestedPe	db 'has suggested',0Ah
db 'personal combat.',1Bh,'W',0
aC0_9		db 1Bh,'C0'
db    1
aB7_9		db 1Bh,'B7'
db    1
aSSArmyHasRefus	db '%s',27h,'s army',0Ah
db 'has refused',0Ah
db 'personal combat.',1Bh,'W',0
align 2
db 0A6h	;   *
db 0BFh	;   *
db 0BFh	;   *
db 0BFh	;   *
db 1Bh
db  43h	; C
db  31h	; 1
db  44h	; D
db  65h	; e
db  66h	; f
dw 431Bh
db  30h	; 0
db    0
dw 431Bh
db  32h	; 2		; Changed: C2A
db  41h	; A
db  74h	; t
db  74h	; t
dw 431Bh
db  30h	; 0
db    0
dw 431Bh
db  30h	; 0
db    1
dw 421Bh
db  37h	; 7
db    1
dw 7325h
db  3Ah	; :
db  20h
dw 7325h
db    0
dw 431Bh
db  30h	; 0
db    1
dw 421Bh
db  37h	; 7
db    1
db  25h	; %
db  33h	; 3
db  64h	; d
db    0
dw 421Bh
db  30h	; 0
db    1
dw 431Bh
db  36h	; 6
db    1
dw 3D1Bh
dw 6127h
aVs		db 'VS',0
dw 431Bh
db  34h	; 4
db    1
dw 3D1Bh
dw 592Dh
aPersonalCombat	db '<Personal Combat>',0
dw 431Bh
db  30h	; 0
db    1
dw 421Bh
db  37h	; 7
db    1
db    0
db    0
db  8Ch	;   *
db 0C0h	;   *
db  96h	;   *
db 0C0h	;   *
db  25h	; %
db  33h	; 3
db  64h	; d
db    0
dw 431Bh
db  30h	; 0
db    1
dw 421Bh
db  37h	; 7
db    1
dw 3D1Bh
dw 5631h
aRound2d	db 'Round %2d',0
db  1Bh
dw 3243h
db    1
dw 7325h
db  1Bh
dw 3043h
db    1
db  27h	; '
db  73h	; s
db  20h
db  77h	; w
db  61h	; a
db  72h	; r
db  0Ah
db  61h	; a
db  62h	; b
db  69h	; i
db  6Ch	; l
db  69h	; i
db  74h	; t
db  79h	; y
db  20h
db  69h	; i
db  6Eh	; n
db  63h	; c
db  72h	; r
db  65h	; e
db  61h	; a
db  73h	; s
db  65h	; e
db  64h	; d
db  0Ah
db  66h	; f
db  72h	; r
db  6Fh	; o
db  6Dh	; m
db  20h
db  1Bh
db  43h	; C
db  33h	; 3
db    1
aDC0		db '%d',1Bh,'C0'
db    1
aToC1		db ' to ',1Bh,'C1'
db    1
dw 6425h
dw 431Bh
db  30h	; 0
db    1
db  1Bh
db  57h	; W
db    0
aSMenAreDeserti	db 27h,'s',0Ah
db 'men are deserting!',0
align 2
aReinforcements	db 'Reinforcements',0Ah
db 'have arrived',0
db  1Bh
db  43h	; C
db  30h	; 0
db    1
db  1Bh
db  42h	; B
db  37h	; 7
db    1
db    0
aSHasRequestedR	db '%s has',0Ah
db 'requested',0Ah
db 'reinforcements',0
aSHasReturnedWi	db '%s has',0Ah
db 'returned with',0Ah
db 'reinforcements',0
aSArmyHasArrive	db 27h,'s army',0Ah
db 'has arrived',0
aNotEnoughGoldW	db 'Not enough gold',1Bh,'W',0
aC3		db 1Bh,'C3'
db    1
aLoy		db 'Loy',0
aC5		db 1Bh,'C5'
db    1
aMen		db 'Men',0
aTrn		db 'Trn',0
aArms		db 'Arms',0
aC4_0		db 1Bh,'C4'
db    1
aInt		db 'Int',0
aWar		db 'War',0
aChr		db 'Chr',0
aC7_4		db 1Bh,'C7'
db    1
aB0_3		db 1Bh,'B0'
db    1
aVSM0		db 1Bh,'=*V%s',1Bh,'M0',0
aC7_3		db 1Bh,'C7'
db    1
a_vage4dC2	db 1Bh,'=.VAge%4d',1Bh,'C2'
db    1
aV		db 1Bh,'=,V',0
aRulerC7	db 'Ruler',1Bh,'C7'
db    1
aK		db 1Bh,'=',27h,'k---',0
aCommander	db 'Commander',0
aGeneral	db 'General',0
aC7_2		db 1Bh,'C7'
db    1
aK3d		db 1Bh,'=',27h,'k%3d',0
aS_0		db '%s',0
aIC7		db 1Bh,'=(i',1Bh,'C7'
db    1
a5d		db '%5d',0
aI5d_3		db 1Bh,'=)i%5d',0
aI5d_2		db 1Bh,'=*i%5d',0
aI5d_1		db 1Bh,'=+i%5d',0
aI5d_0		db 1Bh,'=,i%5d',0
aI5d		db 1Bh,'=-i%5d',0
align 2
db 0F5h	;   *
db 0C1h	;   *
db 0FDh	;   *
db 0C1h	;   *
db    5
db 0C2h	;   *
db    9
db 0C2h	;   *
db  0Eh
db 0C2h	;   *
db  16h
db 0C2h	;   *
db  1Ah
db 0C2h	;   *
aViewWhom?0View	db 'View whom?',0Ah
db '(0:view, RET:quit) ',0
align 2
aC2_0		db 1Bh,'C2'
db    1
aSSArmyC0	db '%s',27h,'s army ',1Bh,'C0'
db    1
db  0Ah
aSSTactics	db '%s',27h,'s tactics',0
db  32h	; 2
db  3Ch	; <
db  50h	; P
db  14h
db  46h	; F
db  1Eh
db  28h	; (
db    0
db    2
db    3
db    3
db    7
db    5
db    3
db    3
aMoveEnemy	db 'move enemy',0
aMove		db 'move',0
aSimult_Attack	db 'simult. attack',0
aAttack		db 'attack',0
aFireball	db 'fireball',0
aCharge		db 'charge',0
aWait		db 'wait',0
aReinforce	db 'reinforce',0
aBribe		db 'bribe',0
aWithdrawArmy	db 'withdraw army',0
aWithdraw	db 'withdraw',0
db  1Bh
aB7CD		db 'B7',1Bh,'C%d'
db    1
db  1Bh
db  3Dh	; =
db  34h	; 4
db  56h	; V
db  3Ch	; <
db  25h	; %
db  73h	; s
db  3Eh	; >
db  1Bh
db  57h	; W
db    0
db  0Bh
db 0C3h	;   *
db  16h
db 0C3h	;   *
db  1Bh
db 0C3h	;   *
db  2Ah	; *
db 0C3h	;   *
db  31h	; 1
db 0C3h	;   *
db  3Ah	; :
db 0C3h	;   *
db  41h	; A
db 0C3h	;   *
db  46h	; F
db 0C3h	;   *
db  50h	; P
db 0C3h	;   *
db  56h	; V
db 0C3h	;   *
db  64h	; d
db 0C3h	;   *
db    1
db    1
db    2
db    2
db    2
db    2
db    0
db    3
db    3
db    3
db    3
db    0
db    0
db    1
db    3
db    2
db    4
db    5
db    1
db    0
db    2
db    3
db    5
db    4
db    2
db    1
db    5
db    0
db    4
db    3
db    3
db    4
db    0
db    5
db    1
db    2
db    4
db    3
db    5
db    0
db    2
db    1
db    5
db    4
db    2
db    3
db    1
db    0
db  1Bh
aC0_3		db 'C0'
db    1
db  1Bh
aB7_3		db 'B7'
db    1
aCanTUseThatCom	db 'Can',27h,'t use that command!',1Bh,'W',0
db  1Bh
aC7_1		db 'C7'
db    1
db  1Bh
aB0_2		db 'B0'
db    1
a12s5d		db '%-12s %5d',0
db  1Bh
aC6_0		db 'C6'
db    1
db  1Bh
aB0_1		db 'B0'
db    1
db  23h	; #
db  20h
db  20h
db  20h
aName		db 'Name',7
db    5
db '  * ',8,0
aWarMenC7	db '  *War  Men',1Bh,'C7'
db    1
db    0
a2d12s3d5d_0	db '%2d %-12s %3d %5d',0
db  1Bh
aC0_2		db 'C0'
db    1
db  1Bh
aB7_2		db 'B7'
db    1
db    0
db  1Bh
db  52h	; R
db  56h	; V
aNoEnemyGeneral	db 'No enemy generals to',0Ah
db 'recruit.',1Bh,'W',0
aRecruitWhom	db 'Recruit whom',0
aOfferHowMuchGo	db 'Offer how much gold',0Ah,0
db 0Ah,0
aIsLoyalToHisMa	db ' is loyal',0Ah
db 'to his master.',1Bh,'W',0
db  1Bh
aB0_0		db 'B0'
db    1
a2d12s3d5d	db '%2d %-12s %3d %5d',0
aC4		db 1Bh,'C4'
db    1
db    0
db '*',0
db ' ',0
aC7_0		db 1Bh,'C7'
db    1
db    0
db  1Bh
db  43h	; C
db  36h	; 6
db    1
db  1Bh
db  42h	; B
db  30h	; 0
db    1
aName_0		db '#   Name  *',0
db '  * ',8,0
db 0B0h	;   *
aWarMen		db 'War  Men',0
aC0_1		db 1Bh,'C0'
db    1
db  1Bh
db  42h	; B
db  37h	; 7
db    1
db    0
aSendWhom	db 'Send whom',0
db  1Bh
db  43h	; C
db  35h	; 5
a1_reinforce2_0	db '1.Reinforce',0Ah
db '2.Bribe',1Bh,'C0'
db    1
aChooseWhich?_2	db 0Ah
db 'Choose which? (1-2) ',0
db  1Bh
db  43h	; C
db  35h	; 5
a1_reinforceC12	db '1.Reinforce',0Ah
db 1Bh,'C12.Bribe',1Bh,'C0'
db    1
aChooseWhich?_1	db 0Ah
db 'Choose which? (1-2) ',0
db  1Bh
db  43h	; C
db  31h	; 1
a1_reinforceC52	db '1.Reinforce',0Ah
db 1Bh,'C52.Bribe',1Bh,'C0'
db    1
aChooseWhich?_0	db 0Ah
db 'Choose which? (1-2) ',0
db  1Bh
db  43h	; C
db  31h	; 1
a1_reinforce2_b	db '1.Reinforce',0Ah
db '2.Bribe',1Bh,'C0'
db    1
aChooseWhich?12	db 0Ah
db 'Choose which? (1-2) ',0
aC2		db 1Bh,'C2'
db    1
db  1Bh
dw 3742h
db    1
aWithdrawC0	db '<Withdraw>:',0Ah
db 1Bh,'C0'
db    1
db    0
a3d		db '%3d',0
aC0		db 0Ah
db 0Ah
db 1Bh,'C0'
db    1
aSWithdrawWhere	db '%s,',0Ah
db 'withdraw where? ',0
db  1Bh
aC0_0		db 'C0'
db    1
db  1Bh
aB7_0		db 'B7'
db    1
db    0
aCannotWithdraw	db 'Cannot withdraw',0
aWithdrawWholeA	db 'Withdraw whole',0Ah
db 'army',0
db  0Ah
db  0Ah
aWhereWillYou_0	db 'Where will you',0Ah
db 'withdraw to? ',0
dw 0A0Ah
aS		db '%s,',0Ah,0
aWhereWillYouWi	db 'Where will you',0Ah
db 'withdraw to',0
db  1Bh
db  43h	; C
db  37h	; 7
db    1
db  1Bh
db  42h	; B
db  30h	; 0
db    1
db    0
db  6Fh	; o
db  25h	; %
db  33h	; 3
db  64h	; d
db    0
db  2Bh	; +
db  25h	; %
db  33h	; 3
db  64h	; d
db    0
db  25h	; %
db  34h	; 4
db  64h	; d
db    0
db    0
db    2
db    3
db    3
db    7
db    5
db    3
db    3
db    0
db    1
db    2
db    2
db    0
db    3
db    1
db    2
db    0
db    0
db    0
db  90h	;   *
db  36h	; 6
db    0
db    0
db    0
db    0
db    5
db '  *'
db    1
db '  *',0
db  15h
db    0
a_c_file_info	db '  *_C_FILE_INFO=',0Dh,0
db '  *',0
db  1Ch
db    0
db '  *'
db  14h
db    0
aBbb		db '    ***'
db    1
db    1
db    7
db    0
db '  *',0
db  15h
db    0
aQJ		db '    **Ʀ/'
db    4
db    0
db '  *',0
db  12h
db    0
db '  *'
db  16h
db    2
db    2
db  18h
db  0Dh
db    9
db  0Ch
db  0Ch
db  0Ch
db    7
db    8
db  16h
db  16h
db 0FFh
db    2
db  0Dh
db  12h
db    2
db 0FFh
db    0
db  20h
db    0
db    0
db    0
db    0
db  8Eh	;   *
db  35h	; 5
db  8Eh	;   *
db  35h	; 5
db  8Eh	;   *
db  35h	; 5
db    0
db    0
db    0
db    0
db '  *-%',0
db '  *',0
db  0Eh
db    0
aNmsg		db '  *<<NMSG>>',0
db    0
aR6000StackOver	db 'R6000',0Dh,0Ah
db '- stack overflow',0Dh,0Ah,0
db    3
db    0
aR6003IntegerDi	db 'R6003',0Dh,0Ah
db '- integer divide by 0',0Dh,0Ah,0
db 9,0
aR6009NotEnough	db 'R6009',0Dh,0Ah
db '- not enough space for environment',0Dh,0Ah,0
db 0FCh	;   *
db    0
db 0Dh,0Ah,0
db 0FFh
db    0
aRunTimeError	db 'run-time error ',0
db    2
db    0
aR6002FloatingP	db 'R6002',0Dh,0Ah
db '- floating-point support not loaded',0Dh,0Ah,0
db    1
db    0
aR6001NullPoint	db 'R6001',0Dh,0Ah
db '- null pointer assignment',0Dh,0Ah,0
db '  *',0
db 0B2h	;   *
db 0FFh
db  0Eh
db    0
db 0B0h	;   *
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
dseg		ends

;     ***************************************************************************

; Segment type:	Pure code
seg001		segment	byte public 'CODE' use16
assume cs:seg001
assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
byte_4BA90	db 0CCh, 34h, 2	dup(0)	; DATA XREF: seg001:00E2  w
word_4BA94	dw 0			; DATA XREF: start:loc_4BAA7  w
; seg001:loc_4BB2B  r
word_4BA96	dw 2DE1h		; DATA XREF: start:loc_4BAB0  r
byte_4BA98	db 0, 10h, 0EFh, 3Ch	; DATA XREF: seg001:00D8  r seg001:00DC  r
word_4BA9C	dw 3C28h		; DATA XREF: start:loc_4BAAA  r
;     ***************************************************************************

loc_4BA9E:		 /* DOS offset ---> 4315:E */
push	dx

loc_4BA9F:		 /* DOS offset ---> 4315:F */
inc	dx
assume ss:seg002, ds:nothing

;     *************** S U B	R O U T	I N E     ***************************************


public start
start		proc far
mov	ax, es

loc_4BAA2:		 /* DOS offset ---> 4316:2 */
add	ax, 10h

loc_4BAA5:		 /* DOS offset ---> 4316:5 */
push	cs
pop	ds
assume ds:seg001

loc_4BAA7:		 /* DOS offset ---> 4316:7 */
mov	word_4BA94, ax

loc_4BAAA:		 /* DOS offset ---> 4316:A */
add	ax, word_4BA9C

loc_4BAAE:		 /* DOS offset ---> 4316:E */
mov	es, ax
assume es:nothing

loc_4BAB0:		 /* DOS offset ---> 4317:0 */
mov	cx, word_4BA96

loc_4BAB4:		 /* DOS offset ---> 4317:4 */
mov	di, cx

loc_4BAB6:		 /* DOS offset ---> 4317:6 */
dec	di

loc_4BAB7:		 /* DOS offset ---> 4317:7 */
mov	si, di

loc_4BAB9:		 /* DOS offset ---> 4317:9 */
std

loc_4BABA:		 /* DOS offset ---> 4317:A */
rep movsb

loc_4BABC:		 /* DOS offset ---> 4317:C */
push	ax

loc_4BABD:		 /* DOS offset ---> 4317:D */
mov	ax, 50

loc_4BAC0:		 /* DOS offset ---> 4318:0 */
push	ax

locret_4BAC1:
retf
start		endp ; sp = -4

;     ***************************************************************************

loc_4BAC2:		 /* DOS offset ---> 4318:2 */
mov	bx, es

loc_4BAC4:		 /* DOS offset ---> 4318:4 */
mov	ax, ds
dec	ax

loc_4BAC7:		 /* DOS offset ---> 4318:7 */
mov	ds, ax
assume ds:nothing

loc_4BAC9:		 /* DOS offset ---> 4318:9 */
mov	es, ax
assume es:nothing

loc_4BACB:		 /* DOS offset ---> 4318:B */
mov	di, 0Fh

loc_4BACE:		 /* DOS offset ---> 4318:E */
mov	cx, 10h

loc_4BAD1:		 /* DOS offset ---> 4319:1 */
mov	al, 0FFh

loc_4BAD3:		 /* DOS offset ---> 4319:3 */
repe scasb
inc	di

loc_4BAD6:		 /* DOS offset ---> 4319:6 */
mov	si, di
mov	ax, bx
dec	ax
mov	es, ax
assume es:nothing

loc_4BADD:		 /* DOS offset ---> 4319:D */
mov	di, 0Fh

loc_4BAE0:				; CODE XREF: seg001:loc_4BB24  j		 /* DOS offset ---> 431A:0 */
mov	cl, 4

loc_4BAE2:		 /* DOS offset ---> 431A:2 */
mov	ax, si

loc_4BAE4:		 /* DOS offset ---> 431A:4 */
not	ax

loc_4BAE6:		 /* DOS offset ---> 431A:6 */
shr	ax, cl

loc_4BAE8:		 /* DOS offset ---> 431A:8 */
jz	short loc_4BAF3

loc_4BAEA:		 /* DOS offset ---> 431A:A */
mov	dx, ds
sub	dx, ax

loc_4BAEE:		 /* DOS offset ---> 431A:E */
mov	ds, dx
assume ds:nothing

loc_4BAF0:		 /* DOS offset ---> 431B:0 */
or	si, 0FFF0h

loc_4BAF3:				; CODE XREF: seg001:loc_4BAE8  j		 /* DOS offset ---> 431B:3 */
mov	ax, di

loc_4BAF5:		 /* DOS offset ---> 431B:5 */
not	ax
shr	ax, cl

loc_4BAF9:		 /* DOS offset ---> 431B:9 */
jz	short loc_4BB04

loc_4BAFB:		 /* DOS offset ---> 431B:B */
mov	dx, es

loc_4BAFD:		 /* DOS offset ---> 431B:D */
sub	dx, ax
mov	es, dx
assume es:nothing

loc_4BB01:		 /* DOS offset ---> 431C:1 */
or	di, 0FFF0h

loc_4BB04:				; CODE XREF: seg001:loc_4BAF9  j		 /* DOS offset ---> 431C:4 */
lodsb
mov	dl, al
dec	si

loc_4BB08:		 /* DOS offset ---> 431C:8 */
lodsw

loc_4BB09:		 /* DOS offset ---> 431C:9 */
mov	cx, ax
inc	si

loc_4BB0C:		 /* DOS offset ---> 431C:C */
mov	al, dl
and	al, 0FEh

loc_4BB10:		 /* DOS offset ---> 431D:0 */
cmp	al, 0B0h ; '  *'

loc_4BB12:		 /* DOS offset ---> 431D:2 */
jnz	short loc_4BB1A
lodsb

loc_4BB15:		 /* DOS offset ---> 431D:5 */
rep stosb
jmp	short loc_4BB20
;     ***************************************************************************
align 2

loc_4BB1A:				; CODE XREF: seg001:loc_4BB12  j		 /* DOS offset ---> 431D:A */
cmp	al, 0B2h ; '  *'

loc_4BB1C:		 /* DOS offset ---> 431D:C */
jnz	short loc_4BB89

loc_4BB1E:		 /* DOS offset ---> 431D:E */
rep movsb

loc_4BB20:				; CODE XREF: seg001:0087  j		 /* DOS offset ---> 431E:0 */
mov	al, dl

loc_4BB22:		 /* DOS offset ---> 431E:2 */
test	al, 1

loc_4BB24:		 /* DOS offset ---> 431E:4 */
jz	short loc_4BAE0

loc_4BB26:		 /* DOS offset ---> 431E:6 */
mov	si, 125h
push	cs
pop	ds
assume ds:seg001

loc_4BB2B:		 /* DOS offset ---> 431E:B */
mov	bx, word_4BA94

loc_4BB2F:		 /* DOS offset ---> 431E:F */
cld

loc_4BB30:		 /* DOS offset ---> 431F:0 */
xor	dx, dx

loc_4BB32:				; CODE XREF: seg001:00C4  j		 /* DOS offset ---> 431F:2 */
lodsw
mov	cx, ax
jcxz	short loc_4BB4A

loc_4BB37:		 /* DOS offset ---> 431F:7 */
mov	ax, dx
add	ax, bx
mov	es, ax
assume es:nothing

loc_4BB3D:				; CODE XREF: seg001:loc_4BB48  j		 /* DOS offset ---> 431F:D */
lodsw
mov	di, ax
cmp	di, 0FFFFh
jz	short loc_4BB56
add	es:[di], bx

loc_4BB48:				; CODE XREF: seg001:00D4  j		 /* DOS offset ---> 4320:8 */
loop	loc_4BB3D

loc_4BB4A:				; CODE XREF: seg001:00A5  j		 /* DOS offset ---> 4320:A */
cmp	dx, 0F000h
jz	short loc_4BB66

loc_4BB50:		 /* DOS offset ---> 4321:0 */
add	dx, 1000h
jmp	short loc_4BB32
;     ***************************************************************************

loc_4BB56:				; CODE XREF: seg001:00B3  j		 /* DOS offset ---> 4321:6 */
mov	ax, es

loc_4BB58:		 /* DOS offset ---> 4321:8 */
inc	ax
mov	es, ax
assume es:nothing
sub	di, 10h
add	es:[di], bx
dec	ax
mov	es, ax
assume es:nothing
jmp	short loc_4BB48
;     ***************************************************************************

loc_4BB66:				; CODE XREF: seg001:00BE  j		 /* DOS offset ---> 4322:6 */
mov	ax, bx
mov	di, word ptr byte_4BA98
mov	si, word ptr byte_4BA98+2
add	si, ax
add	word ptr byte_4BA90+2, ax
sub	ax, 10h
mov	ds, ax
assume ds:dseg
mov	es, ax
mov	bx, 0
cli
mov	ss, si
assume ss:nothing
mov	sp, di
sti
jmp	dword ptr cs:[bx]
;     ***************************************************************************

loc_4BB89:				; CODE XREF: seg001:loc_4BB1C  j		 /* DOS offset ---> 4324:9 */
mov	ah, 40h	; '@'

loc_4BB8B:		 /* DOS offset ---> 4324:B */
mov	bx, 2

loc_4BB8E:		 /* DOS offset ---> 4324:E */
mov	cx, 16h
mov	dx, cs
mov	ds, dx
assume ds:seg001
mov	dx, 10Fh
int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
mov	ax, 4CFFh
int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
; AL = exit code
;     ***************************************************************************
aPackedFileIsCo	db 'Packed file is corrupt  *'
db    5
db 0DDh	;   *
db  11h
db  4Ah	; J
db  2Ah	; *
db 0D8h	;   *
unk_4BBBC	db  2Ah	; *
unk_4BBBD	db 0E4h	;   *
db  41h	; A
db  37h	; 7
db  41h	; A
db  99h	;   *
db  3Fh	; ?
db  79h	; y
db  3Fh	; ?
db  5Bh	; [
db  46h	; F
db  4Fh	; O
db  46h	; F
db  40h	; @
db  46h	; F
db  37h	; 7
unk_4BBCC	db  46h	; F
db  11h
db  46h	; F
db 0DFh	;   *
db  45h	; E
db  3Fh	; ?
db  45h	; E
db  55h	; U
db 44h,	21h, 44h, 0E9h,	43h, 0DAh, 43h,	0BCh, 43h, 98h
db 43h,	0C0h, 42h, 0BBh, 42h, 0B2h, 42h, 14h, 48h, 0CCh
db 46h,	0AEh, 46h, 94h,	46h, 80h, 46h, 6Fh, 46h, 66h, 46h
db 0C4h, 49h, 0BBh, 49h, 0B3h, 49h, 9Fh, 49h, 96h, 49h
db 7Fh,	49h, 52h, 49h, 11h, 4Bh, 0F3h, 4Ah, 0EDh, 4Ah
db 0E2h, 4Ah, 0D0h, 4Ah, 78h, 4Ah, 5Eh,	4Ah, 3Eh, 4Ah
db 21h,	4Ah, 0ECh, 49h,	0F3h, 4Eh, 0B7h, 4Eh, 6, 4Eh, 0FAh
db 4Dh,	8Dh, 4Dh, 41h
unk_4BC20	db  4Dh	; M
db  34h	; 4
db  4Dh	; M
db  0Ch
db  4Dh	; M
db 0FFh
db 4Ch,	0E5h, 4Ch, 0BAh, 4Ch, 81h, 4Ch,	5Bh, 3 dup(4Ch)
db 2Fh,	4Ch, 21h, 4Ch, 11h, 4Ch, 0F5h, 4Bh, 0DBh, 4Bh
db 0C8h, 4Bh, 91h, 4Bh,	79h, 4Bh, 36h, 52h, 0EDh, 51h
db 0DAh, 51h, 8Eh, 51h,	79h, 51h, 52h, 51h, 12h, 51h, 4Eh
db 50h,	31h, 50h, 0FBh,	4Fh, 0F2h, 4Fh,	0DEh, 4Fh, 77h
db 4Fh,	6Eh, 4Fh, 5Ah, 4Fh, 3Eh, 4Fh, 1Fh, 4Fh,	0Fh, 4Fh
db 0EEh, 53h, 0E0h, 53h, 6Ch, 53h, 66h,	53h, 0E0h, 52h
db 1, 56h, 0EBh, 55h, 0C9h, 55h, 0BCh, 55h, 3Dh, 55h, 0E3h
db 54h,	0D2h, 59h, 0CAh, 59h, 0C1h, 59h, 0B7h, 59h, 9Dh
unk_4BC84	db  59h	; Y
db  7Ch	; |
db  59h	; Y
db  5Ah	; Z
db  59h	; Y
db  43h	; C
db  59h	; Y
db  0Ch
db  59h	; Y
db 0F9h	;   *
db  58h	; X
db 0E0h
unk_4BC90	db  58h	; X
db 0C6h	;   *
db  58h	; X
db 0A6h	;   *
db  58h	; X
db  76h	; v
db  58h	; X
db  32h	; 2
db  58h	; X
db  2Bh	; +
db  58h	; X
db  17h
db  58h	; X
db 1, 58h, 0EBh, 57h, 0D5h, 57h, 6Dh, 5Dh, 15h,	5Dh, 18h
db 5Ch,	0Ah, 5Ch, 0EAh,	5Bh, 0D7h, 5Bh,	0C4h, 5Bh, 6Ch
db 5Bh,	56h, 5Bh, 4Eh, 5Bh, 45h, 5Bh, 3Dh, 5Bh,	24h, 5Bh
db 18h,	5Bh, 0CDh, 5Ah,	0B5h, 5Ah, 88h,	5Ah, 0E2h, 59h
db 0A9h, 60h, 38h, 60h,	12h, 60h, 0C2h,	5Fh, 0B4h, 5Fh
db 0A5h, 5Eh, 79h, 5Eh,	43h, 5Eh, 6, 5Eh, 0C6h,	5Dh, 89h
db 5Dh,	7Bh, 64h, 55h, 64h, 37h, 64h, 19h, 64h,	0FDh, 63h
db 0C0h, 63h, 76h, 63h,	6Ah, 63h, 57h, 63h, 39h, 63h, 29h
db 63h,	1Dh, 63h, 0FEh,	62h, 0F2h, 62h,	0DAh, 62h, 0BDh
db 62h,	88h, 62h, 78h, 62h, 67h, 62h, 47h, 62h,	0Eh, 62h
db 0ECh, 61h, 0CEh, 61h, 1Fh, 61h, 0Bh,	61h, 2,	61h, 0E9h
db 60h,	0BFh, 66h, 0A9h, 66h, 84h, 66h,	75h, 66h, 6Ch
db 66h,	5Eh, 66h, 49h, 66h, 34h, 66h, 0F9h, 65h, 98h, 65h
db 4Fh,	65h, 10h, 65h, 2, 65h, 94h, 64h, 28h, 6Ah, 1Ch
db 6Ah,	14h, 6Ah, 0FBh,	69h, 0F4h, 69h,	0D4h, 69h, 0C8h
db 69h,	9Bh, 69h, 8Fh, 69h, 78h, 69h, 4Dh, 69h,	2Bh, 69h
db 9, 69h, 0E7h, 68h, 0D9h, 68h, 0D4h, 68h, 0CDh, 68h
db 0C3h, 68h, 0ACh, 68h, 0A1h, 68h, 98h, 68h, 88h, 68h
db 79h,	68h, 6Ah, 68h, 5Bh, 68h, 4Dh, 68h, 41h,	68h, 35h
db 68h,	29h, 68h, 7, 68h, 0D0h,	67h, 0C4h, 67h,	0CAh, 6Dh
db 0B2h, 6Dh, 96h, 6Dh,	86h, 6Dh, 7Eh, 6Dh, 6Eh, 6Dh, 53h
db 6Dh,	3Ah, 6Dh, 27h, 6Dh, 1Fh, 6Dh, 7, 6Dh, 0E0h, 6Ch
db 0D5h, 6Ch, 0B6h, 6Ch, 0A6h, 6Ch, 9Dh, 6Ch, 94h, 6Ch
db 84h,	6Ch, 7Ch, 3 dup(6Ch), 51h, 6Ch,	38h, 6Ch, 25h
db 6Ch,	1Dh, 6Ch, 5, 6Ch, 0F0h,	6Bh, 0E7h
byte_4BDA4	db 6Bh,	0DFh, 6Bh, 0CBh, 6Bh, 0ACh, 6Bh, 0A1h, 6Bh, 7Dh
db 6Bh,	66h, 6Bh, 56h, 6Bh, 4Dh, 6Bh, 3Dh, 6Bh,	2Eh, 6Bh
db 22h,	6Bh, 1Ah, 6Bh, 0F8h, 6Ah, 0ECh,	6Ah, 0E4h, 6Ah
db 0D5h, 6Ah, 0C5h, 6Ah, 0BAh, 6Ah, 85h, 6Ah, 78h, 6Ah
db 73h,	6Ah, 6Ch, 6Ah, 5Ch, 6Ah, 45h, 6Ah, 0B7h, 6Eh, 0B2h
db 6Eh,	0A6h, 6Eh, 9Dh,	6Eh, 95h, 6Eh, 90h, 6Eh, 83h, 6Eh
db 78h,	6Eh, 35h, 6Eh, 26h, 6Eh, 69h, 72h, 43h,	72h, 0F2h
db 71h,	0DDh, 71h, 0C8h, 71h, 0B3h, 71h, 8Eh, 71h, 79h
db 71h,	54h, 71h, 2Dh, 71h, 7, 71h, 0E1h, 70h, 0BBh, 70h
db 9Ah,	70h, 7Ah, 70h, 54h, 70h, 2Ch, 70h, 0D3h, 6Fh, 9Ah
db 6Fh,	38h, 6Fh, 0Dh, 6Fh, 0E3h, 6Eh, 0D9h, 6Eh, 0CFh
db 6Eh,	0C6h, 73h, 96h,	73h, 69h, 73h, 54h, 73h, 3Fh, 73h
db 2Ah,	73h, 15h, 73h, 0F0h, 72h, 0C9h,	72h, 9Bh, 72h
db 7Dh,	77h, 71h, 77h, 5Dh, 77h, 51h, 77h, 3Dh,	77h, 31h
db 77h,	1Dh, 77h, 11h, 77h, 0FDh, 76h, 0F1h, 76h, 0DDh
db 76h,	0D1h, 76h, 0BDh, 76h, 0A3h, 76h, 69h, 76h, 4Dh
db 76h,	3Dh, 76h, 0F5h,	75h, 0D3h, 75h,	0A5h, 75h, 0Ch
db 75h,	0FDh, 74h, 0DDh, 74h, 0C0h, 74h, 0A7h, 74h, 80h
db 74h,	60h, 74h, 43h, 74h, 2Ah, 74h, 0Ah, 74h,	0ECh, 73h
db 0E1h, 73h, 21h, 79h,	19h, 79h, 2, 79h, 0F7h,	78h, 0E1h
db 78h,	0C8h, 78h, 0BCh, 78h, 0B0h, 78h, 0A4h, 78h, 9Ch
db 78h,	7Ch, 78h, 6Eh, 78h, 5Eh, 78h, 53h, 78h,	3Eh, 78h
db 35h,	78h, 0EEh, 77h,	0E5h, 77h, 0DDh, 77h, 0C5h, 77h
db 0B8h, 77h, 0B3h, 77h, 0A7h, 77h, 9Eh, 77h, 91h, 77h
db 0DEh, 7Ch, 0D3h, 7Ch, 0C7h, 7Ch, 0ACh, 7Ch, 84h, 7Ch
db 79h,	7Ch, 70h, 7Ch, 68h, 7Ch, 58h, 7Ch, 41h,	7Ch, 30h
db 7Ch,	16h, 7Ch, 3, 7Ch, 0EBh,	7Bh, 0DDh, 7Bh,	0B2h, 7Bh
db 99h,	7Bh, 8Ah, 7Bh, 78h, 7Bh, 0Eh, 7Bh, 0FDh, 7Ah, 6Dh
db 7Ah,	5Bh, 7Ah, 52h, 7Ah, 45h, 7Ah, 3Eh, 7Ah,	25h, 7Ah
db 15h,	7Ah, 7,	7Ah, 0F0h, 79h,	0E6h, 79h, 0C2h, 79h, 0A6h
db 79h,	8Bh, 79h, 3Dh, 79h, 88h, 80h, 7Ch, 80h,	6Ch, 80h
db 49h,	80h, 34h, 80h, 28h, 80h, 0FBh, 7Fh, 0ECh, 7Fh
db 0CBh, 7Fh, 0B7h, 7Fh, 60h, 7Fh, 54h,	7Fh, 48h, 7Fh
db 3Dh,	7Fh, 28h, 7Fh, 15h, 7Fh, 0Ah, 7Fh, 2, 7Fh, 0FAh
db 7Eh,	0DEh, 7Eh, 52h,	7Eh, 1Bh, 7Eh, 3, 7Eh, 0F5h, 7Dh
db 0DCh, 7Dh, 9Eh, 7Dh,	69h, 7Dh, 50h, 7Dh, 24h, 7Dh, 7Ah
db 81h,	60h, 81h, 54h, 81h, 4Bh, 81h, 42h, 81h,	3Ah, 81h
db 26h,	81h, 0,	81h, 0F8h, 80h,	0E8h, 80h, 0D8h, 80h, 8Dh
db 84h,	6Ch, 84h, 0F0h,	83h, 0C4h, 83h,	89h, 83h, 56h
db 83h,	0A5h, 82h, 97h,	82h, 50h, 82h, 3Eh, 82h, 0Bh, 82h
db 0D4h, 81h, 0B8h, 81h, 0AFh, 81h, 95h, 81h, 0DEh, 88h
db 0CFh, 88h, 0B1h, 88h, 0A1h, 88h, 8Ah, 88h, 54h, 88h
db 13h,	88h, 0C9h, 87h,	77h, 87h, 4Eh, 87h, 39h, 87h, 0Fh
db 87h,	0FFh, 86h, 0EDh, 86h, 0DAh, 86h, 20h, 8Ch, 4, 8Ch
db 0EDh, 8Bh, 0D8h, 8Bh, 0C9h, 8Bh, 0C4h, 8Bh, 0BCh, 8Bh
db 0B7h, 8Bh, 0ACh, 8Bh, 78h, 8Bh, 6Fh,	8Bh, 6Ah, 8Bh
db 61h,	8Bh, 4Bh, 8Bh, 42h, 8Bh, 3Ah, 8Bh, 28h,	8Bh, 19h
db 8Bh,	0Dh, 8Bh, 2, 8Bh, 0F7h,	8Ah, 0E6h, 8Ah,	0CCh, 8Ah
db 73h,	8Ah, 64h, 8Ah, 39h
byte_4BFA4	db 8Ah,	2Eh, 8Ah, 22h, 8Ah, 12h, 8Ah, 5, 8Ah, 0FDh, 89h
db 0BDh, 89h, 8Dh, 89h,	53h, 89h, 3Ah, 89h, 21h, 89h, 15h
db 89h,	5, 89h,	0F5h, 88h, 9Ah,	8Fh, 93h, 8Fh, 6Dh, 8Fh
db 5Ah,	8Fh, 16h, 8Fh, 0Ah, 8Fh, 0C8h, 8Eh, 0BAh, 8Eh
db 1Ah,	8Eh, 0F3h, 8Dh,	0C8h, 8Dh, 0BCh, 8Dh, 0A8h, 8Dh
db 9Ch,	8Dh, 7Bh, 8Dh, 70h, 8Dh, 52h, 8Dh, 48h,	8Dh, 36h
db 8Dh,	1Ch, 8Dh, 9, 8Dh, 0F2h,	8Ch, 0DFh, 8Ch,	0C5h, 8Ch
db 0B9h, 8Ch, 0A9h, 8Ch, 8Eh, 8Ch, 7Eh,	8Ch, 6Eh, 8Ch
db 61h,	8Ch, 58h, 8Ch, 50h, 8Ch, 39h, 93h, 9, 93h, 0B7h
db 92h,	88h, 92h, 6Ch, 92h, 50h, 92h, 2Fh, 92h,	1Ah, 92h
db 0FEh, 91h, 0E2h, 91h, 0C1h, 91h, 59h, 91h, 40h, 91h
db 71h,	90h, 66h, 90h, 3Eh, 90h, 30h, 90h, 0Eh,	90h, 5
db 90h,	0F2h, 8Fh, 0EAh, 8Fh, 0B1h, 95h, 85h, 95h, 1Bh
db 95h,	0Ah, 95h, 0D9h,	94h, 0C2h, 94h,	0B1h, 94h, 0A2h
db 94h,	24h, 94h, 13h, 94h, 4, 94h, 0CCh, 93h, 38h, 99h
db 30h,	99h, 27h, 99h, 22h, 99h, 13h, 99h, 0F7h, 98h, 0D7h
db 98h,	0C6h, 98h, 0B2h, 98h, 9Bh, 98h,	8Bh, 98h, 83h
db 98h,	72h, 98h, 3Ch, 98h, 10h, 98h, 8, 98h, 0FEh, 97h
db 0C2h, 97h, 0ABh, 97h, 92h, 97h, 7Dh,	97h, 6Bh, 97h
db 58h,	97h, 4Ch, 97h, 40h, 97h, 2Ah, 97h, 0EEh, 96h, 0DFh
db 96h,	0BAh, 96h, 9Eh,	96h, 86h, 96h, 5Ch, 96h, 3Ch, 96h
db 18h,	96h, 0FAh, 95h,	0DCh, 95h, 11h,	9Dh, 0E6h, 9Ch
db 0D7h, 9Ch, 0CCh, 9Ch, 0C4h, 9Ch, 0BCh, 9Ch, 0B4h, 9Ch
db 0A9h, 9Ch, 9Dh, 9Ch,	7Fh, 9Ch, 69h, 9Ch, 5Dh, 9Ch, 45h
db 9Ch,	3Ah, 9Ch, 1Ah, 9Ch, 0FFh, 9Bh, 0DAh, 9Bh, 0C5h
db 9Bh,	0B5h, 9Bh, 9Ch,	9Bh, 8Bh, 9Bh, 75h, 9Bh, 5Fh, 9Bh
db 54h,	9Bh, 48h, 9Bh, 38h, 9Bh, 2Fh, 9Bh, 21h,	9Bh, 0F4h
db 9Ah,	0B4h, 9Ah, 0AAh, 9Ah, 89h, 9Ah,	80h, 9Ah, 78h
db 9Ah,	65h, 9Ah, 53h, 9Ah, 4Ah, 9Ah, 2Fh, 9Ah,	1Dh, 9Ah
db 0FEh, 99h, 0EDh, 99h, 0D1h, 99h, 0C5h, 99h, 0B9h, 99h
db 0AEh, 99h, 0A3h, 99h, 97h, 99h, 8Eh,	99h, 45h, 9Dh
db 26h,	9Dh, 0D7h, 0A0h, 0B9h, 0A0h, 79h, 0A0h,	5Eh, 0A0h
db 41h,	0A0h, 31h, 0A0h, 24h, 0A0h, 14h, 0A0h, 8, 0A0h
db 0F9h, 9Fh, 0E8h, 9Fh, 93h, 9Fh, 59h,	9Fh, 4Ah, 9Fh
db 10h,	9Fh, 0F3h, 9Eh,	0E3h, 9Eh, 0D7h, 9Eh, 0C7h, 9Eh
db 93h,	9Eh, 82h, 9Eh, 6Ch, 9Eh, 46h, 9Eh, 30h,	9Eh, 22h
db 9Eh,	0BAh, 9Dh, 0ABh, 9Dh, 98h, 9Dh,	81h, 9Dh, 97h
db 0A4h, 78h, 0A4h, 38h, 0A4h, 9, 0A4h,	0F9h, 0A3h, 0E9h
db 0A3h, 0D6h, 0A3h, 0CEh, 0A3h, 99h, 0A3h, 84h, 0A3h
db 55h,	0A3h, 48h, 0A3h, 12h, 0A3h, 0A7h, 0A2h,	97h, 0A2h
db 8Ch,	0A2h, 7Ah, 0A2h, 6Ah, 0A2h, 62h, 0A2h, 1Eh, 0A2h
db 0FEh, 0A1h, 0ECh, 0A1h, 0D2h, 0A1h, 0AEh, 0A1h, 90h
db 0A1h, 82h, 0A1h, 70h, 0A1h, 5Eh, 0A1h, 4Bh, 0A1h, 2Bh
db 0A1h, 30h, 0A8h, 1Ah, 0A8h, 15h, 0A8h, 0F2h,	0A7h, 0BBh
db 0A7h, 0A9h, 0A7h, 76h, 0A7h,	69h, 0A7h, 5Bh,	0A7h, 3Dh
db 0A7h, 2Fh, 0A7h, 9Fh, 0A6h, 88h, 0A6h, 80h, 0A6h, 6Dh
db 0A6h, 4Bh, 0A6h, 3Eh, 0A6h, 26h, 0A6h, 0B2h,	0A5h, 0A3h
db 0A5h, 99h, 0A5h, 88h, 0A5h, 6Bh, 0A5h, 50h, 0A5h, 0Dh
db 0A5h, 2, 0A5h, 0E7h,	0A4h, 0D3h, 0A4h, 0BDh,	0A4h, 0ACh
db 0A4h, 0A7h, 0A4h, 3Ch, 0A9h,	0FAh
byte_4C1A4	db 0A8h, 5Bh, 0A8h, 0FEh, 0ACh,	0F2h, 0ACh, 0DAh, 0ACh
db 0F8h, 0ABh, 0D7h, 0ABh, 15h,	0ABh, 0EDh, 0AAh, 0C4h
db 0AAh, 0B2h, 0AAh, 0A1h, 0AAh, 15h, 0AAh, 0A5h, 0A9h
db 9Dh,	0A9h, 94h, 0A9h, 8Ch, 0A9h, 83h, 0A9h, 7Bh, 0A9h
db 5Ch,	0A9h, 57h, 0A9h, 9Dh, 0B0h, 5Bh, 0B0h, 47h, 0B0h
db 3Ah,	0B0h, 1Bh, 0B0h, 0Bh, 0B0h, 0FEh, 0AFh,	0DBh, 0AFh
db 0B3h, 0AFh, 95h, 0AFh, 76h, 0AFh, 66h, 0AFh,	59h, 0AFh
db 32h,	0AFh, 0F2h, 0AEh, 0CCh,	0AEh, 0AFh, 0AEh, 0Ch
db 0AEh, 83h, 0ADh, 3Dh, 0ADh, 56h, 0B4h, 4Eh, 0B4h, 46h
db 0B4h, 7Ah, 0B3h, 5Ch, 0B3h, 3Eh, 0B3h, 27h, 0B3h, 0B8h
db 0B2h, 9Fh, 0B2h, 76h, 0B2h, 52h, 0B2h, 4Ah, 0B2h, 20h
db 0B2h, 10h, 0B2h, 7, 0B2h, 0F8h, 0B1h, 0EBh, 0B1h, 0CAh
db 0B1h, 0A3h, 0B1h, 96h, 0B1h,	6Fh, 0B1h, 47h,	0B1h, 0D4h
db 0B0h, 0Dh, 0B8h, 0ECh, 0B7h,	0E7h, 0B7h, 0D0h, 0B7h
db 0BCh, 0B7h, 0B3h, 0B7h, 98h,	0B7h, 93h, 0B7h, 88h, 0B7h
db 83h,	0B7h, 7Eh, 0B7h, 79h, 0B7h, 71h, 0B7h, 24h, 0B7h
db 1Fh,	0B7h, 1Ah, 0B7h, 15h, 0B7h, 0Eh, 0B7h, 9, 0B7h
db 4, 0B7h, 0BDh, 0B6h,	0ADh, 0B6h, 0A8h, 0B6h,	0A0h, 0B6h
db 94h,	0B6h, 88h, 0B6h, 58h, 0B6h, 3, 0B6h, 0F8h, 0B5h
db 0E5h, 0B5h, 7Eh, 0B5h, 72h, 0B5h, 3Fh, 0B5h,	19h, 0B5h
db 0EDh, 0B4h, 0DDh, 0B4h, 0BBh, 0B4h, 85h, 0B4h, 8Eh
db 0B8h, 82h, 0B8h, 7Ah, 0B8h, 6Eh, 0B8h, 62h, 0B8h, 59h
db 0B8h, 51h, 0B8h, 49h, 0B8h, 39h, 0B8h, 31h, 0B8h, 25h
db 0B8h, 1Dh, 0B8h, 25h, 0BCh, 1Dh, 0BBh, 15h, 0BBh, 5
db 2 dup(0BBh),	0BAh, 0B2h, 0BAh, 9Eh, 0BAh, 3Ah, 0BAh
db 27h,	0BAh, 1Ah, 0BAh, 8, 0BAh, 0E7h,	0B9h, 0CDh, 0B9h
db 0C0h, 0B9h, 0AEh, 0B9h, 0A2h, 0B9h, 60h, 0B9h, 4Ch
db 0B9h, 3Bh, 0B9h, 1Eh, 0B9h, 0Dh, 0B9h, 0FDh,	0B8h, 0E6h
db 0B8h, 0D5h, 0B8h, 0C5h, 0B8h, 0AEh, 0B8h, 9Dh, 0B8h
db 4Bh,	0BFh, 35h, 0BFh, 1Dh, 0BFh, 9, 0BFh, 0FEh, 0BEh
db 0EEh, 0BEh, 0E2h, 0BEh, 0D2h, 0BEh, 0C9h, 0BEh, 0C2h
db 0BEh, 0B6h, 0BEh, 0AEh, 0BEh, 0A5h, 0BEh, 8Dh, 0BEh
db 77h,	0BEh, 6Ch, 0BEh, 46h, 0BEh, 35h, 0BEh, 29h, 0BEh
db 1Bh,	0BEh, 0FBh, 0BDh, 0CDh,	0BDh, 0A2h, 0BDh, 90h
db 0BDh, 87h, 0BDh, 6Eh, 0BDh, 5Dh, 0BDh, 4Dh, 0BDh, 32h
db 0BDh, 1Bh, 0BDh, 5, 0BDh, 0FAh, 0BCh, 0EEh, 0BCh, 0E6h
db 0BCh, 0DDh, 0BCh, 0D5h, 0BCh, 0B0h, 0BCh, 84h, 0BCh
db 7Bh,	0BCh, 73h, 0BCh, 6Ah, 0BCh, 59h, 0BCh, 0A1h, 0C2h
db 8Eh,	0C2h, 7Bh, 0C2h, 23h, 0C2h, 0F1h, 0C1h,	0DEh, 0C1h
db 0CBh, 0C1h, 0BAh, 0C1h, 6Ch,	0C1h, 58h, 0C1h, 47h, 0C1h
db 37h,	0C1h, 0FEh, 0C0h, 0F6h,	0C0h, 0EDh, 0C0h, 0E4h
db 0C0h, 0A6h, 0C0h, 92h, 0C0h,	7Dh, 0C0h, 6Dh,	0C0h, 49h
db 0C0h, 3Ah, 0C0h, 4, 0C0h, 0FCh, 0BFh, 0F3h, 0BFh, 0E9h
db 0BFh, 0DEh, 0BFh, 0D3h, 0BFh, 0C4h, 0BFh, 0B9h, 0BFh
db 0A4h, 0BFh, 95h, 0BFh, 8Ah, 0BFh, 78h, 0BFh,	8Fh, 0C4h
db 84h,	0C4h, 78h, 0C4h, 67h, 0C4h, 5Fh, 0C4h, 56h, 0C4h
db 2Bh,	0C4h, 0D9h, 0C3h, 57h, 0C3h, 48h, 0C3h,	26h, 0C8h
db 0, 0C8h, 0E4h, 0C7h,	0D3h, 0C7h, 63h, 0C7h, 5Bh, 0C7h
db 2Bh,	0C7h, 1Fh, 0C7h, 0D5h, 0C6h, 0B3h, 0C6h, 0A7h
db 0C6h, 49h, 0C6h, 41h, 0C6h, 0E5h, 0C5h, 0C3h, 0C5h
db 0B7h, 0C5h, 59h, 0C5h, 51h, 0C5h, 0Fh, 0C5h,	0FEh, 0C4h
db 0E7h, 0C4h, 0DAh, 0C4h, 0ACh, 0C4h, 58h, 0CAh, 35h
db 0CAh, 0FAh, 0C9h, 0CBh, 0C9h, 0BDh, 0C9h, 0ABh, 0C9h
db 8Ah,	0C9h
db 5Bh,	0C9h, 45h, 0C9h, 26h, 0C9h, 15h, 0C9h, 0F6h, 0C8h
db 0E5h, 0C8h, 0C5h, 0C8h, 0AFh, 0C8h, 8Fh, 0C8h, 77h
db 0C8h, 62h, 0C8h, 4Dh, 0C8h, 62h, 0CDh, 57h, 0CDh, 3Ah
db 0CDh, 1Dh, 0CDh, 3, 0CDh, 0FBh, 0CCh, 0F3h, 0CCh, 0BCh
db 0CCh, 0AAh, 0CCh, 0A2h, 0CCh, 92h, 0CCh, 82h, 0CCh
db 6Ch,	0CCh, 60h, 0CCh, 53h, 0CCh, 3Ch, 0CCh, 24h, 0CCh
db 1Bh,	0CCh, 16h, 0CCh, 0Eh, 0CCh, 2, 0CCh, 0F2h, 0CBh
db 0DEh, 0CBh, 0CAh, 0CBh, 0C2h, 0CBh, 0B2h, 0CBh, 97h
db 0CBh, 7Eh, 0CBh, 6Bh, 0CBh, 63h, 0CBh, 57h, 0CBh, 4Eh
db 0CBh, 24h, 0CBh, 14h, 0CBh, 0Bh, 0CBh, 0FFh,	0CAh, 0E8h
db 0CAh, 0CEh, 0CAh, 0C6h, 0CAh, 0BBh, 0CAh, 0A5h, 0CAh
db 87h,	0CAh, 74h, 0CAh, 2Ch, 0D1h, 27h, 0D1h, 1Fh, 0D1h
db 13h,	0D1h, 0D2h, 0D0h, 0C2h,	0D0h, 0B3h, 0D0h, 0A4h
db 0D0h, 83h, 0D0h, 7Eh, 0D0h, 79h, 0D0h, 70h, 0D0h, 6Bh
db 0D0h, 5Eh, 0D0h, 55h, 0D0h, 50h, 0D0h, 4Bh, 0D0h, 3Ah
db 0D0h, 23h, 0D0h, 2, 0D0h, 0EEh, 0CFh, 0DDh, 0CFh, 0D8h
db 0CFh, 0D3h, 0CFh, 0AAh, 0CFh, 6Ch, 0CFh, 2Ch, 0CFh
db 4, 0CFh, 0F1h, 0CEh,	0E5h, 0CEh, 0D5h, 0CEh,	5Ch, 0CEh
db 54h,	0CEh, 36h, 0CEh, 27h, 0CEh, 1Bh, 0CEh, 0Ch, 0CEh
db 0, 0CEh, 0EAh, 0CDh,	0D9h, 0CDh, 8Ah, 0CDh, 81h, 0CDh
db 0CAh, 0D1h, 0C1h, 0D1h, 0BCh, 0D1h, 0B7h, 0D1h, 0B2h
db 0D1h, 0AAh, 0D1h, 6Dh, 0D1h,	4Ah, 0D1h, 80h,	0D5h, 5Bh
db 0D5h, 51h, 0D5h, 42h, 0D5h, 30h, 0D5h, 22h, 0D5h, 11h
db 0D5h, 8, 0D5h, 1, 0D5h, 0DFh, 0D4h, 0D1h, 0D4h, 0BCh
db 0D4h, 0AEh, 0D4h, 78h, 0D4h,	5Fh, 0D4h, 4Eh,	0D4h, 31h
db 0D4h, 23h, 0D4h, 0F5h, 0D3h,	0E1h, 0D3h, 0BEh, 0D3h
db 0B3h, 0D3h, 0ABh, 0D3h, 0A3h, 0D3h, 93h, 0D3h, 8Bh
db 0D3h, 7Fh, 0D3h, 74h, 0D3h, 69h, 0D3h, 51h, 0D3h, 46h
db 0D3h, 1Ah, 0D3h, 0Fh, 0D3h, 7, 0D3h,	0FFh, 0D2h, 0EFh
db 0D2h, 0C2h, 0D2h, 0B6h, 0D2h, 0AAh, 0D2h, 7Ch, 0D2h
db 5Ah,	0D2h, 3Fh, 0D2h, 2Fh, 0D2h, 12h, 0D2h, 1Ch, 0D9h
db 6Bh,	0D8h, 1Eh, 0D8h, 13h, 0D8h, 0D5h, 0D7h,	0CAh, 0D7h
db 68h,	0D7h, 48h, 0D7h, 21h, 0D7h, 0Bh, 0D7h, 0FBh, 0D6h
db 0F3h, 0D6h, 0EBh, 0D6h, 0D2h, 0D6h, 0C6h, 0D6h, 0B6h
db 0D6h, 0A7h, 0D6h, 59h, 0D6h,	48h, 0D6h, 38h,	0D6h, 29h
db 0D6h, 12h, 0D6h, 0D8h, 0D5h,	82h, 0DCh, 12h,	0DCh, 0FEh
db 0DBh, 0D8h, 0DBh, 0ADh, 0DBh, 96h, 0DBh, 83h, 0DBh
db 70h,	0DBh, 5Fh, 0DBh, 49h, 0DBh, 36h, 0DBh, 3, 0DBh
db 0FBh, 0DAh, 0F3h, 0DAh, 0D3h, 0DAh, 0CBh, 0DAh, 0BCh
db 0DAh, 0B0h, 0DAh, 0A0h, 0DAh, 85h, 0DAh, 5Bh, 0DAh
db 49h,	0DAh, 2Fh, 0DAh, 0Ah, 0DAh, 66h, 0D9h, 25h, 0E0h
db 1Dh,	0E0h, 15h, 0E0h, 9, 0E0h, 1, 0E0h, 0F9h, 0DFh
db 0E7h, 0DFh, 0C6h, 0DFh, 0B7h, 0DFh, 9Dh, 0DFh, 29h
db 0DFh, 1Ah, 0DFh, 6Bh, 0DEh, 5Eh, 0DEh, 54h, 0DEh, 3Fh
db 0DEh, 6Fh, 0DDh, 59h, 0DDh, 27h, 0DDh, 0EDh,	0DCh, 0D8h
db 0DCh, 98h, 0E3h, 82h, 0E3h, 5Eh, 0E3h, 15h, 0E3h, 0F5h
db 0E2h, 0D3h, 0E2h, 0C3h, 0E2h, 98h, 0E2h, 88h, 0E2h
db 76h,	0E2h, 61h, 0E2h, 4Fh, 0E2h, 3Dh, 0E2h, 2Dh, 0E2h
db 1Eh,	0E2h, 8, 0E2h, 0FAh, 0E1h, 0EFh, 0E1h, 0B3h, 0E1h
db 0A1h, 0E1h, 98h, 0E1h, 8Ah, 0E1h, 82h, 0E1h,	7Ah, 0E1h
db 61h,	0E1h, 52h, 0E1h, 46h, 0E1h, 3Ah, 0E1h, 2Fh, 0E1h
db 8, 0E1h, 0ECh, 0E0h,	0A4h, 0E0h, 80h, 0E0h, 56h, 0E0h
db 4Dh,	0E0h, 47h, 0E7h, 0DFh, 0E6h, 0D4h, 0E6h
db 0A5h, 0E6h, 95h, 0E6h, 87h, 0E6h, 76h, 0E6h,	57h, 0E6h
db 45h,	0E6h, 0E9h, 0E5h, 0DAh,	0E5h, 0BEh, 0E5h, 0B3h
db 0E5h, 0A3h, 0E5h, 87h, 0E5h,	55h, 0E5h, 3Dh,	0E5h, 2Ah
db 0E5h, 21h, 0E5h, 12h, 0E5h, 0F8h, 0E4h, 92h,	0E4h, 82h
db 0E4h, 76h, 0E4h, 59h, 0E4h, 4Ch, 0E4h, 34h, 0E4h, 25h
db 0E4h, 41h, 0EAh, 2Ch, 0EAh, 0F7h, 0E9h, 0E1h, 0E9h
db 0CFh, 0E9h, 80h, 0E9h, 6Bh, 0E9h, 2Eh, 0E9h,	26h, 0E9h
db 1Eh,	0E9h, 8, 0E9h, 0FDh, 0E8h, 0E4h, 0E8h, 0D6h, 0E8h
db 0BDh, 0E8h, 0A6h, 0E8h, 9Eh,	0E8h, 93h, 0E8h, 73h, 0E8h
db 34h,	0E8h, 20h, 0E8h, 11h, 0E8h, 6, 0E8h, 0EEh, 0E7h
db 0FFh, 0EDh, 0D6h, 0EDh, 0BDh, 0EDh, 0A0h, 0EDh, 80h
db 0EDh, 77h, 0EDh, 62h, 0EDh, 1Eh, 0EDh, 0AEh,	0ECh, 9Fh
db 0ECh, 87h, 0ECh, 78h, 0ECh, 4Fh, 0ECh, 28h, 0ECh, 12h
db 0ECh, 9, 0ECh, 0EEh,	0EBh, 0E1h, 0EBh, 0ADh,	0EBh, 9Bh
db 0EBh, 7Bh, 0EBh, 6Fh, 0EBh, 64h, 0EBh, 4Bh, 0EBh, 31h
db 0EBh, 1Fh, 0EBh, 0Dh, 0EBh, 0F8h, 0EAh, 0E6h, 0EAh
db 0D1h, 0EAh, 0BCh, 0EAh, 0B1h, 0EAh, 0A6h, 0EAh, 98h
db 0EAh, 8Ah, 0EAh, 0BFh, 0F1h,	87h, 0F1h, 75h,	0F1h, 6Ch
db 0F1h, 57h, 0F1h, 3Fh, 0F1h, 6, 0F1h,	0D7h, 0F0h, 0B8h
db 0F0h, 0A3h, 0F0h, 91h, 0F0h,	6Ch, 0F0h, 5Ah,	0F0h, 45h
db 0F0h, 30h, 0F0h, 1Bh, 0F0h, 9, 0F0h,	0EBh, 0EFh, 0D9h
db 0EFh, 0B4h, 0EFh, 0A1h, 0EFh, 7Dh, 0EFh, 3Eh, 0EFh
db 2Ch,	0EFh, 1Ah, 0EFh, 5, 0EFh, 0F2h,	0EEh, 0DFh, 0EEh
db 0D3h, 0EEh, 0C8h, 0EEh, 0AFh, 0EEh, 95h, 0EEh, 80h
db 0EEh, 6Eh, 0EEh, 59h, 0EEh, 29h, 0EEh, 78h, 0F5h, 69h
db 0F5h, 47h, 0F5h, 1Bh, 0F5h, 0Bh, 0F5h, 0E3h,	0F4h, 0CAh
db 0F4h, 0B6h, 0F4h, 5Eh, 0F4h,	4Eh, 0F4h, 26h,	0F4h, 10h
db 2 dup(0F4h),	0F3h, 0EBh, 0F3h, 0A8h,	0F3h, 81h, 0F3h
db 6Fh,	0F3h, 60h, 0F3h, 3Ch, 0F3h, 33h, 0F3h, 0F0h, 0F2h
db 0CDh, 0F2h, 0BBh, 0F2h, 0ACh, 0F2h, 5Fh, 0F2h, 54h
db 0F2h, 44h, 0F2h, 3, 0F2h, 8,	0F9h, 0F5h, 0F8h, 0B5h
db 0F8h, 0ACh, 0F8h, 0A2h, 0F8h, 84h, 0F8h, 74h, 0F8h
db 52h,	0F8h, 40h, 0F8h, 23h, 0F8h, 0F5h, 0F7h,	0E2h, 0F7h
db 0D4h, 0F7h, 0B7h, 0F7h, 0A2h, 0F7h, 8Eh, 0F7h, 6Ah
db 0F7h, 39h, 0F7h, 2Eh, 0F7h, 1Ah, 0F7h, 0E0h,	0F6h, 0C3h
db 0F6h, 0B8h, 0F6h, 0A5h, 0F6h, 5Dh, 0F6h, 52h, 0F6h
db 44h,	0F6h, 2Fh, 0F6h, 20h, 0F6h, 0FDh, 0F5h,	0EEh, 0F5h
db 0B5h, 0F5h, 0A6h, 0F5h, 93h,	0F5h, 1Dh, 0FAh, 0EDh
db 0F9h, 0E4h, 0F9h, 0DAh, 0F9h, 0C2h, 0F9h, 0B2h, 0F9h
db 96h,	0F9h, 83h, 0F9h, 71h, 0F9h, 0F7h, 0FDh,	0E7h, 0FDh
db 0D1h, 0FDh, 0C1h, 0FDh, 0A5h, 0FDh, 8Bh, 0FDh, 69h
db 0FDh, 15h, 0FDh, 9, 0FDh, 0F5h, 0FCh, 0E1h, 0FCh, 0D8h
db 0FCh, 0D3h, 0FCh, 0CEh, 0FCh, 0BBh, 0FCh, 8Fh, 0FCh
db 81h,	0FCh, 6Ah, 0FCh, 58h, 0FCh, 4Fh, 0FCh, 47h, 0FCh
db 31h,	0FCh, 18h, 0FCh, 8, 0FCh, 0F9h,	0FBh, 0E6h, 0FBh
db 0C7h, 0FBh, 0B7h, 0FBh, 8Dh,	0FBh, 82h, 0FBh, 75h, 0FBh
db 6Dh,	0FBh, 4Fh, 0FBh, 41h, 0FBh, 31h, 0FBh, 25h, 0FBh
db 19h,	0FBh, 0F5h, 0FAh, 0E9h,	0FAh, 83h, 0FAh, 77h, 0FAh
db 7Fh,	0FEh, 21h, 0FEh, 14h, 0FEh, 9, 0FEh, 0E0h, 0FFh
db 0A8h, 0FFh, 9Dh, 0FFh, 67h, 0FFh, 41h, 0FFh,	2Ch, 0FFh
db 0EFh, 0FEh, 0AFh, 0FEh, 0A6h, 0FEh, 0DAh, 34h, 87h
db 35h,	0C1h, 35h, 0E1h, 9, 42h, 2, 2Ch, 2, 4, 2, 0EFh
db 1, 0E0h, 1, 0D1h, 1,	0AEh, 1, 48h
db 1, 35h, 1, 16h, 3 dup(1), 0F2h, 0, 0C3h, 0, 0B0h, 0
db 7Fh,	0, 59h,	0, 43h,	0, 2Ch,	0, 9, 2	dup(0),	6, 0F7h
db 5, 0D9h, 5, 0A9h, 5,	9Bh, 5,	89h, 5,	5Ch, 5,	0Dh, 5
db 0FDh, 4, 98h, 4, 72h, 4, 40h, 4, 0Ah, 4, 0D4h, 3, 0A0h
db 3, 98h, 3, 90h, 3, 88h, 3, 6Ch, 3, 43h, 3, 2Eh, 3, 14h
db 3, 0F8h, 2, 0D6h, 2,	0A8h, 2, 39h, 6, 9, 6, 11h, 0Ah
db 0EDh, 9, 0CDh, 9, 0C5h, 9, 0AAh, 9, 9Eh, 9, 8Dh, 9
db 7Bh,	9, 2Fh,	9, 21h,	9, 0E8h, 8, 0B9h, 8, 0ADh, 8, 97h
db 8, 7Ch, 8, 6Ah, 8, 4Eh, 8, 3Ch, 8, 2Fh, 8, 1Dh, 8, 15h
db 8, 0BCh, 7, 0A9h, 7,	8Bh, 7,	77h, 7,	2Fh, 7,	6, 7, 0E8h
db 6, 0D6h, 6, 82h, 6, 0BEh, 0Dh, 0AEh,	0Dh, 9Eh, 0Dh
db 8Fh,	0Dh, 71h, 0Dh, 5Fh, 0Dh, 41h, 0Dh, 17h,	3 dup(0Dh)
db 0F4h, 0Ch, 0DBh, 0Ch, 0BBh, 0Ch, 0ADh, 0Ch, 95h, 0Ch
db 86h,	0Ch, 74h, 0Ch, 5Ah, 0Ch, 1Fh, 0Ch, 16h,	0Ch, 0E5h
db 0Bh,	0D1h, 0Bh, 0AFh, 0Bh, 95h, 0Bh,	80h, 0Bh, 77h
db 0Bh,	64h, 0Bh, 49h, 0Bh, 18h, 0Bh, 0F0h, 0Ah, 0D1h
db 0Ah,	0C2h, 0Ah, 93h,	0Ah, 8Ah, 0Ah, 59h, 0Ah, 48h, 0Ah
db 1Ch,	0Ah, 2Dh, 11h, 0FCh, 10h, 0D4h,	10h, 0C5h, 10h
db 0ACh, 10h, 6Dh, 10h,	17h, 10h, 0CFh,	0Fh, 0C3h, 0Fh
db 0B5h, 0Fh, 0A0h, 0Fh, 85h, 0Fh, 57h,	0Fh, 43h, 0Fh
db 0DDh, 0Eh, 0CCh, 0Eh, 0BDh, 0Eh, 0B2h, 0Eh, 0A3h, 0Eh
db 92h,	0Eh, 83h, 0Eh, 7Ah, 0Eh, 62h, 0Eh, 53h,	0Eh, 45h
db 0Eh,	22h, 0Eh, 19h, 0Eh, 0E7h, 0Dh, 0D8h, 0Dh, 0FBh
db 12h,	0EFh, 12h, 0E3h, 12h, 0C5h, 12h, 0B2h, 12h, 0A0h
db 12h,	8Ah, 12h, 7Eh, 12h, 6Eh, 12h, 31h, 12h,	26h, 12h
db 18h,	12h, 0E2h, 11h,	0A3h, 11h, 0A7h, 16h, 93h, 16h
db 7Ch,	16h, 70h, 16h, 52h, 16h, 13h, 16h, 0F7h, 15h, 0CFh
db 15h,	0C1h, 15h, 0B1h, 15h, 0A3h, 15h, 97h, 15h, 76h
db 15h,	66h, 15h, 56h, 15h, 43h, 15h, 14h, 15h,	8, 15h
db 0DDh, 14h, 0BEh, 14h, 0B4h, 14h, 0A8h, 14h, 94h, 14h
db 8Bh,	14h, 3Eh, 14h, 32h, 14h, 17h, 14h, 0E7h, 13h, 0DBh
db 13h,	0C1h, 13h, 0A6h, 13h, 4Ah, 13h,	30h, 13h, 17h
db 13h,	5Dh, 1Ah, 49h, 1Ah, 2Bh, 1Ah, 10h, 1Ah,	0CEh, 19h
db 89h,	19h, 7Dh, 19h, 57h, 19h, 43h, 19h, 26h,	19h, 0Ch
db 19h,	0C7h, 18h, 0BBh, 18h, 0AFh, 18h, 0A3h, 18h, 93h
db 18h,	87h, 18h, 7Bh, 18h, 73h, 18h, 6Bh, 18h,	3Dh, 18h
db 0Fh,	18h, 0DDh, 17h,	0B2h, 17h, 6Bh,	17h, 58h, 17h
db 31h,	17h, 25h, 17h, 0, 17h, 0F7h, 16h, 0EFh,	16h, 0D5h
db 16h,	0C9h, 16h, 0B7h, 16h, 0FBh, 1Dh, 0EFh, 1Dh, 0DFh
db 1Dh,	0CBh, 1Dh, 0B3h, 1Dh, 0A0h, 1Dh, 81h, 1Dh, 6Eh
db 1Dh,	5Fh, 1Dh, 45h, 1Dh, 35h, 1Dh, 0FAh, 1Ch, 0E0h
db 1Ch,	0D7h, 1Ch, 9Bh,	1Ch, 8Fh, 1Ch, 6Dh, 1Ch, 5Ah, 1Ch
db 1Dh,	1Ch, 10h, 1Ch, 0ADh, 1Bh, 0A4h,	1Bh, 93h, 1Bh
db 87h,	1Bh, 70h, 1Bh, 2Eh, 1Bh, 25h, 1Bh, 1Dh,	1Bh, 0FFh
db 1Ah,	0EAh, 1Ah, 0DEh, 1Ah, 0CEh, 1Ah, 0BEh, 1Ah, 0B5h
db 1Ah,	0A8h, 1Ah, 0A0h, 1Ah, 90h, 1Ah,	81h, 1Ah, 70h
db 1Ah,	57h, 21h, 10h, 21h, 0E2h, 20h, 0CFh, 20h
db 0BCh, 20h, 0ADh, 20h, 0A1h, 20h, 94h, 20h, 72h, 20h
db 57h,	20h, 38h, 20h, 1Ah, 20h, 0E9h, 1Fh, 0D1h, 1Fh
db 0A0h, 1Fh, 91h, 1Fh,	61h, 1Fh, 56h, 1Fh, 1Eh, 1Fh, 0Fh
db 1Fh,	9, 1Fh,	0DCh, 1Eh, 43h,	1Eh, 2Ah, 1Eh, 21h, 1Eh
db 10h,	25h, 3Eh, 24h, 2Bh, 24h, 0B4h, 23h, 66h, 23h, 5Dh
db 23h,	13h, 23h, 0ECh,	22h, 0ABh, 22h,	0DEh, 21h, 9Bh
db 28h,	88h, 28h, 71h, 28h, 65h, 28h, 31h, 28h,	26h, 28h
db 15h,	28h, 0ECh, 27h,	0E3h, 27h, 0B3h, 27h, 80h, 27h
db 7Bh,	27h, 6Ch, 27h, 4Dh, 27h, 0FCh, 26h, 0EDh, 26h
db 0E2h, 26h, 0C5h, 26h, 6Bh, 26h, 5Dh,	26h, 28h, 26h
db 0FEh, 25h, 78h, 25h,	4Dh, 25h, 40h, 25h, 31h, 25h, 26h
db 25h,	3Ch, 2Ch, 2Dh, 2Ch, 0Eh, 2Ch, 0ECh, 2Bh, 0ABh
db 2Bh,	8Eh, 2Bh, 44h, 2Bh, 16h, 2Bh, 0C2h, 2Ah, 66h, 2Ah
db 57h,	2Ah, 3Bh, 2Ah, 24h, 2Ah, 0A0h, 29h, 85h, 29h, 4Ah
db 29h,	27h, 29h, 1Dh, 29h, 0F8h, 28h, 0CFh, 28h, 0B9h
db 28h,	5Ch, 2Fh, 4Ah, 2Fh, 2Eh, 2Fh, 18h, 2Fh,	0D8h, 2Eh
db 0BFh, 2Eh, 9Eh, 2Eh,	0DBh, 2Dh, 0CEh, 2Dh, 56h, 2Dh
db 0Ah,	2Dh, 0BCh, 2Ch,	0A4h, 2Ch, 8Dh,	2Ch, 0F7h, 32h
db 92h,	32h, 7Fh, 32h, 12h, 32h, 3, 32h, 0EAh, 31h, 0CBh
db 31h,	0BBh, 31h, 0, 31h, 0F8h, 30h, 0E8h, 30h, 0D1h
db 30h,	0C5h, 30h, 0B7h, 30h, 0B0h, 30h, 0A6h, 30h, 91h
db 30h,	65h, 30h, 59h, 30h, 37h, 30h, 0E5h, 2Fh, 0B9h
db 2Fh,	0F1h, 36h, 0D7h, 36h, 0BDh, 36h, 9Ch, 36h, 89h
db 36h,	74h, 36h, 6Bh, 36h, 5Fh, 36h, 41h, 36h,	2Dh, 36h
db 23h,	36h, 0F4h, 35h,	0C4h, 35h, 0B4h, 35h, 0A3h, 35h
db 97h,	35h, 8Bh, 35h, 7Fh, 35h, 72h, 35h, 4Fh,	35h, 33h
db 35h,	1Dh, 35h, 0F9h,	34h, 0DCh, 34h,	0B6h, 34h, 98h
db 34h,	57h, 34h, 48h, 34h, 5Eh, 33h, 0BCh, 39h, 0B0h
db 39h,	99h, 39h, 81h, 39h, 76h, 39h, 60h, 39h,	4Ch, 39h
db 41h,	39h, 2Dh, 39h, 22h, 39h, 9, 39h, 0F5h, 38h, 0E5h
db 38h,	0DAh, 38h, 0CAh, 38h, 0BEh, 38h, 0B3h, 38h, 0A3h
db 38h,	97h, 38h, 56h, 38h, 47h, 38h, 30h, 38h,	21h, 38h
db 12h,	38h, 0FBh, 37h,	0ECh, 37h, 0DEh, 37h, 0C7h, 37h
db 0B8h, 37h, 9Eh, 37h,	91h, 37h, 89h, 37h, 25h, 37h, 14h
db 37h,	9, 37h,	0Bh, 3Bh, 0E5h,	3Ah, 0D0h, 3Ah,	0B3h, 3Ah
db 6Ah,	3Ah, 33h, 3Ah, 24h, 3Ah, 15h, 3Ah, 2, 3Ah, 0F1h
db 39h,	90h, 3Ch, 6Eh, 3Ch, 58h, 3Ch, 49h, 3Ch,	1Bh, 3Ch
db 0Fh,	3Ch, 0FCh, 3Bh,	0C4h, 3Bh, 0A4h, 3Bh, 89h, 3Bh
db 7Dh,	3Bh, 71h, 3Bh, 65h, 3Bh, 0CCh, 40h, 0B7h, 40h
db 0ABh, 40h, 79h, 40h,	6Dh, 40h, 54h, 40h, 43h, 40h, 23h
db 40h,	9, 40h,	0C9h, 3Fh, 0C1h, 3Fh, 0A6h, 3Fh, 86h, 3Fh
db 77h,	3Fh, 68h, 3Fh, 5Eh, 3Fh, 59h, 3Fh, 54h,	3Fh, 37h
db 3Fh,	22h, 3Fh, 5, 3Fh, 0F6h,	3Eh, 0D5h, 3Eh,	0B9h, 3Eh
db 0AAh, 3Eh, 7Eh, 3Eh,	6Fh, 3Eh, 5Ah, 3Eh, 47h, 3Eh, 37h
db 3Eh,	2Ch, 3Eh, 20h, 3Eh, 10h, 3Eh, 0E4h, 3Dh, 0C1h
db 3Dh,	0B6h, 3Dh, 0A7h, 3Dh, 9Ch, 3Dh,	86h, 3Dh, 7Ah
db 3Dh,	71h, 3Dh, 61h, 3Dh, 4Ah, 3Dh, 39h, 3Dh,	35h, 44h
db 23h,	44h, 1Bh, 44h, 13h, 44h, 0FBh, 43h, 0F3h, 43h
db 0E4h, 43h, 0B2h, 43h, 0A0h, 43h, 8Ah, 43h
byte_4CBAB	db 5Fh,	43h, 50h, 43h, 29h, 43h, 18h, 43h, 1, 43h, 0EFh
db 42h,	0E2h, 42h, 0CCh, 42h, 0C1h, 42h, 7Fh, 42h, 74h
db 42h,	56h, 42h, 40h, 42h, 2Dh, 42h, 25h, 42h,	1Dh, 42h
db 7, 42h, 0FFh, 41h, 0F0h, 41h, 0C1h, 41h, 0A0h, 41h
db 8Dh,	41h, 7Dh, 41h, 6Dh, 41h, 62h, 41h, 4Fh,	41h, 44h
db 41h,	0Ah, 41h, 39h, 48h, 25h, 48h, 16h, 48h,	3, 48h
db 0FAh, 47h, 0EBh, 47h, 0E0h, 47h, 0B7h, 47h, 0AFh, 47h
db 0A6h, 47h, 90h, 47h,	7Eh, 47h, 72h, 47h, 44h, 47h, 39h
db 47h,	26h, 47h, 12h, 47h, 7, 47h, 0F3h, 46h, 0E8h, 46h
db 0D1h, 46h, 0C1h, 46h, 0B1h, 46h, 0A5h, 46h, 9Ah, 46h
db 8Dh,	46h, 85h, 46h, 0E9h, 45h, 0C5h,	45h, 96h, 45h
db 44h,	45h, 29h, 45h, 1Dh, 45h, 0Dh, 45h, 1, 45h, 0F4h
db 44h,	19h, 4Ah, 2, 4Ah, 0E7h,	49h, 0BDh, 49h,	7Eh, 49h
db 63h,	49h, 53h, 49h, 3Bh, 49h, 2Eh, 49h, 22h,	49h, 11h
db 49h,	7, 49h,	0FCh, 48h, 0F3h, 48h, 8Ch, 48h,	7Bh, 48h
db 73h,	48h, 68h, 48h, 5Ch, 48h, 45h, 48h, 11h,	4Ch, 1
db 4Ch,	0E4h, 4Bh, 0C7h, 4Bh, 0A2h, 4Bh, 8Eh, 4Bh, 86h
db 4Bh,	79h, 4Bh, 6Bh, 4Bh, 5Bh, 4Bh, 53h, 4Bh,	47h, 4Bh
db 28h,	4Bh, 15h, 4Bh, 0FDh, 4Ah, 0F4h,	4Ah, 0EFh, 4Ah
db 0E7h, 4Ah, 0DBh, 4Ah, 0CBh, 4Ah, 0B9h, 4Ah, 0A9h, 4Ah
db 0A4h, 4Ah, 9Ch, 4Ah,	8Ch, 4Ah, 71h, 4Ah, 55h, 4Ah, 4Dh
db 4Ah,	41h, 4Ah, 38h, 4Ah, 22h, 4Eh, 16h, 4Eh,	0F6h, 4Dh
db 0DAh, 4Dh, 0C0h, 4Dh, 0AAh, 4Dh, 97h, 4Dh, 88h, 4Dh
db 79h,	4Dh, 66h, 4Dh, 4Ch, 4Dh, 3Bh, 4Dh, 32h,	4Dh, 29h
db 4Dh,	0Dh, 4Dh, 0FEh,	4Ch, 0E3h, 4Ch,	0DBh, 4Ch, 0C7h
db 4Ch,	0A8h, 4Ch, 9Ah,	4Ch, 88h, 4Ch, 72h, 4Ch, 62h, 4Ch
db 4Dh,	4Ch, 44h, 4Ch, 30h, 4Ch, 0DAh, 51h, 0D1h, 51h
db 8Ah,	51h, 7Eh, 51h, 6Dh, 51h, 5Ch, 51h, 44h,	51h, 38h
db 51h,	22h, 51h, 11h, 51h, 0F3h, 50h, 0EAh, 50h, 0E3h
db 50h,	0C7h, 50h, 0BBh, 50h, 0B4h, 50h, 69h, 50h, 57h
db 50h,	28h, 50h, 0Ah, 50h, 0FCh, 4Fh, 0BFh, 4Fh, 0A2h
db 4Fh,	93h, 4Fh, 75h, 4Fh, 6Dh, 4Fh, 62h, 4Fh,	5Dh, 4Fh
db 55h,	4Fh, 45h, 4Fh, 31h, 4Fh, 1Ah, 4Fh, 0D8h, 4Eh, 0B7h
db 4Eh,	9Dh, 4Eh, 91h, 4Eh, 77h, 4Eh, 6Ch, 4Eh,	67h, 4Eh
db 5Fh,	4Eh, 45h, 4Eh, 11h, 52h, 3, 52h, 0F0h, 51h, 0B4h
db 55h,	0A0h, 55h, 8Fh,	55h, 7Fh, 55h, 6Bh, 55h, 5Bh, 55h
db 40h,	55h, 29h, 55h, 1Dh, 55h, 9, 55h, 0F3h, 54h, 0EBh
db 54h,	0C7h, 54h, 0ADh, 54h, 0A1h, 54h, 99h, 54h, 83h
db 54h,	7Bh, 54h, 5Ah, 54h, 44h, 54h, 2Eh, 54h,	1Eh, 54h
db 7, 54h, 0EFh, 53h, 0D9h, 53h, 0D0h, 53h, 0C8h, 53h
db 0ACh, 53h, 75h, 53h,	62h, 53h, 3Eh, 53h, 28h, 53h, 15h
db 53h,	0Ch, 53h, 0EDh,	52h, 0DDh, 52h,	0C9h, 52h, 0BDh
db 52h,	0ADh, 52h, 83h,	52h, 64h, 52h, 22h, 52h, 6Ch, 57h
db 60h,	57h, 40h, 57h, 24h, 57h, 14h, 57h, 0E5h, 56h, 0D1h
db 56h,	0C1h, 56h, 0AEh, 56h, 9Eh, 56h,	8Dh, 56h, 73h
db 56h,	5Dh, 56h, 51h, 56h, 38h, 56h, 28h, 56h,	14h, 56h
db 0Fh,	56h, 6,	56h, 0FDh, 55h,	0E3h, 55h, 0D5h, 55h, 1Fh
db 5Bh,	13h, 5Bh, 2, 5Bh, 0F1h,	5Ah, 0DDh, 5Ah,	0D0h, 5Ah
db 0B2h, 5Ah
byte_4CDAB	db 0AAh, 5Ah, 9Eh, 5Ah,	7Ch, 5Ah, 4Ah, 5Ah, 3Bh, 5Ah, 25h
db 5Ah,	14h, 5Ah, 0Ch, 5Ah, 0A8h, 59h, 81h, 59h, 60h, 59h
db 2Dh,	59h, 0Dh, 59h, 0, 59h, 0E3h, 58h, 93h, 58h, 83h
db 58h,	64h, 58h, 5Bh, 58h, 53h, 58h, 47h, 58h,	3Fh, 58h
db 2Fh,	58h, 24h, 58h, 15h, 58h, 0EDh, 57h, 0D3h, 57h
db 0C7h, 57h, 0B6h, 57h, 6, 5Dh, 0F5h, 5Ch, 0EEh, 5Ch
db 0E5h, 5Ch, 0DBh, 5Ch, 0C6h, 5Ch, 0B9h, 5Ch, 9Bh, 5Ch
db 5Bh,	5Ch, 4Dh, 5Ch, 36h, 5Ch, 12h, 5Ch, 3, 5Ch, 0F8h
db 5Bh,	0E2h, 5Bh, 0C5h, 5Bh, 0B9h, 5Bh, 0A8h, 5Bh, 9Eh
db 5Bh,	77h, 5Bh, 44h, 5Bh, 0CCh, 60h, 0C4h, 60h, 9Fh
db 60h,	97h, 60h, 8Eh, 60h, 78h, 60h, 54h, 60h,	40h, 60h
db 30h,	60h, 0,	60h, 0EFh, 5Fh,	0E9h, 5Fh, 0DDh, 5Fh, 0CCh
db 5Fh,	0AFh, 5Fh, 9Eh,	5Fh, 73h, 5Fh, 59h, 5Fh, 4Ah, 5Fh
db 37h,	5Fh, 2Bh, 5Fh, 0Ah, 5Fh, 2, 5Fh, 0E5h, 5Eh, 0DDh
db 5Eh,	0CDh, 5Eh, 0C1h, 5Eh, 9Fh, 5Eh,	81h, 5Eh, 76h
db 5Eh,	64h, 5Eh, 4Ah, 5Eh, 38h, 5Eh, 2Fh, 5Eh,	21h, 5Eh
db 3, 5Eh, 0FBh, 5Dh, 0E8h, 5Dh, 0CCh, 5Dh, 0ACh, 5Dh
db 0A4h, 5Dh, 8Ah, 5Dh,	7Eh, 5Dh, 6Eh, 5Dh, 59h, 5Dh, 47h
db 5Dh,	35h, 5Dh, 22h, 5Dh, 7Fh, 64h, 73h, 64h,	60h, 64h
db 4Ah,	64h, 1Fh, 64h, 5, 64h, 0E6h, 63h, 0D3h,	63h, 0C7h
db 63h,	0BEh, 63h, 99h,	63h, 8Dh, 63h, 7Ch, 63h, 67h, 63h
db 62h,	63h, 5Bh, 63h, 43h, 63h, 38h, 63h, 23h,	63h, 1Eh
db 63h,	17h, 63h, 0FFh,	62h, 0F4h, 62h,	0E2h, 62h, 0C7h
db 62h,	0B3h, 62h, 57h,	62h, 42h, 62h, 30h, 62h, 1Ah, 62h
db 0Eh,	62h, 0F5h, 61h,	0E1h, 61h, 0D2h, 61h, 98h, 61h
db 80h,	61h, 6Fh, 61h, 5Dh, 61h, 47h, 61h, 3Bh,	61h, 23h
db 61h,	10h, 61h, 0FCh,	60h, 0DDh, 60h,	28h, 68h, 18h
db 68h,	0FEh, 67h, 0E4h, 67h, 0D5h, 67h, 0C9h, 67h, 0B0h
db 67h,	9Fh, 67h, 8Ah, 67h, 7Ah, 67h, 71h, 67h,	52h, 67h
db 33h,	67h, 1,	67h, 0A7h, 66h,	8Eh, 66h, 85h, 66h, 72h
db 66h,	56h, 66h, 43h, 66h, 37h, 66h, 26h, 66h,	0F9h, 65h
db 0F1h, 65h, 0E5h, 65h, 0D9h, 65h, 0BFh, 65h, 0B3h, 65h
db 96h,	65h, 73h, 65h, 5Fh, 65h, 4Ah, 65h, 3Eh,	65h, 1Ch
db 65h,	0Bh, 65h, 0FBh,	64h, 0ECh, 64h,	0E3h, 64h, 0DAh
db 64h,	0D5h, 64h, 0CDh, 64h, 0B3h, 64h, 0A6h, 64h, 0A1h
db 64h,	99h, 64h, 2Fh, 69h, 0Dh, 69h, 0E8h, 68h, 0DCh
db 68h,	0CFh, 68h, 0C5h, 68h, 0AAh, 68h, 0A1h, 68h, 87h
db 68h,	79h, 68h, 51h, 68h, 3Ah, 68h, 0F7h, 6Ch, 0DEh
db 6Ch,	0D2h, 6Ch, 0BBh, 6Ch, 0B6h, 6Ch, 0AEh, 6Ch, 9Eh
db 6Ch,	89h, 6Ch, 74h, 6Ch, 5Fh, 6Ch, 4Bh, 6Ch,	22h, 6Ch
db 5, 6Ch, 0D3h, 6Bh, 0BCh, 6Bh, 0ABh, 6Bh, 8Dh, 6Bh, 7Eh
db 6Bh,	72h, 6Bh, 62h, 6Bh, 5Ah, 6Bh, 3Fh, 6Bh,	25h, 6Bh
db 17h,	6Bh, 2,	6Bh, 0F2h, 6Ah,	0E4h, 6Ah, 0D1h, 6Ah, 0BEh
db 6Ah,	0B5h, 6Ah, 0A6h, 6Ah, 0A1h, 6Ah, 99h, 6Ah, 80h
db 6Ah,	74h, 6Ah, 63h, 6Ah, 5Eh, 6Ah, 56h, 6Ah,	46h, 6Ah
db 37h,	6Ah, 1Dh, 6Ah, 0Fh, 6Ah, 0F7h, 69h, 0F2h, 69h
db 0BEh, 69h, 0A5h, 69h, 9Ch, 69h, 91h,	69h, 7Dh, 69h
db 6Dh,	69h, 61h, 69h, 50h, 69h, 0AAh, 70h, 9Ah, 70h, 85h
db 3 dup(70h), 57h, 70h, 4Ah, 70h
db 45h,	70h, 3Dh, 70h, 24h, 70h, 18h, 70h, 2, 70h, 0EAh
db 6Fh,	0E5h, 6Fh, 0B7h, 6Fh, 9Eh, 6Fh,	95h, 6Fh, 86h
db 6Fh,	68h, 6Fh, 5Ah, 6Fh, 46h, 6Fh, 23h, 6Fh,	17h, 6Fh
db 0, 6Fh, 0F7h, 6Eh, 0E7h, 6Eh, 0E2h, 6Eh, 0DAh, 6Eh
db 0CAh, 6Eh, 0B0h, 6Eh, 97h, 6Eh, 8Ah,	6Eh, 85h, 6Eh
db 7Dh,	3 dup(6Eh), 5Eh, 6Eh, 45h, 6Eh,	38h, 6Eh, 20h
db 6Eh,	1Bh, 6Eh, 0F3h,	6Dh, 0DAh, 6Dh,	0D1h, 6Dh, 0C2h
db 6Dh,	0AAh, 6Dh, 0A1h, 6Dh, 91h, 6Dh,	83h, 6Dh, 73h
db 6Dh,	5Dh, 6Dh, 4Dh, 6Dh, 3Ah, 6Dh, 31h, 6Dh,	21h, 6Dh
db 4, 6Dh, 0FFh, 6Ch, 54h, 74h,	3Ch, 74h, 37h, 74h, 0Fh
db 74h,	0F6h, 73h, 0EDh, 73h, 0DEh, 73h, 0BBh, 73h, 0A9h
db 73h,	9Bh, 73h, 76h, 73h, 53h, 73h, 4Bh, 73h,	28h, 73h
db 19h,	73h, 0Fh, 73h, 6, 73h, 0CBh, 72h, 0B7h,	72h, 0A7h
db 72h,	91h, 72h, 85h, 72h, 6Fh, 72h, 5Fh, 72h,	45h, 72h
db 28h,	72h, 7,	72h, 0DFh, 71h,	0CBh, 71h, 0BBh, 71h, 0A5h
db 71h,	99h, 71h, 85h, 71h, 47h, 71h, 2Eh, 71h,	1Bh, 71h
db 0Fh,	71h, 0FFh, 70h,	0CAh, 70h, 0B7h, 70h, 0B2h, 70h
db 41h,	76h, 35h, 76h, 19h, 76h, 0D9h, 75h, 0C0h, 75h
db 0B3h, 75h, 0A9h, 75h, 8Eh, 75h, 85h,	75h, 6Bh, 75h
db 5Dh,	75h, 49h, 75h, 39h, 75h, 26h, 75h, 1Dh,	75h, 0Eh
db 75h,	9, 75h,	1, 75h,	0E8h, 74h, 0DCh, 74h, 0C7h, 74h
db 0B6h, 74h, 0B1h, 74h, 0A9h, 74h, 9Ah, 74h, 8Ah, 74h
db 75h,	74h, 61h, 74h, 7, 7Ah, 0F3h, 79h, 0E5h,	79h, 0E0h
db 79h,	0D8h, 79h, 0C8h, 79h, 0B5h, 79h, 0A0h, 79h, 8Dh
db 3 dup(79h), 6Bh, 79h, 50h, 79h, 4Bh,	79h, 2Ch, 79h
db 16h,	79h, 7,	79h, 0FEh, 78h,	0F5h, 78h, 0DAh, 78h, 0C7h
db 78h,	0A8h, 78h, 9Fh,	78h, 6Dh, 78h, 5Eh, 78h, 4Bh, 78h
db 38h,	78h, 22h, 78h, 1Dh, 78h, 15h, 78h, 5, 78h, 0EBh
db 77h,	0DEh, 77h, 0D9h, 77h, 0D1h, 77h, 0B8h, 77h, 0ACh
db 77h,	98h, 77h, 8Ch, 77h, 7Ch, 77h, 67h, 77h,	4Ch, 77h
db 47h,	77h, 28h, 77h, 12h, 77h, 3, 77h, 0FAh, 76h, 0F1h
db 76h,	0C3h, 76h, 0B7h, 76h, 0A1h, 76h, 91h, 76h, 81h
db 76h,	74h, 76h, 63h, 76h, 0A5h, 7Dh, 98h, 7Dh, 7Fh, 7Dh
db 71h,	7Dh, 61h, 7Dh, 4Bh, 7Dh, 29h, 7Dh, 21h,	7Dh, 11h
db 7Dh,	4, 7Dh,	0F4h, 7Ch, 0ECh, 7Ch, 0D8h, 7Ch, 0CCh
db 7Ch,	0BCh, 7Ch, 0A8h, 7Ch, 8Fh, 7Ch,	7Eh, 7Ch, 70h
db 7Ch,	67h, 7Ch, 58h, 7Ch, 53h, 7Ch, 4Bh, 7Ch,	32h, 7Ch
db 26h,	7Ch, 13h, 7Ch, 0F9h, 7Bh, 0ECh,	7Bh, 0E7h, 7Bh
db 0DFh, 7Bh, 0C6h, 7Bh, 0BAh, 7Bh, 0A7h, 7Bh, 96h, 7Bh
db 7Eh,	7Bh, 79h, 7Bh, 5Ah, 7Bh, 44h, 7Bh, 35h,	7Bh, 2Ch
db 7Bh,	23h, 7Bh, 8, 7Bh, 0F5h,	7Ah, 0D6h, 7Ah,	0CDh, 7Ah
db 9Bh,	7Ah, 8Ch, 7Ah, 79h, 7Ah, 66h, 7Ah, 4Fh,	7Ah, 4Ah
db 7Ah,	42h, 7Ah, 32h, 7Ah, 1Ah, 7Ah, 69h, 81h,	4Fh, 81h
db 3Ch,	81h, 2Eh, 81h, 0CAh, 80h, 0BDh,	80h, 0B4h, 80h
db 0ABh, 80h, 8Eh, 80h,	89h, 80h, 60h, 80h, 45h, 80h, 40h
db 80h,	0Ch, 80h, 0DDh,	7Fh, 0D4h, 7Fh,	0C3h, 7Fh, 0BAh
db 7Fh,	0ACh, 7Fh, 86h,	7Fh, 61h, 7Fh, 55h, 7Fh, 44h, 7Fh
db 2Dh,	7Fh, 17h, 7Fh, 12h, 7Fh, 0Bh, 7Fh, 0F2h, 7Eh, 0E7h
db 7Eh,	0D8h, 7Eh, 0BEh, 7Eh, 0B9h, 7Eh
db 0B2h, 7Eh, 0A3h, 7Eh, 8Fh, 7Eh, 7Ah,	7Eh, 66h, 7Eh
db 53h,	7Eh, 47h, 7Eh, 2Bh, 7Eh, 26h, 7Eh, 1Fh,	7Eh, 0EFh
db 7Dh,	0E1h, 7Dh, 0DCh, 7Dh, 0D5h, 7Dh, 1Ah, 85h, 9, 85h
db 0EAh, 84h, 96h, 84h,	80h, 84h, 72h, 84h, 5Dh, 84h, 3Ch
db 84h,	30h, 84h, 1Ah, 84h, 9, 84h, 0, 84h, 0F7h, 83h
db 0CAh, 83h, 0BBh, 83h, 0A4h, 83h, 9Fh, 83h, 97h, 83h
db 7Eh,	83h, 72h, 83h, 5Fh, 83h, 50h, 83h, 4Bh,	83h, 43h
db 83h,	29h, 83h, 1Fh, 83h, 7, 83h, 2, 83h, 0E4h, 82h
db 0C9h, 82h, 0BBh, 82h, 0A4h, 82h, 8Eh, 82h, 7Dh, 82h
db 6Ah,	82h, 62h, 82h, 4Bh, 82h, 3Ch, 82h, 2Dh,	82h, 15h
db 82h,	5, 82h,	0F6h, 81h, 0E2h, 81h, 0AFh, 86h, 8Dh, 86h
db 76h,	86h, 71h, 86h, 6Ah, 86h, 5Eh, 86h, 3Fh,	86h, 1Ch
db 86h,	17h, 86h, 0Eh, 86h, 0E7h, 85h, 0DFh, 85h, 0D7h
db 85h,	0C4h, 85h, 0A8h, 85h, 9Ch, 85h,	94h, 85h, 8Bh
db 85h,	83h, 85h, 4Dh, 85h, 3Dh, 85h, 35h, 85h,	7Fh, 87h
db 73h,	87h, 65h, 87h, 4Dh, 87h, 41h, 87h, 15h,	87h, 4
db 87h,	0E2h, 86h, 0D5h, 86h, 0BFh, 88h, 0B0h, 88h, 0A7h
db 88h,	9Fh, 88h, 87h, 88h, 7Fh, 88h, 71h, 88h,	69h, 88h
db 43h,	88h, 2Ch, 88h, 1Dh, 88h, 6, 88h, 0E1h, 87h, 0D0h
db 87h,	0B3h, 87h, 0A7h, 87h, 96h, 87h,	0FDh, 89h, 0EEh
db 89h,	0E5h, 89h, 0DDh, 89h, 0C5h, 89h, 0BDh, 89h, 0AFh
db 89h,	0A7h, 89h, 81h,	89h, 6Ah, 89h, 5Bh, 89h, 44h, 89h
db 1Fh,	89h, 0Eh, 89h, 0F1h, 88h, 0E5h,	88h, 0D4h, 88h
db 0B4h, 8Dh, 97h, 8Dh,	81h, 8Dh, 57h, 8Dh, 1Fh, 8Dh, 0Fh
db 8Dh,	0CCh, 8Ch, 62h,	8Ch, 4Fh, 8Ch, 38h, 8Ch, 16h, 8Ch
db 5, 8Ch, 0F5h, 8Bh, 0E3h, 8Bh, 0D2h, 8Bh, 0A8h, 8Bh
db 95h,	8Bh, 7Eh, 8Bh, 5Dh, 8Bh, 4Ch, 8Bh, 37h,	8Bh, 30h
db 8Bh,	1Bh, 8Bh, 14h, 8Bh, 0F6h, 8Ah, 0DBh, 8Ah, 0D3h
db 8Ah,	0C6h, 8Ah, 0BEh, 8Ah, 0A2h, 8Ah, 8Fh, 8Ah, 47h
db 8Ah,	36h, 8Ah, 25h, 8Ah, 1Dh, 8Ah, 13h, 8Ah,	0Bh, 8Ah
db 5Fh,	8Eh, 1Dh, 8Eh, 0Fh, 8Eh, 0FCh, 8Dh, 0ECh, 8Dh
db 0E0h, 8Dh, 0A6h, 8Fh, 9Dh, 8Fh, 95h,	8Fh, 8Ah, 8Fh
db 82h,	8Fh, 57h, 8Fh, 40h, 8Fh, 31h, 8Fh, 1Ah,	8Fh, 0F5h
db 8Eh,	0D8h, 8Eh, 0CCh, 8Eh, 0BEh, 8Eh, 92h, 8Eh, 89h
db 8Eh,	7Fh, 8Eh, 1Ah, 93h, 0FFh, 92h, 0E5h, 92h, 0D5h
db 92h,	0B9h, 92h, 77h,	92h, 59h, 92h, 4Bh, 92h, 31h, 92h
db 1Dh,	92h, 0Eh, 92h, 0D4h, 91h, 0C3h,	91h, 0BBh, 91h
db 0A5h, 91h, 95h, 91h,	82h, 91h, 72h, 91h, 58h, 91h, 50h
db 91h,	3Ah, 91h, 2Ah, 91h, 17h, 91h, 7, 91h, 0DAh, 90h
db 0C4h, 90h, 0B1h, 90h, 0A6h, 90h, 87h, 90h, 73h, 90h
db 59h,	90h, 51h, 90h, 39h, 90h, 2Eh, 90h, 9, 90h, 0F6h
db 8Fh,	0E5h, 8Fh, 0C4h, 8Fh, 8Bh, 94h,	6Ah, 94h, 54h
db 94h,	43h, 94h, 22h, 94h, 11h, 94h, 8, 94h, 0FAh, 93h
db 0EDh, 93h, 0E4h, 93h, 0DBh, 93h, 0C5h, 93h, 79h, 93h
db 2Bh,	96h, 24h, 96h, 18h, 96h, 5, 96h, 0F0h, 95h, 0E2h
db 95h,	0C4h, 95h, 0B3h, 95h, 0ABh, 95h, 99h, 95h, 87h
db 95h,	49h, 95h, 3Dh, 95h, 2Ch, 95h, 13h, 95h,	7, 95h
db 0DEh, 94h, 0CEh, 94h, 0BBh, 94h, 0A8h, 94h, 0A0h, 94h
db 0A3h, 99h, 91h, 99h,	85h, 99h
db 0F0h, 98h, 0D1h, 98h, 9Ch, 98h, 52h,	98h, 0E5h, 97h
db 0D0h, 97h, 0BDh, 97h, 87h, 97h, 5Fh,	97h, 39h, 97h
db 0CAh, 96h, 8Bh, 96h,	95h, 9Dh, 7Bh, 9Dh, 72h, 9Dh, 69h
db 9Dh,	61h, 9Dh, 58h, 9Dh, 21h, 9Dh, 9, 2 dup(9Dh), 9Ch
db 82h,	9Ch, 79h, 9Ch, 6Ah, 9Ch, 41h, 9Ch, 21h,	9Ch, 0Fh
db 9Ch,	7, 9Ch,	0DAh, 9Bh, 0B5h, 9Bh, 0ACh, 9Bh, 88h, 9Bh
db 80h,	9Bh, 68h, 9Bh, 5Ch, 9Bh, 4Bh, 9Bh, 41h,	9Bh, 32h
db 9Bh,	22h, 9Bh, 15h, 9Bh, 3, 9Bh, 0F8h, 9Ah, 0E0h, 9Ah
db 0D3h, 9Ah, 0CBh, 9Ah, 88h, 9Ah, 51h,	9Ah, 42h, 9Ah
db 3Ah,	9Ah, 0FFh, 99h,	0EFh, 99h, 0E7h, 99h, 30h, 0A1h
db 21h,	0A1h, 12h, 0A1h, 0FAh, 0A0h, 0EEh, 0A0h, 0D8h
db 0A0h, 0C7h, 0A0h, 0BCh, 0A0h, 0B4h, 0A0h, 84h, 0A0h
db 70h,	0A0h, 5Ah, 0A0h, 4Ch, 0A0h, 35h, 0A0h, 29h, 0A0h
db 0E0h, 9Fh, 0D8h, 9Fh, 0CCh, 9Fh, 0B6h, 9Fh, 0A4h, 9Fh
db 98h,	9Fh, 83h, 9Fh, 71h, 9Fh, 5Fh, 9Fh, 32h,	9Fh, 1Eh
db 9Fh,	5, 9Fh,	0EBh, 9Eh, 0D9h, 9Eh, 0C8h, 9Eh, 0ACh
db 9Eh,	0A4h, 9Eh, 9Bh,	9Eh, 7Dh, 9Eh, 6Ah, 9Eh, 58h, 9Eh
db 4Ch,	9Eh, 30h, 9Eh, 28h, 9Eh, 1Fh, 9Eh, 0F5h, 9Dh, 0E2h
db 9Dh,	0D2h, 9Dh, 72h,	0A4h, 61h, 0A4h, 59h, 0A4h, 3Ch
db 0A4h, 33h, 0A4h, 1Bh, 0A4h, 13h, 0A4h, 3, 0A4h, 0F4h
db 0A3h, 0E4h, 0A3h, 0DCh, 0A3h, 0D3h, 0A3h, 0C9h, 0A3h
db 0B4h, 0A3h, 0A8h, 0A3h, 63h,	0A3h, 52h, 0A3h, 42h, 0A3h
db 2Fh,	0A3h, 13h, 0A3h, 7, 0A3h, 0B1h,	0A2h, 0A4h, 0A2h
db 89h,	0A2h, 7Dh, 0A2h, 5Ah, 0A2h, 3Eh, 0A2h, 2Fh, 0A2h
db 15h,	0A2h, 0EEh, 0A1h, 0AFh,	0A1h, 0A4h, 0A1h, 8Eh
db 0A1h, 80h, 0A1h, 65h, 0A1h, 14h, 0A8h, 0F9h,	0A7h, 0E5h
db 0A7h, 0D9h, 0A7h, 0C1h, 0A7h, 0A8h, 0A7h, 8Dh, 0A7h
db 7Dh,	0A7h, 65h, 0A7h, 4Ch, 0A7h, 31h, 0A7h, 21h, 0A7h
db 9, 0A7h, 0F0h, 0A6h,	0A8h, 0A6h, 8Eh, 0A6h, 0BBh, 0A5h
db 0A2h, 0A5h, 8Dh, 0A5h, 82h, 0A5h, 6Ch, 0A5h,	63h, 0A5h
db 5Ch,	0A5h, 3Eh, 0A5h, 0C1h, 0A4h, 91h, 0ABh,	86h, 0ABh
db 65h,	0ABh, 51h, 0ABh, 0DCh, 0AAh, 0CDh, 0AAh, 0BEh
db 0AAh, 57h, 0AAh, 47h, 0AAh, 32h, 0AAh, 22h, 0AAh, 2
db 0AAh, 0F2h, 0A9h, 0D9h, 0A9h, 0C7h, 0A9h, 0B5h, 0A9h
db 77h,	0A9h, 68h, 0A9h, 5Ch, 0A9h, 54h, 0A9h, 49h, 0A9h
db 35h,	0A9h, 29h, 0A9h, 21h, 0A9h, 16h, 0A9h, 3, 0A9h
db 0EAh, 0A8h, 0D6h, 0A8h, 0BCh, 0A8h, 0ACh, 0A8h, 93h
db 0A8h, 65h, 0A8h, 51h, 0A8h, 45h, 0A8h, 2Dh, 0A8h, 85h
db 0AFh, 5Bh, 0AFh, 49h, 0AFh, 0Fh, 0AFh, 0EBh,	0AEh, 0DBh
db 3 dup(0AEh),	7Dh, 0AEh, 6Ah,	0AEh, 56h, 0AEh, 41h, 0AEh
db 2Eh,	0AEh, 0EDh, 0ADh, 0C5h,	0ADh, 0ABh, 0ADh, 94h
db 0ADh, 79h, 0ADh, 65h, 0ADh, 59h, 0ADh, 41h, 0ADh, 28h
db 0ADh, 0Ch, 0ADh, 3, 0ADh, 0FCh, 0ACh, 0BFh, 0ACh, 83h
db 0ACh, 37h, 0ACh, 9, 0ACh, 0EBh, 0ABh, 15h, 0B3h, 0D9h
db 0B2h, 0C5h, 0B2h, 9Bh, 0B2h,	5Dh, 0B2h, 43h,	0B2h, 1Dh
db 0B2h, 9, 0B2h, 0C4h,	0B1h, 0B5h, 0B1h, 95h, 0B1h, 59h
db 0B1h, 2Eh, 0B1h, 23h, 0B1h, 0E8h, 0B0h, 0AAh, 0B0h
db 9Fh,	0B0h, 6Eh, 0B0h, 64h, 0B0h, 4Fh, 0B0h, 13h, 0B0h
db 4, 0B0h, 0E7h, 0AFh,	0B1h, 0AFh, 0A2h, 0AFh,	9Ch, 0B6h
db 91h,	0B6h, 7Dh, 0B6h, 57h, 0B6h, 4Ch, 0B6h, 29h, 0B6h
db 0, 0B6h, 0ECh, 0B5h,	0CEh, 0B5h, 0C9h, 0B5h,	0A1h, 0B5h
db 96h,	0B5h, 85h, 0B5h, 65h
db 0B5h, 51h, 0B5h, 22h, 0B5h, 0, 0B5h,	0DEh, 0B4h, 0BCh
db 0B4h, 0AFh, 0B4h, 70h, 0B4h,	5Ch, 0B4h, 0Fh,	0B4h, 3
db 0B4h, 0EEh, 0B3h, 0E5h, 0B3h, 0DDh, 0B3h, 0D2h, 0B3h
db 0C9h, 0B3h, 0C4h, 0B3h, 0BBh, 3 dup(0B3h), 0A6h, 0B3h
db 96h,	0B3h, 86h, 0B3h, 7Eh, 0B3h, 75h, 0B3h, 66h, 0B3h
db 5Dh,	0B3h, 55h, 0B3h, 4Ah, 0B3h, 41h, 0B3h, 3Ch, 0B3h
db 33h,	0B3h, 2Bh, 0B3h, 22h, 0B3h, 0F9h, 0B6h,	0F1h, 0B6h
db 0E8h, 0B6h, 0CCh, 0BAh, 0B4h, 0BAh, 7Ch, 0BAh, 70h
db 0BAh, 40h, 0BAh, 13h, 0BAh, 0Bh, 0BAh, 0EAh,	0B9h, 9Fh
db 0B9h, 97h, 0B9h, 76h, 0B9h, 43h, 0B9h, 38h, 0B9h, 2Fh
db 0B9h, 24h, 0B9h, 1Fh, 0B9h, 0Ah, 0B9h, 5, 0B9h, 0, 0B9h
db 0C4h, 0B8h, 56h, 0B8h, 39h, 0B8h, 5,	0B8h, 0E0h, 0B7h
db 0CBh, 0B7h, 93h, 0B7h, 87h, 0B7h, 62h, 0B7h,	4Dh, 0B7h
db 72h,	0BEh, 5Ch, 0BEh, 46h, 0BEh, 34h, 0BEh, 0FFh, 0BDh
db 0F4h, 0BDh, 0DDh, 0BDh, 0C4h, 0BDh, 0B8h, 0BDh, 0A8h
db 0BDh, 8Ch, 0BDh, 83h, 0BDh, 61h, 0BDh, 47h, 0BDh, 21h
db 0BDh, 19h, 0BDh, 0FEh, 0BCh,	0DEh, 0BCh, 0CDh, 0BCh
db 0BBh, 0BCh, 9Bh, 0BCh, 87h, 0BCh, 7Eh, 0BCh,	79h, 0BCh
db 71h,	0BCh, 6Ch, 0BCh, 67h, 0BCh, 3Eh, 0BCh, 17h, 0BCh
db 0EDh, 0BBh, 0B0h, 0BBh, 8Dh,	0BBh, 59h, 0BBh, 48h, 0BBh
db 31h,	0BBh, 26h, 0BBh, 0, 0BBh, 0D8h,	0BFh, 0C7h, 0BFh
db 7Eh,	0BFh, 71h, 0BFh, 5Bh, 0BFh, 4Ah, 0BFh, 35h, 0BFh
db 17h,	0BFh, 0Fh, 0BFh, 0FFh, 0BEh, 0F7h, 0BEh, 0E8h
db 0BEh, 0B6h, 0BEh, 0A4h, 0BEh, 87h, 0BEh, 44h, 0C3h
db 2Ch,	0C3h, 19h, 0C3h, 0Dh, 0C3h, 0F5h, 0C2h,	95h, 0C2h
db 81h,	0C2h, 2Ah, 0C2h, 0Fh, 0C2h, 0FCh, 0C1h,	0B0h, 0C1h
db 95h,	0C1h, 82h, 0C1h, 34h, 0C1h, 1Ah, 0C1h, 7, 0C1h
db 0E4h, 0C0h, 0D8h, 0C0h, 0C6h, 0C0h, 0B4h, 0C0h, 0A7h
db 0C0h, 8Fh, 0C0h, 56h, 0C0h, 0F3h, 0BFh, 30h,	0C4h, 1Bh
db 0C4h, 0Bh, 0C4h, 0FBh, 0C3h,	0E4h, 0C3h, 0DBh, 0C3h
db 0D4h, 0C3h, 0CFh, 0C3h, 0BBh, 0C3h, 0B6h, 0C3h, 0DCh
db 0C7h, 0BFh, 0C7h, 99h, 0C7h,	66h, 0C7h, 53h,	0C7h, 4Ah
db 0C7h, 2Eh, 0C7h, 21h, 0C7h, 12h, 0C7h, 1, 0C7h, 0BBh
db 0C6h, 9Eh, 0C6h, 80h, 0C6h, 4Dh, 0C6h, 26h, 0C6h, 0Dh
db 0C6h, 0EDh, 0C5h, 0CCh, 0C5h, 0A6h, 0C5h, 35h, 0C5h
db 4, 0C5h, 0EAh, 0C4h,	0D6h, 0C4h, 0ABh, 0C4h,	9Eh, 0C4h
db 84h,	0C4h, 73h, 0C4h, 5Ch, 0C4h, 97h, 0CBh, 87h, 0CBh
db 73h,	0CBh, 67h, 0CBh, 42h, 0CBh, 3Bh, 0CBh, 2Ch, 0CBh
db 1Eh,	0CBh, 9, 0CBh, 0, 0CBh,	0F0h, 0CAh, 0D7h, 0CAh
db 0A4h, 0CAh, 91h, 0CAh, 88h, 0CAh, 5Dh, 0CAh,	4Ch, 0CAh
db 47h,	0CAh, 30h, 0CAh, 14h, 0CAh, 4, 0CAh, 0C5h, 0C9h
db 0A7h, 0C9h, 98h, 0C9h, 84h, 0C9h, 76h, 0C9h,	63h, 0C9h
db 2Bh,	0C9h, 16h, 0C9h, 0F1h, 0C8h, 0E6h, 0C8h, 0CFh
db 0C8h, 9Ah, 0C8h, 88h, 0C8h, 33h, 0C8h, 1Dh, 0C8h, 0Dh
db 0C8h, 0FDh, 0C7h, 0EEh, 0C7h, 2Ah, 0CFh, 0F4h, 0CEh
db 0E4h, 0CEh, 0C9h, 0CEh, 0BAh, 0CEh, 9Fh, 0CEh, 93h
db 0CEh, 6Fh, 0CEh, 67h, 0CEh, 57h, 0CEh, 36h, 0CEh, 2Dh
db 0CEh, 20h, 0CEh, 0FFh, 0CDh,	0F6h, 0CDh, 0D5h, 0CDh
db 0AAh, 0CDh, 0A1h, 0CDh, 8Dh,	0CDh, 5Dh, 0CDh, 3Dh, 0CDh
db 2Ah,	0CDh, 19h, 0CDh, 5, 0CDh, 0F8h,	0CCh, 0F0h, 0CCh
db 0E0h, 0CCh, 0D8h, 0CCh, 0C1h, 0CCh, 88h, 0CCh, 64h
db 0CCh, 57h, 0CCh, 36h, 0CCh, 14h, 0CCh, 5, 0CCh, 0D6h
db 0CBh, 7Ch, 0CFh, 6Ch, 0CFh, 59h, 0CFh, 2Bh
db 0D3h, 0Fh, 0D3h, 0F3h, 0D2h,	0DBh, 0D2h, 9Eh, 0D2h
db 88h,	0D2h, 78h, 0D2h, 59h, 0D2h, 41h, 0D2h, 30h, 0D2h
db 2Bh,	0D2h, 23h, 0D2h, 17h, 0D2h, 0Ch, 0D2h, 0F7h, 0D1h
db 0DAh, 0D1h, 96h, 0D1h, 8Bh, 0D1h, 63h, 0D1h,	50h, 0D1h
db 34h,	0D1h, 2Bh, 0D1h, 0FBh, 0D0h, 0DBh, 0D0h, 0B7h
db 0D0h, 0A3h, 0D0h, 8Dh, 0D0h,	7Dh, 0D0h, 6Dh,	0D0h, 52h
db 0D0h, 34h, 0D0h, 0E9h, 0CFh,	95h, 0CFh, 0E4h, 0D6h
db 0BEh, 0D6h, 0A8h, 0D6h, 84h,	0D6h, 72h, 0D6h, 5Dh, 0D6h
db 4Bh,	0D6h, 20h, 0D6h, 0Dh, 0D6h, 1, 0D6h, 0E8h, 0D5h
db 0CBh, 0D5h, 81h, 0D5h, 6Eh, 0D5h, 5Ch, 0D5h,	4Dh, 0D5h
db 1Bh,	0D5h, 0Ah, 0D5h, 5, 0D5h, 0ECh,	0D4h, 0DDh, 3 dup(0D4h)
db 0B6h, 0D4h, 9Ah, 0D4h, 8Ch, 0D4h, 70h, 0D4h,	61h, 0D4h
db 52h,	0D4h, 41h, 0D4h, 3Ch, 0D4h, 30h, 0D4h, 21h, 0D4h
db 16h,	0D4h, 0FCh, 0D3h, 0E9h,	0D3h, 0D8h, 0D3h, 9Fh
db 0D3h, 88h, 0D3h, 72h, 0D3h, 69h, 0D3h, 3Bh, 0D3h, 0C6h
db 0D8h, 0B1h, 0D8h, 0A3h, 0D8h, 97h, 0D8h, 7Ch, 0D8h
db 67h,	0D8h, 50h, 0D8h, 3Ch, 0D8h, 34h, 0D8h, 2Ch, 0D8h
db 1Ch,	0D8h, 14h, 0D8h, 8, 0D8h, 0DEh,	0D7h, 0D2h, 0D7h
db 0C2h, 0D7h, 0B9h, 0D7h, 0A1h, 0D7h, 7Eh, 0D7h, 70h
db 0D7h, 15h, 0D7h, 4, 0D7h, 0FFh, 0D6h, 0EDh, 0D6h, 9Eh
db 0DCh, 8Fh, 0DCh, 6Eh, 0DCh, 1Eh, 0DCh, 0Eh, 0DCh, 0E8h
db 0DBh, 0D8h, 0DBh, 0BDh, 0DBh, 94h, 0DBh, 82h, 0DBh
db 5Bh,	0DBh, 49h, 0DBh, 39h, 0DBh, 13h, 0DBh, 1, 0DBh
db 0EFh, 0DAh, 0E0h, 0DAh, 0CDh, 0DAh, 0B3h, 0DAh, 61h
db 0DAh, 52h, 0DAh, 3Fh, 0DAh, 33h, 0DAh, 23h, 0DAh, 0E6h
db 0D9h, 95h, 0D9h, 7Fh, 0D9h, 5Fh, 0D9h, 2Dh, 0D9h, 73h
db 0E0h, 3Fh, 0E0h, 32h, 0E0h, 17h, 0E0h, 2, 0E0h, 0E1h
db 0DFh, 66h, 0DFh, 57h, 0DFh, 1, 0DFh,	0E2h, 0DEh, 0D9h
db 0DEh, 0B2h, 0DEh, 92h, 0DEh,	7Dh, 0DEh, 71h,	0DEh, 4Bh
db 0DEh, 20h, 0DEh, 0Dh, 0DEh, 0F1h, 0DDh, 0E5h, 0DDh
db 0B8h, 0DDh, 0A3h, 0DDh, 99h,	0DDh, 84h, 0DDh, 6Ah, 0DDh
db 38h,	0DDh, 1Dh, 0DDh, 15h, 0DDh, 6, 0DDh, 0F3h, 0DCh
db 0D8h, 0DCh, 0D1h, 0DCh, 7Fh,	0E2h, 70h, 0E2h, 61h, 0E2h
db 40h,	0E2h, 29h, 0E2h, 0Fh, 0E2h, 0FFh, 0E1h,	0E8h, 0E1h
db 0D8h, 0E1h, 0CFh, 0E1h, 0BEh, 0E1h, 0A8h, 0E1h, 77h
db 0E1h, 66h, 0E1h, 4Eh, 0E1h, 29h, 0E1h, 19h, 0E1h, 0FEh
db 0E0h, 0D2h, 0E0h, 0B8h, 0E0h, 95h, 0E0h, 86h, 0E0h
db 44h,	0E6h, 36h, 0E6h, 2Ah, 0E6h, 0Eh, 0E6h, 3, 0E6h
db 2 dup(0E5h),	0DDh, 0E5h, 0AFh, 0E5h,	7Bh, 0E5h, 6Bh
db 0E5h, 52h, 0E5h, 45h, 0E5h, 3Dh, 0E5h, 2Dh, 0E5h, 16h
db 0E5h, 2, 0E5h, 0E3h,	0E4h, 0D1h, 0E4h, 0BDh,	0E4h, 0B1h
db 0E4h, 9Fh, 0E4h, 97h, 0E4h, 83h, 0E4h, 72h, 0E4h, 54h
db 0E4h, 1Fh, 0E4h, 0Fh, 0E4h, 0E5h, 0E3h, 0AFh, 0E3h
db 0A1h, 0E3h, 8Bh, 0E3h, 7Dh, 0E3h, 6Dh, 0E3h,	5Fh, 0E3h
db 51h,	0E3h, 3Fh, 0E3h, 31h, 0E3h, 23h, 0E3h, 17h, 0E3h
db 3, 0E3h, 0F5h, 0E2h,	0E7h, 0E2h, 0DBh, 0E2h,	0C8h, 0E2h
db 0B8h, 0E2h, 0AEh, 0E8h, 9Dh,	0E8h, 85h, 0E8h, 7Dh, 0E8h
db 6Bh,	0E8h, 5Ah, 0E8h, 52h, 0E8h, 3Dh, 0E8h, 1Fh, 0E8h
db 13h,	0E8h, 0, 0E8h, 0F8h, 0E7h, 0E0h, 0E7h, 0D7h, 0E7h
db 0CFh, 0E7h, 0B5h, 0E7h, 0A8h, 0E7h, 0A0h, 0E7h, 7Dh
db 0E7h, 56h, 0E7h, 4Eh, 0E7h, 2Eh, 0E7h, 22h, 0E7h, 15h
db 0E7h, 0Dh, 0E7h, 0ECh, 0E6h,	0DCh, 0E6h, 0D0h, 0E6h
db 0B8h, 0E6h, 0AFh, 0E6h, 0A7h, 0E6h, 97h, 0E6h
db 74h,	0E6h, 63h, 0E6h, 6Bh, 0ECh, 5Ch, 0ECh, 32h, 0ECh
db 24h,	0ECh, 0F9h, 0EBh, 90h, 0EBh, 31h, 0EBh,	0Ch, 0EBh
db 0FAh, 0EAh, 0E0h, 0EAh, 0CFh, 0EAh, 0AFh, 0EAh, 85h
db 0EAh, 70h, 0EAh, 68h, 0EAh, 5Ch, 0EAh, 2Ah, 0EAh, 22h
db 0EAh, 9, 0EAh, 1, 2 dup(0EAh), 0E9h,	0D7h, 0E9h, 0CBh
db 0E9h, 0AAh, 0E9h, 99h, 0E9h,	8Bh, 0E9h, 7Eh,	0E9h, 76h
db 0E9h, 54h, 0E9h, 2Ah, 0E9h, 1Eh, 0E9h, 8, 0E9h, 0F0h
db 0E8h, 0E4h, 0E8h, 0DBh, 0E8h, 0D3h, 0E8h, 0C7h, 0EFh
db 0B1h, 0EFh, 6Ah, 0EFh, 4Bh, 0EFh, 3Fh, 0EFh,	33h, 0EFh
db 19h,	0EFh, 4, 0EFh, 0F8h, 0EEh, 0DBh, 0EEh, 0C0h, 0EEh
db 6Fh,	0EEh, 61h, 0EEh, 59h, 0EEh, 4Ah, 0EEh, 38h, 0EEh
db 29h,	0EEh, 0Bh, 0EEh, 0E7h, 0EDh, 0CCh, 0EDh, 0A2h
db 0EDh, 72h, 0EDh, 47h, 0EDh, 0Bh, 0EDh, 0FAh,	0ECh, 0B3h
db 0ECh, 0A5h, 0ECh, 0C4h, 0F0h, 92h, 0F0h, 65h, 0F0h
db 56h,	0F4h, 44h, 0F4h, 31h, 0F4h, 25h, 0F4h, 0Fh, 0F4h
db 0FEh, 0F3h, 0CFh, 0F3h, 0BDh, 0F3h, 9Dh, 0F3h, 94h
db 0F3h, 88h, 0F3h, 79h, 0F3h, 38h, 0F3h, 19h, 0F3h, 5
db 0F3h, 0EDh, 0F2h, 0D5h, 0F2h, 0B7h, 0F2h, 0ABh, 0F2h
db 9Bh,	0F2h, 28h, 0F2h, 0Ch, 0F2h, 0DFh, 0F1h,	0C7h, 0F1h
db 0B7h, 0F1h, 0AAh, 0F1h, 0A1h, 0F1h, 84h, 0F1h, 73h
db 0F1h, 65h, 0F1h, 48h, 0F1h, 2Ah, 0F1h, 0Fh, 0F1h, 0E6h
db 0F0h, 0D7h, 0F0h, 24h, 0F8h,	0E7h, 0F7h, 0C4h, 0F7h
db 0B1h, 0F7h, 81h, 0F7h, 67h, 0F7h, 5Eh, 0F7h,	39h, 0F7h
db 2Dh,	0F7h, 1Ch, 0F7h, 0Dh, 0F7h, 0FDh, 0F6h,	0E0h, 0F6h
db 0D8h, 0F6h, 0C5h, 0F6h, 8Fh,	0F6h, 76h, 0F6h, 6Dh, 0F6h
db 4Eh,	0F6h, 27h, 0F6h, 1Fh, 0F6h, 0Ch, 0F6h, 0F9h, 0F5h
db 0EAh, 0F5h, 0D3h, 0F5h, 0B2h, 0F5h, 9Ch, 0F5h, 89h
db 0F5h, 74h, 0F5h, 64h, 0F5h, 3Fh, 0F5h, 37h, 0F5h, 21h
db 0F5h, 12h, 0F5h, 0, 0F5h, 0F0h, 0F4h, 0D0h, 0F4h, 0C7h
db 0F4h, 0BFh, 0F4h, 0A9h, 0F4h, 2, 0FCh, 0E3h,	0FBh, 0C4h
db 0FBh, 56h, 0FBh, 4Eh, 0FBh, 42h, 0FBh, 0Bh, 0FBh, 2 dup(0FAh)
db 0F1h, 0FAh, 0E0h, 0FAh, 0C5h, 0FAh, 0A0h, 0FAh, 86h
db 0FAh, 80h, 0FAh, 5Dh, 0FAh, 49h, 0FAh, 32h, 0FAh, 0FFh
db 0F9h, 0F2h, 0F9h, 0BCh, 0F9h, 0ADh, 0F9h, 9Eh, 0F9h
db 7Fh,	0F9h, 33h, 0F9h, 0D8h, 0F8h, 0D0h, 0F8h, 0ADh
db 0F8h, 85h, 0F8h, 5Dh, 0F8h, 0ABh, 0FFh, 68h,	0FFh, 40h
db 0FFh, 33h, 0FFh, 17h, 2 dup(0FFh), 0FEh, 0DFh, 0FEh
db 0CCh, 0FEh, 0B4h, 0FEh, 8Dh,	0FEh, 71h, 0FEh, 5Bh, 0FEh
db 53h,	0FEh, 3Ch, 0FEh, 33h, 0FEh, 21h, 0FEh, 0F8h, 0FDh
db 0F0h, 0FDh, 0C5h, 0FDh, 0ABh, 0FDh, 97h, 0FDh, 8Eh
db 0FDh, 7Eh, 0FDh, 5Dh, 0FDh, 3Ch, 0FDh, 33h, 2 dup(0FDh)
db 0FCh, 0E8h, 0FCh, 0D8h, 0FCh, 0C7h, 0FCh, 90h, 0FCh
db 5Bh,	0FCh, 46h, 0FCh, 22h, 0FCh, 0E2h, 0FFh,	0C6h, 0FFh
db 0EDh, 5, 9Bh, 1, 8Eh, 1, 4Dh, 1, 40h, 1, 15h, 1, 3
db 1, 0F7h, 0, 0BEh, 0,	0A0h, 0, 89h, 0, 79h, 0, 67h, 0
db 53h,	0, 46h,	0, 17h,	0, 0Bh,	0, 4Bh,	5, 35h,	5, 26h
db 5, 0B5h, 4, 86h, 4, 57h, 4, 49h, 4, 23h, 4, 0FBh, 3
db 0F0h, 3, 0D2h, 3, 87h, 3, 65h, 3, 47h, 3, 15h, 3, 0E4h
db 2, 0CCh, 2, 92h, 2, 5Eh, 2, 4Fh, 2, 27h, 2, 0F8h, 1
db 37h,	6, 23h,	6, 18h,	6, 0F1h, 5, 0E4h, 5, 0D2h, 5, 0BAh
db 5, 92h, 5, 7Bh, 5, 1Eh, 9, 0D8h, 7
db 0C1h, 7, 0B3h, 7, 0A5h, 7, 93h, 7, 74h, 7, 5Eh, 7, 4Fh
db 7, 34h, 7, 1Fh, 7, 16h, 7, 0Dh, 7, 0CBh, 6, 0AEh, 6
db 0A2h, 6, 79h, 6, 80h, 0Dh, 3Dh, 0Dh,	2Ch, 0Dh, 21h
db 0Dh,	9, 0Dh,	8Ch, 0Ch, 6Fh, 0Ch, 63h, 0Ch, 53h, 3 dup(0Ch)
db 0EEh, 0Bh, 0ADh, 0Bh, 9Ah, 0Bh, 75h,	0Bh, 48h, 0Bh
db 0FCh, 0Ah, 90h, 0Ah,	41h, 0Ah, 0Bh, 11h, 0ADh, 10h
db 5Ah,	10h, 5,	10h, 0F9h, 0Fh,	93h, 0Fh, 2Eh, 0Fh, 0F8h
db 0Eh,	0E5h, 0Eh, 85h,	0Eh, 79h, 0Eh, 31h, 0Eh, 0E8h
db 13h,	9Ch, 13h, 26h, 13h, 3, 13h, 0E0h, 12h, 0BDh, 12h
db 3Dh,	12h, 0ADh, 11h,	8Ah, 11h, 0E5h,	17h, 0DDh, 17h
db 0CDh, 17h, 0C5h, 17h, 0B6h, 17h, 83h, 17h, 63h, 17h
db 4Ch,	17h, 37h, 17h, 12h, 17h, 0DDh, 16h, 0C2h, 16h
db 0B6h, 16h, 0A6h, 16h, 8Dh, 16h, 83h,	16h, 5Fh, 16h
db 45h,	16h, 1Dh, 16h, 2, 16h, 0D7h, 15h, 0CBh,	15h, 0B5h
db 15h,	9Eh, 15h, 92h, 15h, 86h, 15h, 42h, 15h,	17h, 15h
db 0FCh, 14h, 0F4h, 14h, 0EBh, 14h, 0DFh, 14h, 0CFh, 14h
db 0C5h, 14h, 0BDh, 14h, 0AFh, 14h, 9Eh, 14h, 8Dh, 14h
db 78h,	14h, 66h, 14h, 54h, 14h, 40h, 14h, 72h,	1Bh, 66h
db 1Bh,	53h, 1Bh, 46h, 1Bh, 3Eh, 1Bh, 2Eh, 1Bh,	18h, 1Bh
db 11h,	1Bh, 2,	1Bh, 0DFh, 1Ah,	0CCh, 1Ah, 0C3h, 1Ah, 0BBh
db 1Ah,	0ABh, 1Ah, 96h,	1Ah, 8Bh, 1Ah, 7Bh, 1Ah, 6Ch, 1Ah
db 46h,	1Ah, 0D0h, 19h,	9Fh, 19h, 83h, 19h, 72h, 19h, 57h
db 19h,	48h, 19h, 3Eh, 19h, 39h, 19h, 20h, 19h,	3, 19h
db 0ECh, 18h, 0D7h, 18h, 0B8h, 18h, 0ACh, 18h, 90h, 18h
db 7Ah,	18h, 46h, 18h, 33h, 18h, 20h, 18h, 0Ah,	18h, 0FEh
db 17h,	0F5h, 17h, 47h,	1Fh, 37h, 1Fh, 0Eh, 1Fh, 5, 1Fh
db 0ECh, 1Eh, 49h, 1Eh,	2Bh, 1Eh, 23h, 1Eh, 5, 1Eh, 0F6h
db 1Dh,	0E3h, 1Dh, 0CCh, 1Dh, 0BBh, 1Dh, 93h, 1Dh, 71h
db 1Dh,	4Fh, 1Dh, 39h, 1Dh, 1Bh, 1Dh, 0Bh, 1Dh,	0F9h, 1Ch
db 0CDh, 1Ch, 0B9h, 1Ch, 0A5h, 1Ch, 97h, 1Ch, 88h, 1Ch
db 5Eh,	1Ch, 4Ch, 1Ch, 41h, 1Ch, 39h, 1Ch, 19h,	1Ch, 0Ah
db 1Ch,	0F3h, 1Bh, 0BEh, 1Bh, 0B5h, 1Bh, 0ADh, 1Bh, 0AAh
db 1Fh,	0A1h, 1Fh, 1Dh,	23h, 10h, 23h, 7, 23h, 0F5h, 22h
db 0E6h, 22h, 0D5h, 22h, 68h, 22h, 58h,	22h, 1Bh, 22h
db 0CDh, 21h, 0AFh, 21h, 7Fh, 21h, 5Bh,	21h, 52h, 21h
db 42h,	21h, 6,	21h, 0F0h, 20h,	0D5h, 20h, 0C2h, 20h, 0B6h
db 20h,	9Eh, 20h, 8Ch, 20h, 79h, 20h, 65h, 20h,	57h, 20h
db 48h,	20h, 1Eh, 20h, 0Ch, 20h, 0FEh, 1Fh, 0F6h, 1Fh
db 0EEh, 1Fh, 0C3h, 1Fh, 3Eh, 25h, 32h,	25h, 1Fh, 25h
db 3, 25h, 0D3h, 24h, 0C0h, 24h, 0A0h, 24h, 58h, 24h, 4Dh
db 24h,	36h, 24h, 2Dh, 24h, 25h, 24h, 19h, 24h,	0D5h, 23h
db 0B3h, 23h, 87h, 23h,	0CAh, 28h, 0C5h, 28h, 0BDh, 28h
db 0A9h, 28h, 95h, 28h,	34h, 28h, 0FBh,	27h, 0DBh, 27h
db 0B1h, 27h, 9Fh, 27h,	61h, 27h, 5Ah, 27h, 3Ah, 27h, 0
db 27h,	0F7h, 26h, 0EFh, 26h, 0D1h, 26h, 0AFh, 26h, 95h
db 26h,	79h, 26h, 4Eh, 26h, 3Eh, 26h, 0E1h, 25h, 0ABh
db 25h,	98h, 25h, 85h, 25h, 45h, 2Ch, 38h, 2Ch,	28h, 2Ch
db 0C8h, 2Bh, 92h, 2Bh,	81h, 2Bh, 55h, 2Bh, 41h, 2Bh, 0EEh
db 2Ah
db 0DFh, 2Ah, 0C7h, 2Ah, 0B4h, 2Ah, 88h, 2Ah, 6Eh, 2Ah
db 57h,	2Ah, 15h, 2Ah, 4, 2Ah, 0D8h, 29h, 9Fh, 29h, 51h
db 29h,	40h, 29h, 2Bh, 29h, 0E3h, 28h, 33h, 30h, 22h, 30h
db 0Dh,	30h, 0FCh, 2Fh,	0E8h, 2Fh, 9Eh,	2Fh, 5Fh, 2Fh
db 41h,	2Fh, 21h, 2Fh, 16h, 2Fh, 0F4h, 2Eh, 0D1h, 2Eh
db 94h,	2Eh, 8Eh, 2Eh, 6Eh, 2Eh, 69h, 2Eh, 61h,	2Eh, 3Dh
db 2Eh,	7, 2Eh,	0F3h, 2Dh, 0EEh, 2Dh, 0E6h, 2Dh, 6Fh, 2Dh
db 68h,	2Dh, 45h, 2Dh, 3Dh, 3 dup(2Dh),	25h, 2Dh, 0FCh
db 2Ch,	22h, 33h, 0FCh,	32h, 0ECh, 32h,	0DDh, 32h, 73h
db 32h,	17h, 32h, 9, 32h, 0F4h,	31h, 5Fh, 31h, 5Ah, 31h
db 52h,	31h, 46h, 31h, 24h, 31h, 19h, 31h, 0Bh,	31h, 3
db 31h,	78h, 30h, 6Ah, 30h, 48h, 30h, 0C2h, 36h, 72h, 36h
db 55h,	36h, 1,	36h, 0F2h, 35h,	0D3h, 35h, 0BEh, 35h, 0B1h
db 35h,	0Dh, 35h, 81h, 34h, 6Fh, 34h, 60h, 34h,	3Eh, 34h
db 30h,	34h, 12h, 34h, 99h, 33h, 87h, 33h, 81h,	33h, 4Ch
db 33h,	7Fh, 3Ah, 9Ch, 39h, 11h, 39h, 9, 39h, 0DBh, 38h
db 0DDh, 37h, 0ABh, 37h, 9Fh, 37h, 22h,	37h, 0FBh, 36h
db 0F3h, 3Ah, 0F3h, 3Fh, 0C0h, 3Fh, 0AFh, 3Fh, 8Dh, 3Fh
db 84h,	3Fh, 5Fh, 3Fh, 49h, 3Fh, 0CFh, 3Eh, 0B7h, 3Eh
db 79h,	3Eh, 41h, 3Eh, 5, 3Eh, 0EDh, 3Dh, 0C8h,	3Dh, 0BEh
db 3Dh,	67h, 3Dh, 53h, 3Dh, 9, 3Dh, 0F7h, 3Ch, 0D5h, 3Ch
db 0BDh, 3Ch, 0A8h, 3Ch, 6Bh, 3Ch, 53h,	43h, 3Fh, 43h
db 25h,	43h, 7,	43h, 0E5h, 42h,	0D9h, 42h, 0C1h, 42h, 0B5h
db 42h,	99h, 42h, 81h, 42h, 6Dh, 42h, 5Bh, 42h,	47h, 42h
db 35h,	42h, 19h, 42h, 7, 42h, 0F8h, 41h, 0D3h,	41h, 0C5h
db 41h,	0B3h, 41h, 0A5h, 41h, 95h, 41h,	87h, 41h, 75h
db 41h,	4Dh, 41h, 29h, 41h, 13h, 41h, 8, 41h, 0EDh, 40h
db 0C5h, 40h, 0B6h, 40h, 0A5h, 40h, 9Ah, 40h, 74h, 40h
db 62h,	40h, 45h, 40h, 39h, 40h, 1Ch, 40h, 10h,	40h, 2 dup(47h)
db 0F6h, 46h, 0ABh, 46h, 0C3h, 45h, 0B7h, 45h, 73h, 45h
db 68h,	45h, 5Ch, 45h, 30h, 45h, 0E1h, 44h, 0CEh, 44h
db 92h,	44h, 3Fh, 44h, 1Eh, 44h, 99h, 4Ah, 31h,	4Ah, 12h
db 4Ah,	0FEh, 49h, 0A5h, 49h, 91h, 49h,	75h, 49h, 2Fh
db 49h,	27h, 49h, 13h, 49h, 2, 49h, 0DFh, 48h, 0D3h, 48h
db 0C7h, 48h, 0ADh, 48h, 85h, 48h, 77h,	48h, 1Eh, 48h
db 0Fh,	48h, 3,	48h, 0F0h, 47h,	0E0h, 47h, 0B9h, 47h, 0AAh
db 47h,	9Eh, 47h, 90h, 47h, 87h, 47h, 66h, 47h,	0D6h, 4Dh
db 0D1h, 4Dh, 48h, 4Dh,	30h, 4Dh, 24h, 4Dh, 18h, 4Dh, 6
db 4Dh,	0FAh, 4Ch, 0EEh, 4Ch, 0D7h, 4Ch, 0B9h, 4Ch, 9Eh
db 4Ch,	90h, 4Ch, 78h, 4Ch, 69h, 4Ch, 0D9h, 4Bh, 0CEh
db 4Bh,	98h, 4Bh, 89h, 4Bh, 71h, 4Bh, 53h, 4Bh,	0FFh, 4Ah
db 0F1h, 4Ah, 0BEh, 4Ah, 80h, 51h, 57h,	51h, 0E9h, 50h
db 0DDh, 50h, 0CCh, 50h, 0BCh, 50h, 0A0h, 50h, 77h, 50h
db 68h,	50h, 5Ch, 50h, 42h, 50h, 3Dh, 50h, 31h,	50h, 0ECh
db 4Fh,	0D8h, 4Fh, 0Bh,	4Fh, 0FDh, 4Eh,	0C4h, 4Eh, 86h
db 4Eh,	78h, 4Eh, 2Dh, 54h, 0FDh, 53h, 0EBh, 53h, 0D8h
db 53h,	0C4h, 53h, 0B5h, 53h, 93h, 53h,	85h, 53h, 5Eh
db 53h,	0DDh, 52h, 0B0h, 52h, 64h, 52h,	5Bh, 55h, 14h
db 55h,	0CEh, 54h, 0BBh, 54h, 9Eh, 54h,	84h
byte_4DFC2	db 54h,	60h, 54h, 6Ch, 58h, 60h, 58h, 50h, 58h,	1Eh, 58h
db 0F7h, 57h, 0EAh, 57h, 0D8h, 57h, 0A8h, 57h, 58h, 57h
db 46h,	57h, 41h, 57h, 33h, 57h, 3, 57h, 0D8h, 56h, 0C1h
db 56h,	0B6h, 56h, 9Eh,	56h, 69h, 56h, 5Dh, 56h, 3Eh, 56h
db 35h,	56h, 0DAh, 55h,	0BBh, 55h, 0A8h, 55h, 96h, 55h
db 62h,	5Ch, 4Fh, 5Ch, 37h, 5Ch, 1Eh, 5Ch, 1, 5Ch, 9Bh
db 5Bh,	8Fh, 5Bh, 77h, 5Bh, 2Eh, 5Bh, 1Ah, 5Bh,	6, 5Bh
db 0ECh, 5Ah, 86h, 5Ah,	7Dh, 5Ah, 5Eh, 5Ah, 47h, 5Ah, 34h
db 5Ah,	24h, 5Ah, 11h, 5Ah, 0F9h, 59h, 0CBh, 59h, 0BBh
db 59h,	86h, 59h, 77h, 59h, 1Ah, 59h, 12h, 59h,	0EBh, 58h
db 0D7h, 58h, 0C7h, 58h, 77h, 5Fh, 48h,	5Fh, 36h, 5Fh
db 2Ch,	5Fh, 0Ah, 5Fh, 0, 5Fh, 0CCh, 5Eh, 0C0h,	5Eh, 0B7h
db 5Eh,	0AEh, 5Eh, 8Ch,	5Eh, 70h, 5Eh, 4Fh, 5Eh, 3Ah, 5Eh
db 18h,	5Eh, 0FCh, 5Dh,	0DBh, 5Dh, 0B6h, 5Dh, 81h, 5Dh
db 75h,	5Dh, 65h, 5Dh, 48h, 5Dh, 31h, 5Dh, 1Bh,	5Dh, 5
db 5Dh,	0F2h, 5Ch, 0D7h, 5Ch, 0B5h, 5Ch, 9Ch, 5Ch, 91h
db 5Ch,	58h, 63h, 0Dh, 63h, 0F4h, 62h, 0E9h, 62h, 0D8h
db 62h,	99h, 62h, 8Ah, 62h, 78h, 62h, 0A8h, 61h, 96h, 61h
db 85h,	61h, 30h, 61h, 19h, 61h, 0C6h, 60h, 6Ch, 60h, 61h
db 60h,	44h, 60h, 17h, 60h, 0FBh, 5Fh, 0E7h, 5Fh, 1Dh
db 67h,	8, 67h,	0DFh, 66h, 0D3h, 66h, 0AEh, 66h, 4Ah, 66h
db 3Ch,	66h, 29h, 66h, 19h, 66h, 6, 66h, 0FAh, 65h, 0F1h
db 65h,	0A3h, 65h, 4Ch,	65h, 3Ch, 65h, 24h, 65h, 0Dh, 65h
db 0FAh, 64h, 0E6h, 64h, 0D2h, 64h, 9Dh, 64h, 7Dh, 64h
db 72h,	64h, 5Ah, 64h, 44h, 64h, 7, 64h, 0E8h, 63h, 0D6h
db 63h,	0B7h, 63h, 9Fh,	63h, 9Ah, 69h, 92h, 69h, 89h, 69h
db 52h,	69h, 49h, 69h, 3Ch, 69h, 19h, 69h, 14h,	69h, 0F3h
db 68h,	0B9h, 68h, 0B0h, 68h, 88h, 68h,	75h, 68h, 5Eh
db 68h,	4Ah, 68h, 0FDh,	67h, 0F5h, 67h,	0E9h, 67h, 0DAh
db 67h,	0D1h, 67h, 0B2h, 67h, 0A0h, 67h, 84h, 67h, 6Ah
db 67h,	5Bh, 67h, 70h, 6Dh, 11h, 6Dh, 0FAh, 6Ch, 0E7h
db 6Ch,	0C3h, 6Ch, 0ABh, 6Ch, 88h, 6Ch,	26h, 6Ch, 0E9h
db 6Bh,	0D7h, 6Bh, 9Bh,	6Bh, 76h, 6Bh, 63h, 6Bh, 0BBh
db 6Ah,	36h, 6Ah, 29h, 6Ah, 0F6h, 69h, 0E9h, 69h, 14h
db 71h,	1, 71h,	0EDh, 70h, 0D4h, 70h, 0ACh, 70h, 62h, 70h
db 3, 70h, 0E2h, 6Fh, 0CDh, 6Fh, 0C0h, 6Fh, 0B0h, 6Fh
db 0A3h, 6Fh, 7Ah, 6Fh,	62h, 6Fh, 53h, 6Fh, 48h, 6Fh, 34h
db 6Fh,	25h, 6Fh, 0FEh,	6Eh, 0F3h, 6Eh,	86h, 6Eh, 6Ah
db 6Eh,	43h, 6Eh, 39h, 6Eh, 1, 6Eh, 0D8h, 6Dh, 9Bh, 6Dh
db 88h,	6Dh, 8Eh, 74h, 7Eh, 74h, 65h, 74h, 5Ah,	74h, 42h
db 74h,	30h, 74h, 17h, 74h, 0F3h, 73h, 0C3h, 73h, 91h
db 73h,	86h, 73h, 64h, 73h, 5Bh, 73h, 26h, 73h,	0F2h, 72h
db 0DFh, 72h, 0D7h, 72h, 7Ch, 72h, 56h,	72h, 3Eh, 72h
db 14h,	72h, 0B9h, 71h,	74h, 71h, 29h, 71h, 0E9h, 77h
db 0DDh, 77h, 0D0h, 77h, 0BDh, 77h, 0ADh, 77h, 87h, 77h
db 7Fh,	77h, 56h, 77h, 1Eh, 77h, 0Ch, 77h, 0F4h, 76h, 0E1h
db 76h,	0A4h, 76h, 7Eh,	76h, 42h, 76h, 0FAh, 75h, 78h
db 75h,	5Bh, 75h, 4Bh, 75h, 3Fh, 75h, 2Fh, 75h,	0E4h, 74h
db 6Fh,	7Bh, 54h, 7Bh, 19h, 7Bh, 0Ah
db 7Bh,	0FBh, 7Ah, 0DAh, 7Ah, 55h, 7Ah,	46h, 7Ah, 30h
db 7Ah,	6, 7Ah,	0ECh, 79h, 86h,	79h, 66h, 79h, 52h, 79h
db 2Ah,	79h, 0Eh, 79h, 0EEh, 78h, 0D7h,	78h, 46h, 78h
db 27h,	7Fh, 10h, 7Fh, 0D8h, 7Eh, 0A2h,	7Eh, 7Dh, 7Eh
db 5Dh,	7Eh, 49h, 7Eh, 12h, 7Eh, 7, 7Eh, 0FBh, 7Dh, 0E6h
db 7Dh,	0D3h, 7Dh, 84h,	7Dh, 77h, 7Dh, 55h, 7Dh, 14h, 7Dh
db 0Bh,	7Dh, 0C9h, 7Ch,	0C4h, 7Ch, 0A2h, 7Ch, 8Fh, 7Ch
db 86h,	7Ch, 76h, 7Ch, 6Dh, 7Ch, 56h, 7Ch, 43h,	7Ch, 1Dh
db 7Ch,	0F9h, 7Bh, 0B7h, 7Bh, 0A1h, 7Bh, 0EFh, 82h, 0DCh
db 82h,	0C8h, 82h, 0B4h, 82h, 9Bh, 82h,	6Bh, 82h, 4Dh
db 82h,	42h, 82h, 2Ah, 82h, 15h, 82h, 0D8h, 81h, 0B7h
db 81h,	0A4h, 81h, 85h,	81h, 6Eh, 81h, 27h, 81h, 13h, 81h
db 0D4h, 80h, 0C8h, 80h, 0BCh, 80h, 0A8h, 80h, 95h, 80h
db 70h,	80h, 65h, 80h, 48h, 80h, 16h, 80h, 9Fh,	7Fh, 8Dh
db 7Fh,	7Ch, 7Fh, 3Ch, 86h, 18h, 86h, 9Dh, 85h,	39h, 85h
db 0FCh, 84h, 77h, 84h,	62h, 84h, 49h, 84h, 0F3h, 83h
db 98h,	83h, 5Eh, 83h, 2Eh, 83h, 1Eh, 83h, 6, 83h, 47h
db 87h,	2Fh, 87h, 0C3h,	86h, 32h, 8Bh, 0Fh, 8Bh, 7Fh, 8Ah
db 70h,	8Ah, 10h, 8Ah, 0F1h, 89h, 0E6h,	89h, 0DBh, 89h
db 0C1h, 89h, 0AAh, 3 dup(89h),	32h, 89h, 17h, 89h, 9
db 89h,	0C5h, 88h, 0ABh, 88h, 93h, 88h,	72h, 88h, 54h
db 88h,	32h, 88h, 13h, 88h, 0C7h, 87h, 0B7h, 87h, 0ADh
db 87h,	0D0h, 8Eh, 0C8h, 8Eh, 0BCh, 8Eh, 0B0h, 8Eh, 8Ch
db 8Eh,	50h, 8Eh, 29h, 8Eh, 1Fh, 8Eh, 3, 8Eh, 0C8h, 8Dh
db 0A5h, 8Dh, 7Ah, 8Dh,	71h, 8Dh, 55h, 8Dh, 49h, 8Dh, 3Dh
db 8Dh,	32h, 8Dh, 1Dh, 8Dh, 0DEh, 8Ch, 0CCh, 8Ch, 0C3h
db 8Ch,	0B4h, 8Ch, 93h,	8Ch, 72h, 8Ch, 5Bh, 8Ch, 47h, 8Ch
db 1Ah,	8Ch, 3,	8Ch, 0F3h, 8Bh,	0D5h, 8Bh, 0B4h, 8Bh, 81h
db 92h,	74h, 92h, 59h, 92h, 44h, 92h, 2Eh, 92h,	0DBh, 91h
db 0D6h, 91h, 0D1h, 91h, 0BAh, 91h, 98h, 91h, 8Ch, 91h
db 63h,	91h, 4Ch, 91h, 34h, 91h, 25h, 91h, 0C5h, 90h, 0BDh
db 90h,	58h, 90h, 4Ch, 90h, 2Ch, 90h, 23h, 90h,	8, 90h
db 0D0h, 8Fh, 3Eh, 8Fh,	0FBh, 8Eh, 39h,	96h, 29h, 96h
db 0C7h, 95h, 0BCh, 95h, 0B3h, 95h, 9Fh, 95h, 8Fh, 95h
db 7Dh,	95h, 28h, 95h, 11h, 95h, 0C7h, 94h, 9Ch, 94h, 7Ah
db 94h,	66h, 94h, 3, 94h, 0EEh,	93h, 0E2h, 93h,	9Dh, 93h
db 85h,	93h, 72h, 93h, 25h, 93h, 0F8h, 92h, 0ECh, 92h
db 0E0h, 92h, 0C8h, 92h, 0B6h, 92h, 9Ah, 92h, 46h, 98h
db 3Ah,	98h, 0C7h, 97h,	93h, 97h, 7Ch, 97h, 70h, 97h, 61h
db 97h,	4Bh, 97h, 36h, 97h, 20h, 97h, 14h, 97h,	0F4h, 96h
db 80h,	96h, 6Ch, 96h, 56h, 96h, 4Dh, 96h, 0BCh, 9Bh, 9Eh
db 9Bh,	71h, 9Bh, 51h, 9Bh, 39h, 9Bh, 2Ah, 9Bh,	1Fh, 9Bh
db 0Bh,	9Bh, 0FCh, 9Ah,	0D5h, 9Ah, 0CAh, 9Ah, 4Fh, 9Ah
db 1Ah,	9Ah, 0FEh, 99h,	0D8h, 99h, 0CEh, 99h, 96h, 99h
db 81h,	99h, 55h, 99h, 3Fh, 99h, 1Ch, 99h, 8, 99h, 0F1h
db 98h,	0DDh, 98h, 0BAh, 98h, 0A6h, 98h, 93h, 98h, 7Bh
db 98h,	67h, 98h, 0A8h,	9Fh, 9Ch, 9Fh, 8Ch, 9Fh, 68h, 9Fh
db 41h,	9Fh, 26h, 9Fh, 0Ch, 9Fh, 0ECh, 9Eh, 0ACh, 9Eh
db 95h,	9Eh, 65h, 9Eh, 26h, 9Eh, 1Dh, 9Eh, 0D5h
byte_4E3C4	db 9Dh,	0A2h, 9Dh, 0Dh,	9Dh, 0C8h, 9Ch,	4Ah, 9Ch, 14h
db 9Ch,	4Dh, 0A3h, 35h,	0A3h, 4, 0A3h, 0F1h, 0A2h, 0BEh
db 0A2h, 0B5h, 0A2h, 0A7h, 0A2h, 92h, 0A2h, 7Dh, 0A2h
db 68h,	0A2h, 56h, 0A2h, 44h, 0A2h, 29h, 0A2h, 17h, 0A2h
db 0F6h, 0A1h, 0E1h, 0A1h, 0CCh, 0A1h, 0BEh, 0A1h, 0AEh
db 0A1h, 0A3h, 0A1h, 87h, 0A1h,	74h, 0A1h, 61h,	0A1h, 56h
db 0A1h, 42h, 0A1h, 0Eh, 0A1h, 5, 0A1h,	0EBh, 0A0h, 0CBh
db 0A0h, 0AFh, 0A0h, 73h, 0A0h,	4, 0A0h, 5Bh, 0A5h, 40h
db 0A5h, 3Bh, 0A5h, 33h, 0A5h, 1Ch, 0A5h, 8, 0A5h, 0F8h
db 0A4h, 0E8h, 0A4h, 0D5h, 0A4h, 0BCh, 0A4h, 0A1h, 0A4h
db 91h,	0A4h, 6Dh, 0A4h, 5Ah, 0A4h, 55h, 0A4h, 4Dh, 0A4h
db 3Ch,	0A4h, 31h, 0A4h, 0Ch, 0A4h, 0FBh, 0A3h,	0E0h, 0A3h
db 0CCh, 0A3h, 9Eh, 0A3h, 90h, 0A3h, 74h, 0A3h,	14h, 0A9h
db 8, 0A9h, 0F5h, 0A8h,	0B5h, 0A8h, 8Bh, 0A8h, 76h, 0A8h
db 54h,	0A8h, 27h, 0A8h, 0A0h, 0A7h, 89h, 0A7h,	56h, 0A7h
db 24h,	0A7h, 2, 0A7h, 0C9h, 0A6h, 9Eh,	0A6h, 7Eh, 0A6h
db 67h,	0A6h, 53h, 0A6h, 22h, 0A6h, 0FBh, 0A5h,	0D0h, 0A5h
db 0B0h, 0A5h, 9Ch, 0A5h, 88h, 0A5h, 6Bh, 0A5h,	0B0h, 0ACh
db 95h,	0ACh, 81h, 0ACh, 6Eh, 0ACh, 5Dh, 0ACh, 30h, 0ACh
db 1Ch,	0ACh, 4, 0ACh, 0CBh, 0ABh, 0BCh, 0ABh, 96h, 0ABh
db 81h,	0ABh, 54h, 0ABh, 40h, 0ABh, 29h, 0ABh, 0FDh, 0AAh
db 0D1h, 0AAh, 0BAh, 0AAh, 0A3h, 0AAh, 8Ah, 0AAh, 4Dh
db 0AAh, 20h, 0AAh, 6, 0AAh, 0EFh, 0A9h, 0D8h, 0A9h, 0C0h
db 0A9h, 99h, 0A9h, 74h, 0A9h, 5Ch, 0A9h, 43h, 0A9h, 34h
db 0A9h, 25h, 0A9h, 6Dh, 0B0h, 59h, 0B0h, 4Ah, 0B0h, 3Dh
db 0B0h, 0E3h, 0AFh, 0BCh, 0AFh, 91h, 0AFh, 6Fh, 0AFh
db 5Bh,	0AFh, 44h, 0AFh, 2Ch, 0AFh, 7, 0AFh, 0F0h, 0AEh
db 0DCh, 0AEh, 0BFh, 0AEh, 8Ch,	0AEh, 67h, 0AEh, 2Fh, 0AEh
db 14h,	0AEh, 0D6h, 0ADh, 0A9h,	0ADh, 64h, 0ADh, 53h, 0ADh
db 3Fh,	0ADh, 1Fh, 0ADh, 0Bh, 0ADh, 0F7h, 0ACh,	28h, 0B4h
db 0Ch,	0B4h, 0FFh, 0B3h, 0E3h,	0B3h, 0D3h, 0B3h, 0ADh
db 0B3h, 9Eh, 0B3h, 7Ah, 0B3h, 5Bh, 0B3h, 49h, 0B3h, 12h
db 0B3h, 0F6h, 0B2h, 0E9h, 0B2h, 0C5h, 0B2h, 0B0h, 0B2h
db 0A8h, 0B2h, 96h, 0B2h, 7Ch, 0B2h, 3Ch, 0B2h,	25h, 0B2h
db 3, 0B2h, 0EAh, 0B1h,	0B9h, 0B1h, 40h, 0B1h, 2Ch, 0B1h
db 14h,	0B1h, 0DCh, 0B0h, 0C2h,	0B0h, 0A8h, 0B0h, 9Fh
db 0B0h, 8Eh, 0B0h, 0FBh, 0B6h,	0DEh, 0B6h, 0BFh, 0B6h
db 92h,	0B6h, 8Ah, 0B6h, 5Eh, 0B6h, 52h, 0B6h, 42h, 0B6h
db 0D0h, 0B5h, 0BEh, 0B5h, 81h,	0B5h, 7Ah, 0B5h, 6Eh, 0B5h
db 63h,	0B5h, 4Fh, 0B5h, 42h, 0B5h, 31h, 0B5h, 11h, 0B5h
db 0FDh, 0B4h, 0E9h, 0B4h, 0D5h, 0B4h, 0B2h, 0B4h, 9Bh
db 0B4h, 62h, 0B4h, 44h, 0B4h, 37h, 0B4h, 8Dh, 0BAh, 76h
db 0BAh, 4Ah, 0BAh, 20h, 0BAh, 12h, 0BAh, 0F2h,	0B9h, 0C2h
db 0B9h, 50h, 0B9h, 0F6h, 0B8h,	0DAh, 0B8h, 0A6h, 0B8h
db 8Ah,	0B8h, 6Fh, 0B8h, 41h, 0B8h, 0F5h, 0B7h,	0E1h, 0B7h
db 0CDh, 0B7h, 92h, 0B7h, 9Ch, 0BDh, 81h, 0BDh,	6Ah, 0BDh
db 3Eh,	0BDh, 2Dh, 0BDh, 1Eh, 0BDh, 0Ah, 0BDh, 0EFh, 0BCh
db 0ADh, 0BCh, 29h, 0BCh, 0E9h,	3 dup(0BBh), 0ACh, 0BBh
db 9Ah,	0BBh, 73h, 0BBh, 1Bh, 0BBh, 79h, 0C1h, 3Ah, 0C1h
db 2Bh,	0C1h, 17h, 0C1h, 0F7h, 0C0h, 0E3h, 0C0h, 89h, 0C0h
db 69h,	0C0h, 3Ah, 0C0h, 0E3h, 0BFh, 0CBh, 0BFh, 0B3h
db 0BFh, 3Bh, 0BFh, 0D2h, 0BEh,	8Fh, 0BEh, 41h,	0BEh, 24h
db 0BEh, 31h, 0C4h, 19h, 0C4h, 0EDh
db 0C3h, 0CCh, 0C3h, 75h, 0C3h,	3Fh, 0C3h, 2Bh,	0C3h, 0BCh
db 0C2h, 0A6h, 0C2h, 9Ah, 0C2h,	86h, 0C2h, 54h,	0C2h, 31h
db 0C2h, 1Ah, 0C2h, 0EFh, 0C1h,	0B9h, 0C1h, 21h, 0C8h
db 4, 2	dup(0C8h), 0C7h, 0B9h, 0C7h, 0A5h, 0C7h, 99h, 0C7h
db 8Dh,	0C7h, 80h, 0C7h, 6Ah, 0C7h, 44h, 0C7h, 35h, 0C7h
db 26h,	0C7h, 14h, 0C7h, 0F1h, 0C6h, 0E9h, 0C6h, 0D2h
db 0C6h, 0C3h, 0C6h, 0B8h, 0C6h, 85h, 0C6h, 72h, 0C6h
db 42h,	0C6h, 34h, 0C6h, 0E7h, 0C5h, 0C4h, 0C5h, 7Eh, 0C5h
db 72h,	0C5h, 65h, 0C5h, 2Eh, 0C5h, 0FCh, 0C4h,	0E4h, 0C4h
db 0A5h, 0C4h, 96h, 0C4h, 8Dh, 0C4h, 0DEh, 0CBh, 0BFh
db 0CBh, 0A2h, 0CBh, 8Fh, 0CBh,	4Dh, 0CBh, 3Eh,	0CBh, 39h
db 0CBh, 22h, 0CBh, 0FAh, 0CAh,	0E2h, 0CAh, 5Eh, 0CAh
db 49h,	0CAh, 40h, 0CAh, 4, 0CAh, 0D1h,	0C9h, 9Ah, 0C9h
db 42h,	0C9h, 36h, 0C9h, 29h, 0C9h, 15h, 0C9h, 9, 0C9h
db 0EAh, 0C8h, 0DEh, 0C8h, 0B7h, 0C8h, 97h, 0C8h, 76h
db 0C8h, 63h, 0C8h, 3, 0CDh, 0E9h, 0CCh, 0E1h, 0CCh, 0CBh
db 0CCh, 0B5h, 0CCh, 0A0h, 0CCh, 90h, 0CCh, 87h, 0CCh
db 77h,	0CCh, 6Fh, 0CCh, 4Ch, 0CCh, 39h, 0CCh, 2Ch, 0CCh
db 1Bh,	0CCh, 0Eh, 0CCh, 1, 0CCh, 0EEh,	0CBh, 0B8h, 0D0h
db 0A7h, 0D0h, 90h, 0D0h, 6Dh, 0D0h, 59h, 0D0h,	3Eh, 0D0h
db 7, 0D0h, 0F5h, 0CFh,	0D4h, 0CFh, 0B8h, 0CFh,	8Dh, 0CFh
db 7Dh,	0CFh, 69h, 0CFh, 5Ch, 0CFh, 1Eh, 0CFh, 16h, 0CFh
db 6, 0CFh, 0F7h, 0CEh,	0EBh, 0CEh, 0DBh, 0CEh,	0CDh, 0CEh
db 0BFh, 0CEh, 0B4h, 0CEh, 0ABh, 0CEh, 73h, 0CEh, 42h
db 0CEh, 32h, 0CEh, 17h, 0CEh, 0C2h, 0CDh, 0A6h, 0CDh
db 8Fh,	0CDh, 7Ch, 0CDh, 64h, 0CDh, 4Fh, 0CDh, 40h, 0CDh
db 19h,	0D2h, 0FEh, 0D0h, 0BBh,	0D5h, 85h, 0D5h, 7Ch, 0D5h
db 5Eh,	0D5h, 49h, 0D5h, 36h, 0D5h, 26h, 0D5h, 13h, 0D5h
db 0FBh, 0D4h, 0D3h, 0D4h, 0B7h, 0D4h, 0A3h, 0D4h, 83h
db 0D4h, 6Fh, 0D4h, 58h, 0D4h, 2Ch, 0D4h, 20h, 0D4h, 15h
db 0D4h, 3, 0D4h, 0EBh,	0D3h, 0BBh, 0D3h, 0AFh,	0D3h, 9Bh
db 0D3h, 86h, 0D3h, 57h, 0D3h, 4Ch, 0D3h, 40h, 0D3h, 14h
db 0D3h, 0D8h, 0D2h, 0CFh, 0D2h, 0BBh, 0D2h, 0ABh, 0D2h
db 8Ch,	0D2h, 5Bh, 0D2h, 5Ah, 0D9h, 46h, 0D9h, 2Dh, 0D9h
db 1Dh,	0D9h, 6, 0D9h, 0E5h, 0D8h, 89h,	0D8h, 6Dh, 0D8h
db 83h,	0D7h, 48h, 0D7h, 0C8h, 0D6h, 0ADh, 0D6h, 43h, 0D6h
db 2Eh,	0D6h, 15h, 0D6h, 0F9h, 0D5h, 0E2h, 0D5h, 9Ah, 0DAh
db 6, 0DAh, 0B1h, 0D9h,	8Ah, 0D9h, 90h,	0DBh, 91h, 0, 0CEh
db 33h,	0CAh, 33h, 0C6h, 33h, 0C2h, 33h, 0BEh, 33h, 0BAh
db 33h,	0B6h, 33h, 0B2h, 33h, 0AEh, 33h, 0AAh, 33h, 0A6h
db 33h,	0A2h, 33h, 9Eh,	33h, 9Ah, 33h, 96h, 33h, 92h, 33h
db 56h,	49h, 52h, 49h, 4Eh, 49h, 4Ah, 49h, 0F0h, 53h, 0ECh
db 53h,	0E8h, 53h, 0E4h, 53h, 9Eh, 54h,	9Ah, 54h, 96h
db 54h,	92h, 54h, 8Eh, 54h, 8Ah, 54h, 86h, 54h,	82h
aTTztvtrtntjtft	db 'T~TzTvTrTnTjTfTbT^TZTVTRT',0
byte_4E790	db 57h,	0FCh, 56h, 0F8h, 56h, 0B2h, 68h, 0AEh, 68h, 0AAh
db 68h,	16h, 6Ah, 12h, 6Ah, 0Ah, 6Eh, 6, 6Eh, 2, 6Eh, 0FEh
db 6Dh,	80h, 75h, 7Ch, 75h, 78h, 75h, 74h, 75h,	70h, 75h
db 6Ch,	75h, 64h, 7Ch, 60h, 7Ch, 5Ch, 7Ch, 0CCh, 7Dh, 0C8h
db 7Dh,	0C4h, 7Dh, 0C0h, 7Dh, 0BCh, 7Dh, 12h, 85h, 0Eh
db 85h,	0Ah, 85h, 6, 85h, 0, 8Fh, 0FCh,	8Eh, 0FEh, 93h
db 0FAh, 93h, 0F6h, 93h, 0F2h, 93h, 84h, 94h, 80h, 94h
db 2Eh,	95h, 2Ah, 95h, 26h, 95h, 82h, 96h, 7Eh,	96h, 7Ah
db 96h,	76h, 96h, 0F0h,	96h, 0ECh, 96h,	0E8h, 96h, 0B4h
db 9Dh,	0B0h, 9Dh, 0ACh, 9Dh, 0A8h, 9Dh, 0A4h, 9Dh, 0A0h
db 9Dh,	9Ch, 9Dh, 98h, 9Dh, 94h, 9Dh, 90h, 9Dh,	8Ch, 9Dh
db 88h,	9Dh, 84h, 9Dh, 80h, 9Dh, 7Ch, 9Dh, 78h,	9Dh, 74h
db 9Dh,	70h, 9Dh, 6Ch, 9Dh, 68h, 9Dh, 64h, 9Dh,	60h, 9Dh
db 5Ch,	9Dh, 58h, 9Dh, 54h, 9Dh, 50h, 9Dh, 4Ch,	9Dh, 48h
db 9Dh,	60h, 9Eh, 5Ch, 9Eh, 58h, 9Eh, 54h, 9Eh,	50h, 9Eh
db 88h,	0A1h, 84h, 0A1h, 80h, 0A1h, 7Ch, 0A1h, 78h, 0A1h
db 74h,	0A1h, 70h, 0A1h, 6Ch, 0A1h, 68h, 0A1h, 64h, 0A1h
db 60h,	0A1h, 5Ch, 0A1h, 0E4h, 0ACh, 0E0h, 0ACh, 0DCh
db 0ACh, 0D8h, 0ACh, 0D4h, 0ACh, 0D0h, 0ACh, 84h, 0C1h
db 4Dh,	0C1h, 18h dup(0)
byte_4E871	db 7FFh	dup(?)
seg001		ends

;     ***************************************************************************

; Segment type:	Uninitialized
seg002		segment	byte stack 'STACK' use16
assume cs:seg002
assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
byte_4F070	db 80h dup(?)
seg002		ends


end start